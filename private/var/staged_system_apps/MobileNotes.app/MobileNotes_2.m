uint64_t type metadata accessor for TagAssignmentViewController()
{
  return objc_opt_self(ICTagAssignmentViewController);
}

uint64_t sub_1001ED468()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001ED48C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  if (*(_QWORD *)(v0 + 72))
    swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

void sub_1001ED4E0()
{
  uint64_t v0;

  sub_1002FEF58(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(void (**)(uint64_t))(v0 + 72));
}

uint64_t sub_1001ED514()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001ED538(void *a1)
{
  sub_1001EC218(a1);
}

void sub_1001ED558(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v4)
    {
      if (a2 < 0)
        v6 = a2;
      else
        v6 = a2 & 0xFFFFFFFFFFFFFF8;
      __CocoaSet.isEqual(to:)(v6, v5);
      return;
    }
    v7 = v5;
    v8 = a2;
LABEL_16:
    sub_1001ED86C(v7, v8);
    return;
  }
  if (v4)
  {
    if (a2 < 0)
      v7 = a2;
    else
      v7 = a2 & 0xFFFFFFFFFFFFFF8;
    v8 = a1;
    goto LABEL_16;
  }
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v29 = a1 + 56;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(a1 + 56);
  sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  v12 = 0;
  v30 = (unint64_t)(v9 + 63) >> 6;
  v13 = a2 + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_42;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v16 >= v30)
      return;
    v17 = *(_QWORD *)(v29 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v30)
        return;
      v17 = *(_QWORD *)(v29 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v30)
          return;
        v17 = *(_QWORD *)(v29 + 8 * v12);
        if (!v17)
        {
          v12 = v16 + 3;
          if (v16 + 3 >= v30)
            return;
          v17 = *(_QWORD *)(v29 + 8 * v12);
          if (!v17)
            break;
        }
      }
    }
LABEL_41:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_42:
    v19 = *(_QWORD *)(a2 + 40);
    v20 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v15);
    v21 = NSObject._rawHashValue(seed:)(v19);
    v22 = -1 << *(_BYTE *)(a2 + 32);
    v23 = v21 & ~v22;
    if (((*(_QWORD *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      goto LABEL_49;
    v31 = v12;
    v24 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v23);
    v25 = static NSObject.== infix(_:_:)(v24);

    if ((v25 & 1) == 0)
    {
      v26 = ~v22;
      while (1)
      {
        v23 = (v23 + 1) & v26;
        if (((*(_QWORD *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
          break;
        v27 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v23);
        v28 = static NSObject.== infix(_:_:)(v27);

        if ((v28 & 1) != 0)
          goto LABEL_23;
      }
LABEL_49:

      return;
    }
LABEL_23:

    v12 = v31;
  }
  v18 = v16 + 4;
  if (v18 >= v30)
    return;
  v17 = *(_QWORD *)(v29 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_41;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v30)
      return;
    v17 = *(_QWORD *)(v29 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_41;
  }
LABEL_52:
  __break(1u);
}

void sub_1001ED86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != __CocoaSet.count.getter())
    return;
  v4 = 0;
  v5 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_6:
    v12 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v11);
    v13 = __CocoaSet.contains(_:)();

    if ((v13 & 1) == 0)
      return;
  }
  v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v14);
  ++v4;
  if (v15)
    goto LABEL_19;
  v4 = v14 + 1;
  if (v14 + 1 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v4);
  if (v15)
  {
LABEL_19:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  v16 = v14 + 2;
  if (v16 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      return;
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1001ED9BC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001ED9E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1001EDA1C()
{
  uint64_t v0;

  sub_10033740C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_1001EDA28(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1001EDA34()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001EDA58()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001EDA8C()
{
  uint64_t v0;

  sub_100354BB4(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

void sub_1001EDAB4(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v2 = 0;
  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v3;
  v8 = (unint64_t)(v5 + 63) >> 6;
  if ((v6 & v3) != 0)
    goto LABEL_6;
LABEL_7:
  v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 < v8)
    {
      v13 = *(_QWORD *)(v4 + 8 * v12);
      ++v2;
      if (v13)
        goto LABEL_22;
      v2 = v12 + 1;
      if (v12 + 1 >= v8)
        goto LABEL_26;
      v13 = *(_QWORD *)(v4 + 8 * v2);
      if (v13)
        goto LABEL_22;
      v2 = v12 + 2;
      if (v12 + 2 >= v8)
        goto LABEL_26;
      v13 = *(_QWORD *)(v4 + 8 * v2);
      if (v13)
        goto LABEL_22;
      v2 = v12 + 3;
      if (v12 + 3 >= v8)
        goto LABEL_26;
      v13 = *(_QWORD *)(v4 + 8 * v2);
      if (v13)
      {
LABEL_22:
        v7 = (v13 - 1) & v13;
        for (i = __clz(__rbit64(v13)) + (v2 << 6); ; i = v10 | (v2 << 6))
        {
          v15 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * i);
          v16 = objc_msgSend(v15, "parentAttachment");
          if (v16)
          {
            v9 = v16;

            if (!v7)
              goto LABEL_7;
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v17 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
            v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
            specialized ContiguousArray._endMutation()(v18);
            if (!v7)
              goto LABEL_7;
          }
LABEL_6:
          v10 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v14 = v12 + 4;
      if (v14 < v8)
      {
        v13 = *(_QWORD *)(v4 + 8 * v14);
        if (v13)
        {
          v2 = v14;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_28;
          if (v2 >= v8)
            break;
          v13 = *(_QWORD *)(v4 + 8 * v2);
          ++v14;
          if (v13)
            goto LABEL_22;
        }
      }
    }
LABEL_26:
    swift_release(a1);
    return;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_1001EDC84()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D4170);
  sub_10012A0B0(v0, (uint64_t)qword_1005D4170);
  return static Logger.archiving.getter();
}

uint64_t sub_1001EDCCC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001EDD0C + 4 * byte_10045A5D0[a1]))(0x6E65644965707974, 0xEE00726569666974);
}

uint64_t sub_1001EDD0C()
{
  return 0x696669746E656469;
}

unint64_t sub_1001EDD2C()
{
  return 0xD000000000000010;
}

uint64_t sub_1001EDF6C()
{
  return 0x6365526F69647561;
}

uint64_t sub_1001EDF90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  char v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 *v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  char v75;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D42E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1001F6294();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.CodingKeys, &type metadata for ICAttachmentArchiveModel.CodingKeys, v11, v9, v10);
  LOBYTE(v69) = *(_BYTE *)v3;
  v75 = 0;
  v12 = sub_1001F62D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    LOBYTE(v69) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v69, v5);
    v15 = *(_QWORD *)(v3 + 24);
    v16 = *(_QWORD *)(v3 + 32);
    LOBYTE(v69) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v69, v5);
    v17 = *(_QWORD *)(v3 + 40);
    v18 = *(_QWORD *)(v3 + 48);
    LOBYTE(v69) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v69, v5);
    v19 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v69) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v69, v5);
    v20 = *(unsigned __int8 *)(v3 + 57);
    LOBYTE(v69) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v69, v5);
    v21 = *(_QWORD *)(v3 + 64);
    v22 = *(_QWORD *)(v3 + 72);
    LOBYTE(v69) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v69, v5);
    v23 = *(_QWORD *)(v3 + 80);
    v24 = *(_QWORD *)(v3 + 88);
    LOBYTE(v69) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v69, v5);
    v25 = (int *)type metadata accessor for ICAttachmentArchiveModel(0);
    v26 = v3 + v25[12];
    LOBYTE(v69) = 8;
    v27 = type metadata accessor for Date(0);
    v28 = sub_100019C6C(&qword_1005D37B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v69, v5, v27, v28);
    v29 = v3 + v25[13];
    LOBYTE(v69) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v69, v5, v27, v28);
    v69 = *(_OWORD *)(v3 + v25[14]);
    v75 = 10;
    v30 = sub_10013E9A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for Data, v30);
    v31 = (uint64_t *)(v3 + v25[15]);
    v32 = *v31;
    v33 = v31[1];
    LOBYTE(v69) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v69, v5);
    v34 = (__int128 *)(v3 + v25[16]);
    v35 = *((_BYTE *)v34 + 32);
    v36 = v34[1];
    v69 = *v34;
    v70 = v36;
    LOBYTE(v71) = v35;
    v75 = 12;
    type metadata accessor for CGRect(0);
    v38 = v37;
    v39 = sub_100019C6C(&qword_1005D4300, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, v38, v39);
    v40 = (__int128 *)(v3 + v25[17]);
    v41 = *((_BYTE *)v40 + 64);
    v42 = v40[1];
    v69 = *v40;
    v70 = v42;
    v43 = v40[3];
    v71 = v40[2];
    v72 = v43;
    LOBYTE(v73) = v41;
    v75 = 13;
    v44 = sub_1001F631C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICAttachmentArchiveModel.Cropping, v44);
    LOBYTE(v69) = *(_BYTE *)(v3 + v25[18]);
    v75 = 14;
    v45 = sub_1001F6360();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICAttachmentArchiveModel.Orientations, v45);
    LOBYTE(v69) = *(_BYTE *)(v3 + v25[19]);
    v75 = 15;
    v46 = sub_1001F63A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICAttachmentArchiveModel.ImageFilters, v46);
    v47 = v3 + v25[20];
    LOBYTE(v69) = 16;
    v48 = type metadata accessor for URL(0);
    v49 = sub_100019C6C(&qword_1005D1598, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v47, &v69, v5, v48, v49);
    v69 = *(_OWORD *)(v3 + v25[21]);
    v75 = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for Data, v30);
    v50 = (__int128 *)(v3 + v25[22]);
    v51 = *((_BYTE *)v50 + 16);
    v69 = *v50;
    LOBYTE(v70) = v51;
    v75 = 18;
    v52 = sub_1001F63E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICAttachmentArchiveModel.Coordinate, v52);
    *(_QWORD *)&v69 = *(_QWORD *)(v3 + v25[23]);
    v75 = 19;
    v53 = sub_100012E18(&qword_1005D4328);
    v54 = sub_1001F6450(&qword_1005D4330, &qword_1005D4328, (void (*)(void))sub_1001F642C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, v53, v54);
    v55 = *(unsigned __int8 *)(v3 + v25[24]);
    LOBYTE(v69) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v55, &v69, v5);
    *(_QWORD *)&v69 = *(_QWORD *)(v3 + v25[25]);
    v75 = 21;
    v56 = sub_100012E18(&qword_1005D39A8);
    v57 = sub_1001F673C(&qword_1005D4348, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, v56, v57);
    v58 = (uint64_t *)(v3 + v25[26]);
    v59 = *v58;
    v60 = v58[1];
    LOBYTE(v69) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v59, v60, &v69, v5);
    LOBYTE(v69) = *(_BYTE *)(v3 + v25[27]);
    v75 = 23;
    v61 = sub_1001F64F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICNoteArchiveModel.AttachmentViewTypes, v61);
    v62 = (__int128 *)(v3 + v25[28]);
    v63 = *((_QWORD *)v62 + 8);
    v64 = *((_BYTE *)v62 + 72);
    v65 = v62[1];
    v69 = *v62;
    v70 = v65;
    v66 = v62[3];
    v71 = v62[2];
    v72 = v66;
    v73 = v63;
    v74 = v64;
    v75 = 24;
    v67 = sub_1001F653C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &_s14AudioRecordingVN, v67);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001EE6E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(void);
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  char *v59;
  unint64_t v60;
  char v61;
  __int128 v62;
  char *v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __int128 v68;
  char *v69;
  unint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _QWORD *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  char v131;
  char v132;

  v125 = a1;
  v105 = a2;
  v2 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v2);
  v104 = (uint64_t)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v5 = __chkstk_darwin(v4);
  v107 = (uint64_t)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v109 = (char *)&v98 - v7;
  v111 = sub_100012E18(&qword_1005D4360);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  *(_QWORD *)&v124 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for ICAttachmentArchiveModel(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v12 = 4;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *((_WORD *)v12 + 28) = 514;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  v13 = &v12[*(int *)(v10 + 48)];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 56);
  *(_QWORD *)&v123 = v13;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v15)(v13, 1, 1, v14);
  *(_QWORD *)&v121 = &v12[v9[13]];
  v108 = v14;
  v15();
  v16 = &v12[v9[14]];
  v122 = xmmword_10045AED0;
  *(_QWORD *)&v120 = v16;
  *(_OWORD *)v16 = xmmword_10045AED0;
  v17 = &v12[v9[15]];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v119 = v17;
  v18 = &v12[v9[16]];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  v18[32] = 1;
  v19 = &v12[v9[17]];
  *((_OWORD *)v19 + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  v19[64] = 1;
  v106 = v9[18];
  v12[v106] = 4;
  v103 = v9[19];
  v12[v103] = 5;
  v20 = (uint64_t)&v12[v9[20]];
  v21 = type metadata accessor for URL(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v118 = v20;
  v22(v20, 1, 1, v21);
  v117 = &v12[v9[21]];
  *(_OWORD *)v117 = v122;
  v23 = &v12[v9[22]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v116 = v9[23];
  *(_QWORD *)&v12[v116] = 0;
  v24 = v9[24];
  v12[v24] = 2;
  v114 = v9[25];
  *(_QWORD *)&v12[v114] = 0;
  v25 = &v12[v9[26]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v115 = v25;
  v26 = v9[27];
  v12[v26] = 3;
  v27 = v9[28];
  *(_QWORD *)&v122 = v12;
  v28 = &v12[v27];
  *(_OWORD *)v28 = xmmword_10045A5A0;
  *((_OWORD *)v28 + 1) = 0u;
  *((_OWORD *)v28 + 2) = 0u;
  *((_OWORD *)v28 + 3) = 0u;
  v113 = (uint64_t *)&v12[v27];
  *(_OWORD *)(v28 + 57) = 0u;
  v30 = v125[3];
  v29 = v125[4];
  sub_10012D19C(v125, v30);
  v31 = sub_1001F6294();
  v32 = v112;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.CodingKeys, &type metadata for ICAttachmentArchiveModel.CodingKeys, v31, v30, v29);
  if (v32)
  {
    v36 = (_QWORD *)v122;
    sub_1000153C0(v125);
    v37 = v113;
    swift_bridgeObjectRelease(v36[4]);
    swift_bridgeObjectRelease(v36[6]);
    swift_bridgeObjectRelease(v36[9]);
    swift_bridgeObjectRelease(v36[11]);
    sub_100012DDC(v123, (uint64_t *)&unk_1005D7B20);
    sub_100012DDC(v121, (uint64_t *)&unk_1005D7B20);
    sub_1001672D8(*(_QWORD *)v120, *(_QWORD *)(v120 + 8));
    swift_bridgeObjectRelease(*((_QWORD *)v119 + 1));
    sub_100012DDC(v118, &qword_1005CEFD0);
    sub_1001672D8(*(_QWORD *)v117, *((_QWORD *)v117 + 1));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v36 + v116));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v36 + v114));
    swift_bridgeObjectRelease(*((_QWORD *)v115 + 1));
    return sub_1001F414C(*v37, v37[1], v37[2], v37[3], v37[4], v37[5], v37[6], v37[7], v37[8]);
  }
  else
  {
    v112 = v18;
    v102 = v19;
    v99 = v23;
    v100 = v24;
    v101 = v26;
    v33 = v110;
    v132 = 0;
    v34 = sub_1001F6580();
    v35 = v111;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v126, &type metadata for ICArchiveModels, &v132, v111, &type metadata for ICArchiveModels, v34);
    v38 = v122;
    *(_BYTE *)v122 = v126;
    LOBYTE(v126) = 1;
    *(_QWORD *)(v38 + 8) = KeyedDecodingContainer.decode(_:forKey:)(&v126, v35);
    *(_QWORD *)(v38 + 16) = v39;
    LOBYTE(v126) = 2;
    *(_QWORD *)(v38 + 24) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v35);
    *(_QWORD *)(v38 + 32) = v40;
    LOBYTE(v126) = 3;
    *(_QWORD *)(v38 + 40) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v35);
    *(_QWORD *)(v38 + 48) = v41;
    LOBYTE(v126) = 4;
    *(_BYTE *)(v38 + 56) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v35);
    LOBYTE(v126) = 5;
    *(_BYTE *)(v38 + 57) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v35);
    LOBYTE(v126) = 6;
    *(_QWORD *)(v38 + 64) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v35);
    *(_QWORD *)(v38 + 72) = v42;
    LOBYTE(v126) = 7;
    *(_QWORD *)(v38 + 80) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v35);
    *(_QWORD *)(v38 + 88) = v43;
    LOBYTE(v126) = 8;
    v44 = sub_100019C6C(&qword_1005D36E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v45 = (uint64_t)v109;
    v46 = v108;
    v98 = v44;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v108, &v126, v35, v108, v44);
    sub_100164108(v45, v123, (uint64_t *)&unk_1005D7B20);
    LOBYTE(v126) = 9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v46, &v126, v35, v46, v98);
    sub_100164108(v107, v121, (uint64_t *)&unk_1005D7B20);
    v132 = 10;
    v47 = sub_10013E95C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v132, v111, &type metadata for Data, v47);
    v48 = v126;
    v49 = (_OWORD *)v120;
    sub_1001672D8(*(_QWORD *)v120, *(_QWORD *)(v120 + 8));
    *v49 = v48;
    LOBYTE(v126) = 11;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v111);
    v52 = v51;
    v53 = (uint64_t *)v119;
    swift_bridgeObjectRelease(*((_QWORD *)v119 + 1));
    *v53 = v50;
    v53[1] = v52;
    type metadata accessor for CGRect(0);
    v55 = v54;
    v132 = 12;
    v56 = sub_100019C6C(&qword_1005D4370, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v55, &v132, v111, v55, v56);
    v57 = v128;
    v58 = v127;
    v59 = v112;
    *(_OWORD *)v112 = v126;
    *((_OWORD *)v59 + 1) = v58;
    v59[32] = v57;
    v132 = 13;
    v60 = sub_1001F65C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAttachmentArchiveModel.Cropping, &v132, v111, &type metadata for ICAttachmentArchiveModel.Cropping, v60);
    v61 = v130;
    v62 = v127;
    v63 = v102;
    *(_OWORD *)v102 = v126;
    *((_OWORD *)v63 + 1) = v62;
    v64 = v129;
    *((_OWORD *)v63 + 2) = v128;
    *((_OWORD *)v63 + 3) = v64;
    v63[64] = v61;
    v132 = 14;
    v65 = sub_1001F6608();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAttachmentArchiveModel.Orientations, &v132, v111, &type metadata for ICAttachmentArchiveModel.Orientations, v65);
    *(_BYTE *)(v122 + v106) = v126;
    v132 = 15;
    v66 = sub_1001F664C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAttachmentArchiveModel.ImageFilters, &v132, v111, &type metadata for ICAttachmentArchiveModel.ImageFilters, v66);
    *(_BYTE *)(v122 + v103) = v126;
    LOBYTE(v126) = 16;
    v67 = sub_100019C6C(&qword_1005D1550, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v126, v111, v21, v67);
    sub_100164108(v104, v118, &qword_1005CEFD0);
    v132 = 17;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v132, v111, &type metadata for Data, v47);
    v68 = v126;
    v69 = v117;
    sub_1001672D8(*(_QWORD *)v117, *((_QWORD *)v117 + 1));
    *(_OWORD *)v69 = v68;
    v132 = 18;
    v70 = sub_1001F6690();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAttachmentArchiveModel.Coordinate, &v132, v111, &type metadata for ICAttachmentArchiveModel.Coordinate, v70);
    v71 = v127;
    v72 = v99;
    *(_OWORD *)v99 = v126;
    v72[16] = v71;
    v73 = sub_100012E18(&qword_1005D4328);
    v132 = 19;
    v74 = sub_1001F6450(&qword_1005D4398, &qword_1005D4328, (void (*)(void))sub_1001F66D4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v73, &v132, v111, v73, v74);
    v75 = v126;
    v76 = v116;
    v77 = v122;
    swift_bridgeObjectRelease(*(_QWORD *)(v122 + v116));
    *(_QWORD *)(v77 + v76) = v75;
    LOBYTE(v126) = 20;
    v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v111);
    *(_BYTE *)(v122 + v100) = v78;
    v79 = sub_100012E18(&qword_1005D39A8);
    v132 = 21;
    v80 = sub_1001F673C(&qword_1005D43B0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v79, &v132, v111, v79, v80);
    v81 = v126;
    v82 = v114;
    v83 = v122;
    swift_bridgeObjectRelease(*(_QWORD *)(v122 + v114));
    *(_QWORD *)(v83 + v82) = v81;
    LOBYTE(v126) = 22;
    v84 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v111);
    v86 = v85;
    v87 = (uint64_t *)v115;
    swift_bridgeObjectRelease(*((_QWORD *)v115 + 1));
    *v87 = v84;
    v87[1] = v86;
    v132 = 23;
    v88 = sub_1001F679C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICNoteArchiveModel.AttachmentViewTypes, &v132, v111, &type metadata for ICNoteArchiveModel.AttachmentViewTypes, v88);
    *(_BYTE *)(v122 + v101) = v126;
    v132 = 24;
    v89 = sub_1001F67E0();
    v90 = v111;
    v91 = v124;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14AudioRecordingVN, &v132, v111, &_s14AudioRecordingVN, v89);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v91, v90);
    v123 = v127;
    v124 = v126;
    v121 = v128;
    v120 = v129;
    v92 = v130;
    LOBYTE(v90) = v131;
    v93 = v113;
    sub_1001F414C(*v113, v113[1], v113[2], v113[3], v113[4], v113[5], v113[6], v113[7], v113[8]);
    v94 = v123;
    *(_OWORD *)v93 = v124;
    *((_OWORD *)v93 + 1) = v94;
    v95 = v120;
    *((_OWORD *)v93 + 2) = v121;
    *((_OWORD *)v93 + 3) = v95;
    v93[8] = v92;
    *((_BYTE *)v93 + 72) = v90;
    v96 = v122;
    sub_1001F6824(v122, v105);
    sub_1000153C0(v125);
    return sub_1001F6868(v96);
  }
}

uint64_t sub_1001EF45C()
{
  unsigned __int8 *v0;

  return sub_1001EDCCC(*v0);
}

uint64_t sub_1001EF464@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001F3164(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001EF488(_BYTE *a1@<X8>)
{
  *a1 = 25;
}

uint64_t sub_1001EF494(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001F6294();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EF4BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001F6294();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001EF4E4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _OWORD *v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unsigned int v61;
  unint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  id v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  id v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  id v112;
  void *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t *v119;
  __int128 v120;
  id v121;
  void *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  id v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  char *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[72];
  _OWORD v160[3];
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  char v164;
  CGRect v165;
  CGRect v166;

  *(_QWORD *)&v157 = a2;
  v5 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v5);
  v155 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v8 = __chkstk_darwin(v7);
  v150 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v138 - v10;
  *(_BYTE *)a3 = 4;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_WORD *)(a3 + 56) = 514;
  v12 = (int *)type metadata accessor for ICAttachmentArchiveModel(0);
  v13 = a3 + v12[12];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 56);
  v148 = v13;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(v13, 1, 1, v14);
  v149 = a3 + v12[13];
  v15();
  v16 = (uint64_t *)(a3 + v12[14]);
  v156 = xmmword_10045AED0;
  v140 = v16;
  *(_OWORD *)v16 = xmmword_10045AED0;
  v17 = (_QWORD *)(a3 + v12[15]);
  *v17 = 0;
  v17[1] = 0;
  *(_QWORD *)&v158 = v17;
  v18 = a3 + v12[16];
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_BYTE *)(v18 + 32) = 1;
  v19 = a3 + v12[17];
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_BYTE *)(v19 + 64) = 1;
  v151 = v12[18];
  *(_BYTE *)(a3 + v151) = 4;
  v152 = v12[19];
  *(_BYTE *)(a3 + v152) = 5;
  v20 = a3 + v12[20];
  v21 = type metadata accessor for URL(0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v153 = v20;
  v143 = v21;
  v142 = v22;
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v20, 1, 1);
  v154 = (uint64_t *)(a3 + v12[21]);
  *(_OWORD *)v154 = v156;
  v23 = a3 + v12[22];
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  v145 = (_QWORD *)v23;
  *(_BYTE *)(v23 + 16) = 1;
  v146 = v12[23];
  *(_QWORD *)(a3 + v146) = 0;
  v147 = v12[24];
  *(_BYTE *)(a3 + v147) = 2;
  v141 = v12[25];
  *(_QWORD *)(a3 + v141) = 0;
  v24 = (_QWORD *)(a3 + v12[26]);
  *v24 = 0;
  v24[1] = 0;
  *(_QWORD *)&v156 = v24;
  v144 = v12[27];
  *(_BYTE *)(a3 + v144) = 3;
  v25 = (_OWORD *)(a3 + v12[28]);
  *v25 = xmmword_10045A5A0;
  v25[1] = 0u;
  v25[2] = 0u;
  v25[3] = 0u;
  v139 = (uint64_t *)v25;
  *(_OWORD *)((char *)v25 + 57) = 0u;
  v26 = objc_msgSend(a1, "identifier");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0xE000000000000000;
  }
  *(_QWORD *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 16) = v30;
  v31 = objc_msgSend(a1, "typeUTI");
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  v36 = v157;
  *(_QWORD *)(a3 + 64) = v33;
  *(_QWORD *)(a3 + 72) = v35;
  v37 = a1;
  v38 = sub_1001F2E4C(v37);
  v40 = v39;

  *(_QWORD *)(a3 + 80) = v38;
  *(_QWORD *)(a3 + 88) = v40;
  v41 = objc_msgSend(v37, "creationDate");
  if (v41)
  {
    v42 = v41;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  v44 = (uint64_t)v150;
  v45 = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v15)(v11, v43, 1, v14);
  sub_100164108((uint64_t)v11, v148, (uint64_t *)&unk_1005D7B20);
  v46 = objc_msgSend(v37, "modificationDate");
  if (v46)
  {
    v47 = v46;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

    v45 = 0;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(v44, v45, 1, v14);
  sub_100164108(v44, v149, (uint64_t *)&unk_1005D7B20);
  v48 = objc_msgSend(v37, "title");
  if (v48)
  {
    v49 = v48;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v52 = v51;

  }
  else
  {
    v50 = 0;
    v52 = 0;
  }
  v53 = (uint64_t *)v158;
  swift_bridgeObjectRelease(*(_QWORD *)(v158 + 8));
  *v53 = v50;
  v53[1] = v52;
  objc_msgSend(v37, "bounds");
  v54 = 0;
  v166.origin.x = 0.0;
  v166.origin.y = 0.0;
  v166.size.width = 0.0;
  v166.size.height = 0.0;
  v55 = CGRectEqualToRect(v165, v166);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  if (!v55)
  {
    objc_msgSend(v37, "bounds");
    v54 = v59;
  }
  *(_QWORD *)v18 = v54;
  *(_QWORD *)(v18 + 8) = v56;
  *(_QWORD *)(v18 + 16) = v57;
  *(_QWORD *)(v18 + 24) = v58;
  *(_BYTE *)(v18 + 32) = v55;
  v60 = v37;
  sub_1001F3BEC(v60, (uint64_t)v159);

  sub_1001F3DC8((uint64_t)v159, v19);
  *(_BYTE *)(a3 + v151) = sub_1001F3E10((int)objc_msgSend(v60, "orientation"));
  v61 = objc_msgSend(v60, "imageFilterType");
  v62 = 0x403020105uLL >> (8 * v61);
  if (v61 >= 5)
    LOBYTE(v62) = 5;
  *(_BYTE *)(a3 + v152) = v62;
  v63 = objc_msgSend(v60, "urlString");
  if (v63)
  {
    v64 = v63;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v67 = v66;

    swift_bridgeObjectRetain(v67);
    v68 = (uint64_t)v155;
    URL.init(string:)(v65, v67);
    swift_bridgeObjectRelease_n(v67, 2);
  }
  else
  {
    v68 = (uint64_t)v155;
    v142(v155, 1, 1, v143);
  }
  sub_100164108(v68, v153, &qword_1005CEFD0);
  v69 = objc_msgSend(v60, "synapseData");
  if (v69)
  {
    v70 = v69;
    v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v73 = v72;

  }
  else
  {
    v71 = 0;
    v73 = 0xF000000000000000;
  }
  v74 = v154;
  sub_1001672D8(*v154, v154[1]);
  *v74 = v71;
  v74[1] = v73;
  v75 = objc_msgSend(v60, "synapseBasedMetadata");
  v76 = v75;
  if (v75)
  {
    v77 = objc_msgSend(v75, "selectedText");

    if (v77)
    {
      v76 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      v79 = v78;

      goto LABEL_30;
    }
    v76 = 0;
  }
  v79 = 0;
LABEL_30:
  v80 = (_QWORD *)v156;
  swift_bridgeObjectRelease(*(_QWORD *)(v156 + 8));
  *v80 = v76;
  v80[1] = v79;
  v81 = objc_msgSend(v60, "mergeablePreferredViewSize");
  if (v81)
  {
    v82 = v81;
    v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v81);
    v85 = v84;

    sub_10013DD30(v83, v85);
    v86 = sub_1003EE2E8((uint64_t)objc_msgSend(v60, "preferredViewSize"));
    *(_BYTE *)(a3 + v144) = v86;
  }
  v87 = objc_msgSend(v60, "location");
  if (v87)
  {
    v88 = v87;
    objc_msgSend(v87, "latitude");
    v90 = v89;
    objc_msgSend(v88, "longitude");
    v92 = v91;

    v93 = v145;
    *v145 = v90;
    v93[1] = v92;
    *((_BYTE *)v93 + 16) = 0;
  }
  v94 = objc_msgSend(v60, "tableModel");
  if (v94)
  {
    v95 = v94;
    v96 = sub_1001F3F3C(v94, v36);
    v97 = v146;
    swift_bridgeObjectRelease(*(_QWORD *)(a3 + v146));
    *(_QWORD *)(a3 + v97) = v96;
    v98 = objc_msgSend(v95, "table");
    LOBYTE(v97) = objc_msgSend(v98, "isRightToLeft");

    sub_1001F40D4((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
    *(_BYTE *)(a3 + v147) = v97;
    if ((*(_BYTE *)(v36 + 51) & 1) == 0)
    {
LABEL_36:

      return;
    }
  }
  else
  {
    v99 = objc_msgSend(v60, "attachmentModel");
    v100 = objc_opt_self(ICAttachmentGalleryModel);
    v101 = (void *)swift_dynamicCastObjCClass(v99, v100);
    if (v101)
    {
      v102 = objc_msgSend(v101, "subAttachmentIdentifiers");
      v103 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v102, &type metadata for String);

      v104 = v141;
      swift_bridgeObjectRelease(*(_QWORD *)(a3 + v141));
      sub_1001F40D4((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
      *(_QWORD *)(a3 + v104) = v103;
      if ((*(_BYTE *)(v36 + 51) & 1) == 0)
        goto LABEL_36;
    }
    else
    {

      v110 = objc_msgSend(v60, "audioModel");
      if (!v110)
        goto LABEL_58;
      v111 = v110;
      v112 = objc_msgSend(v110, "audioDocument");

      if (!v112)
      {
        __break(1u);
        return;
      }
      v113 = (void *)ICTTAudioDocument.root.getter();

      if (v113)
      {
        v114 = v60;
        sub_1001F40D4((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F410C);
        sub_1003C005C(v113, v114, (_QWORD *)v36, (uint64_t)v160);
        v158 = v160[0];
        v157 = v160[1];
        v156 = v160[2];
        v115 = v161;
        v116 = v162;
        v117 = v163;
        v118 = v164;
        v119 = v139;
        sub_1001F414C(*v139, v139[1], v139[2], v139[3], v139[4], v139[5], v139[6], v139[7], v139[8]);
        sub_1001F40D4((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
        v120 = v157;
        *(_OWORD *)v119 = v158;
        *((_OWORD *)v119 + 1) = v120;
        *((_OWORD *)v119 + 2) = v156;
        v119[6] = v115;
        v119[7] = v116;
        v119[8] = v117;
        *((_BYTE *)v119 + 72) = v118;
        if ((*(_BYTE *)(v36 + 51) & 1) == 0)
          goto LABEL_36;
      }
      else
      {
LABEL_58:
        v132 = objc_msgSend(v60, "mergeableData");
        if (v132)
        {
          v133 = v132;
          v134 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v132);
          v136 = v135;

        }
        else
        {
          v134 = 0;
          v136 = 0xF000000000000000;
        }
        v137 = v140;
        sub_1001672D8(*v140, v140[1]);
        sub_1001F40D4((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
        *v137 = v134;
        v137[1] = v136;
        if ((*(_BYTE *)(v36 + 51) & 1) == 0)
          goto LABEL_36;
      }
    }
  }
  v105 = objc_msgSend(v60, "note");
  v106 = v105;
  if (v105)
  {
    v107 = objc_msgSend(v105, "identifier");

    if (v107)
    {
      v106 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      v109 = v108;

      goto LABEL_49;
    }
    v106 = 0;
  }
  v109 = 0;
LABEL_49:
  swift_bridgeObjectRelease(*(_QWORD *)(a3 + 32));
  *(_QWORD *)(a3 + 24) = v106;
  *(_QWORD *)(a3 + 32) = v109;
  v121 = objc_msgSend(v60, "note");
  v122 = v121;
  if (!v121)
  {
LABEL_53:
    v125 = 0;
    goto LABEL_54;
  }
  v123 = objc_msgSend(v121, "title");

  if (!v123)
  {
    v122 = 0;
    goto LABEL_53;
  }
  v122 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
  v125 = v124;

LABEL_54:
  swift_bridgeObjectRelease(*(_QWORD *)(a3 + 48));
  *(_QWORD *)(a3 + 40) = v122;
  *(_QWORD *)(a3 + 48) = v125;
  v126 = objc_msgSend(v60, "title");
  if (v126)
  {
    v127 = v126;
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
    v130 = v129;

  }
  else
  {
    v128 = 0;
    v130 = 0;
  }
  swift_bridgeObjectRelease(v53[1]);
  *v53 = v128;
  v53[1] = v130;
  *(_BYTE *)(a3 + 56) = objc_msgSend(v60, "markedForDeletion");
  v131 = objc_msgSend(v60, "isPasswordProtected");

  *(_BYTE *)(a3 + 57) = v131;
}

uint64_t type metadata accessor for ICAttachmentArchiveModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D4208;
  if (!qword_1005D4208)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ICAttachmentArchiveModel);
  return result;
}

uint64_t sub_1001F00F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001EE6E8(a1, a2);
}

uint64_t sub_1001F0104(_QWORD *a1)
{
  return sub_1001EDF90(a1);
}

uint64_t sub_1001F0118(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD **a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t isEscapingClosureAtFileLocation;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD **v31;
  _QWORD aBlock[5];
  uint64_t v33;
  _QWORD *v34;

  v31 = a6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = _swiftEmptyArrayStorage;
  v13 = objc_msgSend(a4, "table");
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = (v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)((v16 + 60) & 0xFFFFFFFFFFFFFFF8);
  v18 = swift_allocObject(&unk_10055DD00, v17 + 1, v14 | 7);
  *(_QWORD *)(v18 + 16) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v15, v12, v9);
  v19 = v18 + v16;
  v20 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)v19 = *(_OWORD *)a5;
  *(_OWORD *)(v19 + 16) = v20;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(a5 + 32);
  *(_QWORD *)(v19 + 45) = *(_QWORD *)(a5 + 45);
  *(_QWORD *)((char *)v17 + v18) = &v34;
  v21 = swift_allocObject(&unk_10055DD28, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1001F42D8;
  *(_QWORD *)(v21 + 24) = v18;
  aBlock[4] = sub_1001F789C;
  v33 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001F062C;
  aBlock[3] = &unk_10055DD40;
  v22 = _Block_copy(aBlock);
  v23 = v33;
  v24 = a4;
  sub_1001F40D4((_QWORD *)a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F410C);
  swift_retain(v21);
  swift_release(v23);
  objc_msgSend(v13, "enumerateColumnsWithBlock:", v22);

  _Block_release(v22);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v21, "", 113, 93, 47, 1);
  swift_release(v21);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    isEscapingClosureAtFileLocation = (uint64_t)v34;
    v17 = v31;
    a4 = *v31;
    swift_bridgeObjectRetain(v34);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a4);
    *v17 = a4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  a4 = sub_10016ADEC(0, a4[2] + 1, 1, a4);
  *v17 = a4;
LABEL_3:
  v28 = a4[2];
  v27 = a4[3];
  if (v28 >= v27 >> 1)
  {
    a4 = sub_10016ADEC((_QWORD *)(v27 > 1), v28 + 1, 1, a4);
    *v17 = a4;
  }
  a4[2] = v28 + 1;
  a4[v28 + 4] = isEscapingClosureAtFileLocation;
  v29 = v34;
  swift_release(v18);
  return swift_bridgeObjectRelease(v29);
}

void sub_1001F03D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  Class isa;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v10 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a4, "table");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v15 = UUID._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v13, "mergeableStringForColumnID:rowID:", isa, v15);

  if (!v16)
  {
    UUID.init()(v17);
    v18 = type metadata accessor for UUID(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v12, 0, 1, v18);
    v20 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18) != 1)
    {
      v20 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v18);
    }
    v16 = objc_msgSend(objc_allocWithZone((Class)ICTTMergeableAttributedString), "initWithReplicaID:", v20);

  }
  v21 = objc_msgSend(a4, "attachment");
  if (v21)
  {
    v22 = v21;
    sub_1001F40D4(a6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F410C);
    v23 = v16;
    v24 = sub_10025B504(v23, v22, (uint64_t)a6);
    v26 = v25;
    v28 = v27;
    sub_1001F40D4(a6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
    v29 = (_QWORD *)*a7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a7);
    *a7 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = sub_10016AF18(0, v29[2] + 1, 1, v29);
      *a7 = v29;
    }
    v32 = v29[2];
    v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      v29 = sub_10016AF18((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
      *a7 = v29;
    }
    v29[2] = v32 + 1;
    v33 = &v29[3 * v32];
    v33[4] = v24;
    v33[5] = v26;
    v33[6] = v28;

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001F062C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(a1 + 32);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v12(v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

char *sub_1001F06E0(uint64_t a1, char *a2, int a3, uint64_t a4, int *a5, double a6)
{
  char *v6;
  char *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t ObjectType;
  char *v31;
  char *result;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  Class isa;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  Class v49;
  char *v50;
  NSString v51;
  char *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  char *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSString v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  Class v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  int *v81;
  char *v82;

  v81 = a5;
  v7 = v6;
  v80 = a4;
  LODWORD(v79) = a3;
  v78 = a2;
  v10 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v10);
  v77 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v13 = __chkstk_darwin(v12);
  v76 = (uint64_t)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v73 - v15;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v73 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v73 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v73 - v28;
  ObjectType = swift_getObjectType(a1);
  v31 = v82;
  result = (char *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, int *, uint64_t, double))v78 + 5))(*((_QWORD *)v7 + 1), *((_QWORD *)v7 + 2), (unsigned __int16)v79 & 0x101, v80, v81, ObjectType, a6);
  if (!v31)
  {
    v82 = result;
    v74 = v16;
    v75 = v27;
    v33 = v18;
    v78 = v21;
    v79 = v24;
    v80 = 0;
    if (*((_QWORD *)v7 + 9))
      v34 = String._bridgeToObjectiveC()();
    else
      v34 = 0;
    v35 = v17;
    v36 = v82;
    objc_msgSend(v82, "setTypeUTI:", v34);

    v81 = (int *)type metadata accessor for ICAttachmentArchiveModel(0);
    v37 = (uint64_t)v74;
    sub_100012CE8((uint64_t)&v7[v81[12]], (uint64_t)v74, (uint64_t *)&unk_1005D7B20);
    v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
    v39 = v38(v37, 1, v35);
    v82 = v7;
    v40 = v75;
    if ((_DWORD)v39 == 1)
    {
      Date.init()(v39);
      sub_100012DDC(v37, (uint64_t *)&unk_1005D7B20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v75, v37, v35);
    }
    static Date.+ infix(_:_:)(v40, a6);
    v41 = *(void (**)(char *, uint64_t))(v33 + 8);
    v41(v40, v35);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v41(v29, v35);
    objc_msgSend(v36, "setCreationDate:", isa);

    v43 = v81;
    v44 = v76;
    sub_100012CE8((uint64_t)&v82[v81[13]], v76, (uint64_t *)&unk_1005D7B20);
    v45 = v38(v44, 1, v35);
    v46 = v78;
    if ((_DWORD)v45 == 1)
    {
      Date.init()(v45);
      sub_100012DDC(v44, (uint64_t *)&unk_1005D7B20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v78, v44, v35);
    }
    v47 = (uint64_t)v77;
    v48 = v79;
    static Date.+ infix(_:_:)(v46, a6);
    v41(v46, v35);
    v49 = Date._bridgeToObjectiveC()().super.isa;
    v41(v48, v35);
    objc_msgSend(v36, "setModificationDate:", v49);

    v50 = v82;
    if (*(_QWORD *)&v82[v43[15] + 8])
      v51 = String._bridgeToObjectiveC()();
    else
      v51 = 0;
    objc_msgSend(v36, "setTitle:", v51);

    v52 = &v50[v43[16]];
    v53 = 0.0;
    v54 = 0.0;
    v55 = 0.0;
    v56 = 0.0;
    if ((v52[32] & 1) == 0)
    {
      v53 = *((double *)v52 + 2);
      v54 = *((double *)v52 + 3);
      v55 = *(double *)v52;
      v56 = *((double *)v52 + 1);
    }
    objc_msgSend(v36, "setBounds:", v55, v56, v53, v54);
    v57 = &v50[v43[17]];
    if ((v57[64] & 1) == 0)
    {
      v59 = *((double *)v57 + 6);
      v58 = *((double *)v57 + 7);
      v61 = *((double *)v57 + 4);
      v60 = *((double *)v57 + 5);
      v63 = *((double *)v57 + 2);
      v62 = *((double *)v57 + 3);
      v64 = *((double *)v57 + 1);
      objc_msgSend(v36, "setCroppingQuadTopLeftX:", *(double *)v57);
      objc_msgSend(v36, "setCroppingQuadTopLeftY:", v64);
      objc_msgSend(v36, "setCroppingQuadTopRightX:", v63);
      objc_msgSend(v36, "setCroppingQuadTopRightY:", v62);
      objc_msgSend(v36, "setCroppingQuadBottomRightX:", v61);
      objc_msgSend(v36, "setCroppingQuadBottomRightY:", v60);
      objc_msgSend(v36, "setCroppingQuadBottomLeftX:", v59);
      objc_msgSend(v36, "setCroppingQuadBottomLeftY:", v58);
    }
    objc_msgSend(v36, "setOrientation:", word_10045AEB6[v50[v43[18]]]);
    objc_msgSend(v36, "setImageFilterType:", word_10045AEC0[v50[v43[19]]]);
    sub_100012CE8((uint64_t)&v50[v43[20]], v47, &qword_1005CEFD0);
    v65 = type metadata accessor for URL(0);
    v66 = *(_QWORD *)(v65 - 8);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v47, 1, v65);
    if ((_DWORD)v67 == 1)
    {
      sub_100012DDC(v47, &qword_1005CEFD0);
      v68 = 0;
    }
    else
    {
      URL.absoluteString.getter(v67);
      v70 = v69;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v47, v65);
      v68 = String._bridgeToObjectiveC()();
      v50 = v82;
      swift_bridgeObjectRelease(v70);
    }
    objc_msgSend(v36, "setUrlString:", v68);

    v71 = v81;
    if (*(_QWORD *)&v50[v81[21] + 8] >> 60 == 15)
      v72 = 0;
    else
      v72 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v36, "setSynapseData:", v72);

    __asm { BR              X10 }
  }
  return result;
}

void sub_1001F0D50(void *a1, int64_t a2, void *a3, char *a4, char *a5, int a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t i;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  id v49;
  Class isa;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  id k;
  id v58;
  unint64_t v59;
  id m;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *ObjectType;
  id v83;
  uint64_t v84;
  unint64_t v85;
  id v86;
  id v87;
  char *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  id v94;
  void *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  id v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  id v134;
  void *v135;
  id v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  os_log_type_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  _BOOL4 v150;
  id v151;
  unsigned int v152;
  id v153;
  Class v154;
  id v155;
  char v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  __int128 v160;
  id v161;
  unint64_t v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  uint64_t j;
  id v174;
  void *v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  id v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  id v204;
  uint64_t v205;
  _QWORD v206[3];
  char v207[8];
  uint64_t v208[3];
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  char v214;

  v198 = a8;
  v197 = a7;
  LODWORD(v196) = a6;
  v201 = a4;
  v202 = a5;
  v204 = a3;
  v200 = a2;
  v203 = type metadata accessor for URL(0);
  v199 = *(_QWORD *)(v203 - 8);
  v11 = __chkstk_darwin(v203);
  v13 = (char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v178 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v178 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (unint64_t)&v178 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v178 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v178 - v26;
  v28 = objc_msgSend(a1, "attachmentModel");
  v29 = objc_opt_self(ICAttachmentGalleryModel);
  v30 = swift_dynamicCastObjCClass(v28, v29);
  if (v30)
  {
    v31 = (_QWORD *)v30;
    v22 = (unint64_t)v28;
    v32 = objc_msgSend(a1, "managedObjectContext");
    if (v32)
    {
      v33 = (unint64_t)v32;
      v34 = *(_QWORD *)(v192 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 100));
      if (!v34)
        goto LABEL_103;
      v35 = (uint64_t)v204;
      swift_bridgeObjectRetain(v204);
      swift_bridgeObjectRetain(v34);
      v36 = v193;
      v38 = (uint64_t)sub_1001F3038(v37, v35);
      v193 = v36;
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v35);
      if ((unint64_t)v38 >> 62)
      {
LABEL_98:
        if (v38 < 0)
          v165 = v38;
        else
          v165 = v38 & 0xFFFFFFFFFFFFFF8;
        v40 = (void *)v22;
        v166 = (id)v22;
        swift_bridgeObjectRetain(v38);
        v39 = _CocoaArrayWrapper.endIndex.getter(v165);
        if (v39)
          goto LABEL_6;
      }
      else
      {
        v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
        v40 = (void *)v22;
        v41 = (id)v22;
        swift_bridgeObjectRetain(v38);
        if (v39)
        {
LABEL_6:
          if (v39 < 1)
          {
LABEL_118:
            __break(1u);
LABEL_119:
            swift_once(&qword_1005CEAA0, sub_1001EDC84);
LABEL_76:
            v139 = type metadata accessor for Logger(0);
            sub_10012A0B0(v139, (uint64_t)qword_1005D4170);
            swift_errorRetain(v33);
            v140 = swift_errorRetain(v33);
            v141 = Logger.logObject.getter(v140);
            v143 = static os_log_type_t.error.getter(v141, v142);
            if (os_log_type_enabled(v141, v143))
            {
              v144 = (uint8_t *)swift_slowAlloc(12, -1);
              v145 = swift_slowAlloc(32, -1);
              v208[0] = v145;
              *(_DWORD *)v144 = 136315138;
              swift_getErrorValue(v33, v207, v206);
              v146 = Error.localizedDescription.getter(v206[1], v206[2]);
              v148 = v147;
              v205 = sub_1003A4190(v146, v147, v208);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, v206, v144 + 4);
              swift_bridgeObjectRelease(v148);
              swift_errorRelease(v33);
              swift_errorRelease(v33);
              _os_log_impl((void *)&_mh_execute_header, v141, v143, "Cannot import paper attachment database and assets — skipping {error: %s}", v144, 0xCu);
              swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v145, -1, -1);
              swift_slowDealloc(v144, -1, -1);

              swift_errorRelease(v33);
            }
            else
            {
              swift_errorRelease(v33);
              swift_errorRelease(v33);
              swift_errorRelease(v33);

            }
            return;
          }
          for (i = 0; i != v39; ++i)
          {
            if ((v38 & 0xC000000000000001) != 0)
              v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v38);
            else
              v43 = *(id *)(v38 + 8 * i + 32);
            v44 = v43;
            objc_msgSend(v31, "addSubAttachment:", v43);

          }
        }
      }
      v22 = (unint64_t)v40;

      swift_bridgeObjectRelease_n(v38, 2);
LABEL_103:
      objc_msgSend(v31, "writeMergeableData");
      swift_bridgeObjectRetain(v204);
      v167 = v193;
      sub_1001EDAB4(v168);
      v170 = v169;
      v193 = v167;
      if ((unint64_t)v169 >> 62)
      {
        if (v169 < 0)
          v176 = v169;
        else
          v176 = v169 & 0xFFFFFFFFFFFFFF8;
        v177 = (id)v33;
        swift_bridgeObjectRetain(v170);
        v171 = _CocoaArrayWrapper.endIndex.getter(v176);
        if (v171)
          goto LABEL_105;
      }
      else
      {
        v171 = *(_QWORD *)((v169 & 0xFFFFFFFFFFFFF8) + 0x10);
        v172 = (id)v33;
        swift_bridgeObjectRetain(v170);
        if (v171)
        {
LABEL_105:
          if (v171 >= 1)
          {
            for (j = 0; j != v171; ++j)
            {
              if ((v170 & 0xC000000000000001) != 0)
                v174 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v170);
              else
                v174 = *(id *)(v170 + 8 * j + 32);
              v175 = v174;
              objc_msgSend((id)v33, "deleteObject:", v174);

            }
            goto LABEL_115;
          }
          __break(1u);
          goto LABEL_118;
        }
      }
LABEL_115:

      swift_bridgeObjectRelease_n(v170, 2);
      return;
    }
    goto LABEL_123;
  }
  v189 = v25;
  v190 = v19;
  v187 = v16;
  v204 = a1;
  v186 = v13;
  v194 = v27;
  v195 = v22;
  v45 = v203;
  v46 = objc_opt_self(ICAttachmentPaperBundleModel);
  v191 = (id)swift_dynamicCastObjCClass(v28, v46);
  if (v191)
  {
    v47 = *(_QWORD *)(v192 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 56) + 8);
    v48 = v204;
    v188 = v28;
    v49 = v28;
    if (v47 >> 60 == 15)
      isa = 0;
    else
      isa = Data._bridgeToObjectiveC()().super.isa;
    v67 = v194;
    v68 = v189;
    objc_msgSend(v48, "setMergeableData:", isa);

    v69 = v191;
    v70 = objc_msgSend(v191, "paperBundleDatabaseSubdirectoryURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v70);

    v72 = URL.lastPathComponent.getter(v71);
    v74 = v73;
    v75 = *(void (**)(char *, uint64_t))(v199 + 8);
    v75(v68, v45);
    URL.appendingPathComponent(_:isDirectory:)(v72, v74, 0);
    swift_bridgeObjectRelease(v74);
    v76 = objc_msgSend(v69, "paperBundleAssetsSubdirectoryURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v76);

    v78 = URL.lastPathComponent.getter(v77);
    v80 = v79;
    v75(v68, v45);
    v81 = v195;
    URL.appendingPathComponent(_:isDirectory:)(v78, v80, 0);
    swift_bridgeObjectRelease(v80);
    ObjectType = (void *)swift_getObjectType(v201);
    v83 = objc_msgSend(v69, "paperBundleURL");
    v84 = (uint64_t)v190;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v83);

    v85 = v193;
    v204 = ObjectType;
    dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v84, 1, ObjectType, v202);
    v33 = v85;
    if (!v85)
    {
      v75((char *)v84, v45);
      v86 = v191;
      v87 = objc_msgSend(v191, "paperBundleDatabaseSubdirectoryURL");
      v88 = v187;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v87);

      v89 = v204;
      dispatch thunk of ICFileManaging.copyItem(at:to:)(v67, v88, v204, v202);
      v75(v88, v45);
      v136 = objc_msgSend(v86, "paperBundleAssetsSubdirectoryURL");
      v137 = v186;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v136);

      v138 = v195;
      dispatch thunk of ICFileManaging.copyItem(at:to:)(v195, v137, v89, v202);
      v193 = 0;

      v75(v137, v45);
      v75((char *)v138, v45);
      v75(v194, v45);
      return;
    }
    v193 = 0;
    v75((char *)v84, v45);
    v75((char *)v81, v45);
    v75(v67, v45);
    if (qword_1005CEAA0 == -1)
      goto LABEL_76;
    goto LABEL_119;
  }
  v51 = objc_opt_self(ICAttachmentTableModel);
  v52 = swift_dynamicCastObjCClass(v28, v51);
  if (v52)
  {
    v53 = (void *)v52;
    v54 = type metadata accessor for ICAttachmentArchiveModel(0);
    if (!*(_QWORD *)(v192 + *(int *)(v54 + 92)))
      return;
    v182 = *(_QWORD **)(v192 + *(int *)(v54 + 92));
    v178 = v54;
    v179 = v28;
    v191 = v53;
    v55 = objc_msgSend(v53, "table");
    v56 = (unint64_t)objc_msgSend(v55, "rowCount");

    if ((v56 & 0x8000000000000000) != 0)
      goto LABEL_121;
    for (k = v191; v56; --v56)
    {
      v58 = objc_msgSend(k, "table");
      objc_msgSend(v58, "removeRowAtIndex:", 0);

    }
    v38 = (uint64_t)objc_msgSend(k, "table");
    v59 = (unint64_t)objc_msgSend((id)v38, "columnCount");

    if ((v59 & 0x8000000000000000) != 0)
    {
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    for (m = v191; v59; --v59)
    {
      v38 = (uint64_t)objc_msgSend(m, "table");
      objc_msgSend((id)v38, "removeColumnAtIndex:", 0);

    }
    v61 = objc_msgSend(m, "table");
    v31 = v182;

    v62 = objc_msgSend(m, "table");
    v63 = v62;
    v180 = v31[2];
    if (v180)
    {
      v64 = v31[4];
      v181 = v31 + 4;

      v183 = (unsigned __int16)v196 & 0x101;
      swift_bridgeObjectRetain(v182);
      v66 = 0;
      while (1)
      {
        if (v66 >= *((_QWORD *)v65 + 2))
        {
          __break(1u);
LABEL_121:
          __break(1u);
          goto LABEL_122;
        }
        v100 = v181[v66];
        v186 = *(char **)(v100 + 16);
        if (!v186)
          goto LABEL_33;
        v184 = v66;
        v187 = (char *)(v100 + 32);
        swift_bridgeObjectRetain(v100);
        v33 = 0;
        v185 = v100;
LABEL_37:
        if (v33 >= *(_QWORD *)(v100 + 16))
        {
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
        v101 = (uint64_t *)&v187[24 * v33];
        v102 = v101[1];
        v190 = (char *)*v101;
        v103 = v101[2];
        v196 = (_QWORD *)v102;
        swift_bridgeObjectRetain(v102);
        v195 = v103;
        v194 = (char *)objc_msgSend(m, "attachment", swift_bridgeObjectRetain(v103).n128_f64[0]);
        if (!v194)
          goto LABEL_124;
        v189 = (char *)v33;
        v188 = (id)(v33 + 1);
        v104 = sub_100136248((uint64_t)_swiftEmptyArrayStorage);
        sub_100012E18(&qword_1005D41A0);
        v65 = (char *)static _DictionaryStorage.copy(original:)(v104);
        v96 = v65;
        v38 = 0;
        v105 = 1 << *(_BYTE *)(v104 + 32);
        v203 = v104;
        v107 = *(_QWORD *)(v104 + 64);
        v33 = v104 + 64;
        v106 = v107;
        v199 = v33;
        if (v105 < 64)
          v108 = ~(-1 << v105);
        else
          v108 = -1;
        v93 = v108 & v106;
        v200 = (unint64_t)(v105 + 63) >> 6;
        v201 = v65 + 64;
        v202 = v65;
        if ((v108 & v106) != 0)
        {
LABEL_43:
          v109 = __clz(__rbit64(v93));
          v93 &= v93 - 1;
          v22 = v109 | (v38 << 6);
          goto LABEL_57;
        }
        while (1)
        {
          v110 = __OFADD__(v38++, 1);
          if (v110)
          {
            __break(1u);
            goto LABEL_95;
          }
          if (v38 >= v200)
          {
            m = v191;
            v112 = v198;
            v113 = v197;
            v31 = v196;
            v114 = v195;
            v115 = (uint64_t)v194;
            goto LABEL_72;
          }
          v111 = *(_QWORD *)(v199 + 8 * v38);
          v112 = v198;
          v113 = v197;
          v31 = v196;
          v114 = v195;
          v115 = (uint64_t)v194;
          if (!v111)
            break;
LABEL_56:
          v93 = (v111 - 1) & v111;
          v22 = __clz(__rbit64(v111)) + (v38 << 6);
LABEL_57:
          v117 = *(_QWORD *)(v203 + 56);
          v118 = *(_QWORD *)(v203 + 48) + 16 * v22;
          v33 = *(_QWORD *)(v118 + 8);
          v204 = *(id *)v118;
          v119 = *(void **)(v117 + 8 * v22);
          v120 = objc_msgSend(v119, "identifier", swift_bridgeObjectRetain(v33).n128_f64[0]);
          if (v120)
          {
            v121 = v120;
            v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
            v124 = v123;

          }
          else
          {
            v122 = 0;
            v124 = 0xE000000000000000;
          }
          v125 = objc_msgSend(v119, "typeUTI");
          if (v125)
          {
            m = v125;
            v126 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
            v128 = v127;

          }
          else
          {
            v126 = 0;
            v128 = 0;
          }
          sub_1001F4360();
          v65 = (char *)ICTTAttachment.init(identifier:universalTypeIdentifier:)(v122, v124, v126, v128);
          v96 = v202;
          *(_QWORD *)&v201[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v22;
          v129 = (_QWORD *)(*((_QWORD *)v96 + 6) + 16 * v22);
          *v129 = v204;
          v129[1] = v33;
          *(_QWORD *)(*((_QWORD *)v96 + 7) + 8 * v22) = v65;
          v130 = *((_QWORD *)v96 + 2);
          v110 = __OFADD__(v130, 1);
          v131 = v130 + 1;
          if (v110)
          {
            __break(1u);
            goto LABEL_92;
          }
          *((_QWORD *)v96 + 2) = v131;
          if (v93)
            goto LABEL_43;
        }
        v116 = v38 + 1;
        if (v38 + 1 >= v200)
          goto LABEL_71;
        v111 = *(_QWORD *)(v199 + 8 * v116);
        if (v111)
          goto LABEL_55;
        v116 = v38 + 2;
        if (v38 + 2 >= v200)
          goto LABEL_71;
        v111 = *(_QWORD *)(v199 + 8 * v116);
        if (v111)
          goto LABEL_55;
        v116 = v38 + 3;
        if (v38 + 3 >= v200)
          goto LABEL_71;
        v111 = *(_QWORD *)(v199 + 8 * v116);
        if (v111)
          goto LABEL_55;
        v116 = v38 + 4;
        if (v38 + 4 < v200)
          break;
LABEL_71:
        m = v191;
LABEL_72:
        v132 = v193;
        v133 = (void *)v115;
        v134 = sub_100255710((uint64_t)v96, v115, (uint64_t)&off_100565748, v183, v113, v112, a9, (uint64_t)v190, (uint64_t)v31, v114);
        v193 = v132;
        if (v132)
        {
          swift_bridgeObjectRelease(v182);
          swift_bridgeObjectRelease(v185);
          v163 = v179;

          swift_bridgeObjectRelease(v203);
          swift_bridgeObjectRelease(v114);
          swift_bridgeObjectRelease(v31);
          swift_release(v96);
          return;
        }
        v135 = v134;

        swift_bridgeObjectRelease(v203);
        swift_bridgeObjectRelease(v114);
        swift_bridgeObjectRelease(v31);
        swift_release(v96);
        v31 = objc_msgSend(m, "table");
        objc_msgSend(v31, "setAttributedString:columnIndex:rowIndex:", v135, v189, v184);

        v33 = (unint64_t)v188;
        v100 = v185;
        if (v188 != v186)
          goto LABEL_37;
        swift_bridgeObjectRelease(v185);
        v65 = (char *)v182;
        v66 = v184;
LABEL_33:
        if (++v66 == v180)
        {
LABEL_95:
          swift_bridgeObjectRelease(v65);
          goto LABEL_80;
        }
      }
      v111 = *(_QWORD *)(v199 + 8 * v116);
      if (!v111)
      {
        while (1)
        {
          v38 = v116 + 1;
          if (__OFADD__(v116, 1))
            break;
          if (v38 >= v200)
            goto LABEL_71;
          v111 = *(_QWORD *)(v199 + 8 * v38);
          ++v116;
          if (v111)
            goto LABEL_56;
        }
        __break(1u);
        goto LABEL_97;
      }
LABEL_55:
      v38 = v116;
      goto LABEL_56;
    }

LABEL_80:
    v149 = *(unsigned __int8 *)(v192 + *(int *)(v178 + 96));
    if (v149 != 2)
    {
      v150 = (v149 & 1) == 0;
      v151 = objc_msgSend(m, "table");
      v152 = objc_msgSend(v151, "isRightToLeft");

      if (((v150 ^ v152) & 1) == 0)
      {
        v153 = objc_msgSend(m, "table");
        objc_msgSend(v153, "reverseColumnDirection");

      }
    }
    objc_msgSend(m, "writeMergeableData");

  }
  else
  {
    v90 = objc_opt_self(ICAttachmentAudioModel);
    v91 = swift_dynamicCastObjCClass(v28, v90);
    if (v91)
    {
      v92 = (void *)v91;
      v38 = (uint64_t)v28;
      v93 = (unint64_t)v92;
      v94 = objc_msgSend(v92, "audioDocument");
      if (v94)
      {
        v95 = v94;
        v96 = (char *)objc_msgSend(v94, "document");

        v97 = v192 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 112);
        v98 = *(_QWORD *)(v97 + 8);
        if (v98 == 1)
        {
          v99 = 0;
        }
        else
        {
          v156 = *(_BYTE *)(v97 + 72);
          v157 = *(_QWORD *)(v97 + 64);
          v158 = *(_DWORD *)(v97 + 56);
          v159 = *(_QWORD *)(v97 + 48);
          v208[1] = *(_QWORD *)v97;
          v208[2] = v98;
          v160 = *(_OWORD *)(v97 + 32);
          v209 = *(_OWORD *)(v97 + 16);
          v210 = v160;
          v211 = v159;
          v212 = v158 & 1;
          v213 = v157;
          v214 = v156;
          v161 = objc_msgSend(v92, "audioDocument");
          if (!v161)
          {
LABEL_126:
            __break(1u);
            return;
          }
          v126 = v161;
          v162 = v193;
          v65 = sub_1003BDDEC(v161, (uint64_t)v204, (uint64_t)&off_100565748, (unsigned __int16)v196 & 0x101, v197, v198, a9);
          v193 = v162;
          if (v162)
          {

            return;
          }
LABEL_92:
          v99 = v65;

        }
        objc_msgSend(v96, "setRootObject:", v99);

        swift_unknownObjectRelease(v99, v164);
        objc_msgSend((id)v93, "writeMergeableData");

        return;
      }
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }

    v154 = 0;
    if (*(_QWORD *)(v192 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 56) + 8) >> 60 != 15)
      v154 = Data._bridgeToObjectiveC()().super.isa;
    v155 = v204;
    objc_msgSend(v204, "setMergeableData:", v154);

    objc_msgSend(v155, "attachmentModel");
  }
}

uint64_t sub_1001F20D0(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D43E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1001F6CBC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys, v11, v9, v10);
  v18 = *v3;
  v17 = 0;
  type metadata accessor for CGPoint(0);
  v13 = v12;
  v14 = sub_100019C6C(&qword_1005D43E8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, v13, v14);
  if (!v2)
  {
    v18 = v3[1];
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, v13, v14);
    v18 = v3[2];
    v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, v13, v14);
    v18 = v3[3];
    v17 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, v13, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001F22A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001F22D0 + 4 * byte_10045A5ED[*v0]))(0x7466654C706F74, 0xE700000000000000);
}

uint64_t sub_1001F22D0()
{
  return 0x7468676952706F74;
}

uint64_t sub_1001F22E8()
{
  return 0x69526D6F74746F62;
}

uint64_t sub_1001F2308()
{
  return 0x654C6D6F74746F62;
}

uint64_t sub_1001F2324@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001F68A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001F2348(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1001F2354(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001F6CBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F237C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001F6CBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001F23A4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1001F6A80(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1001F23E4(_QWORD *a1)
{
  return sub_1001F20D0(a1);
}

void sub_1001F23F8(char *a1)
{
  sub_10021555C(*a1);
}

void sub_1001F2404()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1001F2444()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1314344772, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_1001F24A0()
{
  __asm { BR              X10 }
}

uint64_t sub_1001F24D0(uint64_t a1)
{
  String.hash(into:)(a1, 1314344772, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_1001F2518(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1001F2554()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1314344772, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1001F25B0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001F7388(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001F25DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1001F2600 + 4 * byte_10045A5FD[*v0]))();
}

void sub_1001F2600(_QWORD *a1@<X8>)
{
  *a1 = 1314344772;
  a1[1] = 0xE400000000000000;
}

void sub_1001F2614(_QWORD *a1@<X8>)
{
  *a1 = 1413891404;
  a1[1] = 0xE400000000000000;
}

void sub_1001F2628(_QWORD *a1@<X8>)
{
  *a1 = 0x5448474952;
  a1[1] = 0xE500000000000000;
}

void sub_1001F2640(_QWORD *a1@<X8>)
{
  *a1 = &off_100555AF8;
}

uint64_t sub_1001F2650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001F72BC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001F26AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001F72BC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1001F26F8(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1001F2700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2C5C(a1, a2, a3, a4, (uint64_t (*)(void))sub_1001F76B0, (uint64_t (*)(void))sub_1001F72BC);
}

uint64_t sub_1001F2714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2CE8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1001F76B0, (uint64_t (*)(void))sub_1001F72BC);
}

uint64_t sub_1001F2728(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_100012E18(&qword_1005D4460);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10012D19C(a1, v11);
  v13 = sub_1001F7344();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v17, v7, a2);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v16, v7, a3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_1001F2844(char *a1)
{
  sub_10021567C(*a1);
}

void sub_1001F2850()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1001F2898()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x524F4C4F43, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_1001F292C()
{
  __asm { BR              X10 }
}

uint64_t sub_1001F2964(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x524F4C4F43, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1001F29E4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1001F2A28()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x524F4C4F43, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

unint64_t sub_1001F2ABC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001F73D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001F2AE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1001F2B14 + 4 * byte_10045A610[*v0]))();
}

void sub_1001F2B14(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x524F4C4F43;
  a1[1] = v1;
}

void sub_1001F2B28(_QWORD *a1@<X8>)
{
  *a1 = 0x4C41435359415247;
  a1[1] = 0xE900000000000045;
}

void sub_1001F2B48(_QWORD *a1@<X8>)
{
  *a1 = 0x4E415F4B43414C42;
  a1[1] = 0xEF45544948575F44;
}

void sub_1001F2B70(_QWORD *a1@<X8>)
{
  *a1 = 0x414F424554494857;
  a1[1] = 0xEA00000000004452;
}

void sub_1001F2B90(_QWORD *a1@<X8>)
{
  *a1 = &off_100555AD0;
}

uint64_t sub_1001F2BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001F7300();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001F2BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001F7300();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001F2C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2C5C(a1, a2, a3, a4, (uint64_t (*)(void))sub_1001F766C, (uint64_t (*)(void))sub_1001F7300);
}

uint64_t sub_1001F2C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11;
  uint64_t v12;

  v11 = a5();
  v12 = a6();
  return ArgumentDecodable<>.init(fromArgument:)(a1, a2, a3, a4, v11, v12, &protocol witness table for String);
}

uint64_t sub_1001F2CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2CE8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1001F766C, (uint64_t (*)(void))sub_1001F7300);
}

uint64_t sub_1001F2CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11;
  uint64_t v12;

  v11 = a5();
  v12 = a6();
  return static ArgumentDecodable<>.typeSummary(forName:)(a1, a2, a3, a4, v11, v12, &protocol witness table for String);
}

uint64_t sub_1001F2D58()
{
  _BYTE *v0;

  if (*v0)
    return 0x64757469676E6F6CLL;
  else
    return 0x656475746974616CLL;
}

uint64_t sub_1001F2D98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001F7418(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001F2DBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001F7344();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F2DE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001F7344();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001F2E0C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = sub_1001F7514(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

uint64_t sub_1001F2E34(_QWORD *a1)
{
  double *v1;

  return sub_1001F2728(a1, *v1, v1[1]);
}

uint64_t sub_1001F2E4C(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v1 = objc_msgSend(a1, "media");
  v2 = v1;
  if (!v1)
    return 0;
  v3 = objc_msgSend(v1, "filename");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = sub_100263A64(v4, v6, &off_100556090);
  swift_arrayDestroy(&unk_1005560B0, 2, &type metadata for String);
  if ((v7 & 1) != 0)
  {
    v24[0] = 46;
    v24[1] = 0xE100000000000000;
    v8 = sub_1001452E8();
    v9 = StringProtocol.components<A>(separatedBy:)(v24, &type metadata for String, &type metadata for String, v8, v8);
    swift_bridgeObjectRelease(v6);
    v22 = sub_1003344E4(1, v9);
    swift_bridgeObjectRetain(v9);
    v10 = sub_100012E18(&qword_1005D4190);
    v11 = sub_100016638((unint64_t *)&qword_1005D4198, &qword_1005D4190, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
    v12 = BidirectionalCollection<>.joined(separator:)(46, 0xE100000000000000, v10, v11);
    swift_unknownObjectRelease(v22, v13);
    v14 = *(_QWORD *)(v9 + 16);
    if (v14)
    {
      v15 = v9 + 16 * v14;
      v16 = *(_QWORD *)(v15 + 16);
      v17 = *(void **)(v15 + 24);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v9);
      v23 = v12;
      v18._countAndFlagsBits = 3027488;
      v18._object = (void *)0xE300000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = v16;
      v19._object = v17;
      String.append(_:)(v19);
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      swift_bridgeObjectRelease(v9);
      v23 = v12;
      v20._countAndFlagsBits = 12832;
      v20._object = (void *)0xE200000000000000;
      String.append(_:)(v20);
    }
    return v23;
  }
  return v4;
}

_QWORD *sub_1001F3038(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        swift_bridgeObjectRetain_n(*v6, 2);
        v9 = sub_100248A98(v7, v8);
        if ((v10 & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v9);
          v12 = swift_bridgeObjectRelease_n(v8, 2);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
          v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v14 >= v13 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
          specialized Array._endMutation()(v15);
        }
        else
        {
          swift_bridgeObjectRelease_n(v8, 2);
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001F3164(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;

  if (a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974)
  {
    v5 = 0xEE00726569666974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100482870)
  {
    v8 = 0x8000000100482870;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100482870, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6954746E65726170 && a2 == 0xEB00000000656C74)
  {
    v9 = 0xEB00000000656C74;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954746E65726170, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000013)
  {
    v10 = 0x8000000100482890;
    if (a2 == 0x8000000100482890)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100482890, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD000000000000013)
  {
    v11 = 0x80000001004828B0;
    if (a2 == 0x80000001004828B0)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001004828B0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000018)
  {
    v12 = 0x80000001004828D0;
    if (a2 == 0x80000001004828D0)
      goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001004828D0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x6C6946616964656DLL && a2 == 0xED0000656D616E65)
  {
    v13 = 0xED0000656D616E65;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6946616964656DLL, 0xED0000656D616E65, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074)
  {
    v14 = 0xE900000000000074;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_53;
  }
  if (a1 == 0x6465696669646F6DLL && a2 == 0xEA00000000007441)
  {
    v15 = 0xEA00000000007441;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465696669646F6DLL, 0xEA00000000007441, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_59;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    v16 = 0xE400000000000000;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_65;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v17 = 0xE500000000000000;
LABEL_71:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_71;
  }
  if (a1 == 0x73646E756F62 && a2 == 0xE600000000000000)
  {
    v18 = 0xE600000000000000;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73646E756F62, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_77;
  }
  if (a1 == 0x676E6970706F7263 && a2 == 0xE800000000000000)
  {
    v19 = 0xE800000000000000;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6970706F7263, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_83;
  }
  if (a1 == 0x7461746E6569726FLL && a2 == 0xEB000000006E6F69)
  {
    v20 = 0xEB000000006E6F69;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_89;
  }
  if (a1 == 0x6C69466567616D69 && a2 == 0xEB00000000726574)
  {
    v21 = 0xEB00000000726574;
LABEL_95:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69466567616D69, 0xEB00000000726574, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_95;
  }
  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    v22 = 0xE300000000000000;
LABEL_101:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_101;
  }
  if (a1 == 0x4474657070696E73 && a2 == 0xEB00000000617461)
  {
    v23 = 0xEB00000000617461;
LABEL_107:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4474657070696E73, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_107;
  }
  if (a1 == 0x616E6964726F6F63 && a2 == 0xEA00000000006574)
  {
    v24 = 0xEA00000000006574;
LABEL_113:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616E6964726F6F63, 0xEA00000000006574, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_113;
  }
  if (a1 == 1937207154 && a2 == 0xE400000000000000)
  {
    v25 = 0xE400000000000000;
LABEL_119:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1937207154, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_119;
  }
  if (a1 == 0x5474686769527369 && a2 == 0xED00007466654C6FLL)
  {
    v26 = 0xED00007466654C6FLL;
LABEL_125:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5474686769527369, 0xED00007466654C6FLL, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_125;
  }
  if (a1 == 0xD000000000000018)
  {
    v27 = 0x80000001004828F0;
    if (a2 == 0x80000001004828F0)
      goto LABEL_130;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001004828F0, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
LABEL_130:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if (a1 == 0x65746F75516C7275 && a2 == 0xEC00000074786554)
  {
    v28 = 0xEC00000074786554;
LABEL_136:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746F75516C7275, 0xEC00000074786554, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_136;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100482910)
  {
    v29 = 0x8000000100482910;
LABEL_142:
    swift_bridgeObjectRelease(v29);
    return 23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100482910, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
    goto LABEL_142;
  }
  if (a1 == 0x6365526F69647561 && a2 == 0xEE00676E6964726FLL)
  {
    swift_bridgeObjectRelease(0xEE00676E6964726FLL);
    return 24;
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6365526F69647561, 0xEE00676E6964726FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v30 & 1) != 0)
      return 24;
    else
      return 25;
  }
}

id sub_1001F3BEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id result;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  objc_msgSend(a1, "croppingQuadTopLeftX");
  if (v4 == 0.0
    && (objc_msgSend(a1, "croppingQuadTopLeftY"), v5 == 1.0)
    && (objc_msgSend(a1, "croppingQuadTopRightX"), v6 == 1.0)
    && (objc_msgSend(a1, "croppingQuadTopRightY"), v7 == 1.0)
    && (objc_msgSend(a1, "croppingQuadBottomRightX"), v8 == 1.0)
    && (objc_msgSend(a1, "croppingQuadBottomRightY"), v9 == 0.0)
    && (objc_msgSend(a1, "croppingQuadBottomLeftX"), v10 == 0.0)
    && (result = objc_msgSend(a1, "croppingQuadBottomLeftY"), v12 == 0.0))
  {
    v13 = 0;
    v14 = 1;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    objc_msgSend(a1, "croppingQuadTopLeftX");
    v13 = v22;
    objc_msgSend(a1, "croppingQuadTopLeftY");
    v15 = v23;
    objc_msgSend(a1, "croppingQuadTopRightX");
    v16 = v24;
    objc_msgSend(a1, "croppingQuadTopRightY");
    v17 = v25;
    objc_msgSend(a1, "croppingQuadBottomRightX");
    v18 = v26;
    objc_msgSend(a1, "croppingQuadBottomRightY");
    v19 = v27;
    objc_msgSend(a1, "croppingQuadBottomLeftX");
    v20 = v28;
    result = objc_msgSend(a1, "croppingQuadBottomLeftY");
    v14 = 0;
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v21;
  *(_BYTE *)(a2 + 64) = v14;
  return result;
}

uint64_t sub_1001F3DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D4188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F3E10(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 < 4)
    return 0x3020104u >> (8 * a1);
  if (qword_1005CEAA0 != -1)
    swift_once(&qword_1005CEAA0, sub_1001EDC84);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005D4170);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown drawing orientation — returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 4;
}

uint64_t sub_1001F3EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t sub_1001F3F3C(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD aBlock[5];
  uint64_t v14;
  _QWORD *v15;

  v15 = _swiftEmptyArrayStorage;
  v4 = objc_msgSend(a1, "table");
  v5 = swift_allocObject(&unk_10055DC88, 88, 7);
  *(_QWORD *)(v5 + 16) = a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 69) = *(_QWORD *)(a2 + 45);
  *(_QWORD *)(v5 + 80) = &v15;
  v7 = swift_allocObject(&unk_10055DCB0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1001F4214;
  *(_QWORD *)(v7 + 24) = v5;
  aBlock[4] = sub_1000165D8;
  v14 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001F062C;
  aBlock[3] = &unk_10055DCC8;
  v8 = _Block_copy(aBlock);
  v9 = v14;
  v10 = a1;
  sub_1001F40D4((_QWORD *)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F410C);
  swift_retain(v7);
  swift_release(v9);
  objc_msgSend(v4, "enumerateRowsWithBlock:", v8);

  _Block_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v7, "", 113, 91, 40, 1);
  result = swift_release(v7);
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v12 = v15;
    swift_release(v5);
    return (uint64_t)v12;
  }
  return result;
}

_QWORD *sub_1001F40D4(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_1001F410C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1001F414C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 != 1)
  {
    sub_1001F41A0(result, a2, a3);
    sub_1001F41A0(a4, a5, a6);
    return swift_bridgeObjectRelease(a9);
  }
  return result;
}

uint64_t sub_1001F41A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1001F41D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  }
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1001F4214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1001F0118(a1, a2, a3, *(_QWORD **)(v3 + 16), v3 + 24, *(_QWORD ***)(v3 + 80));
}

uint64_t sub_1001F4224()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F4234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = v0 + v5;
  v7 = *(_QWORD *)(v0 + v5 + 8);
  if (v7 != 1)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
  }
  return swift_deallocObject(v0, ((v5 + 60) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1001F42D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001F03D0(a1, a2, a3, *(void **)(v3 + 16), v3 + v8, (_QWORD *)(v3 + v9), *(_QWORD **)(v3 + ((v9 + 60) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001F4350()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1001F4360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D41A8;
  if (!qword_1005D41A8)
  {
    v1 = objc_opt_self(ICTTAttachment);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D41A8);
  }
  return result;
}

__n128 initializeWithCopy for ICAttachmentArchiveModel.Cropping(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ICAttachmentArchiveModel.Cropping(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.Cropping(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Cropping()
{
  return &type metadata for ICAttachmentArchiveModel.Cropping;
}

_QWORD *sub_1001F441C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v78;
  uint64_t v79;
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v10;
    v11 = a2[11];
    v12 = a3[12];
    __dst = (void *)(a1 + v12);
    v78 = (char *)a2 + v12;
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v13 = type metadata accessor for Date(0);
    v79 = *(_QWORD *)(v13 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v79 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v15 = swift_bridgeObjectRetain(v11);
    if (v14(v78, 1, v13, v15))
    {
      v16 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(__dst, v78, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      v17 = v79;
    }
    else
    {
      v17 = v79;
      (*(void (**)(void *, char *, uint64_t))(v79 + 16))(__dst, v78, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v13);
    }
    v19 = a3[13];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v14)((char *)a2 + v19, 1, v13))
    {
      v22 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v21, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v13);
    }
    v23 = a3[14];
    v24 = (char *)v4 + v23;
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    if (v26 >> 60 == 15)
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
    }
    else
    {
      v27 = *v25;
      sub_10013DCA0(*v25, v25[1]);
      *(_QWORD *)v24 = v27;
      *((_QWORD *)v24 + 1) = v26;
    }
    v28 = a3[15];
    v29 = a3[16];
    v30 = (_QWORD *)((char *)v4 + v28);
    v31 = (uint64_t *)((char *)a2 + v28);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = (char *)v4 + v29;
    v34 = (uint64_t)a2 + v29;
    v33[32] = *(_BYTE *)(v34 + 32);
    v35 = *(_OWORD *)(v34 + 16);
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *((_OWORD *)v33 + 1) = v35;
    v36 = a3[17];
    v37 = a3[18];
    v38 = (char *)v4 + v36;
    v39 = (uint64_t)a2 + v36;
    v38[64] = *(_BYTE *)(v39 + 64);
    v40 = *(_OWORD *)(v39 + 48);
    *((_OWORD *)v38 + 2) = *(_OWORD *)(v39 + 32);
    *((_OWORD *)v38 + 3) = v40;
    v41 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v41;
    *((_BYTE *)v4 + v37) = *((_BYTE *)a2 + v37);
    v42 = a3[20];
    *((_BYTE *)v4 + a3[19]) = *((_BYTE *)a2 + a3[19]);
    v43 = (char *)v4 + v42;
    v44 = (char *)a2 + v42;
    v45 = type metadata accessor for URL(0);
    v46 = *(_QWORD *)(v45 - 8);
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v46 + 48);
    v48 = swift_bridgeObjectRetain(v32);
    if (v47(v44, 1, v45, v48))
    {
      v49 = sub_100012E18(&qword_1005CEFD0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v50 = a3[21];
    v51 = (char *)v4 + v50;
    v52 = (uint64_t *)((char *)a2 + v50);
    v53 = v52[1];
    if (v53 >> 60 == 15)
    {
      *(_OWORD *)v51 = *(_OWORD *)v52;
    }
    else
    {
      v54 = *v52;
      sub_10013DCA0(*v52, v52[1]);
      *(_QWORD *)v51 = v54;
      *((_QWORD *)v51 + 1) = v53;
    }
    v55 = a3[22];
    v56 = a3[23];
    v57 = (char *)v4 + v55;
    v58 = (uint64_t)a2 + v55;
    *(_OWORD *)v57 = *(_OWORD *)v58;
    v57[16] = *(_BYTE *)(v58 + 16);
    v59 = *(uint64_t *)((char *)a2 + v56);
    *(_QWORD *)((char *)v4 + v56) = v59;
    v60 = a3[25];
    *((_BYTE *)v4 + a3[24]) = *((_BYTE *)a2 + a3[24]);
    v61 = *(uint64_t *)((char *)a2 + v60);
    *(_QWORD *)((char *)v4 + v60) = v61;
    v62 = a3[26];
    v63 = a3[27];
    v64 = (_QWORD *)((char *)v4 + v62);
    v65 = (uint64_t *)((char *)a2 + v62);
    v66 = v65[1];
    *v64 = *v65;
    v64[1] = v66;
    *((_BYTE *)v4 + v63) = *((_BYTE *)a2 + v63);
    v67 = a3[28];
    v68 = (char *)v4 + v67;
    v69 = (uint64_t)a2 + v67;
    v70 = *(uint64_t *)((char *)a2 + v67 + 8);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v66);
    if (v70)
    {
      if (v70 == 1)
      {
        v71 = *(_OWORD *)(v69 + 48);
        *((_OWORD *)v68 + 2) = *(_OWORD *)(v69 + 32);
        *((_OWORD *)v68 + 3) = v71;
        *(_OWORD *)(v68 + 57) = *(_OWORD *)(v69 + 57);
        v72 = *(_OWORD *)(v69 + 16);
        *(_OWORD *)v68 = *(_OWORD *)v69;
        *((_OWORD *)v68 + 1) = v72;
        return v4;
      }
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *((_QWORD *)v68 + 1) = v70;
      v75 = *(_QWORD *)(v69 + 16);
      *((_QWORD *)v68 + 2) = v75;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v75);
      v73 = *(_QWORD *)(v69 + 32);
      if (!v73)
        goto LABEL_24;
    }
    else
    {
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *((_QWORD *)v68 + 2) = *(_QWORD *)(v69 + 16);
      v73 = *(_QWORD *)(v69 + 32);
      if (!v73)
      {
LABEL_24:
        *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
        *((_QWORD *)v68 + 5) = *(_QWORD *)(v69 + 40);
        goto LABEL_25;
      }
    }
    *((_QWORD *)v68 + 3) = *(_QWORD *)(v69 + 24);
    *((_QWORD *)v68 + 4) = v73;
    v74 = *(_QWORD *)(v69 + 40);
    *((_QWORD *)v68 + 5) = v74;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
LABEL_25:
    *((_QWORD *)v68 + 6) = *(_QWORD *)(v69 + 48);
    v68[56] = *(_BYTE *)(v69 + 56);
    v76 = *(_QWORD *)(v69 + 64);
    *((_QWORD *)v68 + 8) = v76;
    v68[72] = *(_BYTE *)(v69 + 72);
    swift_bridgeObjectRetain(v76);
    return v4;
  }
  v18 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain(v18);
  return v4;
}

uint64_t sub_1001F48A4(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = (char *)a1 + a2[12];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (char *)a1 + a2[13];
  if (!v7(v8, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v9 = (_QWORD *)((char *)a1 + a2[14]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10013DD30(*v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15] + 8));
  v11 = (char *)a1 + a2[20];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  v14 = (_QWORD *)((char *)a1 + a2[21]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_10013DD30(*v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[23]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[25]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[26] + 8));
  v16 = (_QWORD *)((char *)a1 + a2[28]);
  result = v16[1];
  if (result)
  {
    if (result == 1)
      return result;
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(v16[2]);
  }
  v18 = v16[4];
  if (v18)
  {
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v16[5]);
  }
  return swift_bridgeObjectRelease(v16[8]);
}

uint64_t sub_1001F4A70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(const void *, uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const void *v76;
  uint64_t v77;
  void *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  v11 = a3[12];
  __dst = (void *)(a1 + v11);
  v76 = (const void *)(a2 + v11);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v12 = type metadata accessor for Date(0);
  v77 = *(_QWORD *)(v12 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v77 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14 = swift_bridgeObjectRetain(v10);
  if (v13(v76, 1, v12, v14))
  {
    v15 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(__dst, v76, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    v16 = v77;
  }
  else
  {
    v16 = v77;
    (*(void (**)(void *, const void *, uint64_t))(v77 + 16))(__dst, v76, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(__dst, 0, 1, v12);
  }
  v17 = a3[13];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v13)(a2 + v17, 1, v12))
  {
    v20 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v18, v19, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v12);
  }
  v21 = a3[14];
  v22 = a1 + v21;
  v23 = (uint64_t *)(a2 + v21);
  v24 = v23[1];
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
  }
  else
  {
    v25 = *v23;
    sub_10013DCA0(*v23, v23[1]);
    *(_QWORD *)v22 = v25;
    *(_QWORD *)(v22 + 8) = v24;
  }
  v26 = a3[15];
  v27 = a3[16];
  v28 = (_QWORD *)(a1 + v26);
  v29 = (_QWORD *)(a2 + v26);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = a1 + v27;
  v32 = a2 + v27;
  *(_BYTE *)(v31 + 32) = *(_BYTE *)(v32 + 32);
  v33 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v33;
  v34 = a3[17];
  v35 = a3[18];
  v36 = a1 + v34;
  v37 = a2 + v34;
  *(_BYTE *)(v36 + 64) = *(_BYTE *)(v37 + 64);
  v38 = *(_OWORD *)(v37 + 48);
  *(_OWORD *)(v36 + 32) = *(_OWORD *)(v37 + 32);
  *(_OWORD *)(v36 + 48) = v38;
  v39 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v39;
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  v40 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  v41 = (void *)(a1 + v40);
  v42 = (const void *)(a2 + v40);
  v43 = type metadata accessor for URL(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v44 + 48);
  v46 = swift_bridgeObjectRetain(v30);
  if (v45(v42, 1, v43, v46))
  {
    v47 = sub_100012E18(&qword_1005CEFD0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v48 = a3[21];
  v49 = a1 + v48;
  v50 = (uint64_t *)(a2 + v48);
  v51 = v50[1];
  if (v51 >> 60 == 15)
  {
    *(_OWORD *)v49 = *(_OWORD *)v50;
  }
  else
  {
    v52 = *v50;
    sub_10013DCA0(*v50, v50[1]);
    *(_QWORD *)v49 = v52;
    *(_QWORD *)(v49 + 8) = v51;
  }
  v53 = a3[22];
  v54 = a3[23];
  v55 = a1 + v53;
  v56 = a2 + v53;
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_BYTE *)(v55 + 16) = *(_BYTE *)(v56 + 16);
  v57 = *(_QWORD *)(a2 + v54);
  *(_QWORD *)(a1 + v54) = v57;
  v58 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v59 = *(_QWORD *)(a2 + v58);
  *(_QWORD *)(a1 + v58) = v59;
  v60 = a3[26];
  v61 = a3[27];
  v62 = (_QWORD *)(a1 + v60);
  v63 = (_QWORD *)(a2 + v60);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  *(_BYTE *)(a1 + v61) = *(_BYTE *)(a2 + v61);
  v65 = a3[28];
  v66 = a1 + v65;
  v67 = a2 + v65;
  v68 = *(_QWORD *)(a2 + v65 + 8);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v64);
  if (!v68)
  {
    *(_OWORD *)v66 = *(_OWORD *)v67;
    *(_QWORD *)(v66 + 16) = *(_QWORD *)(v67 + 16);
    v71 = *(_QWORD *)(v67 + 32);
    if (!v71)
    {
LABEL_22:
      *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
      *(_QWORD *)(v66 + 40) = *(_QWORD *)(v67 + 40);
      goto LABEL_23;
    }
LABEL_20:
    *(_QWORD *)(v66 + 24) = *(_QWORD *)(v67 + 24);
    *(_QWORD *)(v66 + 32) = v71;
    v72 = *(_QWORD *)(v67 + 40);
    *(_QWORD *)(v66 + 40) = v72;
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v72);
LABEL_23:
    *(_QWORD *)(v66 + 48) = *(_QWORD *)(v67 + 48);
    *(_BYTE *)(v66 + 56) = *(_BYTE *)(v67 + 56);
    v74 = *(_QWORD *)(v67 + 64);
    *(_QWORD *)(v66 + 64) = v74;
    *(_BYTE *)(v66 + 72) = *(_BYTE *)(v67 + 72);
    swift_bridgeObjectRetain(v74);
    return a1;
  }
  if (v68 != 1)
  {
    *(_QWORD *)v66 = *(_QWORD *)v67;
    *(_QWORD *)(v66 + 8) = v68;
    v73 = *(_QWORD *)(v67 + 16);
    *(_QWORD *)(v66 + 16) = v73;
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v73);
    v71 = *(_QWORD *)(v67 + 32);
    if (!v71)
      goto LABEL_22;
    goto LABEL_20;
  }
  v69 = *(_OWORD *)(v67 + 48);
  *(_OWORD *)(v66 + 32) = *(_OWORD *)(v67 + 32);
  *(_OWORD *)(v66 + 48) = v69;
  *(_OWORD *)(v66 + 57) = *(_OWORD *)(v67 + 57);
  v70 = *(_OWORD *)(v67 + 16);
  *(_OWORD *)v66 = *(_OWORD *)v67;
  *(_OWORD *)(v66 + 16) = v70;
  return a1;
}

uint64_t sub_1001F4ECC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  _OWORD *v113;
  _OWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[12];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_7:
  v25 = a3[13];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = v21((void *)(a1 + v25), 1, v19);
  v29 = v21(v27, 1, v19);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v26, v27, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v26, v19);
LABEL_12:
    v30 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v26, v27, v19);
LABEL_13:
  v31 = a3[14];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = *(_QWORD *)(a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      sub_10013DCA0(v35, v34);
      *v32 = v35;
      v32[1] = v34;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v34 >> 60 == 15)
  {
    sub_1001F56D0((uint64_t)v32);
LABEL_18:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_20;
  }
  v36 = *v33;
  sub_10013DCA0(v36, v34);
  v37 = *v32;
  v38 = v32[1];
  *v32 = v36;
  v32[1] = v34;
  sub_10013DD30(v37, v38);
LABEL_20:
  v39 = a3[15];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[16];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = *(_BYTE *)(v46 + 32);
  v48 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v48;
  *(_BYTE *)(v45 + 32) = v47;
  v49 = a3[17];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_OWORD *)(v51 + 16);
  v53 = *(_OWORD *)(v51 + 32);
  v54 = *(_OWORD *)(v51 + 48);
  *(_BYTE *)(v50 + 64) = *(_BYTE *)(v51 + 64);
  *(_OWORD *)(v50 + 32) = v53;
  *(_OWORD *)(v50 + 48) = v54;
  *(_OWORD *)(v50 + 16) = v52;
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  v55 = a3[20];
  v56 = (void *)(a1 + v55);
  v57 = (void *)(a2 + v55);
  v58 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(void *, void *, uint64_t))(v59 + 16))(v56, v57, v58);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v62)
  {
    (*(void (**)(void *, uint64_t))(v59 + 8))(v56, v58);
LABEL_25:
    v63 = sub_100012E18(&qword_1005CEFD0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(void *, void *, uint64_t))(v59 + 24))(v56, v57, v58);
LABEL_26:
  v64 = a3[21];
  v65 = (uint64_t *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v67 = *(_QWORD *)(a2 + v64 + 8);
  if (*(_QWORD *)(a1 + v64 + 8) >> 60 == 15)
  {
    if (v67 >> 60 != 15)
    {
      v68 = *v66;
      sub_10013DCA0(v68, v67);
      *v65 = v68;
      v65[1] = v67;
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  if (v67 >> 60 == 15)
  {
    sub_1001F56D0((uint64_t)v65);
LABEL_31:
    *(_OWORD *)v65 = *(_OWORD *)v66;
    goto LABEL_33;
  }
  v69 = *v66;
  sub_10013DCA0(v69, v67);
  v70 = *v65;
  v71 = v65[1];
  *v65 = v69;
  v65[1] = v67;
  sub_10013DD30(v70, v71);
LABEL_33:
  v72 = a3[22];
  v73 = a1 + v72;
  v74 = (__int128 *)(a2 + v72);
  v75 = *v74;
  *(_BYTE *)(v73 + 16) = *((_BYTE *)v74 + 16);
  *(_OWORD *)v73 = v75;
  v76 = a3[23];
  v77 = *(_QWORD *)(a1 + v76);
  v78 = *(_QWORD *)(a2 + v76);
  *(_QWORD *)(a1 + v76) = v78;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRelease(v77);
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v79 = a3[25];
  v80 = *(_QWORD *)(a1 + v79);
  v81 = *(_QWORD *)(a2 + v79);
  *(_QWORD *)(a1 + v79) = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v80);
  v82 = a3[26];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (_QWORD *)(a2 + v82);
  *v83 = *v84;
  v85 = v84[1];
  v86 = v83[1];
  v83[1] = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v87 = a3[28];
  v88 = a1 + v87;
  v89 = (__int128 *)(a2 + v87);
  v90 = *(_QWORD *)(a1 + v87 + 8);
  v91 = *((_QWORD *)v89 + 1);
  if (v90 == 1)
  {
    if (v91 == 1)
    {
      *(_OWORD *)v88 = *v89;
      v92 = v89[1];
      v93 = v89[2];
      v94 = v89[3];
      *(_OWORD *)(v88 + 57) = *(__int128 *)((char *)v89 + 57);
      *(_OWORD *)(v88 + 32) = v93;
      *(_OWORD *)(v88 + 48) = v94;
      *(_OWORD *)(v88 + 16) = v92;
      return a1;
    }
    if (v91)
    {
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v98 = *((_QWORD *)v89 + 1);
      *(_QWORD *)(v88 + 8) = v98;
      v99 = *((_QWORD *)v89 + 2);
      *(_QWORD *)(v88 + 16) = v99;
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v99);
      if (*((_QWORD *)v89 + 4))
      {
LABEL_40:
        *(_QWORD *)(v88 + 24) = *((_QWORD *)v89 + 3);
        v100 = *((_QWORD *)v89 + 4);
        *(_QWORD *)(v88 + 32) = v100;
        v101 = *((_QWORD *)v89 + 5);
        *(_QWORD *)(v88 + 40) = v101;
        swift_bridgeObjectRetain(v100);
        swift_bridgeObjectRetain(v101);
LABEL_49:
        v107 = *((_QWORD *)v89 + 6);
        *(_BYTE *)(v88 + 56) = *((_BYTE *)v89 + 56);
        *(_QWORD *)(v88 + 48) = v107;
        v108 = *((_QWORD *)v89 + 8);
        *(_QWORD *)(v88 + 64) = v108;
        *(_BYTE *)(v88 + 72) = *((_BYTE *)v89 + 72);
        swift_bridgeObjectRetain(v108);
        return a1;
      }
    }
    else
    {
      v105 = *v89;
      *(_QWORD *)(v88 + 16) = *((_QWORD *)v89 + 2);
      *(_OWORD *)v88 = v105;
      if (*((_QWORD *)v89 + 4))
        goto LABEL_40;
    }
    v106 = *(__int128 *)((char *)v89 + 24);
    *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
    *(_OWORD *)(v88 + 24) = v106;
    goto LABEL_49;
  }
  if (v91 == 1)
  {
    sub_1001F5738((_QWORD *)v88);
    *(_OWORD *)v88 = *v89;
    v96 = v89[2];
    v95 = v89[3];
    v97 = v89[1];
    *(_OWORD *)(v88 + 57) = *(__int128 *)((char *)v89 + 57);
    *(_OWORD *)(v88 + 32) = v96;
    *(_OWORD *)(v88 + 48) = v95;
    *(_OWORD *)(v88 + 16) = v97;
  }
  else
  {
    if (v90)
    {
      if (v91)
      {
        *(_QWORD *)v88 = *(_QWORD *)v89;
        v102 = *((_QWORD *)v89 + 1);
        *(_QWORD *)(v88 + 8) = v102;
        swift_bridgeObjectRetain(v102);
        swift_bridgeObjectRelease(v90);
        v103 = *((_QWORD *)v89 + 2);
        v104 = *(_QWORD *)(v88 + 16);
        *(_QWORD *)(v88 + 16) = v103;
        swift_bridgeObjectRetain(v103);
        swift_bridgeObjectRelease(v104);
      }
      else
      {
        sub_1001F5704(v88);
        v111 = *((_QWORD *)v89 + 2);
        *(_OWORD *)v88 = *v89;
        *(_QWORD *)(v88 + 16) = v111;
      }
    }
    else if (v91)
    {
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v109 = *((_QWORD *)v89 + 1);
      *(_QWORD *)(v88 + 8) = v109;
      v110 = *((_QWORD *)v89 + 2);
      *(_QWORD *)(v88 + 16) = v110;
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRetain(v110);
    }
    else
    {
      v112 = *v89;
      *(_QWORD *)(v88 + 16) = *((_QWORD *)v89 + 2);
      *(_OWORD *)v88 = v112;
    }
    v113 = (_OWORD *)(v88 + 24);
    v114 = (__int128 *)((char *)v89 + 24);
    v115 = *(_QWORD *)(v88 + 32);
    v116 = *((_QWORD *)v89 + 4);
    if (v115)
    {
      if (v116)
      {
        *(_QWORD *)(v88 + 24) = *((_QWORD *)v89 + 3);
        v117 = *((_QWORD *)v89 + 4);
        *(_QWORD *)(v88 + 32) = v117;
        swift_bridgeObjectRetain(v117);
        swift_bridgeObjectRelease(v115);
        v118 = *((_QWORD *)v89 + 5);
        v119 = *(_QWORD *)(v88 + 40);
        *(_QWORD *)(v88 + 40) = v118;
        swift_bridgeObjectRetain(v118);
        swift_bridgeObjectRelease(v119);
      }
      else
      {
        sub_1001F5704(v88 + 24);
        v122 = *((_QWORD *)v89 + 5);
        *v113 = *v114;
        *(_QWORD *)(v88 + 40) = v122;
      }
    }
    else if (v116)
    {
      *(_QWORD *)(v88 + 24) = *((_QWORD *)v89 + 3);
      v120 = *((_QWORD *)v89 + 4);
      *(_QWORD *)(v88 + 32) = v120;
      v121 = *((_QWORD *)v89 + 5);
      *(_QWORD *)(v88 + 40) = v121;
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRetain(v121);
    }
    else
    {
      v123 = *v114;
      *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
      *v113 = v123;
    }
    v124 = *((_QWORD *)v89 + 6);
    *(_BYTE *)(v88 + 56) = *((_BYTE *)v89 + 56);
    *(_QWORD *)(v88 + 48) = v124;
    v125 = *(_QWORD *)(v88 + 64);
    v126 = *((_QWORD *)v89 + 8);
    *(_QWORD *)(v88 + 64) = v126;
    swift_bridgeObjectRetain(v126);
    swift_bridgeObjectRelease(v125);
    *(_BYTE *)(v88 + 72) = *((_BYTE *)v89 + 72);
  }
  return a1;
}

uint64_t sub_1001F56D0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t sub_1001F5704(uint64_t a1)
{
  _s16AttributedStringV5ColorVwxx();
  return a1;
}

_QWORD *sub_1001F5738(_QWORD *a1)
{
  _s14AudioRecordingVwxx(a1);
  return a1;
}

uint64_t sub_1001F576C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = a3[12];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[13];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    v17 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v19 = a3[16];
  v20 = a3[17];
  v21 = a1 + v19;
  v22 = a2 + v19;
  v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  *(_BYTE *)(v21 + 32) = *(_BYTE *)(v22 + 32);
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 64) = *(_BYTE *)(v25 + 64);
  v26 = *(_OWORD *)(v25 + 48);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 32);
  *(_OWORD *)(v24 + 48) = v26;
  v27 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v27;
  v28 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[20];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = type metadata accessor for URL(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_100012E18(&qword_1005CEFD0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v35 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  v38 = a3[24];
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v38) = *(_BYTE *)(a2 + v38);
  v39 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_OWORD *)(a1 + v39) = *(_OWORD *)(a2 + v39);
  v40 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v41 = (_OWORD *)(a1 + v40);
  v42 = (_OWORD *)(a2 + v40);
  *(_OWORD *)((char *)v41 + 57) = *(_OWORD *)((char *)v42 + 57);
  v43 = v42[3];
  v41[2] = v42[2];
  v41[3] = v43;
  v44 = v42[1];
  *v41 = *v42;
  v41[1] = v44;
  return a1;
}

uint64_t sub_1001F5A30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a3[12];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  v25 = a3[13];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = v21((void *)(a1 + v25), 1, v19);
  v29 = v21(v27, 1, v19);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v26, v27, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v26, v19);
LABEL_12:
    v30 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v26, v27, v19);
LABEL_13:
  v31 = a3[14];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a1 + v31 + 8);
  if (v34 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_18;
  }
  v35 = *(_QWORD *)(v33 + 8);
  if (v35 >> 60 == 15)
  {
    sub_1001F56D0(v32);
    goto LABEL_16;
  }
  v36 = *(_QWORD *)v32;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_QWORD *)(v32 + 8) = v35;
  sub_10013DD30(v36, v34);
LABEL_18:
  v37 = a3[15];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  v42 = v38[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  v43 = a3[16];
  v44 = a3[17];
  v45 = a1 + v43;
  v46 = a2 + v43;
  *(_BYTE *)(v45 + 32) = *(_BYTE *)(v46 + 32);
  v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  v48 = a1 + v44;
  v49 = a2 + v44;
  *(_BYTE *)(v48 + 64) = *(_BYTE *)(v49 + 64);
  v50 = *(_OWORD *)(v49 + 48);
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(_OWORD *)(v48 + 48) = v50;
  v51 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v51;
  v52 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  *(_BYTE *)(a1 + v52) = *(_BYTE *)(a2 + v52);
  v53 = a3[20];
  v54 = (void *)(a1 + v53);
  v55 = (void *)(a2 + v53);
  v56 = type metadata accessor for URL(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, void *, uint64_t))(v57 + 32))(v54, v55, v56);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v57 + 8))(v54, v56);
LABEL_23:
    v61 = sub_100012E18(&qword_1005CEFD0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(void *, void *, uint64_t))(v57 + 40))(v54, v55, v56);
LABEL_24:
  v62 = a3[21];
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = *(_QWORD *)(a1 + v62 + 8);
  if (v65 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)v63 = *(_OWORD *)v64;
    goto LABEL_29;
  }
  v66 = *(_QWORD *)(v64 + 8);
  if (v66 >> 60 == 15)
  {
    sub_1001F56D0(v63);
    goto LABEL_27;
  }
  v67 = *(_QWORD *)v63;
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *(_QWORD *)(v63 + 8) = v66;
  sub_10013DD30(v67, v65);
LABEL_29:
  v68 = a3[22];
  v69 = a3[23];
  v70 = a1 + v68;
  v71 = a2 + v68;
  *(_OWORD *)v70 = *(_OWORD *)v71;
  *(_BYTE *)(v70 + 16) = *(_BYTE *)(v71 + 16);
  v72 = *(_QWORD *)(a1 + v69);
  *(_QWORD *)(a1 + v69) = *(_QWORD *)(a2 + v69);
  swift_bridgeObjectRelease(v72);
  v73 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v74 = *(_QWORD *)(a1 + v73);
  *(_QWORD *)(a1 + v73) = *(_QWORD *)(a2 + v73);
  swift_bridgeObjectRelease(v74);
  v75 = a3[26];
  v76 = (_QWORD *)(a1 + v75);
  v77 = (uint64_t *)(a2 + v75);
  v79 = *v77;
  v78 = v77[1];
  v80 = v76[1];
  *v76 = v79;
  v76[1] = v78;
  swift_bridgeObjectRelease(v80);
  v81 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v82 = a1 + v81;
  v83 = a2 + v81;
  v84 = *(_QWORD *)(a1 + v81 + 8);
  if (v84 != 1)
  {
    v85 = *(_QWORD *)(v83 + 8);
    if (v85 == 1)
    {
      sub_1001F5738((_QWORD *)(a1 + v81));
      goto LABEL_32;
    }
    if (v84)
    {
      if (v85)
      {
        *(_QWORD *)v82 = *(_QWORD *)v83;
        *(_QWORD *)(v82 + 8) = v85;
        swift_bridgeObjectRelease(v84);
        v88 = *(_QWORD *)(v82 + 16);
        *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
        swift_bridgeObjectRelease(v88);
        goto LABEL_41;
      }
      sub_1001F5704(a1 + v81);
    }
    *(_OWORD *)v82 = *(_OWORD *)v83;
    *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
LABEL_41:
    v89 = *(_QWORD *)(v82 + 32);
    if (v89)
    {
      v90 = *(_QWORD *)(v83 + 32);
      if (v90)
      {
        *(_QWORD *)(v82 + 24) = *(_QWORD *)(v83 + 24);
        *(_QWORD *)(v82 + 32) = v90;
        swift_bridgeObjectRelease(v89);
        v91 = *(_QWORD *)(v82 + 40);
        *(_QWORD *)(v82 + 40) = *(_QWORD *)(v83 + 40);
        swift_bridgeObjectRelease(v91);
LABEL_46:
        *(_QWORD *)(v82 + 48) = *(_QWORD *)(v83 + 48);
        *(_BYTE *)(v82 + 56) = *(_BYTE *)(v83 + 56);
        v92 = *(_QWORD *)(v82 + 64);
        *(_QWORD *)(v82 + 64) = *(_QWORD *)(v83 + 64);
        swift_bridgeObjectRelease(v92);
        *(_BYTE *)(v82 + 72) = *(_BYTE *)(v83 + 72);
        return a1;
      }
      sub_1001F5704(v82 + 24);
    }
    *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
    *(_QWORD *)(v82 + 40) = *(_QWORD *)(v83 + 40);
    goto LABEL_46;
  }
LABEL_32:
  v86 = *(_OWORD *)(v83 + 48);
  *(_OWORD *)(v82 + 32) = *(_OWORD *)(v83 + 32);
  *(_OWORD *)(v82 + 48) = v86;
  *(_OWORD *)(v82 + 57) = *(_OWORD *)(v83 + 57);
  v87 = *(_OWORD *)(v83 + 16);
  *(_OWORD *)v82 = *(_OWORD *)v83;
  *(_OWORD *)(v82 + 16) = v87;
  return a1;
}

uint64_t sub_1001F5F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F5FA0);
}

uint64_t sub_1001F5FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 48);
    }
    else
    {
      v10 = sub_100012E18(&qword_1005CEFD0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 80);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1001F6048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F6054);
}

uint64_t sub_1001F6054(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 48);
    }
    else
    {
      v10 = sub_100012E18(&qword_1005CEFD0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 80);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1001F60F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v6[0] = &unk_10045A670;
  v6[1] = &unk_10045A688;
  v6[2] = &unk_10045A6A0;
  v6[3] = &unk_10045A6A0;
  v6[4] = &unk_10045A6B8;
  v6[5] = &unk_10045A6B8;
  v6[6] = &unk_10045A6A0;
  v6[7] = &unk_10045A6A0;
  sub_100018C7C(319, (unint64_t *)&qword_1005DA840, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    v9 = &unk_10045A6D0;
    v10 = &unk_10045A6A0;
    v11 = &unk_10045A6E8;
    v12 = &unk_10045A700;
    v13 = &unk_10045A670;
    v14 = &unk_10045A718;
    sub_100018C7C(319, (unint64_t *)&qword_1005D2CD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v15 = *(_QWORD *)(v4 - 8) + 64;
      v16 = &unk_10045A6D0;
      v17 = &unk_10045A730;
      v18 = &unk_10045A748;
      v19 = &unk_10045A6B8;
      v20 = &unk_10045A748;
      v21 = &unk_10045A6A0;
      v22 = &unk_10045A760;
      v23 = &unk_10045A778;
      swift_initStructMetadata(a1, 256, 25, v6, a1 + 16);
    }
  }
}

uint64_t sub_1001F6238(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100019C6C(&qword_1005D42D8, type metadata accessor for ICAttachmentArchiveModel, (uint64_t)&unk_10045A7FC);
  result = sub_100019C6C(&qword_1005D42E0, type metadata accessor for ICAttachmentArchiveModel, (uint64_t)&unk_10045A824);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001F6294()
{
  unint64_t result;

  result = qword_1005D42F0;
  if (!qword_1005D42F0)
  {
    result = swift_getWitnessTable(&unk_10045AD5C, &type metadata for ICAttachmentArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D42F0);
  }
  return result;
}

unint64_t sub_1001F62D8()
{
  unint64_t result;

  result = qword_1005D42F8;
  if (!qword_1005D42F8)
  {
    result = swift_getWitnessTable(&unk_10045F828, &type metadata for ICArchiveModels);
    atomic_store(result, (unint64_t *)&qword_1005D42F8);
  }
  return result;
}

unint64_t sub_1001F631C()
{
  unint64_t result;

  result = qword_1005D4308;
  if (!qword_1005D4308)
  {
    result = swift_getWitnessTable(&unk_10045A7AC, &type metadata for ICAttachmentArchiveModel.Cropping);
    atomic_store(result, (unint64_t *)&qword_1005D4308);
  }
  return result;
}

unint64_t sub_1001F6360()
{
  unint64_t result;

  result = qword_1005D4310;
  if (!qword_1005D4310)
  {
    result = swift_getWitnessTable(&unk_10045AD34, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1005D4310);
  }
  return result;
}

unint64_t sub_1001F63A4()
{
  unint64_t result;

  result = qword_1005D4318;
  if (!qword_1005D4318)
  {
    result = swift_getWitnessTable(&unk_10045AD0C, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1005D4318);
  }
  return result;
}

unint64_t sub_1001F63E8()
{
  unint64_t result;

  result = qword_1005D4320;
  if (!qword_1005D4320)
  {
    result = swift_getWitnessTable(&unk_10045ACE4, &type metadata for ICAttachmentArchiveModel.Coordinate);
    atomic_store(result, (unint64_t *)&qword_1005D4320);
  }
  return result;
}

uint64_t sub_1001F642C()
{
  return sub_1001F6450(&qword_1005D4338, &qword_1005D1978, (void (*)(void))sub_1001F64B4, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

uint64_t sub_1001F6450(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10001537C(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001F64B4()
{
  unint64_t result;

  result = qword_1005D4340;
  if (!qword_1005D4340)
  {
    result = swift_getWitnessTable(&unk_10045DE14, &_s16AttributedStringVN);
    atomic_store(result, (unint64_t *)&qword_1005D4340);
  }
  return result;
}

unint64_t sub_1001F64F8()
{
  unint64_t result;

  result = qword_1005D4350;
  if (!qword_1005D4350)
  {
    result = swift_getWitnessTable(&unk_100468BEC, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1005D4350);
  }
  return result;
}

unint64_t sub_1001F653C()
{
  unint64_t result;

  result = qword_1005D4358;
  if (!qword_1005D4358)
  {
    result = swift_getWitnessTable(&unk_100466D50, &_s14AudioRecordingVN);
    atomic_store(result, (unint64_t *)&qword_1005D4358);
  }
  return result;
}

unint64_t sub_1001F6580()
{
  unint64_t result;

  result = qword_1005D4368;
  if (!qword_1005D4368)
  {
    result = swift_getWitnessTable(&unk_10045F750, &type metadata for ICArchiveModels);
    atomic_store(result, (unint64_t *)&qword_1005D4368);
  }
  return result;
}

unint64_t sub_1001F65C4()
{
  unint64_t result;

  result = qword_1005D4378;
  if (!qword_1005D4378)
  {
    result = swift_getWitnessTable(&unk_10045A7D4, &type metadata for ICAttachmentArchiveModel.Cropping);
    atomic_store(result, (unint64_t *)&qword_1005D4378);
  }
  return result;
}

unint64_t sub_1001F6608()
{
  unint64_t result;

  result = qword_1005D4380;
  if (!qword_1005D4380)
  {
    result = swift_getWitnessTable(&unk_10045ACBC, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1005D4380);
  }
  return result;
}

unint64_t sub_1001F664C()
{
  unint64_t result;

  result = qword_1005D4388;
  if (!qword_1005D4388)
  {
    result = swift_getWitnessTable(&unk_10045AC94, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1005D4388);
  }
  return result;
}

unint64_t sub_1001F6690()
{
  unint64_t result;

  result = qword_1005D4390;
  if (!qword_1005D4390)
  {
    result = swift_getWitnessTable(&unk_10045AC6C, &type metadata for ICAttachmentArchiveModel.Coordinate);
    atomic_store(result, (unint64_t *)&qword_1005D4390);
  }
  return result;
}

uint64_t sub_1001F66D4()
{
  return sub_1001F6450(&qword_1005D43A0, &qword_1005D1978, (void (*)(void))sub_1001F66F8, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_1001F66F8()
{
  unint64_t result;

  result = qword_1005D43A8;
  if (!qword_1005D43A8)
  {
    result = swift_getWitnessTable(&unk_10045DE3C, &_s16AttributedStringVN);
    atomic_store(result, (unint64_t *)&qword_1005D43A8);
  }
  return result;
}

uint64_t sub_1001F673C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001537C(&qword_1005D39A8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001F679C()
{
  unint64_t result;

  result = qword_1005D43B8;
  if (!qword_1005D43B8)
  {
    result = swift_getWitnessTable(&unk_100468B24, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1005D43B8);
  }
  return result;
}

unint64_t sub_1001F67E0()
{
  unint64_t result;

  result = qword_1005D43C0;
  if (!qword_1005D43C0)
  {
    result = swift_getWitnessTable(&unk_100466D78, &_s14AudioRecordingVN);
    atomic_store(result, (unint64_t *)&qword_1005D43C0);
  }
  return result;
}

uint64_t sub_1001F6824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ICAttachmentArchiveModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F6868(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ICAttachmentArchiveModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001F68A4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x7466654C706F74 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7466654C706F74, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7468676952706F74 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7468676952706F74, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x69526D6F74746F62 && a2 == 0xEB00000000746867)
  {
    v8 = 0xEB00000000746867;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69526D6F74746F62, 0xEB00000000746867, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x654C6D6F74746F62 && a2 == 0xEA00000000007466)
  {
    swift_bridgeObjectRelease(0xEA00000000007466);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x654C6D6F74746F62, 0xEA00000000007466, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001F6A80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = sub_100012E18(&qword_1005D43C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1001F6CBC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_1000153C0(a1);
  type metadata accessor for CGPoint(0);
  v13 = v12;
  v26 = 0;
  v14 = sub_100019C6C(&qword_1005D43D8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v26, v5, v13, v14);
  v15 = v24;
  v16 = v25;
  v26 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v26, v5, v13, v14);
  v17 = v24;
  v18 = v25;
  v26 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v26, v5, v13, v14);
  v19 = v24;
  v20 = v25;
  v26 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v26, v5, v13, v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v24;
  v22 = v25;
  result = sub_1000153C0(a1);
  *a2 = v15;
  a2[1] = v16;
  a2[2] = v17;
  a2[3] = v18;
  a2[4] = v19;
  a2[5] = v20;
  a2[6] = v21;
  a2[7] = v22;
  return result;
}

unint64_t sub_1001F6CBC()
{
  unint64_t result;

  result = qword_1005D43D0;
  if (!qword_1005D43D0)
  {
    result = swift_getWitnessTable(&unk_10045AC1C, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D43D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Cropping.CodingKeys()
{
  return &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ICAttachmentArchiveModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE8)
    goto LABEL_17;
  if (a2 + 24 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 24) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 24;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 24;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 24;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v8 = v6 - 25;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_1001F6DF4 + 4 * byte_10045A61A[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_1001F6E28 + 4 * byte_10045A615[v4]))();
}

uint64_t sub_1001F6E28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F6E30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F6E38);
  return result;
}

uint64_t sub_1001F6E44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F6E4CLL);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_1001F6E50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F6E58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.CodingKeys()
{
  return &type metadata for ICAttachmentArchiveModel.CodingKeys;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Coordinate()
{
  return &type metadata for ICAttachmentArchiveModel.Coordinate;
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.ImageFilters(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001F6ED0 + 4 * byte_10045A624[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001F6F04 + 4 * byte_10045A61F[v4]))();
}

uint64_t sub_1001F6F04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F6F0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F6F14);
  return result;
}

uint64_t sub_1001F6F20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F6F28);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001F6F2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F6F34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.ImageFilters()
{
  return &type metadata for ICAttachmentArchiveModel.ImageFilters;
}

uint64_t _s11MobileNotes24ICAttachmentArchiveModelV12OrientationsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001F6F9C + 4 * byte_10045A62E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001F6FD0 + 4 * byte_10045A629[v4]))();
}

uint64_t sub_1001F6FD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F6FD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F6FE0);
  return result;
}

uint64_t sub_1001F6FEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F6FF4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001F6FF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F7000(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Orientations()
{
  return &type metadata for ICAttachmentArchiveModel.Orientations;
}

uint64_t sub_1001F7020()
{
  return sub_100016638(&qword_1005D43F0, &qword_1005D43F8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1001F7050()
{
  unint64_t result;

  result = qword_1005D4400;
  if (!qword_1005D4400)
  {
    result = swift_getWitnessTable(&unk_10045A96C, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1005D4400);
  }
  return result;
}

uint64_t sub_1001F7098()
{
  return sub_100016638(&qword_1005D4408, &qword_1005D4410, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1001F70C8()
{
  unint64_t result;

  result = qword_1005D4418;
  if (!qword_1005D4418)
  {
    result = swift_getWitnessTable(&unk_10045AA84, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1005D4418);
  }
  return result;
}

unint64_t sub_1001F7110()
{
  unint64_t result;

  result = qword_1005D4420;
  if (!qword_1005D4420)
  {
    result = swift_getWitnessTable(&unk_10045AB3C, &type metadata for ICAttachmentArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4420);
  }
  return result;
}

unint64_t sub_1001F7158()
{
  unint64_t result;

  result = qword_1005D4428;
  if (!qword_1005D4428)
  {
    result = swift_getWitnessTable(&unk_10045ABF4, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4428);
  }
  return result;
}

unint64_t sub_1001F71A0()
{
  unint64_t result;

  result = qword_1005D4430;
  if (!qword_1005D4430)
  {
    result = swift_getWitnessTable(&unk_10045AB64, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4430);
  }
  return result;
}

unint64_t sub_1001F71E8()
{
  unint64_t result;

  result = qword_1005D4438;
  if (!qword_1005D4438)
  {
    result = swift_getWitnessTable(&unk_10045AB8C, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4438);
  }
  return result;
}

unint64_t sub_1001F7230()
{
  unint64_t result;

  result = qword_1005D4440;
  if (!qword_1005D4440)
  {
    result = swift_getWitnessTable(&unk_10045AAAC, &type metadata for ICAttachmentArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4440);
  }
  return result;
}

unint64_t sub_1001F7278()
{
  unint64_t result;

  result = qword_1005D4448;
  if (!qword_1005D4448)
  {
    result = swift_getWitnessTable(&unk_10045AAD4, &type metadata for ICAttachmentArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4448);
  }
  return result;
}

unint64_t sub_1001F72BC()
{
  unint64_t result;

  result = qword_1005D4450;
  if (!qword_1005D4450)
  {
    result = swift_getWitnessTable(&unk_10045A8F4, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1005D4450);
  }
  return result;
}

unint64_t sub_1001F7300()
{
  unint64_t result;

  result = qword_1005D4458;
  if (!qword_1005D4458)
  {
    result = swift_getWitnessTable(&unk_10045AA0C, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1005D4458);
  }
  return result;
}

unint64_t sub_1001F7344()
{
  unint64_t result;

  result = qword_1005D4468;
  if (!qword_1005D4468)
  {
    result = swift_getWitnessTable(&unk_10045AE64, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4468);
  }
  return result;
}

unint64_t sub_1001F7388(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005560D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_1001F73D0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100556150, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1001F7418(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_1001F7514(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v13;
  char v14;
  char v15;

  v4 = sub_100012E18(&qword_1005D4470);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10012D19C(a1, v8);
  v10 = sub_1001F7344();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys, v10, v8, v9);
  if (!v1)
  {
    v15 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v15, v4);
    v2 = v11;
    v14 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v14, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_1000153C0(a1);
  return v2;
}

unint64_t sub_1001F766C()
{
  unint64_t result;

  result = qword_1005D4478;
  if (!qword_1005D4478)
  {
    result = swift_getWitnessTable(&unk_10045A9D4, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1005D4478);
  }
  return result;
}

unint64_t sub_1001F76B0()
{
  unint64_t result;

  result = qword_1005D4480;
  if (!qword_1005D4480)
  {
    result = swift_getWitnessTable(&unk_10045A8BC, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1005D4480);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.Coordinate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001F7740 + 4 * byte_10045A638[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001F7774 + 4 * byte_10045A633[v4]))();
}

uint64_t sub_1001F7774(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F777C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F7784);
  return result;
}

uint64_t sub_1001F7790(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F7798);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001F779C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F77A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Coordinate.CodingKeys()
{
  return &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys;
}

unint64_t sub_1001F77C4()
{
  unint64_t result;

  result = qword_1005D4488;
  if (!qword_1005D4488)
  {
    result = swift_getWitnessTable(&unk_10045AE3C, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4488);
  }
  return result;
}

unint64_t sub_1001F780C()
{
  unint64_t result;

  result = qword_1005D4490;
  if (!qword_1005D4490)
  {
    result = swift_getWitnessTable(&unk_10045ADAC, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4490);
  }
  return result;
}

unint64_t sub_1001F7854()
{
  unint64_t result;

  result = qword_1005D4498;
  if (!qword_1005D4498)
  {
    result = swift_getWitnessTable(&unk_10045ADD4, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4498);
  }
  return result;
}

uint64_t sub_1001F78A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *object;
  uint64_t v26;
  unint64_t v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void (*v34)(uint64_t *, _QWORD);
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;

  v2 = v1;
  v4 = type metadata accessor for UIListContentConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v37 - v10;
  static UIListContentConfiguration.valueCell()(v9);
  v13 = type metadata accessor for UICellConfigurationState(0, v12);
  v40 = v13;
  v41 = &protocol witness table for UICellConfigurationState;
  v14 = sub_10012D160(&v38);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, a1, v13);
  UIListContentConfiguration.updated(for:)(&v38);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  sub_1000153C0(&v38);
  v16 = OBJC_IVAR____TtC11MobileNotes42FolderComposerFilterCellTagsExpandCollapse_hiddenTagCount;
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11MobileNotes42FolderComposerFilterCellTagsExpandCollapse_hiddenTagCount);
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (v17)
  {
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, 0, 0);

    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    UIListContentConfiguration.text.setter(v21, v23);
    v38 = 43;
    v39 = 0xE100000000000000;
    v37 = *(_QWORD *)(v2 + v16);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    v26 = v38;
    v27 = v39;
  }
  else
  {
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v18, "localizedStringForKey:value:table:", v28, 0, 0);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    UIListContentConfiguration.text.setter(v30, v32);
    v26 = 0;
    v27 = 0;
  }
  UIListContentConfiguration.secondaryText.setter(v26, v27);
  v33 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v34 = (void (*)(uint64_t *, _QWORD))UIListContentConfiguration.textProperties.modify(&v38);
  UIListContentConfiguration.TextProperties.color.setter(v33);
  v34(&v38, 0);
  v40 = v4;
  v41 = &protocol witness table for UIListContentConfiguration;
  v35 = sub_10012D160(&v38);
  (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v35, v11, v4);
  UICollectionViewCell.contentConfiguration.setter(&v38);
  return ((uint64_t (*)(char *, uint64_t))v15)(v11, v4);
}

id sub_1001F7D08()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellTagsExpandCollapse();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellTagsExpandCollapse()
{
  return objc_opt_self(_TtC11MobileNotes42FolderComposerFilterCellTagsExpandCollapse);
}

void sub_1001F7E1C()
{
  void *v0;
  id v1;
  id v2;
  char *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v7[4];
  __int128 v8;
  __int128 v9;

  v1 = objc_msgSend(v0, "textAttachment");
  if (v1)
  {
    v2 = v1;
    *((_QWORD *)&v9 + 1) = sub_1000163BC(0, (unint64_t *)&unk_1005D8F50, NSTextAttachment_ptr);
    *(_QWORD *)&v8 = v2;
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  v7[3] = sub_100012E18(&qword_1005CF190);
  v7[0] = swift_allocObject(&unk_10055E270, 48, 7);
  sub_1001F83A4((uint64_t)&v8, v7[0] + 16);
  v3 = (char *)sub_10016A09C((uint64_t)v7);
  sub_1000153C0(v7);
  sub_1000160C8((uint64_t)&v8);
  v4 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_menu];
  if (v4)
  {
    v5 = v4;
    v6 = sub_1001F83EC(v3);
    objc_msgSend(v6, "setMenu:", v5, v7[0]);
    objc_msgSend(v0, "setView:", v6);

    v3 = (char *)v6;
  }

}

double sub_1001F7F70(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  objc_class *ObjectType;
  Class isa;
  double v20;
  double v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  objc_super v30;

  ObjectType = (objc_class *)swift_getObjectType(v9);
  type metadata accessor for Key(0);
  sub_1001797A4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v30.receiver = v9;
  v30.super_class = ObjectType;
  objc_msgSendSuper2(&v30, "attachmentBoundsForAttributes:location:textContainer:proposedLineFragment:position:", isa, a8, a9, a1, a2, a3, a4, a5, a6);
  v21 = v20;

  v22 = objc_msgSend(v9, "textAttachment");
  if (v22)
  {
    v23 = v22;
    v24 = type metadata accessor for InlineMenuButtonTextAttachment();
    v25 = swift_dynamicCastClass(v23, v24);
    if (v25)
    {
      v26 = v25;
      v27 = OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font;
      objc_msgSend(*(id *)(v25 + OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font), "descender");
      objc_msgSend(*(id *)(v26 + v27), "lineHeight");
      if (v28 + 8.0 < *(double *)(v26 + OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_minimumHeight))
        objc_msgSend(*(id *)(v26 + v27), "lineHeight");
    }

  }
  return v21;
}

uint64_t sub_1001F8254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  id v11;
  uint64_t KeyPath;
  void *v14;

  v6 = type metadata accessor for AttributeContainer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, a1, v6);
  KeyPath = swift_getKeyPath(&unk_10045AF40, v7);
  v8 = swift_getKeyPath(&unk_10045AF70, &KeyPath);
  v14 = *(void **)(a2 + OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font);
  v9 = v14;
  v10 = sub_1001F8670();
  v11 = v9;
  return AttributeContainer.subscript.setter(&v14, v8, v10);
}

uint64_t sub_1001F8300(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_100012E18(&qword_1005D4508);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t type metadata accessor for InlineMenuButtonTextAttachmentViewProvider()
{
  return objc_opt_self(_TtC11MobileNotes42InlineMenuButtonTextAttachmentViewProvider);
}

uint64_t sub_1001F8378()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    sub_1000153C0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001F83A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005CF190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_1001F83EC(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  double v17;
  double v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v25;

  v2 = sub_100012E18(&qword_1005D44F8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UIButton.Configuration(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v25 - v11;
  static UIButton.Configuration.gray()(v10);
  v13 = *(void **)&a1[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_foregroundColor];
  v14 = v13;
  UIButton.Configuration.baseForegroundColor.setter(v13);
  v15 = OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font;
  v16 = objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font], "lineHeight");
  v17 = v19.n128_f64[0] + 8.0;
  v18 = *(double *)&a1[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_minimumHeight];
  v19.n128_u64[0] = 4.0;
  if (v17 < v18)
  {
    v16 = objc_msgSend(*(id *)&a1[v15], "lineHeight", 4.0);
    v19.n128_f64[0] = (v18 - v19.n128_f64[0]) * 0.5;
  }
  UIButton.Configuration.contentInsets.setter(v16, v19, 8.0, v19.n128_f64[0], 8.0);
  v20 = swift_allocObject(&unk_10055E298, 24, 7);
  *(_QWORD *)(v20 + 16) = a1;
  v21 = a1;
  UIConfigurationTextAttributesTransformer.init(_:)(sub_1001F864C, v20);
  v22 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v4, 0, 1, v22);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v4);
  sub_1000163BC(0, &qword_1005CFF58, UIButton_ptr);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  v23 = (void *)UIButton.init(configuration:primaryAction:)(v9, 0);
  objc_msgSend(v23, "setShowsMenuAsPrimaryAction:", 1);
  objc_msgSend(v23, "setChangesSelectionAsPrimaryAction:", 1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v23;
}

uint64_t sub_1001F8628()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F864C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001F8254(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_1001F8654()
{
  AttributeScopes.UIKitAttributes.font.getter();
  __break(1u);
}

unint64_t sub_1001F8670()
{
  unint64_t result;

  result = qword_1005D4500;
  if (!qword_1005D4500)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.UIKitAttributes.FontAttribute, &type metadata for AttributeScopes.UIKitAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_1005D4500);
  }
  return result;
}

void sub_1001F86B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_1001F8670();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1001F86D8()
{
  return 8;
}

uint64_t sub_1001F86E4(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1001F86EC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F86FC()
{
  uint64_t v0;

  v0 = sub_100012E18(&qword_1005D4508);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_1001F8740(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void *AddLinkAttachmentIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static AddLinkAttachmentIntent.persistentIdentifier;
}

unint64_t static AddLinkAttachmentIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1001F8774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static AddLinkAttachmentIntent.title);
  sub_10012A0B0(v10, (uint64_t)static AddLinkAttachmentIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x6B6E694C20646441, 0xE800000000000000);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t AddLinkAttachmentIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEAA8 != -1)
    swift_once(&qword_1005CEAA8, sub_1001F8774);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static AddLinkAttachmentIntent.title);
}

uint64_t static AddLinkAttachmentIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEAA8 != -1)
    swift_once(&qword_1005CEAA8, sub_1001F8774);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static AddLinkAttachmentIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static AddLinkAttachmentIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x8000000100482A70);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static AddLinkAttachmentIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005D4510);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D4518);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001F8D58();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 2, &type metadata for AddLinkAttachmentIntent, v6);
  v7._countAndFlagsBits = 543450177;
  v7._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10045AFB0, v8);
  v10 = sub_100012E18(&qword_1005D4528);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 544175136;
  v11._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_10045AFD8, v12);
  v14 = sub_100012E18(&qword_1005D4530);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for AddLinkAttachmentIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for AddLinkAttachmentIntent, v6);
}

unint64_t sub_1001F8D58()
{
  unint64_t result;

  result = qword_1005D4520;
  if (!qword_1005D4520)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddLinkAttachmentIntent, &type metadata for AddLinkAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4520);
  }
  return result;
}

uint64_t sub_1001F8D9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001F8DC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

double AddLinkAttachmentIntent.init()@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  sub_1001F9E44((uint64_t *)v5);
  v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  result = *(double *)&v6;
  v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

uint64_t AddLinkAttachmentIntent.url.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100179888(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100012DDC(a1, &qword_1005CEFD0);
}

uint64_t AddLinkAttachmentIntent.note.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for NoteEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100145220(a1, (uint64_t)v4, type metadata accessor for NoteEntity);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100145264(a1, type metadata accessor for NoteEntity);
}

uint64_t AddLinkAttachmentIntent.insertionRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AddLinkAttachmentIntent.insertionRange.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = result;
  *(_QWORD *)(v3 + 32) = a2;
  *(_BYTE *)(v3 + 40) = a3 & 1;
  return result;
}

uint64_t (*AddLinkAttachmentIntent.insertionRange.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t AddLinkAttachmentIntent.loggingConfiguration.getter()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t AddLinkAttachmentIntent.loggingConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  return AppDependency.wrappedValue.setter(v5);
}

uint64_t (*AddLinkAttachmentIntent.loggingConfiguration.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AppDependency.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t AddLinkAttachmentIntent.$loggingConfiguration.getter()
{
  return AppDependency.projectedValue.getter();
}

uint64_t AddLinkAttachmentIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for AttachmentEntity(0);
  v2[12] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v4);
  v2[14] = swift_task_alloc(v4);
  v2[15] = swift_task_alloc(v4);
  v2[16] = swift_task_alloc(v4);
  v5 = type metadata accessor for NoteID(0);
  v2[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[18] = v6;
  v2[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NoteEntity(0);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001F9104, 0, 0);
}

uint64_t sub_1001F9104()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  v2 = v0[19];
  v1 = (_QWORD *)v0[20];
  v3 = v0[17];
  v4 = v0[18];
  AppDependency.wrappedValue.getter(v0 + 5);
  v5 = (void *)v0[5];
  v0[21] = objc_msgSend(v5, "modernManagedObjectContext");

  IntentParameter.wrappedValue.getter(v1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_100145264((uint64_t)v1, type metadata accessor for NoteEntity);
  AppDependency.wrappedValue.getter(v0 + 6);
  v6 = v0[6];
  v0[22] = v6;
  v9 = (char *)&dword_1005D7890 + dword_1005D7890;
  v7 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v0[23] = v7;
  *v7 = v0;
  v7[1] = sub_1001F920C;
  return ((uint64_t (*)(_QWORD, uint64_t))v9)(v0[19], v6);
}

uint64_t sub_1001F920C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)(*(_QWORD *)v1 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_1001F928C, 0, 0);
}

uint64_t sub_1001F928C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = (void *)v0[24];
  v2 = (void *)v0[21];
  v3 = (__int128 *)v0[11];
  v4 = swift_allocObject(&unk_10055E300, 96, 7);
  v0[25] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[3];
  *(_OWORD *)(v4 + 64) = v3[2];
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v6;
  v8 = v1;
  v9 = v2;
  sub_1001FA7A0(v3);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(_:)[1]);
  v0[26] = v10;
  v11 = sub_100012E18(&qword_1005D1230);
  *v10 = v0;
  v10[1] = sub_1001F935C;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 7, sub_1001FA784, v4, v11);
}

uint64_t sub_1001F935C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 200));
  if (v0)
    v4 = sub_1001F9738;
  else
    v4 = sub_1001F93C8;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001F93C8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 56);
  *(_QWORD *)(v0 + 224) = v1;
  if (v1)
  {
    v2 = dword_1005D2B74;
    v3 = *(id *)(v0 + 168);
    v4 = v1;
    v5 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 232) = v5;
    *v5 = v0;
    v5[1] = sub_1001F9534;
    return AttachmentEntity.init(for:in:)(*(_QWORD *)(v0 + 128), (uint64_t)v4, *(_QWORD *)(v0 + 168));
  }
  else
  {
    v7 = *(void **)(v0 + 192);
    v8 = *(void **)(v0 + 168);
    type metadata accessor for ICError(0);
    v10 = v9;
    *(_QWORD *)(v0 + 72) = 227;
    v11 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v13 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 64), v0 + 72, v11, v10, v12);
    swift_willThrow(v13);

    v14 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001F9534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001F97BC;
  else
    v3 = sub_1001F9598;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001F9598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = *(void **)(v0 + 224);
  v15 = *(void **)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v16 = *(void **)(v0 + 192);
  v17 = v3;
  v13 = *(_QWORD *)(v0 + 96);
  sub_100145220(v2, v1, type metadata accessor for AttachmentEntity);
  v5 = _s11MobileNotes20OpenAttachmentIntentVACycfC_0();
  v7 = v6;
  v9 = v8;
  sub_100145220(v1, v4, type metadata accessor for AttachmentEntity);
  sub_100145220(v4, v3, type metadata accessor for AttachmentEntity);
  IntentParameter.wrappedValue.setter(v3);
  sub_100145264(v4, type metadata accessor for AttachmentEntity);
  sub_100145264(v1, type metadata accessor for AttachmentEntity);
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v7;
  *(_QWORD *)(v0 + 32) = v9;
  v10 = sub_100019C6C(&qword_1005D2BD0, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
  v11 = sub_100185970();
  static IntentResult.result<A, B>(value:opensIntent:)(v2, v0 + 16, v13, &type metadata for OpenAttachmentIntent, v10, v11);

  sub_100145264(v2, type metadata accessor for AttachmentEntity);
  swift_release(v5);
  swift_release(v7);
  swift_release(v9);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F9738()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 192);

  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F97BC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 224);
  v2 = *(void **)(v0 + 192);

  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001F9848(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  NSURL *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  unsigned int v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  _BYTE v60[24];
  _QWORD v61[2];
  char v62;

  v57 = a3;
  v7 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_6;
  v56 = a4;
  v17 = a1;
  v55 = a2;
  v18 = objc_msgSend(a2, "objectWithID:", v17);
  v19 = objc_opt_self(ICNote);
  v20 = (void *)swift_dynamicCastObjCClass(v18, v19);
  if (!v20)
  {

LABEL_6:
    type metadata accessor for ICError(0);
    v27 = v26;
    v58 = 227;
    v28 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v29 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v30 = _BridgedStoredNSError.init(_:userInfo:)(&v59, &v58, v28, v27, v29);
    swift_willThrow(v30);
    return;
  }
  v21 = v20;
  if ((objc_msgSend(v20, "isPasswordProtectedAndLocked") & 1) != 0)
  {
    v22 = sub_10013F4E8();
    v23 = swift_allocError(&type metadata for AppIntentsError, v22, 0, 0);
    v25 = 11;
LABEL_13:
    *v24 = v25;
    swift_willThrow(v23);

    return;
  }
  if (!objc_msgSend(v21, "isEditable"))
  {
    v37 = sub_10013F4E8();
    v23 = swift_allocError(&type metadata for AppIntentsError, v37, 0, 0);
    v25 = 12;
    goto LABEL_13;
  }
  if (!objc_msgSend(v21, "canAddAttachment"))
  {
    v38 = sub_10013F4E8();
    v23 = swift_allocError(&type metadata for AppIntentsError, v38, 0, 0);
    v25 = 21;
    goto LABEL_13;
  }
  v54 = v17;
  IntentParameter.wrappedValue.getter(v12);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v31 = sub_100012DDC((uint64_t)v12, &qword_1005CEFD0);
    v32 = IntentParameter.projectedValue.getter(v31);
    v33 = type metadata accessor for IntentDialog(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v9, 1, 1, v33);
    v34 = type metadata accessor for AppIntentError(0);
    v35 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v34, v35, 0, 0);
    IntentParameter.needsValueError(_:)(v9);
    swift_release(v32);
    v36 = sub_100012DDC((uint64_t)v9, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v36);

  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v14 + 32))(v16, v12, v13);
    URL._bridgeToObjectiveC()(v39);
    v41 = v40;
    v42 = objc_msgSend(v21, "addURLAttachmentWithURL:", v40);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v42)
    {
      v43 = objc_allocWithZone((Class)ICAttachmentInsertionController);
      v44 = v42;
      v45 = objc_msgSend(v43, "initWithNote:", v21);
      sub_1001FAC4C(v57 + 24, (uint64_t)v60);
      sub_1001FAC4C((uint64_t)v60, (uint64_t)v61);
      if ((v62 & 1) != 0)
        v46 = objc_msgSend(v45, "addAttachment:", v44);
      else
        v46 = objc_msgSend(v45, "addAttachment:atTextRange:", v44, v61[0], v61[1]);

      v59 = 0;
      v47 = objc_msgSend(v55, "save:", &v59);
      v48 = v59;
      if (v47)
      {
        v49 = v59;
        v50 = objc_msgSend(v44, "objectID");

        *v56 = v50;
      }
      else
      {
        v51 = v59;
        _convertNSErrorToError(_:)(v48);

        swift_willThrow(v52);
      }
    }
    else
    {

      *v56 = 0;
    }
  }
}

uint64_t sub_1001F9D8C(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;

  v4 = v1[1];
  *(_OWORD *)(v2 + 16) = *v1;
  *(_OWORD *)(v2 + 32) = v4;
  v5 = v1[3];
  *(_OWORD *)(v2 + 48) = v1[2];
  *(_OWORD *)(v2 + 64) = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_1005D453C);
  *(_QWORD *)(v2 + 80) = v6;
  *v6 = v2;
  v6[1] = sub_1001F9DFC;
  return AddLinkAttachmentIntent.perform()(a1);
}

uint64_t sub_1001F9DFC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1001F9E44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64x2_t v61;
  int16x8_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t result;
  uint64_t *v72;
  char *v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void (*v88)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unsigned __int32 v99;

  v81 = a1;
  v1 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v1);
  v80 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v3);
  v78 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for InputConnectionBehavior(0);
  v6 = *(_QWORD *)(v5 - 8);
  v89 = v5;
  v90 = v6;
  __chkstk_darwin(v5);
  v92 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v9 = __chkstk_darwin(v8);
  v79 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v76 = (char *)&v74 - v11;
  v12 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v12);
  v75 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v14);
  v85 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Locale(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for LocalizedStringResource(0);
  v27 = *(_QWORD *)(v26 - 8);
  v84 = v26;
  __chkstk_darwin(v26);
  v82 = (char *)&v74 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100012E18(&qword_1005CEF08);
  v29 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v29);
  v30 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
  v83 = v16;
  v31(v19, enum case for LocalizedStringResource.BundleDescription.main(_:), v16);
  v74 = v31;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter title for Add Link intent", 35, 2);
  v32 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x8000000100477680);
  static Locale.current.getter(v32);
  v31(v19, v30, v16);
  v33 = v85;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter description for name", 30, 2);
  v88 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
  v88(v33, 0, 1, v26);
  v34 = type metadata accessor for String.IntentInputOptions(0);
  v95 = 0;
  v96 = 0;
  v35 = v75;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v75, 1, 1, v34);
  v36 = type metadata accessor for IntentDialog(0);
  v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  v87 = v36;
  v37 = v76;
  v86(v76, 1, 1, v36);
  v91 = enum case for InputConnectionBehavior.default(_:);
  v38 = v89;
  v90 = *(_QWORD *)(v90 + 104);
  v39 = v92;
  ((void (*)(char *))v90)(v92);
  v77 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v82, v33, &v95, v35, v37, v39);
  v75 = (char *)sub_100012E18(&qword_1005CEFD8);
  v40 = String.LocalizationValue.init(stringLiteral:)(5001813, 0xE300000000000000);
  static Locale.current.getter(v40);
  v41 = v83;
  v42 = v74;
  v74(v19, v30, v83);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter title for Add Link intent", 35, 2);
  v43 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000030, 0x80000001004776B0);
  static Locale.current.getter(v43);
  v42(v19, v30, v41);
  v44 = v85;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter description for URL", 29, 2);
  v88(v44, 0, 1, v84);
  v45 = type metadata accessor for URL(0);
  v46 = v78;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v78, 1, 1, v45);
  v86(v37, 1, 1, v87);
  v47 = v92;
  ((void (*)(char *, _QWORD, uint64_t))v90)(v92, v91, v38);
  v48 = v82;
  v78 = (char *)IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v82, v44, v46, v37, v47);
  v75 = (char *)sub_100012E18((uint64_t *)&unk_1005CEE90);
  v49 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v49);
  v50 = v83;
  v42(v19, v30, v83);
  v51 = v48;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter title for Add Link intent", 35, 2);
  v52 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000025, 0x8000000100477710);
  static Locale.current.getter(v52);
  v42(v19, v30, v50);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter description for note", 30, 2);
  v88(v44, 0, 1, v84);
  v53 = type metadata accessor for NoteEntity(0);
  v54 = v80;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v80, 1, 1, v53);
  v56 = v86;
  v55 = v87;
  v86(v37, 1, 1, v87);
  v57 = v79;
  v56(v79, 1, 1, v55);
  v95 = sub_1001E9508();
  v96 = v58;
  v97 = v59;
  v98 = v60 & 1;
  v61 = (uint64x2_t)vdupq_n_s64(v60);
  v62 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v61, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v61, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v62.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v62), (int8x8_t)0x1000100010001);
  v99 = vmovn_s16(v62).u32[0];
  v63 = v92;
  ((void (*)(char *, _QWORD, uint64_t))v90)(v92, v91, v89);
  v64 = sub_100127D40();
  v65 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v51, v44, v54, v37, v57, v63, &v95, &type metadata for VisibleNotesQuery, v64);
  sub_100012E18(&qword_1005CEE50);
  v93 = 0xD000000000000021;
  v94 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(&v95, &v93, &type metadata for String, &protocol witness table for String);
  v66 = type metadata accessor for AppDependencyManager(0);
  v67 = static AppDependencyManager.shared.getter(v66);
  v68 = AppDependency.__allocating_init(key:manager:)(&v95, v67);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v93 = 0xD000000000000024;
  v94 = 0x8000000100476B40;
  v69 = AnyHashable.init<A>(_:)(&v95, &v93, &type metadata for String, &protocol witness table for String);
  v70 = static AppDependencyManager.shared.getter(v69);
  result = AppDependency.__allocating_init(key:manager:)(&v95, v70);
  v72 = v81;
  v73 = v78;
  *v81 = v77;
  v72[1] = (uint64_t)v73;
  v72[3] = 0;
  v72[4] = 0;
  v72[2] = v65;
  *((_BYTE *)v72 + 40) = 1;
  v72[6] = v68;
  v72[7] = result;
  return result;
}

uint64_t sub_1001FA730()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

void sub_1001FA784(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1001F9848(*(void **)(v1 + 16), *(void **)(v1 + 24), v1 + 32, a1);
}

_QWORD *sub_1001FA7A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[6];
  v5 = a1[7];
  swift_retain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

unint64_t sub_1001FA804()
{
  unint64_t result;

  result = qword_1005D4540;
  if (!qword_1005D4540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddLinkAttachmentIntent, &type metadata for AddLinkAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4540);
  }
  return result;
}

uint64_t sub_1001FA848()
{
  return sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
}

unint64_t sub_1001FA87C()
{
  unint64_t result;

  result = qword_1005D4548;
  if (!qword_1005D4548)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddLinkAttachmentIntent, &type metadata for AddLinkAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4548);
  }
  return result;
}

unint64_t sub_1001FA8C4()
{
  unint64_t result;

  result = qword_1005D4550;
  if (!qword_1005D4550)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddLinkAttachmentIntent, &type metadata for AddLinkAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4550);
  }
  return result;
}

uint64_t sub_1001FA908(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of AddLinkAttachmentIntent.perform()>>, 1)+ 8);
}

uint64_t sub_1001FA92C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static AddLinkAttachmentIntent.parameterSummary>>, 1);
}

uint64_t destroy for AddLinkAttachmentIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[6]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for AddLinkAttachmentIntent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v6 = a2[6];
  v7 = a2[7];
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for AddLinkAttachmentIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 3) = v10;
  v11 = a2[6];
  v12 = a1[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = a2[7];
  v14 = a1[7];
  a1[7] = v13;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

uint64_t assignWithTake for AddLinkAttachmentIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_release(*(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AddLinkAttachmentIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AddLinkAttachmentIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AddLinkAttachmentIntent()
{
  return &type metadata for AddLinkAttachmentIntent;
}

uint64_t sub_1001FABC8()
{
  return sub_100016638(&qword_1005D4560, &qword_1005D4568, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_1001FABF4()
{
  return sub_100016638(&qword_1005D4570, &qword_1005D4578, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1001FAC20()
{
  return sub_100016638(&qword_1005D4580, &qword_1005D4578, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1001FAC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D4588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001FAC94(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1001FACF0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000012, 0x80000001004765B0);
  swift_bridgeObjectRelease(0x80000001004765B0);
  return Hasher._finalize()();
}

void sub_1001FAD90(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1001FADEC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000014, 0x8000000100476740);
  swift_bridgeObjectRelease(0x8000000100476740);
  return Hasher._finalize()();
}

void sub_1001FAE78(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1001FAEC8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x5F4F545F5446454CLL, 0xED00005448474952);
  swift_bridgeObjectRelease(0xED00005448474952);
  return Hasher._finalize()();
}

void sub_1001FAF60(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1001FAFB8()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0x8000000100476930);
  swift_bridgeObjectRelease(0x8000000100476930);
  return Hasher._finalize()();
}

void sub_1001FB02C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001FB078(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000012, 0x80000001004765B0);
  return swift_bridgeObjectRelease(0x80000001004765B0);
}

void sub_1001FB104(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001FB148(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2, 0x8000000100476930);
  return swift_bridgeObjectRelease(0x8000000100476930);
}

void sub_1001FB1A0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001FB1E0(uint64_t a1)
{
  String.hash(into:)(a1, 0x5F4F545F5446454CLL, 0xED00005448474952);
  return swift_bridgeObjectRelease(0xED00005448474952);
}

void sub_1001FB264(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1001FB2AC(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000014, 0x8000000100476740);
  return swift_bridgeObjectRelease(0x8000000100476740);
}

void sub_1001FB320(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1001FB378()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000014, 0x8000000100476740);
  swift_bridgeObjectRelease(0x8000000100476740);
  return Hasher._finalize()();
}

void sub_1001FB404(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1001FB450()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x5F4F545F5446454CLL, 0xED00005448474952);
  swift_bridgeObjectRelease(0xED00005448474952);
  return Hasher._finalize()();
}

void sub_1001FB4E8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1001FB53C()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0x8000000100476930);
  swift_bridgeObjectRelease(0x8000000100476930);
  return Hasher._finalize()();
}

void sub_1001FB5B0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1001FB5F4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x52475F4C4C414D53, 0xEA00000000004449);
  swift_bridgeObjectRelease(0xEA00000000004449);
  return Hasher._finalize()();
}

void sub_1001FB6B8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1001FB710()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000012, 0x80000001004765B0);
  swift_bridgeObjectRelease(0x80000001004765B0);
  return Hasher._finalize()();
}

uint64_t sub_1001FB7B0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static NotesSetting.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static NotesSetting.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x6553207365746F4ELL, 0xED0000676E697474);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Name of Notes Setting type for App Intents", 42, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t NotesSetting.typeDisplayRepresentation.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEAB0 != -1)
    swift_once(&qword_1005CEAB0, sub_1001FB7B0);
  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  return sub_10012A0B0(v0, (uint64_t)static NotesSetting.typeDisplayRepresentation);
}

uint64_t static NotesSetting.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEAB0 != -1)
    swift_once(&qword_1005CEAB0, sub_1001FB7B0);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static NotesSetting.typeDisplayRepresentation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t NotesSetting.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001FBAC4 + 4 * byte_10045B1DB[a1]))(0xD000000000000010, 0x8000000100476720);
}

unint64_t sub_1001FBAC4()
{
  return 0xD000000000000014;
}

uint64_t sub_1001FBB0C()
{
  uint64_t v0;

  return v0 - 1;
}

void sub_1001FBB24(char *a1)
{
  sub_100216B4C(*a1);
}

unint64_t sub_1001FBB30@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s11MobileNotes0B7SettingO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001FBB5C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = NotesSetting.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1001FBB84()
{
  char *v0;

  sub_1001FAD90(*v0);
}

void sub_1001FBB8C(uint64_t a1)
{
  char *v1;

  sub_1001FB264(a1, *v1);
}

void sub_1001FBB94(uint64_t a1)
{
  char *v1;

  sub_1001FB320(a1, *v1);
}

uint64_t sub_1001FBB9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001288C8();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t NotesSetting.debugDescription.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001FBC0C + 4 * byte_10045B1E0[a1]))(0xD000000000000013, 0x8000000100482AF0);
}

uint64_t sub_1001FBC0C(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_1001FBC68()
{
  unsigned __int8 *v0;

  return NotesSetting.debugDescription.getter(*v0);
}

unint64_t sub_1001FBC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  char *v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *);
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  unint64_t result;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t, uint64_t);
  void (*v84)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *);
  uint64_t v93;
  char *v94;

  v0 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v0);
  v94 = (char *)&v77 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v90 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100012E18((uint64_t *)&unk_1005D45F0);
  v17 = sub_100012E18(&qword_1005D0260);
  v18 = *(_QWORD *)(v17 - 8);
  v87 = *(_QWORD *)(v18 + 72);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v19 + 32) & ~v19;
  v78 = 4 * v87;
  v21 = swift_allocObject(v16, v20 + 5 * v87, v19 | 7);
  v79 = v21;
  *(_OWORD *)(v21 + 16) = xmmword_100457CA0;
  v85 = v21 + v20;
  v22 = *(int *)(v17 + 48);
  v82 = v17;
  v77 = (_BYTE *)(v21 + v20 + v22);
  *(_BYTE *)(v21 + v20) = 0;
  v23 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x8000000100482B10);
  v24 = v9;
  v88 = v9;
  static Locale.current.getter(v23);
  v86 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v92 = *(void (**)(char *))(v4 + 104);
  v25 = v6;
  v26 = v6;
  v27 = v93;
  v92(v26);
  v28 = v15;
  v29 = v12;
  v30 = v24;
  v31 = v25;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v30, v25, "Link entity display representation", 34, 2);
  v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v32 = v90;
  v33 = v91;
  v84(v90, 1, 1, v91);
  v89 = type metadata accessor for DisplayRepresentation.Image(0);
  v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56);
  v34 = v94;
  v83(v94, 1, 1, v89);
  v35 = v28;
  DisplayRepresentation.init(title:subtitle:image:)(v28, v32, v34);
  v36 = v85;
  v37 = v87;
  v77 = (_BYTE *)(v85 + v87 + *(int *)(v17 + 48));
  *(_BYTE *)(v85 + v87) = 1;
  v80 = v29;
  v38 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x8000000100482B60);
  v39 = v88;
  static Locale.current.getter(v38);
  v40 = v31;
  v81 = v31;
  v41 = v31;
  v42 = v86;
  ((void (*)(char *, _QWORD, uint64_t))v92)(v41, v86, v27);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v29, 0, 0, v39, v40, "Link entity display representation", 34, 2);
  v43 = v90;
  v44 = v84;
  v84(v90, 1, 1, v33);
  v45 = v94;
  v46 = v83;
  v83(v94, 1, 1, v89);
  v47 = v35;
  DisplayRepresentation.init(title:subtitle:image:)(v35, v43, v45);
  v48 = 2 * v37;
  v49 = (_BYTE *)(v36 + 2 * v37);
  v50 = v36;
  v51 = v82;
  v77 = &v49[*(int *)(v82 + 48)];
  *v49 = 2;
  v52 = v80;
  v53 = String.LocalizationValue.init(stringLiteral:)(0x6341206C61636F4CLL, 0xED0000746E756F63);
  v54 = v88;
  static Locale.current.getter(v53);
  v55 = v81;
  v56 = v42;
  v57 = v92;
  ((void (*)(char *, uint64_t, uint64_t))v92)(v81, v56, v93);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v52, 0, 0, v54, v55, "Link entity display representation", 34, 2);
  v58 = v90;
  v44(v90, 1, 1, v91);
  v59 = v94;
  v60 = v89;
  v46(v94, 1, 1, v89);
  v61 = v47;
  v62 = v47;
  v63 = v58;
  DisplayRepresentation.init(title:subtitle:image:)(v62, v58, v59);
  v64 = (_BYTE *)(v50 + v48 + v87);
  v87 = (uint64_t)&v64[*(int *)(v51 + 48)];
  *v64 = 3;
  v65 = v80;
  v66 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x8000000100482B80);
  v67 = v88;
  static Locale.current.getter(v66);
  v68 = v81;
  v69 = v86;
  ((void (*)(char *, _QWORD, uint64_t))v57)(v81, v86, v93);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v65, 0, 0, v67, v68, "Link entity display representation", 34, 2);
  v70 = v91;
  v71 = v84;
  v84(v58, 1, 1, v91);
  v72 = v94;
  v73 = v60;
  v74 = v83;
  v83(v94, 1, 1, v73);
  DisplayRepresentation.init(title:subtitle:image:)(v61, v63, v72);
  v87 = v85 + v78 + *(int *)(v82 + 48);
  *(_BYTE *)(v85 + v78) = 4;
  v75 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x8000000100482BA0);
  static Locale.current.getter(v75);
  ((void (*)(char *, uint64_t, uint64_t))v92)(v68, v69, v93);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v65, 0, 0, v67, v68, "Link entity display representation", 34, 2);
  v71(v63, 1, 1, v70);
  v74(v72, 1, 1, v89);
  DisplayRepresentation.init(title:subtitle:image:)(v61, v63, v72);
  result = sub_100136254(v79);
  static NotesSetting.caseDisplayRepresentations = result;
  return result;
}

uint64_t *NotesSetting.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_1005CEAB8 != -1)
    swift_once(&qword_1005CEAB8, sub_1001FBC70);
  return &static NotesSetting.caseDisplayRepresentations;
}

double static NotesSetting.caseDisplayRepresentations.getter()
{
  double result;

  if (qword_1005CEAB8 != -1)
    swift_once(&qword_1005CEAB8, sub_1001FBC70);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static NotesSetting.caseDisplayRepresentations).n128_u64[0];
  return result;
}

_UNKNOWN **static NotesSetting.allCases.getter()
{
  return &off_100556280;
}

uint64_t sub_1001FC3A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FC5F0();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_1001FC3E0(_QWORD *a1@<X8>)
{
  *a1 = &off_100555898;
}

unint64_t _s11MobileNotes0B7SettingO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005561E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_1001FC43C()
{
  unint64_t result;

  result = qword_1005D4590;
  if (!qword_1005D4590)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D4590);
  }
  return result;
}

unint64_t sub_1001FC484()
{
  unint64_t result;

  result = qword_1005D4598;
  if (!qword_1005D4598)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D4598);
  }
  return result;
}

unint64_t sub_1001FC4CC()
{
  unint64_t result;

  result = qword_1005D45A0;
  if (!qword_1005D45A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D45A0);
  }
  return result;
}

unint64_t sub_1001FC514()
{
  unint64_t result;

  result = qword_1005D45A8;
  if (!qword_1005D45A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D45A8);
  }
  return result;
}

unint64_t sub_1001FC55C()
{
  unint64_t result;

  result = qword_1005D45B0;
  if (!qword_1005D45B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D45B0);
  }
  return result;
}

unint64_t sub_1001FC5A4()
{
  unint64_t result;

  result = qword_1005D45B8;
  if (!qword_1005D45B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D45B8);
  }
  return result;
}

unint64_t sub_1001FC5F0()
{
  unint64_t result;

  result = qword_1005D45C0;
  if (!qword_1005D45C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D45C0);
  }
  return result;
}

uint64_t sub_1001FC634(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1001288C8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_1001FC678()
{
  unint64_t result;

  result = qword_1005D45C8;
  if (!qword_1005D45C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D45C8);
  }
  return result;
}

unint64_t sub_1001FC6C0()
{
  unint64_t result;

  result = qword_1005D45D0;
  if (!qword_1005D45D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D45D0);
  }
  return result;
}

unint64_t sub_1001FC708()
{
  unint64_t result;

  result = qword_1005D45D8;
  if (!qword_1005D45D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005D45D8);
  }
  return result;
}

unint64_t sub_1001FC750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D45E0;
  if (!qword_1005D45E0)
  {
    v1 = sub_10001537C(&qword_1005D45E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D45E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NotesSetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001FC7E8 + 4 * byte_10045B1EA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001FC81C + 4 * byte_10045B1E5[v4]))();
}

uint64_t sub_1001FC81C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FC824(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FC82CLL);
  return result;
}

uint64_t sub_1001FC838(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FC840);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001FC844(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FC84C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotesSetting()
{
  return &type metadata for NotesSetting;
}

uint64_t LaunchTaskRunner.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR___ICLaunchTaskRunner_delegate;
  swift_beginAccess(v0 + OBJC_IVAR___ICLaunchTaskRunner_delegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t LaunchTaskRunner.delegate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR___ICLaunchTaskRunner_delegate;
  swift_beginAccess(v3, v6, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1, v4);
}

void (*LaunchTaskRunner.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___ICLaunchTaskRunner_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_1001FC978;
}

void sub_1001FC978(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_unknownObjectWeakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v5);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v6);
  }
  free(v3);
}

id LaunchTaskRunner.__allocating_init(launchTasks:logger:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  v5 = (char *)objc_allocWithZone(v2);
  swift_unknownObjectWeakInit(&v5[OBJC_IVAR___ICLaunchTaskRunner_delegate], 0);
  *(_QWORD *)&v5[OBJC_IVAR___ICLaunchTaskRunner_launchTasks] = a1;
  v6 = &v5[OBJC_IVAR___ICLaunchTaskRunner_logger];
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  v11.receiver = v5;
  v11.super_class = v2;
  v9 = objc_msgSendSuper2(&v11, "init");
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
  return v9;
}

id LaunchTaskRunner.init(launchTasks:logger:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  swift_unknownObjectWeakInit(&v2[OBJC_IVAR___ICLaunchTaskRunner_delegate], 0);
  *(_QWORD *)&v2[OBJC_IVAR___ICLaunchTaskRunner_launchTasks] = a1;
  v6 = &v2[OBJC_IVAR___ICLaunchTaskRunner_logger];
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  v11.receiver = v2;
  v11.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v11, "init");
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
  return v9;
}

uint64_t LaunchTaskRunner.run()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_1001FCB7C, 0, 0);
}

uint64_t sub_1001FCB7C()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *Strong;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (uint64_t *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 56) + OBJC_IVAR___ICLaunchTaskRunner_delegate;
  swift_beginAccess(v4, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    v7 = objc_msgSend(Strong, "launchTaskRunnerShouldRunLaunchTasks:", *v3);
    if ((v7 & 1) == 0)
    {
      v23 = Logger.logObject.getter(v7);
      v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v26))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v26, "LaunchTaskRunner: Skipped running launch tasks in response to delegate.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }
      swift_unknownObjectRelease(v6, v27);
LABEL_23:

      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_unknownObjectRelease(v6, v8);
  }
  v9 = (uint64_t *)(v0 + 48);
  v10 = *(void **)(v0 + 56);
  *(_QWORD *)(v0 + 64) = OBJC_IVAR___ICLaunchTaskRunner_logger;
  v11 = Logger.logObject.getter(v10);
  LOBYTE(v12) = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled((os_log_t)v11, (os_log_type_t)v12);
  v14 = *(char **)(v0 + 56);
  if (!v13)
  {

    goto LABEL_9;
  }
  v1 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v1 = 134217984;
  v2 = *(_QWORD *)&v14[OBJC_IVAR___ICLaunchTaskRunner_launchTasks];
  if ((unint64_t)v2 >> 62)
    goto LABEL_31;
  v15 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v2 = *v3;
    *v9 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v1 + 4);

    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, (os_log_type_t)v12, "Starting delayed launch tasks (%ld total).", v1, 0xCu);
    swift_slowDealloc(v1, -1, -1);
LABEL_9:
    v12 = *(_QWORD *)(v0 + 56);

    v16 = *(_QWORD *)(v12 + OBJC_IVAR___ICLaunchTaskRunner_launchTasks);
    *(_QWORD *)(v0 + 72) = v16;
    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v33 = v16;
      else
        v33 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v11 = _CocoaArrayWrapper.endIndex.getter(v33);
      *(_QWORD *)(v0 + 80) = v11;
      if (!v11)
      {
LABEL_18:
        v22 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v25 = 134217984;
          *(_QWORD *)(v0 + 40) = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v9, v25 + 4);
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Finished running %ld delayed launch tasks.", v25, 0xCu);
          swift_slowDealloc(v25, -1, -1);
        }
        goto LABEL_23;
      }
    }
    else
    {
      v11 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v16);
      *(_QWORD *)(v0 + 80) = v11;
      if (!v11)
        goto LABEL_18;
    }
    if (v11 >= 1)
      break;
    __break(1u);
LABEL_31:
    if (v2 < 0)
      v34 = v2;
    else
      v34 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v15 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(v2);
  }
  v17 = 0;
  while (1)
  {
    *(_QWORD *)(v0 + 88) = 0;
    *(_QWORD *)(v0 + 96) = v17;
    v18 = *(_QWORD *)(v0 + 72);
    if ((v18 & 0xC000000000000001) != 0)
    {
      v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v18);
    }
    else
    {
      v19 = *(_QWORD *)(v18 + 8 * v17 + 32);
      v20 = swift_unknownObjectRetain(v19);
    }
    *(_QWORD *)(v0 + 104) = v19;
    if ((static Task<>.isCancelled.getter(v20) & 1) == 0)
      break;
    swift_unknownObjectRelease(v19, v21);
    v17 = *(_QWORD *)(v0 + 96) + 1;
    if (v17 == *(_QWORD *)(v0 + 80))
      goto LABEL_18;
  }
  v30 = *(_QWORD *)(v0 + 56) + *(_QWORD *)(v0 + 64);
  v31 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 112) = v31;
  *(_QWORD *)(v31 + 16) = v19;
  *(_QWORD *)(v31 + 24) = v30;
  v32 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 120) = v32;
  *v32 = v0;
  v32[1] = sub_1001FCF7C;
  return withCheckedContinuation<A>(isolation:function:_:)(v32, 0, 0, 0x29286E7572, 0xE500000000000000, sub_1001FD940, v31, (char *)&type metadata for () + 8);
}

uint64_t sub_1001FCF7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001FCFD8, 0, 0);
}

uint64_t sub_1001FCFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *(_QWORD *)(v2 + 88);
  result = swift_unknownObjectRelease(*(_QWORD *)(v2 + 104), a2);
  v5 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    while (1)
    {
      v6 = *(_QWORD *)(v2 + 96) + 1;
      if (v6 == *(_QWORD *)(v2 + 80))
        break;
      *(_QWORD *)(v2 + 88) = v5;
      *(_QWORD *)(v2 + 96) = v6;
      v7 = *(_QWORD *)(v2 + 72);
      if ((v7 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7);
      }
      else
      {
        v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
        v9 = swift_unknownObjectRetain(v8);
      }
      *(_QWORD *)(v2 + 104) = v8;
      if ((static Task<>.isCancelled.getter(v9) & 1) == 0)
      {
        v15 = *(_QWORD *)(v2 + 56) + *(_QWORD *)(v2 + 64);
        v16 = swift_task_alloc(32);
        *(_QWORD *)(v2 + 112) = v16;
        *(_QWORD *)(v16 + 16) = v8;
        *(_QWORD *)(v16 + 24) = v15;
        v17 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
        *(_QWORD *)(v2 + 120) = v17;
        *v17 = v2;
        v17[1] = sub_1001FCF7C;
        return withCheckedContinuation<A>(isolation:function:_:)(v17, 0, 0, 0x29286E7572, 0xE500000000000000, sub_1001FD940, v16, (char *)&type metadata for () + 8);
      }
      swift_unknownObjectRelease(v8, v10);
    }
    v11 = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 72));
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v14 = 134217984;
      *(_QWORD *)(v2 + 40) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 40, v2 + 48, v14 + 4);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Finished running %ld delayed launch tasks.", v14, 0xCu);
      swift_slowDealloc(v14, -1, -1);
    }

    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  return result;
}

void sub_1001FD1AC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v23 = a2;
  v5 = sub_100012E18(&qword_1005D46A0);
  v6 = *(_QWORD *)(v5 - 8);
  v22 = v5;
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = (v15 + v14 + 8) & ~v15;
  v17 = swift_allocObject(&unk_10055E718, v16 + v7, v12 | v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17 + v13, v11, v8);
  v18 = v22;
  v19 = v23;
  *(_QWORD *)(v17 + v14) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  aBlock[4] = sub_1001FDE60;
  v25 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001FD5D4;
  aBlock[3] = &unk_10055E730;
  v20 = _Block_copy(aBlock);
  v21 = v25;
  swift_unknownObjectRetain(v19);
  swift_release(v21);
  sub_1000B0C38(v19, v20);
  _Block_release(v20);
}

uint64_t sub_1001FD374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    swift_unknownObjectRetain(a3);
    swift_errorRetain(a1);
    swift_unknownObjectRetain(a3);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.error.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      v11 = swift_slowAlloc(32, -1);
      v20 = a3;
      v21 = v11;
      *(_DWORD *)v9 = 136446466;
      swift_unknownObjectRetain(a3);
      v12 = sub_100012E18(&qword_1005D4688);
      v13 = String.init<A>(describing:)(&v20, v12);
      v15 = v14;
      v20 = sub_1003A4190(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v9 + 4);
      swift_unknownObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v9 + 12) = 2112;
      v16 = _convertErrorToNSError(_:)(a1);
      v20 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v9 + 14);
      *v10 = v16;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "LaunchTaskRunner: task %{public}s failed with error: %@", (uint8_t *)v9, 0x16u);
      v17 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v10, 1, v17);
      swift_slowDealloc(v10, -1, -1);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v9, -1, -1);
      swift_errorRelease(a1);

    }
    else
    {
      swift_errorRelease(a1);
      swift_unknownObjectRelease_n(a3, 2);

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }
  v18 = sub_100012E18(&qword_1005D46A0);
  return CheckedContinuation.resume(returning:)(v18, v18);
}

void sub_1001FD5D4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void LaunchTaskRunner.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.LaunchTaskRunner", 28, "init()", 6, 0);
  __break(1u);
}

Swift::Void __swiftcall LaunchTaskRunner.CancellationToken.cancel()()
{
  Task.cancel()();
}

void LaunchTaskRunner.CancellationToken.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.CancellationToken", 29, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001FD7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v8;

  v6[2] = a5;
  v6[3] = a6;
  v8 = (_QWORD *)swift_task_alloc(dword_1005D4614);
  v6[4] = v8;
  *v8 = v6;
  v8[1] = sub_1001FD838;
  v8[7] = a4;
  return swift_task_switch(sub_1001FCB7C, 0, 0);
}

uint64_t sub_1001FD838()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  return swift_task_switch(sub_1001FD88C, 0, 0);
}

uint64_t sub_1001FD88C()
{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;

  v1 = *(void (**)(_QWORD))(v0 + 16);
  v2 = static Task<>.isCancelled.getter();
  v1(v2 & 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001FD940(uint64_t a1)
{
  uint64_t v1;

  sub_1001FD1AC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id _s11MobileNotes16LaunchTaskRunnerC010runDelayedC5Tasks8delegate17completionHandlerAC17CancellationTokenCAA0cdE8Delegate_pSg_ySbYbctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  objc_class *v25;
  char *v26;
  id v27;
  uint64_t v29;
  objc_super v30;
  char v31[24];
  objc_super v32;

  v29 = a2;
  v5 = sub_100012E18(&qword_1005D4680);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100067668();
  v13 = sub_100012E18(&qword_1005D4688);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  static Logger.launchTask.getter();
  v15 = (objc_class *)type metadata accessor for LaunchTaskRunner(0);
  v16 = (char *)objc_allocWithZone(v15);
  swift_unknownObjectWeakInit(&v16[OBJC_IVAR___ICLaunchTaskRunner_delegate], 0);
  *(_QWORD *)&v16[OBJC_IVAR___ICLaunchTaskRunner_launchTasks] = v14;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v16[OBJC_IVAR___ICLaunchTaskRunner_logger], v11, v8);
  v32.receiver = v16;
  v32.super_class = v15;
  v17 = (char *)objc_msgSendSuper2(&v32, "init");
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v18 = &v17[OBJC_IVAR___ICLaunchTaskRunner_delegate];
  swift_beginAccess(&v17[OBJC_IVAR___ICLaunchTaskRunner_delegate], v31, 1, 0);
  v19 = swift_unknownObjectWeakAssign(v18, a1);
  static TaskPriority.low.getter(v19);
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 0, 1, v20);
  v21 = (_QWORD *)swift_allocObject(&unk_10055E6F0, 56, 7);
  v21[2] = 0;
  v21[3] = 0;
  v22 = v29;
  v21[4] = v17;
  v21[5] = v22;
  v21[6] = a3;
  v23 = v17;
  swift_retain(a3);
  v24 = sub_1002EDE48((uint64_t)v7, (uint64_t)&unk_1005D4698, (uint64_t)v21);
  v25 = (objc_class *)type metadata accessor for LaunchTaskRunner.CancellationToken();
  v26 = (char *)objc_allocWithZone(v25);
  *(_QWORD *)&v26[OBJC_IVAR___ICLaunchTaskCancellationToken_task] = v24;
  v30.receiver = v26;
  v30.super_class = v25;
  v27 = objc_msgSendSuper2(&v30, "init");

  return v27;
}

uint64_t sub_1001FDB8C()
{
  return type metadata accessor for LaunchTaskRunner(0);
}

uint64_t type metadata accessor for LaunchTaskRunner(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D4648;
  if (!qword_1005D4648)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LaunchTaskRunner);
  return result;
}

uint64_t sub_1001FDBD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for LaunchTaskRunner.CancellationToken()
{
  return objc_opt_self(ICLaunchTaskCancellationToken);
}

uint64_t sub_1001FDC74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001FDC98(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_1001FDCAC(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t sub_1001FDCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16), a2);

  swift_release(*(_QWORD *)(v2 + 48));
  return swift_deallocObject(v2, 56, 7);
}

uint64_t sub_1001FDD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t *v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_1005D4694);
  v4 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100130768;
  *(_OWORD *)(v3 + 16) = v4;
  v5 = (uint64_t *)swift_task_alloc(dword_1005D4614);
  *(_QWORD *)(v3 + 32) = v5;
  *v5 = v3;
  v5[1] = (uint64_t)sub_1001FD838;
  v5[7] = v2;
  return swift_task_switch(sub_1001FCB7C, 0, 0);
}

uint64_t sub_1001FDD94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = sub_100012E18(&qword_1005D46A0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v5), v12);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1001FDE60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100012E18(&qword_1005D46A0);
  return sub_1001FD374(a1, v1 + v4, *(_QWORD *)(v1 + v5));
}

uint64_t sub_1001FDEE0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  id v9;
  uint64_t v10;
  int v11;
  id v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  void (*v17)(_QWORD *, _QWORD);
  uint64_t v18;
  _QWORD *v19;
  _QWORD v22[3];
  uint64_t v23;
  void *v24;
  objc_super v25;

  v1 = sub_100012E18(&qword_1005D46E8);
  __chkstk_darwin(v1);
  v3 = (char *)&v22[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UIListContentConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (objc_class *)type metadata accessor for FolderComposerFilterCellEntry();
  v25.receiver = v0;
  v25.super_class = v8;
  v9 = objc_msgSendSuper2(&v25, "layoutSubviews");
  UICollectionViewCell.contentConfiguration.getter(v22, v9);
  if (!v23)
  {
    sub_100012DDC((uint64_t)v22, &qword_1005D46F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    return sub_100012DDC((uint64_t)v3, &qword_1005D46E8);
  }
  v10 = sub_100012E18(&qword_1005D46F8);
  v11 = swift_dynamicCast(v3, v22, v10, v4, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, v11 ^ 1u, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    return sub_100012DDC((uint64_t)v3, &qword_1005D46E8);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v12 = objc_msgSend(v0, "directionalLayoutMargins");
  v14 = v13;
  v15 = ICAccessibilityAccessibilityLargerTextSizesEnabled(v12);
  if (!(_DWORD)v15)
    v14 = v14 + 44.0;
  UIListContentConfiguration.directionalLayoutMargins.getter(v15);
  if (v16 != v14)
  {
    v17 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.directionalLayoutMargins.modify(v22);
    *(double *)(v18 + 8) = v14;
    v17(v22, 0);
    v23 = v4;
    v24 = &protocol witness table for UIListContentConfiguration;
    v19 = sub_10012D160(v22);
    (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v19, v7, v4);
    UICollectionViewCell.contentConfiguration.setter(v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1001FE12C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  void *v50;

  v2 = v1;
  v4 = sub_100012E18(&qword_1005CFE60);
  __chkstk_darwin(v4);
  v45 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v43 = *(_QWORD *)(v9 - 8);
  v44 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UIListContentConfiguration(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v41 - v18;
  static UIListContentConfiguration.valueCell()(v17);
  v21 = type metadata accessor for UICellConfigurationState(0, v20);
  v49 = v21;
  v50 = &protocol witness table for UICellConfigurationState;
  v22 = sub_10012D160(v48);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v22, a1, v21);
  UIListContentConfiguration.updated(for:)(v48);
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  v24 = sub_1000153C0(v48);
  v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8);
  if (v25)
  {
    v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText);
    v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8);
  }
  else
  {
    v28 = ICAccessibilityAccessibilityLargerTextSizesEnabled(v24);
    if (v28)
      v26 = 0;
    else
      v26 = 32;
    if (v28)
      v27 = 0;
    else
      v27 = 0xE100000000000000;
  }
  swift_bridgeObjectRetain(v25);
  UIListContentConfiguration.text.setter(v26, v27);
  v29 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText);
  v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText + 8);
  swift_bridgeObjectRetain(v30);
  UIListContentConfiguration.secondaryText.setter(v29, v30);
  v49 = v12;
  v50 = &protocol witness table for UIListContentConfiguration;
  v31 = sub_10012D160(v48);
  (*(void (**)(_QWORD *, char *, uint64_t))(v13 + 16))(v31, v19, v12);
  UICollectionViewCell.contentConfiguration.setter(v48);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_showDisclosure) == 1)
  {
    v32 = sub_100012E18(&qword_1005CFE70);
    v33 = *(_QWORD *)(type metadata accessor for UICellAccessory(0) - 8);
    v34 = (_QWORD *)swift_allocObject(v32, ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72), *(unsigned __int8 *)(v33 + 80) | 7);
    *((_OWORD *)v34 + 1) = xmmword_100451C20;
    v42 = v23;
    v35 = v43;
    v36 = v44;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v11, enum case for UICellAccessory.DisplayedState.always(_:), v44);
    v37 = type metadata accessor for UICellAccessory.LayoutDimension(0);
    v38 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v45, 1, 1, v37);
    UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v38, 0);
    static UICellAccessory.disclosureIndicator(displayed:options:)(v11, v8);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v47);
    v39 = *(void (**)(char *, uint64_t))(v35 + 8);
    v23 = v42;
    v39(v11, v36);
  }
  else
  {
    v34 = _swiftEmptyArrayStorage;
  }
  UICollectionViewListCell.accessories.setter(v34);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v12);
}

id sub_1001FE640()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellEntry();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellEntry()
{
  return objc_opt_self(_TtC11MobileNotes29FolderComposerFilterCellEntry);
}

uint64_t sub_1001FE6D0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D4700);
  sub_10012A0B0(v0, (uint64_t)qword_1005D4700);
  return static Logger.archiving.getter();
}

uint64_t sub_1001FE718(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v24[15];
  char v25;
  _BYTE v26[8];
  _BYTE v27[15];
  char v28;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D4790);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_100200320();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICAccountArchiveModel.CodingKeys, &type metadata for ICAccountArchiveModel.CodingKeys, v11, v9, v10);
  v24[0] = *(_BYTE *)v3;
  v25 = 0;
  v12 = sub_1001F62D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v25, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    v24[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v24, v5);
    v15 = *(_QWORD *)(v3 + 24);
    v16 = *(_QWORD *)(v3 + 32);
    v24[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v24, v5);
    sub_10014BD1C(v3 + 40, (uint64_t)&v28, &qword_1005D4720);
    sub_10014BD1C((uint64_t)&v28, (uint64_t)v24, &qword_1005D4720);
    v25 = 3;
    v17 = sub_100200364();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v5, &type metadata for ICAccountArchiveModel.Types, v17);
    sub_10014BD1C(v3 + 48, (uint64_t)v27, &qword_1005D47A8);
    sub_10014BD1C((uint64_t)v27, (uint64_t)v24, &qword_1005D47A8);
    v25 = 4;
    v18 = sub_100012E18(&qword_1005D47B0);
    v19 = sub_1002003A8(&qword_1005D47B8, &qword_1005D47C0, (uint64_t)&unk_100459880, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v5, v18, v19);
    sub_10014BD1C(v3 + 56, (uint64_t)v26, &qword_1005D4718);
    sub_10014BD1C((uint64_t)v26, (uint64_t)v24, &qword_1005D4718);
    v25 = 5;
    v20 = sub_100012E18(&qword_1005D39A8);
    v21 = sub_1001F673C(&qword_1005D4348, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v5, v20, v21);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001FE9DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001FEA18 + 4 * byte_10045B560[*v0]))(0x6E65644965707974, 0xEE00726569666974);
}

uint64_t sub_1001FEA18()
{
  return 0x696669746E656469;
}

uint64_t sub_1001FEA34()
{
  return 0x656C746974;
}

uint64_t sub_1001FEA48()
{
  return 1701869940;
}

uint64_t sub_1001FEA58()
{
  return 1936154996;
}

unint64_t sub_1001FEA68()
{
  return 0xD000000000000011;
}

uint64_t sub_1001FEA84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001FF3D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001FEAA8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1001FEAB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100200320();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FEADC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100200320();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001FEB04@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1001FF654(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1001FEB44(_QWORD *a1)
{
  return sub_1001FE718(a1);
}

id sub_1001FEB7C(id a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, double a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  id v15;
  void *v16;
  char v17;
  void *v18;
  char **v19;
  id v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSString v26;
  uint64_t v27;
  unint64_t v28;
  char v30;
  char v31;

  v8 = v6;
  if ((a3 & 1) == 0 || (v15 = objc_msgSend(a1, "managedObjectContext")) == 0)
  {
LABEL_8:
    ObjectType = swift_getObjectType(a1);
    v20 = a1;
    v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, double))(a2 + 16))(v8[1], v8[2], a3 & 0x101, a4, a5, ObjectType, a2, a6);
    if (!v7)
    {
      v20 = (id)v22;
      v23 = objc_opt_self(ICFolder);
      v24 = swift_dynamicCastObjCClass(v20, v23);
      if (v24)
      {
        v25 = (void *)v24;
        v20 = v20;
        v26 = v20;
        if (objc_msgSend(v25, "isRenamable"))
        {
          v27 = v8[4];
          if (v27)
            v28 = v8[4];
          else
            v28 = 0xE000000000000000;
          swift_bridgeObjectRetain(v27);
          v26 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v28);
          objc_msgSend(v25, "setTitle:", v26);

        }
      }
    }
    return v20;
  }
  v16 = v15;
  sub_10014BD1C((uint64_t)(v6 + 5), (uint64_t)&v30, &qword_1005D4720);
  sub_10014BD1C((uint64_t)&v30, (uint64_t)&v31, &qword_1005D4720);
  v17 = v31;
  if (v31 == 2)
  {

    goto LABEL_8;
  }
  v18 = (void *)objc_opt_self(ICAccount);
  v19 = &selRef_cloudKitAccountInContext_;
  if ((v17 & 1) != 0)
    v19 = &selRef_localAccountInContext_;
  v20 = objc_msgSend(v18, *v19, v16);

  if (!v20)
    goto LABEL_8;
  return v20;
}

void sub_1001FED6C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  _BYTE v17[8];
  uint64_t v18;

  sub_10014BD1C(v2 + 56, (uint64_t)v17, &qword_1005D4718);
  sub_10014BD1C((uint64_t)v17, (uint64_t)&v18, &qword_1005D4718);
  v5 = v18;
  if (!v18)
    return;
  swift_bridgeObjectRetain(a2);
  v6 = (uint64_t)sub_1001FF26C(v5, a2);
  swift_bridgeObjectRelease(a2);
  v7 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  v8 = v7;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v14 = v6;
    else
      v14 = v6 & 0xFFFFFFFFFFFFFF8;
    v15 = v7;
    swift_bridgeObjectRetain(v6);
    v9 = _CocoaArrayWrapper.endIndex.getter(v14);
    if (v9)
      goto LABEL_4;
LABEL_15:

    swift_bridgeObjectRelease_n(v6, 2);
    objc_msgSend(a1, "setSubFolderOrderMergeableDataDirty:", 1);
    objc_msgSend(a1, "saveSubFolderMergeableDataIfNeeded");
    v16 = objc_msgSend(a1, "subFolderIdentifiersOrderedSetDocument");
    return;
  }
  v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v10 = v7;
  swift_bridgeObjectRetain(v6);
  if (!v9)
    goto LABEL_15;
LABEL_4:
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v12 = *(id *)(v6 + 8 * i + 32);
      v13 = v12;
      objc_msgSend(v8, "addObject:", v12);

    }
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_1001FEF30(char *a1, char *a2)
{
  return sub_1002159C8(*a1, *a2);
}

Swift::Int sub_1001FEF3C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 0x4C41434F4CLL;
  else
    v2 = 0x44554F4C43;
  String.hash(into:)(v4, v2, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001FEFA8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 0x4C41434F4CLL;
  else
    v2 = 0x44554F4C43;
  String.hash(into:)(a1, v2, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

Swift::Int sub_1001FEFE8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 0x4C41434F4CLL;
  else
    v3 = 0x44554F4C43;
  String.hash(into:)(v5, v3, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001FF050@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005562A8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1001FF0AC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x44554F4C43;
  if (*v1)
    v2 = 0x4C41434F4CLL;
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

void sub_1001FF0DC(_QWORD *a1@<X8>)
{
  *a1 = &off_100555A80;
}

uint64_t sub_1001FF0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100200464();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001FF148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100200464();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001FF194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;

  v8 = sub_1002004A8();
  v9 = sub_100200464();
  return ArgumentDecodable<>.init(fromArgument:)(a1, a2, a3, a4, v8, v9, &protocol witness table for String);
}

uint64_t sub_1001FF208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;

  v8 = sub_1002004A8();
  v9 = sub_100200464();
  return static ArgumentDecodable<>.typeSummary(forName:)(a1, a2, a3, a4, v8, v9, &protocol witness table for String);
}

_QWORD *sub_1001FF26C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        swift_bridgeObjectRetain(*v6);
        v9 = sub_100248A98(v7, v8);
        if ((v10 & 1) != 0
          && (v11 = objc_msgSend(*(id *)(*(_QWORD *)(a2 + 56) + 8 * v9), "identifier")) != 0)
        {
          v12 = v11;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
          v14 = v13;

          v15 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v8);
          v16 = swift_bridgeObjectRelease(v14);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v18 >= v17 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
          specialized Array._endMutation()(v19);
        }
        else
        {
          swift_bridgeObjectRelease(v8);
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001FF3D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974)
  {
    v5 = 0xEE00726569666974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 1936154996 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1936154996, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100482D20)
  {
    swift_bridgeObjectRelease(0x8000000100482D20);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100482D20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1001FF654@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v5 = sub_100012E18(&qword_1005D47C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_100200320();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICAccountArchiveModel.CodingKeys, &type metadata for ICAccountArchiveModel.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_1000153C0(a1);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    return swift_bridgeObjectRelease(0);
  }
  else
  {
    v36 = 0;
    v12 = sub_1001F6580();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for ICArchiveModels, &v36, v5, &type metadata for ICArchiveModels, v12);
    v13 = v34;
    LOBYTE(v34) = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
    v16 = v15;
    v33 = v14;
    v35 = v13;
    LOBYTE(v34) = 2;
    swift_bridgeObjectRetain(v15);
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
    v19 = v18;
    v32 = v17;
    v36 = 3;
    v20 = sub_100200244();
    swift_bridgeObjectRetain(v19);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAccountArchiveModel.Types, &v36, v5, &type metadata for ICAccountArchiveModel.Types, v20);
    v31 = v34;
    v21 = sub_100012E18(&qword_1005D47B0);
    v36 = 4;
    v22 = sub_1002003A8(&qword_1005D47D0, &qword_1005D36D0, (uint64_t)&unk_10045970C, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v36, v5, v21, v22);
    v30 = a2;
    v23 = v34;
    v24 = sub_100012E18(&qword_1005D39A8);
    v36 = 5;
    v25 = sub_1001F673C(&qword_1005D43B0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v23);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v36, v5, v24, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v26 = v34;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(0);
    sub_1000153C0(a1);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v19);
    result = swift_bridgeObjectRelease(v16);
    v28 = v30;
    *v30 = v35;
    *((_QWORD *)v28 + 1) = v33;
    *((_QWORD *)v28 + 2) = v16;
    *((_QWORD *)v28 + 3) = v32;
    *((_QWORD *)v28 + 4) = v19;
    v28[40] = v31;
    *((_QWORD *)v28 + 6) = v23;
    *((_QWORD *)v28 + 7) = v26;
  }
  return result;
}

uint64_t sub_1001FFA24(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 == 1)
    return 0;
  if (a1 == 3)
    return 1;
  if (qword_1005CEAC0 != -1)
    swift_once(&qword_1005CEAC0, sub_1001FE6D0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005D4700);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v1 = 2;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown account type — returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    return 2;
  }
  return v1;
}

uint64_t sub_1001FFB24@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;

  sub_1001FFDEC(a2);
  v5 = objc_msgSend(a1, "identifier");
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0xE000000000000000;
  }
  v10 = objc_msgSend(a1, "localizedName", swift_bridgeObjectRetain(v9).n128_f64[0]);
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

  v33 = v12;
  v13 = objc_msgSend(a1, "accountType", swift_bridgeObjectRetain(v12).n128_f64[0]);
  v32 = sub_1001FFA24(v13);
  v36 = a1;
  v14 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  v15 = objc_msgSend(v14, "allObjects");

  v16 = sub_1001FFE20();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if (!((unint64_t)v17 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    v35 = v9;
    if (v18)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease(v17);

LABEL_20:
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v33);
    result = swift_bridgeObjectRelease_n(v35, 2);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v35;
    *(_QWORD *)(a3 + 24) = v34;
    *(_QWORD *)(a3 + 32) = v33;
    *(_BYTE *)(a3 + 40) = v32;
    *(_QWORD *)(a3 + 48) = &_swiftEmptySetSingleton;
    *(_QWORD *)(a3 + 56) = _swiftEmptyArrayStorage;
    return result;
  }
  if (v17 < 0)
    v29 = v17;
  else
    v29 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  v18 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v17);
  v35 = v9;
  if (!v18)
    goto LABEL_19;
LABEL_6:
  result = sub_100137028(0, v18 & ~(v18 >> 63), 0);
  if ((v18 & 0x8000000000000000) == 0)
  {
    v31 = a3;
    v20 = 0;
    do
    {
      if ((v17 & 0xC000000000000001) != 0)
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v17);
      else
        v21 = *(id *)(v17 + 8 * v20 + 32);
      v22 = v21;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v25 = v24;

      v27 = _swiftEmptyArrayStorage[2];
      v26 = _swiftEmptyArrayStorage[3];
      if (v27 >= v26 >> 1)
        sub_100137028(v26 > 1, v27 + 1, 1);
      ++v20;
      _swiftEmptyArrayStorage[2] = v27 + 1;
      v28 = &_swiftEmptyArrayStorage[2 * v27];
      v28[4] = v23;
      v28[5] = v25;
    }
    while (v18 != v20);
    swift_bridgeObjectRelease(v17);

    a3 = v31;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t *sub_1001FFDEC(uint64_t *a1)
{
  sub_1001F3EFC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

unint64_t sub_1001FFE20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005CFE78;
  if (!qword_1005CFE78)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005CFE78);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ICAccountArchiveModel.Types(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001FFEA8 + 4 * byte_10045B56B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001FFEDC + 4 * byte_10045B566[v4]))();
}

uint64_t sub_1001FFEDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FFEE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FFEECLL);
  return result;
}

uint64_t sub_1001FFEF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FFF00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001FFF04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FFF0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAccountArchiveModel.Types()
{
  return &type metadata for ICAccountArchiveModel.Types;
}

uint64_t destroy for ICAccountArchiveModel(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for ICAccountArchiveModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for ICAccountArchiveModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t assignWithTake for ICAccountArchiveModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v8 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICAccountArchiveModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICAccountArchiveModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICAccountArchiveModel()
{
  return &type metadata for ICAccountArchiveModel;
}

unint64_t sub_10020018C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1002001B8();
  result = sub_1002001FC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1002001B8()
{
  unint64_t result;

  result = qword_1005D4760;
  if (!qword_1005D4760)
  {
    result = swift_getWitnessTable(&unk_10045B71C, &type metadata for ICAccountArchiveModel);
    atomic_store(result, (unint64_t *)&qword_1005D4760);
  }
  return result;
}

unint64_t sub_1002001FC()
{
  unint64_t result;

  result = qword_1005D4768;
  if (!qword_1005D4768)
  {
    result = swift_getWitnessTable(&unk_10045B744, &type metadata for ICAccountArchiveModel);
    atomic_store(result, (unint64_t *)&qword_1005D4768);
  }
  return result;
}

unint64_t sub_100200244()
{
  unint64_t result;

  result = qword_1005D4770;
  if (!qword_1005D4770)
  {
    result = swift_getWitnessTable(&unk_10045B61C, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D4770);
  }
  return result;
}

unint64_t sub_10020028C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4778;
  if (!qword_1005D4778)
  {
    v1 = sub_10001537C(&qword_1005D4780);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D4778);
  }
  return result;
}

unint64_t sub_1002002DC()
{
  unint64_t result;

  result = qword_1005D4788;
  if (!qword_1005D4788)
  {
    result = swift_getWitnessTable(&unk_10045B6F4, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D4788);
  }
  return result;
}

unint64_t sub_100200320()
{
  unint64_t result;

  result = qword_1005D4798;
  if (!qword_1005D4798)
  {
    result = swift_getWitnessTable(&unk_10045B830, &type metadata for ICAccountArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D4798);
  }
  return result;
}

unint64_t sub_100200364()
{
  unint64_t result;

  result = qword_1005D47A0;
  if (!qword_1005D47A0)
  {
    result = swift_getWitnessTable(&unk_10045B5F4, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D47A0);
  }
  return result;
}

uint64_t sub_1002003A8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001537C(&qword_1005D47B0);
    sub_100200424(a2, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100200424(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = _s3TagVMa(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100200464()
{
  unint64_t result;

  result = qword_1005D47D8;
  if (!qword_1005D47D8)
  {
    result = swift_getWitnessTable(&unk_10045B67C, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D47D8);
  }
  return result;
}

unint64_t sub_1002004A8()
{
  unint64_t result;

  result = qword_1005D47E0;
  if (!qword_1005D47E0)
  {
    result = swift_getWitnessTable(&unk_10045B644, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D47E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ICAccountArchiveModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICAccountArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1002005C8 + 4 * byte_10045B575[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1002005FC + 4 * byte_10045B570[v4]))();
}

uint64_t sub_1002005FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100200604(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10020060CLL);
  return result;
}

uint64_t sub_100200618(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100200620);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100200624(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020062C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAccountArchiveModel.CodingKeys()
{
  return &type metadata for ICAccountArchiveModel.CodingKeys;
}

unint64_t sub_10020064C()
{
  unint64_t result;

  result = qword_1005D47E8;
  if (!qword_1005D47E8)
  {
    result = swift_getWitnessTable(&unk_10045B808, &type metadata for ICAccountArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D47E8);
  }
  return result;
}

unint64_t sub_100200694()
{
  unint64_t result;

  result = qword_1005D47F0;
  if (!qword_1005D47F0)
  {
    result = swift_getWitnessTable(&unk_10045B778, &type metadata for ICAccountArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D47F0);
  }
  return result;
}

unint64_t sub_1002006DC()
{
  unint64_t result;

  result = qword_1005D47F8;
  if (!qword_1005D47F8)
  {
    result = swift_getWitnessTable(&unk_10045B7A0, &type metadata for ICAccountArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D47F8);
  }
  return result;
}

uint64_t RenameFolderIntent.entity.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for FolderEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100201448(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_10020148C(a1);
}

void *OpenFolderIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenFolderIntent.persistentIdentifier;
}

uint64_t sub_1002007AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static OpenFolderIntent.title);
  sub_10012A0B0(v10, (uint64_t)static OpenFolderIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x6C6F46206E65704FLL, 0xEB00000000726564);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t OpenFolderIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEAC8 != -1)
    swift_once(&qword_1005CEAC8, sub_1002007AC);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static OpenFolderIntent.title);
}

uint64_t static OpenFolderIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEAC8 != -1)
    swift_once(&qword_1005CEAC8, sub_1002007AC);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static OpenFolderIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *OpenFolderIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenFolderIntent.openAppWhenRun;
}

uint64_t static OpenFolderIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x8000000100482D60);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static OpenFolderIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005D4808);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D4810);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000192D4();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, &type metadata for OpenFolderIntent, v6);
  v7._countAndFlagsBits = 0x656874206E65704FLL;
  v7._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10045B888, v8);
  v10 = sub_100012E18(&qword_1005D4818);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x7265646C6F6620;
  v11._object = (void *)0xE700000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for OpenFolderIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenFolderIntent, v6);
}

uint64_t MoveNotesToFolderIntent.container.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for FolderEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100201448(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_10020148C(a1);
}

uint64_t sub_100200DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005D4808);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D4810);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, a1, a2);
  v10._countAndFlagsBits = 0x656874206E65704FLL;
  v10._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_10045B888, v11);
  v13 = sub_100012E18(&qword_1005D4818);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x7265646C6F6620;
  v14._object = (void *)0xE700000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_100200F60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes16OpenFolderIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t _s11MobileNotes16OpenFolderIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD v52[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18(&qword_1005D1EB0);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18((uint64_t *)&unk_1005CEFE0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Folder intent", 38, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100477770);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for folder", 32, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for FolderEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v35 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v36 = sub_100201648((unint64_t *)&qword_1005D7870, (uint64_t)&protocol conformance descriptor for FolderEntity);
  v37 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v50 = 0xD000000000000024;
  v51 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v38 = type metadata accessor for AppDependencyManager(0);
  v39 = static AppDependencyManager.shared.getter(v38);
  AppDependency.__allocating_init(key:manager:)(v52, v39);
  sub_100012E18(&qword_1005CEE50);
  v50 = 0xD000000000000021;
  v51 = 0x8000000100476B70;
  v40 = AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v41 = static AppDependencyManager.shared.getter(v40);
  AppDependency.__allocating_init(key:manager:)(v52, v41);
  return v37;
}

uint64_t sub_100201448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FolderEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020148C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FolderEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002014C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002014F0()
{
  return sub_100201648(&qword_1005D4820, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

unint64_t sub_100201514(uint64_t a1)
{
  unint64_t result;

  result = sub_100201538();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100201538()
{
  unint64_t result;

  result = qword_1005D4850;
  if (!qword_1005D4850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenFolderIntent, &type metadata for OpenFolderIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4850);
  }
  return result;
}

unint64_t sub_100201580()
{
  unint64_t result;

  result = qword_1005D4858;
  if (!qword_1005D4858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenFolderIntent, &type metadata for OpenFolderIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4858);
  }
  return result;
}

uint64_t sub_1002015C4()
{
  return sub_100201648((unint64_t *)&unk_1005D7310, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1002015EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of OpenFolderIntent.perform()>>, 1);
}

uint64_t sub_1002015FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static OpenFolderIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for OpenFolderIntent()
{
  return &type metadata for OpenFolderIntent;
}

uint64_t sub_10020161C()
{
  return sub_100016638(&qword_1005D4878, &qword_1005D4880, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_100201648(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FolderEntity(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ApplyFormattingIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[6] = static MainActor.shared.getter(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor, v4);
  return swift_task_switch(sub_1002016F4, v5, v6);
}

uint64_t sub_1002016F4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v2 = *(void **)(v1 + 48);
  if (v2)
  {
    v3 = v2;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
    __asm { BR              X11 }
  }
  type metadata accessor for ICError(0);
  v5 = v4;
  *(_QWORD *)(v0 + 24) = 227;
  v6 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_100185F98();
  v8 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v6, v5, v7);
  swift_willThrow(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double ApplyFormattingIntent.init()@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  sub_100202C34((uint64_t *)v5);
  v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  result = *(double *)&v6;
  v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

uint64_t SetChecklistItemsCheckedIntent.changeOperation.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t SetChecklistItemsCheckedIntent.changeOperation.setter(char a1)
{
  char v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t ApplyFormattingIntent.italic.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t ApplyFormattingIntent.italic.setter(char a1)
{
  char v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t ApplyFormattingIntent.underline.setter(char a1)
{
  char v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t ApplyFormattingIntent.strikethrough.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t ApplyFormattingIntent.strikethrough.setter(char a1)
{
  char v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

void *ApplyFormattingIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static ApplyFormattingIntent.persistentIdentifier;
}

unint64_t static ApplyFormattingIntent.persistentIdentifier.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_100201AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static ApplyFormattingIntent.title);
  sub_10012A0B0(v10, (uint64_t)static ApplyFormattingIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x8000000100482DE0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t ApplyFormattingIntent.title.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CEAD0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static ApplyFormattingIntent.title, (uint64_t)sub_100201AB4);
}

uint64_t static ApplyFormattingIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CEAD0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static ApplyFormattingIntent.title, (uint64_t)sub_100201AB4, a1);
}

void *ApplyFormattingIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static ApplyFormattingIntent.openAppWhenRun;
}

void *ApplyFormattingIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static ApplyFormattingIntent.assistantOnly;
}

uint64_t static ApplyFormattingIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100482DB0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t (*CreateAttachmentIntent.note.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t CreateAttachmentIntent.$note.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t ApplyFormattingIntent.loggingConfiguration.getter()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t ApplyFormattingIntent.loggingConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  return AppDependency.wrappedValue.setter(v5);
}

uint64_t (*ApplyFormattingIntent.loggingConfiguration.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AppDependency.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t ApplyFormattingIntent.$loggingConfiguration.getter()
{
  return AppDependency.projectedValue.getter();
}

uint64_t sub_100201FD8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static ApplyFormattingIntent.ChangeOperationType.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static ApplyFormattingIntent.ChangeOperationType.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x8000000100478B90);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Title for enum representing formatting change operations", 56, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t ApplyFormattingIntent.ChangeOperationType.typeDisplayRepresentation.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CEAD8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static ApplyFormattingIntent.ChangeOperationType.typeDisplayRepresentation, (uint64_t)sub_100201FD8);
}

uint64_t static ApplyFormattingIntent.ChangeOperationType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CEAD8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static ApplyFormattingIntent.ChangeOperationType.typeDisplayRepresentation, (uint64_t)sub_100201FD8, a1);
}

unint64_t sub_100202234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unint64_t result;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(char *);
  unsigned int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;

  v0 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v0);
  v56 = (char *)&v49 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v63 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100012E18(&qword_1005D4908);
  v17 = sub_100012E18(&qword_1005D0250);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v55 = 2 * v19;
  v22 = swift_allocObject(v16, v21 + 3 * v19, v20 | 7);
  v57 = v22;
  *(_OWORD *)(v22 + 16) = xmmword_100456A10;
  v62 = v22 + v21;
  v23 = v17;
  v52 = v22 + v21 + *(int *)(v17 + 48);
  *(_BYTE *)(v22 + v21) = 0;
  v24 = String.LocalizationValue.init(stringLiteral:)(0x656C62616E45, 0xE600000000000000);
  v25 = v9;
  static Locale.current.getter(v24);
  v54 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v53 = *(void (**)(char *))(v4 + 104);
  v50 = v6;
  v26 = v61;
  v53(v6);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v6, "Link enum value", 15, 2);
  v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v27 = v63;
  v28 = v58;
  v51(v63, 1, 1, v58);
  v29 = type metadata accessor for DisplayRepresentation.Image(0);
  v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v60 = v29;
  v30 = v56;
  v59(v56, 1, 1, v29);
  v31 = v15;
  DisplayRepresentation.init(title:subtitle:image:)(v15, v27, v30);
  v52 = v62 + v19 + *(int *)(v23 + 48);
  *(_BYTE *)(v62 + v19) = 1;
  v32 = v12;
  v33 = String.LocalizationValue.init(stringLiteral:)(0x656C6261736944, 0xE700000000000000);
  v34 = v25;
  static Locale.current.getter(v33);
  v35 = v50;
  v36 = v54;
  v37 = (void (*)(char *, uint64_t, uint64_t))v53;
  ((void (*)(char *, _QWORD, uint64_t))v53)(v50, v54, v26);
  v38 = v31;
  v39 = v32;
  v40 = v32;
  v41 = v34;
  v42 = v34;
  v43 = v35;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v39, 0, 0, v41, v35, "Link enum value", 15, 2);
  v44 = v63;
  v45 = v28;
  v46 = v51;
  v51(v63, 1, 1, v45);
  v59(v30, 1, 1, v60);
  DisplayRepresentation.init(title:subtitle:image:)(v38, v44, v30);
  *(_BYTE *)(v62 + v55) = 2;
  v47 = String.LocalizationValue.init(stringLiteral:)(0x656C67676F54, 0xE600000000000000);
  static Locale.current.getter(v47);
  v37(v43, v36, v61);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v40, 0, 0, v42, v43, "Link enum value", 15, 2);
  v46(v44, 1, 1, v58);
  v59(v30, 1, 1, v60);
  DisplayRepresentation.init(title:subtitle:image:)(v38, v44, v30);
  result = sub_100136270(v57);
  static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations = result;
  return result;
}

uint64_t *ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_1005CEAE0 != -1)
    swift_once(&qword_1005CEAE0, sub_100202234);
  return &static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations;
}

double static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_1005CEAE0 != -1)
    swift_once(&qword_1005CEAE0, sub_100202234);
  swift_beginAccess(&static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations).n128_u64[0];
  return result;
}

uint64_t static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  if (qword_1005CEAE0 != -1)
    swift_once(&qword_1005CEAE0, sub_100202234);
  swift_beginAccess(&static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations, v4, 1, 0);
  v2 = static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations;
  static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations.modify(uint64_t a1))(_QWORD)
{
  if (qword_1005CEAE0 != -1)
    swift_once(&qword_1005CEAE0, sub_100202234);
  swift_beginAccess(&static ApplyFormattingIntent.ChangeOperationType.caseDisplayRepresentations, a1, 33, 0);
  return j__swift_endAccess;
}

_UNKNOWN **static ApplyFormattingIntent.ChangeOperationType.allCases.getter()
{
  return &off_100556400;
}

uint64_t ApplyFormattingIntent.ChangeOperationType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x656C62616E65;
  if (a1 == 1)
    return 0x656C6261736964;
  return 0x656C67676F74;
}

uint64_t sub_1002028C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100215A3C(*a1, *a2);
}

unint64_t sub_1002028D4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s11MobileNotes21ApplyFormattingIntentV19ChangeOperationTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100202900(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x656C6261736964;
  if (v2 != 1)
  {
    v5 = 0x656C67676F74;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656C62616E65;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

Swift::Int sub_100202958()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE700000000000000;
  v3 = 0x656C6261736964;
  if (v1 != 1)
  {
    v3 = 0x656C67676F74;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x656C62616E65;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1002029F0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE700000000000000;
  v3 = 0x656C6261736964;
  if (*v1 != 1)
  {
    v3 = 0x656C67676F74;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x656C62616E65;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100202A64(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE700000000000000;
  v4 = 0x656C6261736964;
  if (v2 != 1)
  {
    v4 = 0x656C67676F74;
    v3 = 0xE600000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x656C62616E65;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE600000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_100202AF8@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CEAD8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static ApplyFormattingIntent.ChangeOperationType.typeDisplayRepresentation, (uint64_t)sub_100201FD8, a1);
}

uint64_t sub_100202B1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012828C();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100202B54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002037A4();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_100202B8C(_QWORD *a1@<X8>)
{
  *a1 = &off_100555A58;
}

uint64_t sub_100202B9C@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CEAD0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static ApplyFormattingIntent.title, (uint64_t)sub_100201AB4, a1);
}

uint64_t sub_100202BC4(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;

  v4 = v1[1];
  *(_OWORD *)(v2 + 16) = *v1;
  *(_OWORD *)(v2 + 32) = v4;
  v5 = v1[3];
  *(_OWORD *)(v2 + 48) = v1[2];
  *(_OWORD *)(v2 + 64) = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_1005D488C);
  *(_QWORD *)(v2 + 80) = v6;
  *v6 = v2;
  v6[1] = sub_1001F9DFC;
  return ApplyFormattingIntent.perform()(a1);
}

uint64_t sub_100202C34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, _QWORD, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t result;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  void (*v81)(char *);
  char *v82;
  void (*v83)(char *, uint64_t, uint64_t, uint64_t);
  void (*v84)(char *, _QWORD, uint64_t, uint64_t);
  char *v85;
  char *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *);
  unint64_t v94;
  unsigned int v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD v100[7];

  v80 = a1;
  v97 = type metadata accessor for InputConnectionBehavior(0);
  v94 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v86 = (char *)&v77 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v85 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v96 = (char *)&v77 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v90 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = v8;
  __chkstk_darwin(v8);
  v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = v19;
  __chkstk_darwin(v19);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100012E18(&qword_1005CEFF0);
  v24 = String.LocalizationValue.init(stringLiteral:)(1684827970, 0xE400000000000000);
  static Locale.current.getter(v24);
  v25 = *(void (**)(char *))(v9 + 104);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v87 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v88 = v10;
  v25(v12);
  v27 = v23;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for whether to bold or unbold", 45, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x80000001004777C0);
  static Locale.current.getter(v28);
  ((void (*)(char *, uint64_t, uint64_t))v25)(v12, v26, v10);
  v29 = v90;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for bold", 30, 2);
  v84 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v91 = v21;
  v84(v29, 0, 1, v21);
  LOBYTE(v100[0]) = 3;
  v30 = type metadata accessor for IntentDialog(0);
  v89 = v30;
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v83 = v31;
  v32 = v96;
  v31(v96, 1, 1, v30);
  v33 = v85;
  v31(v85, 1, 1, v30);
  v95 = enum case for InputConnectionBehavior.default(_:);
  v93 = *(void (**)(char *))(v94 + 104);
  v34 = v86;
  v93(v86);
  v94 = sub_10012828C();
  v82 = v27;
  v35 = v29;
  v36 = v33;
  v79 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v27, v35, v100, v32, v33, v34, &off_100555D40, v94);
  v37 = String.LocalizationValue.init(stringLiteral:)(0x63696C617449, 0xE600000000000000);
  static Locale.current.getter(v37);
  v38 = v87;
  v39 = v88;
  v81 = v25;
  ((void (*)(char *, _QWORD, uint64_t))v25)(v12, v87, v88);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for whether to italicize", 40, 2);
  v40 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x8000000100477840);
  static Locale.current.getter(v40);
  ((void (*)(char *, uint64_t, uint64_t))v25)(v12, v38, v39);
  v41 = v90;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for italic", 32, 2);
  v42 = v84;
  v84(v41, 0, 1, v91);
  LOBYTE(v100[0]) = 3;
  v43 = v96;
  v44 = v89;
  v45 = v83;
  v83(v96, 1, 1, v89);
  v45(v36, 1, 1, v44);
  v46 = v86;
  ((void (*)(char *, _QWORD, uint64_t))v93)(v86, v95, v97);
  v47 = v41;
  v48 = v46;
  v78 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v82, v47, v100, v43, v36, v46, &off_100555D68, v94);
  v49 = String.LocalizationValue.init(stringLiteral:)(0x6E696C7265646E55, 0xE900000000000065);
  static Locale.current.getter(v49);
  v50 = v87;
  v51 = v88;
  v52 = (void (*)(char *, uint64_t, uint64_t))v81;
  ((void (*)(char *, _QWORD, uint64_t))v81)(v12, v87, v88);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for whether to underline", 40, 2);
  v53 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003BLL, 0x80000001004778E0);
  static Locale.current.getter(v53);
  v52(v12, v50, v51);
  v54 = v90;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for underline", 35, 2);
  v42(v54, 0, 1, v91);
  LOBYTE(v100[0]) = 3;
  v55 = v96;
  v56 = v89;
  v57 = v83;
  v83(v96, 1, 1, v89);
  v57(v36, 1, 1, v56);
  v58 = v48;
  ((void (*)(char *, _QWORD, uint64_t))v93)(v48, v95, v97);
  v59 = v82;
  v77 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v82, v54, v100, v55, v36, v58, &off_100555D90, v94);
  v60 = String.LocalizationValue.init(stringLiteral:)(0x6874656B69727453, 0xED00006867756F72);
  static Locale.current.getter(v60);
  v61 = v87;
  v62 = v88;
  v63 = (void (*)(char *, uint64_t, uint64_t))v81;
  ((void (*)(char *, _QWORD, uint64_t))v81)(v12, v87, v88);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for whether to add strikethrough", 48, 2);
  v64 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000047, 0x8000000100477990);
  static Locale.current.getter(v64);
  v63(v12, v61, v62);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for strikethrough", 39, 2);
  v84(v54, 0, 1, v91);
  LOBYTE(v100[0]) = 3;
  v65 = v96;
  v66 = v89;
  v57(v96, 1, 1, v89);
  v67 = v85;
  v57(v85, 1, 1, v66);
  ((void (*)(char *, _QWORD, uint64_t))v93)(v58, v95, v97);
  v68 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v59, v54, v100, v65, v67, v58, &off_100555DB8, v94);
  sub_100012E18(&qword_1005CEE50);
  v98 = 0xD000000000000021;
  v99 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v100, &v98, &type metadata for String, &protocol witness table for String);
  v69 = type metadata accessor for AppDependencyManager(0);
  v70 = static AppDependencyManager.shared.getter(v69);
  v71 = AppDependency.__allocating_init(key:manager:)(v100, v70);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v98 = 0xD000000000000024;
  v99 = 0x8000000100476B40;
  v72 = AnyHashable.init<A>(_:)(v100, &v98, &type metadata for String, &protocol witness table for String);
  v73 = static AppDependencyManager.shared.getter(v72);
  result = AppDependency.__allocating_init(key:manager:)(v100, v73);
  v75 = v80;
  v76 = v78;
  *v80 = v79;
  v75[1] = v76;
  v75[2] = v77;
  v75[3] = v68;
  v75[4] = v71;
  v75[5] = result;
  v75[6] = 0;
  v75[7] = 0;
  return result;
}

unint64_t _s11MobileNotes21ApplyFormattingIntentV19ChangeOperationTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100556398, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1002035F0()
{
  unint64_t result;

  result = qword_1005D4890;
  if (!qword_1005D4890)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D4890);
  }
  return result;
}

unint64_t sub_100203638()
{
  unint64_t result;

  result = qword_1005D4898;
  if (!qword_1005D4898)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D4898);
  }
  return result;
}

unint64_t sub_100203680()
{
  unint64_t result;

  result = qword_1005D48A0;
  if (!qword_1005D48A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D48A0);
  }
  return result;
}

unint64_t sub_1002036C8()
{
  unint64_t result;

  result = qword_1005D48A8;
  if (!qword_1005D48A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D48A8);
  }
  return result;
}

unint64_t sub_100203710()
{
  unint64_t result;

  result = qword_1005D48B0;
  if (!qword_1005D48B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D48B0);
  }
  return result;
}

unint64_t sub_100203758()
{
  unint64_t result;

  result = qword_1005D48B8;
  if (!qword_1005D48B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D48B8);
  }
  return result;
}

unint64_t sub_1002037A4()
{
  unint64_t result;

  result = qword_1005D48C0;
  if (!qword_1005D48C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D48C0);
  }
  return result;
}

uint64_t sub_1002037E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001735AC(a1, a2, a3, (uint64_t (*)(void))sub_10012828C, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

unint64_t sub_100203800()
{
  unint64_t result;

  result = qword_1005D48C8;
  if (!qword_1005D48C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D48C8);
  }
  return result;
}

unint64_t sub_100203848()
{
  unint64_t result;

  result = qword_1005D48D0;
  if (!qword_1005D48D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D48D0);
  }
  return result;
}

unint64_t sub_100203890()
{
  unint64_t result;

  result = qword_1005D48D8;
  if (!qword_1005D48D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005D48D8);
  }
  return result;
}

uint64_t sub_1002038D4()
{
  return sub_100016638(&qword_1005D48E0, &qword_1005D48E8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100203904()
{
  unint64_t result;

  result = qword_1005D48F0;
  if (!qword_1005D48F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent, &type metadata for ApplyFormattingIntent);
    atomic_store(result, (unint64_t *)&qword_1005D48F0);
  }
  return result;
}

unint64_t sub_10020394C()
{
  unint64_t result;

  result = qword_1005D48F8;
  if (!qword_1005D48F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent, &type metadata for ApplyFormattingIntent);
    atomic_store(result, (unint64_t *)&qword_1005D48F8);
  }
  return result;
}

uint64_t sub_100203990(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ApplyFormattingIntent.perform()>>, 1);
}

uint64_t sub_1002039A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001735AC(a1, a2, a3, (uint64_t (*)(void))sub_1001855C8, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

void destroy for ApplyFormattingIntent(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 40));

}

uint64_t *initializeWithCopy for ApplyFormattingIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  v9 = (void *)a2[6];
  v10 = (void *)a2[7];
  a1[6] = (uint64_t)v9;
  a1[7] = (uint64_t)v10;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v11 = v9;
  v12 = v10;
  return a1;
}

uint64_t *assignWithCopy for ApplyFormattingIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[5];
  v15 = a1[5];
  a1[5] = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = (void *)a1[6];
  v17 = (void *)a2[6];
  a1[6] = (uint64_t)v17;
  v18 = v17;

  v19 = (void *)a1[7];
  v20 = (void *)a2[7];
  a1[7] = (uint64_t)v20;
  v21 = v20;

  return a1;
}

uint64_t assignWithTake for ApplyFormattingIntent(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);
  swift_release(*(_QWORD *)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];
  swift_release(v6);

  v7 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = a2[3];

  return a1;
}

ValueMetadata *type metadata accessor for ApplyFormattingIntent()
{
  return &type metadata for ApplyFormattingIntent;
}

uint64_t storeEnumTagSinglePayload for ApplyFormattingIntent.ChangeOperationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100203C5C + 4 * byte_10045BA75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100203C90 + 4 * byte_10045BA70[v4]))();
}

uint64_t sub_100203C90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100203C98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100203CA0);
  return result;
}

uint64_t sub_100203CAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100203CB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100203CB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100203CC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplyFormattingIntent.ChangeOperationType()
{
  return &type metadata for ApplyFormattingIntent.ChangeOperationType;
}

uint64_t OpenTopLevelFolderIntent.target.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t OpenTopLevelFolderIntent.target.setter(char a1)
{
  char v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

void *SetParagraphStyleIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static SetParagraphStyleIntent.persistentIdentifier;
}

unint64_t static SetParagraphStyleIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100203D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static SetParagraphStyleIntent.title);
  sub_10012A0B0(v10, (uint64_t)static SetParagraphStyleIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x8000000100482ED0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t SetParagraphStyleIntent.title.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CEAE8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetParagraphStyleIntent.title, (uint64_t)sub_100203D68);
}

uint64_t static SetParagraphStyleIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CEAE8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetParagraphStyleIntent.title, (uint64_t)sub_100203D68, a1);
}

void *SetParagraphStyleIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static SetParagraphStyleIntent.openAppWhenRun;
}

uint64_t static SetParagraphStyleIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100482E30);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static SetParagraphStyleIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005D4910);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D4918);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B2C28();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 1, &type metadata for SetParagraphStyleIntent, v6);
  v7._object = (void *)0x8000000100482E60;
  v7._countAndFlagsBits = 0xD000000000000017;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10045BE80, v8);
  v10 = sub_100012E18(&qword_1005D4920);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for SetParagraphStyleIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for SetParagraphStyleIntent, v6);
}

uint64_t sub_1002042B0@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CEAE8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetParagraphStyleIntent.title, (uint64_t)sub_100203D68, a1);
}

uint64_t sub_1002042DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes23SetParagraphStyleIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_100204304()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static ParagraphStyle.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static ParagraphStyle.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x7061726761726150, 0xEF656C7974532068);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Title for entity representing Notes paragraph styles", 52, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t ParagraphStyle.typeDisplayRepresentation.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CEAF0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static ParagraphStyle.typeDisplayRepresentation, (uint64_t)sub_100204304);
}

uint64_t static ParagraphStyle.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CEAF0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static ParagraphStyle.typeDisplayRepresentation, (uint64_t)sub_100204304, a1);
}

unint64_t sub_100204568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  _BYTE *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  _BYTE *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, uint64_t, uint64_t, uint64_t);
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t, uint64_t, uint64_t);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t result;
  _BYTE *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  void (*v126)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  void (*v131)(char *, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t, uint64_t, uint64_t);
  char *v137;

  v0 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v0);
  v137 = (char *)&v119 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = (char *)&v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v5 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v7 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v16 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100012E18(&qword_1005D49B8);
  v18 = sub_100012E18(&qword_1005D0240);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 72);
  v127 = v18;
  v128 = v20;
  v21 = *(unsigned __int8 *)(v19 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(v17, v22 + 10 * v20, v21 | 7);
  v120 = v23;
  *(_OWORD *)(v23 + 16) = xmmword_10045BE50;
  v133 = v23 + v22;
  *(_BYTE *)(v23 + v22) = 0;
  v24 = v13;
  v25 = String.LocalizationValue.init(stringLiteral:)(0x656C746954, 0xE500000000000000);
  v26 = v10;
  static Locale.current.getter(v25);
  v134 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(_QWORD))(v5 + 104);
  v130 = v7;
  v131 = (void (*)(char *, uint64_t, uint64_t))v27;
  v28 = v132;
  v27(v7);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v13, 0, 0, v10, v7, "Link enum value", 15, 2);
  v136 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v29 = v135;
  v136(v4, 1, 1, v135);
  v129 = type metadata accessor for DisplayRepresentation.Image(0);
  v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 56);
  v30 = v137;
  v126(v137, 1, 1, v129);
  DisplayRepresentation.init(title:subtitle:image:)(v16, v4, v30);
  v31 = v127;
  v32 = v128;
  v123 = v133 + v128 + *(int *)(v127 + 48);
  v124 = v24;
  *(_BYTE *)(v133 + v128) = 1;
  v33 = v24;
  v34 = String.LocalizationValue.init(stringLiteral:)(0x676E6964616548, 0xE700000000000000);
  v125 = v26;
  static Locale.current.getter(v34);
  v35 = v130;
  v36 = v134;
  v131(v130, v134, v28);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v33, 0, 0, v26, v35, "Link enum value", 15, 2);
  v37 = v4;
  v122 = v4;
  v136(v4, 1, 1, v29);
  v38 = v137;
  v39 = v129;
  v40 = v126;
  v126(v137, 1, 1, v129);
  DisplayRepresentation.init(title:subtitle:image:)(v16, v37, v38);
  v41 = 2 * v32;
  v123 = 2 * v32;
  v42 = v133;
  v43 = (_BYTE *)(v133 + v41);
  v44 = v31;
  v119 = &v43[*(int *)(v31 + 48)];
  *v43 = 2;
  v45 = v124;
  v46 = String.LocalizationValue.init(stringLiteral:)(0x6964616568627553, 0xEA0000000000676ELL);
  v47 = v125;
  static Locale.current.getter(v46);
  v48 = v130;
  v131(v130, v36, v132);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v45, 0, 0, v47, v48, "Link enum value", 15, 2);
  v49 = v122;
  v136(v122, 1, 1, v135);
  v40(v38, 1, 1, v39);
  v50 = v38;
  DisplayRepresentation.init(title:subtitle:image:)(v16, v49, v38);
  v51 = v128;
  v52 = (_BYTE *)(v42 + v123 + v128);
  v123 = (uint64_t)&v52[*(int *)(v44 + 48)];
  *v52 = 3;
  v53 = v45;
  v54 = String.LocalizationValue.init(stringLiteral:)(2036625218, 0xE400000000000000);
  static Locale.current.getter(v54);
  v55 = v48;
  v57 = v131;
  v56 = v132;
  v131(v48, v134, v132);
  v121 = v16;
  v58 = v47;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v53, 0, 0, v47, v55, "Link enum value", 15, 2);
  v59 = v135;
  v136(v49, 1, 1, v135);
  v60 = v126;
  v126(v50, 1, 1, v129);
  DisplayRepresentation.init(title:subtitle:image:)(v16, v49, v50);
  v61 = v51;
  v123 = 4 * v51;
  v62 = v133;
  v63 = (_BYTE *)(v133 + 4 * v51);
  v64 = v127;
  v119 = &v63[*(int *)(v127 + 48)];
  *v63 = 4;
  v65 = v124;
  v66 = String.LocalizationValue.init(stringLiteral:)(0x6C7974736F6E6F4DLL, 0xEA00000000006465);
  static Locale.current.getter(v66);
  v67 = v130;
  v57(v130, v134, v56);
  v68 = v121;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v65, 0, 0, v58, v67, "Link enum value", 15, 2);
  v69 = v122;
  v70 = v136;
  v136(v122, 1, 1, v59);
  v71 = v137;
  v72 = v129;
  v60(v137, 1, 1, v129);
  v73 = v68;
  v74 = v69;
  DisplayRepresentation.init(title:subtitle:image:)(v68, v69, v71);
  v75 = v124;
  v76 = (_BYTE *)(v62 + v123 + v61);
  v123 = (uint64_t)&v76[*(int *)(v64 + 48)];
  *v76 = 5;
  v77 = String.LocalizationValue.init(stringLiteral:)(0x6E6F6974706143, 0xE700000000000000);
  v78 = v125;
  static Locale.current.getter(v77);
  v79 = v130;
  v80 = v131;
  v81 = v134;
  v82 = v132;
  v131(v130, v134, v132);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v75, 0, 0, v78, v79, "Link enum value", 15, 2);
  v70(v74, 1, 1, v135);
  v83 = v137;
  v84 = v72;
  v85 = v126;
  v126(v137, 1, 1, v84);
  DisplayRepresentation.init(title:subtitle:image:)(v73, v74, v83);
  v86 = v127;
  v87 = (_BYTE *)(v133 + 6 * v128);
  v123 = (uint64_t)&v87[*(int *)(v127 + 48)];
  *v87 = 6;
  v88 = v75;
  v89 = String.LocalizationValue.init(stringLiteral:)(0x646574656C6C7542, 0xED00007473694C20);
  static Locale.current.getter(v89);
  v90 = v130;
  v80(v130, v81, v82);
  v91 = v88;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v88, 0, 0, v78, v90, "Link enum value", 15, 2);
  v92 = v74;
  v136(v74, 1, 1, v135);
  v93 = v137;
  v94 = v129;
  v85(v137, 1, 1, v129);
  DisplayRepresentation.init(title:subtitle:image:)(v73, v92, v93);
  v123 = 8 * v128;
  v95 = v133;
  v96 = (_BYTE *)(v133 + 7 * v128);
  v119 = &v96[*(int *)(v86 + 48)];
  *v96 = 7;
  v97 = v91;
  v98 = String.LocalizationValue.init(stringLiteral:)(0x4C20646568736144, 0xEB00000000747369);
  v99 = v78;
  static Locale.current.getter(v98);
  v100 = v90;
  v101 = v90;
  v102 = v134;
  v103 = v131;
  v104 = v132;
  v131(v101, v134, v132);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v97, 0, 0, v99, v100, "Link enum value", 15, 2);
  v105 = v92;
  v106 = v135;
  v136(v92, 1, 1, v135);
  v107 = v137;
  v108 = v126;
  v126(v137, 1, 1, v94);
  v109 = v121;
  DisplayRepresentation.init(title:subtitle:image:)(v121, v105, v107);
  v119 = (_BYTE *)(v95 + v123 + *(int *)(v127 + 48));
  *(_BYTE *)(v95 + v123) = 8;
  v110 = String.LocalizationValue.init(stringLiteral:)(0x64657265626D754ELL, 0xED00007473694C20);
  v111 = v125;
  static Locale.current.getter(v110);
  v112 = v130;
  v103(v130, v102, v104);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v97, 0, 0, v111, v112, "Link enum value", 15, 2);
  v113 = v106;
  v114 = v136;
  v136(v105, 1, 1, v113);
  v115 = v137;
  v116 = v129;
  v108(v137, 1, 1, v129);
  DisplayRepresentation.init(title:subtitle:image:)(v109, v105, v115);
  *(_BYTE *)(v133 + v123 + v128) = 9;
  v117 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xE900000000000074);
  static Locale.current.getter(v117);
  v131(v112, v134, v132);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v97, 0, 0, v111, v112, "Link enum value", 15, 2);
  v114(v105, 1, 1, v135);
  v126(v115, 1, 1, v116);
  DisplayRepresentation.init(title:subtitle:image:)(v109, v105, v115);
  result = sub_10013628C(v120);
  static ParagraphStyle.caseDisplayRepresentations = result;
  return result;
}

uint64_t *ParagraphStyle.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_1005CEAF8 != -1)
    swift_once(&qword_1005CEAF8, sub_100204568);
  return &static ParagraphStyle.caseDisplayRepresentations;
}

double static ParagraphStyle.caseDisplayRepresentations.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_1005CEAF8 != -1)
    swift_once(&qword_1005CEAF8, sub_100204568);
  swift_beginAccess(&static ParagraphStyle.caseDisplayRepresentations, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static ParagraphStyle.caseDisplayRepresentations).n128_u64[0];
  return result;
}

uint64_t static ParagraphStyle.caseDisplayRepresentations.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  if (qword_1005CEAF8 != -1)
    swift_once(&qword_1005CEAF8, sub_100204568);
  swift_beginAccess(&static ParagraphStyle.caseDisplayRepresentations, v4, 1, 0);
  v2 = static ParagraphStyle.caseDisplayRepresentations;
  static ParagraphStyle.caseDisplayRepresentations = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static ParagraphStyle.caseDisplayRepresentations.modify(uint64_t a1))(_QWORD)
{
  if (qword_1005CEAF8 != -1)
    swift_once(&qword_1005CEAF8, sub_100204568);
  swift_beginAccess(&static ParagraphStyle.caseDisplayRepresentations, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t ParagraphStyle.init(namedStyle:)(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
LABEL_5:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 5;
      break;
    default:
      switch(a1)
      {
        case 'd':
          result = 6;
          break;
        case 'e':
          result = 7;
          break;
        case 'f':
          result = 8;
          break;
        case 'g':
          result = 9;
          break;
        default:
          goto LABEL_5;
      }
      break;
  }
  return result;
}

uint64_t ParagraphStyle.namedStyle.getter(char a1)
{
  return dword_10045C26C[a1];
}

_UNKNOWN **static ParagraphStyle.allCases.getter()
{
  return &off_1005558C0;
}

uint64_t ParagraphStyle.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002052B0 + 4 * byte_10045BE6A[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1002052B0()
{
  return 0x676E6964616568;
}

uint64_t sub_1002052C8()
{
  return 0x6964616568627573;
}

uint64_t sub_1002052E4()
{
  return 2036625250;
}

uint64_t sub_1002052F4()
{
  return 0x6469576465786966;
}

uint64_t sub_100205314()
{
  return 0x6E6F6974706163;
}

uint64_t sub_10020532C()
{
  return 0x6C6C75427473696CLL;
}

uint64_t sub_10020534C()
{
  return 0x687361447473696CLL;
}

uint64_t sub_100205364()
{
  return 0x626D754E7473696CLL;
}

uint64_t sub_100205384()
{
  return 0x6F646F547473696CLL;
}

uint64_t sub_10020539C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = ParagraphStyle.rawValue.getter(*a1);
  v5 = v4;
  v6 = ParagraphStyle.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_100205424@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s11MobileNotes14ParagraphStyleO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100205450@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ParagraphStyle.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_100205478()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = ParagraphStyle.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1002054D8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = ParagraphStyle.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100205518(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = ParagraphStyle.rawValue.getter(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100205574@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CEAF0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static ParagraphStyle.typeDisplayRepresentation, (uint64_t)sub_100204304, a1);
}

uint64_t sub_100205598(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001282D0();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1002055D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100205D5C();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_100205608(_QWORD *a1@<X8>)
{
  *a1 = &off_1005558C0;
}

uint64_t _s11MobileNotes23SetParagraphStyleIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v47[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v39 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100012E18(&qword_1005CF000);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x7061726761726150, 0xEF656C7974532068);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for paragraph style", 35, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000030, 0x8000000100477A40);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for paragraph style", 41, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  LOBYTE(v47[0]) = 10;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v40;
  v28(v40, 1, 1, v27);
  v30 = v41;
  v28(v41, 1, 1, v27);
  v31 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v32 = sub_1001282D0();
  v33 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v47, v29, v30, v31, &off_1005558C0, v32);
  sub_100012E18(&qword_1005CEE50);
  v45 = 0xD000000000000021;
  v46 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v47, &v45, &type metadata for String, &protocol witness table for String);
  v34 = type metadata accessor for AppDependencyManager(0);
  v35 = static AppDependencyManager.shared.getter(v34);
  AppDependency.__allocating_init(key:manager:)(v47, v35);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v45 = 0xD000000000000024;
  v46 = 0x8000000100476B40;
  v36 = AnyHashable.init<A>(_:)(v47, &v45, &type metadata for String, &protocol witness table for String);
  v37 = static AppDependencyManager.shared.getter(v36);
  AppDependency.__allocating_init(key:manager:)(v47, v37);
  return v33;
}

uint64_t sub_100205A84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t _s11MobileNotes14ParagraphStyleO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100556428, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t sub_100205AF8()
{
  unint64_t result;

  result = qword_1005D4930;
  if (!qword_1005D4930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetParagraphStyleIntent, &type metadata for SetParagraphStyleIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4930);
  }
  return result;
}

unint64_t sub_100205B40()
{
  unint64_t result;

  result = qword_1005D4938;
  if (!qword_1005D4938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetParagraphStyleIntent, &type metadata for SetParagraphStyleIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4938);
  }
  return result;
}

uint64_t sub_100205B84(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SetParagraphStyleIntent.perform()>>, 1);
}

uint64_t sub_100205B94(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static SetParagraphStyleIntent.parameterSummary>>, 1);
}

unint64_t sub_100205BA8()
{
  unint64_t result;

  result = qword_1005D4948;
  if (!qword_1005D4948)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4948);
  }
  return result;
}

unint64_t sub_100205BF0()
{
  unint64_t result;

  result = qword_1005D4950;
  if (!qword_1005D4950)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4950);
  }
  return result;
}

unint64_t sub_100205C38()
{
  unint64_t result;

  result = qword_1005D4958;
  if (!qword_1005D4958)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4958);
  }
  return result;
}

unint64_t sub_100205C80()
{
  unint64_t result;

  result = qword_1005D4960;
  if (!qword_1005D4960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4960);
  }
  return result;
}

unint64_t sub_100205CC8()
{
  unint64_t result;

  result = qword_1005D4968;
  if (!qword_1005D4968)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4968);
  }
  return result;
}

unint64_t sub_100205D10()
{
  unint64_t result;

  result = qword_1005D4970;
  if (!qword_1005D4970)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4970);
  }
  return result;
}

unint64_t sub_100205D5C()
{
  unint64_t result;

  result = qword_1005D4978;
  if (!qword_1005D4978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4978);
  }
  return result;
}

uint64_t sub_100205DA0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1001282D0();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_100205DE4()
{
  unint64_t result;

  result = qword_1005D4980;
  if (!qword_1005D4980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4980);
  }
  return result;
}

unint64_t sub_100205E2C()
{
  unint64_t result;

  result = qword_1005D4988;
  if (!qword_1005D4988)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4988);
  }
  return result;
}

unint64_t sub_100205E74()
{
  unint64_t result;

  result = qword_1005D4990;
  if (!qword_1005D4990)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005D4990);
  }
  return result;
}

uint64_t sub_100205EB8()
{
  return sub_100016638(&qword_1005D4998, &qword_1005D49A0, (uint64_t)&protocol conformance descriptor for [A]);
}

ValueMetadata *type metadata accessor for SetParagraphStyleIntent()
{
  return &type metadata for SetParagraphStyleIntent;
}

uint64_t getEnumTagSinglePayload for ParagraphStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParagraphStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100205FD0 + 4 * byte_10045BE79[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100206004 + 4 * byte_10045BE74[v4]))();
}

uint64_t sub_100206004(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020600C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100206014);
  return result;
}

uint64_t sub_100206020(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100206028);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10020602C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100206034(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParagraphStyle()
{
  return &type metadata for ParagraphStyle;
}

uint64_t sub_100206050()
{
  return sub_100016638(&qword_1005D49A8, &qword_1005D49B0, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t type metadata accessor for ClearActivityCachesActivity()
{
  return objc_opt_self(ICClearActivityCachesActivity);
}

uint64_t sub_100206374()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100206398(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1003D2948(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1002063A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;

  v31 = type metadata accessor for Participant(0);
  v3 = *(_QWORD *)(v31 - 8);
  v4 = __chkstk_darwin(v31);
  v30 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v29 = (char *)&v25 - v6;
  v7 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  __chkstk_darwin(v7);
  v32 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (!v9)
    return (uint64_t)v10;
  v25 = v1;
  v33 = _swiftEmptyArrayStorage;
  sub_1001371B0(0, v9, 0);
  result = sub_100242C1C(a1);
  v12 = result;
  v14 = v13;
  v16 = v15 & 1;
  v26 = a1 + 56;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v26 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v14)
      goto LABEL_16;
    v17 = v29;
    v18 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v29, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v12, v31);
    v19 = v30;
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v30, v17, v18);
    Participant.id.getter(v20);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v19, v18);
    v10 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
    {
      sub_1001371B0(0, v10[2] + 1, 1);
      v10 = v33;
    }
    v22 = v10[2];
    v21 = v10[3];
    if (v22 >= v21 >> 1)
    {
      sub_1001371B0(v21 > 1, v22 + 1, 1);
      v10 = v33;
    }
    v10[2] = v22 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v22, v32, v28);
    v33 = v10;
    result = sub_1003CCBC0(v12, v14, v16 & 1, a1);
    v12 = result;
    v14 = v23;
    v16 = v24 & 1;
    if (!--v9)
    {
      sub_1001EDA28(result, v23, v24 & 1);
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

_QWORD *sub_100206638(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1001371CC(0, v1, 0);
    v3 = *(_QWORD *)(type metadata accessor for ICTTTextStorage.Selection(0) - 8);
    v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      v6 = ICTTTextStorage.Selection.range.getter();
      v8 = v7;
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_1001371CC(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100206734(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100206760@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t (*v30)(char *);
  uint64_t v31;

  v30 = a1;
  v27 = a3;
  v5 = sub_100012E18(&qword_1005D3DA0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v27 - v10;
  v12 = *(_QWORD *)(a2 + 64);
  v28 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v29 = (unint64_t)(v13 + 63) >> 6;
  v31 = a2;
  result = swift_bridgeObjectRetain(a2);
  v17 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v6 + 72) * i, v5);
    v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v9, v11, v5);
    v24 = v30(v9);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return swift_release(v31);
    }
    if ((v24 & 1) != 0)
    {
      swift_release(v31);
      v25 = v27;
      v23(v27, v9, v5);
      v26 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v25, v26, 1, v5);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
      break;
    if (v17 >= v29)
      goto LABEL_28;
    v21 = *(_QWORD *)(v28 + 8 * v17);
    if (!v21)
    {
      v22 = v17 + 1;
      if (v17 + 1 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 2;
      if (v17 + 2 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 3;
      if (v17 + 3 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
      {
LABEL_16:
        v17 = v22;
        goto LABEL_17;
      }
      v22 = v17 + 4;
      if (v17 + 4 < v29)
      {
        v21 = *(_QWORD *)(v28 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v17 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_31;
            if (v17 >= v29)
              goto LABEL_28;
            v21 = *(_QWORD *)(v28 + 8 * v17);
            ++v22;
            if (v21)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v25 = v27;
      swift_release(v31);
      v26 = 1;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v25, v26, 1, v5);
    }
LABEL_17:
    v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100206A18@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t (*v30)(char *);
  uint64_t v31;

  v30 = a1;
  v27 = a3;
  v5 = type metadata accessor for Participant(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v27 - v10;
  v12 = *(_QWORD *)(a2 + 56);
  v28 = a2 + 56;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v29 = (unint64_t)(v13 + 63) >> 6;
  v31 = a2;
  result = swift_bridgeObjectRetain(a2);
  v17 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v6 + 72) * i, v5);
    v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v9, v11, v5);
    v24 = v30(v9);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return swift_release(v31);
    }
    if ((v24 & 1) != 0)
    {
      swift_release(v31);
      v25 = v27;
      v23(v27, v9, v5);
      v26 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v25, v26, 1, v5);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
      break;
    if (v17 >= v29)
      goto LABEL_28;
    v21 = *(_QWORD *)(v28 + 8 * v17);
    if (!v21)
    {
      v22 = v17 + 1;
      if (v17 + 1 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 2;
      if (v17 + 2 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 3;
      if (v17 + 3 >= v29)
        goto LABEL_28;
      v21 = *(_QWORD *)(v28 + 8 * v22);
      if (v21)
      {
LABEL_16:
        v17 = v22;
        goto LABEL_17;
      }
      v22 = v17 + 4;
      if (v17 + 4 < v29)
      {
        v21 = *(_QWORD *)(v28 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v17 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_31;
            if (v17 >= v29)
              goto LABEL_28;
            v21 = *(_QWORD *)(v28 + 8 * v17);
            ++v22;
            if (v21)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v25 = v27;
      swift_release(v31);
      v26 = 1;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v25, v26, 1, v5);
    }
LABEL_17:
    v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_100206CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(id *);
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29[2];
  _QWORD v30[7];

  v6 = sub_1000163BC(0, (unint64_t *)&qword_1005D8AB0, ICNoteEditorViewController_ptr);
  v7 = sub_1001452A0((unint64_t *)&qword_1005D4AD8, (unint64_t *)&qword_1005D8AB0, ICNoteEditorViewController_ptr);
  v25 = v6;
  v29[1] = (id)Set.init(minimumCapacity:)(0, v6, v7);
  v8 = sub_1002D91DC(a1, a2, a3, (uint64_t)v30);
  v9 = v30[0];
  v10 = v30[3];
  v12 = v30[4];
  v11 = (uint64_t (*)(id *))v30[5];
  v13 = v30[6];
  v26 = v30[1];
  v14 = (unint64_t)(v30[2] + 64) >> 6;
  while (v9 < 0)
  {
    v18 = __CocoaSet.Iterator.next()(v8);
    if (!v18)
      goto LABEL_31;
    v19 = v18;
    v27 = v18;
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v20 = v28;
    swift_unknownObjectRelease(v19, v21);
    v17 = v10;
    v15 = v12;
    if (!v20)
      goto LABEL_31;
LABEL_29:
    v29[0] = v20;
    if ((v11(v29) & 1) != 0)
    {
      sub_100303B08((Swift::Int *)v29, v20);

    }
    else
    {

    }
    v10 = v17;
    v12 = v15;
  }
  if (v12)
  {
    v15 = (v12 - 1) & v12;
    v16 = __clz(__rbit64(v12)) | (v10 << 6);
    v17 = v10;
LABEL_28:
    v20 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v16);
    if (!v20)
      goto LABEL_31;
    goto LABEL_29;
  }
  v22 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v22 >= v14)
      goto LABEL_31;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    v17 = v10 + 1;
    if (!v23)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_31;
      v23 = *(_QWORD *)(v26 + 8 * v17);
      if (!v23)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_31;
        v23 = *(_QWORD *)(v26 + 8 * v17);
        if (!v23)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v14)
            goto LABEL_31;
          v23 = *(_QWORD *)(v26 + 8 * v17);
          if (!v23)
          {
            v17 = v10 + 5;
            if (v10 + 5 >= v14)
              goto LABEL_31;
            v23 = *(_QWORD *)(v26 + 8 * v17);
            if (!v23)
            {
              v17 = v10 + 6;
              if (v10 + 6 >= v14)
                goto LABEL_31;
              v23 = *(_QWORD *)(v26 + 8 * v17);
              if (!v23)
              {
                v24 = v10 + 7;
                while (v14 != v24)
                {
                  v23 = *(_QWORD *)(v26 + 8 * v24++);
                  if (v23)
                  {
                    v17 = v24 - 1;
                    goto LABEL_27;
                  }
                }
LABEL_31:
                sub_1001452E0(v9);
                swift_release(v13);
                return;
              }
            }
          }
        }
      }
    }
LABEL_27:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_100206F68(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;

  v27 = type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0);
  v7 = *(_QWORD *)(v27 - 8);
  v8 = __chkstk_darwin(v27);
  v26 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  v13 = _swiftEmptyArrayStorage;
  v28 = _swiftEmptyArrayStorage;
  v25 = *(_QWORD *)(a3 + 16);
  if (v25)
  {
    v14 = 0;
    v22 = a2;
    v23 = a3;
    v21 = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v13 = *(_QWORD **)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + (_QWORD)v13 * v14, v27);
      v16 = a1(v12);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v27);
        swift_bridgeObjectRelease(a3);
        swift_release(v28);
        return (uint64_t)v13;
      }
      if ((v16 & 1) != 0)
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v24(v26, v12, v27);
        v17 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        {
          sub_100137194(0, v17[2] + 1, 1);
          v17 = v28;
        }
        v19 = v17[2];
        v18 = v17[3];
        if (v19 >= v18 >> 1)
        {
          sub_100137194(v18 > 1, v19 + 1, 1);
          v17 = v28;
        }
        v17[2] = v19 + 1;
        result = ((uint64_t (*)(char *, char *, uint64_t))v24)((char *)v17 + v15 + v19 * (_QWORD)v13, v26, v27);
        v28 = v17;
        a3 = v23;
        a1 = v21;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v27);
      }
      if (v25 == ++v14)
      {
        v13 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_100207178()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D49F0);
  v1 = sub_10012A0B0(v0, (uint64_t)qword_1005D49F0);
  return static Logger.realtimeCollaboration.getter(v1);
}

uint64_t RealtimeCollaborationSelectionController.editorController.getter()
{
  uint64_t v0;

  return swift_unknownObjectUnownedLoadStrong(v0 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController);
}

uint64_t RealtimeCollaborationSelectionController.realtimeCollaborationController.getter()
{
  uint64_t v0;

  return swift_unknownObjectUnownedLoadStrong(v0 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController);
}

id RealtimeCollaborationSelectionController.__allocating_init(editorController:realtimeCollaborationController:)(void *a1, char *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return RealtimeCollaborationSelectionController.init(editorController:realtimeCollaborationController:)(a1, a2);
}

id RealtimeCollaborationSelectionController.init(editorController:realtimeCollaborationController:)(void *a1, char *a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v44;
  _QWORD v45[3];
  objc_super v46;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v7 = sub_100012E18(&qword_1005D4A18);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v45[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v3[OBJC_IVAR___ICRealtimeCollaborationSelectionController__groupSession];
  v45[0] = 0;
  v12 = v3;
  v13 = sub_100012E18(&qword_1005D4A28);
  Published.init(initialValue:)(v45, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v10, v7);
  *(_QWORD *)&v12[OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipantsObservation] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipants] = &_swiftEmptySetSingleton;
  v12[OBJC_IVAR___ICRealtimeCollaborationSelectionController_didScheduleCollaboratorStatusesUpdate] = 0;
  swift_unknownObjectUnownedInit(&v12[OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController], a1);
  swift_unknownObjectUnownedInit(&v12[OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController], a2);

  v46.receiver = v12;
  v46.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v46, "init");
  v15 = (void *)objc_opt_self(NSNotificationCenter);
  v16 = v14;
  v17 = objc_msgSend(v15, "defaultCenter");
  v18 = qword_1005CEBE0;
  v19 = v16;
  if (v18 != -1)
    swift_once(&qword_1005CEBE0, sub_1002A579C);
  objc_msgSend(v17, "addObserver:selector:name:object:", v19, "realtimeCollaborationControllerGroupActivityDidChange:", qword_100601AC0, a2);

  v20 = objc_msgSend(v15, "defaultCenter");
  objc_msgSend(v20, "addObserver:selector:name:object:", v19, "editorDidChangeSelection:", ICNoteEditorViewControllerSelectionDidChangeNotification, a1);

  v21 = objc_msgSend(v15, "defaultCenter");
  v22 = ICTextViewLayoutDidChangeNotification;
  v23 = v19;
  v24 = objc_msgSend(a1, "textView");
  objc_msgSend(v21, "addObserver:selector:name:object:", v23, "textViewLayoutDidChange:", v22, v24);

  v25 = objc_msgSend(v15, "defaultCenter");
  objc_msgSend(v25, "addObserver:selector:name:object:", v23, "tableScrollViewBoundsDidChange:", ICTableScrollViewBoundsDidChangeNotification, 0);

  v26 = objc_msgSend(v15, "defaultCenter");
  v27 = ICNoteDidPerformMergeNotification;
  v28 = v23;
  v29 = objc_msgSend(a1, "note");
  objc_msgSend(v26, "addObserver:selector:name:object:", v28, "noteDidPerformMerge:", v27, v29);

  v30 = objc_msgSend(v15, "defaultCenter");
  objc_msgSend(v30, "addObserver:selector:name:object:", v28, "tableAttachmentProviderDidMergeTable:", ICTableAttachmentProviderDidMergeTable, 0);

  v31 = (uint64_t *)&a2[OBJC_IVAR___ICRealtimeCollaborationController_activeSession];
  swift_beginAccess(&a2[OBJC_IVAR___ICRealtimeCollaborationController_activeSession], v45, 0, 0);
  v33 = *v31;
  if (*v31)
  {
    KeyPath = swift_getKeyPath(&unk_10045C2C0, v32);
    v36 = swift_getKeyPath(&unk_10045C2E8, v35);
    swift_retain_n(v33, 2);
    static Published.subscript.getter(&v44);
    swift_release(KeyPath);
    swift_release(v36);
    v37 = v44;
    v39 = swift_getKeyPath(&unk_10045C2C0, v38);
    v41 = swift_getKeyPath(&unk_10045C2E8, v40);
    v44 = v33;
    v42 = v28;
    swift_retain(v33);
    static Published.subscript.setter(&v44, v42, v39, v41);
    sub_10020785C(v37);

    swift_release_n(v33, 2);
    swift_release(v37);
  }
  else
  {

  }
  return v28;
}

uint64_t property wrapper backing initializer of RealtimeCollaborationSelectionController.groupSession(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = sub_100012E18(&qword_1005D4A28);
  return Published.init(initialValue:)(&v3, v1);
}

uint64_t sub_100207740(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  KeyPath = swift_getKeyPath(&unk_10045C2C0, a2);
  v6 = swift_getKeyPath(&unk_10045C2E8, v5);
  static Published.subscript.getter(&v13);
  swift_release(KeyPath);
  swift_release(v6);
  v7 = v13;
  v9 = swift_getKeyPath(&unk_10045C2C0, v8);
  v11 = swift_getKeyPath(&unk_10045C2E8, v10);
  v13 = a1;
  swift_retain(a1);
  static Published.subscript.setter(&v13, v2, v9, v11);
  sub_10020785C(v7);
  swift_release(a1);
  return swift_release(v7);
}

void sub_10020785C(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t Strong;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  os_log_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  os_log_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v2 = v1;
  v95 = a1;
  v3 = sub_100012E18(&qword_1005D4AF0);
  v91 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v90 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v89 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005D8C60);
  __chkstk_darwin(v8);
  v92 = (uint64_t)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v86 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v86 - v17;
  KeyPath = swift_getKeyPath(&unk_10045C2C0, v19);
  v22 = swift_getKeyPath(&unk_10045C2E8, v21);
  v94 = v2;
  static Published.subscript.getter(&v97);
  swift_release(KeyPath);
  v23 = swift_release(v22);
  if (!v97)
  {
LABEL_12:
    v37 = swift_getKeyPath(&unk_10045C2C0, v24);
    v39 = swift_getKeyPath(&unk_10045C2E8, v38);
    v40 = v94;
    static Published.subscript.getter(&v97);
    swift_release(v37);
    swift_release(v39);
    v41 = v97;
    swift_release(v97);
    if (!v41 && v95)
    {
      if (qword_1005CEB00 != -1)
        swift_once(&qword_1005CEB00, sub_100207178);
      v42 = type metadata accessor for Logger(0);
      sub_10012A0B0(v42, (uint64_t)qword_1005D49F0);
      v43 = v40;
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = swift_slowAlloc(22, -1);
        v47 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v46 = 138412546;
        Strong = swift_unknownObjectUnownedLoadStrong((char *)v43 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController);
        v97 = Strong;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 4);
        *v47 = Strong;
        *(_WORD *)(v46 + 12) = 2048;
        v49 = (char *)swift_unknownObjectUnownedLoadStrong((char *)v43+ OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController);
        v50 = *(_QWORD *)&v49[OBJC_IVAR___ICRealtimeCollaborationController_id];

        v97 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 14);

        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%@: SelectionController[%ld]: no group session", (uint8_t *)v46, 0x16u);
        v51 = sub_100012E18(&qword_1005D3A30);
        swift_arrayDestroy(v47, 1, v51);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }
      else
      {

        v44 = v43;
      }

      sub_100209258((uint64_t)&_swiftEmptySetSingleton);
      v84 = *(uint64_t *)((char *)&v43->isa + OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipants);
      *(Class *)((char *)&v43->isa + OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipants) = (Class)&_swiftEmptySetSingleton;
      swift_bridgeObjectRelease(v84);
      v85 = *(uint64_t *)((char *)&v43->isa
                       + OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipantsObservation);
      *(Class *)((char *)&v43->isa + OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipantsObservation) = 0;
      swift_release(v85);
      _s11MobileNotes40RealtimeCollaborationSelectionControllerC08realtimedf9DidChangeE5StateyyAA0cdF0CF_0();
    }
    return;
  }
  v25 = (uint64_t)v13;
  v88 = v3;
  v93 = v97;
  GroupSession.id.getter(v23);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v27 = 1;
  v28 = v5;
  v29 = v26(v18, 0, 1, v5);
  if (v95)
  {
    GroupSession.id.getter(v29);
    v27 = 0;
  }
  v26(v16, v27, 1, v5);
  v30 = v92;
  v31 = v92 + *(int *)(v8 + 48);
  sub_10020DBD4((uint64_t)v18, v92);
  sub_10020DBD4((uint64_t)v16, v31);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v32(v30, 1, v5) == 1)
  {
    sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D06A0);
    sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D06A0);
    if (v32(v31, 1, v5) == 1)
    {
      sub_100012DDC(v30, (uint64_t *)&unk_1005D06A0);
LABEL_11:
      swift_release(v93);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  sub_10020DBD4(v30, v25);
  if (v32(v31, 1, v5) == 1)
  {
    sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D06A0);
    sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D06A0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v25, v5);
LABEL_9:
    sub_100012DDC(v30, (uint64_t *)&unk_1005D8C60);
    goto LABEL_18;
  }
  v33 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v89, v31, v5);
  v34 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)(v25, v33, v5, v34);
  v36 = *(void (**)(char *, uint64_t))(v6 + 8);
  v36(v33, v5);
  sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D06A0);
  sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D06A0);
  v36((char *)v25, v5);
  sub_100012DDC(v30, (uint64_t *)&unk_1005D06A0);
  if ((v35 & 1) != 0)
    goto LABEL_11;
LABEL_18:
  v53 = v93;
  v52 = v94;
  if (qword_1005CEB00 != -1)
    swift_once(&qword_1005CEB00, sub_100207178);
  v54 = type metadata accessor for Logger(0);
  sub_10012A0B0(v54, (uint64_t)qword_1005D49F0);
  v55 = v52;
  v56 = swift_retain_n(v53, 2);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.info.getter();
  v59 = v58;
  if (os_log_type_enabled(v57, v58))
  {
    v60 = swift_slowAlloc(32, -1);
    v94 = v57;
    v61 = v60;
    v62 = (uint64_t *)swift_slowAlloc(8, -1);
    v87 = v62;
    v95 = swift_slowAlloc(32, -1);
    v97 = v95;
    *(_DWORD *)v61 = 138412802;
    LODWORD(v92) = v59;
    v63 = swift_unknownObjectUnownedLoadStrong((char *)v55 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController);
    v96 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v61 + 4);
    *v62 = v63;
    *(_WORD *)(v61 + 12) = 2048;
    v64 = (char *)swift_unknownObjectUnownedLoadStrong((char *)v55 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController);
    v65 = *(_QWORD *)&v64[OBJC_IVAR___ICRealtimeCollaborationController_id];

    v96 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v61 + 14);

    *(_WORD *)(v61 + 22) = 2080;
    v66 = v6;
    v67 = v89;
    GroupSession.id.getter(v68);
    v69 = sub_100019C6C(&qword_1005D4B00, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v70 = dispatch thunk of CustomStringConvertible.description.getter(v28, v69);
    v72 = v71;
    v53 = v93;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v28);
    v96 = sub_1003A4190(v70, v72, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v61 + 24);
    swift_release_n(v53, 2);
    swift_bridgeObjectRelease(v72);
    v73 = v94;
    _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v92, "%@: SelectionController[%ld]: received group session %s", (uint8_t *)v61, 0x20u);
    v74 = sub_100012E18(&qword_1005D3A30);
    v75 = v87;
    swift_arrayDestroy(v87, 1, v74);
    swift_slowDealloc(v75, -1, -1);
    v76 = v95;
    swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v61, -1, -1);

  }
  else
  {

    swift_release_n(v53, 2);
  }
  v78 = v90;
  v77 = v91;
  GroupSession.$activeParticipants.getter();
  v79 = swift_allocObject(&unk_10055F3B0, 24, 7);
  swift_unknownObjectWeakInit(v79 + 16, v55);
  v80 = sub_100016638(&qword_1005D4AF8, &qword_1005D4AF0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v81 = v88;
  v82 = Publisher<>.sink(receiveValue:)(sub_10020DC40, v79, v88, v80);
  swift_release(v79);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v81);
  v83 = *(uint64_t *)((char *)&v55->isa
                   + OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipantsObservation);
  *(Class *)((char *)&v55->isa + OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipantsObservation) = (Class)v82;
  swift_release(v83);
  _s11MobileNotes40RealtimeCollaborationSelectionControllerC08realtimedf9DidChangeE5StateyyAA0cdF0CF_0();
  swift_release(v53);
}

uint64_t sub_1002081B8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10045C2C0, a2);
  v4 = swift_getKeyPath(&unk_10045C2E8, v3);
  static Published.subscript.getter(&v6);
  swift_release(KeyPath);
  swift_release(v4);
  return v6;
}

uint64_t sub_100208228(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (char *)result;
    swift_bridgeObjectRetain(v2);
    sub_100209258(v6);
    v7 = *(_QWORD *)&v5[OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipants];
    *(_QWORD *)&v5[OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipants] = v2;

    return swift_bridgeObjectRelease(v7);
  }
  return result;
}

void _s11MobileNotes40RealtimeCollaborationSelectionControllerC08realtimedf9DidChangeE5StateyyAA0cdF0CF_0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void *Strong;
  void *v31;
  id v32;
  void *v33;
  unsigned __int8 v34;
  void *v35;
  id v36;
  unsigned int v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  __n128 v69;
  void (*v70)(_QWORD *, _QWORD);
  unint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  void (*v91)(_QWORD *, _QWORD);
  unint64_t *v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __n128 v98;
  void (*v99)(_QWORD *, _QWORD);
  _QWORD v100[2];
  uint64_t v101;
  unint64_t v102;
  char *v103;
  unsigned int (*v104)(char *, uint64_t, uint64_t);
  void (*v105)(char *, uint64_t, uint64_t, uint64_t);
  void (*v106)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v107)(char *, uint64_t, uint64_t);
  id v108;
  void (*v109)(char *, char *, uint64_t);
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  _QWORD v119[6];

  v1 = v0;
  v2 = type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0);
  v116 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v114 = (char *)v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005D4A48);
  v5 = __chkstk_darwin(v4);
  v110 = (char *)v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v113 = (char *)v100 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v100 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)v100 - v12;
  v14 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v15 = __chkstk_darwin(v14);
  v112 = (char *)v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v100 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)v100 - v20;
  v22 = type metadata accessor for UUID(0);
  v117 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v115 = (char *)v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)v100 - v26;
  __chkstk_darwin(v25);
  v111 = (char *)v100 - v28;
  v29 = &v0[OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController];
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v0[OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController]);
  v118 = objc_msgSend(Strong, "authorHighlightsUpdater");

  if (!v118)
    return;
  if ((AuthorHighlightsUpdater.showsCollaboratorStatuses.getter() & 1) == 0
    || (v103 = v1,
        v31 = (void *)swift_unknownObjectUnownedLoadStrong(v29),
        v32 = objc_msgSend(v31, "note"),
        v31,
        !v32)
    || (v108 = objc_msgSend(v32, "textStorage"), v32, !v108))
  {
LABEL_10:

    return;
  }
  v33 = (void *)AuthorHighlightsUpdater.authorHighlightsController.getter();
  v34 = objc_msgSend(v33, "isPerformingHighlightUpdatesForTextStorage:", v108);

  if ((v34 & 1) != 0)
  {

    return;
  }
  v35 = (void *)swift_unknownObjectUnownedLoadStrong(v29);
  v36 = objc_msgSend(v35, "textView");

  if (v36)
  {
    v37 = objc_msgSend(v36, "isPerformingHighlightUpdates");

    if (v37)
    {

      goto LABEL_10;
    }
  }
  v38 = &v103[OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController];
  v39 = (char *)swift_unknownObjectUnownedLoadStrong(&v103[OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController]);
  v40 = *(void **)&v39[OBJC_IVAR___ICRealtimeCollaborationController_selectionDocument];
  if (v40)
  {
    v41 = v40;
    RealtimeCollaborationSelectionDocument.localParticipantID.getter();

    v42 = v117;
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56);
    v44 = v21;
    v45 = 0;
  }
  else
  {
    v42 = v117;
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56);
    v44 = v21;
    v45 = 1;
  }
  v106 = v43;
  v43(v44, v45, 1, v22);

  v107 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v107(v21, 1, v22) == 1)
  {
    sub_100012DDC((uint64_t)v21, (uint64_t *)&unk_1005D06A0);
LABEL_44:
    AuthorHighlightsUpdater.collaboratorStatuses.setter(_swiftEmptyArrayStorage);
    AuthorHighlightsUpdater.scheduleUpdate(animated:)(0);

    return;
  }
  v46 = v42;
  v47 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  v48 = v111;
  v109 = v47;
  v47(v111, v21, v22);
  v49 = (char *)swift_unknownObjectUnownedLoadStrong(v38);
  v50 = v49;
  v51 = *(void **)&v49[OBJC_IVAR___ICRealtimeCollaborationController_selectionDocument];
  if (!v51)
  {

    (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v22);
    goto LABEL_44;
  }
  v52 = v51;
  v53 = RealtimeCollaborationSelectionDocument.selections.getter();

  if (!*(_QWORD *)(v53 + 16))
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v111, v22);
    swift_bridgeObjectRelease(v53);
    goto LABEL_44;
  }
  v102 = *(_QWORD *)(v53 + 16);
  __chkstk_darwin(v54);
  v55 = v108;
  v100[-2] = v111;
  v100[-1] = v55;
  v57 = v56;
  swift_bridgeObjectRetain(v56);
  v101 = sub_100206F68(sub_10020DB54, (uint64_t)&v100[-4], v57);
  v100[1] = 0;
  v58 = v57;
  v59 = *(_QWORD *)(v57 + 16);
  v100[0] = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v60 = 0;
  v119[0] = Set.init(minimumCapacity:)(v59, v22, v100[0]);
  while (1)
  {
    v61 = v102;
    v62 = v116;
    if (v60 == v102)
    {
      v105 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v105(v13, 1, 1, v2);
      v60 = v61;
    }
    else
    {
      if (v60 >= *(_QWORD *)(v58 + 16))
      {
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v116 + 16))(v13, v58+ ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))+ *(_QWORD *)(v116 + 72) * v60++, v2);
      v105 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
      v105(v13, 0, 1, v2);
    }
    sub_10020DB70((uint64_t)v13, (uint64_t)v11);
    v104 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
    if (v104(v11, 1, v2) == 1)
    {
      v63 = v19;
      v64 = 1;
    }
    else
    {
      v65 = v114;
      v66 = (*(uint64_t (**)(char *, char *, uint64_t))(v62 + 32))(v114, v11, v2);
      RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter(v66);
      v109(v19, v27, v22);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v2);
      v63 = v19;
      v64 = 0;
    }
    v106(v63, v64, 1, v22);
    if (v107(v19, 1, v22) == 1)
      break;
    v67 = v115;
    v109(v115, v19, v22);
    sub_100302E74((uint64_t)v27, v67);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v27, v22);
  }
  swift_bridgeObjectRelease(v58);
  v68 = (_QWORD *)v119[0];
  v69 = swift_bridgeObjectRetain(v119[0]);
  v70 = (void (*)(_QWORD *, _QWORD))AuthorHighlightsUpdater.collaboratorStatuses.modify(v119, v69);
  v72 = v71;
  v73 = sub_10020C6AC(v71, v68);
  swift_bridgeObjectRelease(v68);
  v74 = *(_QWORD *)(*v72 + 16);
  if (v74 < v73)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  sub_10026D924(v73, v74);
  v70(v119, 0);
  swift_bridgeObjectRelease(v68);
  v75 = v101;
  v76 = *(_QWORD *)(v101 + 16);
  swift_bridgeObjectRetain(v101);
  v77 = 0;
  v119[0] = Set.init(minimumCapacity:)(v76, v22, v100[0]);
  v78 = *(_QWORD *)(v75 + 16);
  v79 = (uint64_t)v110;
  while (1)
  {
    v80 = (uint64_t)v113;
    if (v77 == v78)
    {
      v105(v113, 1, 1, v2);
      v77 = v78;
    }
    else
    {
      if (v77 >= *(_QWORD *)(v101 + 16))
        goto LABEL_47;
      (*(void (**)(char *, unint64_t, uint64_t))(v116 + 16))(v113, v101+ ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))+ *(_QWORD *)(v116 + 72) * v77++, v2);
      v105((char *)v80, 0, 1, v2);
    }
    sub_10020DB70(v80, v79);
    if (v104((char *)v79, 1, v2) == 1)
    {
      v81 = v112;
      v82 = v112;
      v83 = 1;
    }
    else
    {
      v84 = v116;
      v85 = v114;
      v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32))(v114, v79, v2);
      RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter(v86);
      v81 = v112;
      v109(v112, v27, v22);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v2);
      v82 = v81;
      v83 = 0;
    }
    v106(v82, v83, 1, v22);
    if (v107(v81, 1, v22) == 1)
      break;
    v87 = v115;
    v109(v115, v81, v22);
    sub_100302E74((uint64_t)v27, v87);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v27, v22);
  }
  v88 = v101;
  swift_bridgeObjectRelease(v101);
  v89 = v119[0];
  v90 = swift_bridgeObjectRetain(v119[0]);
  v91 = (void (*)(_QWORD *, _QWORD))AuthorHighlightsUpdater.collaboratorStatuses.modify(v119, v90);
  v93 = v92;
  v94 = sub_10020CCDC(v92, v89);
  swift_bridgeObjectRelease(v89);
  v95 = *(_QWORD *)(*v93 + 16);
  if (v95 >= v94)
  {
    sub_10026D924(v94, v95);
    v91(v119, 0);
    swift_bridgeObjectRelease(v89);
    v96 = v103;
    v97 = sub_10020B8A8(v88, (uint64_t)v96);
    swift_bridgeObjectRelease(v88);

    v99 = (void (*)(_QWORD *, _QWORD))AuthorHighlightsUpdater.collaboratorStatuses.modify(v119, v98);
    sub_1001D8D34((uint64_t)v97);
    v99(v119, 0);
    AuthorHighlightsUpdater.update(animated:)(0);

    (*(void (**)(char *, uint64_t))(v117 + 8))(v111, v22);
    return;
  }
LABEL_49:
  __break(1u);
}

uint64_t sub_100208CC4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_10045C2C0, a1);
  v5 = swift_getKeyPath(&unk_10045C2E8, v4);
  static Published.subscript.getter(&v7);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100208D40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *Strong;
  id v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v3 = sub_100012E18(&qword_1005D4AA0);
  __chkstk_darwin(v3);
  v66 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for RealtimeCollaborationSelectionDocument.TableSelection(0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v63 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005D4AA8);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for ICTTMergeableString.Location(0);
  v9 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v64 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100012E18(&qword_1005D4AB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ICTTMergeableString.Selection(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(v18);
  v20 = objc_msgSend(Strong, "textView");

  if (!v20)
  {
    v26 = type metadata accessor for RealtimeCollaborationSelectionDocument.Selection(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a1, 1, 1, v26);
  }
  v21 = a1;
  if (objc_msgSend(v20, "isFirstResponder"))
  {
    ICTextView.selection.getter();

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {
      v22 = &qword_1005D4AB0;
      v23 = (uint64_t)v13;
LABEL_5:
      sub_100012DDC(v23, v22);
LABEL_6:
      v24 = type metadata accessor for RealtimeCollaborationSelectionDocument.Selection(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v21, 1, 1, v24);
    }
    v38 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v38(v17, v13, v14);
    v40 = swift_allocBox(v14, v39);
    v38(v41, v17, v14);
    *a1 = v40;
    v42 = (unsigned int *)&enum case for RealtimeCollaborationSelectionDocument.Selection.text(_:);
LABEL_15:
    v43 = *v42;
    v44 = type metadata accessor for RealtimeCollaborationSelectionDocument.Selection(0);
    v45 = *(_QWORD *)(v44 - 8);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v45 + 104))(v21, v43, v44);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v21, 0, 1, v44);
  }
  v27 = (void *)swift_unknownObjectUnownedLoadStrong(v18);
  v28 = objc_msgSend(v27, "auxiliaryResponder");

  if (v28)
  {
    v29 = (void *)swift_unknownObjectUnownedLoadStrong(v18);
    v30 = objc_msgSend(v29, "auxiliaryStylingController");

    if (v30)
    {
      v31 = objc_opt_self(ICTableAttachmentViewController);
      v32 = (void *)swift_dynamicCastObjCClass(v30, v31);
      if (v32)
      {
        v34 = objc_msgSend(v32, "attachment");
        if (!v34)
        {

          swift_unknownObjectRelease(v30, v47);
          goto LABEL_6;
        }
        v35 = v34;
        ICBaseTextView.location(for:)();
        v36 = v68;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v68) == 1)
        {

          swift_unknownObjectRelease(v30, v37);
          v22 = &qword_1005D4AA8;
          v23 = (uint64_t)v8;
          goto LABEL_5;
        }
        v48 = v64;
        v62 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 32);
        v49 = v62(v64, v8, v36);
        v50 = v66;
        ICTableAttachmentViewController.collaborationSelection.getter(v49);

        swift_unknownObjectRelease(v30, v51);
        v52 = v65;
        v53 = v67;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v50, 1, v67) == 1)
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v48, v68);
          v22 = &qword_1005D4AA0;
          v23 = (uint64_t)v50;
          goto LABEL_5;
        }
        v54 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
        v55 = v63;
        v54(v63, v50, v53);
        v56 = sub_100012E18(&qword_1005D4AB8);
        v58 = swift_allocBox(v56, v57);
        v60 = &v59[*(int *)(v56 + 48)];
        v62(v59, v48, v68);
        v54(v60, v55, v53);
        *v21 = v58;
        v42 = (unsigned int *)&enum case for RealtimeCollaborationSelectionDocument.Selection.table(_:);
        goto LABEL_15;
      }
      swift_unknownObjectRelease(v30, v33);
    }
  }

  v46 = type metadata accessor for RealtimeCollaborationSelectionDocument.Selection(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(a1, 1, 1, v46);
}

void sub_100209258(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t p_inst_meths;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint8_t *v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint8_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  os_log_t v46;
  uint64_t v47;
  void *Strong;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  int v53;
  uint8_t *v54;
  _QWORD *v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  void (*v76)(char *, unint64_t, uint64_t, __n128);
  __n128 v77;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v79;
  void *v80;
  id v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  os_log_t v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint8_t *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  _BYTE v105[16];
  uint64_t v106[2];

  v2 = v1;
  v4 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D4A98);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = type metadata accessor for Participant(0);
  v10 = *(_QWORD *)(v101 - 8);
  v11 = __chkstk_darwin(v101);
  v100 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v99 = (char *)&v87 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v97 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v98 = (char *)&v87 - v19;
  __chkstk_darwin(v18);
  v102 = (char *)&v87 - v20;
  v94 = OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipants;
  v21 = *(_QWORD *)(v1 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_activeParticipants);
  if (*(_QWORD *)(v21 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
  {
    v106[0] = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v21);
    sub_1003CB698(v24);
    swift_bridgeObjectRelease(v21);
    v23 = (char *)v106[0];
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v21);
    v23 = (char *)sub_1003CBE4C(v22, a1);
    swift_bridgeObjectRelease(v21);
  }
  v25 = *((_QWORD *)v23 + 2);
  p_inst_meths = (uint64_t)&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v103 = v14;
  v95 = v1;
  if (!v25)
  {
    swift_bridgeObjectRelease(v23);
    goto LABEL_23;
  }
  if (qword_1005CEB00 != -1)
    goto LABEL_59;
  while (1)
  {
    v27 = type metadata accessor for Logger(0);
    sub_10012A0B0(v27, (uint64_t)qword_1005D49F0);
    swift_bridgeObjectRetain(v23);
    v29 = Logger.logObject.getter(v28);
    LODWORD(v92) = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v92))
    {
      v90 = v29;
      v91 = v9;
      v93 = v6;
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = swift_slowAlloc(32, -1);
      v106[0] = v88;
      v89 = v30;
      *(_DWORD *)v30 = 136315138;
      v9 = (uint64_t *)*((_QWORD *)v23 + 2);
      v31 = _swiftEmptyArrayStorage;
      if (v9)
      {
        v87 = a1;
        v104 = _swiftEmptyArrayStorage;
        sub_1001371B0(0, (int64_t)v9, 0);
        a1 = sub_100242C1C(v23);
        p_inst_meths = v32;
        v6 = (char *)(v33 & 1);
        v96 = (uint8_t *)(v23 + 56);
        while ((a1 & 0x8000000000000000) == 0 && a1 < 1 << v23[32])
        {
          if (((*(_QWORD *)&v96[((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8] >> a1) & 1) == 0)
            goto LABEL_54;
          if (*((_DWORD *)v23 + 9) != (_DWORD)p_inst_meths)
            goto LABEL_55;
          v34 = v99;
          v35 = v101;
          (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v99, *((_QWORD *)v23 + 6) + *(_QWORD *)(v10 + 72) * a1, v101);
          v36 = v100;
          v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v100, v34, v35);
          Participant.id.getter(v37);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v36, v35);
          v31 = v104;
          if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
          {
            sub_1001371B0(0, v31[2] + 1, 1);
            v31 = v104;
          }
          v2 = v31[2];
          v38 = v31[3];
          if (v2 >= v38 >> 1)
          {
            sub_1001371B0(v38 > 1, v2 + 1, 1);
            v31 = v104;
          }
          v31[2] = v2 + 1;
          v14 = v103;
          (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))((unint64_t)v31+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v2, v102, v103);
          v104 = v31;
          v39 = sub_1003CCBC0(a1, p_inst_meths, v6 & 1, v23);
          a1 = v39;
          p_inst_meths = v40;
          v6 = (char *)(v41 & 1);
          v9 = (uint64_t *)((char *)v9 - 1);
          if (!v9)
          {
            sub_1001EDA28(v39, v40, v41 & 1);
            a1 = v87;
            goto LABEL_21;
          }
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_21:
      v42 = v89;
      v43 = Array.description.getter(v31, v14);
      v45 = v44;
      swift_bridgeObjectRelease(v31);
      v104 = (_QWORD *)sub_1003A4190(v43, v45, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v42 + 4);
      swift_bridgeObjectRelease_n(v23, 2);
      swift_bridgeObjectRelease(v45);
      v46 = v90;
      _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v92, "Posting full local selection for added participants {participantIDs: %s}", v42, 0xCu);
      v47 = v88;
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      v6 = v93;
      v9 = v91;
      p_inst_meths = (uint64_t)&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
      v2 = v95;
    }
    else
    {

      swift_bridgeObjectRelease_n(v23, 2);
    }
    Strong = (void *)swift_unknownObjectUnownedLoadStrong(v2 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController);
    sub_100208D40(v9);
    RealtimeCollaborationController.postLocalSelection(_:asDelta:)((unint64_t)v9, 0);

    sub_100012DDC((uint64_t)v9, &qword_1005D4A98);
LABEL_23:
    v49 = *(_QWORD *)(v2 + v94);
    if (*(_QWORD *)(a1 + 16) <= *(_QWORD *)(v49 + 16) >> 3)
    {
      v106[0] = *(_QWORD *)(v2 + v94);
      swift_bridgeObjectRetain(v49);
      sub_1003CB698(a1);
      v23 = (char *)v106[0];
      if (!*(_QWORD *)(v106[0] + 16))
      {
LABEL_41:
        swift_bridgeObjectRelease(v23);
        return;
      }
    }
    else
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v2 + v94));
      v23 = (char *)sub_1003CBE4C(a1, v49);
      if (!*((_QWORD *)v23 + 2))
        goto LABEL_41;
    }
    if (*(_QWORD *)(p_inst_meths + 2816) != -1)
      swift_once(&qword_1005CEB00, sub_100207178);
    v50 = type metadata accessor for Logger(0);
    sub_10012A0B0(v50, (uint64_t)qword_1005D49F0);
    v51 = swift_bridgeObjectRetain_n(v23, 2);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v52, (os_log_type_t)v53))
    {

      swift_bridgeObjectRelease_n(v23, 2);
      goto LABEL_44;
    }
    LODWORD(v94) = v53;
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v92 = swift_slowAlloc(32, -1);
    v106[0] = v92;
    v96 = v54;
    *(_DWORD *)v54 = 136315138;
    v9 = (uint64_t *)*((_QWORD *)v23 + 2);
    v55 = _swiftEmptyArrayStorage;
    if (!v9)
      break;
    v91 = (uint64_t *)v52;
    v93 = v6;
    v104 = _swiftEmptyArrayStorage;
    sub_1001371B0(0, (int64_t)v9, 0);
    p_inst_meths = sub_100242C1C(v23);
    a1 = v56;
    v6 = (char *)(v57 & 1);
    v102 = v23 + 56;
    while ((p_inst_meths & 0x8000000000000000) == 0 && p_inst_meths < 1 << v23[32])
    {
      if (((*(_QWORD *)&v102[((unint64_t)p_inst_meths >> 3) & 0xFFFFFFFFFFFFF8] >> p_inst_meths) & 1) == 0)
        goto LABEL_57;
      if (*((_DWORD *)v23 + 9) != (_DWORD)a1)
        goto LABEL_58;
      v58 = v99;
      v59 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v99, *((_QWORD *)v23 + 6) + *(_QWORD *)(v10 + 72) * p_inst_meths, v101);
      v60 = v100;
      v61 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v100, v58, v59);
      Participant.id.getter(v61);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v60, v59);
      v55 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
      {
        sub_1001371B0(0, v55[2] + 1, 1);
        v55 = v104;
      }
      v2 = v55[2];
      v62 = v55[3];
      if (v2 >= v62 >> 1)
      {
        sub_1001371B0(v62 > 1, v2 + 1, 1);
        v55 = v104;
      }
      v55[2] = v2 + 1;
      v14 = v103;
      (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))((unint64_t)v55+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v2, v98, v103);
      v104 = v55;
      v63 = sub_1003CCBC0(p_inst_meths, a1, v6 & 1, v23);
      p_inst_meths = v63;
      a1 = v64;
      v6 = (char *)(v65 & 1);
      v9 = (uint64_t *)((char *)v9 - 1);
      if (!v9)
      {
        sub_1001EDA28(v63, v64, v65 & 1);
        v6 = v93;
        v52 = v91;
        goto LABEL_43;
      }
    }
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    swift_once(&qword_1005CEB00, sub_100207178);
  }
LABEL_43:
  v66 = v96;
  v67 = Array.description.getter(v55, v14);
  v69 = v68;
  swift_bridgeObjectRelease(v55);
  v104 = (_QWORD *)sub_1003A4190(v67, v69, v106);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v66 + 4);
  swift_bridgeObjectRelease_n(v23, 2);
  swift_bridgeObjectRelease(v69);
  _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v94, "Removing selections for removed participants {participantIDs: %s}", v66, 0xCu);
  v70 = v92;
  swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v70, -1, -1);
  swift_slowDealloc(v66, -1, -1);

LABEL_44:
  v71 = sub_1002063A0((uint64_t)v23);
  swift_bridgeObjectRelease(v23);
  v72 = *(_QWORD *)(v71 + 16);
  v73 = v97;
  v100 = (char *)v71;
  if (v72)
  {
    v74 = v71 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v102 = (char *)(v95 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController);
    v101 = *(_QWORD *)(v15 + 72);
    v75 = v71;
    v76 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16);
    v77 = swift_bridgeObjectRetain(v75);
    while (1)
    {
      v76(v6, v74, v14, v77);
      v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v78)(v6, 0, 1, v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v73, v6, v14);
      v79 = (char *)swift_unknownObjectUnownedLoadStrong(v102);
      v80 = *(void **)&v79[OBJC_IVAR___ICRealtimeCollaborationController_selectionDocument];
      if (v80)
      {
        v81 = v80;
        v82 = RealtimeCollaborationSelectionDocument.removeSelection(forParticipantID:)(v97);
        v83 = v6;
        v85 = v84;

        v73 = v97;
        v86 = v85;
        v6 = v83;
        v14 = v103;
        sub_1001672D8(v82, v86);
      }

      (*(void (**)(char *, uint64_t))(v15 + 8))(v73, v14);
      v74 += v101;
      if (!--v72)
        goto LABEL_51;
    }
  }
  else
  {
    v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56);
    v77 = swift_bridgeObjectRetain(v71);
LABEL_51:
    v78(v6, 1, 1, v14, v77);
  }
  swift_bridgeObjectRelease_n(v100, 2);
  _s11MobileNotes40RealtimeCollaborationSelectionControllerC08realtimedf9DidChangeE5StateyyAA0cdF0CF_0();
}

uint64_t sub_100209D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char *v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a3;
  v26 = a2;
  v4 = type metadata accessor for RealtimeCollaborationSelectionDocument.Selection(0);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  __chkstk_darwin(v4);
  v22 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter(v12);
  v15 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v26, v10, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  if ((v16 & 1) != 0)
  {
    v18 = 0;
  }
  else
  {
    v19 = v22;
    RealtimeCollaborationSelectionDocument.ParticipantSelection.selection.getter(v17);
    v18 = ICTTTextStorage.canResolve(_:)(v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v24);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v18 & 1;
}

uint64_t sub_100209ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *Strong;
  id v29;
  NSString v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for RealtimeCollaborationSelectionDocument.Selection(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005D4AE8);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10045C2C0, v15);
  v18 = swift_getKeyPath(&unk_10045C2E8, v17);
  static Published.subscript.getter(&v49);
  swift_release(KeyPath);
  v19 = swift_release(v18);
  v20 = v49;
  if (v49)
  {
    v48 = v8;
    v21 = GroupSession.activeParticipants.getter(v19);
    v22 = swift_release(v20);
    __chkstk_darwin(v22);
    *(&v47 - 2) = a1;
    sub_100206A18((uint64_t (*)(char *))sub_10020DBB8, v21, v14);
    swift_bridgeObjectRelease(v21);
    v23 = type metadata accessor for Participant(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1, v23) == 1)
    {
      sub_100012DDC((uint64_t)v14, &qword_1005D4AE8);
    }
    else
    {
      Participant.handle.getter();
      v26 = v25;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v23);
      v27 = v3 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController;
      Strong = (void *)swift_unknownObjectUnownedLoadStrong(v3 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController);
      v29 = objc_msgSend(Strong, "note");

      if (v29)
      {
        v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v26);
        v31 = objc_msgSend(v29, "participantForHandle:", v30);

        v32 = v48;
        if (v31)
        {
          v33 = objc_msgSend(v31, "userIdentity");
          v34 = objc_msgSend(v33, "userRecordID");

          if (v34)
          {
            v35 = objc_msgSend(v34, "recordName");

            static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
            v37 = v36;

            v38 = (void *)swift_unknownObjectUnownedLoadStrong(v27);
            v39 = objc_msgSend(v38, "authorHighlightsController");

            if (v39)
            {
              v40 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v37);
              v41 = objc_msgSend(v39, "highlightColorForUserID:", v40);

              if (v41)
              {
                v43 = RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter(v42);
                RealtimeCollaborationSelectionDocument.ParticipantSelection.selection.getter(v43);
                CollaboratorStatus.init(participantID:participant:color:selection:)(v11, v31, v41, v32);
                v44 = type metadata accessor for CollaboratorStatus(0);
                return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(a2, 0, 1, v44);
              }
            }
            else
            {
              swift_bridgeObjectRelease(v37);
            }
          }

        }
      }
      else
      {
        swift_bridgeObjectRelease(v26);
      }
    }
  }
  v46 = type metadata accessor for CollaboratorStatus(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(a2, 1, 1, v46);
}

void sub_10020A2B8()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *Strong;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR___ICRealtimeCollaborationSelectionController_didScheduleCollaboratorStatusesUpdate;
  if ((v0[OBJC_IVAR___ICRealtimeCollaborationSelectionController_didScheduleCollaboratorStatusesUpdate] & 1) == 0)
  {
    Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v0[OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController]);
    v12 = objc_msgSend(Strong, "authorHighlightsUpdater");

    if (v12)
    {
      v13 = AuthorHighlightsUpdater.didScheduleUpdate.getter();

      if ((v13 & 1) == 0 && (v1[v10] & 1) == 0)
      {
        v1[v10] = 1;
        v14 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
        v21 = static OS_dispatch_queue.main.getter(v14);
        v15 = swift_allocObject(&unk_10055F310, 24, 7);
        *(_QWORD *)(v15 + 16) = v1;
        aBlock[4] = sub_10020DAB8;
        v24 = v15;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100206734;
        aBlock[3] = &unk_10055F328;
        v16 = _Block_copy(aBlock);
        static DispatchQoS.unspecified.getter(v1);
        v22 = _swiftEmptyArrayStorage;
        v17 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v18 = sub_100012E18((uint64_t *)&unk_1005D8530);
        v19 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v2, v17);
        v20 = (void *)v21;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v16);
        _Block_release(v16);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        swift_release(v24);
      }
    }
  }
}

uint64_t sub_10020A520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  void (*v10)(char *, uint64_t);
  _QWORD v12[2];

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)v12 - v6;
  v8 = Participant.id.getter(v5);
  RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter(v8);
  v9 = static UUID.== infix(_:_:)(v7, v4);
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v7, v0);
  return v9 & 1;
}

Swift::Void __swiftcall RealtimeCollaborationSelectionController.showSelection(for:)(CKShareParticipant a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *Strong;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  void (*v57)(char *, char *, uint64_t);
  Swift::Int location;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  Swift::Int length;
  char *v65;
  _QWORD aBlock[5];
  uint64_t v67;
  __C::_NSRange_optional v68;

  v2 = v1;
  length = type metadata accessor for RealtimeCollaborationSelectionDocument.Selection(0);
  v4 = *(_QWORD *)(length - 8);
  __chkstk_darwin(length);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D4A48);
  __chkstk_darwin(v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v63 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v65 = (char *)&v57 - v14;
  KeyPath = swift_getKeyPath(&unk_10045C2C0, v15);
  v18 = swift_getKeyPath(&unk_10045C2E8, v17);
  static Published.subscript.getter(aBlock);
  swift_release(KeyPath);
  swift_release(v18);
  v19 = aBlock[0];
  if (aBlock[0])
  {
    v61 = (id)(v2 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController);
    v62 = v11;
    Strong = (void *)swift_unknownObjectUnownedLoadStrong(v2 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_editorController);
    v21 = objc_msgSend(Strong, "note");

    if (v21)
    {
      v22 = objc_msgSend(v21, "textStorage");

      if (v22)
      {
        v23 = -[objc_class userIdentity](a1.super.isa, "userIdentity");
        v24 = objc_msgSend(v23, "lookupInfo");

        if (!v24)
        {
          swift_release(v19);

          return;
        }
        location = v4;
        v59 = v10;
        v60 = v22;
        v26 = GroupSession.activeParticipants.getter(v25);
        v27 = v24;
        v28 = sub_10020D6F0(v26, v27);

        v29 = sub_1002063A0(v28);
        swift_release(v28);
        v30 = sub_10020BC0C(v29);
        swift_bridgeObjectRelease(v29);
        v31 = (char *)swift_unknownObjectUnownedLoadStrong(v2 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_realtimeCollaborationController);
        v32 = *(void **)&v31[OBJC_IVAR___ICRealtimeCollaborationController_selectionDocument];
        if (!v32)
        {
          swift_bridgeObjectRelease(v30);

          swift_release(v19);
          return;
        }
        v33 = v32;
        v34 = RealtimeCollaborationSelectionDocument.selections.getter();

        swift_bridgeObjectRetain(v30);
        sub_10020AB34(v34, v30, (uint64_t)v9);
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(v30);
        v35 = v62;
        v36 = v59;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v9, 1, v59) == 1)
        {

          swift_release(v19);
          sub_100012DDC((uint64_t)v9, &qword_1005D4A48);
          return;
        }
        v37 = v65;
        v57 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        v57(v65, v9, v36);
        v38 = (void *)swift_unknownObjectUnownedLoadStrong(v61);
        v39 = objc_msgSend(v38, "textView");

        if (v39)
        {
          v61 = v39;
          RealtimeCollaborationSelectionDocument.ParticipantSelection.selection.getter(v40);
          v41 = v60;
          v42 = ICTTTextStorage.resolvedSelections(_:)(v6);
          (*(void (**)(char *, Swift::Int))(location + 8))(v6, length);
          v43 = sub_100206638(v42);
          swift_bridgeObjectRelease(v42);
          v68 = _NSRange.init(union:)((Swift::OpaquePointer)v43);
          v44 = v37;
          if (!v68.is_nil)
          {
            v46 = v62;
            v45 = v63;
            v47 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
            location = v68.value.location;
            length = v68.value.length;
            v47(v63, v44, v36);
            v48 = *(unsigned __int8 *)(v46 + 80);
            v49 = (v48 + 24) & ~v48;
            v50 = swift_allocObject(&unk_10055F270, v49 + v12, v48 | 7);
            v51 = v36;
            v52 = v50;
            v53 = v61;
            *(_QWORD *)(v50 + 16) = v61;
            v57((char *)(v50 + v49), v45, v51);
            aBlock[4] = sub_10020D910;
            v67 = v52;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_100206734;
            aBlock[3] = &unk_10055F288;
            v54 = _Block_copy(aBlock);
            v55 = v67;
            v56 = v53;
            swift_release(v55);
            objc_msgSend(v56, "ic_scrollRangeToVisible:animated:completionHandler:", location, length, 1, v54);

            swift_release(v19);
            _Block_release(v54);

            (*(void (**)(char *, uint64_t))(v46 + 8))(v44, v51);
            return;
          }
          (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v36);

        }
        else
        {
          (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);

        }
      }
    }
    swift_release(v19);
  }
}

uint64_t sub_10020AB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;

  v34 = a3;
  v5 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0);
    v13 = *(_QWORD *)(v12 - 8);
    v37 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v39 = a2 + 56;
    v32 = v13;
    v33 = v12;
    v36 = *(_QWORD *)(v13 + 72);
    v41 = v10;
    while (1)
    {
      v38 = v11 - 1;
      v35 = v37 + v36 * (v11 - 1);
      RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter(v12);
      if (*(_QWORD *)(a2 + 16))
      {
        v14 = *(_QWORD *)(a2 + 40);
        v15 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v5, v15);
        v17 = -1 << *(_BYTE *)(a2 + 32);
        v18 = v16 & ~v17;
        if (((*(_QWORD *)(v39 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
          break;
      }
LABEL_3:
      v12 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v5);
      v11 = v38;
      if (!v38)
        goto LABEL_11;
    }
    v19 = ~v17;
    v20 = *(_QWORD *)(v40 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    while (1)
    {
      v22 = a2;
      v21(v8, *(_QWORD *)(a2 + 48) + v20 * v18, v5);
      v23 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v41, v5, v23);
      v25 = *(void (**)(char *, uint64_t))(v40 + 8);
      v25(v8, v5);
      if ((v24 & 1) != 0)
        break;
      v18 = (v18 + 1) & v19;
      a2 = v22;
      if (((*(_QWORD *)(v39 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_3;
    }
    v25(v41, v5);
    v27 = v32;
    v26 = v33;
    v28 = v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v34, v35, v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v26);
    v29 = v22;
  }
  else
  {
LABEL_11:
    v30 = type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v34, 1, 1, v30);
    v29 = a2;
  }
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_10020ADD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RealtimeCollaborationSelectionDocument.ParticipantSelection.participantID.getter(v2);
  ICBaseTextView.expandAvatar(for:animated:)(v4, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10020AEBC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v23 - 8);
  v6 = __chkstk_darwin(v23);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Notification.userInfo.getter(v6);
  if (!v9)
  {
    v27 = 0u;
    v28 = 0u;
LABEL_11:
    sub_100012DDC((uint64_t)&v27, &qword_1005CF190);
    v14 = 0;
    goto LABEL_12;
  }
  v10 = v9;
  *(_QWORD *)&v27 = 0x70756F7247434352;
  *((_QWORD *)&v27 + 1) = 0xEF6E6F6973736553;
  AnyHashable.init<A>(_:)(aBlock, &v27, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_100248ECC((uint64_t)aBlock), (v12 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v27);
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
  }
  swift_bridgeObjectRelease(v10);
  sub_10018550C((uint64_t)aBlock);
  if (!*((_QWORD *)&v28 + 1))
    goto LABEL_11;
  v13 = sub_100012E18(&qword_1005D4AC0);
  if (swift_dynamicCast(aBlock, &v27, (char *)&type metadata for Any + 8, v13, 6))
    v14 = aBlock[0];
  else
    v14 = 0;
LABEL_12:
  v15 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  v17 = swift_allocObject(&unk_10055F360, 32, 7);
  *(_QWORD *)(v17 + 16) = v1;
  *(_QWORD *)(v17 + 24) = v14;
  aBlock[4] = sub_10020DB10;
  v26 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_10055F378;
  v18 = _Block_copy(aBlock);
  swift_retain(v14);
  static DispatchQoS.unspecified.getter(v1);
  *(_QWORD *)&v27 = _swiftEmptyArrayStorage;
  v19 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v21 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v2, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v18);
  _Block_release(v18);
  swift_release(v14);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v23);
  return swift_release(v26);
}

uint64_t sub_10020B1C8(void *a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  KeyPath = swift_getKeyPath(&unk_10045C2C0, a2);
  v6 = swift_getKeyPath(&unk_10045C2E8, v5);
  swift_retain(a2);
  static Published.subscript.getter(&v13);
  swift_release(KeyPath);
  swift_release(v6);
  v7 = v13;
  v9 = swift_getKeyPath(&unk_10045C2C0, v8);
  v11 = swift_getKeyPath(&unk_10045C2E8, v10);
  v13 = a2;
  swift_retain(a2);
  static Published.subscript.setter(&v13, a1, v9, v11);
  sub_10020785C(v7);
  swift_release(a2);
  return swift_release(v7);
}

uint64_t sub_10020B3EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  v10 = swift_allocObject(&unk_10055F2C0, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_10020DA74;
  v19 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_10055F2D8;
  v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v17 = _swiftEmptyArrayStorage;
  v12 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v14 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release(v19);
}

uint64_t sub_10020B608(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v13;

  v7 = type metadata accessor for Notification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = a1;
  a4(v10);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10020B6B4(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v13;

  v7 = type metadata accessor for Notification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = a1;
  a4();

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void RealtimeCollaborationSelectionController.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.RealtimeCollaborationSelectionController", 52, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_10020B880(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = swift_retain(*a1);
  return sub_100207740(v1, v2);
}

char *sub_10020B8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;

  v5 = sub_100012E18(&qword_1005D4AE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CollaboratorStatus(0);
  v29 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v30 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v28 = (char *)&v24 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return (char *)_swiftEmptyArrayStorage;
  v26 = v2;
  v13 = *(_QWORD *)(type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0) - 8);
  v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v25 = a1;
  swift_bridgeObjectRetain(a1);
  v16 = (char *)_swiftEmptyArrayStorage;
  v17 = v29;
  v27 = a2;
  do
  {
    sub_100209ECC(v14, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v8) == 1)
    {
      sub_100012DDC((uint64_t)v7, &qword_1005D4AE0);
    }
    else
    {
      v18 = v15;
      v19 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      v20 = v28;
      v19(v28, v7, v8);
      v19(v30, v20, v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (char *)sub_10016B03C(0, *((_QWORD *)v16 + 2) + 1, 1, (unint64_t)v16);
      v22 = *((_QWORD *)v16 + 2);
      v21 = *((_QWORD *)v16 + 3);
      if (v22 >= v21 >> 1)
        v16 = (char *)sub_10016B03C(v21 > 1, v22 + 1, 1, (unint64_t)v16);
      *((_QWORD *)v16 + 2) = v22 + 1;
      v17 = v29;
      v19(&v16[((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v29 + 72) * v22], v30, v8);
      v15 = v18;
    }
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease(v25);
  return v16;
}

uint64_t sub_10020BAFC(uint64_t a1)
{
  return sub_10020C530(a1, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr, (unint64_t *)&qword_1005D3CC0, (void (*)(id *, uint64_t))sub_100302C94);
}

uint64_t sub_10020BB20(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_10020DB18(v4, (uint64_t)v5);
      sub_100302CB0((uint64_t)v6, (uint64_t)v5);
      sub_10018550C((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10020BBA8(uint64_t a1)
{
  return sub_10020C530(a1, (unint64_t *)&qword_1005D3D00, NSObject_ptr, &qword_1005D2E08, (void (*)(id *, uint64_t))sub_100302E28);
}

uint64_t sub_10020BBCC(uint64_t a1)
{
  return sub_10020BFEC(a1, type metadata accessor for NoteSearchResult, &qword_1005D3F88, (void (*)(id *, uint64_t))sub_100302E44);
}

uint64_t sub_10020BBE8(uint64_t a1)
{
  return sub_10020C530(a1, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr, &qword_1005D4160, (void (*)(id *, uint64_t))sub_100302E58);
}

uint64_t sub_10020BC0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100302E74((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_10020BDDC(uint64_t a1)
{
  return sub_10020C530(a1, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr, &qword_1005D0578, (void (*)(id *, uint64_t))sub_1003030D0);
}

uint64_t sub_10020BE00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for IndexPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100019C6C(&qword_1005D8980, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_1003030EC((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_10020BFD0(uint64_t a1)
{
  return sub_10020BFEC(a1, type metadata accessor for AttachmentSearchResult, &qword_1005D3DA8, (void (*)(id *, uint64_t))sub_100303348);
}

uint64_t sub_10020BFEC(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, void (*a4)(id *, uint64_t))
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  void **v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v8 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = a2(0);
  v11 = sub_100019C6C(a3, a2, (uint64_t)&protocol conformance descriptor for NSObject);
  result = Set.init(minimumCapacity:)(v9, v10, v11);
  v21 = result;
  if (v8)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v13 = _CocoaArrayWrapper.endIndex.getter(v14);
    result = swift_bridgeObjectRelease(a1);
    if (!v13)
      return v21;
  }
  else
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v13)
      return v21;
  }
  if (v13 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v13; ++i)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        a4(&v20, v16);

      }
    }
    else
    {
      v17 = (void **)(a1 + 32);
      do
      {
        v18 = *v17++;
        a4(&v20, (uint64_t)v18);

        --v13;
      }
      while (v13);
    }
    return v21;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020C160(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100303608((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_10020C330(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100303864(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10020C3C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = _s3TagVMa(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100019C6C(&qword_1005D4A90, v10, (uint64_t)&unk_100459840);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v16 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1001D3CC8(v13, (uint64_t)v6);
      sub_100303B24((uint64_t)v8, (uint64_t)v6);
      sub_1001D3D0C((uint64_t)v8);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t sub_10020C4CC(uint64_t a1)
{
  return sub_10020C530(a1, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr, (unint64_t *)&qword_1005D4AD0, (void (*)(id *, uint64_t))sub_100304170);
}

uint64_t sub_10020C4F0(uint64_t a1)
{
  return sub_10020BFEC(a1, type metadata accessor for TableSearchResult, &qword_1005D3D88, (void (*)(id *, uint64_t))sub_10030418C);
}

uint64_t sub_10020C50C(uint64_t a1)
{
  return sub_10020C530(a1, &qword_1005D8540, CKShareParticipant_ptr, (unint64_t *)&qword_1005D4AC8, (void (*)(id *, uint64_t))sub_1003041A0);
}

uint64_t sub_10020C530(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = sub_1000163BC(0, a2, a3);
  v13 = sub_1001452A0(a4, a2, a3);
  result = Set.init(minimumCapacity:)(v11, v12, v13);
  v23 = result;
  if (v10)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v15 = _CocoaArrayWrapper.endIndex.getter(v16);
    result = swift_bridgeObjectRelease(a1);
    if (!v15)
      return v23;
  }
  else
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return v23;
  }
  if (v15 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v15; ++i)
      {
        v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        a5(&v22, v18);

      }
    }
    else
    {
      v19 = (void **)(a1 + 32);
      do
      {
        v20 = *v19++;
        a5(&v22, (uint64_t)v20);

        --v15;
      }
      while (v15);
    }
    return v23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020C6AC(unint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  unint64_t v36;
  unint64_t v37;
  uint64_t result;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, unint64_t, uint64_t);
  uint64_t v54;
  char v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(char *, unint64_t, uint64_t);
  unint64_t v62;
  unint64_t v63;
  uint64_t (*v64)(unint64_t, char *, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  void (*v69)(char *, unint64_t, uint64_t);
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;

  v4 = type metadata accessor for CollaboratorStatus(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v67 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v66 = (char *)&v65 - v9;
  __chkstk_darwin(v8);
  v76 = (char *)&v65 - v10;
  v11 = type metadata accessor for UUID(0);
  v77 = *(_QWORD **)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v79 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v65 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v65 - v17;
  v75 = a1;
  v19 = *a1;
  v69 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
  if (!v69)
    return 0;
  v74 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v20 = v19 + v74;
  v72 = v5;
  v21 = *(_QWORD *)(v5 + 72);
  v78 = a2 + 7;
  v22 = swift_bridgeObjectRetain(v19);
  v23 = 0;
  v80 = a2;
  v70 = v4;
  v71 = v19;
  v73 = v21;
  v65 = v20;
  while (1)
  {
    v68 = v23;
    CollaboratorStatus.participantID.getter(v22);
    if (!a2[2])
      break;
    v24 = a2[5];
    v25 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v11, v25);
    v27 = -1 << *((_BYTE *)a2 + 32);
    v28 = v26 & ~v27;
    if (((*(_QWORD *)((char *)v78 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
      break;
    v29 = v18;
    v30 = ~v27;
    v31 = v77[9];
    v32 = (void (*)(char *, unint64_t, uint64_t))v77[2];
    while (1)
    {
      v32(v16, v80[6] + v31 * v28, v11);
      v33 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v29, v11, v33);
      v35 = (void (*)(char *, uint64_t))v77[1];
      v35(v16, v11);
      if ((v34 & 1) != 0)
        break;
      v28 = (v28 + 1) & v30;
      if (((*(_QWORD *)((char *)v78 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
        goto LABEL_13;
    }
    v18 = v29;
    v35(v29, v11);
    v23 = v68 + 1;
    a2 = v80;
    v36 = v71;
    if ((void (*)(char *, unint64_t, uint64_t))(v68 + 1) == v69)
    {
      swift_bridgeObjectRelease(v71);
      return *(_QWORD *)(v36 + 16);
    }
  }
  v29 = v18;
  v35 = (void (*)(char *, uint64_t))v77[1];
LABEL_13:
  v35(v29, v11);
  v37 = v71;
  result = swift_bridgeObjectRelease(v71);
  v39 = v68 + 1;
  if (!__OFADD__(v68, 1))
  {
    v40 = *(_QWORD *)(v37 + 16);
    if (v39 == v40)
      return v68;
    v41 = v70;
    v42 = v72;
    v43 = v74;
    while (v39 < v40)
    {
      v71 = v39 * v73;
      v69 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
      v69(v76, v37 + v43 + v39 * v73, v41);
      CollaboratorStatus.participantID.getter(v44);
      if (v80[2]
        && (v45 = v80,
            v46 = v80[5],
            v47 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v48 = dispatch thunk of Hashable._rawHashValue(seed:)(v46, v11, v47), v49 = -1 << *((_BYTE *)v45 + 32), v50 = v48 & ~v49, ((*(_QWORD *)((char *)v78 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) != 0))
      {
        v51 = ~v49;
        v52 = v77[9];
        v53 = (void (*)(char *, unint64_t, uint64_t))v77[2];
        while (1)
        {
          v53(v16, v80[6] + v52 * v50, v11);
          v54 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v55 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v79, v11, v54);
          v35(v16, v11);
          if ((v55 & 1) != 0)
            break;
          v50 = (v50 + 1) & v51;
          if (((*(_QWORD *)((char *)v78 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
            goto LABEL_23;
        }
        v35(v79, v11);
        v42 = v72;
        v41 = v70;
        result = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v76, v70);
        v57 = v68;
        if (v68 != v39)
        {
          if ((v68 & 0x8000000000000000) != 0)
            goto LABEL_42;
          v58 = *v75;
          v59 = *(_QWORD *)(*v75 + 16);
          if (v68 >= v59)
            goto LABEL_43;
          v60 = v58 + v74;
          v65 = v68 * v73;
          v61 = v69;
          result = ((uint64_t (*)(char *, unint64_t, uint64_t))v69)(v66, v58 + v74 + v68 * v73, v41);
          if (v39 >= v59)
            goto LABEL_44;
          v61(v67, v60 + v71, v41);
          result = swift_isUniquelyReferenced_nonNull_native(v58);
          *v75 = v58;
          if ((result & 1) == 0)
          {
            result = sub_10026C698(v58);
            v58 = result;
            *v75 = result;
          }
          if (v68 >= *(_QWORD *)(v58 + 16))
            goto LABEL_45;
          v62 = v74;
          v63 = v58 + v74 + v65;
          v42 = v72;
          v64 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v72 + 40);
          result = v64(v63, v67, v41);
          if (v39 >= *(_QWORD *)(*v75 + 16))
            goto LABEL_46;
          result = v64(*v75 + v62 + v71, v66, v41);
          v57 = v68;
        }
        v68 = v57 + 1;
        if (__OFADD__(v57, 1))
          goto LABEL_41;
      }
      else
      {
LABEL_23:
        v35(v79, v11);
        v42 = v72;
        v41 = v70;
        result = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v76, v70);
      }
      v56 = __OFADD__(v39++, 1);
      v43 = v74;
      if (v56)
        goto LABEL_40;
      v37 = *v75;
      v40 = *(_QWORD *)(*v75 + 16);
      if (v39 == v40)
        return v68;
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10020CCDC(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, unint64_t, uint64_t);
  unint64_t v50;
  unint64_t v51;
  uint64_t (*v52)(unint64_t, char *, uint64_t);
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  void (*v72)(char *, unint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;

  v4 = type metadata accessor for CollaboratorStatus(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v61 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v62 = (char *)&v55 - v9;
  __chkstk_darwin(v8);
  v67 = (char *)&v55 - v10;
  v11 = type metadata accessor for UUID(0);
  v70 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v74 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v55 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v55 - v17;
  v69 = a1;
  v19 = *a1;
  v56 = *(_QWORD *)(*a1 + 16);
  if (!v56)
    return 0;
  v63 = v5;
  v64 = v4;
  v66 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v59 = v19 + v66;
  v65 = *(_QWORD *)(v5 + 72);
  v75 = a2 + 56;
  v55 = v19;
  v20 = swift_bridgeObjectRetain(v19);
  v21 = 0;
  while (1)
  {
    v71 = v21;
    CollaboratorStatus.participantID.getter(v20);
    if (*(_QWORD *)(a2 + 16))
    {
      v22 = *(_QWORD *)(a2 + 40);
      v60 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v11, v60);
      v24 = -1 << *(_BYTE *)(a2 + 32);
      v25 = v23 & ~v24;
      if (((*(_QWORD *)(v75 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
        break;
    }
LABEL_3:
    (*(void (**)(char *, uint64_t))(v70 + 8))(v18, v11);
    v21 = v71 + 1;
    if (v71 + 1 == v56)
    {
      v54 = v55;
      swift_bridgeObjectRelease(v55);
      return *(_QWORD *)(v54 + 16);
    }
  }
  v68 = ~v24;
  v26 = *(_QWORD *)(v70 + 72);
  v72 = *(void (**)(char *, unint64_t, uint64_t))(v70 + 16);
  v73 = v26;
  while (1)
  {
    v72(v16, *(_QWORD *)(a2 + 48) + v73 * v25, v11);
    v27 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = v18;
    v29 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v11, v27);
    v30 = *(void (**)(char *, uint64_t))(v70 + 8);
    v30(v16, v11);
    if ((v29 & 1) != 0)
      break;
    v25 = (v25 + 1) & v68;
    if (((*(_QWORD *)(v75 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      goto LABEL_3;
  }
  v31 = v27;
  v30(v28, v11);
  v32 = v55;
  swift_bridgeObjectRelease(v55);
  result = v71;
  v34 = v71 + 1;
  if (!__OFADD__(v71, 1))
  {
    v35 = *(_QWORD *)(v32 + 16);
    if (v34 == v35)
      return result;
    v36 = v32;
    v37 = v63;
    v38 = v64;
    v39 = v31;
    v57 = a2;
    v58 = v31;
    while (v34 < v35)
    {
      v70 = v34 * v65;
      v71 = result;
      v68 = *(_QWORD *)(v37 + 16);
      v40.n128_f64[0] = ((double (*)(char *, unint64_t, uint64_t))v68)(v67, v36 + v66 + v34 * v65, v38);
      CollaboratorStatus.participantID.getter(v40);
      if (*(_QWORD *)(a2 + 16)
        && (v41 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40), v11, v60),
            v42 = -1 << *(_BYTE *)(a2 + 32),
            v43 = v41 & ~v42,
            ((*(_QWORD *)(v75 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) != 0))
      {
        v44 = ~v42;
        while (1)
        {
          v72(v16, *(_QWORD *)(a2 + 48) + v43 * v73, v11);
          v45 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v74, v11, v39);
          v30(v16, v11);
          if ((v45 & 1) != 0)
            break;
          v43 = (v43 + 1) & v44;
          if (((*(_QWORD *)(v75 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
            goto LABEL_19;
        }
        v30(v74, v11);
        v37 = v63;
        v38 = v64;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v67, v64);
        result = v71;
        v53 = __OFADD__(v34++, 1);
        if (v53)
          goto LABEL_39;
      }
      else
      {
LABEL_19:
        v30(v74, v11);
        v37 = v63;
        v38 = v64;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v67, v64);
        result = v71;
        if (v71 != v34)
        {
          if ((v71 & 0x8000000000000000) != 0)
            goto LABEL_41;
          v46 = *v69;
          v47 = *(_QWORD *)(*v69 + 16);
          if (v71 >= v47)
            goto LABEL_42;
          v48 = v46 + v66;
          v59 = v71 * v65;
          v49 = (void (*)(char *, unint64_t, uint64_t))v68;
          result = ((uint64_t (*)(char *, unint64_t, uint64_t))v68)(v62, v46 + v66 + v71 * v65, v38);
          if (v34 >= v47)
            goto LABEL_43;
          v49(v61, v48 + v70, v38);
          result = swift_isUniquelyReferenced_nonNull_native(v46);
          *v69 = v46;
          if ((result & 1) == 0)
          {
            result = sub_10026C698(v46);
            v46 = result;
            *v69 = result;
          }
          v39 = v58;
          v50 = v66;
          if (v71 >= *(_QWORD *)(v46 + 16))
            goto LABEL_44;
          v51 = v46 + v66 + v59;
          v37 = v63;
          v38 = v64;
          v52 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v63 + 40);
          result = v52(v51, v61, v64);
          if (v34 >= *(_QWORD *)(*v69 + 16))
            goto LABEL_45;
          v52(*v69 + v50 + v70, v62, v38);
          result = v71;
          a2 = v57;
        }
        v53 = __OFADD__(result++, 1);
        if (v53)
          goto LABEL_40;
        v53 = __OFADD__(v34++, 1);
        if (v53)
          goto LABEL_39;
      }
      v36 = *v69;
      v35 = *(_QWORD *)(*v69 + 16);
      if (v34 == v35)
        return result;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10020D2B8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  id v64;
  int64_t v65;

  v55 = a2;
  v64 = a4;
  v56 = a1;
  v5 = type metadata accessor for Participant(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v7);
  v12 = (char *)&v54 - v11;
  v13 = 0;
  v60 = a3;
  v14 = *(_QWORD *)(a3 + 56);
  v57 = 0;
  v58 = a3 + 56;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v59 = (unint64_t)(v15 + 63) >> 6;
  v62 = v9;
  v63 = result;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v65 = v13;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v22 >= v59)
      goto LABEL_40;
    v23 = *(_QWORD *)(v58 + 8 * v22);
    v24 = v13 + 1;
    if (!v23)
    {
      v24 = v13 + 2;
      if (v13 + 2 >= v59)
        goto LABEL_40;
      v23 = *(_QWORD *)(v58 + 8 * v24);
      if (!v23)
      {
        v24 = v13 + 3;
        if (v13 + 3 >= v59)
          goto LABEL_40;
        v23 = *(_QWORD *)(v58 + 8 * v24);
        if (!v23)
          break;
      }
    }
LABEL_20:
    v17 = (v23 - 1) & v23;
    v65 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_21:
    v26 = *(_QWORD *)(v60 + 48);
    v27 = *(_QWORD *)(v6 + 72);
    v61 = v21;
    v28 = v6;
    v29 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v30 = v29(v12, v26 + v27 * v21, v5);
    v31 = Participant.handle.getter(v30);
    v33 = v32;
    v34 = objc_msgSend(v64, "emailAddress");
    if (v34)
    {
      v35 = v34;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v38 = v37;

      if (v31 == v36 && v33 == v38)
      {
        swift_bridgeObjectRelease_n(v33, 2);
        v9 = v62;
        v5 = v63;
        v29(v62, (unint64_t)v12, v63);
LABEL_35:
        v6 = v28;
        v50 = *(void (**)(char *, uint64_t))(v28 + 8);
        v50(v9, v5);
LABEL_36:
        v13 = v65;
        result = ((uint64_t (*)(char *, uint64_t))v50)(v12, v5);
        goto LABEL_37;
      }
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v36, v38, 0);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v38);
      v9 = v62;
      v5 = v63;
      v41 = v29(v62, (unint64_t)v12, v63);
      if ((v40 & 1) != 0)
        goto LABEL_35;
    }
    else
    {
      swift_bridgeObjectRelease(v33);
      v41 = v29(v9, (unint64_t)v12, v5);
    }
    v42 = Participant.handle.getter(v41);
    v44 = v43;
    v45 = objc_msgSend(v64, "phoneNumber");
    v6 = v28;
    if (v45)
    {
      v46 = v45;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

      if (v42 == v47 && v44 == v49)
      {
        swift_bridgeObjectRelease(v44);
        v50 = *(void (**)(char *, uint64_t))(v28 + 8);
        v9 = v62;
        v5 = v63;
        v50(v62, v63);
        swift_bridgeObjectRelease(v44);
        goto LABEL_36;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v47, v49, 0);
      swift_bridgeObjectRelease(v49);
      v19 = *(void (**)(char *, uint64_t))(v28 + 8);
      v9 = v62;
      v5 = v63;
      v19(v62, v63);
      swift_bridgeObjectRelease(v44);
      result = ((uint64_t (*)(char *, uint64_t))v19)(v12, v5);
      v13 = v65;
      if ((v18 & 1) != 0)
      {
LABEL_37:
        *(unint64_t *)((char *)v56 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
        if (__OFADD__(v57++, 1))
        {
          __break(1u);
LABEL_40:
          v53 = v60;
          swift_retain(v60);
          return sub_10030ADBC(v56, v55, v57, v53);
        }
      }
    }
    else
    {
      v51 = *(void (**)(char *, uint64_t))(v28 + 8);
      v51(v9, v5);
      swift_bridgeObjectRelease(v44);
      result = ((uint64_t (*)(char *, uint64_t))v51)(v12, v5);
      v13 = v65;
    }
  }
  v25 = v13 + 4;
  if (v13 + 4 >= v59)
    goto LABEL_40;
  v23 = *(_QWORD *)(v58 + 8 * v25);
  if (v23)
  {
    v24 = v13 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v59)
      goto LABEL_40;
    v23 = *(_QWORD *)(v58 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_20;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10020D6F0(uint64_t a1, void *a2)
{
  uint64_t v2;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  void *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v16;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = v4 & 0x3F;
  v6 = (unint64_t)((1 << v4) + 63) >> 6;
  isStackAllocationSafe = a2;
  v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v6, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v9 = (char *)&v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    v10 = v8;
    v11 = sub_10020D2B8((unint64_t *)v9, v6, a1, v10);
    swift_release(a1);

    if (v2)
      swift_willThrow(v12);

  }
  else
  {
    v13 = (void *)swift_slowAlloc(8 * v6, -1);
    bzero(v13, 8 * v6);
    v14 = v8;
    v11 = sub_10020D2B8((unint64_t *)v13, v6, a1, v14);
    swift_release(a1);

    swift_slowDealloc(v13, -1, -1);
  }
  return v11;
}

uint64_t sub_10020D89C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10020D910()
{
  type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection(0);
  return sub_10020ADD4();
}

uint64_t sub_10020D940()
{
  return type metadata accessor for RealtimeCollaborationSelectionController(0);
}

uint64_t type metadata accessor for RealtimeCollaborationSelectionController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D4A78;
  if (!qword_1005D4A78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RealtimeCollaborationSelectionController);
  return result;
}

void sub_10020D984(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\b";
  v4[1] = "\b";
  sub_10020DA1C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10045C368;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_10045C380;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_10020DA1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D4A88)
  {
    v2 = sub_10001537C(&qword_1005D4A28);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D4A88);
  }
}

void sub_10020DA74()
{
  _s11MobileNotes40RealtimeCollaborationSelectionControllerC08realtimedf9DidChangeE5StateyyAA0cdF0CF_0();
}

uint64_t sub_10020DA94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10020DAB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  _s11MobileNotes40RealtimeCollaborationSelectionControllerC08realtimedf9DidChangeE5StateyyAA0cdF0CF_0();
  *(_BYTE *)(v1 + OBJC_IVAR___ICRealtimeCollaborationSelectionController_didScheduleCollaboratorStatusesUpdate) = 0;
}

uint64_t sub_10020DAE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020DB10()
{
  uint64_t v0;

  return sub_10020B1C8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10020DB18(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10020DB54(uint64_t a1)
{
  uint64_t v1;

  return sub_100209D14(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_10020DB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D4A48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020DBB8()
{
  return sub_10020A520() & 1;
}

uint64_t sub_10020DBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020DC1C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020DC40(uint64_t *a1)
{
  uint64_t v1;

  return sub_100208228(a1, v1);
}

void sub_10020DC64(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[6];
  _QWORD *v39;

  v4 = a1;
  v39 = _swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v8 = __CocoaSet.makeIterator()(a1);
    v9 = sub_1000163BC(0, a2, a3);
    v10 = sub_1001452A0(a4, a2, a3);
    a1 = Set.Iterator.init(_cocoa:)(v8, v9, v10);
    v4 = v38[1];
    v36 = v38[2];
    v11 = v38[3];
    v12 = v38[4];
    v13 = v38[5];
  }
  else
  {
    v12 = 0;
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v36 = a1 + 56;
    v11 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(a1 + 56);
  }
  v33 = v11;
  v17 = (unint64_t)(v11 + 64) >> 6;
  while (v4 < 0)
  {
    v22 = __CocoaSet.Iterator.next()(a1);
    if (!v22)
      goto LABEL_37;
    v23 = v22;
    v37 = v22;
    v24 = sub_1000163BC(0, a2, a3);
    swift_unknownObjectRetain(v23);
    swift_dynamicCast(v38, &v37, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
    v25 = (id)v38[0];
    swift_unknownObjectRelease(v23, v26);
    v21 = v12;
    v19 = v13;
    if (!v25)
      goto LABEL_37;
LABEL_35:
    v30 = objc_msgSend(v25, "parentAttachment", v33);
    if (v30)
    {
      v18 = v30;

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v31 = v39[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
      v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v25);
      a1 = specialized ContiguousArray._endMutation()(v32);
    }
    v12 = v21;
    v13 = v19;
  }
  if (v13)
  {
    v19 = (v13 - 1) & v13;
    v20 = __clz(__rbit64(v13)) | (v12 << 6);
    v21 = v12;
LABEL_34:
    v25 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v20);
    if (!v25)
      goto LABEL_37;
    goto LABEL_35;
  }
  v27 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v27 >= v17)
      goto LABEL_37;
    v28 = *(_QWORD *)(v36 + 8 * v27);
    v21 = v12 + 1;
    if (!v28)
    {
      v21 = v12 + 2;
      if (v12 + 2 >= v17)
        goto LABEL_37;
      v28 = *(_QWORD *)(v36 + 8 * v21);
      if (!v28)
      {
        v21 = v12 + 3;
        if (v12 + 3 >= v17)
          goto LABEL_37;
        v28 = *(_QWORD *)(v36 + 8 * v21);
        if (!v28)
        {
          v21 = v12 + 4;
          if (v12 + 4 >= v17)
            goto LABEL_37;
          v28 = *(_QWORD *)(v36 + 8 * v21);
          if (!v28)
          {
            v21 = v12 + 5;
            if (v12 + 5 >= v17)
              goto LABEL_37;
            v28 = *(_QWORD *)(v36 + 8 * v21);
            if (!v28)
            {
              v29 = v12 + 6;
              while (v17 != v29)
              {
                v28 = *(_QWORD *)(v36 + 8 * v29++);
                if (v28)
                {
                  v21 = v29 - 1;
                  goto LABEL_33;
                }
              }
LABEL_37:
              sub_1001452E0(v4);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v19 = (v28 - 1) & v28;
    v20 = __clz(__rbit64(v28)) + (v21 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_10020DF5C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t i;
  NSObject v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  unint64_t v28;

  v28 = (unint64_t)_swiftEmptyArrayStorage;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  if (v7)
    goto LABEL_26;
LABEL_6:
  v11 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v11 < v8)
    {
      v12 = *(_QWORD *)(v4 + 8 * v11);
      ++v10;
      if (v12)
        goto LABEL_21;
      v10 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_27;
      v12 = *(_QWORD *)(v4 + 8 * v10);
      if (v12)
        goto LABEL_21;
      v10 = v11 + 2;
      if (v11 + 2 >= v8)
        goto LABEL_27;
      v12 = *(_QWORD *)(v4 + 8 * v10);
      if (v12)
        goto LABEL_21;
      v10 = v11 + 3;
      if (v11 + 3 >= v8)
        goto LABEL_27;
      v12 = *(_QWORD *)(v4 + 8 * v10);
      if (v12)
      {
LABEL_21:
        v7 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v10 << 6); ; i = v23 | (v10 << 6))
        {
          sub_10020DB18(*(_QWORD *)(a1 + 48) + 40 * i, (uint64_t)v26);
          v24[0] = v26[0];
          v24[1] = v26[1];
          v25 = v27;
          v15.isa = AnyHashable._bridgeToObjectiveC()().isa;
          v16 = objc_opt_self(*a2);
          v17 = swift_dynamicCastObjCClass(v15.isa, v16);
          if (v17)
          {
            v18 = v17;
            v19 = sub_10018550C((uint64_t)v24);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
            v21 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v20 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v21 >= v20 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
            v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
            result = specialized Array._endMutation()(v22);
            if (!v7)
              goto LABEL_6;
          }
          else
          {

            result = sub_10018550C((uint64_t)v24);
            if (!v7)
              goto LABEL_6;
          }
LABEL_26:
          v23 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v8)
      {
        v12 = *(_QWORD *)(v4 + 8 * v13);
        if (v12)
        {
          v10 = v13;
          goto LABEL_21;
        }
        while (1)
        {
          v10 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_29;
          if (v10 >= v8)
            break;
          v12 = *(_QWORD *)(v4 + 8 * v10);
          ++v13;
          if (v12)
            goto LABEL_21;
        }
      }
    }
LABEL_27:
    swift_release(a1);
    return v28;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10020E178@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_10045C4F0, a1);
  v5 = swift_getKeyPath(&unk_10045C518, v4);
  static Published.subscript.getter(a2);
  swift_release(KeyPath);
  return swift_release(v5);
}

char *sub_10020E1DC(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v28;
  objc_super v29;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = _s14descr10055F441V6ObjectVMa(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (_QWORD *)((char *)aBlock - v9);
  *(_QWORD *)&v2[OBJC_IVAR____TtCV11MobileNotes19SyncingDebugSection10Controller_managedObjectContextObjectsDidChangeObservation] = 0;
  v11 = v2;
  v12 = a1;
  sub_10020E450(v12, v10);
  swift_beginAccess(&v11[OBJC_IVAR____TtCV11MobileNotes19SyncingDebugSection10Controller__object], aBlock, 33, 0);
  sub_100211B84((uint64_t)v10, (uint64_t)v8);
  Published.init(initialValue:)(v8, v5);
  sub_100211BC8((uint64_t)v10);
  swift_endAccess(aBlock);

  v29.receiver = v11;
  v29.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v29, "init");
  v14 = (void *)objc_opt_self(NSNotificationCenter);
  v15 = (char *)v13;
  v16 = objc_msgSend(v14, "defaultCenter");
  v17 = objc_msgSend(v12, "managedObjectContext");
  v18 = swift_allocObject(&unk_10055F3D8, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v15);
  v19 = swift_allocObject(&unk_10055F400, 32, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v12;
  aBlock[4] = sub_100212094;
  v28 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10036016C;
  aBlock[3] = &unk_10055F418;
  v20 = _Block_copy(aBlock);
  v21 = v28;
  v22 = v12;
  swift_release(v21);
  v23 = objc_msgSend(v16, "addObserverForName:object:queue:usingBlock:", NSManagedObjectContextObjectsDidChangeNotification, v17, 0, v20);

  _Block_release(v20);
  v24 = *(_QWORD *)&v15[OBJC_IVAR____TtCV11MobileNotes19SyncingDebugSection10Controller_managedObjectContextObjectsDidChangeObservation];
  *(_QWORD *)&v15[OBJC_IVAR____TtCV11MobileNotes19SyncingDebugSection10Controller_managedObjectContextObjectsDidChangeObservation] = v23;
  swift_unknownObjectRelease(v24, v25);
  return v15;
}

uint64_t sub_10020E450@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD);
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t *v62;
  void *v63;
  _QWORD *v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD v69[4];
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  _QWORD *v73;

  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v59 - v8;
  v10 = _s14descr10055F441V6ObjectVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2[1] = 0;
  v15 = (uint64_t)a2 + *(int *)(v12 + 36);
  v16 = type metadata accessor for Date(0);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v66 = v16;
  v65(v15, 1, 1);
  v17 = (_QWORD *)((char *)a2 + *(int *)(v10 + 40));
  *v17 = 0;
  v17[1] = 0;
  v18 = objc_msgSend(a1, "objectID");
  v64 = a2;
  *a2 = v18;
  v19 = sub_1002120B4(a1);
  if (!v19)
  {
    v26 = 0;
LABEL_32:
    v46 = v64;
    swift_bridgeObjectRelease(v64[1]);
    v46[1] = v26;
    v46[2] = sub_100212A60(a1);
    v46[3] = v47;
    v46[4] = sub_100212F18(a1);
    v46[5] = v48;
    *((_BYTE *)v46 + 48) = objc_msgSend(a1, "markedForDeletion");
    v49 = objc_msgSend(a1, "cloudState");
    if (v49)
    {
      v50 = v49;
      v51 = objc_msgSend(v49, "localVersionDate");

      if (v51)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

        v52 = 0;
      }
      else
      {
        v52 = 1;
      }
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v65)(v7, v52, 1, v66);
      sub_100213048((uint64_t)v7, (uint64_t)v9);
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v65)(v9, 1, 1, v66);
    }
    sub_1001CE964((uint64_t)v9, v15);
    v53 = objc_msgSend(a1, "lastUpdateChangeCountReason");
    if (v53)
    {
      v54 = v53;
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v57 = v56;

    }
    else
    {

      v55 = 0;
      v57 = 0;
    }
    result = swift_bridgeObjectRelease(v17[1]);
    *v17 = v55;
    v17[1] = v57;
    return result;
  }
  v20 = v19;
  v59 = v15;
  v60 = v7;
  v61 = v9;
  v62 = v17;
  v63 = a1;
  v68 = v19 & 0xC000000000000001;
  if ((v19 & 0xC000000000000001) == 0)
  {
    v21 = *(_QWORD *)(v19 + 16);
    if (v21)
      goto LABEL_6;
LABEL_13:
    swift_bridgeObjectRelease(v20);
    v27 = _swiftEmptyArrayStorage;
LABEL_31:
    v69[0] = v27;
    swift_bridgeObjectRetain(v27);
    sub_10020F8A0(v69);
    v17 = v62;
    a1 = v63;
    v7 = v60;
    v9 = v61;
    v15 = v59;
    swift_bridgeObjectRelease(v27);
    v26 = v69[0];
    goto LABEL_32;
  }
  if (v19 >= 0)
    v19 &= 0xFFFFFFFFFFFFFF8uLL;
  v21 = __CocoaSet.count.getter(v19);
  if (!v21)
    goto LABEL_13;
LABEL_6:
  v73 = _swiftEmptyArrayStorage;
  sub_1001371E8(0, v21 & ~(v21 >> 63), 0);
  if (v68)
  {
    if (v20 >= 0)
      v22 = v20 & 0xFFFFFFFFFFFFFF8;
    else
      v22 = v20;
    v23 = __CocoaSet.startIndex.getter(v22);
    v25 = 1;
  }
  else
  {
    v23 = sub_100242B90(v20);
    v25 = v28 & 1;
  }
  v70 = v23;
  v71 = v24;
  v72 = v25;
  if ((v21 & 0x8000000000000000) == 0)
  {
    v29 = v20 & 0xFFFFFFFFFFFFFF8;
    if (v20 < 0)
      v29 = v20;
    v67 = v29;
    do
    {
      while (1)
      {
        v36 = v70;
        v35 = v71;
        v37 = v72;
        sub_100242F34(v70, v71, v72, v20);
        sub_10020E450();
        v38 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
        {
          sub_1001371E8(0, v38[2] + 1, 1);
          v38 = v73;
        }
        v40 = v38[2];
        v39 = v38[3];
        if (v40 >= v39 >> 1)
        {
          sub_1001371E8(v39 > 1, v40 + 1, 1);
          v38 = v73;
        }
        v38[2] = v40 + 1;
        sub_100213090((uint64_t)v14, (uint64_t)v38+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v40);
        if (v68)
          break;
        v30 = sub_1003CCBC0(v36, v35, v37, v20);
        v32 = v31;
        v34 = v33;
        sub_1001EDA28(v36, v35, v37);
        v70 = v30;
        v71 = v32;
        v72 = v34 & 1;
        if (!--v21)
          goto LABEL_30;
      }
      if ((v37 & 1) == 0)
        goto LABEL_43;
      v41 = __CocoaSet.Index.handleBitPattern.getter(v36, v35);
      if (v41)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v43 = sub_100012E18(&qword_1005D4C10);
      v44 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v69, v43);
      __CocoaSet.formIndex(after:isUnique:)(v45, isUniquelyReferenced_nonNull_native, v67);
      v44(v69, 0);
      --v21;
    }
    while (v21);
LABEL_30:
    sub_1001EDA28(v70, v71, v72);
    swift_bridgeObjectRelease(v20);
    v27 = v73;
    goto LABEL_31;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  result = swift_release(v69[0]);
  __break(1u);
  return result;
}

uint64_t sub_10020E940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[6];

  v5 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 0.85, 0.0);
  v7[2] = a2;
  v7[3] = a3;
  withAnimation<A>(_:_:)(v5, sub_10021209C, v7, (char *)&type metadata for () + 8);
  return swift_release(v5);
}

void sub_10020E9B8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _BYTE v18[24];

  v4 = _s14descr10055F441V6ObjectVMa(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v18[-v8 - 8];
  a1 += 16;
  swift_beginAccess(a1, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v11 = (void *)Strong;
    sub_10020E450(a2, v9);
    KeyPath = swift_getKeyPath(&unk_10045C4F0, v12);
    v15 = swift_getKeyPath(&unk_10045C518, v14);
    sub_100211B84((uint64_t)v9, (uint64_t)v7);
    v16 = v11;
    static Published.subscript.setter(v7, v16, KeyPath, v15);
    sub_100211BC8((uint64_t)v9);

  }
}

uint64_t sub_10020EB50()
{
  return _s14descr10055F441V10ControllerCMa(0);
}

uint64_t _s14descr10055F441V10ControllerCMa(uint64_t a1)
{
  return sub_100010414(a1, (uint64_t *)&unk_1005D4B40, (uint64_t)&_s14descr10055F441V10ControllerCMn);
}

void sub_10020EB6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10020F518(319, &qword_1005D4B50, _s14descr10055F441V6ObjectVMa, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t _s14descr10055F441V6ObjectVMa(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D4BB0, (uint64_t)&_s14descr10055F441V6ObjectVMn);
}

char *sub_10020EC0C(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int (*v25)(char *, uint64_t, uint64_t, __n128);
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v9 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v8;
    v11 = a2[3];
    v10 = a2[4];
    *((_QWORD *)a1 + 3) = v11;
    *((_QWORD *)a1 + 4) = v10;
    v12 = a2[5];
    a1[48] = *((_BYTE *)a2 + 48);
    v13 = *(int *)(a3 + 36);
    __dst = &a1[v13];
    v14 = (char *)a2 + v13;
    *((_QWORD *)a1 + 5) = v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
    v17 = v4;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v18 = swift_bridgeObjectRetain(v12);
    if (v25(v14, 1, v15, v18))
    {
      v19 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v20 = *(int *)(a3 + 40);
    v21 = &v7[v20];
    v22 = (char **)((char *)a2 + v20);
    v23 = v22[1];
    *(_QWORD *)v21 = *v22;
    *((_QWORD *)v21 + 1) = v23;
    swift_bridgeObjectRetain(v23);
  }
  return v7;
}

uint64_t sub_10020ED78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 40) + 8));
}

uint64_t sub_10020EE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t, __n128);
  id v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *__dst;

  v5 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(int *)(a3 + 36);
  __dst = (void *)(a1 + v10);
  v11 = (const void *)(a2 + v10);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v13 + 48);
  v15 = v5;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v16 = swift_bridgeObjectRetain(v9);
  if (v14(v11, 1, v12, v16))
  {
    v17 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v18 = *(int *)(a3 + 40);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_10020EF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v15 = *(int *)(a3 + 36);
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  v24 = *(int *)(a3 + 40);
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_10020F0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 36);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_10020F1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(int *)(a3 + 36);
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = *(int *)(a3 + 40);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_10020F350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020F35C);
}

uint64_t sub_10020F35C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t sub_10020F3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10020F3E8);
}

char *sub_10020F3E8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

void sub_10020F460(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = &unk_10045C3D0;
  v4[3] = &unk_10045C3D0;
  v4[4] = &unk_10045C3E8;
  sub_10020F518(319, (unint64_t *)&qword_1005DA840, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = &unk_10045C400;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_10020F518(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_10020F570(uint64_t a1)
{
  id *v1;
  id *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v1;
  NSObject.hash(into:)(a1);

  v12 = (uint64_t)v2[1];
  if (v12)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v12);
    sub_100211898(a1, v12);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v13 = v2[2];
  v14 = v2[3];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14);
  v15 = v2[4];
  v16 = v2[5];
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease(v16);
  Hasher._combine(_:)(*((_BYTE *)v2 + 48));
  v17 = _s14descr10055F441V6ObjectVMa(0);
  sub_1001CE8D4((uint64_t)v2 + *(int *)(v17 + 36), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v18 = sub_100019C6C((unint64_t *)&unk_1005D89F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v18);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v19 = (uint64_t *)((char *)v2 + *(int *)(v17 + 40));
  v20 = v19[1];
  if (v20)
  {
    v21 = *v19;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v20);
    String.hash(into:)(a1, v21, v20);
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_10020F7C0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10020F570((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10020F800(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10020F570((uint64_t)v2);
  return Hasher._finalize()();
}

id sub_10020F838@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t sub_10020F848()
{
  return sub_1001452A0((unint64_t *)&qword_1005D3CC0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
}

uint64_t sub_10020F874()
{
  return sub_100019C6C(&qword_1005D4C00, _s14descr10055F441V6ObjectVMa, (uint64_t)&unk_10045C418);
}

Swift::Int sub_10020F8A0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(_s14descr10055F441V6ObjectVMa(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1001565F8(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10020FA44(v6);
  *a1 = v3;
  return result;
}

BOOL sub_10020F928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v17;
  uint64_t v19;

  v4 = _s14descr10055F441V6ObjectVMa(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_100211B84(a1 + v12, (uint64_t)v10);
        sub_100211B84(a2 + v12, (uint64_t)v7);
        v15 = sub_100211C04((uint64_t)v10, (uint64_t)v7);
        sub_100211BC8((uint64_t)v7);
        sub_100211BC8((uint64_t)v10);
        v17 = v14-- != 0;
        if (!v15)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

Swift::Int sub_10020FA44(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Int v48;
  Swift::Int result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  unsigned int v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  uint64_t v135;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  char v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  Swift::Int v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;

  v2 = v1;
  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v5 = __chkstk_darwin(v4);
  v218 = (char *)&v195 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v195 - v8;
  v10 = __chkstk_darwin(v7);
  v210 = (uint64_t)&v195 - v11;
  v12 = __chkstk_darwin(v10);
  v209 = (uint64_t)&v195 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v195 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v195 - v17;
  v227 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v227 - 8);
  v20 = __chkstk_darwin(v227);
  v22 = (char *)&v195 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v230 = (char *)&v195 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v195 - v26;
  v28 = __chkstk_darwin(v25);
  v216 = (char *)&v195 - v29;
  v30 = __chkstk_darwin(v28);
  v201 = (char *)&v195 - v31;
  __chkstk_darwin(v30);
  v204 = (char *)&v195 - v32;
  v231 = _s14descr10055F441V6ObjectVMa(0);
  v214 = *(_QWORD *)(v231 - 8);
  v33 = __chkstk_darwin(v231);
  v208 = (uint64_t)&v195 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v224 = (uint64_t)&v195 - v36;
  v37 = __chkstk_darwin(v35);
  v232 = (uint64_t)&v195 - v38;
  v39 = __chkstk_darwin(v37);
  v229 = (uint64_t)&v195 - v40;
  v41 = __chkstk_darwin(v39);
  v217 = (uint64_t)&v195 - v42;
  v43 = __chkstk_darwin(v41);
  v215 = (uint64_t)&v195 - v44;
  v45 = __chkstk_darwin(v43);
  v203 = (uint64_t)&v195 - v46;
  __chkstk_darwin(v45);
  v202 = (uint64_t)&v195 - v47;
  v226 = a1;
  v48 = a1[1];
  result = _minimumMergeRunLength(_:)(v48);
  if (result >= v48)
  {
    if (v48 < 0)
      goto LABEL_177;
    if (v48)
      return sub_100210B58(0, v48, 1, v226);
    return result;
  }
  if (v48 >= 0)
    v50 = v48;
  else
    v50 = v48 + 1;
  if (v48 < -1)
    goto LABEL_185;
  v220 = v9;
  v199 = v16;
  v198 = v18;
  v219 = v22;
  v197 = result;
  if (v48 < 2)
  {
    v213 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80));
    v54 = v204;
    v196 = _swiftEmptyArrayStorage;
    if (v48 != 1)
    {
      v57 = (char *)_swiftEmptyArrayStorage;
      v58 = _swiftEmptyArrayStorage[2];
LABEL_143:
      if (v58 >= 2)
      {
        v188 = *v226;
        do
        {
          v189 = v58 - 2;
          if (v58 < 2)
            goto LABEL_172;
          if (!v188)
            goto LABEL_184;
          v190 = *(_QWORD *)&v57[16 * v189 + 32];
          v191 = *(_QWORD *)&v57[16 * v58 + 24];
          sub_100210FB8(v188 + *(_QWORD *)(v214 + 72) * v190, v188 + *(_QWORD *)(v214 + 72) * *(_QWORD *)&v57[16 * v58 + 16], v188 + *(_QWORD *)(v214 + 72) * v191, v213);
          if (v2)
            break;
          if (v191 < v190)
            goto LABEL_173;
          if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
            v57 = sub_1001562F4((uint64_t)v57);
          if (v189 >= *((_QWORD *)v57 + 2))
            goto LABEL_174;
          v192 = &v57[16 * v189 + 32];
          *(_QWORD *)v192 = v190;
          *((_QWORD *)v192 + 1) = v191;
          v193 = *((_QWORD *)v57 + 2);
          if (v58 > v193)
            goto LABEL_175;
          memmove(&v57[16 * v58 + 16], &v57[16 * v58 + 32], 16 * (v193 - v58));
          *((_QWORD *)v57 + 2) = v193 - 1;
          v58 = v193 - 1;
        }
        while (v193 > 2);
      }
LABEL_154:
      swift_bridgeObjectRelease(v57);
      v194 = v196;
      v196[2] = 0;
      return swift_bridgeObjectRelease(v194);
    }
  }
  else
  {
    v51 = v50 >> 1;
    v52 = static Array._allocateBufferUninitialized(minimumCapacity:)(v50 >> 1, v231);
    *(_QWORD *)(v52 + 16) = v51;
    v53 = *(unsigned __int8 *)(v214 + 80);
    v196 = (_QWORD *)v52;
    v213 = v52 + ((v53 + 32) & ~v53);
    v54 = v204;
  }
  v55 = v48;
  v56 = 0;
  v57 = (char *)_swiftEmptyArrayStorage;
  v228 = v19;
  v212 = v27;
LABEL_15:
  v59 = v56;
  v60 = v56 + 1;
  v211 = v56;
  if (v56 + 1 < v55)
  {
    v222 = v55;
    v61 = *v226;
    v62 = *(_QWORD *)(v214 + 72);
    v206 = v56 + 1;
    v63 = v61 + v62 * v60;
    v64 = v202;
    sub_100211B84(v63, v202);
    v205 = v61;
    v223 = v62;
    sub_100211B84(v61 + v62 * v59, v203);
    v65 = v227;
    v66 = (uint64_t)v198;
    sub_1001CE8D4(v64 + *(int *)(v231 + 36), (uint64_t)v198);
    v225 = *(_QWORD *)(v19 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v225)(v66, 1, v65) == 1)
    {
      static Date.distantPast.getter();
      sub_100012DDC(v66, (uint64_t *)&unk_1005D7B20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v54, v66, v65);
    }
    v67 = (uint64_t)v199;
    sub_1001CE8D4(v203 + *(int *)(v231 + 36), (uint64_t)v199);
    v68 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v225)(v67, 1, v65);
    v200 = v57;
    v69 = v201;
    if (v68 == 1)
    {
      static Date.distantPast.getter();
      sub_100012DDC(v67, (uint64_t *)&unk_1005D7B20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v201, v67, v65);
    }
    v70 = sub_100019C6C(&qword_1005D36F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v71 = v204;
    v207 = v70;
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v204, v69, v65, v70) & 1) != 0)
    {
      v72 = *(_QWORD *)(v202 + 16);
      v73 = *(_QWORD *)(v202 + 24);
      v74 = *(_QWORD *)(v203 + 16);
      v75 = *(_QWORD *)(v203 + 24);
      v59 = v211;
      v55 = v222;
      if (v72 == v74 && v73 == v75)
        LODWORD(v221) = 0;
      else
        LODWORD(v221) = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, v74, v75, 1);
      v76 = v227;
      v77 = v201;
      v71 = v204;
    }
    else
    {
      LODWORD(v221) = static Date.> infix(_:_:)(v71, v69);
      v76 = v227;
      v77 = v69;
      v59 = v211;
      v55 = v222;
    }
    v78 = *(void (**)(char *, uint64_t))(v19 + 8);
    v78(v77, v76);
    v78(v71, v76);
    sub_100211BC8(v203);
    sub_100211BC8(v202);
    if (v59 + 2 >= v55)
    {
      v60 = v59 + 2;
    }
    else
    {
      v206 *= v223;
      v79 = v205;
      v60 = v59 + 2;
      v80 = v223 * (v59 + 2);
      while (1)
      {
        v81 = v215;
        sub_100211B84(v79 + v80, v215);
        sub_100211B84(v79 + v206, v217);
        v82 = v81 + *(int *)(v231 + 36);
        v83 = v227;
        v84 = v209;
        sub_1001CE8D4(v82, v209);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v225)(v84, 1, v83) == 1)
        {
          static Date.distantPast.getter();
          sub_100012DDC(v84, (uint64_t *)&unk_1005D7B20);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v228 + 32))(v216, v84, v83);
        }
        v85 = v210;
        sub_1001CE8D4(v217 + *(int *)(v231 + 36), v210);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v225)(v85, 1, v83) == 1)
        {
          static Date.distantPast.getter();
          sub_100012DDC(v85, (uint64_t *)&unk_1005D7B20);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v228 + 32))(v27, v85, v83);
        }
        v86 = v83;
        v87 = v216;
        if ((dispatch thunk of static Equatable.== infix(_:_:)(v216, v27, v86, v207) & 1) != 0)
        {
          v88 = *(_QWORD *)(v215 + 16);
          v89 = *(_QWORD *)(v215 + 24);
          v90 = *(_QWORD *)(v217 + 16);
          v91 = *(_QWORD *)(v217 + 24);
          if (v88 == v90 && v89 == v91)
            v92 = 0;
          else
            v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, v90, v91, 1);
          v94 = v227;
          v93 = v216;
        }
        else
        {
          v93 = v87;
          v92 = static Date.> infix(_:_:)(v87, v27);
          v94 = v227;
        }
        v78(v27, v94);
        v78(v93, v94);
        sub_100211BC8(v217);
        sub_100211BC8(v215);
        if (((v221 ^ v92) & 1) != 0)
          break;
        v55 = v222;
        v79 += v223;
        if (v222 == ++v60)
        {
          v60 = v222;
          v19 = v228;
          v59 = v211;
          goto LABEL_49;
        }
      }
      v19 = v228;
      v59 = v211;
      v55 = v222;
    }
LABEL_49:
    v57 = v200;
    if ((v221 & 1) != 0)
    {
      if (v60 < v59)
        goto LABEL_178;
      if (v59 < v60)
      {
        v95 = 0;
        v96 = v223 * (v60 - 1);
        v97 = v60 * v223;
        v98 = v59;
        v99 = v59 * v223;
        do
        {
          if (v98 != v60 + v95 - 1)
          {
            v102 = v205;
            if (!v205)
              goto LABEL_183;
            v103 = v205 + v99;
            v225 = v205 + v96;
            sub_100213090(v205 + v99, v208);
            if (v99 < v96 || v103 >= v102 + v97)
            {
              v100 = v102 + v99;
              v101 = v225;
              swift_arrayInitWithTakeFrontToBack(v100, v225);
            }
            else
            {
              v101 = v225;
              if (v99 != v96)
                swift_arrayInitWithTakeBackToFront(v103, v225);
            }
            sub_100213090(v208, v101);
            v19 = v228;
          }
          ++v98;
          --v95;
          v96 -= v223;
          v97 -= v223;
          v99 += v223;
        }
        while (v98 < v60 + v95);
        v59 = v211;
        v27 = v212;
        v57 = v200;
        v55 = v222;
      }
    }
  }
  if (v60 >= v55)
    goto LABEL_94;
  if (__OFSUB__(v60, v59))
    goto LABEL_176;
  if (v60 - v59 >= v197)
    goto LABEL_94;
  if (__OFADD__(v59, v197))
    goto LABEL_179;
  if (v59 + v197 >= v55)
    v104 = v55;
  else
    v104 = v59 + v197;
  if (v104 >= v59)
  {
    if (v60 == v104)
      goto LABEL_94;
    v200 = v57;
    v206 = v2;
    v105 = *(_QWORD *)(v214 + 72);
    v106 = v105 * (v60 - 1);
    v221 = v105;
    v225 = v60 * v105;
    v107 = (uint64_t)v218;
    v207 = v104;
LABEL_76:
    v109 = 0;
    v110 = v59;
    v222 = v106;
    v223 = v60;
    while (1)
    {
      v111 = *v226;
      v112 = v229;
      sub_100211B84(v225 + v109 + *v226, v229);
      sub_100211B84(v106 + v109 + v111, v232);
      v113 = v112 + *(int *)(v231 + 36);
      v114 = v227;
      v115 = (uint64_t)v220;
      sub_1001CE8D4(v113, (uint64_t)v220);
      v116 = v228;
      v117 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v228 + 48);
      if (v117(v115, 1, v114) == 1)
      {
        static Date.distantPast.getter();
        sub_100012DDC(v115, (uint64_t *)&unk_1005D7B20);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v230, v115, v114);
      }
      v118 = v114;
      sub_1001CE8D4(v232 + *(int *)(v231 + 36), v107);
      v119 = v117(v107, 1, v114);
      v120 = v219;
      if (v119 == 1)
      {
        static Date.distantPast.getter();
        sub_100012DDC(v107, (uint64_t *)&unk_1005D7B20);
        v121 = v228;
      }
      else
      {
        v121 = v228;
        (*(void (**)(char *, uint64_t, uint64_t))(v228 + 32))(v219, v107, v118);
      }
      v122 = v230;
      v123 = sub_100019C6C(&qword_1005D36F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v122, v120, v118, v123) & 1) != 0)
      {
        v124 = *(_QWORD *)(v229 + 16);
        v125 = *(_QWORD *)(v229 + 24);
        v126 = *(_QWORD *)(v232 + 16);
        v127 = *(_QWORD *)(v232 + 24);
        if (v124 == v126 && v125 == v127)
        {
          v134 = *(void (**)(char *, uint64_t))(v121 + 8);
          v135 = v227;
          v134(v120, v227);
          v134(v230, v135);
          sub_100211BC8(v232);
          sub_100211BC8(v229);
LABEL_74:
          v106 = v222;
          v108 = v223;
LABEL_75:
          v60 = v108 + 1;
          v106 += v221;
          v225 += v221;
          v59 = v211;
          if (v60 != v207)
            goto LABEL_76;
          v60 = v207;
          v2 = v206;
          v19 = v228;
          v27 = v212;
          v57 = v200;
LABEL_94:
          if (v60 < v59)
            goto LABEL_171;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
          v223 = v60;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v57 = sub_100155E58(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
          v138 = *((_QWORD *)v57 + 2);
          v137 = *((_QWORD *)v57 + 3);
          v58 = v138 + 1;
          if (v138 >= v137 >> 1)
            v57 = sub_100155E58((char *)(v137 > 1), v138 + 1, 1, v57);
          *((_QWORD *)v57 + 2) = v58;
          v139 = v57 + 32;
          v140 = &v57[16 * v138 + 32];
          v141 = v223;
          *(_QWORD *)v140 = v211;
          *((_QWORD *)v140 + 1) = v141;
          if (v138)
          {
LABEL_100:
            v142 = v58 - 1;
            if (v58 >= 4)
            {
              v147 = &v139[16 * v58];
              v148 = *((_QWORD *)v147 - 8);
              v149 = *((_QWORD *)v147 - 7);
              v153 = __OFSUB__(v149, v148);
              v150 = v149 - v148;
              if (v153)
                goto LABEL_160;
              v152 = *((_QWORD *)v147 - 6);
              v151 = *((_QWORD *)v147 - 5);
              v153 = __OFSUB__(v151, v152);
              v145 = v151 - v152;
              v146 = v153;
              if (v153)
                goto LABEL_161;
              v154 = v58 - 2;
              v155 = &v139[16 * v58 - 32];
              v157 = *(_QWORD *)v155;
              v156 = *((_QWORD *)v155 + 1);
              v153 = __OFSUB__(v156, v157);
              v158 = v156 - v157;
              if (v153)
                goto LABEL_163;
              v153 = __OFADD__(v145, v158);
              v159 = v145 + v158;
              if (v153)
                goto LABEL_166;
              if (v159 >= v150)
              {
                v177 = &v139[16 * v142];
                v179 = *(_QWORD *)v177;
                v178 = *((_QWORD *)v177 + 1);
                v153 = __OFSUB__(v178, v179);
                v180 = v178 - v179;
                if (v153)
                  goto LABEL_170;
                v170 = v145 < v180;
              }
              else
              {
LABEL_113:
                if ((v146 & 1) != 0)
                  goto LABEL_162;
                v154 = v58 - 2;
                v160 = &v139[16 * v58 - 32];
                v162 = *(_QWORD *)v160;
                v161 = *((_QWORD *)v160 + 1);
                v163 = __OFSUB__(v161, v162);
                v164 = v161 - v162;
                v165 = v163;
                if (v163)
                  goto LABEL_165;
                v166 = &v139[16 * v142];
                v168 = *(_QWORD *)v166;
                v167 = *((_QWORD *)v166 + 1);
                v153 = __OFSUB__(v167, v168);
                v169 = v167 - v168;
                if (v153)
                  goto LABEL_168;
                if (__OFADD__(v164, v169))
                  goto LABEL_169;
                if (v164 + v169 < v145)
                  goto LABEL_125;
                v170 = v145 < v169;
              }
              if (v170)
                v142 = v154;
            }
            else
            {
              if (v58 == 3)
              {
                v144 = *((_QWORD *)v57 + 4);
                v143 = *((_QWORD *)v57 + 5);
                v153 = __OFSUB__(v143, v144);
                v145 = v143 - v144;
                v146 = v153;
                goto LABEL_113;
              }
              v171 = *((_QWORD *)v57 + 4);
              v172 = *((_QWORD *)v57 + 5);
              v153 = __OFSUB__(v172, v171);
              v164 = v172 - v171;
              v165 = v153;
LABEL_125:
              if ((v165 & 1) != 0)
                goto LABEL_164;
              v173 = &v139[16 * v142];
              v175 = *(_QWORD *)v173;
              v174 = *((_QWORD *)v173 + 1);
              v153 = __OFSUB__(v174, v175);
              v176 = v174 - v175;
              if (v153)
                goto LABEL_167;
              if (v176 < v164)
                goto LABEL_14;
            }
            v181 = v142 - 1;
            if (v142 - 1 >= v58)
            {
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
              break;
            }
            if (!*v226)
              goto LABEL_182;
            v182 = v57;
            v183 = &v139[16 * v181];
            v184 = *(_QWORD *)v183;
            v185 = &v139[16 * v142];
            v186 = *((_QWORD *)v185 + 1);
            sub_100210FB8(*v226 + *(_QWORD *)(v214 + 72) * *(_QWORD *)v183, *v226 + *(_QWORD *)(v214 + 72) * *(_QWORD *)v185, *v226 + *(_QWORD *)(v214 + 72) * v186, v213);
            if (v2)
            {
              v57 = v182;
              goto LABEL_154;
            }
            if (v186 < v184)
              goto LABEL_157;
            if (v142 > *((_QWORD *)v182 + 2))
              goto LABEL_158;
            *(_QWORD *)v183 = v184;
            *(_QWORD *)&v139[16 * v181 + 8] = v186;
            v187 = *((_QWORD *)v182 + 2);
            if (v142 >= v187)
              goto LABEL_159;
            v57 = v182;
            v58 = v187 - 1;
            memmove(&v139[16 * v142], v185 + 16, 16 * (v187 - 1 - v142));
            *((_QWORD *)v182 + 2) = v187 - 1;
            v19 = v228;
            v27 = v212;
            if (v187 <= 2)
              goto LABEL_14;
            goto LABEL_100;
          }
          v58 = 1;
LABEL_14:
          v55 = v226[1];
          v56 = v223;
          v54 = v204;
          if (v223 >= v55)
            goto LABEL_143;
          goto LABEL_15;
        }
        v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v124, v125, v126, v127, 1);
        v129 = v227;
        v122 = v230;
      }
      else
      {
        v128 = static Date.> infix(_:_:)(v122, v120);
        v129 = v227;
      }
      v130 = *(void (**)(char *, uint64_t))(v121 + 8);
      v130(v120, v129);
      v130(v122, v129);
      sub_100211BC8(v232);
      sub_100211BC8(v229);
      if ((v128 & 1) == 0)
      {
        v107 = (uint64_t)v218;
        goto LABEL_74;
      }
      v131 = *v226;
      v106 = v222;
      if (!*v226)
        goto LABEL_181;
      v132 = v131 + v225 + v109;
      v133 = v131 + v222 + v109;
      sub_100213090(v132, v224);
      swift_arrayInitWithTakeFrontToBack(v132, v133);
      sub_100213090(v224, v133);
      v109 -= v221;
      ++v110;
      v108 = v223;
      v107 = (uint64_t)v218;
      if (v223 == v110)
        goto LABEL_75;
    }
  }
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100210B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v57 = a4;
  v48 = a1;
  v6 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v50 = (uint64_t)&v46 - v10;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v46 - v16;
  v60 = _s14descr10055F441V6ObjectVMa(0);
  v18 = __chkstk_darwin(v60);
  v53 = (uint64_t)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v62 = (uint64_t)&v46 - v21;
  result = __chkstk_darwin(v20);
  v61 = (uint64_t)&v46 - v24;
  v52 = a3;
  v47 = a2;
  if (a3 != a2)
  {
    v51 = *(_QWORD *)(v23 + 72);
    v58 = v51 * v52;
    v59 = v51 * (v52 - 1);
    v54 = v9;
    v49 = v12;
LABEL_6:
    v26 = 0;
    v27 = v48;
    while (1)
    {
      v28 = v15;
      v29 = *v57;
      v56 = v58 + v26;
      v30 = v61;
      sub_100211B84(v58 + v26 + v29, v61);
      v55 = v59 + v26;
      sub_100211B84(v59 + v26 + v29, v62);
      v31 = v30 + *(int *)(v60 + 36);
      v32 = v12;
      v33 = v50;
      sub_1001CE8D4(v31, v50);
      v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
      if (v34(v33, 1, v11) == 1)
      {
        static Date.distantPast.getter();
        sub_100012DDC(v33, (uint64_t *)&unk_1005D7B20);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v17, v33, v11);
      }
      sub_1001CE8D4(v62 + *(int *)(v60 + 36), (uint64_t)v9);
      v15 = v28;
      if (v34((uint64_t)v9, 1, v11) == 1)
      {
        static Date.distantPast.getter();
        sub_100012DDC((uint64_t)v9, (uint64_t *)&unk_1005D7B20);
        v12 = v49;
      }
      else
      {
        v12 = v49;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v28, v9, v11);
      }
      v35 = sub_100019C6C(&qword_1005D36F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v17, v28, v11, v35) & 1) != 0)
      {
        v36 = *(_QWORD *)(v61 + 16);
        v37 = *(_QWORD *)(v61 + 24);
        v38 = *(_QWORD *)(v62 + 16);
        v39 = *(_QWORD *)(v62 + 24);
        if (v36 == v38 && v37 == v39)
        {
          v25 = *(void (**)(char *, uint64_t))(v12 + 8);
          v25(v15, v11);
          v25(v17, v11);
          sub_100211BC8(v62);
          result = sub_100211BC8(v61);
LABEL_5:
          v59 += v51;
          v58 += v51;
          if (++v52 == v47)
            return result;
          goto LABEL_6;
        }
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v38, v39, 1);
      }
      else
      {
        v40 = static Date.> infix(_:_:)(v17, v28);
      }
      v41 = v40;
      v42 = *(void (**)(char *, uint64_t))(v12 + 8);
      v42(v28, v11);
      v42(v17, v11);
      sub_100211BC8(v62);
      result = sub_100211BC8(v61);
      v9 = v54;
      if ((v41 & 1) == 0)
        goto LABEL_5;
      v43 = *v57;
      if (!*v57)
        break;
      v44 = v43 + v58 + v26;
      v45 = v43 + v59 + v26;
      sub_100213090(v44, v53);
      swift_arrayInitWithTakeFrontToBack(v44, v45);
      result = sub_100213090(v53, v45);
      v26 -= v51;
      ++v27;
      v9 = v54;
      if (v52 == v27)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100210FB8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char v56;
  char *v57;
  char v58;
  void (*v59)(char *, uint64_t);
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  void (*v83)(char *, uint64_t);
  BOOL v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t result;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;

  v100 = a3;
  v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v8 = __chkstk_darwin(v7);
  v94 = (uint64_t)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v92 = (uint64_t)&v90 - v11;
  v12 = __chkstk_darwin(v10);
  v95 = (unint64_t)&v90 - v13;
  __chkstk_darwin(v12);
  v93 = (uint64_t)&v90 - v14;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v91 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v97 = (char *)&v90 - v20;
  v21 = __chkstk_darwin(v19);
  v96 = (char *)&v90 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v90 - v23;
  v102 = _s14descr10055F441V6ObjectVMa(0);
  v25 = __chkstk_darwin(v102);
  v101 = (unint64_t)&v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v99 = (uint64_t)&v90 - v28;
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v90 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v90 - v32;
  v35 = *(_QWORD *)(v34 + 72);
  if (!v35)
  {
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v36 = a1;
  if (a2 - a1 == 0x8000000000000000 && v35 == -1)
    goto LABEL_86;
  v37 = v100 - a2;
  if (v100 - a2 == 0x8000000000000000 && v35 == -1)
    goto LABEL_87;
  v38 = (uint64_t)(a2 - a1) / v35;
  v105 = a1;
  v104 = a4;
  v39 = v37 / v35;
  v98 = v16;
  if (v38 >= v37 / v35)
  {
    if ((v39 & 0x8000000000000000) == 0)
    {
      v41 = a1;
      v42 = v39 * v35;
      v43 = v97;
      if (a4 < a2 || a2 + v42 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v63 = a4 + v42;
      v103 = a4 + v42;
      v105 = a2;
      if (v42 >= 1 && v41 < a2)
      {
        v65 = -v35;
        v95 = v41;
        v96 = (char *)a4;
        do
        {
          v66 = v99;
          sub_100211B84(v63 + v65, v99);
          v67 = a2 + v65;
          sub_100211B84(a2 + v65, v101);
          v68 = v66 + *(int *)(v102 + 36);
          v69 = v92;
          sub_1001CE8D4(v68, v92);
          v70 = v98;
          v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
          if (v71(v69, 1, v15) == 1)
          {
            static Date.distantPast.getter();
            sub_100012DDC(v69, (uint64_t *)&unk_1005D7B20);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v43, v69, v15);
          }
          v72 = v94;
          sub_1001CE8D4(v101 + *(int *)(v102 + 36), v94);
          if (v71(v72, 1, v15) == 1)
          {
            v73 = v91;
            static Date.distantPast.getter();
            sub_100012DDC(v72, (uint64_t *)&unk_1005D7B20);
          }
          else
          {
            v73 = v91;
            (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v91, v72, v15);
          }
          v74 = sub_100019C6C(&qword_1005D36F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          if ((dispatch thunk of static Equatable.== infix(_:_:)(v43, v73, v15, v74) & 1) != 0)
          {
            v75 = *(_QWORD *)(v99 + 16);
            v76 = *(_QWORD *)(v99 + 24);
            v77 = *(_QWORD *)(v101 + 16);
            v78 = *(_QWORD *)(v101 + 24);
            if (v75 == v77 && v76 == v78)
              v79 = 0;
            else
              v79 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v77, v78, 1);
            v80 = v73;
            v43 = v97;
          }
          else
          {
            v79 = static Date.> infix(_:_:)(v43, v73);
            v80 = v73;
          }
          v81 = v100;
          v82 = v100 + v65;
          v83 = *(void (**)(char *, uint64_t))(v70 + 8);
          v83(v80, v15);
          v83(v43, v15);
          sub_100211BC8(v101);
          sub_100211BC8(v99);
          if ((v79 & 1) != 0)
          {
            if (v81 < a2 || v82 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v81 + v65, a2 + v65);
              v85 = v95;
              v86 = (unint64_t)v96;
              v43 = v97;
            }
            else
            {
              v84 = v81 == a2;
              v85 = v95;
              v86 = (unint64_t)v96;
              v43 = v97;
              if (!v84)
                swift_arrayInitWithTakeBackToFront(v82, a2 + v65);
            }
            v105 += v65;
          }
          else
          {
            v87 = v103;
            v88 = v103 + v65;
            v103 += v65;
            if (v81 < v87 || v82 >= v87)
            {
              swift_arrayInitWithTakeFrontToBack(v81 + v65, v88);
              v67 = a2;
              v85 = v95;
              v86 = (unint64_t)v96;
              v43 = v97;
            }
            else
            {
              v86 = (unint64_t)v96;
              v43 = v97;
              if (v81 != v87)
                swift_arrayInitWithTakeBackToFront(v81 + v65, v88);
              v67 = a2;
              v85 = v95;
            }
          }
          v63 = v103;
          if (v103 <= v86)
            break;
          a2 = v67;
          v100 = v82;
        }
        while (v67 > v85);
      }
LABEL_84:
      sub_1001561D0(&v105, &v104, (uint64_t *)&v103);
      return 1;
    }
  }
  else if ((v38 & 0x8000000000000000) == 0)
  {
    v40 = v38 * v35;
    if (a4 < v36 || v36 + v40 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v36);
    }
    else if (a4 != v36)
    {
      swift_arrayInitWithTakeBackToFront(a4, v36);
    }
    v101 = a4 + v40;
    v103 = a4 + v40;
    if (v40 >= 1 && a2 < v100)
    {
      while (1)
      {
        sub_100211B84(a2, (uint64_t)v33);
        sub_100211B84(a4, (uint64_t)v31);
        v45 = v93;
        sub_1001CE8D4((uint64_t)&v33[*(int *)(v102 + 36)], v93);
        v46 = v98;
        v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
        if (v47(v45, 1, v15) == 1)
        {
          static Date.distantPast.getter();
          sub_100012DDC(v45, (uint64_t *)&unk_1005D7B20);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v24, v45, v15);
        }
        v48 = v95;
        sub_1001CE8D4((uint64_t)&v31[*(int *)(v102 + 36)], v95);
        if (v47(v48, 1, v15) == 1)
        {
          v49 = v96;
          static Date.distantPast.getter();
          sub_100012DDC(v48, (uint64_t *)&unk_1005D7B20);
        }
        else
        {
          v49 = v96;
          (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v96, v48, v15);
        }
        v50 = sub_100019C6C(&qword_1005D36F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(v24, v49, v15, v50) & 1) != 0)
        {
          v51 = *((_QWORD *)v33 + 2);
          v52 = *((_QWORD *)v33 + 3);
          v53 = *((_QWORD *)v31 + 2);
          v54 = *((_QWORD *)v31 + 3);
          if (v51 == v53 && v52 == v54)
          {
            v55 = *(void (**)(char *, uint64_t))(v46 + 8);
            v55(v96, v15);
            v55(v24, v15);
            sub_100211BC8((uint64_t)v31);
            sub_100211BC8((uint64_t)v33);
LABEL_39:
            v60 = v105;
            v62 = v104 + v35;
            if (v105 < v104 || v105 >= v62)
            {
              swift_arrayInitWithTakeFrontToBack(v105, v104);
            }
            else if (v105 != v104)
            {
              swift_arrayInitWithTakeBackToFront(v105, v104);
            }
            v104 = v62;
            v61 = a2;
            goto LABEL_47;
          }
          v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, v53, v54, 1);
          v57 = v96;
        }
        else
        {
          v56 = static Date.> infix(_:_:)(v24, v49);
          v57 = v49;
          v58 = v56;
        }
        v59 = *(void (**)(char *, uint64_t))(v46 + 8);
        v59(v57, v15);
        v59(v24, v15);
        sub_100211BC8((uint64_t)v31);
        sub_100211BC8((uint64_t)v33);
        if ((v58 & 1) == 0)
          goto LABEL_39;
        v60 = v105;
        v61 = a2 + v35;
        if (v105 < a2 || v105 >= v61)
        {
          swift_arrayInitWithTakeFrontToBack(v105, a2);
        }
        else if (v105 == a2)
        {
          v60 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v105, a2);
        }
LABEL_47:
        v105 = v60 + v35;
        a4 = v104;
        if (v104 < v101)
        {
          a2 = v61;
          if (v61 < v100)
            continue;
        }
        goto LABEL_84;
      }
    }
    goto LABEL_84;
  }
LABEL_88:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_100211898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s14descr10055F441V6ObjectVMa(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v30 = *(_QWORD *)(v10 + 72);
    do
    {
      sub_100211B84(v14, (uint64_t)v12);
      v16 = *(id *)v12;
      NSObject.hash(into:)(a1);

      v17 = *((_QWORD *)v12 + 1);
      if (v17)
      {
        Hasher._combine(_:)(1u);
        v18 = swift_bridgeObjectRetain(v17);
        sub_100211898(a1, v17, v18);
        swift_bridgeObjectRelease(v17);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v19 = v31;
      v20 = *((_QWORD *)v12 + 2);
      v21 = *((_QWORD *)v12 + 3);
      swift_bridgeObjectRetain(v21);
      String.hash(into:)(a1, v20, v21);
      swift_bridgeObjectRelease(v21);
      v22 = *((_QWORD *)v12 + 4);
      v23 = *((_QWORD *)v12 + 5);
      swift_bridgeObjectRetain(v23);
      String.hash(into:)(a1, v22, v23);
      swift_bridgeObjectRelease(v23);
      Hasher._combine(_:)(v12[48]);
      sub_1001CE8D4((uint64_t)&v12[*(int *)(v9 + 36)], (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v4) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v24 = v29;
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v29, v8, v4);
        Hasher._combine(_:)(1u);
        v25 = sub_100019C6C((unint64_t *)&unk_1005D89F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        dispatch thunk of Hashable.hash(into:)(a1, v4, v25);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v4);
      }
      v26 = &v12[*(int *)(v9 + 40)];
      v27 = *((_QWORD *)v26 + 1);
      if (v27)
      {
        v15 = *(_QWORD *)v26;
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v27);
        String.hash(into:)(a1, v15, v27);
        swift_bridgeObjectRelease(v27);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      sub_100211BC8((uint64_t)v12);
      v14 += v30;
      --v13;
    }
    while (v13);
  }
}

uint64_t sub_100211B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s14descr10055F441V6ObjectVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100211BC8(uint64_t a1)
{
  uint64_t v2;

  v2 = _s14descr10055F441V6ObjectVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_100211C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BOOL8 result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v4 = type metadata accessor for Date(0);
  v51 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18((uint64_t *)&unk_1005D3D30);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v48 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v48 - v17;
  sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(*(_QWORD *)a1) & 1) == 0)
    return 0;
  v50 = v9;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a2 + 8);
  if (v19)
  {
    if (!v20)
      return 0;
    v49 = v4;
    swift_bridgeObjectRetain(v20);
    v21 = swift_bridgeObjectRetain(v19);
    v22 = sub_10020F928(v21);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) == 0)
      return 0;
  }
  else
  {
    v49 = v4;
    if (v20)
      return 0;
  }
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)(a2 + 24);
  if (v23 == v25 && v24 == v26
    || (v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 0), result = 0, (v27 & 1) != 0))
  {
    if ((v29 = *(_QWORD *)(a1 + 32),
          v30 = *(_QWORD *)(a1 + 40),
          v31 = *(_QWORD *)(a2 + 32),
          v32 = *(_QWORD *)(a2 + 40),
          v29 == v31)
      && v30 == v32
      || (v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0), result = 0, (v33 & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
        return 0;
      v34 = _s14descr10055F441V6ObjectVMa(0);
      sub_1001CE8D4(a1 + *(int *)(v34 + 36), (uint64_t)v18);
      v48 = v34;
      sub_1001CE8D4(a2 + *(int *)(v34 + 36), (uint64_t)v16);
      v35 = (uint64_t)v50;
      v36 = (uint64_t)&v50[*(int *)(v7 + 48)];
      sub_1001CE8D4((uint64_t)v18, (uint64_t)v50);
      sub_1001CE8D4((uint64_t)v16, v36);
      v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
      v38 = v49;
      if (v37(v35, 1, v49) == 1)
      {
        sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D7B20);
        v35 = (uint64_t)v50;
        sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D7B20);
        if (v37(v36, 1, v38) == 1)
        {
          sub_100012DDC(v35, (uint64_t *)&unk_1005D7B20);
LABEL_21:
          v43 = *(int *)(v48 + 40);
          v44 = (_QWORD *)(a1 + v43);
          v45 = *(_QWORD *)(a1 + v43 + 8);
          v46 = (_QWORD *)(a2 + v43);
          v47 = v46[1];
          if (v45)
            return v47
                && (*v44 == *v46 && v45 == v47
                 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v44, v45, *v46, v47, 0) & 1) != 0);
          return !v47;
        }
      }
      else
      {
        sub_1001CE8D4(v35, (uint64_t)v13);
        if (v37(v36, 1, v38) != 1)
        {
          v39 = v51;
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v6, v36, v38);
          v40 = sub_100019C6C(&qword_1005D36F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v41 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v6, v38, v40);
          v42 = *(void (**)(char *, uint64_t))(v39 + 8);
          v42(v6, v38);
          sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D7B20);
          sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D7B20);
          v42(v13, v38);
          sub_100012DDC(v35, (uint64_t *)&unk_1005D7B20);
          if ((v41 & 1) == 0)
            return 0;
          goto LABEL_21;
        }
        sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D7B20);
        sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D7B20);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v38);
      }
      sub_100012DDC(v35, (uint64_t *)&unk_1005D3D30);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100212044()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100212068()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100212094(uint64_t a1)
{
  uint64_t v1;

  return sub_10020E940(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_10021209C()
{
  uint64_t v0;

  sub_10020E9B8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002120B4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  Swift::Int v82;
  void *v83;
  void *v84;
  Swift::Int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;

  v2 = objc_opt_self(ICAccount);
  v3 = swift_dynamicCastObjCClass(a1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = a1;
    v6 = objc_msgSend(v4, "folders");
    v7 = sub_1000163BC(0, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
    v8 = sub_1001452A0((unint64_t *)&qword_1005D4C20, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
    v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

    v10 = objc_msgSend(v4, "hashtags");
    v11 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v12 = sub_1001452A0(&qword_1005D4160, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v11, v12);

    v14 = (void *)sub_1002B1C88(v9);
    swift_bridgeObjectRelease(v9);
    v15 = sub_1002B1CAC(v13);
    swift_bridgeObjectRelease(v13);
    sub_100141294(v15, v14);
    v17 = v16;

    return v17;
  }
  v18 = objc_opt_self(ICFolder);
  v19 = swift_dynamicCastObjCClass(a1, v18);
  if (v19)
  {
    v20 = (void *)v19;
    v21 = a1;
    v22 = objc_msgSend(v20, "foldersInFolder");
    v23 = sub_1000163BC(0, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
    v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

    v25 = objc_msgSend(v20, "notes");
    v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

    v27 = sub_10020DF5C(v26, ICCloudSyncingObject_ptr);
    swift_bridgeObjectRelease(v26);
    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0)
        v93 = v24;
      else
        v93 = v24 & 0xFFFFFFFFFFFFFF8;
      v94 = sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
      swift_bridgeObjectRetain(v24);
      v29 = _bridgeCocoaArray<A>(_:)(v93, v94);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v28 = swift_bridgeObjectRetain(v24);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v28);
      sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
      v29 = v24;
    }
    swift_bridgeObjectRelease(v24);
    v30 = sub_10020BDDC(v29);
    swift_bridgeObjectRelease(v29);
    v17 = sub_100144A78(v27, v30);

    swift_bridgeObjectRelease(v27);
    return v17;
  }
  v31 = objc_opt_self(ICNote);
  v32 = swift_dynamicCastObjCClass(a1, v31);
  if (!v32)
  {
    v42 = objc_opt_self(ICAttachment);
    v43 = swift_dynamicCastObjCClass(a1, v42);
    if (v43)
    {
      v44 = (void *)v43;
      v45 = a1;
      v46 = objc_msgSend(v44, "media");
      if (v46)
      {
        v47 = v46;
        v48 = sub_100012E18(&qword_1005CF6F0);
        v49 = swift_allocObject(v48, 40, 7);
        *(_OWORD *)(v49 + 16) = xmmword_100456F30;
        *(_QWORD *)(v49 + 32) = v47;
        v103 = v49;
        specialized Array._endMutation()(v49);
        v50 = v103;
      }
      else
      {
        v50 = (uint64_t)_swiftEmptyArrayStorage;
      }
      v65 = objc_msgSend(v44, "subAttachments", v103);
      if (v65)
      {
        v66 = v65;
        v67 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
        v68 = sub_1001452A0((unint64_t *)&qword_1005D1D20, &qword_1005CFAC0, ICAttachment_ptr);
        v69 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v66, v67, v68);

      }
      else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
             && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_100128460((uint64_t)_swiftEmptyArrayStorage);
        v69 = v101;
      }
      else
      {
        v69 = &_swiftEmptySetSingleton;
      }
      v70 = objc_msgSend(v44, "inlineAttachments");
      if (v70)
      {
        v71 = v70;
        v72 = sub_1000163BC(0, &qword_1005CFAD0, ICInlineAttachment_ptr);
        v73 = sub_1001452A0((unint64_t *)&qword_1005D4C18, &qword_1005CFAD0, ICInlineAttachment_ptr);
        v74 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v71, v72, v73);

      }
      else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
             && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1001287E0((uint64_t)_swiftEmptyArrayStorage);
        v74 = v102;
      }
      else
      {
        v74 = &_swiftEmptySetSingleton;
      }
      v75 = objc_msgSend(v44, "previewImages");
      if (v75)
      {
        v76 = v75;
        v77 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v75, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

        v78 = sub_10020DF5C(v77, ICAttachmentPreviewImage_ptr);
        swift_bridgeObjectRelease(v77);
      }
      else
      {
        v78 = (uint64_t)_swiftEmptyArrayStorage;
      }
      if ((unint64_t)v50 >> 62)
      {
        if (v50 < 0)
          v97 = v50;
        else
          v97 = v50 & 0xFFFFFFFFFFFFFF8;
        v98 = sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
        swift_bridgeObjectRetain(v50);
        v80 = _bridgeCocoaArray<A>(_:)(v97, v98);
        swift_bridgeObjectRelease(v50);
      }
      else
      {
        v79 = swift_bridgeObjectRetain(v50);
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v79);
        sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
        v80 = v50;
      }
      swift_bridgeObjectRelease(v50);
      v81 = (void *)sub_10020BDDC(v80);
      swift_bridgeObjectRelease(v80);
      v82 = sub_1002B1CD0((uint64_t)v69);
      swift_bridgeObjectRelease(v69);
      sub_100141294(v82, v81);
      v84 = v83;
      v85 = sub_1002B1CF4((uint64_t)v74);
      swift_bridgeObjectRelease(v74);
      sub_100141294(v85, v84);
      v87 = v86;
      if ((unint64_t)v78 >> 62)
      {
        if (v78 < 0)
          v99 = v78;
        else
          v99 = v78 & 0xFFFFFFFFFFFFFF8;
        v100 = sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
        swift_bridgeObjectRetain(v78);
        v89 = _bridgeCocoaArray<A>(_:)(v99, v100);
        swift_bridgeObjectRelease(v78);
      }
      else
      {
        v88 = swift_bridgeObjectRetain(v78);
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v88);
        sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
        v89 = v78;
      }
      swift_bridgeObjectRelease(v78);
      v17 = sub_100144A78(v89, v87);
      swift_bridgeObjectRelease(v89);
      if ((v17 & 0xC000000000000001) != 0)
      {
        if (v17 < 0)
          v90 = v17;
        else
          v90 = v17 & 0xFFFFFFFFFFFFFF8;
        v91 = __CocoaSet.count.getter(v90);
      }
      else
      {
        v91 = *(_QWORD *)(v17 + 16);
      }

      if (v91)
        return v17;
      swift_bridgeObjectRelease(v17);
    }
    return 0;
  }
  v33 = (void *)v32;
  v34 = a1;
  v35 = objc_msgSend(v33, "attachments");
  if (v35)
  {
    v36 = v35;
    v37 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
    v38 = sub_1001452A0((unint64_t *)&qword_1005D1D20, &qword_1005CFAC0, ICAttachment_ptr);
    v39 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v36, v37, v38);

    sub_10020DC64(v39, &qword_1005CFAC0, ICAttachment_ptr, (unint64_t *)&qword_1005D1D20);
    v41 = v40;
  }
  else
  {
    v41 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v51 = objc_msgSend(v33, "inlineAttachments");
  if (v51)
  {
    v52 = v51;
    v53 = sub_1000163BC(0, &qword_1005CFAD0, ICInlineAttachment_ptr);
    v54 = sub_1001452A0((unint64_t *)&qword_1005D4C18, &qword_1005CFAD0, ICInlineAttachment_ptr);
    v55 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v52, v53, v54);

    sub_10020DC64(v55, &qword_1005CFAD0, ICInlineAttachment_ptr, (unint64_t *)&qword_1005D4C18);
    v57 = v56;
    if (!((unint64_t)v41 >> 62))
    {
LABEL_16:
      v58 = swift_bridgeObjectRetain(v41);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v58);
      sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
      v59 = v41;
      goto LABEL_17;
    }
  }
  else
  {
    v57 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)v41 >> 62))
      goto LABEL_16;
  }
  if (v41 < 0)
    v63 = v41;
  else
    v63 = v41 & 0xFFFFFFFFFFFFFF8;
  v64 = sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
  swift_bridgeObjectRetain(v41);
  v59 = _bridgeCocoaArray<A>(_:)(v63, v64);
  swift_bridgeObjectRelease(v41);
LABEL_17:
  swift_bridgeObjectRelease(v41);
  v60 = sub_10020BDDC(v59);
  swift_bridgeObjectRelease(v59);
  if ((unint64_t)v57 >> 62)
  {
    if (v57 < 0)
      v95 = v57;
    else
      v95 = v57 & 0xFFFFFFFFFFFFFF8;
    v96 = sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
    swift_bridgeObjectRetain(v57);
    v62 = _bridgeCocoaArray<A>(_:)(v95, v96);
    swift_bridgeObjectRelease(v57);
  }
  else
  {
    v61 = swift_bridgeObjectRetain(v57);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v61);
    sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
    v62 = v57;
  }
  swift_bridgeObjectRelease(v57);
  v17 = sub_100144A78(v62, v60);

  swift_bridgeObjectRelease(v62);
  return v17;
}

uint64_t sub_100212A60(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  double v30;
  Swift::String v31;
  double v32;
  Swift::String v33;
  void *object;
  Swift::String v35;
  double v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;

  v2 = objc_opt_self(ICAccount);
  v3 = swift_dynamicCastObjCClass(a1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = a1;
    v6 = objc_msgSend(v4, "localizedName");
LABEL_3:
    v7 = v6;
    goto LABEL_4;
  }
  v11 = objc_opt_self(ICHashtag);
  v12 = swift_dynamicCastObjCClass(a1, v11);
  if (v12)
  {
    v13 = (void *)v12;
    v5 = a1;
    v7 = objc_msgSend(v13, "displayText");
    if (!v7)
    {

      return 0x67617468736148;
    }
LABEL_4:
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

    return v9;
  }
  v14 = objc_opt_self(ICFolder);
  v15 = swift_dynamicCastObjCClass(a1, v14);
  if (v15)
  {
    v16 = (void *)v15;
    v5 = a1;
    v6 = objc_msgSend(v16, "title");
    goto LABEL_3;
  }
  v17 = objc_opt_self(ICNote);
  v18 = swift_dynamicCastObjCClass(a1, v17);
  if (v18)
  {
    v19 = (void *)v18;
    v5 = a1;
    v7 = objc_msgSend(v19, "title");
    if (!v7)
    {

      return 1702129486;
    }
    goto LABEL_4;
  }
  v20 = objc_opt_self(ICAttachment);
  v21 = swift_dynamicCastObjCClass(a1, v20);
  if (v21)
  {
    v22 = (void *)v21;
    v5 = a1;
    v7 = objc_msgSend(v22, "title");
    if (v7)
      goto LABEL_4;
    v6 = objc_msgSend(v22, "defaultTitle");
    goto LABEL_3;
  }
  v23 = objc_opt_self(ICInlineAttachment);
  v24 = swift_dynamicCastObjCClass(a1, v23);
  if (v24)
  {
    v25 = (void *)v24;
    v5 = a1;
    v6 = objc_msgSend(v25, "displayText");
    goto LABEL_3;
  }
  v26 = objc_opt_self(ICAttachmentPreviewImage);
  v27 = swift_dynamicCastObjCClass(a1, v26);
  if (!v27)
  {
    v42 = objc_opt_self(ICMedia);
    if (swift_dynamicCastObjCClass(a1, v42))
      return 0x616964654DLL;
    v43 = objc_msgSend(a1, "shareTitle");
    if (!v43)
      return 0x7463656A624FLL;
    v44 = v43;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);

    return v9;
  }
  v28 = (void *)v27;
  v29 = a1;
  result = (uint64_t)objc_msgSend(v28, "width");
  if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v30 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v30 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v45 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v31._countAndFlagsBits = 120;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  result = (uint64_t)objc_msgSend(v28, "height");
  if ((~*(_QWORD *)&v32 & 0x7FF0000000000000) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v32 >= 9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v33._object;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(object);
  v35._countAndFlagsBits = 64;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  result = (uint64_t)objc_msgSend(v28, "scale");
  if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v36 <= -9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v36 < 9.22337204e18)
  {
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v38 = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(v38);
    v39._countAndFlagsBits = 11640;
    v39._object = (void *)0xE200000000000000;
    String.append(_:)(v39);
    objc_msgSend(v28, "appearanceType");
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
    v41 = v40._object;
    String.append(_:)(v40);

    swift_bridgeObjectRelease(v41);
    return v45;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100212F18(void *a1)
{
  unint64_t v2;

  v2 = 0xD000000000000013;
  if ((objc_msgSend(a1, "needsInitialFetchFromCloud") & 1) != 0
    || (objc_msgSend(a1, "needsToBeFetchedFromCloud") & 1) != 0)
  {
    return 0xD000000000000015;
  }
  if (!objc_msgSend(a1, "hasAllMandatoryFields"))
    return 0x63692E6B72616D78;
  if ((objc_msgSend(a1, "needsToBePushedToCloud") & 1) == 0
    && (objc_msgSend(a1, "needsToBeDeletedFromCloud") & 1) == 0)
  {
    if (objc_msgSend(a1, "isSharedViaICloud"))
      return 0x692E6E6F73726570;
    else
      return 0xD000000000000010;
  }
  return v2;
}

uint64_t sub_100213048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100213090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s14descr10055F441V6ObjectVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002130D4()
{
  return sub_1002131AC();
}

uint64_t type metadata accessor for FolderComposerFilterCellDateCreated()
{
  return objc_opt_self(_TtC11MobileNotes35FolderComposerFilterCellDateCreated);
}

unint64_t sub_1002131AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4C50;
  if (!qword_1005D4C50)
  {
    v1 = objc_opt_self(ICDateCreatedFilterTypeSelection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D4C50);
  }
  return result;
}

uint64_t sub_1002131E8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D4C58);
  sub_10012A0B0(v0, (uint64_t)qword_1005D4C58);
  return static Logger.hashtag.getter();
}

id sub_1002132B8(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  id v8;
  id v9;

  *(_BYTE *)(v2 + OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_shouldSendNotification) = a2;
  sub_100394C7C(a1);
  if (v4)
  {
    v5 = v4;
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v6, 0, 0);

  v8 = sub_100214870(a1);
  objc_msgSend(v7, "addAction:", v8);
  v9 = sub_100215020();
  objc_msgSend(v7, "addAction:", v9);

  return v7;
}

id sub_100213400(unint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  id v28;
  NSString v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  NSString v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  NSString v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  NSString v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD aBlock[5];
  _QWORD *v78;

  v4 = a1;
  v73 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_44;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v2;
  swift_bridgeObjectRetain(v4);
  while (1)
  {
    v72 = a2;
    v74 = v2;
    v75 = v4;
    if (!v5)
      break;
    v76 = v4 & 0xC000000000000001;
    v7 = _swiftEmptyArrayStorage;
    v8 = OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_viewContext;
    v9 = 4;
    while (1)
    {
      v10 = v76 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v4) : *(id *)(v4 + 8 * v9);
      v11 = v10;
      v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      v13 = *(void **)&v2[v8];
      if (v13 && (a2 = v5, (v14 = objc_msgSend(v13, "objectWithID:", v11)) != 0))
      {
        v15 = v14;
        v16 = objc_opt_self(ICFolder);
        v17 = (void *)swift_dynamicCastObjCClass(v15, v16);
        if (v17)
        {
          v18 = v7;
          v19 = objc_msgSend(v17, "title");
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          v22 = v21;

          v7 = v18;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v7 = sub_10016ACE0(0, v18[2] + 1, 1, v18);
          v24 = v7[2];
          v23 = v7[3];
          v2 = v74;
          if (v24 >= v23 >> 1)
            v7 = sub_10016ACE0((_QWORD *)(v23 > 1), v24 + 1, 1, v7);
          v7[2] = v24 + 1;
          v25 = &v7[2 * v24];
          v25[4] = v20;
          v25[5] = v22;
          v4 = v75;
          v5 = a2;
        }
        else
        {

          v5 = a2;
        }
      }
      else
      {

      }
      ++v9;
      if (v12 == v5)
        goto LABEL_22;
    }
    __break(1u);
LABEL_44:
    if (v4 < 0)
      v69 = v4;
    else
      v69 = v4 & 0xFFFFFFFFFFFFFF8;
    v70 = v2;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v69);
  }
  v7 = _swiftEmptyArrayStorage;
LABEL_22:

  swift_bridgeObjectRelease(v4);
  if (!v7[2])
  {
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  v26 = v7[5];
  v27 = (void *)objc_opt_self(NSBundle);
  v28 = objc_msgSend(v27, "mainBundle", swift_bridgeObjectRetain(v26).n128_f64[0]);
  v29 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v28, "localizedStringForKey:value:table:", v29, 0, 0);

  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  static String.localizedStringWithFormat(_:_:)(v32, v34, _swiftEmptyArrayStorage);
  v36 = v35;
  swift_bridgeObjectRelease(v34);
  if (v73)
  {
    if (v75 < 0)
      v55 = v75;
    else
      v55 = v75 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v75);
    v37 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease(v75);
    if (v37 < 2)
      goto LABEL_27;
LABEL_32:
    swift_bridgeObjectRelease(v26);
    sub_1003961BC((uint64_t)v7, 1);
    v53 = v56;
    v54 = v7;
    goto LABEL_33;
  }
  v37 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v37 >= 2)
    goto LABEL_32;
LABEL_27:
  swift_bridgeObjectRelease(v7);
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v39 = objc_msgSend(v38, "ic_quotedString");

  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v42 = v41;

  v43 = (void *)objc_opt_self(NSBundle);
  v44 = objc_msgSend(v43, "mainBundle", swift_bridgeObjectRetain(v42).n128_f64[0]);
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v44, "localizedStringForKey:value:table:", v45, 0, 0);

  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v49 = v48;

  v50 = sub_100012E18((uint64_t *)&unk_1005D5630);
  v51 = swift_allocObject(v50, 72, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100451C20;
  *(_QWORD *)(v51 + 56) = &type metadata for String;
  *(_QWORD *)(v51 + 64) = sub_1001797EC();
  *(_QWORD *)(v51 + 32) = v40;
  *(_QWORD *)(v51 + 40) = v42;
  static String.localizedStringWithFormat(_:_:)(v47, v49, v51);
  v53 = v52;
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v49);
  v54 = (_QWORD *)v51;
LABEL_33:
  swift_bridgeObjectRelease(v54);
  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  if (v53)
  {
    v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
  }
  else
  {
    v58 = 0;
  }
  v30 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v57, v58, 1);

  if ((unint64_t)v72 >> 62)
  {
    if (v72 < 0)
      v71 = v72;
    else
      v71 = v72 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v72);
    v59 = _CocoaArrayWrapper.endIndex.getter(v71);
    swift_bridgeObjectRelease(v72);
  }
  else
  {
    v59 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  sub_1003964E4(v59, v37);
  if (v60)
    v61 = v60;
  else
    v61 = 0xE000000000000000;
  v62 = (_QWORD *)swift_allocObject(&unk_10055F678, 40, 7);
  v62[2] = v74;
  v62[3] = v72;
  v62[4] = v75;
  v63 = v74;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v72);
  v64 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v61);
  aBlock[4] = sub_1002152A4;
  v78 = v62;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002489AC;
  aBlock[3] = &unk_10055F690;
  v65 = _Block_copy(aBlock);
  swift_release(v78);
  v66 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v64, 2, v65);
  _Block_release(v65);

  objc_msgSend(v30, "addAction:", v66);
  v67 = sub_100215020();
  objc_msgSend(v30, "addAction:", v67);

  return v30;
}

void sub_100213B04(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v4;
  char *v5;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  NSString v40;
  void **v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  id v51;
  char *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  void **aBlock;
  uint64_t v62;
  void (*v63)(uint64_t, void *);
  void *v64;
  void *v65;
  _QWORD *v66;

  v4 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_workerContext];
  if (v4)
  {
    v5 = v2;
    v60 = *(id *)&v2[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_workerContext];
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v57 = a1;
      else
        v57 = a1 & 0xFFFFFFFFFFFFFF8;
      v58 = v4;
      swift_bridgeObjectRetain(a1);
      if (_CocoaArrayWrapper.endIndex.getter(v57))
      {
LABEL_4:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_39;
          }
          v9 = *(id *)(a1 + 32);
        }
        v10 = v9;
        swift_bridgeObjectRelease(a1);
        v11 = objc_msgSend(v10, "displayText");

        if (!v11)
        {

          return;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v13 = v12;

        v14 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v13);
        v15 = objc_msgSend(v14, "ic_withHashtagPrefix");

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        if ((unint64_t)a1 >> 62)
        {
          if (a1 < 0)
            v20 = a1;
          else
            v20 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v19 = _CocoaArrayWrapper.endIndex.getter(v20);
          swift_bridgeObjectRelease(a1);
        }
        else
        {
          v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v19 == 1)
        {
          v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v22 = String._bridgeToObjectiveC()();
          v23 = objc_msgSend(v21, "localizedStringForKey:value:table:", v22, 0, 0);

          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v26 = v25;

          v27 = sub_100012E18((uint64_t *)&unk_1005D5630);
          v28 = swift_allocObject(v27, 72, 7);
          *(_OWORD *)(v28 + 16) = xmmword_100451C20;
          *(_QWORD *)(v28 + 56) = &type metadata for String;
          *(_QWORD *)(v28 + 64) = sub_1001797EC();
          *(_QWORD *)(v28 + 32) = v16;
          *(_QWORD *)(v28 + 40) = v18;
          static String.localizedStringWithFormat(_:_:)(v24, v26, v28);
          v30 = v29;
          swift_bridgeObjectRelease(v26);
          swift_bridgeObjectRelease(v28);
        }
        else
        {
          swift_bridgeObjectRelease(v18);
          v31 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v32 = String._bridgeToObjectiveC()();
          v33 = objc_msgSend(v31, "localizedStringForKey:value:table:", v32, 0, 0);

          static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          v30 = v34;

        }
        v35 = objc_msgSend(objc_allocWithZone((Class)ICLongRunningTaskController), "init");
        v36 = *(void **)&v5[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_viewControllerManager];
        if (v36 && (v37 = objc_msgSend(v36, "window")) != 0)
        {
          v38 = v37;
          v39 = objc_msgSend(v37, "rootViewController");

        }
        else
        {
          v39 = 0;
        }
        objc_msgSend(v35, "setViewControllerToPresentFrom:", v39, a2);

        objc_msgSend(v35, "setShouldShowCancelButton:", 0);
        objc_msgSend(v35, "setIndeterminate:", 1);
        v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v30);
        objc_msgSend(v35, "setProgressString:", v40);

        v41 = (void **)_swiftEmptyArrayStorage;
        if (!v19)
          goto LABEL_30;
        aBlock = (void **)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v19);
        if ((v19 & 0x8000000000000000) == 0)
        {
          v42 = 0;
          do
          {
            if ((a1 & 0xC000000000000001) != 0)
              v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, a1);
            else
              v43 = *(id *)(a1 + 8 * v42 + 32);
            v44 = v43;
            ++v42;
            v45 = objc_msgSend(v43, "objectID");

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v46 = aBlock[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
            v47 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v45);
            specialized ContiguousArray._endMutation()(v47);
          }
          while (v19 != v42);
          v41 = aBlock;
LABEL_30:
          v48 = (_QWORD *)swift_allocObject(&unk_10055F560, 48, 7);
          v48[2] = v60;
          v48[3] = v5;
          v48[4] = a1;
          v48[5] = v59;
          v65 = sub_1002151D8;
          v66 = v48;
          aBlock = _NSConcreteStackBlock;
          v62 = 1107296256;
          v63 = sub_1002F598C;
          v64 = &unk_10055F578;
          v49 = _Block_copy(&aBlock);
          v50 = v66;
          swift_bridgeObjectRetain(v59);
          v51 = v60;
          swift_bridgeObjectRetain(a1);
          v52 = v5;
          swift_release(v50);
          v53 = swift_allocObject(&unk_10055F5B0, 32, 7);
          *(_QWORD *)(v53 + 16) = v52;
          *(_QWORD *)(v53 + 24) = v41;
          v65 = sub_100215210;
          v66 = (_QWORD *)v53;
          aBlock = _NSConcreteStackBlock;
          v62 = 1107296256;
          v63 = sub_1001FD5D4;
          v64 = &unk_10055F5C8;
          v54 = _Block_copy(&aBlock);
          v55 = v66;
          v56 = v52;
          swift_release(v55);
          objc_msgSend(v35, "startTask:completionBlock:", v49, v54);
          _Block_release(v54);
          _Block_release(v49);

          return;
        }
LABEL_39:
        __break(1u);
        return;
      }
    }
    else
    {
      v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v8 = v4;
      swift_bridgeObjectRetain(a1);
      if (v7)
        goto LABEL_4;
    }

    swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_100214144(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t result;
  _QWORD v16[5];
  uint64_t v17;

  v9 = (_QWORD *)swift_allocObject(&unk_10055F600, 48, 7);
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a2;
  v9[5] = a5;
  v10 = swift_allocObject(&unk_10055F628, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100215254;
  *(_QWORD *)(v10 + 24) = v9;
  v16[4] = sub_1000165D0;
  v17 = v10;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100016618;
  v16[3] = &unk_10055F640;
  v11 = _Block_copy(v16);
  v12 = v17;
  swift_bridgeObjectRetain(a5);
  swift_retain(v10);
  v13 = a3;
  swift_bridgeObjectRetain(a4);
  v14 = a2;
  swift_release(v12);
  objc_msgSend(v14, "performBlockAndWait:", v11);
  _Block_release(v11);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v10, "", 110, 102, 42, 1);
  swift_release(v9);
  result = swift_release(v10);
  if ((v14 & 1) != 0)
    __break(1u);
  return result;
}

void sub_10021429C(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjCClassFromMetadata;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;

  v7 = a1;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_shouldSendNotification) == 1)
  {
    v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "postNotificationName:object:", v9, 0);

  }
  v43 = a4;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v33 = a2;
    else
      v33 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v33);
    if (!v10)
      goto LABEL_27;
  }
  else
  {
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (!v10)
      goto LABEL_27;
  }
  v11 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v11);
  if (v10 < 1)
  {
    __break(1u);
    goto LABEL_40;
  }
  v14 = (void *)ObjCClassFromMetadata;
  v15 = 0;
  v46 = (uint64_t *)(v7 + OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_deletionMethod);
  v47 = OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_eventReporter;
  v48 = a2 & 0xC000000000000001;
  v44 = (void *)ObjCClassFromMetadata;
  v45 = v10;
  do
  {
    if (v48)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a2);
    else
      v16 = *(id *)(a2 + 8 * v15 + 32);
    v17 = v16;
    v18 = objc_msgSend(v16, "objectID");
    v19 = objc_msgSend(v14, "ic_existingObjectWithID:context:", v18, a3);

    if (v19)
    {
      if (qword_1005CEB08 != -1)
        swift_once(&qword_1005CEB08, sub_1002131E8);
      v20 = type metadata accessor for Logger(0);
      sub_10012A0B0(v20, (uint64_t)qword_1005D4C58);
      v21 = v19;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc(12, -1);
        v25 = v7;
        v26 = a2;
        v27 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v24 = 138412290;
        *(_QWORD *)(v24 + 4) = v21;
        *v27 = v19;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Removing hashtag usage {hashtag: %@}", (uint8_t *)v24, 0xCu);
        v28 = sub_100012E18(&qword_1005D3A30);
        swift_arrayDestroy(v27, 1, v28);
        v29 = v27;
        a2 = v26;
        v7 = v25;
        v14 = v44;
        swift_slowDealloc(v29, -1, -1);
        v30 = v24;
        v10 = v45;
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {

        v22 = v21;
      }

      -[NSObject removeUsage](v21, "removeUsage");
      -[NSObject markForDeletion](v21, "markForDeletion");
      v31 = *(void **)(v7 + v47);
      if (v31)
      {
        if (*((_BYTE *)v46 + 8))
          v32 = 0;
        else
          v32 = *v46;
        objc_msgSend(v31, "submitHashtagDeleteEvent:approachEnum:", 0, v32);
      }

    }
    ++v15;

  }
  while (v10 != v15);
LABEL_27:
  swift_bridgeObjectRelease(a2);
  v4 = v43;
  if (!v43)
  {
LABEL_45:
    objc_msgSend(a3, "ic_save");
    return;
  }
  v13 = v43 & 0xFFFFFFFFFFFFFF8;
  if (!(v43 >> 62))
  {
    v34 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v43);
    if (v34)
      goto LABEL_30;
LABEL_44:
    swift_bridgeObjectRelease(v4);
    goto LABEL_45;
  }
LABEL_40:
  if (v4 >= 0)
    v42 = v13;
  else
    v42 = v4;
  swift_bridgeObjectRetain(v4);
  v34 = _CocoaArrayWrapper.endIndex.getter(v42);
  if (!v34)
    goto LABEL_44;
LABEL_30:
  if (v34 >= 1)
  {
    for (i = 0; i != v34; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      else
        v38 = *(id *)(v4 + 8 * i + 32);
      v37 = v38;
      v39 = objc_msgSend(a3, "objectWithID:", v38);
      v40 = objc_opt_self(ICFolder);
      v41 = swift_dynamicCastObjCClass(v39, v40);
      if (v41)
      {
        objc_msgSend((id)objc_opt_self(ICFolder), "deleteFolder:", v41);
        v36 = v39;
      }
      else
      {
        v36 = v37;
        v37 = v39;
      }

    }
    goto LABEL_44;
  }
  __break(1u);
}

void *NSNotification.TagCollectionViewWillDeleteTags.unsafeMutableAddressor()
{
  return &static NSNotification.TagCollectionViewWillDeleteTags;
}

void sub_100214724(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  Class isa;

  v3 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "managedObjectContext");

    objc_msgSend(v5, "ic_save");
  }
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_shouldSendNotification) == 1)
  {
    v6 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v7 = String._bridgeToObjectiveC()();
    sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v6, "postNotificationName:object:", v7, isa);

  }
}

void *NSNotification.TagCollectionViewDidDeleteTags.unsafeMutableAddressor()
{
  return &static NSNotification.TagCollectionViewDidDeleteTags;
}

id sub_100214870(uint64_t a1)
{
  void *v1;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  void *v11;
  id v12;
  _QWORD v14[5];
  uint64_t v15;

  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v7 = v6;

  v8 = swift_allocObject(&unk_10055F510, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v1;
  swift_bridgeObjectRetain(a1);
  v9 = v1;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v14[4] = sub_10021513C;
  v15 = v8;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1002489AC;
  v14[3] = &unk_10055F528;
  v11 = _Block_copy(v14);
  swift_release(v15);
  v12 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v10, 2, v11);
  _Block_release(v11);

  return v12;
}

void sub_1002149F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  Class isa;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v47;
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  _QWORD *v52;

  v4 = (void *)objc_opt_self(ICFolder);
  sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
  v45 = a2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(v4, "smartFoldersThatWillBeDeletedAfterDeletingHashtags:", isa);

  v7 = sub_1000163BC(0, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
  v8 = sub_100215144();
  v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

  v10 = v9 & 0xC000000000000001;
  if ((v9 & 0xC000000000000001) == 0)
    goto LABEL_8;
  v11 = v9 & 0xFFFFFFFFFFFFFF8;
  if (v9 < 0)
    v12 = v9;
  else
    v12 = v9 & 0xFFFFFFFFFFFFFF8;
  v13 = __CocoaSet.count.getter(v12);
  v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    v15 = v13;
    v52 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v13);
    v49 = __CocoaSet.startIndex.getter(v12);
    v50 = v16;
    v51 = 1;
    if ((v15 & 0x8000000000000000) == 0)
    {
LABEL_10:
      v11 = v9 & 0xFFFFFFFFFFFFFF8;
      if (v9 < 0)
        v19 = v9;
      else
        v19 = v9 & 0xFFFFFFFFFFFFFF8;
      v47 = v19;
      do
      {
        while (1)
        {
          v25 = v11;
          v26 = v49;
          v27 = v50;
          v28 = v51;
          sub_100242F48(v49, v50, v51, v9);
          v30 = v29;
          v31 = objc_msgSend(v29, "objectID");

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v32 = v52[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v32);
          v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v31);
          specialized ContiguousArray._endMutation()(v33);
          if (v10)
            break;
          v20 = sub_1003CCBC0(v26, v27, v28, v9);
          v22 = v21;
          v24 = v23;
          sub_1001EDA28(v26, v27, v28);
          v49 = v20;
          v50 = v22;
          v51 = v24 & 1;
          v11 = v25;
          if (!--v15)
            goto LABEL_21;
        }
        if ((v28 & 1) == 0)
        {
          __break(1u);
          return;
        }
        v34 = __CocoaSet.Index.handleBitPattern.getter(v26, v27);
        if (v34)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v11 = v25;
        v36 = sub_100012E18(&qword_1005D4CD0);
        v37 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v48, v36);
        __CocoaSet.formIndex(after:isUnique:)(v38, isUniquelyReferenced_nonNull_native, v47);
        v37(v48, 0);
        --v15;
      }
      while (v15);
LABEL_21:
      sub_1001EDA28(v49, v50, v51);
      v14 = v52;
      if (!v10)
        goto LABEL_26;
      goto LABEL_22;
    }
    __break(1u);
LABEL_8:
    v15 = *(_QWORD *)(v9 + 16);
    v14 = _swiftEmptyArrayStorage;
    if (!v15)
    {
LABEL_26:
      v40 = *(_QWORD *)(v9 + 16);
      goto LABEL_27;
    }
    v52 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v15);
    v49 = sub_100242B90(v9);
    v50 = v17;
    v51 = v18 & 1;
    goto LABEL_10;
  }
LABEL_22:
  if (v9 < 0)
    v39 = v9;
  else
    v39 = v11;
  v40 = __CocoaSet.count.getter(v39);
LABEL_27:
  swift_bridgeObjectRelease(v9);
  if (v40)
  {
    v41 = sub_100213400((unint64_t)v14, v45);
    swift_bridgeObjectRelease(v14);
    if (v41)
    {
      v42 = *(void **)(a3 + OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_window);
      if (v42)
      {
        v43 = objc_msgSend(v42, "rootViewController");
        if (v43)
        {
          v44 = v43;
          objc_msgSend(v43, "presentViewController:animated:completion:", v41, 1, 0);

        }
      }

    }
  }
  else
  {
    sub_100213B04(v45, (uint64_t)v14);
    swift_bridgeObjectRelease(v14);
  }
}

void TagDeletionAlertController.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.TagDeletionAlertController", 38, "init()", 6, 0);
  __break(1u);
}

id TagDeletionAlertController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TagDeletionAlertController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TagDeletionAlertController()
{
  return objc_opt_self(_TtC11MobileNotes26TagDeletionAlertController);
}

unint64_t static NSNotification.TagCollectionViewWillDeleteTags.getter()
{
  return 0xD00000000000001FLL;
}

unint64_t static NSNotification.TagCollectionViewDidDeleteTags.getter()
{
  return 0xD00000000000001ELL;
}

id sub_100214EA4(void *a1, void *a2, void *a3, uint64_t a4)
{
  void *v4;
  void *v9;
  _BYTE *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  char *v17;
  id v18;
  id v19;
  id v20;
  objc_super v22;

  v9 = (void *)objc_opt_self(ICNoteContext);
  v10 = v4;
  v11 = objc_msgSend(v9, "sharedContext");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "workerManagedObjectContext");

  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)&v10[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_workerContext] = v13;
  v14 = objc_msgSend(v9, "sharedContext");
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "managedObjectContext");

  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)&v10[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_viewContext] = v16;
  v17 = &v10[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_deletionMethod];
  *(_QWORD *)v17 = 0;
  v17[8] = 0;
  v10[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_shouldSendNotification] = 1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_viewControllerManager] = a1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_window] = a2;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_eventReporter] = a3;
  *(_QWORD *)v17 = a4;
  v17[8] = 0;
  v18 = a3;
  v19 = a1;
  v20 = a2;

  v22.receiver = v10;
  v22.super_class = (Class)type metadata accessor for TagDeletionAlertController();
  return objc_msgSendSuper2(&v22, "init");
}

id sub_100215020()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  id v6;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v4 = v3;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v6 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v5, 1, 0);

  return v6;
}

uint64_t sub_100215110()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10021513C(uint64_t a1)
{
  uint64_t v1;

  sub_1002149F0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100215144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4C20;
  if (!qword_1005D4C20)
  {
    v1 = sub_1000163BC(255, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4C20);
  }
  return result;
}

uint64_t sub_10021519C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002151D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100214144(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1002151E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100215210(uint64_t a1)
{
  uint64_t v1;

  sub_100214724(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100215218()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100215254()
{
  uint64_t v0;

  sub_10021429C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100215260()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100215270()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1002152A4()
{
  uint64_t v0;

  sub_100213B04(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1002152F0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6B63656863;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6B636568636E75;
    else
      v4 = 0x656C67676F74;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE600000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6B636568636E75;
      else
        v2 = 0x656C67676F74;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE600000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE500000000000000;
    v4 = 0x6B63656863;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v4 != 0x6B63656863)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1002153F8(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 6579297;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x65766F6D6572;
    else
      v3 = 0x656C67676F74;
    v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 0x65766F6D6572;
      else
        v2 = 0x656C67676F74;
      v6 = 0xE600000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 6579297;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE300000000000000;
  if (v3 != 6579297)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1002154F0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 7105633;
  else
    v2 = 7958113;
  if ((a2 & 1) != 0)
    v3 = 7105633;
  else
    v3 = 7958113;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE300000000000000, v3, 0xE300000000000000, 0);
  swift_bridgeObjectRelease_n(0xE300000000000000, 2);
  return v4 & 1;
}

void sub_10021555C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100215594(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002155E8 + 4 * byte_10045C5A4[a2]))(1314344772);
}

uint64_t sub_1002155E8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1314344772 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1314344772, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_10021567C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002156C4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10021574C + 4 * byte_10045C5AD[a2]))(0x524F4C4F43);
}

uint64_t sub_10021574C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x524F4C4F43 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x524F4C4F43, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_10021581C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100215890(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100215910 + 4 * byte_10045C5B7[a2]))(0xD000000000000012);
}

uint64_t sub_100215910(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001004765B0;
  if (a1 == 0xD000000000000012 && v1 == 0x80000001004765B0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000012, 0x80000001004765B0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1002159C8(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x4C41434F4CLL;
  else
    v2 = 0x44554F4C43;
  if ((a2 & 1) != 0)
    v3 = 0x4C41434F4CLL;
  else
    v3 = 0x44554F4C43;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE500000000000000, v3, 0xE500000000000000, 0);
  swift_bridgeObjectRelease_n(0xE500000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100215A3C(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x656C62616E65;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x656C6261736964;
    else
      v4 = 0x656C67676F74;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE600000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x656C6261736964;
      else
        v2 = 0x656C67676F74;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE600000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x656C62616E65;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v4 != 0x656C62616E65)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_100215B44(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 0x4C414D524F4ELL;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x4853415254;
    else
      v3 = 0x5452414D53;
    v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 0x4853415254;
      else
        v2 = 0x5452414D53;
      v6 = 0xE500000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x4C414D524F4ELL;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE600000000000000;
  if (v3 != 0x4C414D524F4ELL)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100215C44(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x49444E4543534544;
  else
    v3 = 0x4E49444E45435341;
  if (v2)
    v4 = 0xE900000000000047;
  else
    v4 = 0xEA0000000000474ELL;
  if ((a2 & 1) != 0)
    v5 = 0x49444E4543534544;
  else
    v5 = 0x4E49444E45435341;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000474ELL;
  else
    v6 = 0xE900000000000047;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100215CF0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEA00000000005441;
  v3 = 0x5F44455441455243;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x4445494649444F4DLL;
    else
      v5 = 0x454C544954;
    if (v4 == 1)
      v6 = 0xEB0000000054415FLL;
    else
      v6 = 0xE500000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x5F44455441455243;
  v6 = 0xEA00000000005441;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x4445494649444F4DLL;
    else
      v3 = 0x454C544954;
    if (v7 == 1)
      v2 = 0xEB0000000054415FLL;
    else
      v2 = 0xE500000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_100215E10(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x57454956455250;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x49414E424D554854;
    else
      v4 = 0x4D554944454DLL;
    if (v3 == 1)
      v5 = 0xE90000000000004CLL;
    else
      v5 = 0xE600000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x49414E424D554854;
      else
        v2 = 0x4D554944454DLL;
      if (v6 == 1)
        v7 = 0xE90000000000004CLL;
      else
        v7 = 0xE600000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x57454956455250;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x57454956455250)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_100215F28(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100215F68(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10021601C + 4 * byte_10045C5C3[a2]))(0x52475F4C4C414D53);
}

uint64_t sub_10021601C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x52475F4C4C414D53 && v1 == 0xEA00000000004449)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x52475F4C4C414D53, 0xEA00000000004449, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000004449);
  return v2 & 1;
}

uint64_t sub_100216104(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x544847494CLL;
  else
    v3 = 0x544C5541464544;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x544847494CLL;
  else
    v5 = 0x544C5541464544;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1002161A4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65766F6D6572;
  else
    v3 = 6579297;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x65766F6D6572;
  else
    v5 = 6579297;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10021623C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002162A0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002162F4 + 4 * byte_10045C5CE[a2]))(0x6C6C616D73);
}

uint64_t sub_1002162F4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C6C616D73 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C6C616D73, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_100216390(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x776569567473696CLL;
  else
    v3 = 0x567972656C6C6167;
  if (v2)
    v4 = 0xEB00000000776569;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x776569567473696CLL;
  else
    v5 = 0x567972656C6C6167;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEB00000000776569;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10021643C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100216488(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_1002164E8 + 4 * byte_10045C5D7[a2]))();
}

uint64_t sub_1002164E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;

  v4 = 0x8000000100476930;
  if (a1 == a3 && v3 == 0x8000000100476930)
  {
    v5 = 1;
    v4 = v3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, 0x8000000100476930, 0);
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return v5 & 1;
}

void sub_10021657C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002165D8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100216644 + 4 * byte_10045C5E0[a2]))(0x65746F4E6874616DLL);
}

uint64_t sub_100216644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x65746F4E6874616DLL && v2 == v1)
  {
    v3 = 1;
    v1 = v2;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, 0x65746F4E6874616DLL, v1, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return v3 & 1;
}

void sub_1002166F8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100216748(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1002167CC + 4 * byte_10045C5E9[a2]))(0x5F4F545F5446454CLL);
}

uint64_t sub_1002167CC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x5F4F545F5446454CLL && v1 == 0xED00005448474952)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x5F4F545F5446454CLL, 0xED00005448474952, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xED00005448474952);
  return v2 & 1;
}

void sub_10021688C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002168D4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100216930 + 4 * byte_10045C5F3[a2]))(1263421776);
}

uint64_t sub_100216930(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1263421776 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1263421776, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_1002169D4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100216A14(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100216A8C + 4 * byte_10045C5FD[a2]))(0x5245544E4543);
}

uint64_t sub_100216A8C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x5245544E4543 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x5245544E4543, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_100216B4C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_100216B9C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100216C18 + 4 * byte_10045C607[a2]))(0xD000000000000014);
}

uint64_t sub_100216C18(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x8000000100476740;
  if (a1 == 0xD000000000000014 && v1 == 0x8000000100476740)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000014, 0x8000000100476740, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_100216CD4(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x694C7265646C6F66;
  else
    v3 = 0xD000000000000011;
  if (v2)
    v4 = 0x80000001004769B0;
  else
    v4 = 0xEA00000000007473;
  if ((a2 & 1) != 0)
    v5 = 0x694C7265646C6F66;
  else
    v5 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000007473;
  else
    v6 = 0x80000001004769B0;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

_QWORD *sub_100216D80(uint64_t a1, void *a2, NSObject *a3, char *a4, void *a5)
{
  _QWORD *v8;

  v8 = sub_10021EEF8(a1, (uint64_t)a2, a3, a4, a5);

  return v8;
}

double static ICArchiveImporter.Configuration.default.getter()
{
  ICInternalSettingsIsAlexandriaDemoModeEnabled();
  ICInternalSettingsIsAlexandriaDemoModeEnabled();
  return 0.0;
}

uint64_t sub_100216E14()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D4CD8);
  sub_10012A0B0(v0, (uint64_t)qword_1005D4CD8);
  return static Logger.archiving.getter();
}

uint64_t sub_100216E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  sub_10012B334(v4, qword_1005D4CF0);
  sub_10012A0B0(v4, (uint64_t)qword_1005D4CF0);
  if (qword_1005CEB10 != -1)
    swift_once(&qword_1005CEB10, sub_100216E14);
  v5 = sub_10012A0B0(v0, (uint64_t)qword_1005D4CD8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

uint64_t ICArchiveImporter.Configuration.retainsIdentifiers.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t ICArchiveImporter.Configuration.importsRelativeTimestamps.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t ICArchiveImporter.Configuration.importsRelativeTimestamps.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*ICArchiveImporter.Configuration.importsRelativeTimestamps.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

void ICArchiveImporter.Configuration.timestampOffset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*InsertAllMentionIntent.insertionRange.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

id ICArchiveImporter.context.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_context);
}

double ICArchiveImporter.configuration.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  id v3;
  _BYTE v5[24];

  v1 = v0 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration, v5, 0, 0);
  v2 = *(double *)(v1 + 8);
  v3 = *(id *)(v1 + 16);
  return v2;
}

uint64_t ICArchiveImporter.fileManager.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager));
}

id ICArchiveImporter.__allocating_init(context:configuration:fileManager:)(void *a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  objc_class *v7;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a5);
  return sub_10021DF3C(a1, a2 & 0x101, a3, a4, a5, v7, ObjectType, a6, a7);
}

id ICArchiveImporter.init(context:configuration:fileManager:)(void *a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  _BYTE *v7;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a5);
  return sub_10021E128(a1, a2 & 0x101, a3, a4, a5, v7, a7, ObjectType, a6);
}

double sub_100217150()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  double result;
  _BYTE v7[24];
  _QWORD aBlock[3];
  void *ObjectType;
  void (*v10)(uint64_t);
  uint64_t v11;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v2 = swift_allocObject(&unk_10055F770, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16, v0);
  v10 = sub_10021FDFC;
  v11 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10036016C;
  ObjectType = &unk_10055F788;
  v3 = _Block_copy(aBlock);
  swift_release(v11);
  v4 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", UIApplicationDidReceiveMemoryWarningNotification, 0, 0, v3);
  _Block_release(v3);

  ObjectType = (void *)swift_getObjectType(v4);
  aBlock[0] = v4;
  v5 = v0 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarningObserver;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarningObserver, v7, 33, 0);
  sub_10021FE04((uint64_t)aBlock, v5);
  *(_QWORD *)&result = swift_endAccess(v7).n128_u64[0];
  return result;
}

void ICArchiveImporter.init()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v1
    && (v2 = v1,
        v3 = objc_msgSend(v1, "snapshotManagedObjectContext"),
        v2,
        v3))
  {
    objc_msgSend(v0, "initWithContext:", v3);

  }
  else
  {
    __break(1u);
  }
}

id ICArchiveImporter.__allocating_init(context:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;
  __int16 IsAlexandriaDemoModeEnabled;
  int v6;
  _BYTE *v7;
  __int16 v8;
  id v9;
  uint64_t ObjectType;

  v3 = objc_allocWithZone(v1);
  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v6 = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v7 = objc_allocWithZone(v1);
  if (v6)
    v8 = 256;
  else
    v8 = 0;
  v9 = sub_10021DFC4(a1, v8 | IsAlexandriaDemoModeEnabled, 0, 0, v4, v7, 0.0);
  ObjectType = swift_getObjectType(v3);
  swift_deallocPartialClassInstance(v3, ObjectType, 128, 7);
  return v9;
}

id ICArchiveImporter.init(context:)(void *a1)
{
  uint64_t v1;
  objc_class *ObjectType;
  id v4;
  __int16 IsAlexandriaDemoModeEnabled;
  int v6;
  _BYTE *v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v6 = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v7 = objc_allocWithZone(ObjectType);
  if (v6)
    v8 = 256;
  else
    v8 = 0;
  v9 = sub_10021DFC4(a1, v8 | IsAlexandriaDemoModeEnabled, 0, 0, v4, v7, 0.0);
  v10 = swift_getObjectType(v1);
  swift_deallocPartialClassInstance(v1, v10, 128, 7);
  return v9;
}

id ICArchiveImporter.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  objc_super v5;
  _BYTE v6[32];
  _BYTE v7[24];

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = (uint64_t)&v0[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarningObserver];
  swift_beginAccess(&v0[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarningObserver], v7, 0, 0);
  sub_100012CE8(v2, (uint64_t)v6, &qword_1005CF190);
  v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  sub_10021E28C((uint64_t)v6, v3);

  sub_100012DDC((uint64_t)v6, &qword_1005CF190);
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t ICArchiveImporter.Errors.errorDescription.getter(uint64_t a1)
{
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v6;

  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = String._bridgeToObjectiveC()();
      v3 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, 0, 0);

      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      return v4;
    default:
      v6 = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ICArchiveImporter.Errors, &v6, &type metadata for ICArchiveImporter.Errors, &type metadata for Int);
      __break(1u);
      JUMPOUT(0x100217A34);
  }
}

unint64_t ICCloudSyncingObject.MoveAction.Types.init(rawValue:)(unint64_t a1)
{
  return sub_10021F90C(a1);
}

unint64_t static ICArchiveImporter.Errors._nsErrorDomain.getter()
{
  return 0xD000000000000024;
}

Swift::Int sub_100217A7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD v6[10];

  v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_100217ADC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10021FC38();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

unint64_t sub_100217B14@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_10021F90C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100217B44()
{
  uint64_t *v0;

  return ICArchiveImporter.Errors.errorDescription.getter(*v0);
}

uint64_t sub_100217B4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10021FC38();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_100217B74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10021FC38();
  return _BridgedNSError._code.getter(a1, v2);
}

uint64_t sub_100217B9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10021FC38();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t ICArchiveImporter.errors.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_errors);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_errors, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t ICArchiveImporter.objects(forArchiveAt:)(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSURL *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_signpost_type_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint8_t *v42;
  os_signpost_id_t v43;
  os_signpost_type_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  char *v55;
  uint64_t v56;
  os_signpost_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  void (*v76)(char *, uint64_t *, uint64_t);
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  uint8_t *v85;
  os_signpost_id_t v86;
  void (*v87)(char *, uint64_t, uint64_t, uint64_t);
  id v88;
  char *v89;
  uint64_t v90;
  NSObject *v91;
  char *v92;
  uint64_t v93;
  os_signpost_type_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  os_signpost_type_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  const char *v112;
  void (*v113)(char *, uint64_t);
  char *v114;
  uint64_t v115;
  uint8_t *v116;
  os_signpost_id_t v117;
  uint64_t result;
  char *v119;
  char *v120;
  uint64_t v121;
  uint8_t *v122;
  os_signpost_id_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);

  v2 = type metadata accessor for OSSignpostError(0);
  v3 = *(_QWORD *)(v2 - 8);
  v133 = v2;
  v134 = v3;
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v129 = (char *)&v124 - v8;
  __chkstk_darwin(v7);
  v127 = (char *)&v124 - v9;
  v10 = sub_100012E18(&qword_1005D1A28);
  __chkstk_darwin(v10);
  v146 = (uint64_t *)((char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v139 = sub_100012E18(&qword_1005D3DA0);
  v151 = *(_QWORD *)(v139 - 8);
  v12 = __chkstk_darwin(v139);
  v144 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v137 = (char *)&v124 - v14;
  v15 = type metadata accessor for URL(0);
  v148 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v145 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v17);
  v147 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for OSSignpostID(0);
  v19 = *(_QWORD *)(v150 - 8);
  v20 = __chkstk_darwin(v150);
  v143 = (char *)&v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v130 = (char *)&v124 - v23;
  v24 = __chkstk_darwin(v22);
  v128 = (char *)&v124 - v25;
  v26 = __chkstk_darwin(v24);
  v138 = (char *)&v124 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v124 - v28;
  if (qword_1005CEB18 != -1)
    swift_once(&qword_1005CEB18, sub_100216E5C);
  v30 = type metadata accessor for OSSignposter(0);
  v31 = sub_10012A0B0(v30, (uint64_t)qword_1005D4CF0);
  v149 = a1;
  URL._bridgeToObjectiveC()(v32);
  v34 = v33;
  v35 = OSSignposter.logHandle.getter(v33);
  v36 = OSSignpostID.init(log:object:)(v35, v34);
  v37 = OSSignposter.logHandle.getter(v36);
  v38 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v131 = v31;
    v39 = v150;
    v142 = v6;
    v40 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v41 = v138;
    v40(v138, v29, v150);
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    v43 = OSSignpostID.rawValue.getter();
    v44 = v38;
    v45 = v41;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, v44, v43, "Objects for Archive", "", v42, 2u);
    swift_slowDealloc(v42, -1, -1);

    v46 = v39;
    v31 = v131;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v41, v46);
    v47 = v40;
    v6 = v142;
  }
  else
  {

    v47 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v45 = v138;
  }
  v135 = v19;
  v136 = v29;
  v132 = v47;
  v47(v45, v29, v150);
  v48 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  v49 = OSSignpostIntervalState.init(id:isOpen:)(v45, 1);
  v50 = *(_QWORD *)&v140[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v140[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager]);
  v52 = v152;
  v53 = dispatch thunk of ICFileManaging.subdirectoriesOfDirectory(at:)(v149, ObjectType, v50);
  v152 = v52;
  if (v52)
  {
    v54 = OSSignposter.logHandle.getter(v53);
    v55 = v143;
    v56 = OSSignpostIntervalState.signpostID.getter();
    v57 = static os_signpost_type_t.end.getter(v56);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v58 = swift_retain(v49);
      checkForErrorAndConsumeState(state:)(v58);
      swift_release(v49);
      v59 = v133;
      v60 = v134;
      v61 = v49;
      if ((*(unsigned int (**)(char *, uint64_t))(v134 + 88))(v6, v133) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v62 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v6, v59);
        v62 = "";
      }
      v84 = v150;
      v132(v45, v55, v150);
      v85 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v85 = 0;
      v86 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, v57, v86, "Objects for Archive", v62, v85, 2u);
      swift_slowDealloc(v85, -1, -1);

      v82 = *(void (**)(char *, uint64_t))(v135 + 8);
      v82(v55, v84);
      v82(v45, v84);
      v83 = v136;
      v49 = v61;
      goto LABEL_26;
    }

    v82 = *(void (**)(char *, uint64_t))(v135 + 8);
    v82(v55, v150);
LABEL_23:
    v83 = v136;
LABEL_26:
    swift_release(v49);
    v82(v83, v150);
    return (uint64_t)v82;
  }
  v63 = v53;
  v64 = *(_QWORD *)(v53 + 16);
  v126 = v49;
  v125 = v53;
  if (v64)
  {
    v131 = v31;
    v65 = v53 + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80));
    v141 = *(_QWORD *)(v148 + 72);
    v143 = *(char **)(v148 + 16);
    v142 = v140;
    swift_bridgeObjectRetain(v63);
    v149 = (char *)_swiftEmptyArrayStorage;
    v66 = v139;
    v67 = v147;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v143)(v67, v65, v15);
      v68 = v148;
      v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v148 + 56);
      v69(v67, 0, 1, v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v67, 1, v15) == 1)
      {
        v49 = v126;
        v88 = v140;
        goto LABEL_33;
      }
      v70 = v15;
      v71 = (uint64_t)v145;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v145, v67, v70);
      v72 = v146;
      v73 = v152;
      sub_100218954(v71, v146);
      v152 = v73;
      if (v73)
        break;
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v71, v70);
      v74 = v151;
      v15 = v70;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v151 + 48))(v72, 1, v66) == 1)
      {
        sub_100012DDC((uint64_t)v72, &qword_1005D1A28);
        v67 = v147;
      }
      else
      {
        v75 = v72;
        v76 = *(void (**)(char *, uint64_t *, uint64_t))(v74 + 32);
        v77 = v137;
        v76(v137, v75, v66);
        v76(v144, (uint64_t *)v77, v66);
        v78 = (unint64_t)v149;
        if ((swift_isUniquelyReferenced_nonNull_native(v149) & 1) == 0)
          v78 = sub_10016AA78(0, *(_QWORD *)(v78 + 16) + 1, 1, v78);
        v80 = *(_QWORD *)(v78 + 16);
        v79 = *(_QWORD *)(v78 + 24);
        v149 = (char *)v78;
        v67 = v147;
        if (v80 >= v79 >> 1)
          v149 = (char *)sub_10016AA78(v79 > 1, v80 + 1, 1, (unint64_t)v149);
        v81 = v149;
        *((_QWORD *)v149 + 2) = v80 + 1;
        v66 = v139;
        v76(&v81[((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80))+ *(_QWORD *)(v151 + 72) * v80], (uint64_t *)v144, v139);
      }
      v65 += v141;
      if (!--v64)
      {
        v49 = v126;
        v88 = v140;
        v69(v67, 1, 1, v70);
        goto LABEL_33;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v71, v70);

    swift_bridgeObjectRelease(v149);
    v90 = swift_bridgeObjectRelease_n(v125, 2);
    v91 = OSSignposter.logHandle.getter(v90);
    v92 = v128;
    v49 = v126;
    v93 = OSSignpostIntervalState.signpostID.getter();
    v94 = static os_signpost_type_t.end.getter(v93);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v95 = swift_retain(v49);
      v96 = v127;
      checkForErrorAndConsumeState(state:)(v95);
      swift_release(v49);
      v97 = v133;
      v98 = v134;
      if ((*(unsigned int (**)(char *, uint64_t))(v134 + 88))(v96, v133) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v99 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v98 + 8))(v96, v97);
        v99 = "";
      }
      v119 = v138;
      v120 = v128;
      v121 = v150;
      v132(v138, v128, v150);
      v122 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v122 = 0;
      v123 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v91, v94, v123, "Objects for Archive", v99, v122, 2u);
      swift_slowDealloc(v122, -1, -1);

      v82 = *(void (**)(char *, uint64_t))(v135 + 8);
      v82(v120, v121);
      v82(v119, v121);
      v83 = v136;
      goto LABEL_26;
    }

    v82 = *(void (**)(char *, uint64_t))(v135 + 8);
    v82(v92, v150);
    goto LABEL_23;
  }
  v87 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v148 + 56);
  v88 = v140;
  v89 = v140;
  swift_bridgeObjectRetain(v63);
  v149 = (char *)_swiftEmptyArrayStorage;
  v87(v147, 1, 1, v15);
LABEL_33:
  v100 = v152;
  swift_bridgeObjectRelease_n(v125, 2);

  v101 = v149;
  v153 = (void (*)(char *, uint64_t))v149;
  swift_bridgeObjectRetain(v149);
  sub_10016A7A0(&v153);
  v102 = v138;
  v103 = v134;
  v152 = v100;
  v104 = v130;
  if (!v100)
  {
    v105 = swift_bridgeObjectRelease(v101);
    v82 = v153;
    v106 = OSSignposter.logHandle.getter(v105);
    v107 = OSSignpostIntervalState.signpostID.getter();
    v108 = static os_signpost_type_t.end.getter(v107);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v109 = swift_retain(v49);
      v110 = v129;
      checkForErrorAndConsumeState(state:)(v109);
      swift_release(v49);
      v111 = v133;
      if ((*(unsigned int (**)(char *, uint64_t))(v103 + 88))(v110, v133) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v112 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v103 + 8))(v110, v111);
        v112 = "";
      }
      v114 = v130;
      v115 = v150;
      v132(v102, v130, v150);
      v116 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v116 = 0;
      v117 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v106, v108, v117, "Objects for Archive", v112, v116, 2u);
      swift_slowDealloc(v116, -1, -1);

      v113 = *(void (**)(char *, uint64_t))(v135 + 8);
      v113(v114, v115);
      v113(v102, v115);
      v49 = v126;
    }
    else
    {

      v113 = *(void (**)(char *, uint64_t))(v135 + 8);
      v113(v104, v150);
    }
    swift_release(v49);
    v113(v136, v150);
    return (uint64_t)v82;
  }
  result = swift_release(v153);
  __break(1u);
  return result;
}

uint64_t sub_100218954@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  os_log_type_t v74;
  uint64_t v75;
  char *v76;
  uint8_t *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  const char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD v121[2];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  char *v135;
  void (*v136)(char *, unint64_t, uint64_t);
  void (*v137)(char *, uint64_t);
  _QWORD *v138;
  char *v139;
  char *v140;
  char *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;

  v127 = a2;
  v4 = sub_100012E18(&qword_1005D1A28);
  __chkstk_darwin(v4);
  v141 = (char *)v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005D3DA0);
  v143 = *(_QWORD *)(v6 - 8);
  v144 = v6;
  v7 = __chkstk_darwin(v6);
  v139 = (char *)v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v131 = (char *)v121 - v9;
  v10 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v10);
  v12 = (char *)v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD **)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v125 = (char *)v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v126 = (char *)v121 - v18;
  v19 = __chkstk_darwin(v17);
  v140 = (char *)v121 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)v121 - v22;
  v24 = URL.deletingPathExtension()(v21);
  v128 = URL.lastPathComponent.getter(v24);
  v26 = v25;
  v27 = (void (*)(char *, uint64_t))v14[1];
  v27(v23, v13);
  v129 = v2;
  v28 = &v2[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager];
  v29 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager];
  v30 = *(_QWORD *)&v129[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)v28);
  v130 = a1;
  v32 = v145;
  v33 = dispatch thunk of ICFileManaging.subdirectoriesOfDirectory(at:)(a1, ObjectType, v30);
  v145 = v32;
  if (v32)
    return swift_bridgeObjectRelease(v26);
  v137 = v27;
  v121[1] = ObjectType;
  v121[0] = v29;
  v124 = v26;
  v138 = v14;
  v132 = v13;
  v35 = *(_QWORD *)(v33 + 16);
  if (!v35)
  {
    v36 = v138;
    v53 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v138[7];
    v54 = v129;
    v55 = v33;
    v56 = v129;
    v57 = v55;
    swift_bridgeObjectRetain(v55);
    v58 = _swiftEmptyArrayStorage;
    v39 = v132;
    goto LABEL_20;
  }
  v122 = v30;
  v36 = v138;
  v37 = v33 + ((*((unsigned __int8 *)v36 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v36 + 80));
  v134 = v138[9];
  v136 = (void (*)(char *, unint64_t, uint64_t))v138[2];
  v38 = v33;
  v135 = v129;
  v123 = v38;
  swift_bridgeObjectRetain(v38);
  v142 = _swiftEmptyArrayStorage;
  v39 = v132;
  v40 = v145;
  v42 = v140;
  v41 = (uint64_t)v141;
  do
  {
    v136(v12, v37, v39);
    v133 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v36[7];
    v133(v12, 0, 1, v39);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v36[6])(v12, 1, v39) == 1)
    {
      v145 = v40;
      v59 = v124;
      v60 = v128;
      v54 = v129;
      v30 = v122;
      v61 = v123;
      v58 = v142;
      goto LABEL_21;
    }
    ((void (*)(char *, char *, uint64_t))v36[4])(v42, v12, v39);
    sub_100218954(v42);
    if (v40)
    {
      v137(v42, v39);

      swift_bridgeObjectRelease(v124);
      swift_bridgeObjectRelease(v142);
      return swift_bridgeObjectRelease_n(v123, 2);
    }
    v43 = v12;
    v137(v42, v39);
    v44 = v143;
    v45 = v144;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v41, 1, v144) == 1)
    {
      sub_100012DDC(v41, &qword_1005D1A28);
      v36 = v138;
      v42 = v140;
      v12 = v43;
    }
    else
    {
      v46 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
      v47 = v131;
      v46(v131, v141, v45);
      v46(v139, v47, v45);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v142);
      v145 = 0;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v42 = v140;
        v12 = v43;
        v49 = (unint64_t)v142;
      }
      else
      {
        v49 = sub_10016AA78(0, v142[2] + 1, 1, (unint64_t)v142);
        v42 = v140;
        v12 = v43;
      }
      v51 = *(_QWORD *)(v49 + 16);
      v50 = *(_QWORD *)(v49 + 24);
      if (v51 >= v50 >> 1)
        v49 = sub_10016AA78(v50 > 1, v51 + 1, 1, v49);
      *(_QWORD *)(v49 + 16) = v51 + 1;
      v52 = (*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
      v142 = (_QWORD *)v49;
      v46((char *)(v49 + v52 + *(_QWORD *)(v143 + 72) * v51), v139, v144);
      v40 = v145;
      v39 = v132;
      v36 = v138;
      v41 = (uint64_t)v141;
    }
    v37 += v134;
    --v35;
  }
  while (v35);
  v145 = v40;
  v30 = v122;
  v54 = v129;
  v57 = v123;
  v58 = v142;
  v53 = v133;
LABEL_20:
  v53(v12, 1, 1, v39);
  v59 = v124;
  v60 = v128;
  v61 = v57;
LABEL_21:
  swift_bridgeObjectRelease_n(v61, 2);

  v148 = v58;
  swift_bridgeObjectRetain(v58);
  v62 = v145;
  sub_10016A7A0(&v148);
  if (v62)
  {
    result = swift_release(v148);
    __break(1u);
    return result;
  }
  v63 = swift_bridgeObjectRelease(v58);
  v142 = v148;
  v65 = URL.pathExtension.getter(v63);
  v66 = v64;
  if (v65 == 0x6372617365746F6ELL && v64 == 0xEC00000065766968
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6372617365746F6ELL, 0xEC00000065766968, v65, v64, 0) & 1) != 0)
  {
    swift_release(v142);
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v66);
    if (qword_1005CEB10 != -1)
      swift_once(&qword_1005CEB10, sub_100216E14);
    v67 = type metadata accessor for Logger(0);
    sub_10012A0B0(v67, (uint64_t)qword_1005D4CD8);
    v68 = (uint64_t (*)(char *, uint64_t, uint64_t))v36[2];
    v69 = v126;
    v70 = v132;
    v71 = v68(v126, v130, v132);
    v72 = Logger.logObject.getter(v71);
    v74 = static os_log_type_t.error.getter(v72, v73);
    if (os_log_type_enabled(v72, v74))
    {
      v75 = swift_slowAlloc(12, -1);
      v145 = 0;
      v76 = v69;
      v77 = (uint8_t *)v75;
      v78 = (_QWORD *)swift_slowAlloc(32, -1);
      v148 = v78;
      *(_DWORD *)v77 = 136315138;
      v79 = URL.pathExtension.getter(v78);
      v81 = v80;
      v146 = sub_1003A4190(v79, v80, (uint64_t *)&v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v77 + 4);
      swift_bridgeObjectRelease(v81);
      v137(v76, v70);
      v82 = "Archive object type not supported inside archive — skipping {pathExtension: %s}";
      goto LABEL_29;
    }
LABEL_58:
    v137(v69, v70);
    goto LABEL_59;
  }
  if (v65 == 0x746E756F636361 && v66 == 0xE700000000000000)
  {
    v83 = 0xE700000000000000;
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F636361, 0xE700000000000000, v65, v66, 0) & 1) == 0)
  {
    if (v65 == 0x7265646C6F66 && v66 == 0xE600000000000000)
    {
      v95 = 0xE600000000000000;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265646C6F66, 0xE600000000000000, v65, v66, 0) & 1) == 0)
      {
        if (v65 == 1702129518 && v66 == 0xE400000000000000)
        {
          v103 = 0xE400000000000000;
        }
        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702129518, 0xE400000000000000, v65, v66, 0) & 1) == 0)
          {
            if (v65 == 0x656D686361747461 && v66 == 0xEA0000000000746ELL)
            {
              swift_bridgeObjectRelease(0xEA0000000000746ELL);
            }
            else
            {
              v111 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D686361747461, 0xEA0000000000746ELL, v65, v66, 0);
              swift_bridgeObjectRelease(v66);
              if ((v111 & 1) == 0)
              {
                swift_release(v142);
                swift_bridgeObjectRelease(v59);
                if (qword_1005CEB10 != -1)
                  swift_once(&qword_1005CEB10, sub_100216E14);
                v112 = type metadata accessor for Logger(0);
                sub_10012A0B0(v112, (uint64_t)qword_1005D4CD8);
                v113 = (uint64_t (*)(char *, uint64_t, uint64_t))v36[2];
                v69 = v125;
                v70 = v132;
                v114 = v113(v125, v130, v132);
                v72 = Logger.logObject.getter(v114);
                v74 = static os_log_type_t.error.getter(v72, v115);
                if (!os_log_type_enabled(v72, v74))
                  goto LABEL_58;
                v116 = swift_slowAlloc(12, -1);
                v145 = 0;
                v117 = v69;
                v77 = (uint8_t *)v116;
                v78 = (_QWORD *)swift_slowAlloc(32, -1);
                v148 = v78;
                *(_DWORD *)v77 = 136315138;
                v118 = URL.pathExtension.getter(v78);
                v120 = v119;
                v146 = sub_1003A4190(v118, v119, (uint64_t *)&v148);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v77 + 4);
                swift_bridgeObjectRelease(v120);
                v137(v117, v70);
                v82 = "Unknown object type — skipping {pathExtension: %s}";
LABEL_29:
                _os_log_impl((void *)&_mh_execute_header, v72, v74, v82, v77, 0xCu);
                swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v78, -1, -1);
                swift_slowDealloc(v77, -1, -1);
LABEL_59:

                return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v143 + 56))(v127, 1, 1, v144);
              }
            }
            v148 = _swiftEmptyArrayStorage;
            sub_100137028(0, 5, 0);
            v122 = v30;
            v145 = 0;
            __asm { BR              X10; loc_100219590 }
          }
          v103 = v66;
        }
        swift_bridgeObjectRelease(v103);
        v104 = sub_100012E18(&qword_1005D4DC0);
        v106 = swift_allocBox(v104, v105);
        v108 = v107;
        v109 = (uint64_t *)(v107 + *(int *)(v104 + 48));
        v110 = *(int *)(v104 + 64);
        ((void (*)(uint64_t, uint64_t, uint64_t))v138[2])(v107, v130, v132);
        *v109 = v60;
        v109[1] = v59;
        *(_QWORD *)(v108 + v110) = v142;
        v91 = v127;
        *v127 = v106;
        v92 = (unsigned int *)&enum case for ICObjectReferences.note<A>(_:);
        goto LABEL_36;
      }
      v95 = v66;
    }
    swift_bridgeObjectRelease(v95);
    v96 = sub_100012E18(&qword_1005D4DD0);
    v98 = swift_allocBox(v96, v97);
    v100 = v99;
    v101 = (uint64_t *)(v99 + *(int *)(v96 + 48));
    v102 = *(int *)(v96 + 64);
    ((void (*)(uint64_t, uint64_t, uint64_t))v138[2])(v99, v130, v132);
    *v101 = v60;
    v101[1] = v59;
    *(_QWORD *)(v100 + v102) = v142;
    v91 = v127;
    *v127 = v98;
    v92 = (unsigned int *)&enum case for ICObjectReferences.folder<A>(_:);
    goto LABEL_36;
  }
  v83 = v66;
LABEL_35:
  swift_bridgeObjectRelease(v83);
  v84 = sub_100012E18(&qword_1005D4DD0);
  v86 = swift_allocBox(v84, v85);
  v88 = v87;
  v89 = (uint64_t *)(v87 + *(int *)(v84 + 48));
  v90 = *(int *)(v84 + 64);
  ((void (*)(uint64_t, uint64_t, uint64_t))v138[2])(v87, v130, v132);
  *v89 = v60;
  v89[1] = v59;
  *(_QWORD *)(v88 + v90) = v142;
  v91 = v127;
  *v127 = v86;
  v92 = (unsigned int *)&enum case for ICObjectReferences.account<A>(_:);
LABEL_36:
  v94 = v143;
  v93 = v144;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v143 + 104))(v91, *v92, v144);
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
}

uint64_t ICArchiveImporter.importArchive(at:intoNoteContainerWithId:progress:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[5] = a3;
  v4[3] = a2;
  v4[4] = a1;
  return NSManagedObjectContext.performAndWait<A>(_:)(sub_10021F91C, v4, (char *)&type metadata for () + 8);
}

void sub_100219A70(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  uint64_t v4;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v7 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_context), "ic_existingObjectWithID:", a2);
  if (!v7)
    goto LABEL_10;
  v8 = v7;
  v9 = objc_opt_self(ICNoteContainer);
  v10 = swift_dynamicCastObjCClass(v8, v9);
  if (!v10)
  {

LABEL_10:
    __break(1u);
    return;
  }
  v11 = (void *)v10;
  v12 = ICArchiveImporter.objects(forArchiveAt:)(a3);
  if (!v4)
  {
    v13 = v12;
    if (a4)
      v14 = a4;
    else
      v14 = objc_msgSend(objc_allocWithZone((Class)NSProgress), "init");
    v15 = a4;
    ICArchiveImporter.importObjects(_:fromArchiveAt:into:progress:)(v13, (uint64_t)a3, v11, v14);

    swift_bridgeObjectRelease(v13);
  }

}

uint64_t ICArchiveImporter.importObjects(_:fromArchiveAt:into:progress:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  void *v66;
  id v67;
  id v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  NSURL *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_signpost_type_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint8_t *v83;
  os_signpost_id_t v84;
  uint8_t *v85;
  void (*v86)(char *, char *, uint64_t);
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  int64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  os_signpost_type_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t ObjectType;
  char *v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  uint8_t *v137;
  os_signpost_id_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t result;
  _QWORD v145[13];
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  void (*v162)(char *, char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD v183[4];
  char v184[8];

  v5 = v4;
  v172 = a4;
  v173 = a1;
  v174 = a2;
  v7 = type metadata accessor for OSSignpostError(0);
  v164 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v145[1] = (char *)v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v145[5] = (char *)v145 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v145 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v145 - v16;
  v18 = __chkstk_darwin(v15);
  v152 = (char *)v145 - v19;
  v20 = __chkstk_darwin(v18);
  v153 = (char *)v145 - v21;
  v22 = __chkstk_darwin(v20);
  v157 = (char *)v145 - v23;
  v24 = __chkstk_darwin(v22);
  v145[11] = (char *)v145 - v25;
  __chkstk_darwin(v24);
  v145[0] = (char *)v145 - v26;
  v27 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v27);
  v145[12] = (char *)v145 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for Date(0);
  v171 = *(_QWORD *)(v146 - 8);
  v29 = __chkstk_darwin(v146);
  v145[10] = (char *)v145 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v145[9] = (char *)v145 - v31;
  v32 = type metadata accessor for ICArchiveModel(0);
  __chkstk_darwin(v32);
  v155 = (_QWORD *)((char *)v145 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v160 = type metadata accessor for URL(0);
  v159 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v161 = (char *)v145 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100012E18(&qword_1005D3DA0);
  v36 = *(_QWORD *)(v35 - 8);
  v180 = v35;
  v181 = v36;
  __chkstk_darwin(v35);
  v179 = (char *)v145 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for OSSignpostID(0);
  v176 = *(_QWORD *)(v38 - 8);
  v177 = v38;
  v39 = __chkstk_darwin(v38);
  v145[3] = (char *)v145 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v145[8] = (char *)v145 - v42;
  v43 = __chkstk_darwin(v41);
  v147 = (char *)v145 - v44;
  v45 = __chkstk_darwin(v43);
  v154 = (char *)v145 - v46;
  v47 = __chkstk_darwin(v45);
  v158 = (char *)v145 - v48;
  v49 = __chkstk_darwin(v47);
  v165 = (char *)v145 - v50;
  v51 = __chkstk_darwin(v49);
  v149 = (char *)v145 - v52;
  v53 = __chkstk_darwin(v51);
  v145[2] = (char *)v145 - v54;
  v55 = __chkstk_darwin(v53);
  v148 = (char *)v145 - v56;
  v57 = __chkstk_darwin(v55);
  v59 = (char *)v145 - v58;
  __chkstk_darwin(v57);
  v61 = (char *)v145 - v60;
  v62 = OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_isImporting;
  v178 = v5;
  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_isImporting) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v156 = v32;
    v145[7] = v17;
    v163 = v7;
    v170 = a3;
    v63 = objc_msgSend(a3, "managedObjectContext");
    if (!v63)
    {
      __break(1u);
      JUMPOUT(0x10021B764);
    }
    v64 = v63;
    v65 = v178;
    v66 = *(void **)(v178 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_context);
    sub_1000163BC(0, (unint64_t *)&unk_1005D39D0, NSManagedObjectContext_ptr);
    v67 = v66;
    v68 = v64;
    v69 = static NSObject.== infix(_:_:)(v68);

    v145[4] = v67;
    if ((v69 & 1) != 0)
    {
      *(_BYTE *)(v65 + v62) = 1;
      if (qword_1005CEB18 == -1)
        goto LABEL_5;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_40:
  swift_once(&qword_1005CEB18, sub_100216E5C);
LABEL_5:
  v70 = type metadata accessor for OSSignposter(0);
  v71 = sub_10012A0B0(v70, (uint64_t)qword_1005D4CF0);
  URL._bridgeToObjectiveC()(v72);
  v74 = v73;
  v75 = OSSignposter.logHandle.getter(v73);
  v76 = OSSignpostID.init(log:object:)(v75, v74);
  v166 = v71;
  v77 = OSSignposter.logHandle.getter(v76);
  v78 = static os_signpost_type_t.begin.getter();
  v79 = OS_os_log.signpostsEnabled.getter();
  v175 = v59;
  v145[6] = v14;
  if ((v79 & 1) != 0)
  {
    v80 = v176;
    v81 = v177;
    v82 = *(void (**)(char *, char *, uint64_t))(v176 + 16);
    v82(v59, v61, v177);
    v83 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v83 = 0;
    v84 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v77, v78, v84, "Import Objects from Archive", "", v83, 2u);
    v85 = v83;
    v59 = v175;
    swift_slowDealloc(v85, -1, -1);

    (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v81);
    v86 = v82;
  }
  else
  {

    v81 = v177;
    v86 = *(void (**)(char *, char *, uint64_t))(v176 + 16);
  }
  v87 = v170;
  v162 = v86;
  v86(v59, v61, v81);
  v88 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
  v169 = OSSignpostIntervalState.init(id:isOpen:)(v59, 1);
  v89 = v178;
  v90 = (uint64_t *)(v178 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_errors);
  swift_beginAccess(v178 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_errors, v184, 1, 0);
  v91 = *v90;
  *v90 = (uint64_t)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v91);
  v183[3] = sub_1000163BC(0, &qword_1005D4D38, ICNoteContainer_ptr);
  v183[0] = v87;
  v92 = v87;
  v93 = (void *)sub_10016A0B0((uint64_t)v183);
  v95 = v94;
  sub_1000153C0(v183);
  v96 = v89 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration;
  swift_beginAccess(v89 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration, v183, 1, 0);
  v97 = *(void **)(v96 + 16);
  *(_QWORD *)(v96 + 16) = v93;
  *(_QWORD *)(v96 + 24) = v95;
  v151 = v96;
  v170 = v93;

  v98 = v173;
  v99 = *(_QWORD *)(v173 + 16);
  v168 = v62;
  v167 = v61;
  v150 = v95;
  if (v99)
  {
    v182 = _swiftEmptyArrayStorage;
    sub_10013723C(0, v99, 0);
    v100 = v182;
    v101 = v98 + ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80));
    v102 = *(_QWORD *)(v181 + 72);
    v103 = *(void (**)(char *, uint64_t, uint64_t))(v181 + 16);
    do
    {
      v104 = v179;
      v105 = v180;
      v103(v179, v101, v180);
      v106 = ICObjectReferences.recursiveNoteCount.getter(v105);
      (*(void (**)(char *, uint64_t))(v181 + 8))(v104, v105);
      if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
      {
        sub_10013723C(0, v100[2] + 1, 1);
        v100 = v182;
      }
      v108 = v100[2];
      v107 = v100[3];
      v109 = v108 + 1;
      if (v108 >= v107 >> 1)
      {
        sub_10013723C(v107 > 1, v108 + 1, 1);
        v100 = v182;
      }
      v100[2] = v109;
      v100[v108 + 4] = v106;
      v101 += v102;
      --v99;
    }
    while (v99);
  }
  else
  {
    v100 = _swiftEmptyArrayStorage;
    v109 = _swiftEmptyArrayStorage[2];
    if (!v109)
    {
      v111 = 0;
      goto LABEL_21;
    }
  }
  v110 = 0;
  v111 = 0;
  do
  {
    v112 = v100[v110 + 4];
    v113 = __OFADD__(v111, v112);
    v111 = (_QWORD *)((char *)v111 + v112);
    if (v113)
    {
      __break(1u);
      JUMPOUT(0x10021AA60);
    }
    ++v110;
  }
  while (v109 != v110);
  v81 = v177;
LABEL_21:
  swift_bridgeObjectRelease(v100);
  if (qword_1005CEB10 != -1)
    swift_once(&qword_1005CEB10, sub_100216E14);
  v114 = type metadata accessor for Logger(0);
  v115 = sub_10012A0B0(v114, (uint64_t)qword_1005D4CD8);
  v116 = Logger.logObject.getter(v115);
  v117 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v116, v117))
  {
    v118 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v118 = 134217984;
    v182 = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v118 + 4);
    _os_log_impl((void *)&_mh_execute_header, v116, v117, "Importing archive… {noteCount: %ld}", v118, 0xCu);
    swift_slowDealloc(v118, -1, -1);
  }

  v119 = v172;
  NSProgress.throwIfCancelled()();
  if (!v120)
  {
    objc_msgSend(v119, "setTotalUnitCount:", v111);
    v132 = *(_QWORD *)(v178 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)(v178 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager));
    v134 = v161;
    URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
    v139 = dispatch thunk of ICFileManaging.contents(of:)(v134, ObjectType, v132);
    v141 = v140;
    (*(void (**)(char *, uint64_t))(v159 + 8))(v134, v160);
    if (qword_1005CECD8 != -1)
      swift_once(&qword_1005CECD8, sub_1003345CC);
    v142 = sub_100019C6C(&qword_1005D4D40, type metadata accessor for ICArchiveModel, (uint64_t)&unk_100467760);
    v143 = v155;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v155, v156, v139, v141, v156, v142);
    __asm { BR              X13 }
  }

  v122 = OSSignposter.logHandle.getter(v121);
  v123 = v165;
  v124 = v169;
  v125 = OSSignpostIntervalState.signpostID.getter();
  v126 = static os_signpost_type_t.end.getter(v125);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v127 = swift_retain(v124);
    v128 = v157;
    checkForErrorAndConsumeState(state:)(v127);
    swift_release(v124);
    v129 = v164;
    v130 = v163;
    if ((*(unsigned int (**)(char *, uint64_t))(v164 + 88))(v128, v163) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v131 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v129 + 8))(v128, v130);
      v131 = "";
    }
    v136 = v175;
    v162(v175, v123, v81);
    v137 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v137 = 0;
    v138 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v122, v126, v138, "Import Objects from Archive", v131, v137, 2u);
    swift_slowDealloc(v137, -1, -1);

    v135 = *(void (**)(char *, uint64_t))(v176 + 8);
    v135(v123, v81);
    v135(v136, v81);
  }
  else
  {

    v135 = *(void (**)(char *, uint64_t))(v176 + 8);
    v135(v123, v81);
  }
  swift_release(v124);
  result = ((uint64_t (*)(char *, uint64_t))v135)(v167, v81);
  *(_BYTE *)(v178 + v168) = 0;
  return result;
}

_QWORD *sub_10021B8D8(uint64_t a1, void *a2, char *a3, void *a4)
{
  void *v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;

  result = sub_100216D80(a1, v4, a2, a3, a4);
  v7 = result;
  if (!v5)
  {
    v8 = result[2];
    if (v8)
    {
      swift_bridgeObjectRetain(result);
      v9 = _swiftEmptyArrayStorage;
      v22 = v7;
      v10 = v7 + 7;
      do
      {
        v12 = *((_QWORD *)v10 - 3);
        if ((*v10 & 1) != 0)
        {
          v23 = (void *)*((_QWORD *)v10 - 3);
          v11 = sub_100012E18(&qword_1005D7A90);
          swift_willThrowTypedImpl(&v23, v11, &protocol self-conformance witness table for Error);
        }
        else
        {
          v14 = *((_QWORD *)v10 - 2);
          v13 = (void *)*((_QWORD *)v10 - 1);
          swift_bridgeObjectRetain(v14);
          v15 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_10016B050(0, v9[2] + 1, 1, v9);
          v17 = v9[2];
          v16 = v9[3];
          if (v17 >= v16 >> 1)
            v9 = sub_10016B050((_QWORD *)(v16 > 1), v17 + 1, 1, v9);
          v9[2] = v17 + 1;
          v18 = &v9[3 * v17];
          v18[4] = v12;
          v18[5] = v14;
          v18[6] = v15;
        }
        v10 += 32;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease_n(v22, 2);
    }
    else
    {
      swift_bridgeObjectRelease(result);
      v9 = _swiftEmptyArrayStorage;
    }
    v19 = sub_1002B01C0((uint64_t)v9);
    swift_bridgeObjectRelease(v9);
    v20 = v19[2];
    if (v20)
    {
      sub_100012E18(&qword_1005D4DA8);
      v21 = (void *)static _DictionaryStorage.allocate(capacity:)(v20);
    }
    else
    {
      v21 = &_swiftEmptyDictionarySingleton;
    }
    v23 = v21;
    sub_10021E32C((uint64_t)v19, 1, &v23);
    swift_bridgeObjectRelease(v19);
    return v23;
  }
  return result;
}

uint64_t sub_10021BAF8(uint64_t a1, NSObject *a2, char *a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD **v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  void *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v90;
  uint64_t result;
  void **v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD **v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  int v117;
  double v118;
  uint64_t v119;
  void *v120;
  int v121;
  int v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  _QWORD **v143;
  char *v144;
  void *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  _QWORD *v152;
  NSObject *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  _OWORD v161[4];
  char v162[8];
  char v163;
  _QWORD v164[3];
  char v165[8];
  id v166;
  _OWORD v167[2];
  __int128 v168;
  __int128 v169;

  v154 = a3;
  v153 = a2;
  v159 = a1;
  v148 = type metadata accessor for ICAttachmentArchiveModel(0);
  __chkstk_darwin(v148);
  v149 = (char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for ICNoteArchiveModel(0);
  __chkstk_darwin(v147);
  v150 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for ICFolderArchiveModel(0);
  __chkstk_darwin(v151);
  v152 = (uint64_t *)((char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v158 = sub_100012E18(&qword_1005D3DA0);
  v156 = *(_QWORD *)(v158 - 8);
  v8 = __chkstk_darwin(v158);
  v10 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v137 - v11;
  v13 = type metadata accessor for URL(0);
  v155 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v137 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v137 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v137 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v137 - v26;
  NSProgress.throwIfCancelled()();
  if (v28)
    return (uint64_t)v22;
  v143 = (_QWORD **)v12;
  v142 = v22;
  v139 = v19;
  v140 = v16;
  v146 = v10;
  v145 = a4;
  v29 = *(_QWORD *)(v157 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v157 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager));
  ICObjectReferences.identifier.getter(v158);
  URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
  v31 = v155;
  v32 = *(void (**)(char *, uint64_t))(v155 + 8);
  v144 = v25;
  v33 = v25;
  v34 = v32;
  v32(v33, v13);
  v35 = dispatch thunk of ICFileManaging.contents(of:)(v27, ObjectType, v29);
  v160 = v34;
  v37 = v36;
  v137 = v35;
  v34(v27, v13);
  v38 = v156;
  v39 = v143;
  v40 = v159;
  v41 = v158;
  (*(void (**)(_QWORD **, uint64_t, uint64_t))(v156 + 16))(v143, v159, v158);
  v42 = (*(uint64_t (**)(_QWORD **, uint64_t))(v38 + 88))(v39, v41);
  v43 = v13;
  v138 = v37;
  if (v42 == enum case for ICObjectReferences.account<A>(_:))
  {
    (*(void (**)(_QWORD **, uint64_t))(v38 + 96))(v39, v158);
    v44 = *v39;
    v45 = sub_100012E18(&qword_1005D4DD0);
    v152 = v44;
    v46 = swift_projectBox(v44);
    v151 = *(_QWORD *)(v46 + *(int *)(v45 + 64));
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v142, v46, v13);
    v47 = (uint64_t)v145;
    if (qword_1005CECD8 != -1)
      swift_once(&qword_1005CECD8, sub_1003345CC);
    v48 = sub_1002001B8();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v161, &type metadata for ICAccountArchiveModel, v137, v138, &type metadata for ICAccountArchiveModel, v48);
    v167[0] = v161[0];
    v167[1] = v161[1];
    v168 = v161[2];
    v169 = v161[3];
    v22 = (char *)sub_10021CD84((uint64_t)v167, v151, v104, v153, (uint64_t)v154, v47);
    v160(v142, v43);
    sub_10013DD30(v137, v138);
    sub_10021FCC0(v167);
    swift_release(v152);
    return (uint64_t)v22;
  }
  v141 = v13;
  if (v42 == enum case for ICObjectReferences.folder<A>(_:))
  {
    v92 = (void **)v143;
    (*(void (**)(_QWORD **, uint64_t))(v38 + 96))(v143, v158);
    v93 = (char *)*v92;
    v94 = sub_100012E18(&qword_1005D4DD0);
    v150 = v93;
    v155 = *(_QWORD *)(swift_projectBox(v93) + *(int *)(v94 + 64));
    if (qword_1005CECD8 != -1)
      swift_once(&qword_1005CECD8, sub_1003345CC);
    v95 = sub_100019C6C(&qword_1005D4DD8, type metadata accessor for ICFolderArchiveModel, (uint64_t)&unk_100463A9C);
    v96 = v152;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v152, v151, v137, v138, v151, v95);
    v115 = (unsigned __int8 *)(v157 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration);
    swift_beginAccess(v157 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration, v162, 0, 0);
    v116 = *v115;
    v117 = v115[1];
    v118 = *((double *)v115 + 1);
    v120 = (void *)*((_QWORD *)v115 + 2);
    v119 = *((_QWORD *)v115 + 3);
    if (v117)
      v121 = 256;
    else
      v121 = 0;
    v122 = v121 | v116;
    v123 = v120;
    v124 = (uint64_t)v96;
    v127 = sub_10033AD44((uint64_t)v153, (uint64_t)v154, v122, (uint64_t)v120, v119, v118);

    v128 = v127;
    v130 = sub_10021B8D8(v155, v128, &off_1005656D8, v145);

    sub_10021D994(v130, ICFolder_ptr, (void (*)(unint64_t, uint64_t, __n128))sub_10024C300);
    v132 = v131;
    swift_bridgeObjectRelease(v130);
    sub_10033B068(v128, v132);
    v134 = v133;
    swift_bridgeObjectRelease(v132);

    v135 = sub_10033B230((uint64_t)v128);
    swift_bridgeObjectRelease(v135);
    v22 = (char *)v96[1];
    swift_bridgeObjectRetain(*(_QWORD *)(v124 + 16));
    sub_10013DD30(v137, v138);
    sub_100145264(v124, type metadata accessor for ICFolderArchiveModel);
    v136 = (char *)&v168 + 8;
    goto LABEL_40;
  }
  v97 = v158;
  v98 = v143;
  if (v42 == enum case for ICObjectReferences.note<A>(_:))
  {
    (*(void (**)(_QWORD **, uint64_t))(v38 + 96))(v143, v158);
    v99 = *v98;
    v100 = sub_100012E18(&qword_1005D4DC0);
    v152 = v99;
    v101 = swift_projectBox(v99);
    v151 = *(_QWORD *)(v101 + *(int *)(v100 + 64));
    v102 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    v63 = v141;
    v102(v139, v101, v141);
    if (qword_1005CECD8 != -1)
      swift_once(&qword_1005CECD8, sub_1003345CC);
    v103 = sub_100019C6C(&qword_1005D4DC8, type metadata accessor for ICNoteArchiveModel, (uint64_t)&unk_10046864C);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v150, v147, v137, v138, v147, v103);
    v125 = (uint64_t)v150;
    v22 = sub_10021D09C((uint64_t)v150, v151, v126, (uint64_t)v153, v154, v145);
    sub_10013DD30(v137, v138);
    sub_100145264(v125, type metadata accessor for ICNoteArchiveModel);
    v129 = &v163;
    goto LABEL_39;
  }
  if (v42 == enum case for ICObjectReferences.attachment<A>(_:))
  {
    v151 = 0;
    (*(void (**)(_QWORD **, uint64_t))(v38 + 96))(v143, v158);
    v105 = *v98;
    v106 = sub_100012E18(&qword_1005D4DB8);
    v152 = v105;
    v107 = swift_projectBox(v105);
    v150 = *(char **)(v107 + *(int *)(v106 + 80));
    v108 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    v63 = v141;
    v108(v140, v107, v141);
    v109 = v149;
    v110 = v148;
    if (qword_1005CECD8 != -1)
      swift_once(&qword_1005CECD8, sub_1003345CC);
    v111 = sub_100019C6C(&qword_1005D42D8, type metadata accessor for ICAttachmentArchiveModel, (uint64_t)&unk_10045A7FC);
    v112 = v137;
    v113 = v138;
    v114 = v151;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v109, v110, v137, v138, v110, v111);
    v22 = (char *)v114;
    if (!v114)
    {
      v22 = sub_10021D618((uint64_t)v109, v150, (int64_t)v140, (char *)v153, v154, v145);
      sub_10013DD30(v137, v138);
      sub_100145264((uint64_t)v109, type metadata accessor for ICAttachmentArchiveModel);
      v129 = (char *)v164;
LABEL_39:
      v160(*((char **)v129 - 32), v63);
      v136 = (char *)&v169 + 8;
LABEL_40:
      swift_release(*((_QWORD *)v136 - 32));
      return (uint64_t)v22;
    }
    v160(v140, v63);
    sub_10013DD30(v112, v113);
    swift_release(v152);
    v155 = 0;
    *(_QWORD *)&v161[0] = v114;
    swift_errorRetain(v114);
    v49 = sub_100012E18(&qword_1005D7A90);
    v50 = sub_1000163BC(0, (unint64_t *)&unk_1005D6A80, NSError_ptr);
    if (!swift_dynamicCast(&v166, v161, v49, v50, 0))
    {
LABEL_14:
      swift_errorRelease(*(_QWORD *)&v161[0]);
      v64 = v146;
      if (qword_1005CEB10 != -1)
        swift_once(&qword_1005CEB10, sub_100216E14);
      v65 = type metadata accessor for Logger(0);
      sub_10012A0B0(v65, (uint64_t)qword_1005D4CD8);
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v64, v40, v97);
      swift_errorRetain(v114);
      v66 = swift_errorRetain(v114);
      v67 = Logger.logObject.getter(v66);
      v69 = static os_log_type_t.error.getter(v67, v68);
      v70 = v69;
      if (os_log_type_enabled(v67, v69))
      {
        v71 = swift_slowAlloc(22, -1);
        LODWORD(v154) = v70;
        v72 = v71;
        v158 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v161[0] = v158;
        *(_DWORD *)v72 = 136315394;
        swift_getErrorValue(v114, v165, v164);
        v153 = v67;
        v73 = Error.localizedDescription.getter(v164[1], v164[2]);
        v75 = v74;
        v166 = (id)sub_1003A4190(v73, v74, (uint64_t *)v161);
        v141 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v72 + 4);
        swift_bridgeObjectRelease(v75);
        swift_errorRelease(v114);
        swift_errorRelease(v114);
        *(_WORD *)(v72 + 12) = 2080;
        v152 = (_QWORD *)(v72 + 14);
        v76 = v114;
        v77 = (uint64_t)v144;
        ICObjectReferences.identifier.getter(v97);
        v78 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v79 = dispatch thunk of CustomStringConvertible.description.getter(v63, v78);
        v81 = v80;
        v82 = (void (*)(uint64_t, uint64_t))v160;
        v160((char *)v77, v63);
        v166 = (id)sub_1003A4190(v79, v81, (uint64_t *)v161);
        v83 = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v152);
        swift_bridgeObjectRelease(v81);
        (*(void (**)(char *, uint64_t))(v156 + 8))(v146, v97);
        v84 = v153;
        _os_log_impl((void *)&_mh_execute_header, v153, (os_log_type_t)v154, "Cannot import model {error: %s, containerID: %s}", (uint8_t *)v72, 0x16u);
        v85 = v158;
        swift_arrayDestroy(v158, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1, -1);
        v86 = v72;
        v87 = v141;
        swift_slowDealloc(v86, -1, -1);

      }
      else
      {
        swift_errorRelease(v114);
        swift_errorRelease(v114);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v64, v97);

        v76 = v114;
        v77 = (uint64_t)v144;
        v82 = (void (*)(uint64_t, uint64_t))v160;
        v87 = v63;
        v83 = v145;
      }
      ICObjectReferences.identifier.getter(v97);
      v88 = (_QWORD *)(v157 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_errors);
      swift_beginAccess(v157 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_errors, v161, 33, 0);
      swift_errorRetain(v76);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v88);
      v166 = (id)*v88;
      *v88 = 0x8000000000000000;
      sub_10024EA34(v76, v77, isUniquelyReferenced_nonNull_native);
      v90 = *v88;
      *v88 = v166;
      swift_bridgeObjectRelease(v90);
      v82(v77, v87);
      objc_msgSend(v83, "setCompletedUnitCount:", objc_msgSend(v83, "totalUnitCount", swift_endAccess(v161).n128_f64[0]));
      return v76;
    }
    v51 = v63;
    v52 = v166;
    v53 = objc_msgSend(v166, "domain");
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    v59 = v57;
    if (v54 == v58 && v56 == v57)
    {
      swift_bridgeObjectRelease_n(v56, 2);
      v60 = v52;
    }
    else
    {
      v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, v58, v57, 0);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v59);
      v60 = v52;
      if ((v61 & 1) == 0)
      {
LABEL_13:

        v63 = v51;
        goto LABEL_14;
      }
    }
    if (objc_msgSend(v60, "code") == (id)3072)
    {
      v62 = swift_errorRelease(v114);
      swift_willThrow(v62);
      swift_errorRelease(*(_QWORD *)&v161[0]);
      return (uint64_t)v22;
    }
    goto LABEL_13;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v158, v158);
  __break(1u);
  return result;
}

uint64_t sub_10021CD84(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v7;
  char *v8;
  double *v12;
  double v13;
  uint64_t v14;
  void *v15;
  __int16 v16;
  __int16 v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  char *v44;
  char v47[24];
  uint64_t v48;
  uint64_t v49;

  v8 = v6;
  v12 = (double *)&v8[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration];
  swift_beginAccess(&v8[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration], v47, 0, 0);
  v13 = v12[1];
  v15 = (void *)*((_QWORD *)v12 + 2);
  v14 = *((_QWORD *)v12 + 3);
  if (*((_BYTE *)v12 + 1))
    v16 = 256;
  else
    v16 = 0;
  v17 = v16 | *(unsigned __int8 *)v12;
  v18 = v15;
  v19 = v14;
  v20 = a1;
  v21 = sub_1001FEB7C(a4, a5, v17, (uint64_t)v15, v19, v13);
  if (v7)
  {

  }
  else
  {
    v23 = v21;

    v24 = objc_opt_self(ICAccount);
    v25 = swift_dynamicCastObjCClass(v23, v24);
    if (v25)
    {
      v26 = (void *)v25;
      v27 = v23;
      v32 = sub_10021B8D8(a2, v26, &off_1005656A0, a6);
      sub_10021D994(v32, ICFolder_ptr, (void (*)(unint64_t, uint64_t, __n128))sub_10024C300);
      v34 = v33;
      swift_bridgeObjectRelease(v32);
      sub_1001FED6C(v26, v34);
      v41 = v35;
      swift_bridgeObjectRelease(v34);

      sub_10021FD10(a1 + 48, (uint64_t)&v48);
      sub_10021FD10((uint64_t)&v48, (uint64_t)&v49);
      v42 = v49;
      if (v49)
      {
        v43 = v27;
        v44 = v8;
        sub_10021FD58(&v48);
        sub_10021E5EC(v42, v26, (uint64_t)v44);

        sub_1001948C4(&v48);
      }
      else
      {

      }
    }
    else
    {
      v28 = objc_opt_self(ICFolder);
      v29 = swift_dynamicCastObjCClass(v23, v28);
      if (v29)
      {
        v30 = (void *)v29;
        v31 = v23;
        v36 = sub_10021B8D8(a2, v30, &off_1005656D8, a6);
        sub_10021D994(v36, ICFolder_ptr, (void (*)(unint64_t, uint64_t, __n128))sub_10024C300);
        v38 = v37;
        swift_bridgeObjectRelease(v36);
        sub_1001FED6C(v30, v38);
        v40 = v39;

        swift_bridgeObjectRelease(v38);
      }
    }
    v7 = *(_QWORD *)(v20 + 8);
    swift_bridgeObjectRetain(*(_QWORD *)(v20 + 16));
  }
  return v7;
}

char *sub_10021D09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, void *a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *isa;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *result;
  double v31;
  void *v32;
  void (*v33)(char *, uint64_t);
  int v34;
  uint64_t v35;
  int v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  void *v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  id v63;
  void (*v64)(char *, uint64_t, _QWORD *);
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;

  v63 = a6;
  v7 = v6;
  v60 = a4;
  v61 = a5;
  isa = (_QWORD *)sub_100012E18(&qword_1005D3DA0);
  v11 = *(isa - 1);
  __chkstk_darwin(isa);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(char ***)(a2 + 16);
  v57 = a2;
  if (v14)
  {
    v58 = v6;
    v59 = a1;
    v67 = (unsigned __int8 *)_swiftEmptyArrayStorage;
    sub_10013723C(0, (int64_t)v14, 0);
    v15 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v16 = *(_QWORD *)(v11 + 72);
    v64 = *(void (**)(char *, uint64_t, _QWORD *))(v11 + 16);
    v65 = v16;
    v17 = v67;
    v66 = v11;
    do
    {
      v64(v13, v15, isa);
      a1 = ICObjectReferences.recursiveAttachmentCount.getter(isa);
      (*(void (**)(char *, _QWORD *))(v11 + 8))(v13, isa);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      {
        sub_10013723C(0, *((_QWORD *)v17 + 2) + 1, 1);
        v17 = v67;
      }
      v19 = *((_QWORD *)v17 + 2);
      v18 = *((_QWORD *)v17 + 3);
      v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        sub_10013723C(v18 > 1, v19 + 1, 1);
        v17 = v67;
      }
      *((_QWORD *)v17 + 2) = v20;
      *(_QWORD *)&v17[8 * v19 + 32] = a1;
      v11 = v66;
      v15 += v65;
      v14 = (char **)((char *)v14 - 1);
    }
    while (v14);
    v7 = v58;
  }
  else
  {
    v17 = (unsigned __int8 *)_swiftEmptyArrayStorage;
    v20 = _swiftEmptyArrayStorage[2];
    if (!v20)
      goto LABEL_31;
    v59 = a1;
  }
  v21 = 0;
  v22 = 0;
  do
  {
    v23 = *(_QWORD *)&v17[8 * v21 + 32];
    v24 = __OFADD__(v22, v23);
    v22 = (_QWORD *)((char *)v22 + v23);
    if (v24)
    {
      __break(1u);
      goto LABEL_38;
    }
    ++v21;
  }
  while (v20 != v21);
  a1 = v59;
  while (1)
  {
    swift_bridgeObjectRelease(v17);
    if (qword_1005CEB10 != -1)
      swift_once(&qword_1005CEB10, sub_100216E14);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10012A0B0(v25, (uint64_t)qword_1005D4CD8);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v29 = 134217984;
      v67 = (unsigned __int8 *)v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 4);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Importing note… {attachmentCount: %ld}", v29, 0xCu);
      swift_slowDealloc(v29, -1, -1);
    }

    result = (char *)v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      __break(1u);
      goto LABEL_41;
    }
    isa = NSProgress.addingChild(totalUnitCount:pendingUnitCount:)((Swift::Int64)result, 1).super.isa;
    v17 = (unsigned __int8 *)(v7 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration);
    swift_beginAccess(v7 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration, &v67, 0, 0);
    v31 = *((double *)v17 + 1);
    v32 = (void *)*((_QWORD *)v17 + 2);
    v33 = (void (*)(char *, uint64_t))*((_QWORD *)v17 + 3);
    if (v17[1])
      v34 = 256;
    else
      v34 = 0;
    v35 = v7;
    v36 = v34 | *v17;
    v37 = v32;
    v38 = v62;
    v39 = (char *)sub_1003E8974(v60, v61, v36, (uint64_t)v32, v33, v31);
    v7 = v38;
    if (v38)
    {

      v39 = (char *)objc_msgSend(isa, "completedUnitCount");
      v40 = v39 + 1;
      if (!__OFADD__(v39, 1))
        goto LABEL_36;
      __break(1u);
    }
    v41 = v39;

    v42 = v41;
    v43 = sub_10021B8D8(v57, v42, &off_100565710, isa);
    if (!v38)
      break;

    v44 = (char *)objc_msgSend(isa, "completedUnitCount");
    v40 = v44 + 1;
    if (!__OFADD__(v44, 1))
      goto LABEL_36;
    __break(1u);
LABEL_31:
    v22 = 0;
  }
  v45 = v43;
  v58 = v35;

  sub_10021D994(v45, ICAttachment_ptr, (void (*)(unint64_t, uint64_t, __n128))sub_10024C30C);
  v47 = v46;
  swift_bridgeObjectRelease(v45);
  v48 = *((double *)v17 + 1);
  v49 = (void *)*((_QWORD *)v17 + 2);
  v50 = *((_QWORD *)v17 + 3);
  if (v17[1])
    v51 = 256;
  else
    v51 = 0;
  v52 = v51 | *v17;
  v53 = v49;
  v54 = sub_1003E99C4(v42, v47, v52, (uint64_t)v49, v50, v48);

  swift_bridgeObjectRelease(v47);
  v55 = sub_1003E9E74((uint64_t)v42);
  swift_bridgeObjectRelease(v55);
  v14 = &selRef_predicateWithFormat_argumentArray_;
  sub_10021DCDC((char)objc_msgSend(v63, "completedUnitCount"));
LABEL_38:
  v17 = *(unsigned __int8 **)(a1 + 8);
  result = (char *)objc_msgSend(isa, v14[109], swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16)).n128_f64[0]);
  v40 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_41:
    __break(1u);
  }
  else
  {
LABEL_36:
    objc_msgSend(isa, "setCompletedUnitCount:", v40);

    return (char *)v17;
  }
  return result;
}

char *sub_10021D618(uint64_t a1, void *a2, int64_t a3, char *a4, char *a5, void *a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 *v11;
  double v12;
  void *v13;
  int *v14;
  int v15;
  int v16;
  id v17;
  int v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  NSURL *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  double v41;
  void *v42;
  uint64_t v43;
  int v44;
  int v45;
  id v46;
  void *v47;
  char *result;
  void *v49;
  uint64_t v50;
  int64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  id v58;
  char v59[24];

  v57 = a5;
  v54 = a6;
  v55 = a1;
  v56 = a4;
  v51 = a3;
  v52 = a2;
  v7 = (_QWORD *)type metadata accessor for URL(0);
  v8 = *(v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v6;
  v11 = (unsigned __int8 *)(v6 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration);
  swift_beginAccess(v6 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration, v59, 0, 0);
  v12 = *((double *)v11 + 1);
  v13 = (void *)*((_QWORD *)v11 + 2);
  v14 = (int *)*((_QWORD *)v11 + 3);
  if (v11[1])
    v15 = 256;
  else
    v15 = 0;
  v16 = v15 | *v11;
  v17 = v13;
  v18 = v16;
  v19 = v55;
  v20 = v58;
  v21 = sub_1001F06E0((uint64_t)v56, v57, v18, (uint64_t)v13, v14, v12);
  if (v20)
  {

    v22 = v54;
    v21 = (char *)objc_msgSend(v54, "completedUnitCount");
    v23 = v21 + 1;
    if (!__OFADD__(v21, 1))
      goto LABEL_21;
    __break(1u);
  }
  v24 = v21;
  v57 = v10;
  v58 = v7;

  v25 = v24;
  v26 = v53;
  v22 = v54;
  v27 = (char *)sub_10021B8D8(v52, v25, &off_100565748, v54);
  if (v20)
  {

    v27 = (char *)objc_msgSend(v22, "completedUnitCount");
    v23 = v27 + 1;
    if (!__OFADD__(v27, 1))
      goto LABEL_21;
    __break(1u);
  }
  v28 = (uint64_t)v27;

  sub_10021D994(v28, ICAttachment_ptr, (void (*)(unint64_t, uint64_t, __n128))sub_10024C30C);
  v30 = v29;
  v52 = v20;
  swift_bridgeObjectRelease(v28);
  v31 = *(_QWORD *)(v19 + 88);
  v56 = v30;
  if (v31)
  {
    v32 = v57;
    URL.appendingPathComponent(_:isDirectory:)(*(_QWORD *)(v19 + 80), v31, 0);
    URL._bridgeToObjectiveC()(v33);
    v35 = v34;
    v36 = objc_msgSend(v25, "addMediaWithURL:", v34);

    (*(void (**)(char *, id))(v8 + 8))(v32, v58);
  }
  v37 = v19;
  v38 = v19 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 88);
  if ((*(_BYTE *)(v38 + 16) & 1) == 0)

  v39 = *(char **)(v26 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager);
  v40 = *(char **)(v26 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager + 8);
  v41 = *((double *)v11 + 1);
  v42 = (void *)*((_QWORD *)v11 + 2);
  v43 = *((_QWORD *)v11 + 3);
  if (v11[1])
    v44 = 256;
  else
    v44 = 0;
  v45 = v44 | *v11;
  v58 = v42;
  v46 = v52;
  v10 = v56;
  sub_1001F0D50(v25, v51, v56, v39, v40, v45, (uint64_t)v42, v43, v41);
  if (v46)
  {

    swift_bridgeObjectRelease(v10);
    result = (char *)objc_msgSend(v22, "completedUnitCount");
    v23 = result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_21:
      objc_msgSend(v22, "setCompletedUnitCount:", v23);
      return v10;
    }
    __break(1u);
  }
  else
  {
    v49 = v47;

    swift_bridgeObjectRelease(v10);
    v10 = *(char **)(v37 + 8);
    result = (char *)objc_msgSend(v22, "completedUnitCount", swift_bridgeObjectRetain(*(_QWORD *)(v37 + 16)).n128_f64[0]);
    v23 = result + 1;
    if (!__OFADD__(result, 1))
      goto LABEL_21;
  }
  __break(1u);
  return result;
}

void sub_10021D994(uint64_t a1, _QWORD *a2, void (*a3)(unint64_t, uint64_t, __n128))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;
  id v27;
  __n128 v28;
  Swift::Int v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  int64_t v44;
  _QWORD v45[9];
  _QWORD *v46;

  v6 = a1 + 64;
  v5 = *(_QWORD *)(a1 + 64);
  v42 = &_swiftEmptyDictionarySingleton;
  v46 = &_swiftEmptyDictionarySingleton;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v44 = (unint64_t)(63 - v7) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v41 = v6;
  if (!v9)
    goto LABEL_8;
LABEL_5:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v12 = v11 | (v10 << 6);
  while (1)
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v12);
    v17 = objc_opt_self(*a2);
    v18 = swift_dynamicCastObjCClass(v16, v17);
    if (v18)
    {
      v23 = v18;
      v24 = v42[2];
      if (v42[3] <= v24)
      {
        v43 = v24 + 1;
        v27 = v16;
        v28 = swift_bridgeObjectRetain(v15);
        a3(v43, 1, v28);
        v26 = v46;
      }
      else
      {
        v25 = v16;
        swift_bridgeObjectRetain(v15);
        v26 = v42;
      }
      v42 = v26;
      Hasher.init(_seed:)(v45, v26[5]);
      String.hash(into:)(v45, v14, v15);
      v29 = Hasher._finalize()();
      v30 = (char *)(v42 + 8);
      v31 = -1 << *((_BYTE *)v42 + 32);
      v32 = v29 & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~v42[(v32 >> 6) + 8]) == 0)
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v31) >> 6;
        v6 = v41;
        while (++v33 != v36 || (v35 & 1) == 0)
        {
          v37 = v33 == v36;
          if (v33 == v36)
            v33 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)&v30[8 * v33];
          if (v38 != -1)
          {
            v34 = __clz(__rbit64(~v38)) + (v33 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      v34 = __clz(__rbit64((-1 << v32) & ~v42[(v32 >> 6) + 8])) | v32 & 0x7FFFFFFFFFFFFFC0;
      v6 = v41;
LABEL_37:
      *(_QWORD *)&v30[(v34 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v34;
      v39 = (_QWORD *)(v42[6] + 16 * v34);
      *v39 = v14;
      v39[1] = v15;
      *(_QWORD *)(v42[7] + 8 * v34) = v23;
      ++v42[2];

      if (v9)
        goto LABEL_5;
    }
    else if (v9)
    {
      goto LABEL_5;
    }
LABEL_8:
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v19 >= v44)
      goto LABEL_39;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    v21 = v10 + 1;
    if (!v20)
    {
      v21 = v10 + 2;
      if (v10 + 2 >= v44)
        goto LABEL_39;
      v20 = *(_QWORD *)(v6 + 8 * v21);
      if (!v20)
      {
        v21 = v10 + 3;
        if (v10 + 3 >= v44)
          goto LABEL_39;
        v20 = *(_QWORD *)(v6 + 8 * v21);
        if (!v20)
        {
          v21 = v10 + 4;
          if (v10 + 4 >= v44)
            goto LABEL_39;
          v20 = *(_QWORD *)(v6 + 8 * v21);
          if (!v20)
            break;
        }
      }
    }
LABEL_23:
    v9 = (v20 - 1) & v20;
    v12 = __clz(__rbit64(v20)) + (v21 << 6);
    v10 = v21;
  }
  v22 = v10 + 5;
  if (v10 + 5 >= v44)
  {
LABEL_39:
    sub_1001452E0(a1);
    return;
  }
  v20 = *(_QWORD *)(v6 + 8 * v22);
  if (v20)
  {
    v21 = v10 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v21 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v21 >= v44)
      goto LABEL_39;
    v20 = *(_QWORD *)(v6 + 8 * v21);
    ++v22;
    if (v20)
      goto LABEL_23;
  }
LABEL_42:
  __break(1u);
}

void sub_10021DCDC(char a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  id v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;

  v2 = v1;
  v3 = OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarning;
  if ((v1[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarning] & 1) != 0 || (a1 & 0x1F) == 0)
  {
    if (qword_1005CEB10 != -1)
      swift_once(&qword_1005CEB10, sub_100216E14);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10012A0B0(v4, (uint64_t)qword_1005D4CD8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Saving batch of imported notes and resetting inserted objects…", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_context];
    v10 = objc_msgSend(v9, "insertedObjects");
    v11 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    v12 = sub_10021FD80();
    v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v11, v12);

    v20 = 0;
    v14 = objc_msgSend(v9, "save:", &v20);
    v15 = v20;
    if (v14)
    {
      v16 = v2;
      v17 = v15;
      sub_10021EC18(v13, (uint64_t)v16);
      swift_bridgeObjectRelease(v13);

      v2[v3] = 0;
    }
    else
    {
      v18 = v20;
      swift_bridgeObjectRelease(v13);
      _convertNSErrorToError(_:)(v15);

      swift_willThrow(v19);
    }
  }
}

void sub_10021DEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *Strong;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  Strong = (_BYTE *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Strong[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarning] = 1;

  }
}

id sub_10021DF3C(void *a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5, Class a6, uint64_t a7, uint64_t a8, double a9)
{
  return sub_10021E128(a1, a2 & 0x101, a3, a4, a5, objc_allocWithZone(a6), a9, a7, a8);
}

id sub_10021DFC4(void *a1, __int16 a2, void *a3, uint64_t a4, void *a5, _BYTE *a6, double a7)
{
  objc_class *ObjectType;
  uint64_t v15;
  _BYTE *v16;
  _OWORD *v17;
  double *v18;
  _QWORD *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  objc_super v25;

  ObjectType = (objc_class *)swift_getObjectType(a6);
  a6[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_isImporting] = 0;
  v15 = OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_errors;
  v16 = a6;
  *(_QWORD *)&a6[v15] = sub_100135BD8((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v16[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_saveBatchSize] = 32;
  v16[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarning] = 0;
  v17 = &v16[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarningObserver];
  *v17 = 0u;
  v17[1] = 0u;
  *(_QWORD *)&v16[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_context] = a1;
  v18 = (double *)&v16[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration];
  *(_BYTE *)v18 = a2 & 1;
  *((_BYTE *)v18 + 1) = HIBYTE(a2) & 1;
  v18[1] = a7;
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  v19 = &v16[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager];
  *v19 = a5;
  v19[1] = &protocol witness table for NSFileManager;
  v20 = a3;
  v21 = a5;
  v22 = a1;

  v25.receiver = v16;
  v25.super_class = ObjectType;
  v23 = objc_msgSendSuper2(&v25, "init");
  sub_100217150();

  return v23;
}

id sub_10021E128(void *a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6, double a7, uint64_t a8, uint64_t a9)
{
  objc_class *ObjectType;
  uint64_t v18;
  _BYTE *v19;
  _OWORD *v20;
  double *v21;
  _QWORD *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  objc_super v28;

  ObjectType = (objc_class *)swift_getObjectType(a6);
  a6[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_isImporting] = 0;
  v18 = OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_errors;
  v19 = a6;
  *(_QWORD *)&a6[v18] = sub_100135BD8((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v19[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_saveBatchSize] = 32;
  v19[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarning] = 0;
  v20 = &v19[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_didReceiveMemoryWarningObserver];
  *v20 = 0u;
  v20[1] = 0u;
  *(_QWORD *)&v19[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_context] = a1;
  v21 = (double *)&v19[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration];
  *(_BYTE *)v21 = a2 & 1;
  *((_BYTE *)v21 + 1) = HIBYTE(a2) & 1;
  v21[1] = a7;
  *((_QWORD *)v21 + 2) = a3;
  *((_QWORD *)v21 + 3) = a4;
  v22 = &v19[OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_fileManager];
  *v22 = a5;
  v22[1] = a9;
  v23 = a3;
  swift_unknownObjectRetain(a5);
  v24 = a1;

  v28.receiver = v19;
  v28.super_class = ObjectType;
  v25 = objc_msgSendSuper2(&v28, "init");
  sub_100217150();

  swift_unknownObjectRelease(a5, v26);
  return v25;
}

BOOL sub_10021E28C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  sub_100012CE8(a1, (uint64_t)&v11, &qword_1005CF190);
  v3 = v12;
  if (v12)
  {
    sub_1000160B8(&v11, &v9);
    v4 = v10;
    v5 = sub_10012D19C(&v9, v10);
    v6 = _bridgeAnythingToObjectiveC<A>(_:)(v5, v4);
    objc_msgSend(a2, "removeObserver:", v6);
    swift_unknownObjectRelease(v6, v7);
    sub_1000153C0(&v9);
  }
  return v3 == 0;
}

uint64_t sub_10021E32C(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void **i;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  id v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = result;
    swift_bridgeObjectRetain(result);
    v9 = v7[4];
    v8 = v7[5];
    v10 = (void *)v7[6];
    v11 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v8);
    v48 = v10;
    v13 = sub_100248A98(v9, v8);
    v14 = v11[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v17 = v12;
    if (v11[3] < v16)
    {
      sub_10024C2F4(v16, a2 & 1);
      v18 = sub_100248A98(v9, v8);
      if ((v17 & 1) != (v19 & 1))
      {
LABEL_27:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v13 = v18;
      v20 = (_QWORD *)*a3;
      if ((v17 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v21 = *(id *)(v20[7] + 8 * v13);
      swift_bridgeObjectRelease(v8);

      v22 = v20[7];
      *(_QWORD *)(v22 + 8 * v13) = v21;
      v23 = v3 - 1;
      if (v3 == 1)
        return swift_bridgeObjectRelease(v6);
LABEL_16:
      for (i = (void **)(v6 + 72); ; i += 3)
      {
        v33 = (uint64_t)*(i - 2);
        v32 = (uint64_t)*(i - 1);
        v34 = *i;
        v35 = (_QWORD *)*a3;
        swift_bridgeObjectRetain(v32);
        v36 = v34;
        v37 = sub_100248A98(v33, v32);
        v39 = v35[2];
        v40 = (v38 & 1) == 0;
        v26 = __OFADD__(v39, v40);
        v41 = v39 + v40;
        if (v26)
          break;
        v42 = v38;
        if (v35[3] < v41)
        {
          sub_10024C2F4(v41, 1);
          v37 = sub_100248A98(v33, v32);
          if ((v42 & 1) != (v43 & 1))
            goto LABEL_27;
        }
        v44 = (_QWORD *)*a3;
        if ((v42 & 1) != 0)
        {
          v29 = 8 * v37;
          v30 = *(id *)(v44[7] + 8 * v37);
          swift_bridgeObjectRelease(v32);

          v31 = v44[7];
          *(_QWORD *)(v31 + v29) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = (uint64_t *)(v44[6] + 16 * v37);
          *v45 = v33;
          v45[1] = v32;
          *(_QWORD *)(v44[7] + 8 * v37) = v36;
          v46 = v44[2];
          v26 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v26)
            goto LABEL_26;
          v44[2] = v47;
        }
        if (!--v23)
          return swift_bridgeObjectRelease(v6);
      }
      goto LABEL_25;
    }
    if ((a2 & 1) != 0)
    {
      v20 = (_QWORD *)*a3;
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_100250230();
      v20 = (_QWORD *)*a3;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    v24 = (uint64_t *)(v20[6] + 16 * v13);
    *v24 = v9;
    v24[1] = v8;
    *(_QWORD *)(v20[7] + 8 * v13) = v48;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v20[2] = v27;
    v23 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease(v6);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_10021E5EC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id *v22;
  int64_t v23;
  char *v24;
  Class isa;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  id v35;
  NSString v36;
  id v37;
  uint64_t v38;
  NSString v39;
  NSString v40;
  char *v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  id v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  unint64_t v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  id *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[32];
  int64_t v71;

  v66 = a2;
  v5 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v6 = __chkstk_darwin(v5);
  v56 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v65 = (char *)&v52 - v8;
  v68 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v68 - 8);
  v10 = __chkstk_darwin(v68);
  v53 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v63 = (char *)&v52 - v12;
  v13 = _s3TagVMa(0);
  v61 = *(_QWORD *)(v13 - 8);
  v62 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v60 = (uint64_t)&v52 - v17;
  v18 = *(_QWORD *)(a1 + 56);
  v57 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v22 = (id *)(a3 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration);
  v67 = a1;
  swift_bridgeObjectRetain(a1);
  v59 = v22;
  swift_beginAccess(v22, v70, 0, 0);
  v23 = 0;
  v58 = (unint64_t)(v19 + 63) >> 6;
  v55 = 0x8000000100483850;
  v64 = v9;
  while (1)
  {
    if (v21)
    {
      v69 = (v21 - 1) & v21;
      v71 = v23;
      v26 = __clz(__rbit64(v21)) | (v23 << 6);
      goto LABEL_24;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v27 >= v58)
      return swift_release(v67);
    v28 = *(_QWORD *)(v57 + 8 * v27);
    v29 = v23 + 1;
    if (!v28)
    {
      v29 = v23 + 2;
      if (v23 + 2 >= v58)
        return swift_release(v67);
      v28 = *(_QWORD *)(v57 + 8 * v29);
      if (!v28)
      {
        v29 = v23 + 3;
        if (v23 + 3 >= v58)
          return swift_release(v67);
        v28 = *(_QWORD *)(v57 + 8 * v29);
        if (!v28)
        {
          v29 = v23 + 4;
          if (v23 + 4 >= v58)
            return swift_release(v67);
          v28 = *(_QWORD *)(v57 + 8 * v29);
          if (!v28)
            break;
        }
      }
    }
LABEL_23:
    v69 = (v28 - 1) & v28;
    v71 = v29;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_24:
    v31 = v60;
    sub_1001D3CC8(*(_QWORD *)(v67 + 48) + *(_QWORD *)(v61 + 72) * v26, v60);
    sub_10021FC7C(v31, (uint64_t)v16);
    v32 = *(_BYTE *)v59;
    v33 = *(_QWORD *)&v16[*(int *)(v62 + 20) + 8];
    v34 = v59[2];
    swift_bridgeObjectRetain(v33);
    v35 = v66;
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    v37 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagWithDisplayText:account:createIfNecessary:", v36, v35, 1);

    if (!v37)
      goto LABEL_37;
    v38 = (uint64_t)v65;
    if ((v32 & 1) != 0)
    {
      v39 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setDisplayText:", v39);

      objc_msgSend(v37, "unmarkForDeletion");
      v40 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "updateChangeCountWithReason:", v40);

    }
    v41 = v16;
    sub_100012CE8((uint64_t)v16, v38, (uint64_t *)&unk_1005D7B20);
    v42 = v9;
    v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v44 = v68;
    if (v43(v38, 1, v68) != 1)
    {
      v24 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v63, v38, v44);
      v9 = v42;
      v16 = v41;
      goto LABEL_5;
    }
    v45 = objc_msgSend(v37, "creationDate");
    if (!v45)
    {
      v49 = (uint64_t)v56;
      v44 = v68;
      v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v56, 1, 1, v68);
      v16 = v41;
LABEL_32:
      v24 = v63;
      static Date.now.getter(v50);
      sub_100012DDC(v49, (uint64_t *)&unk_1005D7B20);
      goto LABEL_33;
    }
    v46 = v45;
    v47 = v53;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v45);

    v48 = v64;
    v49 = (uint64_t)v56;
    v44 = v68;
    v54 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    v54(v56, v47, v68);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v44);
    v50 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43)(v49, 1, v44);
    v16 = v41;
    if ((_DWORD)v50 == 1)
      goto LABEL_32;
    v24 = v63;
    v54(v63, (char *)v49, v44);
LABEL_33:
    sub_100012DDC(v38, (uint64_t *)&unk_1005D7B20);
    v9 = v64;
LABEL_5:
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v24, v44);
    objc_msgSend(v37, "setCreationDate:", isa);

    sub_100145264((uint64_t)v16, _s3TagVMa);
    v23 = v71;
    v21 = v69;
  }
  v30 = v23 + 5;
  if (v23 + 5 >= v58)
    return swift_release(v67);
  v28 = *(_QWORD *)(v57 + 8 * v30);
  if (v28)
  {
    v29 = v23 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v58)
      return swift_release(v67);
    v28 = *(_QWORD *)(v57 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_23;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x8000000100483830, "MobileNotes/ICImportableObject.swift", 36, 2, 37, 0);
  __break(1u);
  return result;
}

void sub_10021EC18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD v28[6];
  void *v29;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    v7 = sub_10021FD80();
    v8 = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    v3 = v28[1];
    v27 = v28[2];
    v9 = v28[3];
    v10 = v28[4];
    v11 = v28[5];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v26 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v15 = (v11 - 1) & v11;
      v16 = __clz(__rbit64(v11)) | (v10 << 6);
      v17 = v10;
      goto LABEL_32;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v23 >= v26)
      goto LABEL_35;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    v17 = v10 + 1;
    if (!v24)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v26)
        goto LABEL_35;
      v24 = *(_QWORD *)(v27 + 8 * v17);
      if (!v24)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v26)
          goto LABEL_35;
        v24 = *(_QWORD *)(v27 + 8 * v17);
        if (!v24)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v26)
            goto LABEL_35;
          v24 = *(_QWORD *)(v27 + 8 * v17);
          if (!v24)
          {
            v17 = v10 + 5;
            if (v10 + 5 >= v26)
              goto LABEL_35;
            v24 = *(_QWORD *)(v27 + 8 * v17);
            if (!v24)
            {
              v25 = v10 + 6;
              while (v26 != v25)
              {
                v24 = *(_QWORD *)(v27 + 8 * v25++);
                if (v24)
                {
                  v17 = v25 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_1001452E0(v3);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_32:
    v21 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_35;
    while (1)
    {
      objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_context), "refreshObject:mergeChanges:", v21, 0);

      v10 = v17;
      v11 = v15;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(v8);
      if (v18)
      {
        v19 = v18;
        v28[0] = v18;
        v20 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v29, v28, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v29;
        swift_unknownObjectRelease(v19, v22);
        v17 = v10;
        v15 = v11;
        if (v21)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

_QWORD *sub_10021EEF8(uint64_t a1, uint64_t a2, NSObject *a3, char *a4, void *a5)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_100137220(0, v6, 0);
    v8 = *(_QWORD *)(sub_100012E18(&qword_1005D3DA0) - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v23 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      v10 = sub_10021BAF8(v9, a3, a4, a5);
      if (v5)
        break;
      v14 = v10;
      v15 = v11;
      v16 = v12;
      v17 = v13;
      v19 = _swiftEmptyArrayStorage[2];
      v18 = _swiftEmptyArrayStorage[3];
      v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        sub_100137220(v18 > 1, v19 + 1, 1);
        v20 = v19 + 1;
      }
      _swiftEmptyArrayStorage[2] = v20;
      v21 = &_swiftEmptyArrayStorage[4 * v19];
      v21[4] = v14;
      v21[5] = v15;
      v21[6] = v16;
      *((_BYTE *)v21 + 56) = v17 & 1;
      v9 += v23;
      if (!--v6)
        return _swiftEmptyArrayStorage;
    }
    swift_release(_swiftEmptyArrayStorage);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10021F04C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;

  v5 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v36 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v45 = (char *)&v34 - v13;
  v46 = (char *)_swiftEmptyArrayStorage;
  v41 = *(_QWORD *)(a1 + 16);
  if (!v41)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_29:
    swift_bridgeObjectRelease(a1);
    sub_100012DDC((uint64_t)v7, &qword_1005CEFD0);
    return (uint64_t)v46;
  }
  v14 = 0;
  v34 = v2;
  v35 = a2 + 7;
  v39 = a1;
  v40 = v7;
  v43 = a2;
  v38 = v8;
  while (1)
  {
    if (v14 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
      goto LABEL_31;
    }
    v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v16 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, a1 + v15 + v16 * v14, v8);
    v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56);
    v37(v7, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      goto LABEL_29;
    v42 = v15;
    v44 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 32);
    v17 = v44(v45, v7, v8);
    v18 = URL.pathExtension.getter(v17);
    v20 = v19;
    v21 = a2[2];
    if (!v21)
      goto LABEL_21;
    v22 = v18;
    v23 = a2[4];
    v24 = a2[5];
    if (v23 != v22 || v24 != v20)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v22, v20, 0);
      if ((result & 1) == 0)
        break;
    }
LABEL_3:
    swift_bridgeObjectRelease(v20);
    v8 = v38;
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v45, v38);
    a1 = v39;
    v7 = v40;
    a2 = v43;
LABEL_4:
    if (++v14 == v41)
    {
      v37(v7, 1, 1, v8);
      goto LABEL_29;
    }
  }
  a2 = v43;
  if (v21 == 1)
  {
LABEL_21:
    swift_bridgeObjectRelease(v20);
    v8 = v38;
    v44(v36, v45, v38);
    v31 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
    {
      sub_1001370D0(0, *((_QWORD *)v31 + 2) + 1, 1);
      v31 = v46;
    }
    v7 = v40;
    v33 = *((_QWORD *)v31 + 2);
    v32 = *((_QWORD *)v31 + 3);
    if (v33 >= v32 >> 1)
    {
      sub_1001370D0(v32 > 1, v33 + 1, 1);
      v31 = v46;
    }
    *((_QWORD *)v31 + 2) = v33 + 1;
    result = v44(&v31[v42 + v33 * v16], v36, v8);
    v46 = v31;
    a1 = v39;
    goto LABEL_4;
  }
  v25 = v35;
  v26 = 1;
  while (1)
  {
    v27 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    v28 = *(v25 - 1);
    v29 = *v25;
    v30 = v28 == v22 && v29 == v20;
    if (v30)
      goto LABEL_3;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v22, v20, 0);
    if ((result & 1) != 0)
      goto LABEL_3;
    v25 += 2;
    ++v26;
    v30 = v27 == v21;
    a2 = v43;
    if (v30)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10021F3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double *v22;
  uint64_t result;
  int64_t v24;
  char *v25;
  Class isa;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  double v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, void *, void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, double);
  int v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  id v52;
  uint64_t v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t ObjectType;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  char v80[32];

  v71 = a2;
  v72 = a3;
  v6 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v7 = __chkstk_darwin(v6);
  v61 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v66 = (uint64_t)&v60 - v9;
  v65 = type metadata accessor for Date(0);
  v76 = *(_QWORD *)(v65 - 8);
  v10 = __chkstk_darwin(v65);
  v60 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v64 = (char *)&v60 - v12;
  v13 = _s3TagVMa(0);
  v69 = *(_QWORD *)(v13 - 8);
  v70 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v68 = (uint64_t)&v60 - v17;
  v18 = *(_QWORD *)(a1 + 56);
  v62 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v22 = (double *)(a4 + OBJC_IVAR____TtC11MobileNotes17ICArchiveImporter_configuration);
  v73 = a1;
  swift_bridgeObjectRetain(a1);
  v67 = v22;
  result = swift_beginAccess(v22, v80, 0, 0);
  v24 = 0;
  v63 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      v74 = (v21 - 1) & v21;
      v75 = v24;
      v27 = __clz(__rbit64(v21)) | (v24 << 6);
      goto LABEL_21;
    }
    v28 = __OFADD__(v24, 1);
    v29 = v24 + 1;
    if (v28)
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v29 >= v63)
      return swift_release(v73);
    v30 = *(_QWORD *)(v62 + 8 * v29);
    if (!v30)
      break;
LABEL_20:
    v74 = (v30 - 1) & v30;
    v75 = v29;
    v27 = __clz(__rbit64(v30)) + (v29 << 6);
LABEL_21:
    v32 = v68;
    sub_1001D3CC8(*(_QWORD *)(v73 + 48) + *(_QWORD *)(v69 + 72) * v27, v68);
    sub_10021FC7C(v32, (uint64_t)v16);
    v33 = *(unsigned __int8 *)v67;
    v34 = *((unsigned __int8 *)v67 + 1);
    v35 = v67[1];
    v36 = (void *)*((_QWORD *)v67 + 2);
    v78 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v67 + 3);
    ObjectType = swift_getObjectType(v71);
    v37 = &v16[*(int *)(v70 + 20)];
    v38 = *(_QWORD *)v37;
    v39 = *((_QWORD *)v37 + 1);
    v40 = v72;
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, double))(v72 + 8);
    if (v34)
      v42 = 256;
    else
      v42 = 0;
    v43 = v42 | v33;
    v44 = v36;
    v45 = v79;
    v46 = v41(v38, v39, v43, v36, (void (*)(_QWORD, _QWORD, _QWORD))v78, ObjectType, v40, v35);
    v79 = v45;
    if (v45)
    {

      sub_100145264((uint64_t)v16, _s3TagVMa);
      return swift_release(v73);
    }
    v47 = (void *)v46;
    v48 = v66;
    sub_100012CE8((uint64_t)v16, v66, (uint64_t *)&unk_1005D7B20);
    v49 = v76;
    v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
    v51 = v65;
    if (v50(v48, 1, v65) != 1)
    {
      v25 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v64, v48, v51);
      goto LABEL_5;
    }
    v52 = objc_msgSend(v47, "creationDate");
    v53 = (uint64_t)v61;
    if (!v52)
    {
      v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v61, 1, 1, v51);
LABEL_30:
      v25 = v64;
      static Date.now.getter(v59);
      sub_100012DDC(v53, (uint64_t *)&unk_1005D7B20);
      goto LABEL_31;
    }
    v54 = v52;
    v55 = v60;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

    v56 = v16;
    v57 = v76;
    v78 = *(void (**)(uint64_t, char *, uint64_t))(v76 + 32);
    v78(v53, v55, v51);
    v58 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56);
    v16 = v56;
    v58(v53, 0, 1, v51);
    v59 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v50)(v53, 1, v51);
    if ((_DWORD)v59 == 1)
      goto LABEL_30;
    v25 = v64;
    v78((uint64_t)v64, (char *)v53, v51);
LABEL_31:
    sub_100012DDC(v48, (uint64_t *)&unk_1005D7B20);
    v49 = v76;
LABEL_5:
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v51);
    objc_msgSend(v47, "setCreationDate:", isa);

    result = sub_100145264((uint64_t)v16, _s3TagVMa);
    v21 = v74;
    v24 = v75;
  }
  v31 = v29 + 1;
  if (v29 + 1 >= v63)
    return swift_release(v73);
  v30 = *(_QWORD *)(v62 + 8 * v31);
  if (v30)
    goto LABEL_19;
  v31 = v29 + 2;
  if (v29 + 2 >= v63)
    return swift_release(v73);
  v30 = *(_QWORD *)(v62 + 8 * v31);
  if (v30)
    goto LABEL_19;
  v31 = v29 + 3;
  if (v29 + 3 >= v63)
    return swift_release(v73);
  v30 = *(_QWORD *)(v62 + 8 * v31);
  if (v30)
    goto LABEL_19;
  v31 = v29 + 4;
  if (v29 + 4 >= v63)
    return swift_release(v73);
  v30 = *(_QWORD *)(v62 + 8 * v31);
  if (v30)
  {
LABEL_19:
    v29 = v31;
    goto LABEL_20;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v63)
      return swift_release(v73);
    v30 = *(_QWORD *)(v62 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_20;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_10021F90C(unint64_t result)
{
  if (result > 4)
    return 0;
  return result;
}

void sub_10021F91C()
{
  uint64_t v0;

  sub_100219A70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32), *(void **)(v0 + 40));
}

unint64_t sub_10021F93C()
{
  unint64_t result;

  result = qword_1005D4D48;
  if (!qword_1005D4D48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D4D48);
  }
  return result;
}

unint64_t sub_10021F988()
{
  unint64_t result;

  result = qword_1005D4D50;
  if (!qword_1005D4D50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D4D50);
  }
  return result;
}

unint64_t sub_10021F9D0()
{
  unint64_t result;

  result = qword_1005D4D58;
  if (!qword_1005D4D58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D4D58);
  }
  return result;
}

unint64_t sub_10021FA18()
{
  unint64_t result;

  result = qword_1005D4D60;
  if (!qword_1005D4D60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D4D60);
  }
  return result;
}

uint64_t type metadata accessor for ICArchiveImporter()
{
  return objc_opt_self(_TtC11MobileNotes17ICArchiveImporter);
}

void destroy for ICArchiveImporter.Configuration(uint64_t a1)
{

}

uint64_t initializeWithCopy for ICArchiveImporter.Configuration(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  id v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v3;
  v4 = (id)v3;
  return a1;
}

uint64_t assignWithCopy for ICArchiveImporter.Configuration(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(void **)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v6 = v3;

  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for ICArchiveImporter.Configuration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveImporter.Configuration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveImporter.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveImporter.Configuration()
{
  return &type metadata for ICArchiveImporter.Configuration;
}

ValueMetadata *type metadata accessor for ICArchiveImporter.Errors()
{
  return &type metadata for ICArchiveImporter.Errors;
}

unint64_t sub_10021FC38()
{
  unint64_t result;

  result = qword_1005D4DA0;
  if (!qword_1005D4DA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D4DA0);
  }
  return result;
}

uint64_t sub_10021FC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s3TagVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10021FCC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10021FD10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D47A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10021FD58(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

unint64_t sub_10021FD80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4AD0;
  if (!qword_1005D4AD0)
  {
    v1 = sub_1000163BC(255, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4AD0);
  }
  return result;
}

uint64_t sub_10021FDD8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10021FDFC(uint64_t a1)
{
  uint64_t v1;

  sub_10021DEE4(a1, v1);
}

uint64_t sub_10021FE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005CF190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10021FE4C()
{
  sub_10021F91C();
}

uint64_t sub_10021FE60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned int (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  int *v150;
  uint64_t *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t result;
  uint64_t *v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  void (*v167)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  char *v174;
  int *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  void (*v185)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  void (*v188)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t (*v196)(char *, uint64_t, uint64_t);

  v192 = a1;
  v3 = sub_100012E18(&qword_1005D4DE0);
  __chkstk_darwin(v3);
  v176 = (char *)&v158 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005D4DE8);
  v6 = __chkstk_darwin(v5);
  v190 = (uint64_t)&v158 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v183 = (char *)&v158 - v8;
  v9 = sub_100012E18(&qword_1005D4DF0);
  v10 = __chkstk_darwin(v9);
  v164 = (char *)&v158 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v166 = (char *)&v158 - v12;
  v13 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v14 = __chkstk_darwin(v13);
  v184 = (uint64_t)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v179 = (char *)&v158 - v16;
  v17 = sub_100012E18(&qword_1005D4DF8);
  v18 = __chkstk_darwin(v17);
  v191 = (uint64_t)&v158 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v177 = (char *)&v158 - v21;
  v22 = __chkstk_darwin(v20);
  v174 = (char *)&v158 - v23;
  v24 = __chkstk_darwin(v22);
  v170 = (char *)&v158 - v25;
  v26 = __chkstk_darwin(v24);
  v193 = (char *)&v158 - v27;
  v28 = __chkstk_darwin(v26);
  v163 = (char *)&v158 - v29;
  v30 = __chkstk_darwin(v28);
  v162 = (char *)&v158 - v31;
  v32 = __chkstk_darwin(v30);
  v158 = (uint64_t)&v158 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v158 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v158 - v37;
  v39 = sub_100012E18(&qword_1005D4E00);
  v40 = __chkstk_darwin(v39);
  v182 = (uint64_t)&v158 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v181 = (uint64_t)&v158 - v43;
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v158 - v45;
  v47 = __chkstk_darwin(v44);
  v49 = (char *)&v158 - v48;
  __chkstk_darwin(v47);
  v51 = (char *)&v158 - v50;
  v52 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v52 - 8);
  v159 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
  v159(a2, 1, 1, v52);
  v54 = (int *)_s8ActivityVMa(0);
  v55 = a2 + v54[5];
  v56 = type metadata accessor for ActivityEventObject(0);
  v178 = *(_QWORD *)(v56 - 8);
  v57 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v178 + 56);
  v161 = v55;
  v185 = v57;
  v186 = v56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v57)(v55, 1, 1);
  v58 = a2 + v54[6];
  v59 = type metadata accessor for ActivityEventParticipant(0);
  v180 = *(_QWORD *)(v59 - 8);
  v60 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v180 + 56);
  v165 = v58;
  v188 = v60;
  v189 = v59;
  ((void (*)(uint64_t, uint64_t, uint64_t))v60)(v58, 1, 1);
  v61 = a2 + v54[7];
  v62 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56);
  v169 = v61;
  v168 = v62;
  v167 = v63;
  ((void (*)(uint64_t, uint64_t, uint64_t))v63)(v61, 1, 1);
  v64 = (uint64_t *)(a2 + v54[8]);
  *v64 = 0;
  v64[1] = 0;
  v171 = v64;
  v65 = a2 + v54[9];
  *(_QWORD *)v65 = 0;
  v172 = (uint64_t *)v65;
  *(_BYTE *)(v65 + 8) = 1;
  v175 = v54;
  v66 = v54[10];
  v195 = a2;
  v67 = (uint64_t *)(a2 + v66);
  sub_10013D514();
  *v67 = 0;
  v67[1] = 0;
  v173 = v67;
  v68 = v192;
  static ICCloudSyncingObject.persistedActivityEvent(for:)(v192);
  v69 = (uint64_t)v38;
  static ICCloudSyncingObject.fallbackActivityEvent(for:)(v68);
  v194 = v51;
  sub_100012CE8((uint64_t)v51, (uint64_t)v49, &qword_1005D4E00);
  v70 = type metadata accessor for PersistedActivityEvent(0);
  v71 = *(_QWORD *)(v70 - 8);
  v196 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  v72 = v196(v49, 1, v70);
  v187 = v71;
  if (v72 == 1)
  {
    sub_100012DDC((uint64_t)v49, &qword_1005D4E00);
    v73 = 1;
    v74 = (uint64_t)v193;
    v75 = v184;
  }
  else
  {
    v76 = v184;
    PersistedActivityEvent.timestamp.getter();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v70);
    v73 = 0;
    v74 = (uint64_t)v193;
    v75 = v76;
  }
  v77 = v159;
  v159(v75, v73, 1, v52);
  sub_100012CE8(v69, (uint64_t)v36, &qword_1005D4DF8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v75, 1, v52) == 1)
  {
    v78 = v158;
    sub_100012CE8((uint64_t)v36, v158, &qword_1005D4DF8);
    v79 = type metadata accessor for FallbackActivityEvent(0);
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79) == 1)
    {
      sub_100012DDC((uint64_t)v36, &qword_1005D4DF8);
      sub_100012DDC(v78, &qword_1005D4DF8);
      v81 = 1;
      v74 = (uint64_t)v193;
      v82 = v196;
      v83 = (uint64_t)v179;
    }
    else
    {
      v83 = (uint64_t)v179;
      FallbackActivityEvent.timestamp.getter();
      sub_100012DDC((uint64_t)v36, &qword_1005D4DF8);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v78, v79);
      v81 = 0;
      v74 = (uint64_t)v193;
      v82 = v196;
    }
    v77(v83, v81, 1, v52);
    sub_100012DDC(v184, (uint64_t *)&unk_1005D7B20);
    v84 = (uint64_t)v194;
    v85 = v195;
    v86 = (uint64_t)v166;
  }
  else
  {
    sub_100012DDC((uint64_t)v36, &qword_1005D4DF8);
    v83 = (uint64_t)v179;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v179, v75, v52);
    v77(v83, 0, 1, v52);
    v84 = (uint64_t)v194;
    v85 = v195;
    v86 = (uint64_t)v166;
    v82 = v196;
  }
  sub_100164108(v83, v85, (uint64_t *)&unk_1005D7B20);
  sub_100012CE8(v84, (uint64_t)v46, &qword_1005D4E00);
  v87 = v82(v46, 1, v70);
  v88 = v84;
  v160 = v70;
  if (v87 == 1)
  {
    v89 = (uint64_t)v164;
    v90 = v69;
    sub_100012DDC((uint64_t)v46, &qword_1005D4E00);
    v91 = 1;
  }
  else
  {
    v90 = v69;
    v89 = (uint64_t)v164;
    PersistedActivityEvent.object.getter();
    (*(void (**)(char *, uint64_t))(v187 + 8))(v46, v70);
    v91 = 0;
  }
  v92 = (uint64_t)v163;
  v93 = (uint64_t)v162;
  v94 = v185;
  v95 = v186;
  v185(v89, v91, 1, v186);
  sub_100012CE8(v90, v93, &qword_1005D4DF8);
  v96 = v178;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v178 + 48))(v89, 1, v95) == 1)
  {
    v97 = v88;
    sub_100012CE8(v93, v92, &qword_1005D4DF8);
    v98 = type metadata accessor for FallbackActivityEvent(0);
    v99 = *(_QWORD *)(v98 - 8);
    v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v92, 1, v98);
    v101 = v90;
    v102 = v160;
    v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v196;
    if (v100 == 1)
    {
      sub_100012DDC(v93, &qword_1005D4DF8);
      sub_100012DDC(v92, &qword_1005D4DF8);
      v104 = 1;
    }
    else
    {
      FallbackActivityEvent.object.getter();
      sub_100012DDC(v93, &qword_1005D4DF8);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v92, v98);
      v104 = 0;
    }
    v74 = (uint64_t)v193;
    v185(v86, v104, 1, v186);
    sub_100012DDC(v89, &qword_1005D4DF0);
    v106 = v190;
    v105 = v161;
    v88 = v97;
  }
  else
  {
    sub_100012DDC(v93, &qword_1005D4DF8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32))(v86, v89, v95);
    v94(v86, 0, 1, v95);
    v105 = v161;
    v101 = v90;
    v102 = v160;
    v106 = v190;
    v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v196;
  }
  v107 = v195;
  sub_100164108(v86, v105, &qword_1005D4DF0);
  v108 = v181;
  sub_100012CE8(v88, v181, &qword_1005D4E00);
  v109 = v103(v108, 1, v102);
  v110 = v107;
  if (v109 == 1)
  {
    sub_100012DDC(v108, &qword_1005D4E00);
    v111 = 1;
  }
  else
  {
    PersistedActivityEvent.participant.getter();
    (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v108, v102);
    v111 = 0;
  }
  v112 = (uint64_t)v170;
  v114 = v188;
  v113 = v189;
  v188(v106, v111, 1, v189);
  sub_100012CE8(v101, v74, &qword_1005D4DF8);
  v115 = v106;
  v116 = v180;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 48))(v115, 1, v113) == 1)
  {
    sub_100012CE8(v74, v112, &qword_1005D4DF8);
    v117 = type metadata accessor for FallbackActivityEvent(0);
    v118 = v74;
    v119 = *(_QWORD *)(v117 - 8);
    v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v112, 1, v117);
    v121 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v196;
    v122 = (uint64_t)v174;
    if (v120 == 1)
    {
      sub_100012DDC(v118, &qword_1005D4DF8);
      sub_100012DDC(v112, &qword_1005D4DF8);
      v123 = 1;
      v124 = v183;
    }
    else
    {
      v124 = v183;
      FallbackActivityEvent.participant.getter();
      sub_100012DDC(v118, &qword_1005D4DF8);
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v112, v117);
      v123 = 0;
    }
    v188((uint64_t)v124, v123, 1, v189);
    sub_100012DDC(v190, &qword_1005D4DE8);
    v88 = (uint64_t)v194;
    v127 = v195;
    v126 = v165;
    v125 = (uint64_t)v124;
  }
  else
  {
    sub_100012DDC(v74, &qword_1005D4DF8);
    v125 = (uint64_t)v183;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v183, v115, v113);
    v114(v125, 0, 1, v113);
    v126 = v165;
    v127 = v110;
    v121 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v196;
    v122 = (uint64_t)v174;
  }
  sub_100164108(v125, v126, &qword_1005D4DE8);
  v128 = v182;
  sub_100012CE8(v88, v182, &qword_1005D4E00);
  if (v121(v128, 1, v102) == 1)
  {
    sub_100012DDC(v128, &qword_1005D4E00);
    v129 = 1;
    v130 = (uint64_t)v176;
    v131 = (uint64_t)v177;
  }
  else
  {
    v130 = (uint64_t)v176;
    PersistedActivityEvent.activity.getter();
    (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v128, v102);
    v129 = 0;
    v131 = (uint64_t)v177;
  }
  v132 = v169;
  v167(v130, v129, 1, v168);
  sub_100164108(v130, v132, &qword_1005D4DE0);
  sub_100012CE8(v101, v122, &qword_1005D4DF8);
  v133 = type metadata accessor for FallbackActivityEvent(0);
  v134 = *(_QWORD *)(v133 - 8);
  v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
  if (v135(v122, 1, v133) == 1)
  {
    sub_100012DDC(v122, &qword_1005D4DF8);
    v136 = 0;
    v137 = 0;
  }
  else
  {
    v136 = FallbackActivityEvent.typeName.getter();
    v137 = v138;
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v122, v133);
  }
  v139 = v171;
  swift_bridgeObjectRelease(v171[1]);
  *v139 = v136;
  v139[1] = v137;
  sub_100012CE8(v101, v131, &qword_1005D4DF8);
  v140 = v135(v131, 1, v133);
  if (v140 == 1)
  {
    sub_100012DDC(v131, &qword_1005D4DF8);
    v141 = 0;
  }
  else
  {
    v141 = FallbackActivityEvent.minimumSupportedNotesVersion.getter();
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v131, v133);
  }
  v142 = v172;
  *v172 = v141;
  *((_BYTE *)v142 + 8) = v140 == 1;
  v143 = v191;
  sub_100012CE8(v101, v191, &qword_1005D4DF8);
  if (v135(v143, 1, v133) == 1)
  {
    sub_100012DDC(v191, &qword_1005D4DF8);
    v144 = 0;
    v145 = 0;
  }
  else
  {
    v146 = v191;
    v144 = FallbackActivityEvent.localizedFallbackTitle.getter();
    v145 = v147;
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v146, v133);
  }
  v148 = v192;
  v149 = (uint64_t)v194;
  v150 = v175;
  v151 = v173;
  swift_bridgeObjectRelease(v173[1]);
  *v151 = v144;
  v151[1] = v145;
  v152 = objc_msgSend(v148, "data");
  v153 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v152);
  v155 = v154;

  sub_100012DDC(v101, &qword_1005D4DF8);
  result = sub_100012DDC(v149, &qword_1005D4E00);
  v157 = (uint64_t *)(v127 + v150[11]);
  *v157 = v153;
  v157[1] = v155;
  return result;
}

uint64_t _s8ActivityVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D4E60;
  if (!qword_1005D4E60)
    return swift_getSingletonMetadata(a1, &_s8ActivityVMn);
  return result;
}

uint64_t sub_100220CC8@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;

  v72 = a1;
  v4 = sub_100012E18(&qword_1005D4DE0);
  __chkstk_darwin(v4);
  v65 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  v7 = __chkstk_darwin(v6);
  v61 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (char *)&v57 - v9;
  v10 = sub_100012E18(&qword_1005D4DE8);
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for ActivityEventParticipant(0);
  v69 = *(_QWORD *)(v71 - 8);
  v12 = __chkstk_darwin(v71);
  v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v63 = (char *)&v57 - v14;
  v15 = sub_100012E18(&qword_1005D4DF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ActivityEventObject(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v59 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v70 = (char *)&v57 - v22;
  v23 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v23);
  v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v62 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v57 - v30;
  v32 = v2;
  sub_100012CE8(v2, (uint64_t)v25, (uint64_t *)&unk_1005D7B20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    v33 = (uint64_t *)&unk_1005D7B20;
    v34 = (uint64_t)v25;
LABEL_9:
    sub_100012DDC(v34, v33);
    v46 = type metadata accessor for PersistedActivityEvent(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v72, 1, 1, v46);
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v31, v25, v26);
  v35 = (int *)_s8ActivityVMa(0);
  sub_100012CE8(v2 + v35[5], (uint64_t)v17, &qword_1005D4DF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    v33 = &qword_1005D4DF0;
    v34 = (uint64_t)v17;
    goto LABEL_9;
  }
  v36 = v70;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v70, v17, v18);
  v37 = v68;
  sub_100012CE8(v32 + v35[6], v68, &qword_1005D4DE8);
  v38 = v69;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v37, 1, v71) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v36, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    v33 = &qword_1005D4DE8;
    v34 = v37;
    goto LABEL_9;
  }
  v57 = v18;
  v58 = v19;
  v39 = v63;
  v40 = v37;
  v41 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v63, v40, v71);
  v42 = v65;
  sub_100012CE8(v32 + v35[7], v65, &qword_1005D4DE0);
  v43 = v66;
  v44 = v38;
  v45 = v67;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v42, 1, v67) == 1)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v41);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v70, v57);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    v33 = &qword_1005D4DE0;
    v34 = v42;
    goto LABEL_9;
  }
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 32))(v64, v42, v45);
  v49 = v39;
  Date.addingTimeInterval(_:)(v48, a2);
  v50 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v59, v70, v57);
  v51 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v52 = v60;
  v53 = v49;
  v51(v60, v49, v41);
  v54 = v61;
  v55 = v64;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v61, v64, v45);
  PersistedActivityEvent.init(timestamp:object:participant:activity:)(v62, v50, v52, v54);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v55, v45);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v71);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v70, v57);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
  v56 = type metadata accessor for PersistedActivityEvent(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v72, 0, 1, v56);
}

uint64_t sub_100221268@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  v3 = v2;
  v69 = a1;
  v5 = sub_100012E18(&qword_1005D4DE8);
  __chkstk_darwin(v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActivityEventParticipant(0);
  v9 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  v67 = v9;
  v10 = __chkstk_darwin(v8);
  v63 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v65 = (char *)&v56 - v12;
  v13 = sub_100012E18(&qword_1005D4DF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActivityEventObject(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v62 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v68 = (char *)&v56 - v20;
  v21 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v21);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v64 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v56 - v28;
  sub_100012CE8(v3, (uint64_t)v23, (uint64_t *)&unk_1005D7B20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_100012DDC((uint64_t)v23, (uint64_t *)&unk_1005D7B20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v23, v24);
    v30 = (int *)_s8ActivityVMa(0);
    sub_100012CE8(v3 + v30[5], (uint64_t)v15, &qword_1005D4DF0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
      sub_100012DDC((uint64_t)v15, &qword_1005D4DF0);
    }
    else
    {
      v31 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      v61 = v17;
      v32 = v68;
      v31(v68, v15, v16);
      sub_100012CE8(v3 + v30[6], (uint64_t)v7, &qword_1005D4DE8);
      v33 = v66;
      v34 = v67;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v7, 1, v66) == 1)
      {
        (*(void (**)(char *, uint64_t))(v61 + 8))(v32, v16);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
        sub_100012DDC((uint64_t)v7, &qword_1005D4DE8);
      }
      else
      {
        v35 = v61;
        v60 = v16;
        v36 = v65;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v65, v7, v33);
        v37 = v3 + v30[9];
        if (*(_BYTE *)(v37 + 8) == 1)
        {
          (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v68, v60);
        }
        else
        {
          v38 = (uint64_t *)(v3 + v30[8]);
          v39 = v38[1];
          v40 = v68;
          if (v39)
          {
            v41 = (uint64_t *)(v3 + v30[10]);
            v42 = v41[1];
            if (v42)
            {
              v43 = *(_QWORD *)v37;
              v58 = *v38;
              v59 = v43;
              v57 = *v41;
              swift_bridgeObjectRetain(v39);
              swift_bridgeObjectRetain(v42);
              Date.addingTimeInterval(_:)(v44, a2);
              v45 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
              v46 = v33;
              v47 = v62;
              v45(v62, v40, v60);
              v48 = v67;
              v49 = v63;
              v50 = v65;
              (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v63, v65, v46);
              v51 = v69;
              FallbackActivityEvent.init(timestamp:object:participant:minimumSupportedNotesVersion:typeName:localizedFallbackTitle:)(v64, v47, v49, v59, v58, v39, v57, v42);
              (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v66);
              (*(void (**)(char *, uint64_t))(v61 + 8))(v68, v60);
              (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
              v52 = type metadata accessor for FallbackActivityEvent(0);
              return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 0, 1, v52);
            }
          }
          (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v33);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v60);
        }
        (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
      }
    }
  }
  v54 = v69;
  v55 = type metadata accessor for FallbackActivityEvent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
}

uint64_t *sub_100221770(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ActivityEventObject(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100012E18(&qword_1005D4DF0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = a3[6];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for ActivityEventParticipant(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_100012E18(&qword_1005D4DE8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = a3[7];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for PersistedActivityEvent.Activities(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = sub_100012E18(&qword_1005D4DE0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = a3[8];
    v30 = a3[9];
    v31 = (uint64_t *)((char *)a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (char *)a1 + v30;
    v35 = (char *)a2 + v30;
    v34[8] = v35[8];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v36 = a3[10];
    v37 = a3[11];
    v38 = (uint64_t *)((char *)a1 + v36);
    v39 = (uint64_t *)((char *)a2 + v36);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = (uint64_t *)((char *)a1 + v37);
    v42 = (char *)a2 + v37;
    v43 = *(uint64_t *)((char *)a2 + v37);
    v44 = *((_QWORD *)v42 + 1);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v40);
    sub_10013DCA0(v43, v44);
    *v41 = v43;
    v41[1] = v44;
  }
  return a1;
}

uint64_t sub_100221A48(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for ActivityEventObject(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = a1 + a2[6];
  v10 = type metadata accessor for ActivityEventParticipant(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = a1 + a2[7];
  v13 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  return sub_10013DD30(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
}

char *sub_100221B9C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ActivityEventObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100012E18(&qword_1005D4DF0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for ActivityEventParticipant(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100012E18(&qword_1005D4DE8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100012E18(&qword_1005D4DE0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[8];
  v28 = a3[9];
  v29 = &a1[v27];
  v30 = &a2[v27];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = &a1[v28];
  v33 = &a2[v28];
  v32[8] = v33[8];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v34 = a3[10];
  v35 = a3[11];
  v36 = &a1[v34];
  v37 = &a2[v34];
  v38 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = v38;
  v39 = (uint64_t *)&a1[v35];
  v40 = &a2[v35];
  v41 = *(_QWORD *)&a2[v35];
  v42 = *((_QWORD *)v40 + 1);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v38);
  sub_10013DCA0(v41, v42);
  *v39 = v41;
  v39[1] = v42;
  return a1;
}

char *sub_100221E48(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ActivityEventObject(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_12:
    v20 = sub_100012E18(&qword_1005D4DF0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_13:
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for ActivityEventParticipant(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_18:
    v29 = sub_100012E18(&qword_1005D4DE8);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_19:
  v30 = a3[7];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 24))(v31, v32, v33);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_24;
  }
  if (v37)
  {
LABEL_24:
    v38 = sub_100012E18(&qword_1005D4DE0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_25:
  v39 = a3[8];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v43 = *((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[9];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_QWORD *)v46;
  v45[8] = v46[8];
  *(_QWORD *)v45 = v47;
  v48 = a3[10];
  v49 = &a1[v48];
  v50 = &a2[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v52 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  v53 = a3[11];
  v54 = (uint64_t *)&a1[v53];
  v55 = (uint64_t *)&a2[v53];
  v56 = *v55;
  v57 = v55[1];
  sub_10013DCA0(*v55, v57);
  v58 = *v54;
  v59 = v54[1];
  *v54 = v56;
  v54[1] = v57;
  sub_10013DD30(v58, v59);
  return a1;
}

char *sub_100222240(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ActivityEventObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100012E18(&qword_1005D4DF0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for ActivityEventParticipant(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100012E18(&qword_1005D4DE8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100012E18(&qword_1005D4DE0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  v30 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  return a1;
}

char *sub_1002224BC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ActivityEventObject(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_12:
    v20 = sub_100012E18(&qword_1005D4DF0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_13:
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for ActivityEventParticipant(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_18:
    v29 = sub_100012E18(&qword_1005D4DE8);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_19:
  v30 = a3[7];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v31, v32, v33);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_24;
  }
  if (v37)
  {
LABEL_24:
    v38 = sub_100012E18(&qword_1005D4DE0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_25:
  v39 = a3[8];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v44 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease(v44);
  v45 = a3[9];
  v46 = a3[10];
  v47 = &a1[v45];
  v48 = &a2[v45];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v48[8];
  v49 = &a1[v46];
  v50 = &a2[v46];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v53 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease(v53);
  v54 = a3[11];
  v55 = *(_QWORD *)&a1[v54];
  v56 = *(_QWORD *)&a1[v54 + 8];
  *(_OWORD *)&a1[v54] = *(_OWORD *)&a2[v54];
  sub_10013DD30(v55, v56);
  return a1;
}

uint64_t sub_100222880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10022288C);
}

uint64_t sub_10022288C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100012E18(&qword_1005D4DF0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100012E18(&qword_1005D4DE8);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = sub_100012E18(&qword_1005D4DE0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_10022299C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002229A8);
}

uint64_t sub_1002229A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100012E18(&qword_1005D4DF0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_100012E18(&qword_1005D4DE8);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = sub_100012E18(&qword_1005D4DE0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[8] + 8) = a2;
  return result;
}

void sub_100222AA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  sub_100018C7C(319, (unint64_t *)&qword_1005DA840, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100018C7C(319, &qword_1005D4E70, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventObject);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100018C7C(319, &qword_1005D4E78, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventParticipant);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100018C7C(319, (unint64_t *)&unk_1005D4E80, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedActivityEvent.Activities);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          v10[4] = &unk_10045C818;
          v10[5] = &unk_10045C830;
          v10[6] = &unk_10045C818;
          v10[7] = &unk_10045C848;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100222BC4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100222BFC
                                                            + 4 * asc_10045C7F8[a1]))(0x6D617473656D6974, 0xE900000000000070);
}

uint64_t sub_100222BFC()
{
  return 0x7463656A626FLL;
}

uint64_t sub_100222C10()
{
  return 0x7069636974726170;
}

uint64_t sub_100222C30()
{
  return 0x7974697669746361;
}

uint64_t sub_100222C48()
{
  return 0x6B6361626C6C6166;
}

uint64_t sub_100222CA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v37;
  char v38;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D4EF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_100223788();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s8ActivityV10CodingKeysON, &_s8ActivityV10CodingKeysON, v11, v9, v10);
  LOBYTE(v37) = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100019C6C(&qword_1005D37B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v37, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)_s8ActivityVMa(0);
    v15 = v3 + v14[5];
    LOBYTE(v37) = 1;
    v16 = type metadata accessor for ActivityEventObject(0);
    v17 = sub_100019C6C(&qword_1005D4F00, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventObject, (uint64_t)&protocol conformance descriptor for ActivityEventObject);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v37, v5, v16, v17);
    v18 = v3 + v14[6];
    LOBYTE(v37) = 2;
    v19 = type metadata accessor for ActivityEventParticipant(0);
    v20 = sub_100019C6C(&qword_1005D4F08, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventParticipant, (uint64_t)&protocol conformance descriptor for ActivityEventParticipant);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v37, v5, v19, v20);
    v21 = v3 + v14[7];
    LOBYTE(v37) = 3;
    v22 = type metadata accessor for PersistedActivityEvent.Activities(0);
    v23 = sub_100019C6C(&qword_1005D4F10, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedActivityEvent.Activities, (uint64_t)&protocol conformance descriptor for PersistedActivityEvent.Activities);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v37, v5, v22, v23);
    v24 = (uint64_t *)(v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v37) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v37, v5);
    v27 = (uint64_t *)(v3 + v14[9]);
    v28 = *v27;
    LOBYTE(v27) = *((_BYTE *)v27 + 8);
    *(_QWORD *)&v37 = v28;
    BYTE8(v37) = (_BYTE)v27;
    v38 = 5;
    type metadata accessor for NotesVersion(0);
    v30 = v29;
    v31 = sub_100019C6C(&qword_1005D4F18, (uint64_t (*)(uint64_t))type metadata accessor for NotesVersion, (uint64_t)&protocol conformance descriptor for ICNotesVersion);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v38, v5, v30, v31);
    v32 = (uint64_t *)(v3 + v14[10]);
    v33 = *v32;
    v34 = v32[1];
    LOBYTE(v37) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v37, v5);
    v37 = *(_OWORD *)(v3 + v14[11]);
    v38 = 7;
    v35 = sub_10013E9A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, &type metadata for Data, v35);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100223000@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  _OWORD v85[2];
  char v86;

  v68 = a2;
  v3 = sub_100012E18(&qword_1005D4DE0);
  __chkstk_darwin(v3);
  v69 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005D4DE8);
  __chkstk_darwin(v5);
  v72 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D4DF0);
  __chkstk_darwin(v7);
  v71 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v9);
  v73 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100012E18(&qword_1005D4EC8);
  v74 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)_s8ActivityVMa(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v70 = v16;
  v17(v15, 1, 1);
  v18 = (uint64_t)&v15[v13[5]];
  v19 = type metadata accessor for ActivityEventObject(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v79 = v18;
  v20(v18, 1, 1, v19);
  v21 = &v15[v13[6]];
  v22 = type metadata accessor for ActivityEventParticipant(0);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v80 = (uint64_t)v21;
  v23(v21, 1, 1, v22);
  v24 = (uint64_t)&v15[v13[7]];
  v25 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v78 = v24;
  v26(v24, 1, 1, v25);
  v27 = &v15[v13[8]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v83 = v27;
  v84 = v15;
  v28 = &v15[v13[9]];
  *(_QWORD *)v28 = 0;
  v28[8] = 1;
  v29 = &v15[v13[10]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v82 = v29;
  v30 = a1[3];
  v31 = a1[4];
  v77 = a1;
  sub_10012D19C(a1, v30);
  v32 = sub_100223788();
  v75 = v12;
  v33 = v81;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s8ActivityV10CodingKeysON, &_s8ActivityV10CodingKeysON, v32, v30, v31);
  if (v33)
  {
    v38 = v79;
    v39 = v80;
    v40 = v78;
    sub_1000153C0(v77);
    sub_100012DDC((uint64_t)v84, (uint64_t *)&unk_1005D7B20);
    sub_100012DDC(v38, &qword_1005D4DF0);
    sub_100012DDC(v39, &qword_1005D4DE8);
    sub_100012DDC(v40, &qword_1005D4DE0);
    swift_bridgeObjectRelease(*((_QWORD *)v83 + 1));
    return swift_bridgeObjectRelease(*((_QWORD *)v82 + 1));
  }
  else
  {
    v67 = v13;
    v34 = (uint64_t)v71;
    v35 = (uint64_t)v72;
    v81 = v28;
    LOBYTE(v85[0]) = 0;
    v36 = sub_100019C6C(&qword_1005D36E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v37 = (uint64_t)v73;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v70, v85, v76, v70, v36);
    sub_100164108(v37, (uint64_t)v84, (uint64_t *)&unk_1005D7B20);
    LOBYTE(v85[0]) = 1;
    v41 = sub_100019C6C(&qword_1005D4ED8, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventObject, (uint64_t)&protocol conformance descriptor for ActivityEventObject);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, v85, v76, v19, v41);
    v42 = v80;
    sub_100164108(v34, v79, &qword_1005D4DF0);
    LOBYTE(v85[0]) = 2;
    v43 = sub_100019C6C(&qword_1005D4EE0, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventParticipant, (uint64_t)&protocol conformance descriptor for ActivityEventParticipant);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, v85, v76, v22, v43);
    sub_100164108(v35, v42, &qword_1005D4DE8);
    LOBYTE(v85[0]) = 3;
    v44 = sub_100019C6C(&qword_1005D4EE8, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedActivityEvent.Activities, (uint64_t)&protocol conformance descriptor for PersistedActivityEvent.Activities);
    v45 = (uint64_t)v69;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, v85, v76, v25, v44);
    sub_100164108(v45, v78, &qword_1005D4DE0);
    LOBYTE(v85[0]) = 4;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v85, v76);
    v48 = v47;
    v49 = (uint64_t *)v83;
    swift_bridgeObjectRelease(*((_QWORD *)v83 + 1));
    *v49 = v46;
    v49[1] = v48;
    type metadata accessor for NotesVersion(0);
    v51 = v50;
    v86 = 5;
    v52 = sub_100019C6C(&qword_1005D4EF0, (uint64_t (*)(uint64_t))type metadata accessor for NotesVersion, (uint64_t)&protocol conformance descriptor for ICNotesVersion);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v51, &v86, v76, v51, v52);
    v53 = BYTE8(v85[0]);
    v54 = v81;
    *(_QWORD *)v81 = *(_QWORD *)&v85[0];
    v54[8] = v53;
    LOBYTE(v85[0]) = 6;
    v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v85, v76);
    v56 = v74;
    v57 = v55;
    v59 = v58;
    v60 = v82;
    swift_bridgeObjectRelease(*((_QWORD *)v82 + 1));
    *v60 = v57;
    v60[1] = v59;
    v86 = 7;
    v61 = sub_10013E95C();
    v63 = v75;
    v62 = v76;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v85, &type metadata for Data, &v86, v76, &type metadata for Data, v61);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v63, v62);
    v64 = v68;
    v65 = (uint64_t)v84;
    *(_OWORD *)&v84[v67[11]] = v85[0];
    sub_1002237CC(v65, v64);
    sub_1000153C0(v77);
    return sub_100223810(v65);
  }
}

uint64_t sub_1002236D8()
{
  unsigned __int8 *v0;

  return sub_100222BC4(*v0);
}

uint64_t sub_1002236E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100223A80(a1, a2);
  *a3 = result;
  return result;
}

void sub_100223704(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100223710(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100223788();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100223738(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100223788();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100223760@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100223000(a1, a2);
}

uint64_t sub_100223774(_QWORD *a1)
{
  return sub_100222CA4(a1);
}

unint64_t sub_100223788()
{
  unint64_t result;

  result = qword_1005D4ED0;
  if (!qword_1005D4ED0)
  {
    result = swift_getWitnessTable(&unk_10045C974, &_s8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D4ED0);
  }
  return result;
}

uint64_t sub_1002237CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8ActivityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100223810(uint64_t a1)
{
  uint64_t v2;

  v2 = _s8ActivityVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s8ActivityV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8ActivityV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100223928 + 4 * byte_10045C805[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10022395C + 4 * byte_10045C800[v4]))();
}

uint64_t sub_10022395C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100223964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10022396CLL);
  return result;
}

uint64_t sub_100223978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100223980);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100223984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10022398C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8ActivityV10CodingKeysOMa()
{
  return &_s8ActivityV10CodingKeysON;
}

unint64_t sub_1002239AC()
{
  unint64_t result;

  result = qword_1005D4F20;
  if (!qword_1005D4F20)
  {
    result = swift_getWitnessTable(&unk_10045C94C, &_s8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D4F20);
  }
  return result;
}

unint64_t sub_1002239F4()
{
  unint64_t result;

  result = qword_1005D4F28;
  if (!qword_1005D4F28)
  {
    result = swift_getWitnessTable(&unk_10045C8BC, &_s8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D4F28);
  }
  return result;
}

unint64_t sub_100223A3C()
{
  unint64_t result;

  result = qword_1005D4F30;
  if (!qword_1005D4F30)
  {
    result = swift_getWitnessTable(&unk_10045C8E4, &_s8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D4F30);
  }
  return result;
}

uint64_t sub_100223A80(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v5 = 0xE900000000000070;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7463656A626FLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7069636974726170 && a2 == 0xEB00000000746E61)
  {
    v8 = 0xEB00000000746E61;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069636974726170, 0xEB00000000746E61, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7974697669746361 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974697669746361, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xEC00000065707954)
  {
    v10 = 0xEC00000065707954;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xEC00000065707954, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000016)
  {
    v11 = 0x8000000100483870;
    if (a2 == 0x8000000100483870)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100483870, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xED0000656C746954)
  {
    v12 = 0xED0000656C746954;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xED0000656C746954, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease(0xEC00000061746144);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xEC00000061746144, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t destroy for PasswordProtectionDebugSection(uint64_t a1)
{

  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for PasswordProtectionDebugSection(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = v3;
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for PasswordProtectionDebugSection(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for PasswordProtectionDebugSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityDebugStatusController.GroupActivityIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupActivityDebugStatusController.GroupActivityIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PasswordProtectionDebugSection()
{
  return &type metadata for PasswordProtectionDebugSection;
}

uint64_t sub_100223FD0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100504F10, 1);
}

uint64_t sub_100223FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;

  v39 = a5;
  v9 = sub_100012E18(&qword_1005D4F38);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005D4F40);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100012E18(&qword_1005D4F48);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.leading.getter(v16);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v19 = sub_100012E18(&qword_1005D4F50);
  v20 = sub_1002241FC(a1, a2, a3, a4, (uint64_t)&v11[*(int *)(v19 + 44)]);
  v21 = static Font.caption.getter(v20);
  KeyPath = swift_getKeyPath(&unk_10045CA40, v22);
  sub_100012CE8((uint64_t)v11, (uint64_t)v14, &qword_1005D4F38);
  v24 = (uint64_t *)&v14[*(int *)(v12 + 36)];
  *v24 = KeyPath;
  v24[1] = v21;
  v25 = sub_100012DDC((uint64_t)v11, &qword_1005D4F38);
  v26 = static Edge.Set.horizontal.getter(v25);
  v27 = objc_msgSend((id)objc_opt_self(ICDeviceSupport), "deviceIsMac");
  v28 = 8.0;
  if (v27)
    v28 = 12.0;
  v29 = EdgeInsets.init(_all:)(v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_100012CE8((uint64_t)v14, (uint64_t)v18, &qword_1005D4F40);
  v36 = &v18[*(int *)(v15 + 36)];
  *v36 = v26;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  sub_100012DDC((uint64_t)v14, &qword_1005D4F40);
  return sub_1002256A0((uint64_t)v18, v39);
}

uint64_t sub_1002241FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  char v65;
  __int128 v66;
  _OWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  unsigned __int8 v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  id v93;
  void *v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  id v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  id v114;
  double v115;
  Swift::String v116;
  _BYTE *v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  void *v121;
  void *v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t OpaqueTypeConformance2;
  uint64_t v152;
  _OWORD *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  unint64_t v167;
  unsigned __int8 v168;
  char v169;
  __int128 v170;
  _OWORD *v171;
  _OWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unsigned __int8 v181;
  char v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  char v189;
  uint64_t v190;
  char v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _OWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unsigned __int8 v211;
  char v212;
  __int128 v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE v220[4];
  int v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  _BYTE *v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  _BYTE *v231;
  uint64_t v232;
  _BYTE *v233;
  uint64_t v234;
  _BYTE *v235;
  uint64_t v236;
  _BYTE *v237;
  uint64_t v238;
  _OWORD *v239;
  uint64_t v240;
  _BYTE *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int16 v248;
  __int128 v249;
  __int128 v250;
  unsigned __int8 v251;
  char v252;

  v236 = a4;
  v224 = a3;
  v243 = a2;
  v223 = a1;
  v242 = a5;
  v6 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v6);
  v235 = &v220[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v230 = sub_100012E18(&qword_1005D31D0);
  v234 = *(_QWORD *)(v230 - 8);
  __chkstk_darwin(v230);
  v233 = &v220[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v232 = sub_100012E18(&qword_1005D4F58);
  v227 = *(_QWORD *)(v232 - 8);
  v9 = __chkstk_darwin(v232);
  v225 = &v220[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v226 = &v220[-v11];
  v228 = sub_100012E18(&qword_1005D4F60);
  __chkstk_darwin(v228);
  v229 = (uint64_t *)&v220[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v238 = sub_100012E18(&qword_1005D4F68);
  __chkstk_darwin(v238);
  v231 = &v220[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v245 = sub_100012E18(&qword_1005D4F70);
  __chkstk_darwin(v245);
  v239 = &v220[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_100012E18(&qword_1005D4F78);
  v16 = __chkstk_darwin(v15);
  v241 = &v220[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v237 = &v220[-v18];
  v19 = (void *)objc_opt_self(ICCryptoStrategyFactory);
  v20 = (id)ICCipherNameForCipherVersion(objc_msgSend(v19, "cipherVersionForObject:", a2));
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  *(_QWORD *)&v249 = v21;
  *((_QWORD *)&v249 + 1) = v23;
  v24 = sub_1001452E8();
  v25 = Text.init<A>(_:)(&v249, &type metadata for String, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = static Font.subheadline.getter(v25);
  v33 = Text.font(_:)(v32, v25, v27, v31, v29);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  swift_release(v32);
  v40 = v25;
  v41 = (void *)v243;
  sub_10014BCF0(v40, v27, v31);
  v42 = swift_bridgeObjectRelease(v29);
  v43 = static Font.Weight.medium.getter(v42);
  v44 = Text.fontWeight(_:)(*(_QWORD *)&v43, 0, v33, v35, v37 & 1, v39);
  v46 = v45;
  v48 = v47;
  v244 = v49;
  sub_10014BCF0(v33, v35, v37 & 1);
  swift_bridgeObjectRelease(v39);
  v50 = objc_msgSend(v19, "cipherVersionForObject:", v41);
  v51 = objc_msgSend(v19, "userSelectedCipherVersionForObject:", v41);
  v240 = v46;
  if (v50 != v51)
  {
    v76 = v235;
    v77 = v236;
    v78 = v233;
    v79 = v234;
    v221 = v48;
    v222 = v44;
    v80 = v41;
    v81 = v19;
    if (objc_msgSend(v19, "userSelectedCipherVersionForObject:", v41) != (id)2
      || (v82 = objc_msgSend(v41, "account")) != 0
      && (v83 = v82, v84 = objc_msgSend(v82, "accountData"), v83, v84)
      && (v85 = objc_msgSend(v84, "supportsV1Neo"), v84, (v85 & 1) != 0))
    {
      v86 = objc_msgSend(v19, "userSelectedCipherVersionForObject:", v80);
      v87 = v245;
      v88 = v79;
      v89 = v78;
      v90 = v77;
      v91 = v76;
      if (v86 == (id)2)
      {
        v92 = v245;
        v93 = objc_msgSend(v80, "account");
        if (!v93
          || (v94 = v93,
              v95 = objc_msgSend(v93, "accountData"),
              v94,
              !v95)
          || (v96 = objc_msgSend(v95, "cryptoPassphraseVerifier"),
              v95,
              !v96))
        {
          v174 = static Color.secondary.getter(v93);
          v158 = Text.foregroundColor(_:)(v174, 0xD000000000000084, 0x8000000100483930, 0, _swiftEmptyArrayStorage);
          v160 = v175;
          v177 = v176;
          v164 = v178;
          swift_release(v174);
          v165 = v177 & 1;
          *(_QWORD *)&v246 = v158;
          *((_QWORD *)&v246 + 1) = v160;
          *(_QWORD *)&v247 = v177 & 1;
          *((_QWORD *)&v247 + 1) = v164;
          LOBYTE(v248) = 0;
          sub_10014BCE0(v158, v160, v177 & 1);
          swift_bridgeObjectRetain(v164);
          _ConditionalContent<>.init(storage:)(&v246, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
          v246 = v249;
          v247 = v250;
          LOBYTE(v248) = v251;
          HIBYTE(v248) = 1;
          v179 = sub_100012E18(&qword_1005D4F98);
          v180 = sub_10022574C();
          _ConditionalContent<>.init(storage:)(&v246, v179, v179, v180, v180);
          v181 = v251;
          v182 = v252;
          v183 = v250;
          v171 = v239;
          *v239 = v249;
          v171[1] = v183;
          *((_BYTE *)v171 + 32) = v181;
          *((_BYTE *)v171 + 33) = v182;
          v172 = v171;
          v173 = v92;
          goto LABEL_22;
        }
        v97 = v88;
        v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v96);
        v99 = v81;
        v101 = v100;

        v102 = v98;
        v88 = v97;
        v103 = v101;
        v81 = v99;
        sub_10013DD30(v102, v103);
        v87 = v92;
      }
      if (objc_msgSend(v81, "userSelectedCipherVersionForObject:", v80))
      {
LABEL_16:
        v114 = objc_msgSend(v80, "isAuthenticated");
        if ((v114 & 1) != 0)
        {
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, v115);
          v116._object = (void *)0x80000001004838C0;
          v116._countAndFlagsBits = 0xD000000000000010;
          v117 = v91;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v116);
          v118 = v88;
          v119 = (id)ICCipherNameForCipherVersion(objc_msgSend(v81, "userSelectedCipherVersionForObject:", v80));
          v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
          v122 = v121;

          v123._countAndFlagsBits = v120;
          v123._object = v122;
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v123);
          swift_bridgeObjectRelease(v122);
          v124._countAndFlagsBits = 0;
          v124._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v124);
          v125 = LocalizedStringKey.init(stringInterpolation:)(v117);
          v127 = v126;
          LOBYTE(v120) = v128;
          v130 = v129;
          v131 = swift_allocObject(&unk_10055FA80, 48, 7);
          *(_QWORD *)(v131 + 16) = v223;
          *(_QWORD *)(v131 + 24) = v80;
          v132 = v224 & 1;
          *(_BYTE *)(v131 + 32) = v224 & 1;
          *(_QWORD *)(v131 + 40) = v90;
          swift_retain(v90);
          v133 = v80;
          Button<>.init(_:action:)(v125, v127, v120 & 1, v130, sub_100225864, v131);
          v243 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001004838E0);
          v135 = v134;
          LOBYTE(v130) = v136;
          v138 = v137;
          LOBYTE(v246) = v132;
          *((_QWORD *)&v246 + 1) = v90;
          v139 = sub_100012E18(&qword_1005D09E8);
          State.projectedValue.getter(&v249, v139);
          v140 = v249;
          v141 = v250;
          v142 = v89;
          v143 = sub_100016638(&qword_1005D31F0, &qword_1005D31D0, (uint64_t)&protocol conformance descriptor for Button<A>);
          v144 = v130 & 1;
          v145 = v230;
          v146 = v225;
          View.alert<A>(_:isPresented:actions:)(v243, v135, v144, v138, v140, *((_QWORD *)&v140 + 1), v141, sub_1002255B0, 0, v230, v230, v143, v143);
          swift_bridgeObjectRelease(v138);
          swift_bridgeObjectRelease(v135);
          swift_release(*((_QWORD *)&v140 + 1));
          swift_release(v140);
          (*(void (**)(_BYTE *, uint64_t))(v118 + 8))(v142, v145);
          v147 = v227;
          v148 = v226;
          v149 = v232;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v227 + 32))(v226, v146, v232);
          v150 = v229;
          (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v147 + 16))(v229, v148, v149);
          swift_storeEnumTagMultiPayload(v150, v228, 1);
          *(_QWORD *)&v249 = v145;
          *((_QWORD *)&v249 + 1) = v145;
          *(_QWORD *)&v250 = v143;
          *((_QWORD *)&v250 + 1) = v143;
          OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v249, &opaque type descriptor for <<opaque return type of View.alert<A>(_:isPresented:actions:)>>, 1);
          v152 = (uint64_t)v231;
          _ConditionalContent<>.init(storage:)(v150, &type metadata for Text, v149, &protocol witness table for Text, OpaqueTypeConformance2);
          v153 = v239;
          sub_100012CE8(v152, (uint64_t)v239, &qword_1005D4F68);
          swift_storeEnumTagMultiPayload(v153, v245, 1);
          v154 = sub_100012E18(&qword_1005D4F80);
          v155 = sub_1002256E8();
          v156 = sub_1002257A8();
          v71 = (uint64_t)v237;
          _ConditionalContent<>.init(storage:)(v153, v154, v238, v155, v156);
          sub_100012DDC(v152, &qword_1005D4F68);
          (*(void (**)(_BYTE *, uint64_t))(v147 + 8))(v148, v149);
LABEL_24:
          v74 = v242;
          v75 = (uint64_t)v241;
          v44 = v222;
          v73 = v240;
          v54 = v221;
          goto LABEL_25;
        }
        v184 = static Color.secondary.getter(v114);
        v185 = Text.foregroundColor(_:)(v184, 0xD00000000000002ELL, 0x8000000100483890, 0, _swiftEmptyArrayStorage);
        v187 = v186;
        v189 = v188;
        v164 = v190;
        swift_release(v184);
        v191 = v189 & 1;
        v192 = v229;
        *v229 = v185;
        v192[1] = v187;
        *((_BYTE *)v192 + 16) = v191;
        v192[3] = v164;
        swift_storeEnumTagMultiPayload(v192, v228, 0);
        sub_10014BCE0(v185, v187, v191);
        v193 = sub_100016638(&qword_1005D31F0, &qword_1005D31D0, (uint64_t)&protocol conformance descriptor for Button<A>);
        swift_bridgeObjectRetain(v164);
        *(_QWORD *)&v249 = v230;
        *((_QWORD *)&v249 + 1) = v230;
        *(_QWORD *)&v250 = v193;
        *((_QWORD *)&v250 + 1) = v193;
        v194 = swift_getOpaqueTypeConformance2(&v249, &opaque type descriptor for <<opaque return type of View.alert<A>(_:isPresented:actions:)>>, 1);
        v195 = (uint64_t)v231;
        _ConditionalContent<>.init(storage:)(v192, &type metadata for Text, v232, &protocol witness table for Text, v194);
        v196 = v239;
        sub_100012CE8(v195, (uint64_t)v239, &qword_1005D4F68);
        swift_storeEnumTagMultiPayload(v196, v245, 1);
        v197 = sub_100012E18(&qword_1005D4F80);
        v198 = sub_1002256E8();
        v199 = sub_1002257A8();
        v71 = (uint64_t)v237;
        _ConditionalContent<>.init(storage:)(v196, v197, v238, v198, v199);
        sub_100012DDC(v195, &qword_1005D4F68);
        v200 = v185;
        v201 = v187;
        v202 = v191;
LABEL_23:
        sub_10014BCF0(v200, v201, v202);
        swift_bridgeObjectRelease(v164);
        goto LABEL_24;
      }
      v104 = objc_msgSend(v80, "account");
      if (v104)
      {
        v105 = v104;
        v106 = objc_msgSend(v104, "cryptoVerifier");

        if (v106)
        {
          v107 = v88;
          v108 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v106);
          v109 = v81;
          v111 = v110;

          v112 = v108;
          v88 = v107;
          v113 = v111;
          v81 = v109;
          sub_10013DD30(v112, v113);
          goto LABEL_16;
        }
      }
      v203 = static Color.secondary.getter(v104);
      v158 = Text.foregroundColor(_:)(v203, 0xD000000000000023, 0x8000000100483900, 0, _swiftEmptyArrayStorage);
      v160 = v204;
      v206 = v205;
      v207 = v87;
      v164 = v208;
      swift_release(v203);
      v165 = v206 & 1;
      *(_QWORD *)&v246 = v158;
      *((_QWORD *)&v246 + 1) = v160;
      *(_QWORD *)&v247 = v206 & 1;
      *((_QWORD *)&v247 + 1) = v164;
      LOBYTE(v248) = 1;
      sub_10014BCE0(v158, v160, v206 & 1);
      swift_bridgeObjectRetain(v164);
      _ConditionalContent<>.init(storage:)(&v246, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
      v246 = v249;
      v247 = v250;
      LOBYTE(v248) = v251;
      HIBYTE(v248) = 1;
      v209 = sub_100012E18(&qword_1005D4F98);
      v210 = sub_10022574C();
      _ConditionalContent<>.init(storage:)(&v246, v209, v209, v210, v210);
      v211 = v251;
      v212 = v252;
      v213 = v250;
      v171 = v239;
      *v239 = v249;
      v171[1] = v213;
      *((_BYTE *)v171 + 32) = v211;
      *((_BYTE *)v171 + 33) = v212;
      v172 = v171;
      v173 = v207;
    }
    else
    {
      v157 = static Color.secondary.getter(v82);
      v158 = Text.foregroundColor(_:)(v157, 0xD00000000000008ELL, 0x80000001004839C0, 0, _swiftEmptyArrayStorage);
      v160 = v159;
      v162 = v161;
      v164 = v163;
      swift_release(v157);
      v165 = v162 & 1;
      *(_QWORD *)&v246 = v158;
      *((_QWORD *)&v246 + 1) = v160;
      *(_QWORD *)&v247 = v162 & 1;
      *((_QWORD *)&v247 + 1) = v164;
      LOBYTE(v248) = 1;
      sub_10014BCE0(v158, v160, v162 & 1);
      swift_bridgeObjectRetain(v164);
      _ConditionalContent<>.init(storage:)(&v246, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
      v246 = v249;
      v247 = v250;
      v248 = v251;
      v166 = sub_100012E18(&qword_1005D4F98);
      v167 = sub_10022574C();
      _ConditionalContent<>.init(storage:)(&v246, v166, v166, v167, v167);
      v168 = v251;
      v169 = v252;
      v170 = v250;
      v171 = v239;
      *v239 = v249;
      v171[1] = v170;
      *((_BYTE *)v171 + 32) = v168;
      *((_BYTE *)v171 + 33) = v169;
      v172 = v171;
      v173 = v245;
    }
LABEL_22:
    swift_storeEnumTagMultiPayload(v172, v173, 0);
    v214 = sub_100012E18(&qword_1005D4F80);
    v215 = sub_1002256E8();
    v216 = sub_1002257A8();
    v71 = (uint64_t)v237;
    _ConditionalContent<>.init(storage:)(v171, v214, v238, v215, v216);
    v200 = v158;
    v201 = v160;
    v202 = v165;
    goto LABEL_23;
  }
  v52 = static Color.secondary.getter(v51);
  v53 = Text.foregroundColor(_:)(v52, 0xD00000000000001CLL, 0x8000000100483A50, 0, _swiftEmptyArrayStorage);
  v54 = v48;
  v56 = v55;
  v58 = v57;
  v60 = v59;
  swift_release(v52);
  v61 = v58 & 1;
  *(_QWORD *)&v246 = v53;
  *((_QWORD *)&v246 + 1) = v56;
  *(_QWORD *)&v247 = v58 & 1;
  *((_QWORD *)&v247 + 1) = v60;
  LOBYTE(v248) = 0;
  sub_10014BCE0(v53, v56, v58 & 1);
  swift_bridgeObjectRetain(v60);
  _ConditionalContent<>.init(storage:)(&v246, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v246 = v249;
  v247 = v250;
  v248 = v251;
  v62 = sub_100012E18(&qword_1005D4F98);
  v63 = sub_10022574C();
  _ConditionalContent<>.init(storage:)(&v246, v62, v62, v63, v63);
  v64 = v251;
  v65 = v252;
  v66 = v250;
  v67 = v239;
  *v239 = v249;
  v67[1] = v66;
  *((_BYTE *)v67 + 32) = v64;
  *((_BYTE *)v67 + 33) = v65;
  swift_storeEnumTagMultiPayload(v67, v245, 0);
  v68 = sub_100012E18(&qword_1005D4F80);
  v69 = sub_1002256E8();
  v70 = sub_1002257A8();
  v71 = (uint64_t)v237;
  _ConditionalContent<>.init(storage:)(v67, v68, v238, v69, v70);
  v72 = v53;
  v73 = v240;
  sub_10014BCF0(v72, v56, v61);
  swift_bridgeObjectRelease(v60);
  v74 = v242;
  v75 = (uint64_t)v241;
LABEL_25:
  sub_100012CE8(v71, v75, &qword_1005D4F78);
  *(_QWORD *)v74 = v44;
  *(_QWORD *)(v74 + 8) = v73;
  *(_BYTE *)(v74 + 16) = v54 & 1;
  v217 = v244;
  *(_QWORD *)(v74 + 24) = v244;
  v218 = sub_100012E18(&qword_1005D4FA8);
  sub_100012CE8(v75, v74 + *(int *)(v218 + 48), &qword_1005D4F78);
  sub_10014BCE0(v44, v73, v54 & 1);
  swift_bridgeObjectRetain(v217);
  sub_100012DDC(v71, &qword_1005D4F78);
  sub_100012DDC(v75, &qword_1005D4F78);
  sub_10014BCF0(v44, v73, v54 & 1);
  return swift_bridgeObjectRelease(v217);
}

void sub_100225294(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;

  v8 = objc_msgSend((id)objc_opt_self(ICLockedNotesModeMigrator), "sharedMigrator");
  v9 = swift_allocObject(&unk_10055FAA8, 48, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_BYTE *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  v13[4] = sub_1002258A4;
  v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1001FD5D4;
  v13[3] = &unk_10055FAC0;
  v10 = _Block_copy(v13);
  v11 = v14;
  swift_retain(a4);
  v12 = a2;
  swift_release(v11);
  objc_msgSend(v8, "migrateNote:completionHandler:", v12, v10);
  _Block_release(v10);

}

uint64_t sub_1002253A4(void *a1, uint64_t a2, void *a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v13 - 8);
  v30 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10015672C();
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = swift_allocObject(&unk_10055FAF8, 56, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  *(_BYTE *)(v18 + 32) = a4;
  *(_QWORD *)(v18 + 40) = a5;
  *(_QWORD *)(v18 + 48) = a1;
  aBlock[4] = sub_1002258E8;
  v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_10055FB10;
  v19 = _Block_copy(aBlock);
  v20 = v33;
  v21 = a1;
  v22 = a3;
  swift_retain(a5);
  v23 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_100225940();
  v25 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v26 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v10, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v15, v30);
}

uint64_t sub_1002255B0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = sub_100012E18(&qword_1005D4FB0);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = LocalizedStringKey.init(stringLiteral:)(19279, 0xE200000000000000);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  static ButtonRole.cancel.getter();
  v10 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v2, 0, 1, v10);
  return Button<>.init(_:role:action:)(v3, v5, v7 & 1, v9, v2, ICCloudSyncingObject.MoveAction.Types.rawValue.getter, 0);
}

uint64_t sub_100225688@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100223FE0(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1002256A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D4F48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002256E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4F88;
  if (!qword_1005D4F88)
  {
    v1 = sub_10001537C(&qword_1005D4F80);
    sub_10022574C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4F88);
  }
  return result;
}

unint64_t sub_10022574C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4F90;
  if (!qword_1005D4F90)
  {
    v1 = sub_10001537C(&qword_1005D4F98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4F90);
  }
  return result;
}

unint64_t sub_1002257A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  uint64_t v3;
  uint64_t v4;

  result = qword_1005D4FA0;
  if (!qword_1005D4FA0)
  {
    v1 = sub_10001537C(&qword_1005D4F68);
    v2[0] = sub_10001537C(&qword_1005D31D0);
    v2[1] = v2[0];
    v3 = sub_100016638(&qword_1005D31F0, &qword_1005D31D0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v4 = v3;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.alert<A>(_:isPresented:actions:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4FA0);
  }
  return result;
}

void sub_100225864()
{
  uint64_t v0;

  sub_100225294(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100225878()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002258A4(void *a1)
{
  uint64_t v1;

  return sub_1002253A4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1002258B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002258E8()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48) != 0;
  v5[1] = *(_BYTE *)(v0 + 32);
  v6 = v1;
  v5[0] = v2;
  v3 = sub_100012E18(&qword_1005D09E8);
  return State.wrappedValue.setter(v5, v3);
}

unint64_t sub_100225940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D6380;
  if (!qword_1005D6380)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1005D6380);
  }
  return result;
}

unint64_t sub_10022598C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4FB8;
  if (!qword_1005D4FB8)
  {
    v1 = sub_10001537C(&qword_1005D4F48);
    sub_1002259F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4FB8);
  }
  return result;
}

unint64_t sub_1002259F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4FC0;
  if (!qword_1005D4FC0)
  {
    v1 = sub_10001537C(&qword_1005D4F40);
    sub_100016638(&qword_1005D4FC8, &qword_1005D4F38, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100016638(&qword_1005D0958, &qword_1005D0948, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4FC0);
  }
  return result;
}

uint64_t sub_100225A9C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D4FD0);
  sub_10012A0B0(v0, (uint64_t)qword_1005D4FD0);
  return static Logger.application.getter();
}

uint64_t ICSearchSuggestion.id.getter()
{
  uint64_t v0;

  return v0;
}

void *sub_100225AEC()
{
  return &protocol witness table for ObjectIdentifier;
}

char *sub_100225B08(void *a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  char *result;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  id v34;
  char *v35;
  void *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  objc_class *ObjectType;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  objc_super v49;

  v48 = a2;
  v43 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v3 = sub_100012E18((uint64_t *)&unk_1005D5040);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  __chkstk_darwin(v3);
  v39 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18((uint64_t *)&unk_1005D5050);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - v10;
  v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR___ICSearchSuggestionController_sectionId] = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for UICollectionLayoutListConfiguration.Appearance.plain(_:), v12);
  v18 = v2;
  UICollectionLayoutListConfiguration.init(appearance:)(v15);
  UICollectionLayoutListConfiguration.itemSeparatorHandler.setter(sub_100225F3C, 0);
  v19 = sub_1000163BC(0, &qword_1005CFE50, UICollectionViewListCell_ptr);
  UICollectionView.CellRegistration.init(handler:)(sub_10022601C, 0, v19, &type metadata for AnyHashable);
  sub_1000163BC(0, (unint64_t *)&qword_1005D5060, UICollectionViewCompositionalLayout_ptr);
  v20 = (void *)static UICollectionViewCompositionalLayout.list(using:)(v17);
  v21 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v20, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v18[OBJC_IVAR___ICSearchSuggestionController_collectionView] = v21;
  v22 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v46 = v11;
  v22(v9, v11, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_10055FC28, v24 + v7, v23 | 7);
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v47 = v5;
  v26(v25 + v24, v9, v5);
  objc_allocWithZone((Class)sub_100012E18(&qword_1005D5068));
  *(_QWORD *)&v18[OBJC_IVAR___ICSearchSuggestionController_dataSource] = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v21, sub_100227074, v25);
  result = (char *)objc_msgSend((id)objc_opt_self(ICSearchSuggestion), "orderedDefaultSearchSuggestions");
  if (result)
  {
    v28 = result;
    v29 = sub_1000163BC(0, (unint64_t *)&unk_1005D7350, ICSearchSuggestion_ptr);
    v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

    v31 = v39;
    sub_100226334(v30, 0);
    swift_bridgeObjectRelease(v30);
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v31, 0, 0, 0);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
    v32 = v48;
    *(_QWORD *)&v18[OBJC_IVAR___ICSearchSuggestionController_delegate] = v48;
    v33 = v43;
    *(_QWORD *)&v18[OBJC_IVAR___ICSearchSuggestionController_parentView] = v43;
    swift_unknownObjectRetain(v32);
    v34 = v33;

    v49.receiver = v18;
    v49.super_class = ObjectType;
    v35 = (char *)objc_msgSendSuper2(&v49, "init");
    v36 = *(void **)&v35[OBJC_IVAR___ICSearchSuggestionController_collectionView];
    v37 = v35;
    objc_msgSend(v36, "setDelegate:", v37);
    objc_msgSend(v36, "setKeyboardDismissMode:", 1);

    swift_unknownObjectRelease(v32, v38);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v46, v47);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v44);
    return v37;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100225F3C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v4 = type metadata accessor for UIListSeparatorConfiguration.Visibility(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UIListSeparatorConfiguration(0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  result = IndexPath.row.getter(v9);
  if (!result)
  {
    v11 = enum case for UIListSeparatorConfiguration.Visibility.hidden(_:);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
    v12(v7, enum case for UIListSeparatorConfiguration.Visibility.hidden(_:), v4);
    UIListSeparatorConfiguration.bottomSeparatorVisibility.setter(v7);
    v12(v7, v11, v4);
    return UIListSeparatorConfiguration.topSeparatorVisibility.setter(v7);
  }
  return result;
}

id sub_10022601C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id result;
  id v20;
  void (*v21)(_QWORD *, _QWORD);
  UIAccessibilityTraits v22;
  unint64_t v23;
  UIAccessibilityTraits v24;
  id v25;
  void (*v26)(_QWORD *, _QWORD);
  _QWORD *v27;
  _QWORD v29[2];
  _QWORD v30[5];

  v5 = type metadata accessor for UIListContentConfiguration(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v29[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  UICollectionViewListCell.defaultContentConfiguration()(v7);
  v10.isa = AnyHashable._bridgeToObjectiveC()().isa;
  v11 = objc_opt_self(ICSearchSuggestion);
  v12 = (void *)swift_dynamicCastObjCClass(v10.isa, v11);
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "suggestionItemTitle");
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

    }
    else
    {
      v16 = 0;
      v18 = 0;
    }
    UIListContentConfiguration.text.setter(v16, v18);
    v25 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithTextStyle:", UIFontTextStyleBody);
    v26 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.imageProperties.modify(v30);
    UIListContentConfiguration.ImageProperties.preferredSymbolConfiguration.setter(v25);
    v26(v30, 0);
    UIListContentConfiguration.image.setter(objc_msgSend(v13, "iconImage"));

    goto LABEL_12;
  }

  sub_10020DB18(a3, (uint64_t)v30);
  if ((swift_dynamicCast(v29, v30, &type metadata for AnyHashable, &type metadata for String, 6) & 1) == 0)
  {
LABEL_12:
    v30[3] = v5;
    v30[4] = &protocol witness table for UIListContentConfiguration;
    v27 = sub_10012D160(v30);
    (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 16))(v27, v9, v5);
    UICollectionViewCell.contentConfiguration.setter(v30);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  UIListContentConfiguration.text.setter(v29[0], v29[1]);
  result = objc_msgSend((id)objc_opt_self(UIFont), "ic_groupInsetHeaderFont");
  if (result)
  {
    v20 = result;
    v21 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.textProperties.modify(v30);
    UIListContentConfiguration.TextProperties.font.setter(v20);
    v21(v30, 0);
    v22 = UIAccessibilityTraitHeader;
    v23 = (unint64_t)objc_msgSend(a1, "accessibilityTraits");
    if ((v22 & ~v23) != 0)
      v24 = v22;
    else
      v24 = 0;
    objc_msgSend(a1, "setAccessibilityTraits:", v24 | v23);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002262AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  sub_10020DB18(a3, (uint64_t)v9);
  v6 = sub_1000163BC(0, &qword_1005CFE50, UICollectionViewListCell_ptr);
  v7 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(a4, a2, v9, v6, &type metadata for AnyHashable);
  sub_100016108((uint64_t)v9);
  return v7;
}

uint64_t sub_100226334(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  Swift::OpaquePointer v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  NSDiffableDataSourceSnapshot.init()(&type metadata for Int, &type metadata for AnyHashable, &protocol witness table for Int, &protocol witness table for AnyHashable);
  v4 = sub_100012E18((uint64_t *)&unk_1005D0E90);
  v5._rawValue = (void *)swift_allocObject(v4, 40, 7);
  *((_OWORD *)v5._rawValue + 1) = xmmword_100451C20;
  *((_QWORD *)v5._rawValue + 4) = a2;
  v6 = sub_100012E18((uint64_t *)&unk_1005D5040);
  NSDiffableDataSourceSnapshot.appendSections(_:)(v5);
  swift_bridgeObjectRelease(v5._rawValue);
  v7 = sub_100012E18((uint64_t *)&unk_1005D21E0);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100451C20;
  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "localizedStringForKey:value:table:", v10, 0, 0);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v17 = v12;
  v18 = v14;
  AnyHashable.init<A>(_:)((_QWORD *)(v8 + 32), &v17, &type metadata for String, &protocol witness table for String);
  v17 = a2;
  LOBYTE(v18) = 0;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v8, &v17, v6);
  swift_bridgeObjectRelease(v8);
  v15 = sub_1002B0334(a1);
  v17 = a2;
  LOBYTE(v18) = 0;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v15, &v17, v6);
  return swift_bridgeObjectRelease(v15);
}

void sub_100226554(char a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  char *v6;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat *v31;
  void *v32;
  CGFloat *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  void **v42;
  char *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double v49;
  void *v50;
  CGFloat *v51;
  void *v52;
  CGFloat *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void **aBlock;
  uint64_t v58;
  void *v59;
  void *v60;
  id (*v61)();
  CGFloat *v62;
  uint64_t v63;
  uint64_t v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v13 = *(void **)&v6[OBJC_IVAR___ICSearchSuggestionController_collectionView];
  v14 = objc_msgSend(v13, "superview");
  if (!v14
    || (v15 = v14, v16 = *(id *)&v6[OBJC_IVAR___ICSearchSuggestionController_parentView], v14, v15 != v16))
  {
    objc_msgSend(*(id *)&v6[OBJC_IVAR___ICSearchSuggestionController_parentView], "addSubview:", v13);
    objc_msgSend(v13, "setHidden:", 0);
    objc_msgSend(v13, "ic_addConstraintsToFillSuperview");
  }
  if ((a1 & 1) != 0 && a2)
  {
    v17 = objc_msgSend(v13, "superview", swift_unknownObjectRetain(a2).n128_f64[0]);
    if (v17)
    {
      v18 = v17;
      objc_msgSend(v17, "bounds");
      v20 = v19;
      v22 = v21;
      v24 = v23;
      v26 = v25;
      v65.origin.x = a3;
      v65.origin.y = a4;
      v65.size.width = a5;
      v65.size.height = a6;
      v27 = CGRectGetMaxY(v65) + a4;
      objc_msgSend(v13, "adjustedContentInset");
      v29 = v27 + v28;
      v66.origin.x = v20;
      v66.origin.y = v22;
      v66.size.width = v24;
      v66.size.height = v26;
      v67 = CGRectOffset(v66, 0.0, v29);
      objc_msgSend(v13, "setFrame:", v67.origin.x, v67.origin.y, v67.size.width, v67.size.height);
      objc_msgSend(a2, "transitionDuration");
      if (v30 == 0.0)
      {
        v31 = (CGFloat *)swift_allocObject(&unk_10055FBD8, 56, 7);
        *((_QWORD *)v31 + 2) = v6;
        v31[3] = v20;
        v31[4] = v22;
        v31[5] = v24;
        v31[6] = v26;
        v61 = sub_100226FEC;
        v62 = v31;
        aBlock = _NSConcreteStackBlock;
        v58 = 1107296256;
        v59 = sub_10015AC08;
        v60 = &unk_10055FBF0;
        v32 = _Block_copy(&aBlock);
        v33 = v62;
        v34 = v6;
        swift_release(v33);
        objc_msgSend(a2, "animateAlongsideTransition:completion:", v32, 0);

        _Block_release(v32);
        swift_unknownObjectRelease(a2, v35);
      }
      else
      {
        v49 = v30;
        v50 = (void *)objc_opt_self(UIView);
        v51 = (CGFloat *)swift_allocObject(&unk_10055FB88, 56, 7);
        *((_QWORD *)v51 + 2) = v6;
        v51[3] = v20;
        v51[4] = v22;
        v51[5] = v24;
        v51[6] = v26;
        v61 = sub_100226FEC;
        v62 = v51;
        aBlock = _NSConcreteStackBlock;
        v58 = 1107296256;
        v59 = sub_100206734;
        v60 = &unk_10055FBA0;
        v52 = _Block_copy(&aBlock);
        v53 = v62;
        v54 = v6;
        swift_release(v53);
        objc_msgSend(v50, "animateWithDuration:animations:", v52, v49);
        swift_unknownObjectRelease(a2, v55);

        _Block_release(v52);
      }
    }
    else
    {
      if (qword_1005CEB20 != -1)
        swift_once(&qword_1005CEB20, sub_100225A9C);
      v36 = type metadata accessor for Logger(0);
      sub_10012A0B0(v36, (uint64_t)qword_1005D4FD0);
      v37 = v6;
      v38 = Logger.logObject.getter(v37);
      v40 = static os_log_type_t.error.getter(v38, v39);
      if (os_log_type_enabled(v38, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = (void **)swift_slowAlloc(32, -1);
        *(_DWORD *)v41 = 136315138;
        aBlock = v42;
        v43 = v37;
        v44 = objc_msgSend(v43, "description");
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v47 = v46;

        v63 = sub_1003A4190(v45, v47, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v41 + 4);

        swift_bridgeObjectRelease(v47);
        _os_log_impl((void *)&_mh_execute_header, v38, v40, "An instance of %s doesn't have a superview", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);
        swift_unknownObjectRelease(a2, v48);

      }
      else
      {

        swift_unknownObjectRelease(a2, v56);
      }
    }
  }
}

uint64_t type metadata accessor for SearchSuggestionController()
{
  return objc_opt_self(ICSearchSuggestionController);
}

void sub_100226DA0(void *a1)
{
  uint64_t v1;
  NSObject v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  _QWORD v7[5];

  dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)(v7);
  if (v7[3])
  {
    v3.isa = AnyHashable._bridgeToObjectiveC()().isa;
    sub_10018550C((uint64_t)v7);
    v4 = objc_opt_self(ICSearchSuggestion);
    v5 = swift_dynamicCastObjCClass(v3.isa, v4);
    if (v5)
    {
      objc_msgSend(*(id *)(v1 + OBJC_IVAR___ICSearchSuggestionController_delegate), "didSelectSearchSuggestion:", v5);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(a1, "deselectItemAtIndexPath:animated:", isa, 1);

    }
    else
    {

    }
  }
  else
  {
    sub_100016108((uint64_t)v7);
  }
}

BOOL sub_100226F38()
{
  NSObject v0;
  uint64_t v1;
  void *v2;
  _BOOL8 v3;
  _QWORD v5[5];

  dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)(v5);
  if (!v5[3])
  {
    sub_100016108((uint64_t)v5);
    goto LABEL_5;
  }
  v0.isa = AnyHashable._bridgeToObjectiveC()().isa;
  sub_10018550C((uint64_t)v5);
  v1 = objc_opt_self(ICSearchSuggestion);
  v2 = (void *)swift_dynamicCastObjCClass(v0.isa, v1);
  if (!v2)
  {

LABEL_5:
    v2 = 0;
  }
  v3 = v2 != 0;

  return v3;
}

uint64_t sub_100226FC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

id sub_100226FEC()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR___ICSearchSuggestionController_collectionView), "setFrame:", *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_100227010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100012E18((uint64_t *)&unk_1005D5050);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100227074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012E18((uint64_t *)&unk_1005D5050) - 8) + 80);
  return sub_1002262AC(a1, a2, a3, v3 + ((v7 + 16) & ~v7));
}

id sub_1002270D8(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = &v1[OBJC_IVAR___ICFolderComposerFilterViewController_completion];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController_filterSelectionObservation] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___folderComposerFilterDataSource] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController_verticalInset] = 0x4030000000000000;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController_estimatedHeaderHeight] = 0x4046000000000000;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController_account] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "initWithNibName:bundle:", 0, 0);
}

void sub_1002271A4(void *a1)
{
  char *v1;
  char *v2;

  v2 = &v1[OBJC_IVAR___ICFolderComposerFilterViewController_completion];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController_filterSelectionObservation] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___folderComposerFilterDataSource] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController_verticalInset] = 0x4030000000000000;
  *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController_estimatedHeaderHeight] = 0x4046000000000000;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x8000000100483D20, "MobileNotes/FolderComposerFilterViewController.swift", 52, 2, 28, 0);
  __break(1u);
}

void sub_100227270()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  objc_super v25;

  v25.receiver = v0;
  v25.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v25, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = sub_100227584();
    objc_msgSend(v2, "addSubview:", v3);

    v4 = sub_100227584();
    objc_msgSend(v4, "ic_addAnchorsToFillSuperview");

    v5 = objc_msgSend(v0, "navigationItem");
    v6 = (void *)objc_opt_self(NSBundle);
    v7 = objc_msgSend(v6, "mainBundle");
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "localizedStringForKey:value:table:", v8, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    objc_msgSend(v5, "setTitle:", v12);

    v13 = objc_msgSend(v0, "navigationItem");
    v14 = objc_msgSend(v6, "mainBundle");
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v14, "localizedStringForKey:value:table:", v15, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v18 = v17;

    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v13, "setBackButtonTitle:", v19);

    v20 = objc_msgSend(v0, "navigationItem");
    v21 = sub_1003F23A8();
    objc_msgSend(v20, "setLeftBarButtonItem:", v21);

    v22 = objc_msgSend(v0, "navigationItem");
    v23 = sub_1003F23C0();
    objc_msgSend(v22, "setRightBarButtonItem:", v23);

    v24 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v24, "addObserver:selector:name:object:", v0, "splitViewWillTransitionToSizeWithNotification:", CFSTR("ICSplitViewControllerWillTransitionToSizeNotification"), 0);

  }
  else
  {
    __break(1u);
  }
}

id sub_100227584()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v1 = OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___collectionView;
  v2 = *(void **)(v0 + OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___collectionView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___collectionView);
  }
  else
  {
    v4 = swift_allocObject(&unk_10055FC98, 24, 7);
    swift_unknownObjectWeakInit(v4 + 16, v0);
    v5 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCompositionalLayoutConfiguration), "init");
    v6 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
    v13[4] = sub_10022887C;
    v14 = v4;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_1002287F4;
    v13[3] = &unk_10055FCB0;
    v7 = _Block_copy(v13);
    v8 = objc_msgSend(v6, "initWithSectionProvider:configuration:", v7, v5);

    _Block_release(v7);
    swift_release(v14);
    v9 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v8, 0.0, 0.0, 0.0, 0.0);

    v10 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v9;
    v3 = v9;

    v2 = 0;
  }
  v11 = v2;
  return v3;
}

void sub_100227718(char a1)
{
  char *v1;
  char *v2;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29[4];
  objc_super v30;

  v2 = v1;
  v30.receiver = v2;
  v30.super_class = (Class)swift_getObjectType(v2);
  objc_msgSendSuper2(&v30, "viewWillAppear:", a1 & 1);
  v4 = sub_100227AC4();
  v5 = *(id *)&v4[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

  v6 = objc_msgSend(v5, "filterTypeSelections");
  v7 = sub_1000163BC(0, &qword_1005D6360, ICFilterTypeSelection_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v27 = v8;
    else
      v27 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v9 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v8);
  if (v9 >= 1)
  {
    v10 = sub_100227AC4();
    v11 = *(id *)&v10[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

    v12 = objc_msgSend(v11, "copy");
    _bridgeAnyObjectToAny(_:)(v29, v12);
    swift_unknownObjectRelease(v12, v13);
    v14 = sub_1000163BC(0, (unint64_t *)&unk_1005D50E0, ICFilterSelection_ptr);
    v15 = swift_dynamicCast(&v28, v29, (char *)&type metadata for Any + 8, v14, 6);
    v16 = v28;
    if (!v15)
      v16 = 0;
    v17 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection];
    *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection] = v16;

  }
  sub_1002279A8();
  v18 = sub_100227AC4();
  sub_100263F50(0, 0, 0);

  v19 = sub_100227AC4();
  v20 = *(id *)&v19[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

  v29[0] = v20;
  KeyPath = swift_getKeyPath(&unk_10045CB38, v21);
  v23 = swift_allocObject(&unk_10055FD38, 24, 7);
  *(_QWORD *)(v23 + 16) = v2;
  v24 = v2;
  v25 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 4, sub_100228D14, v23, &protocol witness table for NSObject);
  swift_release(KeyPath);
  swift_release(v23);

  v26 = *(void **)&v24[OBJC_IVAR___ICFolderComposerFilterViewController_filterSelectionObservation];
  *(_QWORD *)&v24[OBJC_IVAR___ICFolderComposerFilterViewController_filterSelectionObservation] = v25;

}

void sub_1002279A8()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  unsigned int v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  char *v10;

  v1 = objc_msgSend(v0, "presentingViewController");
  if (!v1)
    goto LABEL_5;
  v2 = v1;
  v3 = objc_msgSend(v1, "view");

  if (!v3)
  {
    __break(1u);
    return;
  }
  v4 = objc_msgSend(v3, "window");

  if (v4)
  {
    v5 = objc_msgSend(v4, "ic_hasCompactSize");

    v6 = v5 ^ 1;
  }
  else
  {
LABEL_5:
    v6 = 0;
  }
  v7 = sub_100227AC4();
  v8 = v7[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries];

  if (v6 != v8)
  {
    v9 = sub_100227AC4();
    v9[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries] = v6;

    v10 = sub_100227AC4();
    sub_100263F50(0, 0, 0);

  }
}

char *sub_100227AC4()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  char *v14;
  id v15;

  v1 = OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___folderComposerFilterDataSource;
  v2 = *(void **)&v0[OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___folderComposerFilterDataSource];
  if (v2)
  {
    v3 = *(char **)&v0[OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___folderComposerFilterDataSource];
  }
  else
  {
    v4 = v0;
    v5 = (void *)sub_100227584();
    v6 = *(void **)&v4[OBJC_IVAR___ICFolderComposerFilterViewController_account];
    v7 = objc_msgSend(v6, "objectID");
    v8 = objc_msgSend(v6, "managedObjectContext");
    v9 = swift_allocObject(&unk_10055FC70, 24, 7);
    *(_QWORD *)(v9 + 16) = v4;
    objc_allocWithZone((Class)type metadata accessor for FolderComposerFilterDataSource());
    v10 = v4;
    v11 = (char *)sub_100267A38(v5, v7, v8, (uint64_t)sub_1002287EC, v9);
    v12 = *(void **)&v11[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentingViewController];
    *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentingViewController] = v10;

    v13 = *(void **)&v4[v1];
    *(_QWORD *)&v4[v1] = v11;
    v14 = v10;
    v3 = v11;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_100227C30(void *a1)
{
  char *v2;
  void *v3;
  id v4;

  v2 = sub_100227AC4();
  v3 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection] = a1;
  v4 = a1;

  sub_100263F50(0, 0, 0);
}

uint64_t sub_100227C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  char *v5;
  id v6;
  id v7;
  char v8;
  void *v10;
  char *v11;
  id v12;

  v1 = v0;
  v2 = OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection);
  v4 = v3;
  v5 = sub_100227AC4();
  v6 = *(id *)&v5[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

  if (v3)
  {
    sub_1000163BC(0, (unint64_t *)&unk_1005D50E0, ICFilterSelection_ptr);
    v7 = v4;
    v8 = static NSObject.== infix(_:_:)(v7);

    if ((v8 & 1) != 0)
      return 0;
  }
  else
  {

  }
  v10 = *(void **)(v1 + v2);
  if (v10 && !objc_msgSend(v10, "isEmpty"))
    return 1;
  v11 = sub_100227AC4();
  v12 = *(id *)&v11[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

  LODWORD(v11) = objc_msgSend(v12, "isEmpty");
  return v11 ^ 1;
}

void sub_100227E00(void *a1, void *a2, id a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  id v15;
  id v16;

  if (a2)
  {
    v16 = a2;
    objc_msgSend(a1, "setModalPresentationStyle:", 7);
    v5 = objc_msgSend(a1, "popoverPresentationController");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "setSourceView:", v16);

    }
    v7 = objc_msgSend(a1, "popoverPresentationController");
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v7, "setPermittedArrowDirections:", 3);

    }
    objc_msgSend(v16, "frame");
    v10 = v9;
    v12 = v11;
    v13 = objc_msgSend(a1, "popoverPresentationController");
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v13, "setSourceRect:", v10 + -44.0, 0.0, 44.0, v12);

    }
    objc_msgSend(a3, "presentViewController:animated:completion:", a1, 1, 0);
  }
  else
  {
    v15 = objc_msgSend(a3, "navigationController");
    if (!v15)
      return;
    v16 = v15;
    objc_msgSend(v15, "pushViewController:animated:", a1, 1);
  }

}

void sub_100227F8C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  void *v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  void *v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Class isa;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];

  v6 = sub_100012E18(&qword_1005D50D0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v41 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v44, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (Strong)
  {
    v18 = (void *)Strong;
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v10);
    UICollectionLayoutListConfiguration.init(appearance:)(v13);
    sub_1000163BC(0, (unint64_t *)&qword_1005D50D8, NSCollectionLayoutSection_ptr);
    v19 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v16, a2);
    objc_msgSend(v19, "contentInsets");
    objc_msgSend(v19, "setContentInsets:", 0.0);
    v20 = sub_100227AC4();
    v21 = sub_100265BD8();

    dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();
    v22 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v23 = sub_100263C90(12, v22);
    v24 = swift_bridgeObjectRelease(v22);
    if (a1 == (char *)1)
    {
LABEL_5:
      v27 = (void *)objc_opt_self(NSCollectionLayoutDimension);
      v28 = objc_msgSend(v27, "fractionalWidthDimension:", 1.0);
      v29 = objc_msgSend(v27, "estimatedDimension:", 44.0);
      v30 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSize), "sizeWithWidthDimension:heightDimension:", v28, v29);

      static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
      v32 = v31;
      v33 = v30;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v32);
      v35 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutBoundarySupplementaryItem), "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v33, v34, 1);

      v36 = sub_100012E18(&qword_1005CF6F0);
      v37 = swift_allocObject(v36, 40, 7);
      *(_OWORD *)(v37 + 16) = xmmword_100456F30;
      *(_QWORD *)(v37 + 32) = v35;
      v43 = v37;
      specialized Array._endMutation()(v37);
      v38 = v43;
      sub_1000163BC(0, &qword_1005D9450, NSCollectionLayoutBoundarySupplementaryItem_ptr);
      v39 = v35;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v38);
      objc_msgSend(v19, "setBoundarySupplementaryItems:", isa);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v42);
      return;
    }
    v25 = (void *)sub_100227584(v24);
    v26 = (char *)objc_msgSend(v25, "numberOfSections");

    if (__OFSUB__(v26, 1))
    {
      __break(1u);
    }
    else
    {
      if (((v26 - 1 == a1) & v23) == 1)
        goto LABEL_5;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v42);

    }
  }
}

void sub_10022838C()
{
  char *v0;
  id v1;
  id v2;

  v2 = sub_1003F23C0();
  v0 = sub_100227AC4();
  v1 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

  LODWORD(v0) = objc_msgSend(v1, "isEmpty");
  objc_msgSend(v2, "setEnabled:", v0 ^ 1);

}

uint64_t sub_10022840C(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  uint64_t v24;
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;

  v2 = v1;
  v4 = objc_msgSend(v2, "navigationController");
  if (v4)
  {
    v5 = v4;

  }
  v6 = objc_msgSend(v2, "presentedViewController");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 0, 0);

  }
  v8 = objc_msgSend(a1, "userInfo");
  if (!v8)
  {
    v26 = 0u;
    v27 = 0u;
    return sub_1000160C8((uint64_t)&v26);
  }
  v9 = v8;
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v25[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("ICSplitViewControllerWillTransitionToSizeNotificationTransitionCoordinatorKey"));
  v25[1] = v11;
  AnyHashable.init<A>(_:)(v23, v25, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v10 + 16) && (v12 = sub_100248ECC((uint64_t)v23), (v13 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(v10 + 56) + 32 * v12, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  swift_bridgeObjectRelease(v10);
  sub_10018550C((uint64_t)v23);
  if (!*((_QWORD *)&v27 + 1))
    return sub_1000160C8((uint64_t)&v26);
  v14 = sub_100012E18(&qword_1005D5150);
  result = swift_dynamicCast(v23, &v26, (char *)&type metadata for Any + 8, v14, 6);
  if ((result & 1) != 0)
  {
    v16 = (void *)v23[0];
    v17 = swift_allocObject(&unk_10055FCE8, 24, 7);
    *(_QWORD *)(v17 + 16) = v2;
    v23[4] = sub_100228884;
    v24 = v17;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_10015AC08;
    v23[3] = &unk_10055FD00;
    v18 = _Block_copy(v23);
    v19 = v24;
    swift_unknownObjectRetain(v16);
    v20 = v2;
    swift_release(v19);
    objc_msgSend(v16, "animateAlongsideTransition:completion:", 0, v18);
    swift_unknownObjectRelease(v16, v21);
    _Block_release(v18);
    return swift_unknownObjectRelease(v16, v22);
  }
  return result;
}

void sub_1002286DC()
{
  uint64_t v0;

  sub_100012C50(*(_QWORD *)(v0 + OBJC_IVAR___ICFolderComposerFilterViewController_completion), *(_QWORD *)(v0 + OBJC_IVAR___ICFolderComposerFilterViewController_completion + 8));

  objc_release(*(id *)(v0
                     + OBJC_IVAR___ICFolderComposerFilterViewController____lazy_storage___folderComposerFilterDataSource));

}

uint64_t type metadata accessor for FolderComposerFilterViewController()
{
  return objc_opt_self(ICFolderComposerFilterViewController);
}

uint64_t sub_1002287C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1002287EC(void *a1, void *a2)
{
  uint64_t v2;

  sub_100227E00(a1, a2, *(id *)(v2 + 16));
}

id sub_1002287F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a3);
  v7 = (void *)v6(a2, a3);
  swift_release(v5);
  swift_unknownObjectRelease(a3, v8);
  return v7;
}

uint64_t sub_100228858()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10022887C(char *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100227F8C(a1, a2, v2);
}

void sub_100228884()
{
  sub_1002279A8();
}

void sub_1002288A4()
{
  char *v0;
  char *v1;
  char *v2;
  id v3;
  unsigned int v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void (*v13)(id);
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  NSString v28;
  id v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  _QWORD v42[4];

  v1 = v0;
  v2 = sub_100227AC4();
  v3 = *(id *)&v2[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

  v4 = objc_msgSend(v3, "isValid");
  v5 = sub_100227AC4();
  v6 = *(id *)&v5[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

  if (v4)
  {
    v7 = objc_msgSend(v6, "copy");

    _bridgeAnyObjectToAny(_:)(v42, v7);
    swift_unknownObjectRelease(v7, v8);
    v9 = sub_1000163BC(0, (unint64_t *)&unk_1005D50E0, ICFilterSelection_ptr);
    v10 = swift_dynamicCast(&v41, v42, (char *)&type metadata for Any + 8, v9, 6);
    v11 = v41;
    if (!v10)
      v11 = 0;
    v12 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection] = v11;

    v13 = *(void (**)(id))&v1[OBJC_IVAR___ICFolderComposerFilterViewController_completion];
    if (v13)
    {
      v14 = *(_QWORD *)&v1[OBJC_IVAR___ICFolderComposerFilterViewController_completion + 8];
      swift_retain(v14);
      v15 = sub_100227AC4();
      v16 = *(id *)&v15[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

      v13(v16);
      sub_100012C50((uint64_t)v13, v14);

    }
    v17 = objc_msgSend(v1, "navigationController");
    if (v17)
    {
      v18 = v17;
      objc_msgSend(v17, "dismissViewControllerAnimated:completion:", 1, 0);

    }
    return;
  }
  v19 = objc_msgSend(v6, "invalidSummaryTitle");

  if (v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v21 = v20;

  }
  else
  {
    v21 = 0;
  }
  v22 = sub_100227AC4();
  v23 = *(id *)&v22[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];

  v24 = objc_msgSend(v23, "invalidSummary");
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v26 = v25;

    if (v21)
      goto LABEL_14;
LABEL_17:
    v27 = 0;
    if (v26)
      goto LABEL_15;
LABEL_18:
    v28 = 0;
    goto LABEL_19;
  }
  v26 = 0;
  if (!v21)
    goto LABEL_17;
LABEL_14:
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  if (!v26)
    goto LABEL_18;
LABEL_15:
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
LABEL_19:
  v29 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v27, v28, 1);

  v30 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "localizedStringForKey:value:table:", v31, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v34 = v33;

  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  v39 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v35, 1, 0);

  objc_msgSend(v29, "addAction:", v39);
  v36 = objc_msgSend(v29, "popoverPresentationController");
  if (v36)
  {
    v37 = v36;
    v38 = sub_1003F23C0();
    objc_msgSend(v37, "setBarButtonItem:", v38);

  }
  objc_msgSend(v1, "presentViewController:animated:completion:", v29, 1, 0, v39);

}

const char *sub_100228CD8()
{
  return "isEmpty";
}

id sub_100228CE4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isEmpty");
  *a2 = (_BYTE)result;
  return result;
}

void sub_100228D14()
{
  sub_10022838C();
}

char *sub_100228DBC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  char *v4;
  uint64_t ObjectType;
  char *v6;
  uint64_t v7;
  char v8;
  id v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  _BYTE v16[24];
  _QWORD v17[6];

  v1 = OBJC_IVAR___ICTagContainerCell____lazy_storage___collectionView;
  v2 = *(void **)&v0[OBJC_IVAR___ICTagContainerCell____lazy_storage___collectionView];
  if (v2)
  {
    v3 = *(char **)&v0[OBJC_IVAR___ICTagContainerCell____lazy_storage___collectionView];
  }
  else
  {
    v4 = v0;
    ObjectType = swift_getObjectType(v0);
    v6 = &v0[OBJC_IVAR___ICTagContainerCell_tagRowLimit];
    v7 = *(_QWORD *)&v0[OBJC_IVAR___ICTagContainerCell_tagRowLimit];
    v8 = v6[8];
    v9 = objc_allocWithZone((Class)type metadata accessor for TagCollectionView());
    v10 = sub_1002FE0C4(0x10001010000uLL, v7, v8);
    v17[3] = ObjectType;
    v17[4] = &off_10055FD80;
    v17[0] = v4;
    v11 = (uint64_t)&v10[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_accessibilityProvider];
    swift_beginAccess(&v10[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_accessibilityProvider], v16, 33, 0);
    v12 = v4;
    sub_10022A920((uint64_t)v17, v11);
    objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0, swift_endAccess(v16).n128_f64[0]);
    v13 = *(void **)&v4[v1];
    *(_QWORD *)&v4[v1] = v10;
    v3 = v10;

    v2 = 0;
  }
  v14 = v2;
  return v3;
}

id sub_10022902C()
{
  _BYTE *v0;
  _BYTE *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  char v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const mach_header_64 *v35;
  uint64_t v36;
  char v38[24];

  v1 = v0;
  v2 = sub_100228DBC();
  v3 = *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_selectionDidChange];
  v4 = *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_selectionDidChange + 8];
  v5 = (uint64_t *)&v2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_selectionDidChange];
  swift_beginAccess(&v2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_selectionDidChange], v38, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = v3;
  v5[1] = v4;
  sub_100166B74(v3, v4);
  sub_100012C50(v6, v7);

  v8 = sub_100228DBC();
  v9 = *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_dataDidChange];
  v10 = *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_dataDidChange + 8];
  v11 = (uint64_t *)&v8[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_dataDidChange];
  v12 = *(_QWORD *)&v8[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_dataDidChange];
  v13 = *(_QWORD *)&v8[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_dataDidChange + 8];
  *v11 = v9;
  v11[1] = v10;
  sub_100166B74(v9, v10);
  sub_100012C50(v12, v13);

  v14 = sub_100228DBC();
  v15 = v1[OBJC_IVAR___ICTagContainerCell_includesNewTagItem];
  v16 = v1[OBJC_IVAR___ICTagContainerCell_includesAllTagsItem];
  v17 = v1[OBJC_IVAR___ICTagContainerCell_hasGroupInset];
  v18 = v1[OBJC_IVAR___ICTagContainerCell_allowsExclusion];
  v19 = *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_tagRowLimit];
  v20 = v1[OBJC_IVAR___ICTagContainerCell_tagRowLimit + 8];
  v21 = &v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration];
  v22 = v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration];
  v23 = v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration + 1];
  v24 = v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration + 2];
  v25 = v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration + 3];
  v26 = v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration + 4];
  v27 = v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration + 5];
  v28 = *(_QWORD *)&v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration + 8];
  v29 = v14[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration + 16];
  *v21 = v1[OBJC_IVAR___ICTagContainerCell_hasHorizontalScrolling];
  v21[1] = v15;
  v21[2] = v16;
  v21[3] = v17;
  *((_WORD *)v21 + 2) = v18;
  *((_QWORD *)v21 + 1) = v19;
  v21[16] = v20;
  v30 = 256;
  if (!v23)
    v30 = 0;
  v31 = v30 | v22;
  v32 = 0x10000;
  if (!v24)
    v32 = 0;
  v33 = 0x1000000;
  if (!v25)
    v33 = 0;
  v34 = v31 | v32 | v33;
  v35 = &_mh_execute_header;
  if (!v26)
    v35 = 0;
  v36 = 0x10000000000;
  if (!v27)
    v36 = 0;
  sub_1002FC054(v34 | (unint64_t)v35 | v36, v28, v29);

  return objc_msgSend(v1, "invalidateIntrinsicContentSize");
}

_BYTE *sub_100229278(_BYTE *result, uint64_t a2, int a3, _QWORD *a4)
{
  int v4;

  v4 = result[*a4];
  result[*a4] = a3;
  if (v4 != a3)
    return objc_msgSend(result, "setNeedsUpdateConfiguration");
  return result;
}

void sub_100229420(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);

  v2 = type metadata accessor for IndexPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100228DBC();
  v10 = objc_msgSend(v9, "indexPathsForVisibleItems");
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v2);

  v12 = *(_QWORD *)(v11 + 16);
  v21 = v11;
  if (v12)
  {
    v13 = v11 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v23 = *(_QWORD *)(v3 + 72);
    v24 = v14;
    v22 = a1 & 1;
    v14(v8, v13, v2);
    while (1)
    {
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v15(v8, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v9, "deselectItemAtIndexPath:animated:", isa, v22, v21);

      v17 = IndexPath._bridgeToObjectiveC()().super.isa;
      v18 = objc_msgSend(v9, "cellForItemAtIndexPath:", v17);

      if (v18)
      {
        v19 = type metadata accessor for TagCell();
        v20 = swift_dynamicCastClass(v18, v19);
        if (v20)
        {
          *(_BYTE *)(v20 + OBJC_IVAR___ICTagCell_isExcluded) = 0;
          sub_1003B747C();
        }

      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v13 += v23;
      if (!--v12)
        goto LABEL_11;
      v24(v8, v13, v2);
    }
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_11:
    v15(v8, 1, 1, v2);
  }
  swift_bridgeObjectRelease(v21);
  objc_msgSend(*(id *)&v9[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection], "clear");

}

void sub_1002296C8(char a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  id v12;
  char *v13;
  _QWORD aBlock[5];
  _QWORD *v15;

  v6 = sub_100228DBC();
  v7 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
  if (v7)
  {
    v13 = v6;
    v8 = swift_allocObject(&unk_10055FDA0, 24, 7);
    swift_unknownObjectWeakInit(v8 + 16, v13);
    v9 = (_QWORD *)swift_allocObject(&unk_10055FDC8, 40, 7);
    v9[2] = v8;
    v9[3] = a2;
    v9[4] = a3;
    aBlock[4] = sub_10022A990;
    v15 = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100206734;
    aBlock[3] = &unk_10055FDE0;
    v10 = _Block_copy(aBlock);
    v11 = v15;
    v12 = v7;
    sub_100166B74(a2, a3);
    swift_release(v11);
    objc_msgSend(v12, "reloadDataAnimated:dataIndexedBlock:dataRenderedBlock:", a1 & 1, 0, v10);
    _Block_release(v10);

  }
  else
  {

  }
}

void sub_100229A50(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char v17;
  objc_class *v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unsigned int v30;
  char *v31;
  int v32;
  id v33;
  void *v34;
  unsigned int v35;
  char *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  char *v41;
  char *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  char *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  char *v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  Class isa;
  char *v74;
  char *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  id v81;
  _QWORD aBlock[3];
  void *v83;
  void (*v84)();
  _QWORD *v85;
  objc_super v86;
  objc_super v87;

  v2 = v1;
  v4 = type metadata accessor for UIBackgroundConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005D7610);
  __chkstk_darwin(v8);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = (void *)type metadata accessor for UIListContentConfiguration(0);
  v84 = (void (*)())&protocol witness table for UIListContentConfiguration;
  v11 = sub_10012D160(aBlock);
  static UIListContentConfiguration.cell()(v11);
  v12 = UICollectionViewCell.contentConfiguration.setter(aBlock);
  if (v1[OBJC_IVAR___ICTagContainerCell_hasHorizontalScrolling] == 1)
  {
    static UIBackgroundConfiguration.clear()(v12);
    v14 = type metadata accessor for UICellConfigurationState(0, v13);
    v83 = (void *)v14;
    v84 = (void (*)())&protocol witness table for UICellConfigurationState;
    v15 = sub_10012D160(aBlock);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v15, a1, v14);
    UIBackgroundConfiguration.updated(for:)(aBlock);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_1000153C0(aBlock);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    UICollectionViewCell.backgroundConfiguration.setter(v10);
  }
  v16 = sub_100228DBC();
  v17 = UICellConfigurationState.isEditing.getter();
  v18 = (objc_class *)type metadata accessor for TagCollectionView();
  v87.receiver = v16;
  v87.super_class = v18;
  v19 = objc_msgSendSuper2(&v87, "isEditing");
  v86.receiver = v16;
  v86.super_class = v18;
  objc_msgSendSuper2(&v86, "setEditing:", v17 & 1);
  sub_1002FDD88(v19);

  if ((UICellConfigurationState.isEditing.getter() & 1) == 0)
    sub_10022902C();
  v20 = OBJC_IVAR___ICTagContainerCell_preservesSuperviewHorizontalLayoutMargins;
  v21 = 0.0;
  if (v2[OBJC_IVAR___ICTagContainerCell_preservesSuperviewHorizontalLayoutMargins] == 1)
  {
    objc_msgSend(v2, "layoutMargins");
    v23 = v22;
    v24 = 16.0;
    if ((v2[OBJC_IVAR___ICTagContainerCell_hasGroupInset] & 1) == 0)
    {
      v25 = objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision");
      v24 = 0.0;
      if (v25)
        v24 = 12.0;
    }
    v26 = v23 - v24;
    if (v2[v20] == 1)
    {
      objc_msgSend(v2, "layoutMargins");
      v28 = v27;
      v29 = 16.0;
      if ((v2[OBJC_IVAR___ICTagContainerCell_hasGroupInset] & 1) == 0)
      {
        v30 = objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision");
        v29 = 0.0;
        if (v30)
          v29 = 12.0;
      }
      v21 = -(v28 - v29);
    }
  }
  else
  {
    v26 = 0.0;
  }
  v31 = sub_100228DBC();
  v32 = v31[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration];

  if (v32 == 2)
  {
    v33 = objc_msgSend(v2, "ic_viewControllerManager");
    if (v33)
    {
      v34 = v33;
      v35 = objc_msgSend(v33, "hasCompactWidth");

      if (!v35)
      {
        v26 = -16.0;
        v21 = 16.0;
      }
    }
  }
  v36 = sub_100228DBC();
  v37 = objc_msgSend(v36, "superview");

  if (v37)
  {
    v38 = *(void **)&v2[OBJC_IVAR___ICTagContainerCell_leadingConstraint];
    if (v38)
      objc_msgSend(v38, "setConstant:", v26);
    v39 = *(void **)&v2[OBJC_IVAR___ICTagContainerCell_trailingConstraint];
    if (v39)
      objc_msgSend(v39, "setConstant:", v21);
  }
  else
  {
    v40 = objc_msgSend(v2, "contentView");
    v41 = sub_100228DBC();
    objc_msgSend(v40, "addSubview:", v41);

    v42 = sub_100228DBC();
    v43 = objc_msgSend(v42, "leadingAnchor");

    v44 = objc_msgSend(v2, "contentView");
    v45 = objc_msgSend(v44, "leadingAnchor");

    v46 = objc_msgSend(v43, "constraintEqualToAnchor:constant:", v45, v26);
    v47 = OBJC_IVAR___ICTagContainerCell_leadingConstraint;
    v48 = *(void **)&v2[OBJC_IVAR___ICTagContainerCell_leadingConstraint];
    *(_QWORD *)&v2[OBJC_IVAR___ICTagContainerCell_leadingConstraint] = v46;

    v49 = *(void **)&v2[v47];
    if (v49)
      objc_msgSend(v49, "setActive:", 1);
    v50 = sub_100228DBC();
    v51 = objc_msgSend(v50, "trailingAnchor");

    v52 = objc_msgSend(v2, "contentView");
    v53 = objc_msgSend(v52, "trailingAnchor");

    v54 = objc_msgSend(v51, "constraintEqualToAnchor:constant:", v53, v21);
    v55 = OBJC_IVAR___ICTagContainerCell_trailingConstraint;
    v56 = *(void **)&v2[OBJC_IVAR___ICTagContainerCell_trailingConstraint];
    *(_QWORD *)&v2[OBJC_IVAR___ICTagContainerCell_trailingConstraint] = v54;

    v57 = *(void **)&v2[v55];
    if (v57)
      objc_msgSend(v57, "setActive:", 1);
    v58 = (void *)objc_opt_self(NSLayoutConstraint);
    v59 = sub_100012E18(&qword_1005CF6F0);
    v60 = swift_allocObject(v59, 48, 7);
    *(_OWORD *)(v60 + 16) = xmmword_100451BF0;
    v61 = sub_100228DBC();
    v62 = objc_msgSend(v61, "topAnchor");

    v63 = objc_msgSend(v2, "contentView");
    v64 = objc_msgSend(v63, "topAnchor");

    v65 = objc_msgSend(v62, "constraintEqualToAnchor:", v64);
    *(_QWORD *)(v60 + 32) = v65;
    v66 = sub_100228DBC();
    v67 = objc_msgSend(v66, "bottomAnchor");

    v68 = objc_msgSend(v2, "contentView");
    v69 = objc_msgSend(v68, "bottomAnchor");

    v70 = objc_msgSend(v67, "constraintEqualToAnchor:", v69);
    *(_QWORD *)(v60 + 40) = v70;
    aBlock[0] = v60;
    specialized Array._endMutation()(v71);
    v72 = aBlock[0];
    sub_10022A99C();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v72);
    objc_msgSend(v58, "activateConstraints:", isa);

    v74 = sub_100228DBC();
    v75 = v74;
    v76 = *(void **)&v74[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
    if (v76)
    {
      v77 = swift_allocObject(&unk_10055FDA0, 24, 7);
      swift_unknownObjectWeakInit(v77 + 16, v75);
      v78 = (_QWORD *)swift_allocObject(&unk_10055FE18, 40, 7);
      v78[3] = 0;
      v78[4] = 0;
      v78[2] = v77;
      v84 = sub_10022AACC;
      v85 = v78;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100206734;
      v83 = &unk_10055FE30;
      v79 = _Block_copy(aBlock);
      v80 = v85;
      v81 = v76;
      swift_release(v80);
      objc_msgSend(v81, "reloadDataAnimated:dataIndexedBlock:dataRenderedBlock:", 0, 0, v79);
      _Block_release(v79);

    }
    else
    {

    }
  }
}

void sub_10022A300()
{
  _BYTE *v0;
  _BYTE *v1;
  objc_class *ObjectType;
  char *v3;
  uint64_t v4;
  char v5;
  id v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  char v11;
  int v12;
  int v13;
  char v14;
  int v15;
  _BYTE v16[24];
  _QWORD v17[6];
  objc_super v18;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v18.receiver = v0;
  v18.super_class = ObjectType;
  objc_msgSendSuper2(&v18, "prepareForReuse");
  v3 = sub_100228DBC();
  objc_msgSend(v3, "removeFromSuperview");

  v4 = *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_tagRowLimit];
  v5 = v1[OBJC_IVAR___ICTagContainerCell_tagRowLimit + 8];
  v6 = objc_allocWithZone((Class)type metadata accessor for TagCollectionView());
  v7 = sub_1002FE0C4(0x10001010000uLL, v4, v5);
  v17[3] = ObjectType;
  v17[4] = &off_10055FD80;
  v17[0] = v1;
  v8 = (uint64_t)&v7[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_accessibilityProvider];
  swift_beginAccess(&v7[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_accessibilityProvider], v16, 33, 0);
  v9 = v1;
  sub_10022A920((uint64_t)v17, v8);
  objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0, swift_endAccess(v16).n128_f64[0]);
  v10 = *(void **)&v9[OBJC_IVAR___ICTagContainerCell____lazy_storage___collectionView];
  *(_QWORD *)&v9[OBJC_IVAR___ICTagContainerCell____lazy_storage___collectionView] = v7;

  v11 = v9[OBJC_IVAR___ICTagContainerCell_hasGroupInset];
  v9[OBJC_IVAR___ICTagContainerCell_hasGroupInset] = 1;
  if ((v11 & 1) == 0)
  {
    objc_msgSend(v9, "setNeedsLayout");
    objc_msgSend(v9, "layoutIfNeeded");
    objc_msgSend(v9, "setNeedsUpdateConfiguration");
  }
  v12 = v9[OBJC_IVAR___ICTagContainerCell_hasHorizontalScrolling];
  v9[OBJC_IVAR___ICTagContainerCell_hasHorizontalScrolling] = 0;
  if (v12 == 1)
    sub_10022902C();
  v13 = v9[OBJC_IVAR___ICTagContainerCell_includesNewTagItem];
  v9[OBJC_IVAR___ICTagContainerCell_includesNewTagItem] = 0;
  if (v13 == 1)
    objc_msgSend(v9, "setNeedsUpdateConfiguration");
  v14 = v9[OBJC_IVAR___ICTagContainerCell_includesAllTagsItem];
  v9[OBJC_IVAR___ICTagContainerCell_includesAllTagsItem] = 1;
  if ((v14 & 1) == 0)
    objc_msgSend(v9, "setNeedsUpdateConfiguration");
  v15 = v9[OBJC_IVAR___ICTagContainerCell_allowsExclusion];
  v9[OBJC_IVAR___ICTagContainerCell_allowsExclusion] = 0;
  if (v15 == 1)
    objc_msgSend(v9, "setNeedsUpdateConfiguration");
}

id sub_10022A5E8(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  objc_class *ObjectType;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v4[OBJC_IVAR___ICTagContainerCell_preservesSuperviewHorizontalLayoutMargins] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagContainerCell_presentingViewController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagContainerCell_defaultAccountObjectID] = 0;
  v4[OBJC_IVAR___ICTagContainerCell_hasGroupInset] = 1;
  v4[OBJC_IVAR___ICTagContainerCell_hasHorizontalScrolling] = 0;
  v4[OBJC_IVAR___ICTagContainerCell_includesNewTagItem] = 0;
  v4[OBJC_IVAR___ICTagContainerCell_includesAllTagsItem] = 1;
  v4[OBJC_IVAR___ICTagContainerCell_allowsExclusion] = 0;
  v10 = &v4[OBJC_IVAR___ICTagContainerCell_selectionDidChange];
  *v10 = 0;
  v10[1] = 0;
  v11 = &v4[OBJC_IVAR___ICTagContainerCell_dataDidChange];
  *v11 = 0;
  v11[1] = 0;
  v4[OBJC_IVAR___ICTagContainerCell_allowsContextualMenu] = 1;
  v12 = &v4[OBJC_IVAR___ICTagContainerCell_tagRowLimit];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagContainerCell____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagContainerCell_leadingConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagContainerCell_trailingConstraint] = 0;
  v14.receiver = v4;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "initWithFrame:", a1, a2, a3, a4);
}

id sub_10022A734(void *a1)
{
  _BYTE *v1;
  objc_class *ObjectType;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v1[OBJC_IVAR___ICTagContainerCell_preservesSuperviewHorizontalLayoutMargins] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_presentingViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_defaultAccountObjectID] = 0;
  v1[OBJC_IVAR___ICTagContainerCell_hasGroupInset] = 1;
  v1[OBJC_IVAR___ICTagContainerCell_hasHorizontalScrolling] = 0;
  v1[OBJC_IVAR___ICTagContainerCell_includesNewTagItem] = 0;
  v1[OBJC_IVAR___ICTagContainerCell_includesAllTagsItem] = 1;
  v1[OBJC_IVAR___ICTagContainerCell_allowsExclusion] = 0;
  v4 = &v1[OBJC_IVAR___ICTagContainerCell_selectionDidChange];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v1[OBJC_IVAR___ICTagContainerCell_dataDidChange];
  *v5 = 0;
  v5[1] = 0;
  v1[OBJC_IVAR___ICTagContainerCell_allowsContextualMenu] = 1;
  v6 = &v1[OBJC_IVAR___ICTagContainerCell_tagRowLimit];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_leadingConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagContainerCell_trailingConstraint] = 0;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

uint64_t type metadata accessor for TagContainerCell()
{
  return objc_opt_self(ICTagContainerCell);
}

uint64_t sub_10022A920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D51F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022A968()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10022A990()
{
  uint64_t v0;

  sub_1002FEE50(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

unint64_t sub_10022A99C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D8F60;
  if (!qword_1005D8F60)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D8F60);
  }
  return result;
}

uint64_t sub_10022A9DC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10022AA10()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10022AA34(uint64_t a1)
{
  uint64_t v1;

  return sub_1002FAC14(a1, *(_QWORD *)(v1 + 16));
}

void sub_10022AA3C(void *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  id v7;
  char *v8;
  void *v9;
  id v10;
  id v11;

  v5 = *a2;
  v6 = *(void **)(v3 + *a2);
  *(_QWORD *)(v3 + *a2) = a1;
  v7 = a1;

  v8 = sub_100228DBC();
  v9 = *(void **)(v3 + v5);
  v11 = *(id *)&v8[*a3];
  *(_QWORD *)&v8[*a3] = v9;
  v10 = v9;

}

uint64_t sub_10022AAD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v2 = v1;
  v4 = type metadata accessor for AttachmentID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = _swiftEmptyArrayStorage;
    if (!v8)
      return (uint64_t)v9;
    v19 = _swiftEmptyArrayStorage;
    result = sub_100137290(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v11 = 0;
    v9 = v19;
    v17 = v2;
    v18 = a1 & 0xC000000000000001;
    v2 = a1;
    while (v8 != v11)
    {
      if (v18)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
      else
        v12 = *(id *)(a1 + 8 * v11 + 32);
      v13 = v12;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v12 + OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_id, v4);

      v19 = v9;
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_100137290(v14 > 1, v15 + 1, 1);
        v9 = v19;
      }
      ++v11;
      v9[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, v7, v4);
      a1 = v2;
      if (v8 == v11)
        return (uint64_t)v9;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10022ACA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD v23[2];
  uint64_t v24;

  v3 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return _swiftEmptyArrayStorage;
  v23[0] = a1;
  v23[1] = v1;
  v8 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v9 = *(_QWORD *)(v4 + 72);
  swift_bridgeObjectRetain(a1);
  v10 = _swiftEmptyArrayStorage;
  v24 = v3;
  do
  {
    sub_100145220(v8, (uint64_t)v6, type metadata accessor for VisibleAttachmentsQuery.Comparator);
    if (swift_getEnumCaseMultiPayload(v6, v3) == 3)
    {
      v11 = v6[1];
      v12 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0)
        v12 = *v6 & 0xFFFFFFFFFFFFLL;
      if (v12)
      {
        v13 = (void *)objc_opt_self(ICSearchQueryOperation);
        v14 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v11);
        v15 = objc_msgSend(v13, "prefixMatchingQueryStringForSearchString:", v14);

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_10016ACE0(0, v10[2] + 1, 1, v10);
        v20 = v10[2];
        v19 = v10[3];
        if (v20 >= v19 >> 1)
          v10 = sub_10016ACE0((_QWORD *)(v19 > 1), v20 + 1, 1, v10);
        v10[2] = v20 + 1;
        v21 = &v10[2 * v20];
        v21[4] = v16;
        v21[5] = v18;
        v3 = v24;
      }
      else
      {
        swift_bridgeObjectRelease(v6[1]);
      }
    }
    else
    {
      sub_100145264((uint64_t)v6, type metadata accessor for VisibleAttachmentsQuery.Comparator);
    }
    v8 += v9;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease(v23[0]);
  return v10;
}

uint64_t sub_10022AEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v6 = sub_100012E18(&qword_1005D1080);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012CE8(a1, (uint64_t)v8, &qword_1005D1080);
  v9 = type metadata accessor for ManagedEntityContextType(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1
    || (v11 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v8, v9),
        v11 == enum case for ManagedEntityContextType.modern(_:)))
  {
    v12 = swift_retain(a2);
    a3 = a2;
    v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v12);
    v14 = v13;
    v11 = swift_release(a2);
    if (v14)
      return v6;
    __break(1u);
  }
  if (v11 == enum case for ManagedEntityContextType.html(_:))
  {
    v15 = swift_retain(a3);
    v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v15);
    v17 = v16;
    swift_release(a3);
    if (v17)
      return v6;
    __break(1u);
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
  __break(1u);
  return result;
}

uint64_t sub_10022B00C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for AttachmentEntity(0);
  result = EntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

_QWORD *sub_10022B04C@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = *result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  *a2 = v3 == 0;
  return result;
}

uint64_t sub_10022B070()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100012E18((uint64_t *)&unk_1005DA0F0);
  sub_10012B334(v0, static ICAttachment.hasValidEntityIdentifier);
  sub_10012A0B0(v0, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
  v2 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  return Predicate.init(_:)(sub_10022B0F8, 0, 1, &v2);
}

uint64_t sub_10022B0F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v34 = a2;
  v3 = sub_100012E18(&qword_1005D3F90);
  v4 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  v37 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D5648);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100012E18(&qword_1005D5650);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100012E18(&qword_1005D5658);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = sub_100016638(&qword_1005D5660, &qword_1005D5648, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v17, v7, v18);
  KeyPath = swift_getKeyPath(&unk_10045D018, v19);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v10, KeyPath, v7, v18);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v21 = sub_100012E18(&qword_1005D3FB8);
  v22 = sub_100016638(&qword_1005D5668, &qword_1005D5650, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v23 = sub_100016638(&qword_1005D3FC8, &qword_1005D3FB8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)(v14, sub_10022B454, 0, v11, v21, &type metadata for String, &type metadata for Bool, v22, v23);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v38 = 0;
  v24 = sub_100012E18(&qword_1005D3FD0);
  static PredicateExpressions.build_Arg<A>(_:)(&v38, v24);
  v25 = sub_100012E18(&qword_1005D5670);
  v26 = v34;
  v34[3] = v25;
  v26[4] = sub_1001EBE10(&qword_1005D5678, &qword_1005D5670, (void (*)(void))sub_100236BD0);
  sub_10012D160(v26);
  v27 = sub_100016638(&qword_1005D5698, &qword_1005D5658, (uint64_t)&protocol conformance descriptor for PredicateExpressions.OptionalFlatMap<A, B, C, D>);
  v28 = sub_100016638(&qword_1005D4038, &qword_1005D3F90, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v29 = sub_1001EBCF4(&qword_1005D4040, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  v30 = v33;
  v31 = v36;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v16, v6, v33, v36, v27, v28, v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v16, v30);
}

uint64_t ICAttachment.hasValidEntityIdentifier.unsafeMutableAddressor()
{
  return sub_1001E412C(&qword_1005CEB28, (uint64_t *)&unk_1005DA0F0, (uint64_t)static ICAttachment.hasValidEntityIdentifier, (uint64_t)sub_10022B070);
}

uint64_t static ICAttachment.hasValidEntityIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEB28 != -1)
    swift_once(&qword_1005CEB28, sub_10022B070);
  v2 = sub_100012E18((uint64_t *)&unk_1005DA0F0);
  v3 = sub_10012A0B0(v2, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10022B4F0()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100012E18((uint64_t *)&unk_1005D5568);
  sub_10012B334(v0, qword_1005D5200);
  sub_10012A0B0(v0, (uint64_t)qword_1005D5200);
  v2 = sub_1000163BC(0, &qword_1005D5238, NoteAttachmentObject_ptr);
  return Predicate.init(_:)(sub_10022B578, 0, 1, &v2);
}

uint64_t sub_10022B578@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v34 = a2;
  v3 = sub_100012E18(&qword_1005D3F90);
  v4 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  v37 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D5578);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100012E18(&qword_1005D5580);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100012E18(&qword_1005D5588);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = sub_100016638((unint64_t *)&unk_1005D5590, &qword_1005D5578, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v17, v7, v18);
  KeyPath = swift_getKeyPath(&unk_10045CF68, v19);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v10, KeyPath, v7, v18);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v21 = sub_100012E18(&qword_1005D3FB8);
  v22 = sub_100016638(&qword_1005D55A0, &qword_1005D5580, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v23 = sub_100016638(&qword_1005D3FC8, &qword_1005D3FB8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  static PredicateExpressions.build_flatMap<A, B, C, D>(_:_:)(v14, sub_10022B454, 0, v11, v21, &type metadata for String, &type metadata for Bool, v22, v23);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v38 = 0;
  v24 = sub_100012E18(&qword_1005D3FD0);
  static PredicateExpressions.build_Arg<A>(_:)(&v38, v24);
  v25 = sub_100012E18(&qword_1005D55A8);
  v26 = v34;
  v34[3] = v25;
  v26[4] = sub_1001EBE10(&qword_1005D55B0, &qword_1005D55A8, (void (*)(void))sub_100236974);
  sub_10012D160(v26);
  v27 = sub_100016638((unint64_t *)&unk_1005D55D0, &qword_1005D5588, (uint64_t)&protocol conformance descriptor for PredicateExpressions.OptionalFlatMap<A, B, C, D>);
  v28 = sub_100016638(&qword_1005D4038, &qword_1005D3F90, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v29 = sub_1001EBCF4(&qword_1005D4040, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  v30 = v33;
  v31 = v36;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v16, v6, v33, v36, v27, v28, v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v16, v30);
}

void sub_10022B8D4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;
  NSString v7;
  id v8;

  v6 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v7 = String._bridgeToObjectiveC()();
  else
    v7 = 0;
  v8 = v7;
  objc_msgSend(v6, *a5);

}

uint64_t sub_10022B930(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v10;

  v2 = sub_100012E18(&qword_1005D4010);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100016638(&qword_1005D4048, &qword_1005D4010, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(a1, v2, v6);
  KeyPath = swift_getKeyPath(&unk_10045CF90, v7);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v5, KeyPath, v2, v6);
  swift_release(KeyPath);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10022BA14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  char v22;
  uint64_t v23;
  _BYTE v25[16];
  id v26;
  id *v27;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D5568);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100012E18((uint64_t *)&unk_1005DA0F0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = objc_opt_self(ICAttachment);
  v11 = swift_dynamicCastObjCClass(v1, v10);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = qword_1005CEB28;
    swift_unknownObjectRetain(v1);
    if (v13 != -1)
      swift_once(&qword_1005CEB28, sub_10022B070);
    v14 = sub_10012A0B0(v6, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6);
    v26 = v12;
    v27 = &v26;
    v15 = swift_unknownObjectRetain(v1);
    v22 = Predicate.evaluate(_:)(&v27, v6, v15);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
LABEL_10:
    swift_unknownObjectRelease(v1, v23);

    return v22 & 1;
  }
  v16 = objc_opt_self(NoteAttachmentObject);
  v17 = swift_dynamicCastObjCClass(v1, v16);
  if (v17)
  {
    v18 = (void *)v17;
    v19 = qword_1005CEB30;
    swift_unknownObjectRetain(v1);
    if (v19 != -1)
      swift_once(&qword_1005CEB30, sub_10022B4F0);
    v20 = sub_10012A0B0(v2, (uint64_t)qword_1005D5200);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v20, v2);
    v26 = v18;
    v27 = &v26;
    v21 = swift_unknownObjectRetain(v1);
    v22 = Predicate.evaluate(_:)(&v27, v2, v21);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_10;
  }
  v22 = 0;
  return v22 & 1;
}

uint64_t sub_10022BDC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char *v12;
  _BYTE v13[24];
  uint64_t v14;

  ObjectType = swift_getObjectType(v1);
  sub_100012CE8(a1, (uint64_t)v13, &qword_1005CF190);
  if (!v14)
  {
    sub_100012DDC((uint64_t)v13, &qword_1005CF190);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, ObjectType, 6) & 1) == 0)
  {
LABEL_11:
    v10 = 0;
    return v10 & 1;
  }
  v4 = v12;
  if ((static AttachmentID.== infix(_:_:)(&v12[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_id], v1 + OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_id) & 1) == 0)
  {

    goto LABEL_11;
  }
  v5 = *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_title];
  v6 = *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_title
                    + 8];
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_title);
  v8 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_title
                 + 8);
  if (v5 == v7 && v6 == v8)
  {

    v10 = 1;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0);

  }
  return v10 & 1;
}

_QWORD *sub_10022BFB8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v31;
  _BYTE v32[16];
  uint64_t v33;

  v33 = a4;
  v5 = sub_100349E0C((void (*)(char *, __n128))sub_10022C3B8, 0, a1, (uint64_t)v32);
  v31 = v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D3DB0);
  v7 = sub_100012E18(&qword_1005D55E8);
  v8 = sub_100012E18(&qword_1005D55E0);
  v9 = sub_100016638(&qword_1005D5640, (uint64_t *)&unk_1005D3DB0, (uint64_t)&protocol conformance descriptor for [A]);
  v10 = sub_100016638(&qword_1005D55F0, &qword_1005D55E8, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = sub_100016638(&qword_1005D55F8, &qword_1005D55E0, (uint64_t)&protocol conformance descriptor for SortDescriptor<A>);
  v12 = (_QWORD *)Sequence.sorted<A, B>(using:)(&v31, v6, v7, v8, v9, v10, v11);
  swift_bridgeObjectRelease(v5);
  if ((a3 & 1) == 0)
  {
    v13 = sub_10036F09C(a2, (unint64_t)v12);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    swift_bridgeObjectRelease(v12);
    if ((v19 & 1) != 0)
    {
      v22 = type metadata accessor for __ContiguousArrayStorageBase(0, v20);
      v23 = swift_unknownObjectRetain_n(v13, 2);
      v24 = (_QWORD *)swift_dynamicCastClass(v23, v22);
      if (!v24)
      {
        swift_unknownObjectRelease(v13, v25);
        v24 = _swiftEmptyArrayStorage;
      }
      v26 = v24[2];
      v27 = swift_release(v24);
      if (__OFSUB__(v19 >> 1, v17))
      {
        __break(1u);
      }
      else
      {
        v27 = v13;
        if (v26 == (v19 >> 1) - v17)
        {
          v12 = (_QWORD *)swift_dynamicCastClass(v13, v22);
          if (!v12)
          {
            swift_unknownObjectRelease(v13, v21);
            v12 = _swiftEmptyArrayStorage;
          }
          goto LABEL_10;
        }
      }
      swift_unknownObjectRelease(v27, v28);
    }
    v12 = sub_10016C060(v13, v15, v17, v19);
LABEL_10:
    swift_unknownObjectRelease(v13, v21);
  }
  return v12;
}

_QWORD *sub_10022C1B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v13 = sub_100012E18(&qword_1005D55E0);
  v15 = sub_1001DBF08((void (*)(char *, char *))sub_10022C3B8, 0, a5, v13, (uint64_t)&type metadata for Never, a7, (uint64_t)&protocol witness table for Never, v14);
  v39 = v15;
  v16 = sub_100012E18(&qword_1005D55E8);
  v17 = *(_QWORD *)(a6 + 8);
  v18 = sub_100016638(&qword_1005D55F0, &qword_1005D55E8, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = sub_100016638(&qword_1005D55F8, &qword_1005D55E0, (uint64_t)&protocol conformance descriptor for SortDescriptor<A>);
  v20 = (_QWORD *)Sequence.sorted<A, B>(using:)(&v39, a4, v16, v13, v17, v18, v19);
  swift_bridgeObjectRelease(v15);
  if ((a3 & 1) != 0)
    return v20;
  v21 = sub_10036F09C(a2, (unint64_t)v20);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRelease(v20);
  if ((v27 & 1) == 0)
  {
LABEL_3:
    v20 = sub_10016C060(v21, v23, v25, v27);
LABEL_10:
    swift_unknownObjectRelease(v21, v29);
    return v20;
  }
  v30 = type metadata accessor for __ContiguousArrayStorageBase(0, v28);
  v31 = swift_unknownObjectRetain_n(v21, 2);
  v32 = (_QWORD *)swift_dynamicCastClass(v31, v30);
  if (!v32)
  {
    swift_unknownObjectRelease(v21, v33);
    v32 = _swiftEmptyArrayStorage;
  }
  v34 = v32[2];
  v35 = swift_release(v32);
  if (__OFSUB__(v27 >> 1, v25))
  {
    __break(1u);
    goto LABEL_13;
  }
  v35 = v21;
  if (v34 != (v27 >> 1) - v25)
  {
LABEL_13:
    swift_unknownObjectRelease(v35, v36);
    goto LABEL_3;
  }
  v20 = (_QWORD *)swift_dynamicCastClass(v21, v30);
  swift_unknownObjectRelease(v21, v37);
  if (!v20)
  {
    v20 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  return v20;
}

uint64_t sub_10022C3B8(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v13;

  v2 = type metadata accessor for String.StandardComparator(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v13 - v7;
  v9 = *a1;
  KeyPath = swift_getKeyPath(&unk_10045CFC0, v10);
  static String.StandardComparator.localizedStandard.getter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  SortDescriptor.init<A>(_:comparator:order:)(KeyPath, v6, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t VisibleAttachmentsQuery.entities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch(sub_10022C4C0, 0, 0);
}

uint64_t sub_10022C4C0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  AppDependency.wrappedValue.getter(v0 + 2);
  v1 = v0[2];
  v0[5] = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1005D0208 + dword_1005D0208);
  v2 = (_QWORD *)swift_task_alloc(unk_1005D020C);
  v0[6] = v2;
  *v2 = v0;
  v2[1] = sub_100132748;
  return v4(v0[3], v1, 1);
}

uint64_t VisibleAttachmentsQuery.suggestedEntities()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v3 + 2128) = a3;
  *(_QWORD *)(v3 + 1904) = a2;
  *(_QWORD *)(v3 + 1896) = a1;
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 1912) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 1920) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1928) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 1936) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 1944) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 1952) = swift_task_alloc(v6);
  v7 = sub_100012E18((uint64_t *)&unk_1005DA0F0);
  *(_QWORD *)(v3 + 1960) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 1968) = v8;
  *(_QWORD *)(v3 + 1976) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ManagedEntityContextType(0);
  *(_QWORD *)(v3 + 1984) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 1992) = v10;
  *(_QWORD *)(v3 + 2000) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10022C620, 0, 0);
}

uint64_t sub_10022C620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  Class isa;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;

  v1 = *(_QWORD *)(v0 + 2000);
  v2 = *(_QWORD *)(v0 + 1992);
  v3 = *(_QWORD *)(v0 + 1984);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1512));
  v4 = *(void **)(v0 + 1512);
  v5 = objc_msgSend(v4, "modernManagedObjectContext");
  *(_QWORD *)(v0 + 2008) = v5;

  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1752));
  v6 = *(void **)(v0 + 1752);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ManagedEntityContextType.html(_:), v3);
  v7 = ICUnifiedNoteContext.managedObjectContext(for:)(v1);
  *(_QWORD *)(v0 + 2016) = v7;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1992) + 8))(*(_QWORD *)(v0 + 2000), *(_QWORD *)(v0 + 1984));

  v8 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  v9 = (void *)static NSObject<>.ic_fetchRequest()();
  *(_QWORD *)(v0 + 2024) = v9;
  v10 = sub_100012E18(&qword_1005CF6F0);
  v11 = swift_allocObject(v10, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100451BF0;
  *(_QWORD *)(v11 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "predicateForVisibleAttachmentsInContext:", v5);
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  if (qword_1005CEB28 != -1)
    swift_once(&qword_1005CEB28, sub_10022B070);
  v12 = *(_QWORD *)(v0 + 1976);
  v13 = *(_QWORD *)(v0 + 1968);
  v14 = *(_QWORD *)(v0 + 1960);
  v15 = sub_10012A0B0(v14, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15, v14);
  result = NSPredicate.init<A>(_:)(v12, v8);
  if (result)
  {
    v17 = *(_BYTE *)(v0 + 2128);
    *(_QWORD *)(v11 + 40) = result;
    specialized Array._endMutation()(result);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
    v19 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

    objc_msgSend(v9, "setPredicate:", v19);
    sub_1000163BC(0, &qword_1005D5238, NoteAttachmentObject_ptr);
    v20 = (void *)static NSObject<>.ic_fetchRequest()();
    *(_QWORD *)(v0 + 2032) = v20;
    if ((v17 & 1) == 0)
    {
      v21 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 0);
      objc_msgSend(v20, "setPredicate:", v21);

    }
    v39 = (void *)v7;
    v22 = *(_QWORD *)(v0 + 1904);
    v23 = *(_QWORD *)(v0 + 1896);
    objc_msgSend(v9, "setFetchLimit:", 25);
    objc_msgSend(v20, "setFetchLimit:", 25);
    swift_retain(v23);
    swift_retain(v22);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1400));
    Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1400), *(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1424));
    swift_release(v23);
    v24 = swift_release(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "VisibleAttachmentsQuery: suggested entities", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    v28 = *(_QWORD *)(v0 + 1952);
    v29 = *(_QWORD *)(v0 + 1920);
    v30 = *(_QWORD *)(v0 + 1912);

    v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    *(_QWORD *)(v0 + 2040) = v31;
    v31(v28, v30);
    v32 = swift_allocObject(&unk_10055FF60, 32, 7);
    *(_QWORD *)(v0 + 2048) = v32;
    *(_QWORD *)(v32 + 16) = v5;
    *(_QWORD *)(v32 + 24) = v9;
    v33 = v5;
    v34 = v9;
    swift_retain(v32);
    v35 = sub_10001537C((uint64_t *)&unk_1005D3DB0);
    swift_asyncLet_begin(v0 + 656, 0, v35, &unk_1005D5248, v32, v0 + 1704);
    v36 = swift_allocObject(&unk_10055FF88, 32, 7);
    *(_QWORD *)(v0 + 2056) = v36;
    *(_QWORD *)(v36 + 16) = v39;
    *(_QWORD *)(v36 + 24) = v20;
    v37 = v39;
    v38 = v20;
    swift_retain(v36);
    swift_asyncLet_begin(v0 + 16, 0, v35, &unk_1005D5260, v36, v0 + 1656);
    return swift_asyncLet_get_throwing(v0 + 656, v0 + 1704, sub_10022CB44, v0 + 1664);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10022CB44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v1[258] = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 2, v1 + 207, sub_10022D1F4, v1 + 162);
  v3 = v1[213];
  v1[259] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_asyncLet_get_throwing(v1 + 2, v1 + 207, sub_10022CBCC, v1 + 202);
}

uint64_t sub_10022CBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 2080) = v0;
  if (v0)
    v2 = sub_10022D4C4;
  else
    v2 = sub_10022CBF4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10022CBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t (*v33)(uint64_t, uint64_t, char);
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 1904);
  v2 = *(_QWORD *)(v0 + 1896);
  v3 = *(_QWORD *)(v0 + 1656);
  v34 = *(_QWORD *)(v0 + 2072);
  swift_bridgeObjectRetain(v3);
  sub_1001D8FEC(v4);
  v5 = sub_10022BFB8((uint64_t)&off_100556938, 25, 0, v34);
  swift_bridgeObjectRelease(v34);
  v6 = sub_10022AAD0((uint64_t)v5);
  *(_QWORD *)(v0 + 2088) = v6;
  swift_bridgeObjectRelease(v5);
  swift_retain(v2);
  swift_retain(v1);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1432));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1432), *(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1456));
  swift_release(v2);
  swift_release(v1);
  swift_bridgeObjectRetain(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    *(_QWORD *)(v0 + 1848) = *(_QWORD *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1848, v0 + 1856, v10 + 4);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "VisibleAttachmentsQuery: found %ld suggested attachment(s)", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }

  v11 = *(_QWORD *)(v0 + 1904);
  v12 = *(_QWORD *)(v0 + 1896);
  (*(void (**)(_QWORD, _QWORD))(v0 + 2040))(*(_QWORD *)(v0 + 1944), *(_QWORD *)(v0 + 1912));
  swift_retain(v12);
  swift_retain(v11);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1336));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1360));
  swift_release(v12);
  swift_release(v11);
  v13 = swift_bridgeObjectRetain_n(v6, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(void (**)(uint64_t, uint64_t))(v0 + 2040);
  v18 = *(_QWORD *)(v0 + 1936);
  v19 = *(_QWORD *)(v0 + 1912);
  if (v16)
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 2040);
    v31 = *(_QWORD *)(v0 + 1912);
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v34 = v21;
    *(_DWORD *)v20 = 136315138;
    v22 = type metadata accessor for AttachmentID(0);
    swift_bridgeObjectRetain(v6);
    v24 = Array.description.getter(v23, v22);
    v30 = v18;
    v26 = v25;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 1800) = sub_1003A4190(v24, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1800, v0 + 1808, v20 + 4);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "VisibleAttachmentsQuery: matching attachment IDs: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v32(v30, v31);
  }
  else
  {
    swift_bridgeObjectRelease_n(v6, 2);

    v17(v18, v19);
  }
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1560));
  v27 = *(_QWORD *)(v0 + 1560);
  *(_QWORD *)(v0 + 2096) = v27;
  v33 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1005D0208 + dword_1005D0208);
  v28 = (_QWORD *)swift_task_alloc(unk_1005D020C);
  *(_QWORD *)(v0 + 2104) = v28;
  *v28 = v0;
  v28[1] = sub_10022CFDC;
  return v33(v6, v27, 1);
}

uint64_t sub_10022CFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2104);
  *(_QWORD *)(*v2 + 2112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {

    return swift_task_switch(sub_10022D7E8, 0, 0);
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 2088);

    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v4 + 2120) = a1;
    return swift_asyncLet_finish(v4 + 16, v4 + 1656, sub_10022D0A0, v4 + 1472);
  }
}

uint64_t sub_10022D0A0()
{
  return swift_task_switch(sub_10022D0B4, 0, 0);
}

uint64_t sub_10022D0B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2056));
  return swift_asyncLet_finish(v0 + 656, v0 + 1704, sub_10022D108, v0 + 1520);
}

uint64_t sub_10022D108()
{
  return swift_task_switch(sub_10022D11C, 0, 0);
}

uint64_t sub_10022D11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 2056);
  v2 = *(_QWORD *)(v0 + 2048);
  v3 = *(void **)(v0 + 2032);
  v4 = *(void **)(v0 + 2024);
  v5 = *(void **)(v0 + 2016);
  v6 = *(_QWORD *)(v0 + 2000);
  v7 = *(_QWORD *)(v0 + 1976);
  v8 = *(_QWORD *)(v0 + 1952);
  v9 = *(_QWORD *)(v0 + 1944);
  v11 = *(_QWORD *)(v0 + 1936);
  v12 = *(_QWORD *)(v0 + 1928);

  swift_release_n(v2, 2);
  swift_release(v1);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2120));
}

uint64_t sub_10022D1F4()
{
  return swift_task_switch(sub_10022D208, 0, 0);
}

uint64_t sub_10022D208()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2056));
  return swift_asyncLet_finish(v0 + 656, v0 + 1704, sub_10022D25C, v0 + 1760);
}

uint64_t sub_10022D25C()
{
  return swift_task_switch(sub_10022D270, 0, 0);
}

uint64_t sub_10022D270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 2064);
  v2 = *(_QWORD *)(v0 + 1904);
  v3 = *(_QWORD *)(v0 + 1896);
  swift_release(*(_QWORD *)(v0 + 2048));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1368));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), *(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1392));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 1608) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1608, v0 + 1616, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "VisibleAttachmentsQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v12 = *(_QWORD *)(v0 + 2056);
  v13 = *(_QWORD *)(v0 + 2048);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 2040);
  v15 = *(void **)(v0 + 2032);
  v16 = *(void **)(v0 + 2024);
  v17 = *(_QWORD *)(v0 + 1928);
  v18 = *(_QWORD *)(v0 + 1912);

  v19 = v14(v17, v18);
  swift_willThrow(v19);

  swift_release(v13);
  swift_release(v12);
  v20 = *(void **)(v0 + 2016);
  v21 = *(_QWORD *)(v0 + 2000);
  v22 = *(_QWORD *)(v0 + 1976);
  v23 = *(_QWORD *)(v0 + 1952);
  v24 = *(_QWORD *)(v0 + 1944);
  v25 = *(_QWORD *)(v0 + 1936);
  v26 = *(_QWORD *)(v0 + 1928);

  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022D4C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2072));
  return swift_asyncLet_finish(v0 + 16, v0 + 1656, sub_10022D518, v0 + 1808);
}

uint64_t sub_10022D518()
{
  return swift_task_switch(sub_10022D52C, 0, 0);
}

uint64_t sub_10022D52C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2056));
  return swift_asyncLet_finish(v0 + 656, v0 + 1704, sub_10022D580, v0 + 1712);
}

uint64_t sub_10022D580()
{
  return swift_task_switch(sub_10022D594, 0, 0);
}

uint64_t sub_10022D594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 2080);
  v2 = *(_QWORD *)(v0 + 1904);
  v3 = *(_QWORD *)(v0 + 1896);
  swift_release(*(_QWORD *)(v0 + 2048));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1368));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), *(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1392));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 1608) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1608, v0 + 1616, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "VisibleAttachmentsQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v12 = *(_QWORD *)(v0 + 2056);
  v13 = *(_QWORD *)(v0 + 2048);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 2040);
  v15 = *(void **)(v0 + 2032);
  v16 = *(void **)(v0 + 2024);
  v17 = *(_QWORD *)(v0 + 1928);
  v18 = *(_QWORD *)(v0 + 1912);

  v19 = v14(v17, v18);
  swift_willThrow(v19);

  swift_release(v13);
  swift_release(v12);
  v20 = *(void **)(v0 + 2016);
  v21 = *(_QWORD *)(v0 + 2000);
  v22 = *(_QWORD *)(v0 + 1976);
  v23 = *(_QWORD *)(v0 + 1952);
  v24 = *(_QWORD *)(v0 + 1944);
  v25 = *(_QWORD *)(v0 + 1936);
  v26 = *(_QWORD *)(v0 + 1928);

  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022D7E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2088));
  return swift_asyncLet_finish(v0 + 16, v0 + 1656, sub_10022D83C, v0 + 1856);
}

uint64_t sub_10022D83C()
{
  return swift_task_switch(sub_10022D850, 0, 0);
}

uint64_t sub_10022D850()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2056));
  return swift_asyncLet_finish(v0 + 656, v0 + 1704, sub_10022D8A4, v0 + 1568);
}

uint64_t sub_10022D8A4()
{
  return swift_task_switch(sub_10022D8B8, 0, 0);
}

uint64_t sub_10022D8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 2112);
  v2 = *(_QWORD *)(v0 + 1904);
  v3 = *(_QWORD *)(v0 + 1896);
  swift_release(*(_QWORD *)(v0 + 2048));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1368));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), *(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1392));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 1608) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1608, v0 + 1616, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "VisibleAttachmentsQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v12 = *(_QWORD *)(v0 + 2056);
  v13 = *(_QWORD *)(v0 + 2048);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 2040);
  v15 = *(void **)(v0 + 2032);
  v16 = *(void **)(v0 + 2024);
  v17 = *(_QWORD *)(v0 + 1928);
  v18 = *(_QWORD *)(v0 + 1912);

  v19 = v14(v17, v18);
  swift_willThrow(v19);

  swift_release(v13);
  swift_release(v12);
  v20 = *(void **)(v0 + 2016);
  v21 = *(_QWORD *)(v0 + 2000);
  v22 = *(_QWORD *)(v0 + 1976);
  v23 = *(_QWORD *)(v0 + 1952);
  v24 = *(_QWORD *)(v0 + 1944);
  v25 = *(_QWORD *)(v0 + 1936);
  v26 = *(_QWORD *)(v0 + 1928);

  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022DB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10022DB28, 0, 0);
}

uint64_t sub_10022DB28()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_1005601A8, 32, 7);
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v2;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[6] = v7;
  v8 = sub_100012E18((uint64_t *)&unk_1005D3DB0);
  *v7 = v0;
  v7[1] = sub_1001E45F8;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_100236B70, v3, v8);
}

uint64_t sub_10022DBCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10022DBE8, 0, 0);
}

uint64_t sub_10022DBE8()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_100560180, 32, 7);
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v2;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[6] = v7;
  v8 = sub_100012E18((uint64_t *)&unk_1005D3DB0);
  *v7 = v0;
  v7[1] = sub_1001E43FC;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_100236B48, v3, v8);
}

void sub_10022DC8C(uint64_t a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char **v19;
  uint64_t v20;
  id v21;
  void *v22;
  objc_class *v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, char *, uint64_t);
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  id v35;
  unsigned __int8 v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  objc_super v51;
  unint64_t v52;

  v9 = type metadata accessor for AttachmentID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000163BC(0, a2, a3);
  v14 = NSManagedObjectContext.fetch<A>(_:)(a1, v13);
  if (!v4)
  {
    v15 = v14;
    v50 = v13;
    v52 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v43 = v14;
      else
        v43 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v16 = _CocoaArrayWrapper.endIndex.getter(v43);
      if (v16)
        goto LABEL_4;
    }
    else
    {
      v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v14);
      if (v16)
      {
LABEL_4:
        if (v16 < 1)
        {
          __break(1u);
          return;
        }
        v48 = v12;
        v49 = v15;
        v44[1] = 0;
        v45 = a4;
        v17 = 0;
        v18 = v15 & 0xC000000000000001;
        v19 = &selRef_info;
        v20 = v50;
        v46 = v15 & 0xC000000000000001;
        v47 = v16;
        do
        {
          if (v18)
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v15);
          else
            v21 = *(id *)(v15 + 8 * v17 + 32);
          v22 = v21;
          if (objc_msgSend(v21, v19[358]))
          {

          }
          else
          {
            v23 = (objc_class *)type metadata accessor for AttachmentSearchResult(0);
            v24 = objc_allocWithZone(v23);
            v25 = v48;
            ICAttachmentObject<>.entityIdentifier.getter(v20);
            v26 = v10;
            v27 = *(void (**)(_BYTE *, char *, uint64_t))(v10 + 32);
            v28 = v9;
            v27(&v24[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_id], v25, v9);
            v29 = objc_msgSend(v22, "title");
            if (v29)
            {
              v30 = v29;
              v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
              v33 = v32;

            }
            else
            {
              v31 = 0;
              v33 = 0xE000000000000000;
            }
            v34 = (uint64_t *)&v24[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_title];
            *v34 = v31;
            v34[1] = v33;
            v35 = objc_msgSend(v22, "objectID");
            v36 = objc_msgSend(v35, "ic_isAttachmentType");

            v24[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_isModernAttachment] = v36;
            v51.receiver = v24;
            v51.super_class = v23;
            v37 = objc_msgSendSuper2(&v51, "init");

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
            v40 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v39 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v40 >= v39 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
            v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v37);
            specialized Array._endMutation()(v41);
            v9 = v28;
            v10 = v26;
            v15 = v49;
            v20 = v50;
            v18 = v46;
            v16 = v47;
            v19 = &selRef_info;
          }
          ++v17;
        }
        while (v16 != v17);
        swift_bridgeObjectRelease(v15);
        v42 = (_QWORD *)v52;
        a4 = v45;
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease(v15);
    v42 = _swiftEmptyArrayStorage;
LABEL_24:
    swift_bridgeObjectRelease(v15);
    *a4 = v42;
  }
}

uint64_t sub_10022DF90@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = _s11MobileNotes23VisibleAttachmentsQueryVACycfC_0();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_10022DFBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch(sub_10022C4C0, 0, 0);
}

uint64_t sub_10022DFD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v6 = (_QWORD *)swift_task_alloc(dword_1005D522C);
  *(_QWORD *)(v2 + 24) = v6;
  *v6 = v2;
  v6[1] = sub_10013B218;
  return VisibleAttachmentsQuery.suggestedEntities()(v3, v4, v5);
}

uint64_t sub_10022E03C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10012839C();
  *v5 = v2;
  v5[1] = sub_100130768;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t VisibleAttachmentsQuery.entities(matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 72) = a5;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_10022E0C8, 0, 0);
}

uint64_t sub_10022E0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = sub_100012E18(&qword_1005D5278);
  v4 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
  *(_QWORD *)(v0 + 48) = v9;
  *(_OWORD *)(v9 + 16) = xmmword_100451C20;
  v10 = (uint64_t *)(v9 + v8);
  KeyPath = swift_getKeyPath(&unk_10045CBE8, v11);
  v14 = swift_getKeyPath(&unk_10045CC10, v13);
  *v10 = KeyPath;
  v10[1] = v14;
  v10[2] = v2;
  v10[3] = v1;
  swift_storeEnumTagMultiPayload(v10, v4, 4);
  v15 = dword_1005D5284;
  swift_bridgeObjectRetain(v1);
  v16 = (_QWORD *)swift_task_alloc(v15);
  *(_QWORD *)(v0 + 56) = v16;
  *v16 = v0;
  v16[1] = sub_10022E1D8;
  return VisibleAttachmentsQuery.entities(matching:mode:sortedBy:limit:)(v9, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 1, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 72));
}

uint64_t sub_10022E1D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 56);
  v5 = *v2;
  *(_QWORD *)(v5 + 64) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10022E260, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 48));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_10022E260()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static VisibleAttachmentsQuery.ComparatorKeyPath.title.getter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_10045CBE8, a2);
  swift_getKeyPath(&unk_10045CC10, v3);
  return KeyPath;
}

uint64_t VisibleAttachmentsQuery.entities(matching:mode:sortedBy:limit:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)(v8 + 2594) = a8;
  *(_QWORD *)(v8 + 2184) = a7;
  *(_QWORD *)(v8 + 2176) = a6;
  *(_BYTE *)(v8 + 2593) = a5;
  *(_QWORD *)(v8 + 2168) = a4;
  *(_QWORD *)(v8 + 2160) = a3;
  *(_BYTE *)(v8 + 2592) = a2;
  *(_QWORD *)(v8 + 2152) = a1;
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 2192) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 2200) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 2208) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 2216) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 2224) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 2232) = swift_task_alloc(v11);
  v12 = sub_100012E18((uint64_t *)&unk_1005DA0F0);
  *(_QWORD *)(v8 + 2240) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 2248) = v13;
  *(_QWORD *)(v8 + 2256) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttachmentID(0);
  *(_QWORD *)(v8 + 2264) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 2272) = v15;
  *(_QWORD *)(v8 + 2280) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D1080) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 2288) = swift_task_alloc(v16);
  *(_QWORD *)(v8 + 2296) = swift_task_alloc(v16);
  v17 = type metadata accessor for ManagedEntityContextType(0);
  *(_QWORD *)(v8 + 2304) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v8 + 2312) = v18;
  *(_QWORD *)(v8 + 2320) = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10022E424, 0, 0);
}

uint64_t sub_10022E424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _UNKNOWN **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int64_t v30;
  void **v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t result;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  Class isa;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char v68;
  uint64_t v69;
  id v70;
  Class v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  _QWORD *v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  void *v103;
  _QWORD *v104;
  id v105;
  id v106;
  id v107;
  uint64_t v108;
  _QWORD *v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  void *v118;
  _QWORD *v119;
  void *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;

  v1 = *(_QWORD *)(v0 + 2320);
  v2 = *(_QWORD *)(v0 + 2312);
  v3 = *(_QWORD *)(v0 + 2304);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1848));
  v4 = *(void **)(v0 + 1848);
  *(_QWORD *)(v0 + 2328) = objc_msgSend(v4, "modernManagedObjectContext");

  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 2136));
  v5 = *(void **)(v0 + 2136);
  v6 = enum case for ManagedEntityContextType.html(_:);
  v7 = *(void (**)(_QWORD))(v2 + 104);
  ((void (*)(uint64_t, _QWORD, uint64_t))v7)(v1, enum case for ManagedEntityContextType.html(_:), v3);
  *(_QWORD *)(v0 + 2336) = ICUnifiedNoteContext.managedObjectContext(for:)(v1);
  v8 = *(_QWORD *)(v0 + 2312);
  v9 = *(_QWORD *)(v0 + 2304);
  v10 = *(_QWORD *)(v0 + 2296);
  v11 = *(_QWORD *)(v0 + 2288);
  v117 = *(_QWORD *)(v0 + 2160);
  v119 = (_QWORD *)(v0 + 1336);
  v12 = *(_QWORD *)(v0 + 2152);
  v13 = *(_BYTE *)(v0 + 2592) & 1;
  (*(void (**)(_QWORD, uint64_t))(v8 + 8))(*(_QWORD *)(v0 + 2320), v9);

  v121 = v0;
  v115 = enum case for ManagedEntityContextType.modern(_:);
  v7(v10);
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56);
  v14(v10, 0, 1, v9);
  sub_100012CE8(v10, v11, &qword_1005D1080);
  swift_bridgeObjectRetain(v12);
  *(_QWORD *)(v0 + 2344) = sub_100233A90(v15, v13, v11, 0);
  sub_100012DDC(v10, &qword_1005D1080);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v10, v6, v9);
  v14(v10, 0, 1, v9);
  sub_100012CE8(v10, v11, &qword_1005D1080);
  swift_bridgeObjectRetain(v12);
  v16 = v13;
  *(_QWORD *)(v121 + 2352) = sub_100233A90(v17, v13, v11, 0);
  sub_100012DDC(v10, &qword_1005D1080);
  v18 = (_QWORD *)v121;
  ((void (*)(uint64_t, _QWORD, uint64_t))v7)(v10, v115, v9);
  v14(v10, 0, 1, v9);
  sub_100012CE8(v10, v11, &qword_1005D1080);
  swift_bridgeObjectRetain(v12);
  *(_QWORD *)(v121 + 2360) = sub_100233A90(v19, v16, v11, 1);
  sub_100012DDC(v10, &qword_1005D1080);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v10, v6, v9);
  v14(v10, 0, 1, v9);
  sub_100012CE8(v10, v11, &qword_1005D1080);
  swift_bridgeObjectRetain(v12);
  *(_QWORD *)(v121 + 2368) = sub_100233A90(v20, v16, v11, 1);
  sub_100012DDC(v10, &qword_1005D1080);
  if (*(_QWORD *)(v117 + 16))
  {
    v21 = *(void **)(v121 + 2160);
    v22 = sub_100012E18(&qword_1005D5290);
    v23 = sub_100016638(&qword_1005D5298, &qword_1005D5290, (uint64_t)&protocol conformance descriptor for LazyMapSequence<A, B>);
    v24 = (_UNKNOWN **)swift_allocObject(&unk_10055FFB0, 72, 7);
    v24[2] = v21;
    v24[3] = sub_1001B7474;
    v24[4] = 0;
    v24[5] = sub_100234A8C;
    v24[6] = 0;
    v24[7] = sub_100234A9C;
    v24[8] = 0;
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v22 = sub_100012E18(&qword_1005D52E0);
    v23 = sub_100016638(&qword_1005D52E8, &qword_1005D52E0, (uint64_t)&protocol conformance descriptor for [A]);
    v24 = &off_100556960;
  }
  v25 = *(_QWORD *)(v121 + 2152);
  *(_QWORD *)(v121 + 1360) = v22;
  *(_QWORD *)(v121 + 1368) = v23;
  *(_QWORD *)(v121 + 1336) = v24;
  sub_10012D19C(v119, v22);
  v26 = sub_1000163BC(0, &qword_1005D39A0, NSSortDescriptor_ptr);
  *(_QWORD *)(v121 + 2376) = v26;
  *(_QWORD *)(v121 + 2384) = sub_1001DBF08((void (*)(char *, char *))sub_100232488, 0, v22, v26, (uint64_t)&type metadata for Never, v23, (uint64_t)&protocol witness table for Never, v27);
  v28 = sub_10022ACA0(v25);
  v29 = v28;
  v30 = v28[2];
  if (v30)
  {
    sub_100137028(0, v30, 0);
    v31 = (void **)(v29 + 5);
    do
    {
      v32 = (uint64_t)*(v31 - 1);
      v33 = *v31;
      v123 = 40;
      v124 = 0xE100000000000000;
      swift_bridgeObjectRetain(v33);
      v34._countAndFlagsBits = v32;
      v34._object = v33;
      String.append(_:)(v34);
      v35._countAndFlagsBits = 41;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v33);
      v37 = _swiftEmptyArrayStorage[2];
      v36 = _swiftEmptyArrayStorage[3];
      if (v37 >= v36 >> 1)
        sub_100137028(v36 > 1, v37 + 1, 1);
      _swiftEmptyArrayStorage[2] = v37 + 1;
      v38 = &_swiftEmptyArrayStorage[2 * v37];
      v38[4] = 40;
      v38[5] = 0xE100000000000000;
      v31 += 2;
      --v30;
    }
    while (v30);
    v39 = *(_BYTE *)(v121 + 2592);
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v121 + 2128) = _swiftEmptyArrayStorage;
    v123 = 32;
    v124 = 0xE100000000000000;
    if ((v39 & 1) != 0)
      v40 = 31868;
    else
      v40 = 9766;
    v41 = 0xE200000000000000;
    String.append(_:)(*(Swift::String *)&v40);
    swift_bridgeObjectRelease(0xE200000000000000);
    v42._countAndFlagsBits = 32;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    v43 = sub_100012E18(&qword_1005D39A8);
    v44 = sub_100016638((unint64_t *)&qword_1005D39B0, &qword_1005D39A8, (uint64_t)&protocol conformance descriptor for [A]);
    v45 = BidirectionalCollection<>.joined(separator:)(v123, v124, v43, v44);
    v47 = v46;
    swift_bridgeObjectRelease(v124);
    swift_release(_swiftEmptyArrayStorage);
    *(_QWORD *)(v121 + 2392) = v47;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8C40, ICSearchQueryOperation_ptr);
    v48 = (_QWORD *)swift_task_alloc(async function pointer to static ICSearchQueryOperation.searchResults(queryString:rankingQueries:)[1]);
    *(_QWORD *)(v121 + 2400) = v48;
    *v48 = v121;
    v48[1] = sub_10022F02C;
    return static ICSearchQueryOperation.searchResults(queryString:rankingQueries:)(v45, v47, _swiftEmptyArrayStorage);
  }
  else
  {
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)(v121 + 2488) = 0;
    v50 = *(_QWORD *)(v121 + 2152);
    v51 = *(_QWORD *)(v50 + 16);
    if (v51)
    {
      v52 = sub_10022ACA0(v50);
      v53 = v52[2];
      swift_bridgeObjectRelease(v52);
      v54 = v53 < v51;
    }
    else
    {
      v54 = 1;
    }
    *(_BYTE *)(v121 + 2595) = v54;
    v55 = *(_QWORD *)(v121 + 2384);
    v56 = *(_QWORD *)(v121 + 2328);
    v57 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
    v58 = (void *)static NSObject<>.ic_fetchRequest()();
    *(_QWORD *)(v121 + 2496) = v58;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v55);
    objc_msgSend(v58, "setSortDescriptors:", isa);

    v60 = sub_100012E18(&qword_1005CF6F0);
    v61 = swift_allocObject(v60, 56, 7);
    *(_OWORD *)(v61 + 16) = xmmword_100454060;
    *(_QWORD *)(v61 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v57), "predicateForVisibleAttachmentsInContext:", v56);
    sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
    if (qword_1005CEB28 != -1)
      swift_once(&qword_1005CEB28, sub_10022B070);
    v62 = *(_QWORD *)(v121 + 2256);
    v63 = *(_QWORD *)(v121 + 2248);
    v64 = *(_QWORD *)(v121 + 2240);
    v65 = sub_10012A0B0(v64, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v62, v65, v64);
    v66 = NSPredicate.init<A>(_:)(v62, v57);
    if (v66)
    {
      v67 = *(void **)(v121 + 2344);
      v68 = *(_BYTE *)(v121 + 2594);
      *(_QWORD *)(v61 + 40) = v66;
      *(_QWORD *)(v61 + 48) = v67;
      v123 = v61;
      specialized Array._endMutation()(v66);
      v69 = v61;
      v70 = v67;
      v71 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v69);
      v72 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v71);

      objc_msgSend(v58, "setPredicate:", v72);
      sub_1000163BC(0, &qword_1005D5238, NoteAttachmentObject_ptr);
      v73 = (void *)static NSObject<>.ic_fetchRequest()();
      *(_QWORD *)(v121 + 2504) = v73;
      if ((v68 & 1) == 0)
      {
        v74 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 0);
        objc_msgSend(v73, "setPredicate:", v74);

      }
      if ((*(_BYTE *)(v121 + 2593) & 1) == 0)
      {
        v75 = *(_QWORD *)(v121 + 2168);
        objc_msgSend(v58, "setFetchLimit:", v75);
        objc_msgSend(v73, "setFetchLimit:", v75);
      }
      v118 = v73;
      v120 = v58;
      v76 = *(_QWORD *)(v121 + 2184);
      v77 = *(_QWORD *)(v121 + 2176);
      v78 = *(_QWORD *)(v121 + 2152);
      swift_retain(v77);
      swift_retain(v76);
      AppDependency.wrappedValue.getter((_QWORD *)(v121 + 1512));
      Logger.init(subsystem:category:)(*(_QWORD *)(v121 + 1512), *(_QWORD *)(v121 + 1520), *(_QWORD *)(v121 + 1528), *(_QWORD *)(v121 + 1536));
      swift_release(v77);
      swift_release(v76);
      v79 = swift_bridgeObjectRetain_n(v78, 2);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.info.getter();
      v82 = os_log_type_enabled(v80, v81);
      v83 = *(_QWORD *)(v121 + 2232);
      v84 = *(_QWORD *)(v121 + 2200);
      v85 = *(_QWORD *)(v121 + 2192);
      v86 = *(_QWORD *)(v121 + 2152);
      if (v82)
      {
        v114 = *(_QWORD *)(v121 + 2232);
        v87 = (uint8_t *)swift_slowAlloc(12, -1);
        v88 = swift_slowAlloc(32, -1);
        v123 = v88;
        *(_DWORD *)v87 = 136315138;
        v89 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
        swift_bridgeObjectRetain(v86);
        v91 = Array.description.getter(v90, v89);
        v113 = v85;
        v93 = v92;
        swift_bridgeObjectRelease(v86);
        *(_QWORD *)(v121 + 2088) = sub_1003A4190(v91, v93, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v121 + 2088, v121 + 2096, v87 + 4);
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease_n(v86, 2);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "VisibleAttachmentsQuery: performing with filters %s", v87, 0xCu);
        swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
        v94 = v88;
        v18 = (_QWORD *)v121;
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v87, -1, -1);

        v95 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
        v95(v114, v113);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v121 + 2152), 2);

        v95 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
        v95(v83, v85);
      }
      v96 = v18 + 2;
      v97 = v18 + 262;
      v116 = v18 + 243;
      v122 = v18 + 244;
      v18[314] = v95;
      v98 = (void *)v18[294];
      v99 = v18 + 82;
      v100 = (void *)v18[293];
      v101 = v18;
      v102 = (void *)v18[292];
      v103 = (void *)v101[291];
      v104 = (_QWORD *)swift_allocObject(&unk_10055FFD8, 40, 7);
      v101[315] = v104;
      v104[2] = v103;
      v104[3] = v120;
      v104[4] = v100;
      v105 = v103;
      v106 = v100;
      v107 = v120;
      swift_retain(v104);
      v108 = sub_10001537C((uint64_t *)&unk_1005D3DB0);
      swift_asyncLet_begin(v99, 0, v108, &unk_1005D52A8, v104, v97);
      v109 = (_QWORD *)swift_allocObject(&unk_100560000, 40, 7);
      v101[316] = v109;
      v109[2] = v102;
      v109[3] = v118;
      v109[4] = v98;
      v110 = v102;
      v111 = v118;
      v112 = v98;
      swift_retain(v109);
      swift_asyncLet_begin(v96, 0, v108, &unk_1005D52B8, v109, v116);
      return swift_asyncLet_get_throwing(v99, v97, sub_100230878, v122);
    }
    else
    {
      result = swift_bridgeObjectRelease(0);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10022F02C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2400);
  v3[301] = a1;
  v3[302] = v1;
  swift_task_dealloc(v4);
  v5 = v3[299];
  if (v1)
  {
    v6 = v3[298];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    v7 = sub_100231014;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    v7 = sub_10022F0B4;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10022F0B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  id v29;
  Class v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;

  v1 = *(_QWORD *)(v0 + 2408);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v7 = *(_QWORD *)(v0 + 2408);
    else
      v7 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 2408));
    v8 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease(v1);
    if (v8)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v2 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 2424) = v2;
    *(_QWORD *)(v0 + 2432) = static MainActor.shared.getter(v2);
    v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor, v3);
    return swift_task_switch(sub_10022F720, v4, v5);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2408));
  *(_QWORD *)(v0 + 2488) = 0;
  v9 = *(_QWORD *)(v0 + 2152);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = sub_10022ACA0(v9);
    v12 = v11[2];
    swift_bridgeObjectRelease(v11);
    v13 = v12 < v10;
  }
  else
  {
    v13 = 1;
  }
  *(_BYTE *)(v0 + 2595) = v13;
  v14 = *(_QWORD *)(v0 + 2384);
  v15 = *(_QWORD *)(v0 + 2328);
  v16 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  v17 = (void *)static NSObject<>.ic_fetchRequest()();
  *(_QWORD *)(v0 + 2496) = v17;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v17, "setSortDescriptors:", isa);

  v19 = sub_100012E18(&qword_1005CF6F0);
  v20 = swift_allocObject(v19, 56, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100454060;
  *(_QWORD *)(v20 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "predicateForVisibleAttachmentsInContext:", v15);
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  if (qword_1005CEB28 != -1)
    swift_once(&qword_1005CEB28, sub_10022B070);
  v21 = *(_QWORD *)(v0 + 2256);
  v22 = *(_QWORD *)(v0 + 2248);
  v23 = *(_QWORD *)(v0 + 2240);
  v24 = sub_10012A0B0(v23, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v24, v23);
  v25 = NSPredicate.init<A>(_:)(v21, v16);
  if (v25)
  {
    v26 = *(void **)(v0 + 2344);
    v27 = *(_BYTE *)(v0 + 2594);
    *(_QWORD *)(v20 + 40) = v25;
    *(_QWORD *)(v20 + 48) = v26;
    v71 = v20;
    specialized Array._endMutation()(v25);
    v28 = v20;
    v29 = v26;
    v30 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v28);
    v31 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v30);

    objc_msgSend(v17, "setPredicate:", v31);
    sub_1000163BC(0, &qword_1005D5238, NoteAttachmentObject_ptr);
    v32 = (void *)static NSObject<>.ic_fetchRequest()();
    *(_QWORD *)(v0 + 2504) = v32;
    if ((v27 & 1) == 0)
    {
      v33 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 0);
      objc_msgSend(v32, "setPredicate:", v33);

    }
    if ((*(_BYTE *)(v0 + 2593) & 1) == 0)
    {
      v34 = *(_QWORD *)(v0 + 2168);
      objc_msgSend(v17, "setFetchLimit:", v34);
      objc_msgSend(v32, "setFetchLimit:", v34);
    }
    v69 = v32;
    v70 = v17;
    v35 = *(_QWORD *)(v0 + 2184);
    v36 = *(_QWORD *)(v0 + 2176);
    v37 = *(_QWORD *)(v0 + 2152);
    swift_retain(v36);
    swift_retain(v35);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1512));
    Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1512), *(_QWORD *)(v0 + 1520), *(_QWORD *)(v0 + 1528), *(_QWORD *)(v0 + 1536));
    swift_release(v36);
    swift_release(v35);
    v38 = swift_bridgeObjectRetain_n(v37, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    v41 = os_log_type_enabled(v39, v40);
    v42 = *(_QWORD *)(v0 + 2232);
    v43 = *(_QWORD *)(v0 + 2200);
    v44 = *(_QWORD *)(v0 + 2192);
    v45 = *(_QWORD *)(v0 + 2152);
    if (v41)
    {
      v68 = *(_QWORD *)(v0 + 2232);
      v67 = *(_QWORD *)(v0 + 2200);
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v71 = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
      swift_bridgeObjectRetain(v45);
      v50 = Array.description.getter(v49, v48);
      v52 = v51;
      swift_bridgeObjectRelease(v45);
      *(_QWORD *)(v0 + 2088) = sub_1003A4190(v50, v52, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2088, v0 + 2096, v46 + 4);
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease_n(v45, 2);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "VisibleAttachmentsQuery: performing with filters %s", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      v53 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v53(v68, v44);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 2152), 2);

      v53 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v53(v42, v44);
    }
    *(_QWORD *)(v0 + 2512) = v53;
    v54 = *(void **)(v0 + 2352);
    v55 = *(void **)(v0 + 2344);
    v56 = *(void **)(v0 + 2336);
    v57 = *(void **)(v0 + 2328);
    v58 = (_QWORD *)swift_allocObject(&unk_10055FFD8, 40, 7);
    *(_QWORD *)(v0 + 2520) = v58;
    v58[2] = v57;
    v58[3] = v70;
    v58[4] = v55;
    v59 = v57;
    v60 = v55;
    v61 = v70;
    swift_retain(v58);
    v62 = sub_10001537C((uint64_t *)&unk_1005D3DB0);
    swift_asyncLet_begin(v0 + 656, 0, v62, &unk_1005D52A8, v58, v0 + 2096);
    v63 = (_QWORD *)swift_allocObject(&unk_100560000, 40, 7);
    *(_QWORD *)(v0 + 2528) = v63;
    v63[2] = v56;
    v63[3] = v69;
    v63[4] = v54;
    v64 = v56;
    v65 = v69;
    v66 = v54;
    swift_retain(v63);
    swift_asyncLet_begin(v0 + 16, 0, v62, &unk_1005D52B8, v63, v0 + 1944);
    return swift_asyncLet_get_throwing(v0 + 656, v0 + 2096, sub_100230878, v0 + 1952);
  }
  else
  {
    result = swift_bridgeObjectRelease(0);
    __break(1u);
  }
  return result;
}

void sub_10022F720()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  Class v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (void *)v0[292];
  v2 = (void *)v0[291];
  swift_release(v0[304]);
  v3 = objc_msgSend((id)objc_opt_self(ICSearchIndexer), "sharedIndexer");
  sub_1000163BC(0, (unint64_t *)&unk_1005D39C0, CSSearchableItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v5 = sub_100012E18(&qword_1005CF6F0);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100451BF0;
  *(_QWORD *)(v6 + 32) = v2;
  *(_QWORD *)(v6 + 40) = v1;
  v31 = v6;
  specialized Array._endMutation()(v6);
  sub_1000163BC(0, (unint64_t *)&unk_1005D39D0, NSManagedObjectContext_ptr);
  v7 = v2;
  v8 = v1;
  v9 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  v10 = objc_msgSend(v3, "objectsForSearchableItems:inContexts:", isa, v9);

  v11 = sub_100012E18((uint64_t *)&unk_1005D39E0);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  if (!((unint64_t)v12 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v12);
    if (v13)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease(v12);
    v0[305] = _swiftEmptyArrayStorage;
    v30 = v0[301];
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v30);
    swift_task_switch(sub_10022FAD0, 0, 0);
    return;
  }
  if (v12 < 0)
    v29 = v12;
  else
    v29 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v13 = _CocoaArrayWrapper.endIndex.getter(v29);
  if (!v13)
    goto LABEL_27;
LABEL_3:
  if (v13 >= 1)
  {
    for (i = 0; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v12);
      }
      else
      {
        v15 = *(_QWORD *)(v12 + 8 * i + 32);
        swift_unknownObjectRetain(v15);
      }
      v0[263] = &OBJC_PROTOCOL___ICAttachmentObject;
      v16 = swift_dynamicCastObjCProtocolConditional(v15, 1, v0 + 263);
      if (!v16)
        goto LABEL_5;
      v18 = (void *)v16;
      ObjectType = swift_getObjectType(v15);
      v20 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
      if (!swift_dynamicCastMetatype(ObjectType, v20))
        v18 = 0;
      if (v18)
      {
        v21 = swift_getObjectType(v18);
        swift_unknownObjectRetain(v15);
        if ((sub_10022BA14() & 1) == 0
          || (v0[268] = &OBJC_PROTOCOL___ICSearchIndexable,
              (v22 = (void *)swift_dynamicCastObjCProtocolConditional(v18, 1, v0 + 268)) != 0)
          && (objc_msgSend(v22, "isHiddenFromSearch") & 1) != 0
          || (objc_msgSend(v18, "isDeletedOrInTrash") & 1) != 0)
        {
          swift_unknownObjectRelease_n(v15, 2);
        }
        else
        {
          v23 = objc_allocWithZone((Class)type metadata accessor for AttachmentSearchResult(0));
          v24 = sub_100235218(v18, v23, v21);
          v25 = swift_unknownObjectRelease_n(v15, 2);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
          v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v26 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v27 >= v26 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v24);
          specialized Array._endMutation()(v28);
        }
      }
      else
      {
LABEL_5:
        swift_unknownObjectRelease(v15, v17);
      }
    }
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t sub_10022FAD0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  id v29;
  Class v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;

  if ((static EntityQueryComparatorMode.== infix(_:_:)(*(_BYTE *)(v1 + 2592) & 1, 0, a1) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 2424);
    v3 = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 2384));
    *(_QWORD *)(v1 + 2448) = static MainActor.shared.getter(v3);
    v5 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor, v4);
    return swift_task_switch(sub_100230108, v5, v6);
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 2440);
    *(_QWORD *)(v1 + 2488) = v8;
    v9 = *(_QWORD *)(v1 + 2152);
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = sub_10022ACA0(v9);
      v12 = v11[2];
      swift_bridgeObjectRelease(v11);
      v13 = v12 < v10;
    }
    else
    {
      v13 = 1;
    }
    *(_BYTE *)(v1 + 2595) = v13;
    v14 = *(_QWORD *)(v1 + 2384);
    v15 = *(_QWORD *)(v1 + 2328);
    v16 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
    v17 = (void *)static NSObject<>.ic_fetchRequest()();
    *(_QWORD *)(v1 + 2496) = v17;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    objc_msgSend(v17, "setSortDescriptors:", isa);

    v19 = sub_100012E18(&qword_1005CF6F0);
    v20 = swift_allocObject(v19, 56, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100454060;
    *(_QWORD *)(v20 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "predicateForVisibleAttachmentsInContext:", v15);
    sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
    if (qword_1005CEB28 != -1)
      swift_once(&qword_1005CEB28, sub_10022B070);
    v21 = *(_QWORD *)(v1 + 2256);
    v22 = *(_QWORD *)(v1 + 2248);
    v23 = *(_QWORD *)(v1 + 2240);
    v24 = sub_10012A0B0(v23, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v24, v23);
    v25 = NSPredicate.init<A>(_:)(v21, v16);
    if (v25)
    {
      v26 = *(void **)(v1 + 2344);
      v27 = *(_BYTE *)(v1 + 2594);
      *(_QWORD *)(v20 + 40) = v25;
      *(_QWORD *)(v20 + 48) = v26;
      v71 = v20;
      specialized Array._endMutation()(v25);
      v28 = v20;
      v29 = v26;
      v30 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v28);
      v31 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v30);

      objc_msgSend(v17, "setPredicate:", v31);
      sub_1000163BC(0, &qword_1005D5238, NoteAttachmentObject_ptr);
      v32 = (void *)static NSObject<>.ic_fetchRequest()();
      *(_QWORD *)(v1 + 2504) = v32;
      if ((v27 & 1) == 0)
      {
        v33 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 0);
        objc_msgSend(v32, "setPredicate:", v33);

      }
      if ((*(_BYTE *)(v1 + 2593) & 1) == 0)
      {
        v34 = *(_QWORD *)(v1 + 2168);
        objc_msgSend(v17, "setFetchLimit:", v34);
        objc_msgSend(v32, "setFetchLimit:", v34);
      }
      v69 = v32;
      v70 = v17;
      v35 = *(_QWORD *)(v1 + 2184);
      v36 = *(_QWORD *)(v1 + 2176);
      v37 = *(_QWORD *)(v1 + 2152);
      swift_retain(v36);
      swift_retain(v35);
      AppDependency.wrappedValue.getter((_QWORD *)(v1 + 1512));
      Logger.init(subsystem:category:)(*(_QWORD *)(v1 + 1512), *(_QWORD *)(v1 + 1520), *(_QWORD *)(v1 + 1528), *(_QWORD *)(v1 + 1536));
      swift_release(v36);
      swift_release(v35);
      v38 = swift_bridgeObjectRetain_n(v37, 2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.info.getter();
      v41 = os_log_type_enabled(v39, v40);
      v42 = *(_QWORD *)(v1 + 2232);
      v43 = *(_QWORD *)(v1 + 2200);
      v44 = *(_QWORD *)(v1 + 2192);
      v45 = *(_QWORD *)(v1 + 2152);
      if (v41)
      {
        v68 = *(_QWORD *)(v1 + 2232);
        v67 = *(_QWORD *)(v1 + 2200);
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v71 = v47;
        *(_DWORD *)v46 = 136315138;
        v48 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
        swift_bridgeObjectRetain(v45);
        v50 = Array.description.getter(v49, v48);
        v52 = v51;
        swift_bridgeObjectRelease(v45);
        *(_QWORD *)(v1 + 2088) = sub_1003A4190(v50, v52, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2088, v1 + 2096, v46 + 4);
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease_n(v45, 2);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "VisibleAttachmentsQuery: performing with filters %s", v46, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);

        v53 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
        v53(v68, v44);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 2152), 2);

        v53 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        v53(v42, v44);
      }
      *(_QWORD *)(v1 + 2512) = v53;
      v54 = *(void **)(v1 + 2352);
      v55 = *(void **)(v1 + 2344);
      v56 = *(void **)(v1 + 2336);
      v57 = *(void **)(v1 + 2328);
      v58 = (_QWORD *)swift_allocObject(&unk_10055FFD8, 40, 7);
      *(_QWORD *)(v1 + 2520) = v58;
      v58[2] = v57;
      v58[3] = v70;
      v58[4] = v55;
      v59 = v57;
      v60 = v55;
      v61 = v70;
      swift_retain(v58);
      v62 = sub_10001537C((uint64_t *)&unk_1005D3DB0);
      swift_asyncLet_begin(v1 + 656, 0, v62, &unk_1005D52A8, v58, v1 + 2096);
      v63 = (_QWORD *)swift_allocObject(&unk_100560000, 40, 7);
      *(_QWORD *)(v1 + 2528) = v63;
      v63[2] = v56;
      v63[3] = v69;
      v63[4] = v54;
      v64 = v56;
      v65 = v69;
      v66 = v54;
      swift_retain(v63);
      swift_asyncLet_begin(v1 + 16, 0, v62, &unk_1005D52B8, v63, v1 + 1944);
      return swift_asyncLet_get_throwing(v1 + 656, v1 + 2096, sub_100230878, v1 + 1952);
    }
    else
    {
      result = swift_bridgeObjectRelease(v8);
      __break(1u);
    }
  }
  return result;
}

void sub_100230108()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  _QWORD *v22;
  id v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  id v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 2440);
  swift_release(*(_QWORD *)(v0 + 2448));
  v2 = *(_QWORD *)(v0 + 2440);
  if (v1 >> 62)
  {
    if (v2 < 0)
      v37 = *(_QWORD *)(v0 + 2440);
    else
      v37 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v37);
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v2);
    if (v3)
    {
LABEL_3:
      if (v3 >= 1)
      {
        v4 = 0;
        v5 = (_QWORD *)(v0 + 1448);
        v6 = v0 + 1480;
        v7 = (_QWORD *)(v0 + 1544);
        v60 = v1 & 0xC000000000000001;
        v61 = v0 + 1640;
        v58 = *(_QWORD *)(v0 + 2440) + 32;
        v59 = v3;
        v57 = (_QWORD *)(v0 + 1544);
        while (1)
        {
          if (v60)
            v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(_QWORD *)(v0 + 2440));
          else
            v10 = *(id *)(v58 + 8 * v4);
          v11 = v10;
          v12 = OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_isModernAttachment;
          if (*((_BYTE *)v10
               + OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_isModernAttachment) == 1)
          {
            *(_QWORD *)(v0 + 1664) = type metadata accessor for AttachmentSearchResult(0);
            *(_QWORD *)(v0 + 1640) = v11;
            sub_100012CE8(v61, (uint64_t)v5, &qword_1005CF190);
            v13 = *(_QWORD *)(v0 + 1472);
            if (v13)
            {
              v14 = v6;
              v15 = v5;
              v16 = sub_10012D19C(v5, *(_QWORD *)(v0 + 1472));
              v17 = *(_QWORD *)(v13 - 8);
              v18 = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 16))(v18, v16, v13);
              v19 = v11;
              v20 = _bridgeAnythingToObjectiveC<A>(_:)(v18, v13);
              v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
              v3 = v59;
              v21(v18, v13);
              swift_task_dealloc(v18);
              v22 = v15;
              v6 = v14;
              v7 = v57;
              sub_1000153C0(v22);
            }
            else
            {
              v23 = v11;
              v20 = 0;
            }
            v24 = objc_msgSend(*(id *)(v0 + 2360), "evaluateWithObject:", v20, v57);
            swift_unknownObjectRelease(v20, v25);
            v26 = sub_100012DDC(v61, &qword_1005CF190);
            if ((v24 & 1) != 0)
              goto LABEL_5;
            v5 = (_QWORD *)(v0 + 1448);
            if ((*((_BYTE *)v11 + v12) & 1) != 0)
            {

              goto LABEL_7;
            }
          }
          *(_QWORD *)(v0 + 1504) = type metadata accessor for AttachmentSearchResult(0);
          *(_QWORD *)(v0 + 1480) = v11;
          sub_100012CE8(v6, (uint64_t)v7, &qword_1005CF190);
          v27 = *(_QWORD *)(v0 + 1568);
          if (v27)
          {
            v28 = sub_10012D19C(v7, *(_QWORD *)(v0 + 1568));
            v29 = *(_QWORD *)(v27 - 8);
            v30 = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(v29 + 16))(v30, v28, v27);
            v31 = v11;
            v32 = _bridgeAnythingToObjectiveC<A>(_:)(v30, v27);
            v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
            v3 = v59;
            v33(v30, v27);
            swift_task_dealloc(v30);
            sub_1000153C0(v7);
          }
          else
          {
            v34 = v11;
            v32 = 0;
          }
          v35 = objc_msgSend(*(id *)(v0 + 2368), "evaluateWithObject:", v32, v57);
          swift_unknownObjectRelease(v32, v36);
          v26 = sub_100012DDC(v6, &qword_1005CF190);
          if ((v35 & 1) == 0)
          {

            goto LABEL_6;
          }
LABEL_5:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
          v8 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
          v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v11);
          specialized ContiguousArray._endMutation()(v9);
LABEL_6:
          v5 = (_QWORD *)(v0 + 1448);
LABEL_7:
          if (v3 == ++v4)
            goto LABEL_28;
        }
      }
      __break(1u);
      goto LABEL_45;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2440));
  v38 = *(_QWORD *)(v0 + 2168);
  v39 = *(_BYTE *)(v0 + 2593) & 1;
  v40 = *(_QWORD *)(v0 + 1360);
  v41 = *(_QWORD *)(v0 + 1368);
  v42 = sub_10012D19C((_QWORD *)(v0 + 1336), v40);
  *(_QWORD *)(v0 + 2112) = _swiftEmptyArrayStorage;
  v43 = sub_100012E18((uint64_t *)&unk_1005D3DB0);
  v44 = sub_100016638(&qword_1005D52D0, (uint64_t *)&unk_1005D3DB0, (uint64_t)&protocol conformance descriptor for [A]);
  v45 = (uint64_t)sub_10022C1B8((uint64_t)v42, v38, v39, v43, v40, v44, v41);
  swift_release(_swiftEmptyArrayStorage);
  if (!((unint64_t)v45 >> 62))
  {
    v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v46)
      goto LABEL_30;
LABEL_43:
    v56 = *(_QWORD *)(v0 + 2440);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v56);
    *(_QWORD *)(v0 + 2456) = _swiftEmptyArrayStorage;
    swift_task_switch(sub_10023065C, 0, 0);
    return;
  }
  if (v45 < 0)
    v55 = v45;
  else
    v55 = v45 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v45);
  v46 = _CocoaArrayWrapper.endIndex.getter(v55);
  swift_bridgeObjectRelease(v45);
  if (!v46)
    goto LABEL_43;
LABEL_30:
  sub_100137290(0, v46 & ~(v46 >> 63), 0);
  if ((v46 & 0x8000000000000000) == 0)
  {
    v47 = 0;
    v48 = *(_QWORD *)(v0 + 2272);
    do
    {
      if ((v45 & 0xC000000000000001) != 0)
        v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v45);
      else
        v49 = *(id *)(v45 + 8 * v47 + 32);
      v50 = v49;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v48 + 16))(*(_QWORD *)(v0 + 2280), (uint64_t)v49 + OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_id, *(_QWORD *)(v0 + 2264));

      v52 = _swiftEmptyArrayStorage[2];
      v51 = _swiftEmptyArrayStorage[3];
      if (v52 >= v51 >> 1)
        sub_100137290(v51 > 1, v52 + 1, 1);
      v53 = *(_QWORD *)(v0 + 2280);
      v54 = *(_QWORD *)(v0 + 2264);
      ++v47;
      _swiftEmptyArrayStorage[2] = v52 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v52, v53, v54);
    }
    while (v46 != v47);
    goto LABEL_43;
  }
LABEL_45:
  __break(1u);
}

uint64_t sub_10023065C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  AppDependency.wrappedValue.getter(v0 + 265);
  v1 = v0[265];
  v0[308] = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1005D0208 + dword_1005D0208);
  v2 = (_QWORD *)swift_task_alloc(unk_1005D020C);
  v0[309] = v2;
  *v2 = v0;
  v2[1] = sub_1002306D8;
  return v4(v0[307], v1, 1);
}

uint64_t sub_1002306D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = (_QWORD *)*v2;
  v3[209] = v2;
  v3[210] = a1;
  v3[211] = v1;
  v4 = v3[309];
  v3[310] = v1;
  swift_task_dealloc(v4);
  v5 = (void *)v3[308];
  if (v1)
  {

    v6 = sub_100231104;
  }
  else
  {
    v7 = v3[307];

    swift_bridgeObjectRelease(v7);
    v6 = sub_100230760;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100230760()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void **)(v0 + 2368);
  v2 = *(void **)(v0 + 2360);
  v3 = *(void **)(v0 + 2352);
  v4 = *(void **)(v0 + 2344);
  v5 = *(void **)(v0 + 2336);

  v6 = *(_QWORD *)(v0 + 2320);
  v7 = *(_QWORD *)(v0 + 2296);
  v8 = *(_QWORD *)(v0 + 2288);
  v9 = *(_QWORD *)(v0 + 2280);
  v10 = *(_QWORD *)(v0 + 2256);
  v11 = *(_QWORD *)(v0 + 2232);
  v12 = *(_QWORD *)(v0 + 2224);
  v13 = *(_QWORD *)(v0 + 2216);
  v15 = *(_QWORD *)(v0 + 2208);
  v16 = *(_QWORD *)(v0 + 1680);
  sub_1000153C0((_QWORD *)(v0 + 1336));
  sub_100012C50(0, 0);
  sub_100012C50(0, 0);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v16);
}

uint64_t sub_100230878()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v1[317] = v0;
  if (v0)
  {
    swift_bridgeObjectRelease(v1[311]);
    return swift_asyncLet_finish(v1 + 2, v1 + 243, sub_100231200, v1 + 250);
  }
  else
  {
    v3 = v1[262];
    v1[318] = v3;
    swift_bridgeObjectRetain(v3);
    return swift_asyncLet_get_throwing(v1 + 2, v1 + 243, sub_10023090C, v1 + 220);
  }
}

uint64_t sub_10023090C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[319] = v0;
  if (!v0)
    return swift_task_switch(sub_100230998, 0, 0);
  v2 = v1[311];
  swift_bridgeObjectRelease(v1[318]);
  swift_bridgeObjectRelease(v2);
  return swift_asyncLet_finish(v1 + 2, v1 + 243, sub_100231538, v1 + 212);
}

uint64_t sub_100230998()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, char);
  uint64_t v38;

  v38 = *(_QWORD *)(v0 + 2544);
  v1 = *(_BYTE *)(v0 + 2595);
  v2 = *(_QWORD *)(v0 + 2488);
  v3 = *(_QWORD *)(v0 + 2184);
  v4 = *(_QWORD *)(v0 + 2176);
  v5 = *(_QWORD *)(v0 + 2168);
  v6 = *(_BYTE *)(v0 + 2592) & 1;
  v7 = *(_BYTE *)(v0 + 2593) & 1;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1944));
  sub_1001D8FEC(v8);
  v9 = v38;
  v11 = sub_100232978(v1, v38, v6, v2, (_QWORD *)(v0 + 1336), v5, v7, v10);
  *(_QWORD *)(v0 + 2560) = v11;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v2);
  swift_retain(v4);
  swift_retain(v3);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1576));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1576), *(_QWORD *)(v0 + 1584), *(_QWORD *)(v0 + 1592), *(_QWORD *)(v0 + 1600));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRetain(v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v15 = 134217984;
    *(_QWORD *)(v0 + 2040) = *(_QWORD *)(v11 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2040, v0 + 2048, v15 + 4);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "VisibleAttachmentsQuery: found %ld matching attachment(s)", v15, 0xCu);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v11);
  }

  v16 = *(_QWORD *)(v0 + 2184);
  v17 = *(_QWORD *)(v0 + 2176);
  (*(void (**)(_QWORD, _QWORD))(v0 + 2512))(*(_QWORD *)(v0 + 2224), *(_QWORD *)(v0 + 2192));
  swift_retain(v17);
  swift_retain(v16);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1608));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1608), *(_QWORD *)(v0 + 1616), *(_QWORD *)(v0 + 1624), *(_QWORD *)(v0 + 1632));
  swift_release(v17);
  swift_release(v16);
  v18 = swift_bridgeObjectRetain_n(v11, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(void (**)(uint64_t, uint64_t))(v0 + 2512);
  if (v21)
  {
    v23 = *(_QWORD *)(v0 + 2264);
    v35 = *(_QWORD *)(v0 + 2192);
    v36 = *(_QWORD *)(v0 + 2216);
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v38 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(v11);
    v27 = Array.description.getter(v26, v23);
    v29 = v28;
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(v0 + 1992) = sub_1003A4190(v27, v29, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1992, v0 + 2000, v24 + 4);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "VisibleAttachmentsQuery: matching note IDs: %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    v22(v36, v35);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 2216);
    v31 = *(_QWORD *)(v0 + 2192);
    swift_bridgeObjectRelease_n(v11, 2);

    v22(v30, v31);
  }
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1800));
  v32 = *(_QWORD *)(v0 + 1800);
  *(_QWORD *)(v0 + 2568) = v32;
  v37 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1005D0208 + dword_1005D0208);
  v33 = (_QWORD *)swift_task_alloc(unk_1005D020C);
  *(_QWORD *)(v0 + 2576) = v33;
  *v33 = v0;
  v33[1] = sub_100230D90;
  return v37(v11, v32, 1);
}

uint64_t sub_100230D90(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v3 = *v2;
  *(_QWORD *)(v3 + 1736) = v2;
  *(_QWORD *)(v3 + 1744) = a1;
  *(_QWORD *)(v3 + 1752) = v1;
  v4 = *(_QWORD *)(v3 + 2576);
  *(_QWORD *)(v3 + 2584) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {

    return swift_task_switch(sub_100231870, 0, 0);
  }
  else
  {
    v6 = v3 + 16;
    v7 = v3 + 1944;
    v8 = v3 + 1808;
    v9 = *(void **)(v3 + 2568);
    v10 = *(_QWORD *)(v3 + 2560);

    swift_bridgeObjectRelease(v10);
    return swift_asyncLet_finish(v6, v7, sub_100230E4C, v8);
  }
}

uint64_t sub_100230E4C()
{
  return swift_task_switch(sub_100230E60, 0, 0);
}

uint64_t sub_100230E60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2528));
  return swift_asyncLet_finish(v0 + 656, v0 + 2096, sub_100230EB4, v0 + 1856);
}

uint64_t sub_100230EB4()
{
  return swift_task_switch(sub_100230EC8, 0, 0);
}

uint64_t sub_100230EC8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 2520);
  v2 = *(void **)(v0 + 2504);
  v3 = *(void **)(v0 + 2496);
  v4 = *(void **)(v0 + 2368);
  v5 = *(void **)(v0 + 2360);
  v6 = *(void **)(v0 + 2352);
  v7 = *(void **)(v0 + 2344);
  v8 = *(void **)(v0 + 2336);

  swift_release(v1);
  v21 = *(_QWORD *)(v0 + 1744);
  v9 = *(_QWORD *)(v0 + 2528);
  v10 = *(_QWORD *)(v0 + 2520);
  v11 = *(_QWORD *)(v0 + 2320);
  v12 = *(_QWORD *)(v0 + 2296);
  v13 = *(_QWORD *)(v0 + 2288);
  v14 = *(_QWORD *)(v0 + 2280);
  v15 = *(_QWORD *)(v0 + 2256);
  v16 = *(_QWORD *)(v0 + 2232);
  v17 = *(_QWORD *)(v0 + 2224);
  v19 = *(_QWORD *)(v0 + 2216);
  v20 = *(_QWORD *)(v0 + 2208);
  sub_1000153C0((_QWORD *)(v0 + 1336));
  sub_100012C50((uint64_t)&unk_1005D52A8, v10);
  sub_100012C50((uint64_t)&unk_1005D52B8, v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
}

uint64_t sub_100231014()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 2368);
  v2 = *(void **)(v0 + 2360);
  v3 = *(void **)(v0 + 2352);
  v4 = *(void **)(v0 + 2344);
  v5 = *(void **)(v0 + 2336);

  sub_1000153C0((_QWORD *)(v0 + 1336));
  v6 = *(_QWORD *)(v0 + 2296);
  v7 = *(_QWORD *)(v0 + 2288);
  v8 = *(_QWORD *)(v0 + 2280);
  v9 = *(_QWORD *)(v0 + 2256);
  v10 = *(_QWORD *)(v0 + 2232);
  v11 = *(_QWORD *)(v0 + 2224);
  v12 = *(_QWORD *)(v0 + 2216);
  v13 = *(_QWORD *)(v0 + 2208);
  swift_task_dealloc(*(_QWORD *)(v0 + 2320));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100231104()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 2456);
  v2 = *(void **)(v0 + 2368);
  v3 = *(void **)(v0 + 2360);
  v4 = *(void **)(v0 + 2352);
  v5 = *(void **)(v0 + 2344);
  v6 = *(void **)(v0 + 2336);

  swift_bridgeObjectRelease(v1);
  sub_1000153C0((_QWORD *)(v0 + 1336));
  v7 = *(_QWORD *)(v0 + 2296);
  v8 = *(_QWORD *)(v0 + 2288);
  v9 = *(_QWORD *)(v0 + 2280);
  v10 = *(_QWORD *)(v0 + 2256);
  v11 = *(_QWORD *)(v0 + 2232);
  v12 = *(_QWORD *)(v0 + 2224);
  v13 = *(_QWORD *)(v0 + 2216);
  v14 = *(_QWORD *)(v0 + 2208);
  swift_task_dealloc(*(_QWORD *)(v0 + 2320));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100231200()
{
  return swift_task_switch(sub_100231214, 0, 0);
}

uint64_t sub_100231214()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2528));
  return swift_asyncLet_finish(v0 + 656, v0 + 2096, sub_100231268, v0 + 1296);
}

uint64_t sub_100231268()
{
  return swift_task_switch(sub_10023127C, 0, 0);
}

uint64_t sub_10023127C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 2536);
  v2 = *(_QWORD *)(v0 + 2184);
  v3 = *(_QWORD *)(v0 + 2176);
  swift_release(*(_QWORD *)(v0 + 2520));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1416));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1424), *(_QWORD *)(v0 + 1432), *(_QWORD *)(v0 + 1440));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 1896) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1896, v0 + 1904, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "VisibleAttachmentsQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v12 = v5;
  v35 = *(_QWORD *)(v0 + 2528);
  v34 = *(_QWORD *)(v0 + 2520);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 2512);
  v32 = *(void **)(v0 + 2504);
  v33 = *(void **)(v0 + 2496);
  v14 = *(void **)(v0 + 2368);
  v15 = *(void **)(v0 + 2360);
  v16 = *(void **)(v0 + 2352);
  v17 = *(void **)(v0 + 2344);
  v18 = *(void **)(v0 + 2336);
  v19 = *(void **)(v0 + 2328);
  v20 = *(_QWORD *)(v0 + 2208);
  v21 = *(_QWORD *)(v0 + 2192);

  v22 = v13(v20, v21);
  swift_willThrow(v22);

  sub_1000153C0((_QWORD *)(v0 + 1336));
  swift_release(v34);
  swift_release(v35);
  v23 = *(_QWORD *)(v0 + 2296);
  v24 = *(_QWORD *)(v0 + 2288);
  v25 = *(_QWORD *)(v0 + 2280);
  v26 = *(_QWORD *)(v0 + 2256);
  v27 = *(_QWORD *)(v0 + 2232);
  v28 = *(_QWORD *)(v0 + 2224);
  v29 = *(_QWORD *)(v0 + 2216);
  v30 = *(_QWORD *)(v0 + 2208);
  swift_task_dealloc(*(_QWORD *)(v0 + 2320));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100231538()
{
  return swift_task_switch(sub_10023154C, 0, 0);
}

uint64_t sub_10023154C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2528));
  return swift_asyncLet_finish(v0 + 656, v0 + 2096, sub_1002315A0, v0 + 1904);
}

uint64_t sub_1002315A0()
{
  return swift_task_switch(sub_1002315B4, 0, 0);
}

uint64_t sub_1002315B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 2552);
  v2 = *(_QWORD *)(v0 + 2184);
  v3 = *(_QWORD *)(v0 + 2176);
  swift_release(*(_QWORD *)(v0 + 2520));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1416));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1424), *(_QWORD *)(v0 + 1432), *(_QWORD *)(v0 + 1440));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 1896) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1896, v0 + 1904, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "VisibleAttachmentsQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v12 = v5;
  v35 = *(_QWORD *)(v0 + 2528);
  v34 = *(_QWORD *)(v0 + 2520);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 2512);
  v32 = *(void **)(v0 + 2504);
  v33 = *(void **)(v0 + 2496);
  v14 = *(void **)(v0 + 2368);
  v15 = *(void **)(v0 + 2360);
  v16 = *(void **)(v0 + 2352);
  v17 = *(void **)(v0 + 2344);
  v18 = *(void **)(v0 + 2336);
  v19 = *(void **)(v0 + 2328);
  v20 = *(_QWORD *)(v0 + 2208);
  v21 = *(_QWORD *)(v0 + 2192);

  v22 = v13(v20, v21);
  swift_willThrow(v22);

  sub_1000153C0((_QWORD *)(v0 + 1336));
  swift_release(v34);
  swift_release(v35);
  v23 = *(_QWORD *)(v0 + 2296);
  v24 = *(_QWORD *)(v0 + 2288);
  v25 = *(_QWORD *)(v0 + 2280);
  v26 = *(_QWORD *)(v0 + 2256);
  v27 = *(_QWORD *)(v0 + 2232);
  v28 = *(_QWORD *)(v0 + 2224);
  v29 = *(_QWORD *)(v0 + 2216);
  v30 = *(_QWORD *)(v0 + 2208);
  swift_task_dealloc(*(_QWORD *)(v0 + 2320));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100231870()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2560));
  return swift_asyncLet_finish(v0 + 16, v0 + 1944, sub_1002318C4, v0 + 2048);
}

uint64_t sub_1002318C4()
{
  return swift_task_switch(sub_1002318D8, 0, 0);
}

uint64_t sub_1002318D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2528));
  return swift_asyncLet_finish(v0 + 656, v0 + 2096, sub_10023192C, v0 + 1376);
}

uint64_t sub_10023192C()
{
  return swift_task_switch(sub_100231940, 0, 0);
}

uint64_t sub_100231940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 2584);
  v2 = *(_QWORD *)(v0 + 2184);
  v3 = *(_QWORD *)(v0 + 2176);
  swift_release(*(_QWORD *)(v0 + 2520));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1416));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1424), *(_QWORD *)(v0 + 1432), *(_QWORD *)(v0 + 1440));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 1896) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1896, v0 + 1904, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "VisibleAttachmentsQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v12 = v5;
  v35 = *(_QWORD *)(v0 + 2528);
  v34 = *(_QWORD *)(v0 + 2520);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 2512);
  v32 = *(void **)(v0 + 2504);
  v33 = *(void **)(v0 + 2496);
  v14 = *(void **)(v0 + 2368);
  v15 = *(void **)(v0 + 2360);
  v16 = *(void **)(v0 + 2352);
  v17 = *(void **)(v0 + 2344);
  v18 = *(void **)(v0 + 2336);
  v19 = *(void **)(v0 + 2328);
  v20 = *(_QWORD *)(v0 + 2208);
  v21 = *(_QWORD *)(v0 + 2192);

  v22 = v13(v20, v21);
  swift_willThrow(v22);

  sub_1000153C0((_QWORD *)(v0 + 1336));
  swift_release(v34);
  swift_release(v35);
  v23 = *(_QWORD *)(v0 + 2296);
  v24 = *(_QWORD *)(v0 + 2288);
  v25 = *(_QWORD *)(v0 + 2280);
  v26 = *(_QWORD *)(v0 + 2256);
  v27 = *(_QWORD *)(v0 + 2232);
  v28 = *(_QWORD *)(v0 + 2224);
  v29 = *(_QWORD *)(v0 + 2216);
  v30 = *(_QWORD *)(v0 + 2208);
  swift_task_dealloc(*(_QWORD *)(v0 + 2320));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100231BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v3;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(v3 + 16);
  return swift_task_switch(sub_100231C28, 0, 0);
}

uint64_t sub_100231C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = sub_100012E18(&qword_1005D5278);
  v4 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
  *(_QWORD *)(v0 + 56) = v9;
  *(_OWORD *)(v9 + 16) = xmmword_100451C20;
  v10 = (uint64_t *)(v9 + v8);
  KeyPath = swift_getKeyPath(&unk_10045CBE8, v11);
  v14 = swift_getKeyPath(&unk_10045CC10, v13);
  *v10 = KeyPath;
  v10[1] = v14;
  v10[2] = v2;
  v10[3] = v1;
  swift_storeEnumTagMultiPayload(v10, v4, 4);
  v15 = dword_1005D5284;
  swift_bridgeObjectRetain(v1);
  v16 = (_QWORD *)swift_task_alloc(v15);
  *(_QWORD *)(v0 + 64) = v16;
  *v16 = v0;
  v16[1] = sub_100231D38;
  return VisibleAttachmentsQuery.entities(matching:mode:sortedBy:limit:)(v9, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 1, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 80));
}

uint64_t sub_100231D38(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 64);
  v5 = *v2;
  *(_QWORD *)(v5 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100231DC8, 0, 0);
  v7 = *(_QWORD **)(v5 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
  *v7 = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100231DC8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100231DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100012E18(&qword_1005D52F0);
  sub_10012B334(v0, static VisibleAttachmentsQuery.sortingOptions);
  sub_10012A0B0(v0, (uint64_t)static VisibleAttachmentsQuery.sortingOptions);
  v1 = type metadata accessor for AttachmentEntity(0);
  v2 = sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
  return EntityQuerySortingOptions.init(content:)(sub_100231E88, 0, v1, v2);
}

uint64_t sub_100231E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v0 = sub_100012E18((uint64_t *)&unk_1005D5550);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v19 - v5;
  KeyPath = swift_getKeyPath(&unk_10045CF38, v7);
  v9 = sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
  v10 = sub_100016638(&qword_1005D3F48, (uint64_t *)&unk_1005CEEB0, (uint64_t)&protocol conformance descriptor for EntityProperty<A>);
  EntityQuerySortableByProperty.init<A>(_:)(KeyPath, v9, v10);
  v11 = type metadata accessor for AttachmentEntity(0);
  static EntityQuerySortingOptionsBuilder.buildExpression(_:)(v4);
  v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v13 = sub_100012E18(&qword_1005D5560);
  v14 = *(unsigned __int8 *)(v1 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v13, v15 + *(_QWORD *)(v1 + 72), v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100451C20;
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))(v16 + v15, v6, v0);
  v17 = static EntityQuerySortingOptionsBuilder.buildBlock(_:)(v16, v11, v9);
  swift_bridgeObjectRelease(v16);
  v12(v6, v0);
  return v17;
}

uint64_t VisibleAttachmentsQuery.sortingOptions.unsafeMutableAddressor()
{
  return sub_1001E412C(&qword_1005CEB38, &qword_1005D52F0, (uint64_t)static VisibleAttachmentsQuery.sortingOptions, (uint64_t)sub_100231DFC);
}

uint64_t static VisibleAttachmentsQuery.sortingOptions.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4194(&qword_1005CEB38, &qword_1005D52F0, (uint64_t)static VisibleAttachmentsQuery.sortingOptions, (uint64_t)sub_100231DFC, a1);
}

uint64_t sub_100232064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100012E18((uint64_t *)&unk_1005D52F8);
  sub_10012B334(v0, static VisibleAttachmentsQuery.properties);
  sub_10012A0B0(v0, (uint64_t)static VisibleAttachmentsQuery.properties);
  v1 = type metadata accessor for AttachmentEntity(0);
  v2 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  v3 = sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
  return EntityQueryProperties.init(properties:)(sub_10023210C, 0, v1, v2, v3);
}

uint64_t sub_10023210C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012E18(&qword_1005D5530);
  KeyPath = swift_getKeyPath(&unk_10045CF38, v0);
  v2 = EntityQueryProperty.__allocating_init<>(_:comparators:)(KeyPath, sub_100232228, 0);
  v3 = sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
  v4 = static EntityQueryPropertiesBuilder.buildExpression(_:)(v2, v3);
  swift_release(v2);
  v5 = sub_100012E18(&qword_1005CF6F0);
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100456F30;
  *(_QWORD *)(v6 + 32) = v4;
  v11 = v6;
  specialized Array._endMutation()(v6);
  v7 = type metadata accessor for AttachmentEntity(0);
  v8 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  swift_retain(v4);
  v9 = static EntityQueryPropertiesBuilder.buildBlock(_:)(v11, v7, v8, v3);
  swift_bridgeObjectRelease(v11);
  swift_release(v4);
  return v9;
}

uint64_t sub_100232228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005D5538);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005D5540);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = ContainsComparator.init<>(mappingTransform:)(sub_1002323D4, 0);
  v6 = type metadata accessor for AttachmentEntity(0);
  v7 = sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
  static EntityQueryComparatorsBuilder.buildExpression(_:)(v5, v6, v6, v7, v7);
  swift_release(v5);
  v8 = sub_100012E18(&qword_1005D5548);
  v9 = *(unsigned __int8 *)(v1 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v8, v10 + *(_QWORD *)(v1 + 72), v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100451C20;
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))(v11 + v10, v3, v0);
  v12 = sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v13 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  v14 = sub_1001B2FAC();
  v15 = static EntityQueryComparatorsBuilder.buildBlock(_:)(v11, v6, v6, v12, &type metadata for String, v13, v7, v7, v14);
  swift_bridgeObjectRelease(v11);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v15;
}

double sub_1002323D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  KeyPath = swift_getKeyPath(&unk_10045CBE8, a2);
  v8 = swift_getKeyPath(&unk_10045CC10, v7);
  *a3 = KeyPath;
  a3[1] = v8;
  a3[2] = a1;
  a3[3] = a2;
  v9 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  swift_storeEnumTagMultiPayload(a3, v9, 4);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a2).n128_u64[0];
  return result;
}

uint64_t VisibleAttachmentsQuery.properties.unsafeMutableAddressor()
{
  return sub_1001E412C(&qword_1005CEB40, (uint64_t *)&unk_1005D52F8, (uint64_t)static VisibleAttachmentsQuery.properties, (uint64_t)sub_100232064);
}

uint64_t static VisibleAttachmentsQuery.properties.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4194(&qword_1005CEB40, (uint64_t *)&unk_1005D52F8, (uint64_t)static VisibleAttachmentsQuery.properties, (uint64_t)sub_100232064, a1);
}

uint64_t sub_100232488@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v4 = type metadata accessor for String.StandardComparator(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = sub_100012E18((uint64_t *)&unk_1005D5600);
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  sub_1000163BC(0, &qword_1005D39A0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_10045CFE0, v15);
  static String.StandardComparator.localizedStandard.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  SortDescriptor.init<A>(_:comparator:order:)(KeyPath, v8, v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v17 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  result = NSSortDescriptor.init<A>(_:)(v13, v17);
  *a2 = result;
  return result;
}

uint64_t sub_1002325FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100232618, 0, 0);
}

uint64_t sub_100232618()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = (void *)v0[4];
  v1 = (void *)v0[5];
  v3 = (void *)v0[3];
  v4 = (_QWORD *)swift_allocObject(&unk_100560130, 40, 7);
  v0[6] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v6 = v3;
  v7 = v2;
  v8 = v1;
  v9 = (_QWORD *)swift_task_alloc(v5);
  v0[7] = v9;
  v10 = sub_100012E18((uint64_t *)&unk_1005D3DB0);
  *v9 = v0;
  v9[1] = sub_1002326D0;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_100236AAC, v4, v10);
}

uint64_t sub_1002326D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100232744, 0, 0);
  swift_release(*(_QWORD *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100232744()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100232778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100232794, 0, 0);
}

uint64_t sub_100232794()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = (void *)v0[4];
  v1 = (void *)v0[5];
  v3 = (void *)v0[3];
  v4 = (_QWORD *)swift_allocObject(&unk_100560108, 40, 7);
  v0[6] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v6 = v3;
  v7 = v2;
  v8 = v1;
  v9 = (_QWORD *)swift_task_alloc(v5);
  v0[7] = v9;
  v10 = sub_100012E18((uint64_t *)&unk_1005D3DB0);
  *v9 = v0;
  v9[1] = sub_10023284C;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_100236A48, v4, v10);
}

uint64_t sub_10023284C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100236C7C, 0, 0);
  swift_release(*(_QWORD *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1002328C0(uint64_t a1@<X1>, void *a2@<X2>, unint64_t *a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;

  v11 = sub_1000163BC(0, a3, a4);
  v12 = NSManagedObjectContext.fetch<A>(_:)(a1, v11);
  if (!v5)
  {
    v13 = v12;
    v14 = a2;
    v15 = sub_100234AB8(v13, v14, a3, a4);
    swift_bridgeObjectRelease(v13);

    *a5 = v15;
  }
}

uint64_t sub_100232978(char a1, uint64_t a2, char a3, uint64_t a4, _QWORD *a5, uint64_t a6, char a7, __n128 a8)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v13 = a3 & 1;
  if ((a1 & 1) != 0)
  {
    a8 = swift_bridgeObjectRetain(a2);
    v14 = (_QWORD *)a2;
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((static EntityQueryComparatorMode.== infix(_:_:)(v13, 1, a8) & 1) != 0 && a4)
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    sub_1001D8FEC(a2);
    v15 = sub_10020BFD0(a4);
    swift_bridgeObjectRelease(a4);
    v14 = sub_10016C06C(v15);
    swift_bridgeObjectRelease(v15);
  }
  v16 = a5[3];
  v17 = a5[4];
  v18 = sub_10012D19C(a5, v16);
  v19 = sub_100012E18((uint64_t *)&unk_1005D3DB0);
  v20 = sub_100016638(&qword_1005D52D0, (uint64_t *)&unk_1005D3DB0, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = sub_10022C1B8((uint64_t)v18, a6, a7 & 1, v19, v16, v20, v17);
  swift_bridgeObjectRelease(v14);
  v22 = sub_10022AAD0((uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  return v22;
}

uint64_t sub_100232AE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4A30(&qword_1005CEB40, (uint64_t *)&unk_1005D52F8, (uint64_t)static VisibleAttachmentsQuery.properties, (uint64_t)sub_100232064, a1);
}

uint64_t sub_100232B08@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4A30(&qword_1005CEB38, &qword_1005D52F0, (uint64_t)static VisibleAttachmentsQuery.sortingOptions, (uint64_t)sub_100231DFC, a1);
}

uint64_t sub_100232B2C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  _QWORD *v16;

  *(_QWORD *)(v7 + 16) = a1;
  v11 = *(_QWORD *)v6;
  v12 = *(_QWORD *)(v6 + 8);
  v13 = *(_BYTE *)(v6 + 16);
  v14 = a3 & 1;
  v15 = a6 & 1;
  v16 = (_QWORD *)swift_task_alloc(dword_1005D5284);
  *(_QWORD *)(v7 + 24) = v16;
  *v16 = v7;
  v16[1] = sub_100136FB0;
  return VisibleAttachmentsQuery.entities(matching:mode:sortedBy:limit:)(a2, v14, a4, a5, v15, v11, v12, v13);
}

void sub_100232BC8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[22];

  v5 = type metadata accessor for ICQueryType(0);
  v20[4] = *(_QWORD *)(v5 - 8);
  v20[5] = v5;
  __chkstk_darwin(v5);
  v20[3] = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FolderEntity(0);
  __chkstk_darwin(v7);
  v20[2] = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005D1080);
  v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  v20[1] = (char *)v20 - v11;
  v12 = sub_100012E18(&qword_1005D5618);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t)&v15[*(int *)(v13 + 48)];
  v17 = *(int *)(v13 + 64);
  sub_100145220(v2, (uint64_t)v15, type metadata accessor for VisibleAttachmentsQuery.Comparator);
  v20[6] = a1;
  v20[7] = v16;
  sub_100012CE8(a1, v16, &qword_1005D1080);
  v15[v17] = a2;
  v18 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  v19 = (char *)&loc_100232D54 + *((int *)qword_100233A60 + swift_getEnumCaseMultiPayload(v15, v18));
  __asm { BR              X10 }
}

uint64_t sub_100232D64()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v0, 1, v3) == 1)
  {
    v11 = 0;
    goto LABEL_5;
  }
  if ((v2 & 1) == 0)
  {
    v14 = type metadata accessor for ManagedEntityContextType(0);
    v15 = *(_QWORD *)(v14 - 8);
    v12 = *(_QWORD *)(v4 - 200);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1)
    {
      v16 = *(_QWORD *)(v4 - 248);
      sub_100012CE8(v12, v16, &qword_1005D1080);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 88))(v16, v14) == enum case for ManagedEntityContextType.html(_:))
      {
        v17 = *(_QWORD *)(v4 - 240);
        sub_1002353B8(v0, v17);
        sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
        v18 = sub_100012E18((uint64_t *)&unk_1005D5630);
        v19 = swift_allocObject(v18, 72, 7);
        *(_OWORD *)(v19 + 16) = xmmword_100451C20;
        v20 = FolderID.managedIdentifier.getter();
        v22 = v21;
        *(_QWORD *)(v19 + 56) = &type metadata for String;
        *(_QWORD *)(v19 + 64) = sub_1001797EC();
        *(_QWORD *)(v19 + 32) = v20;
        *(_QWORD *)(v19 + 40) = v22;
        v23 = 0xD00000000000001ELL;
        v24 = "store.externalIdentifier == %@";
LABEL_12:
        v11 = NSPredicate.init(format:_:)(v23, (unint64_t)(v24 - 32) | 0x8000000000000000, v19);
        sub_100145264(v17, type metadata accessor for FolderEntity);
        goto LABEL_6;
      }
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
    }
    v17 = *(_QWORD *)(v4 - 240);
    sub_1002353B8(v0, v17);
    sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
    v25 = sub_100012E18((uint64_t *)&unk_1005D5630);
    v19 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100451C20;
    v26 = FolderID.managedIdentifier.getter();
    v28 = v27;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_1001797EC();
    *(_QWORD *)(v19 + 32) = v26;
    *(_QWORD *)(v19 + 40) = v28;
    v23 = 0xD000000000000017;
    v24 = "folder.identifier == %@";
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v4 - 240);
  sub_1002353B8(v0, v5);
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  v6 = sub_100012E18((uint64_t *)&unk_1005D5630);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100451C20;
  v8 = FolderID.managedIdentifier.getter();
  v10 = v9;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_1001797EC();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  v11 = NSPredicate.init(format:_:)(0xD00000000000001DLL, 0x80000001004825B0, v7);
  sub_100145264(v5, type metadata accessor for FolderEntity);
LABEL_5:
  v12 = *(_QWORD *)(v4 - 200);
LABEL_6:
  sub_100012DDC(v12, &qword_1005D1080);
  return v11;
}

id sub_100233A90(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  NSArray v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;

  v75 = a4;
  v73 = a2;
  v74 = a1;
  v81 = type metadata accessor for ICQueryType(0);
  v5 = *(_QWORD *)(v81 - 8);
  v6 = __chkstk_darwin(v81);
  v72 = (uint64_t *)((char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v80 = (char *)&v70 - v9;
  __chkstk_darwin(v8);
  v79 = (char *)&v70 - v10;
  v78 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  v71 = *(_QWORD *)(v78 - 8);
  v11 = __chkstk_darwin(v78);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v70 - v14;
  v16 = type metadata accessor for ManagedEntityContextType(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v70 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100012E18((uint64_t *)&unk_1005D4060);
  __chkstk_darwin(v19);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100012E18(&qword_1005D1080);
  v23 = __chkstk_darwin(v22);
  v77 = (uint64_t)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v70 - v25;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))((char *)&v70 - v25, enum case for ManagedEntityContextType.html(_:), v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v26, 0, 1, v16);
  v27 = (uint64_t)&v21[*(int *)(v19 + 48)];
  v76 = (char *)a3;
  sub_100012CE8(a3, (uint64_t)v21, &qword_1005D1080);
  sub_100012CE8((uint64_t)v26, v27, &qword_1005D1080);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v28((uint64_t)v21, 1, v16) == 1)
  {
    sub_100012DDC((uint64_t)v26, &qword_1005D1080);
    if (v28(v27, 1, v16) == 1)
    {
      v29 = sub_100012DDC((uint64_t)v21, &qword_1005D1080);
LABEL_26:
      __chkstk_darwin(v29);
      v46 = (uint64_t)v76;
      *(&v70 - 2) = v76;
      *((_BYTE *)&v70 - 8) = v75 & 1;
      v60 = v74;
      v61 = sub_100349734((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))sub_100236B04, (uint64_t)(&v70 - 4), v74);
      sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
      v62.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v63 = (void *)objc_opt_self(NSCompoundPredicate);
      if ((v73 & 1) != 0)
        v64 = objc_msgSend(v63, "orPredicateWithSubpredicates:", v62.super.isa);
      else
        v64 = objc_msgSend(v63, "andPredicateWithSubpredicates:", v62.super.isa);
      v67 = v64;
      v68 = v60;
      goto LABEL_35;
    }
    goto LABEL_6;
  }
  v30 = v77;
  sub_100012CE8((uint64_t)v21, v77, &qword_1005D1080);
  if (v28(v27, 1, v16) == 1)
  {
    sub_100012DDC((uint64_t)v26, &qword_1005D1080);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v30, v16);
LABEL_6:
    sub_100012DDC((uint64_t)v21, (uint64_t *)&unk_1005D4060);
    goto LABEL_7;
  }
  v56 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v70, v27, v16);
  v57 = sub_100019C6C(&qword_1005D5610, (uint64_t (*)(uint64_t))&type metadata accessor for ManagedEntityContextType, (uint64_t)&protocol conformance descriptor for ManagedEntityContextType);
  v58 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v56, v16, v57);
  v59 = *(void (**)(char *, uint64_t))(v17 + 8);
  v59(v56, v16);
  sub_100012DDC((uint64_t)v26, &qword_1005D1080);
  v59((char *)v30, v16);
  v29 = sub_100012DDC((uint64_t)v21, &qword_1005D1080);
  if ((v58 & 1) != 0)
    goto LABEL_26;
LABEL_7:
  v31 = (char *)_swiftEmptyArrayStorage;
  v82 = (unint64_t)_swiftEmptyArrayStorage;
  v32 = v74;
  v33 = *(_QWORD *)(v74 + 16);
  if (v33)
  {
    v34 = v74 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
    v77 = *(_QWORD *)(v71 + 72);
    swift_bridgeObjectRetain(v74);
    do
    {
      sub_100145220(v34, (uint64_t)v15, type metadata accessor for VisibleAttachmentsQuery.Comparator);
      sub_100145220((uint64_t)v15, (uint64_t)v13, type metadata accessor for VisibleAttachmentsQuery.Comparator);
      if (swift_getEnumCaseMultiPayload(v13, v78) == 1)
      {
        v36 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
        v37 = v79;
        v38 = v81;
        v36(v79, v13, v81);
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v80, v37, v38);
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
          v31 = (char *)sub_10016ACCC(0, *((_QWORD *)v31 + 2) + 1, 1, (unint64_t)v31);
        v40 = *((_QWORD *)v31 + 2);
        v39 = *((_QWORD *)v31 + 3);
        if (v40 >= v39 >> 1)
          v31 = (char *)sub_10016ACCC(v39 > 1, v40 + 1, 1, (unint64_t)v31);
        *((_QWORD *)v31 + 2) = v40 + 1;
        v35 = v81;
        v36(&v31[((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v40], v80, v81);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v79, v35);
      }
      else
      {
        sub_100145264((uint64_t)v13, type metadata accessor for VisibleAttachmentsQuery.Comparator);
        sub_100232BC8((uint64_t)v76, v75 & 1);
        if (v41)
        {
          v42 = v41;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          v44 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v43 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v44 >= v43 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
          specialized Array._endMutation()(v45);

        }
      }
      sub_100145264((uint64_t)v15, type metadata accessor for VisibleAttachmentsQuery.Comparator);
      v34 += v77;
      --v33;
    }
    while (v33);
    v32 = v74;
    swift_bridgeObjectRelease(v74);
  }
  v46 = (uint64_t)v76;
  if (*((_QWORD *)v31 + 2))
  {
    v47 = swift_allocObject(&unk_100560158, 24, 7);
    *(_QWORD *)(v47 + 16) = v31;
    v48 = v72;
    *v72 = v47;
    v49 = v81;
    v50 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v48, enum case for ICQueryType.and(_:), v81);
    v51 = ICQueryType.predicate.getter(v50);
    v52 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v48, v49);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
    v54 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v53 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v54 >= v53 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
    v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
    specialized Array._endMutation()(v55);
  }
  else
  {
    swift_bridgeObjectRelease(v31);
  }
  v61 = (_QWORD *)v82;
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  swift_bridgeObjectRetain(v61);
  v62.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v61);
  v65 = (void *)objc_opt_self(NSCompoundPredicate);
  if ((v73 & 1) != 0)
    v66 = objc_msgSend(v65, "orPredicateWithSubpredicates:", v62.super.isa);
  else
    v66 = objc_msgSend(v65, "andPredicateWithSubpredicates:", v62.super.isa);
  v67 = v66;
  v68 = v32;
LABEL_35:
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v61);

  sub_100012DDC(v46, &qword_1005D1080);
  return v67;
}

void VisibleAttachmentsQuery.Comparator.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  _QWORD v11[22];

  v1 = type metadata accessor for ICQueryType(0);
  v11[0] = *(_QWORD *)(v1 - 8);
  v11[1] = v1;
  __chkstk_darwin(v1);
  v2 = type metadata accessor for FolderEntity(0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = sub_100012E18(&qword_1005D1EB0);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for VisibleAttachmentsQuery.Comparator(0);
  __chkstk_darwin(v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100145220(v0, (uint64_t)v8, v9);
  v10 = (char *)sub_1002343B0 + 4 * word_10045CB90[swift_getEnumCaseMultiPayload(v8, v6)];
  __asm { BR              X10 }
}

uint64_t sub_1002343B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;

  sub_100235370(v5, v3);
  sub_100012CE8(v3, v6, &qword_1005D1EB0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v0) == 1)
  {
    v8 = (void *)0xE300000000000000;
    v9 = 7104878;
  }
  else
  {
    sub_1002353B8(v6, v1);
    sub_100145220(v1, v4, type metadata accessor for FolderEntity);
    v9 = String.init<A>(describing:)(v4, v0);
    v8 = v11;
    sub_100145264(v1, type metadata accessor for FolderEntity);
  }
  strcpy((char *)(v7 - 128), "containedIn(");
  *(_BYTE *)(v7 - 115) = 0;
  *(_WORD *)(v7 - 114) = -5120;
  v12._countAndFlagsBits = v9;
  v12._object = v8;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v8);
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = *(_QWORD *)(v7 - 128);
  sub_100012DDC(v3, &qword_1005D1EB0);
  return v14;
}

BOOL sub_100234A8C(unsigned __int8 *a1)
{
  return *a1 != 2;
}

unsigned __int8 *sub_100234A9C@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v2;

  v2 = *result;
  if (v2 == 2)
    __break(1u);
  else
    *a2 = v2 & 1;
  return result;
}

_QWORD *sub_100234AB8(uint64_t a1, void *a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  id v25;
  unsigned __int8 v26;
  uint64_t v27;
  objc_class *v28;
  id v29;
  id v30;
  _BYTE *v31;
  char *v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  id v39;
  unsigned __int8 v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  _QWORD v48[2];
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  unint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  objc_super v58;
  _QWORD v59[3];
  uint64_t v60;
  _QWORD v61[5];
  unint64_t v62;

  v55 = a3;
  v56 = a4;
  v5 = v4;
  v54 = a2;
  v7 = type metadata accessor for AttachmentID(0);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  __chkstk_darwin(v7);
  v49 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v47))
  {
    v48[1] = v5;
    v5 = a1 & 0xC000000000000001;
    v10 = 4;
    v11 = &selRef_info;
    v52 = a1 & 0xC000000000000001;
    v53 = v9;
    while (1)
    {
      v12 = v5 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a1) : *(id *)(a1 + 8 * v10);
      v13 = v12;
      v14 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      if (objc_msgSend(v12, v11[358]))
      {

      }
      else
      {
        v15 = sub_1000163BC(0, v55, v56);
        v61[3] = v15;
        v61[0] = v13;
        sub_100012CE8((uint64_t)v61, (uint64_t)v59, &qword_1005CF190);
        v16 = v60;
        if (v60)
        {
          v17 = sub_10012D19C(v59, v60);
          v57 = v15;
          v18 = a1;
          v19 = *(_QWORD *)(v16 - 8);
          __chkstk_darwin(v17);
          v21 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v19 + 16))(v21);
          v22 = v13;
          v23 = _bridgeAnythingToObjectiveC<A>(_:)(v21, v16);
          v24 = *(void (**)(char *, uint64_t))(v19 + 8);
          a1 = v18;
          v24(v21, v16);
          v15 = v57;
          sub_1000153C0(v59);
        }
        else
        {
          v25 = v13;
          v23 = 0;
        }
        v26 = objc_msgSend(v54, "evaluateWithObject:", v23);
        swift_unknownObjectRelease(v23, v27);
        sub_100012DDC((uint64_t)v61, &qword_1005CF190);
        if ((v26 & 1) != 0)
        {
          v28 = (objc_class *)type metadata accessor for AttachmentSearchResult(0);
          v29 = objc_allocWithZone(v28);
          v30 = v13;
          v31 = v29;
          v32 = v49;
          ICAttachmentObject<>.entityIdentifier.getter(v15);
          (*(void (**)(_BYTE *, char *, uint64_t))(v50 + 32))(&v31[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_id], v32, v51);
          v33 = objc_msgSend(v30, "title");
          if (v33)
          {
            v34 = v33;
            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
            v37 = v36;

          }
          else
          {
            v35 = 0;
            v37 = 0xE000000000000000;
          }
          v38 = (uint64_t *)&v31[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_title];
          *v38 = v35;
          v38[1] = v37;
          v39 = objc_msgSend(v30, "objectID");
          v40 = objc_msgSend(v39, "ic_isAttachmentType");

          v31[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_isModernAttachment] = v40;
          v58.receiver = v31;
          v58.super_class = v28;
          v41 = objc_msgSendSuper2(&v58, "init");

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          v44 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v43 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v44 >= v43 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v41);
          specialized Array._endMutation()(v45);
        }
        else
        {

        }
        v5 = v52;
        v9 = v53;
        v11 = &selRef_info;
      }
      ++v10;
      if (v14 == v9)
      {
        swift_bridgeObjectRelease(a1);
        return (_QWORD *)v62;
      }
    }
    __break(1u);
LABEL_25:
    if (a1 < 0)
      v47 = a1;
    else
      v47 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t _s11MobileNotes23VisibleAttachmentsQueryVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v6 = 0xD000000000000024;
  v7 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v0 = type metadata accessor for AppDependencyManager(0);
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(v8, v1);
  sub_100012E18(&qword_1005CEE50);
  v6 = 0xD000000000000021;
  v7 = 0x8000000100476B70;
  v3 = AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(v8, v4);
  return v2;
}

uint64_t sub_100234F88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100234FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_1005D5244);
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_100145358;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch(sub_10022DB28, 0, 0);
}

uint64_t sub_10023501C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_1005D525C);
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_100130768;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch(sub_10022DBE8, 0, 0);
}

uint64_t type metadata accessor for VisibleAttachmentsQuery.Comparator(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D54E8, (uint64_t)&nominal type descriptor for VisibleAttachmentsQuery.Comparator);
}

void sub_100235098(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1001E4BAC(a1, (SEL *)&selRef_title, a2);
}

void sub_1002350B4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1001E4BAC(a1, (SEL *)&selRef_title, a2);
}

uint64_t sub_1002350D0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100235110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_1005D52A4);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100145358;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_100232618, 0, 0);
}

uint64_t sub_10023518C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_1005D52B4);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100145358;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_100232794, 0, 0);
}

uint64_t type metadata accessor for AttachmentSearchResult(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D53E8, (uint64_t)&nominal type descriptor for AttachmentSearchResult);
}

id sub_100235218(void *a1, void *a2, uint64_t a3)
{
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  id v18;
  unsigned __int8 v19;
  objc_super v21;

  ObjectType = (objc_class *)swift_getObjectType(a2);
  v7 = type metadata accessor for AttachmentID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2;
  ICAttachmentObject<>.entityIdentifier.getter(a3);
  (*(void (**)(_BYTE *, char *, uint64_t))(v8 + 32))(&v11[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_id], v10, v7);
  v12 = objc_msgSend(a1, "title");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0xE000000000000000;
  }
  v17 = (uint64_t *)&v11[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_title];
  *v17 = v14;
  v17[1] = v16;
  v18 = objc_msgSend(a1, "objectID");
  v19 = objc_msgSend(v18, "ic_isAttachmentType");

  v11[OBJC_IVAR____TtC11MobileNotesP33_F583289AB4A4398FFA2D9CF750E5A2EB22AttachmentSearchResult_isModernAttachment] = v19;
  v21.receiver = v11;
  v21.super_class = ObjectType;
  return objc_msgSendSuper2(&v21, "init");
}

uint64_t sub_100235370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D1EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002353B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FolderEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100235400()
{
  unint64_t result;

  result = qword_1005D5320;
  if (!qword_1005D5320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleAttachmentsQuery, &type metadata for VisibleAttachmentsQuery);
    atomic_store(result, (unint64_t *)&qword_1005D5320);
  }
  return result;
}

unint64_t sub_100235448()
{
  unint64_t result;

  result = qword_1005D5328[0];
  if (!qword_1005D5328[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleAttachmentsQuery, &type metadata for VisibleAttachmentsQuery);
    atomic_store(result, qword_1005D5328);
  }
  return result;
}

unint64_t sub_100235490()
{
  unint64_t result;

  result = qword_1005D5348;
  if (!qword_1005D5348)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleAttachmentsQuery, &type metadata for VisibleAttachmentsQuery);
    atomic_store(result, (unint64_t *)&qword_1005D5348);
  }
  return result;
}

uint64_t sub_1002354D4()
{
  return sub_100019C6C(&qword_1005D2BD0, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
}

unint64_t sub_100235504()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D5358;
  if (!qword_1005D5358)
  {
    v1 = sub_10001537C(qword_1005D5360);
    sub_100019C6C(&qword_1005D2BD0, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D5358);
  }
  return result;
}

uint64_t sub_100235580()
{
  return type metadata accessor for AttachmentSearchResult(0);
}

uint64_t sub_100235588(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for AttachmentID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10045CE48;
    v4[2] = &unk_10045CE60;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10023560C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for VisibleAttachmentsQuery(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t assignWithTake for VisibleAttachmentsQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for VisibleAttachmentsQuery(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VisibleAttachmentsQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisibleAttachmentsQuery()
{
  return &type metadata for VisibleAttachmentsQuery;
}

uint64_t type metadata accessor for VisibleAttachmentsQuery.ComparatorKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VisibleAttachmentsQuery.ComparatorKeyPath);
}

uint64_t initializeBufferWithCopyOfBuffer for VisibleAttachmentsQuery.Comparator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1002357EC + 4 * byte_10045CBA8[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t destroy for VisibleAttachmentsQuery.Comparator(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      v5 = (int *)type metadata accessor for FolderEntity(0);
      result = (*(uint64_t (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(a1, 1, v5);
      if (!(_DWORD)result)
      {
        v6 = type metadata accessor for FolderID(0);
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
        v7 = (char *)a1 + v5[5];
        v8 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
        swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v5[6] + 8));
        v9 = *(_QWORD *)((char *)a1 + v5[7] + 8);
        return swift_bridgeObjectRelease(v9);
      }
      return result;
    case 1:
      v10 = type metadata accessor for ICQueryType(0);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    case 2:
      v9 = *a1;
      return swift_bridgeObjectRelease(v9);
    case 3:
      v9 = a1[1];
      return swift_bridgeObjectRelease(v9);
    case 4:
      swift_release(*a1);
      swift_release(a1[1]);
      v9 = a1[3];
      return swift_bridgeObjectRelease(v9);
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      sub_1000153C0(a1);
      v4 = a1 + 5;
      goto LABEL_3;
    case 11:
      sub_1000153C0(a1);
      sub_1000153C0(a1 + 5);
      v4 = a1 + 9;
LABEL_3:
      result = sub_1000153C0(v4);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for VisibleAttachmentsQuery.Comparator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_100235DA4 + 4 * byte_10045CBC0[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

char *sub_100235DA4()
{
  char *v0;
  uint64_t v1;
  char *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v20;

  v3 = (int *)type metadata accessor for FolderEntity(0);
  v4 = *((_QWORD *)v3 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v4 + 48))(v2, 1, v3))
  {
    v5 = sub_100012E18(&qword_1005D1EB0);
    memcpy(v0, v2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FolderID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v0, v2, v6);
    v7 = v3[5];
    v8 = &v0[v7];
    v9 = &v2[v7];
    v10 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = v3[6];
    v12 = &v0[v11];
    v13 = &v2[v11];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = v3[7];
    v16 = &v0[v15];
    v17 = &v2[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v0[v3[8]] = v2[v3[8]];
    v0[v3[9]] = v2[v3[9]];
    v19 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v4 + 56);
    swift_bridgeObjectRetain(v14);
    v20 = swift_bridgeObjectRetain(v18);
    v19(v0, 0, 1, v3, v20);
  }
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t assignWithCopy for VisibleAttachmentsQuery.Comparator(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_100145264(result, type metadata accessor for VisibleAttachmentsQuery.Comparator);
    v5 = (char *)&loc_1002361FC + 4 * byte_10045CBCC[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

char *assignWithTake for VisibleAttachmentsQuery.Comparator(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_100145264((uint64_t)a1, type metadata accessor for VisibleAttachmentsQuery.Comparator);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for ICQueryType(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = a1;
      v12 = a3;
      v13 = 1;
LABEL_10:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = (int *)type metadata accessor for FolderEntity(0);
      v8 = *((_QWORD *)v7 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100012E18(&qword_1005D1EB0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v14 = type metadata accessor for FolderID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = v7[5];
        v16 = &a1[v15];
        v17 = &a2[v15];
        v18 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
        *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
        a1[v7[8]] = a2[v7[8]];
        a1[v7[9]] = a2[v7[9]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = a3;
      v13 = 0;
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_1002367DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[12];

  sub_10023689C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ICQueryType(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[3] = &unk_10045CE60;
      v6[4] = " ";
      v6[5] = &unk_10045CEF8;
      v6[6] = &unk_10045CEF8;
      v6[7] = &unk_10045CEF8;
      v6[8] = &unk_10045CEF8;
      v6[9] = &unk_10045CEF8;
      v6[10] = &unk_10045CEF8;
      v6[11] = &unk_10045CF10;
      swift_initEnumMetadataMultiPayload(a1, 256, 12, v6);
    }
  }
}

void sub_10023689C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D3C90)
  {
    v2 = type metadata accessor for FolderEntity(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D3C90);
  }
}

uint64_t sub_1002368F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for AttachmentEntity(0);
  result = EntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

const char *sub_100236930()
{
  return "contentID";
}

void sub_10023693C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1001E4BAC(a1, (SEL *)&selRef_contentID, a2);
}

void sub_100236958(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10022B8D4(a1, a2, a3, a4, (SEL *)&selRef_setContentID_);
}

unint64_t sub_100236974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D55B8;
  if (!qword_1005D55B8)
  {
    v1 = sub_10001537C(&qword_1005D5588);
    sub_1001EBBE0(&qword_1005D55C0, &qword_1005D5580, &qword_1005D55C8, &qword_1005D5578);
    sub_1001EBBE0(&qword_1005D4000, &qword_1005D3FB8, &qword_1005D4008, &qword_1005D4010);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D55B8);
  }
  return result;
}

_QWORD *sub_100236A20@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = *result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  *a2 = v3 == 0;
  return result;
}

void sub_100236A48(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1002328C0(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), &qword_1005D5238, NoteAttachmentObject_ptr, a1);
}

uint64_t sub_100236A78()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_100236AAC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1002328C0(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), &qword_1005CFAC0, ICAttachment_ptr, a1);
}

uint64_t sub_100236AE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100236B04(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_100232BC8(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
  *a1 = v3;
}

void sub_100236B48(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10022DC8C(*(_QWORD *)(v1 + 24), &qword_1005D5238, NoteAttachmentObject_ptr, a1);
}

void sub_100236B70(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10022DC8C(*(_QWORD *)(v1 + 24), &qword_1005CFAC0, ICAttachment_ptr, a1);
}

void sub_100236B98(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1001E4BAC(a1, (SEL *)&selRef_identifier, a2);
}

void sub_100236BB4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10022B8D4(a1, a2, a3, a4, (SEL *)&selRef_setIdentifier_);
}

unint64_t sub_100236BD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D5680;
  if (!qword_1005D5680)
  {
    v1 = sub_10001537C(&qword_1005D5658);
    sub_1001EBBE0(&qword_1005D5688, &qword_1005D5650, &qword_1005D5690, &qword_1005D5648);
    sub_1001EBBE0(&qword_1005D4000, &qword_1005D3FB8, &qword_1005D4008, &qword_1005D4010);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D5680);
  }
  return result;
}

void destroy for SyncingDebugSection(uint64_t a1)
{
  sub_10014B058(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s11MobileNotes19SyncingDebugSectionVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10014B014(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SyncingDebugSection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10014B014(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10014B058(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SyncingDebugSection(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10014B058(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for SyncingDebugSection()
{
  return &type metadata for SyncingDebugSection;
}

uint64_t sub_100236D94(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100505188, 1);
}

char *sub_100236DA4(void *a1)
{
  id v2;

  v2 = objc_allocWithZone((Class)_s14descr10055F441V10ControllerCMa(0));
  return sub_10020E1DC(a1);
}

uint64_t sub_100236DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _OWORD *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v70[4];
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v86[7];

  v72 = a1;
  v85 = a4;
  v71 = a3 & 1;
  v84 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v84);
  v83 = &v70[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for PlainListStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  v79 = v6;
  v80 = v7;
  __chkstk_darwin(v6);
  v9 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v73 = sub_100012E18(&qword_1005D56A0);
  v76 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v11 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v78 = sub_100012E18(&qword_1005D56A8);
  v75 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v13 = &v70[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v74 = sub_100012E18(&qword_1005D56B0);
  __chkstk_darwin(v74);
  v15 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v77 = sub_100012E18(&qword_1005D56B8);
  __chkstk_darwin(v77);
  v17 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v82 = sub_100012E18(&qword_1005D56C0);
  __chkstk_darwin(v82);
  v81 = &v70[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_100012E18(&qword_1005D0F10);
  v20 = *(_QWORD *)(_s14descr10055F441V6ObjectVMa(0) - 8);
  v21 = *(_QWORD *)(v20 + 72);
  v22 = *(unsigned __int8 *)(v20 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v19, v23 + v21, v22 | 7);
  *(_OWORD *)(v24 + 16) = xmmword_100451C20;
  v25 = (_QWORD *)(v24 + v23);
  v26 = _s14descr10055F441V10ControllerCMa(0);
  v27 = sub_100019C6C(&qword_1005D56C8, _s14descr10055F441V10ControllerCMa, (uint64_t)&unk_10045C4B8);
  v28 = (void *)StateObject.wrappedValue.getter(v72, a2, v71, v26, v27);
  KeyPath = swift_getKeyPath(&unk_10045D0A8, v29);
  v32 = swift_getKeyPath(&unk_10045D0D0, v31);
  static Published.subscript.getter(v25);

  swift_release(KeyPath);
  swift_release(v32);
  *(_QWORD *)&v86[0] = v24;
  v34 = swift_getKeyPath(&unk_10045D0F0, v33);
  v35 = type metadata accessor for SyncingDebugSection.SyncStatusLabel(0);
  v36 = sub_100016638(&qword_1005D56D0, &qword_1005D56D8, (uint64_t)&protocol conformance descriptor for [A]);
  v37 = sub_100019C6C(&qword_1005D56E0, type metadata accessor for SyncingDebugSection.SyncStatusLabel, (uint64_t)&unk_10045D11C);
  v38 = sub_100019C6C(&qword_1005D56E8, _s14descr10055F441V6ObjectVMa, (uint64_t)&unk_10045C440);
  v39 = List<>.init<A, B>(_:children:rowContent:)(v86, v34, sub_1002373D4, 0, v35, v36, v37, v38);
  PlainListStyle.init()(v39);
  v40 = sub_100016638(&qword_1005D56F0, &qword_1005D56A0, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v41 = v73;
  v42 = v79;
  View.listStyle<A>(_:)(v9, v73, v79, v40, &protocol witness table for PlainListStyle);
  (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v9, v42);
  v43 = (*(uint64_t (**)(_BYTE *, uint64_t))(v76 + 8))(v11, v41);
  v44 = static Alignment.center.getter(v43);
  v46 = v45;
  v47 = static Color.white.getter(v44);
  v48 = v75;
  v49 = v78;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v75 + 16))(v15, v13, v78);
  v50 = (uint64_t *)&v15[*(int *)(v74 + 36)];
  *v50 = v47;
  v50[1] = v44;
  v50[2] = v46;
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v13, v49);
  v51 = v83;
  v52 = &v83[*(int *)(v84 + 20)];
  v53 = enum case for RoundedCornerStyle.continuous(_:);
  v54 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v52, v53, v54);
  __asm { FMOV            V0.2D, #8.0 }
  *v51 = _Q0;
  v60 = (uint64_t)&v17[*(int *)(v77 + 36)];
  sub_100145220((uint64_t)v51, v60, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v60 + *(int *)(sub_100012E18(&qword_1005D56F8) + 36)) = 256;
  sub_100012CE8((uint64_t)v15, (uint64_t)v17, &qword_1005D56B0);
  sub_100145264((uint64_t)v51, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v61 = sub_100012DDC((uint64_t)v15, &qword_1005D56B0);
  v62 = static Alignment.center.getter(v61);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v86, 0, 1, 0, 1, 0, 1, 0x4074000000000000, 0, 0, 1, 0, 1, v62, v63);
  v64 = v81;
  sub_100012CE8((uint64_t)v17, (uint64_t)v81, &qword_1005D56B8);
  v65 = &v64[*(int *)(v82 + 36)];
  v66 = v86[5];
  v65[4] = v86[4];
  v65[5] = v66;
  v65[6] = v86[6];
  v67 = v86[1];
  *v65 = v86[0];
  v65[1] = v67;
  v68 = v86[3];
  v65[2] = v86[2];
  v65[3] = v68;
  sub_100012DDC((uint64_t)v17, &qword_1005D56B8);
  return sub_10014BD1C((uint64_t)v64, v85, &qword_1005D56C0);
}

uint64_t sub_1002373D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100145220(a1, a2, _s14descr10055F441V6ObjectVMa);
}

uint64_t sub_1002373F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100236DD8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_100237400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD v32[4];
  unsigned __int16 v33;

  v31 = a2;
  v3 = sub_100012E18(&qword_1005D57D8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v27 - v8;
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v10 = sub_100012E18(&qword_1005D57E0);
  sub_1002375F8(a1, (uint64_t)&v9[*(int *)(v10 + 44)]);
  v11 = sub_100237900(a1, v32);
  v12 = v32[0];
  v13 = v32[1];
  v14 = v32[2];
  v15 = v32[3];
  v16 = v33;
  v29 = static Font.footnote.getter(v11);
  KeyPath = swift_getKeyPath(&unk_10045D1A0, v17);
  v18 = static Color.secondary.getter(KeyPath);
  v20 = swift_getKeyPath(&unk_10045D1D0, v19);
  v30 = v6;
  sub_100012CE8((uint64_t)v9, (uint64_t)v6, &qword_1005D57D8);
  v21 = (uint64_t)v6;
  v22 = v31;
  sub_100012CE8(v21, v31, &qword_1005D57D8);
  v23 = v22 + *(int *)(sub_100012E18(&qword_1005D57E8) + 48);
  *(_QWORD *)v23 = v12;
  *(_QWORD *)(v23 + 8) = v13;
  *(_QWORD *)(v23 + 16) = v14;
  *(_QWORD *)(v23 + 24) = v15;
  *(_WORD *)(v23 + 32) = v16;
  v25 = KeyPath;
  v24 = v29;
  *(_QWORD *)(v23 + 40) = KeyPath;
  *(_QWORD *)(v23 + 48) = v24;
  *(_QWORD *)(v23 + 56) = v20;
  *(_QWORD *)(v23 + 64) = v18;
  sub_100238BD4(v12, v13, v14, v15, v16);
  swift_retain(v25);
  swift_retain(v24);
  swift_retain(v20);
  swift_retain(v18);
  sub_100012DDC((uint64_t)v9, &qword_1005D57D8);
  sub_100238C54(v12, v13, v14, v15, v16);
  swift_release(v18);
  swift_release(v20);
  swift_release(v24);
  swift_release(v25);
  return sub_100012DDC((uint64_t)v30, &qword_1005D57D8);
}

uint64_t sub_1002375F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a2;
  v38 = sub_100012E18(&qword_1005D09D8);
  __chkstk_darwin(v38);
  v4 = (uint64_t *)((char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.Scale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005D57F0);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v39 = (uint64_t)&v37 - v13;
  v40 = a1;
  v14 = a1;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(v14 + 40);
  swift_bridgeObjectRetain(v16);
  v17 = Image.init(systemName:)(v15, v16);
  v18 = static Color.secondary.getter(v17);
  KeyPath = swift_getKeyPath(&unk_10045D1D0, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.Scale.medium(_:), v5);
  v22 = swift_getKeyPath(&unk_10045D200, v21);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v4 + *(int *)(v38 + 28), v8, v5);
  *v4 = v22;
  sub_100012CE8((uint64_t)v4, (uint64_t)v12 + *(int *)(v9 + 36), &qword_1005D09D8);
  *v12 = v17;
  v12[1] = KeyPath;
  v12[2] = v18;
  swift_retain(v17);
  swift_retain(KeyPath);
  swift_retain(v18);
  sub_100012DDC((uint64_t)v4, &qword_1005D09D8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release(v18);
  swift_release(KeyPath);
  swift_release(v17);
  v23 = v39;
  sub_10014BD1C((uint64_t)v12, v39, &qword_1005D57F0);
  v24 = *(_QWORD *)(v40 + 16);
  v25 = *(_QWORD *)(v40 + 24);
  v26 = *(unsigned __int8 *)(v40 + 48);
  v27 = swift_bridgeObjectRetain(v25);
  v28 = Text.strikethrough(_:color:)(v26, 0, v24, v25, 0, _swiftEmptyArrayStorage, v27);
  v30 = v29;
  LOBYTE(v6) = v31;
  v33 = v32;
  swift_bridgeObjectRelease(v25);
  LOBYTE(v25) = v6 & 1;
  sub_100012CE8(v23, (uint64_t)v12, &qword_1005D57F0);
  v34 = v41;
  sub_100012CE8((uint64_t)v12, v41, &qword_1005D57F0);
  v35 = v34 + *(int *)(sub_100012E18(&qword_1005D57F8) + 48);
  *(_QWORD *)v35 = v28;
  *(_QWORD *)(v35 + 8) = v30;
  *(_BYTE *)(v35 + 16) = v25;
  *(_QWORD *)(v35 + 24) = v33;
  sub_10014BCE0(v28, v30, v25);
  swift_bridgeObjectRetain(v33);
  sub_100012DDC(v23, &qword_1005D57F0);
  sub_10014BCF0(v28, v30, v25);
  swift_bridgeObjectRelease(v33);
  return sub_100012DDC((uint64_t)v12, &qword_1005D57F0);
}

uint64_t sub_100237900@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  Swift::String v31;
  Swift::String v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  Swift::String v40;
  void *object;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  __int128 v55;
  __int128 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;

  v51 = a2;
  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v48 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v48 - v14;
  v16 = _s14descr10055F441V6ObjectVMa(0);
  v17 = v16;
  v18 = (uint64_t *)(a1 + *(int *)(v16 + 40));
  v19 = v18[1];
  if (!v19)
  {
LABEL_8:
    sub_100012CE8(a1 + *(int *)(v17 + 36), (uint64_t)v6, (uint64_t *)&unk_1005D7B20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
    {
      result = sub_100012DDC((uint64_t)v6, (uint64_t *)&unk_1005D7B20);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v30 = -256;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, v9);
      *(_QWORD *)&v55 = 0x2064657461647055;
      *((_QWORD *)&v55 + 1) = 0xEB00000000206E6FLL;
      v40 = Date.formatted()();
      object = v40._object;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(object);
      v52 = v55;
      *(_QWORD *)&v53 = 0;
      *((_QWORD *)&v53 + 1) = _swiftEmptyArrayStorage;
      v54 = 256;
      v42 = sub_100012E18(&qword_1005D4F98);
      v43 = sub_10022574C();
      _ConditionalContent<>.init(storage:)(&v52, v42, &type metadata for Text, v43, &protocol witness table for Text);
      v26 = *((_QWORD *)&v55 + 1);
      v25 = v55;
      v28 = *((_QWORD *)&v56 + 1);
      v27 = v56;
      v44 = v9;
      v45 = v57;
      LODWORD(object) = v58;
      result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v44);
      if ((_DWORD)object)
        v46 = 256;
      else
        v46 = 0;
      v30 = v46 | v45;
    }
    goto LABEL_18;
  }
  v49 = *v18;
  v50 = v13;
  sub_100012CE8(a1 + *(int *)(v16 + 36), (uint64_t)v8, (uint64_t *)&unk_1005D7B20);
  v20 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100012DDC((uint64_t)v8, (uint64_t *)&unk_1005D7B20);
    v21 = v18[1];
    v13 = v50;
    if (v21)
    {
      *(_QWORD *)&v52 = *v18;
      *((_QWORD *)&v52 + 1) = v21;
      *(_QWORD *)&v53 = 0;
      *((_QWORD *)&v53 + 1) = _swiftEmptyArrayStorage;
      LOBYTE(v54) = 1;
      swift_bridgeObjectRetain_n(v21, 2);
      _ConditionalContent<>.init(storage:)(&v52, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
      v52 = v55;
      v53 = v56;
      v54 = v57;
      v22 = sub_100012E18(&qword_1005D4F98);
      v23 = sub_10022574C();
      _ConditionalContent<>.init(storage:)(&v52, v22, &type metadata for Text, v23, &protocol witness table for Text);
      result = swift_bridgeObjectRelease(v21);
      v26 = *((_QWORD *)&v55 + 1);
      v25 = v55;
      v28 = *((_QWORD *)&v56 + 1);
      v27 = v56;
      if (v58)
        v29 = 256;
      else
        v29 = 0;
      v30 = v29 | v57;
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  v48 = v10;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
  *(_QWORD *)&v55 = v49;
  *((_QWORD *)&v55 + 1) = v19;
  swift_bridgeObjectRetain(v19);
  v31._countAndFlagsBits = 544108320;
  v31._object = (void *)0xE400000000000000;
  String.append(_:)(v31);
  v32 = Date.formatted()();
  v33 = v32._object;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v33);
  v34 = *((_QWORD *)&v55 + 1);
  v52 = v55;
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = _swiftEmptyArrayStorage;
  LOBYTE(v54) = 0;
  swift_bridgeObjectRetain(*((_QWORD *)&v55 + 1));
  _ConditionalContent<>.init(storage:)(&v52, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v52 = v55;
  v53 = v56;
  v54 = v57;
  v35 = sub_100012E18(&qword_1005D4F98);
  v36 = sub_10022574C();
  _ConditionalContent<>.init(storage:)(&v52, v35, &type metadata for Text, v36, &protocol witness table for Text);
  swift_bridgeObjectRelease(v34);
  v26 = *((_QWORD *)&v55 + 1);
  v25 = v55;
  v28 = *((_QWORD *)&v56 + 1);
  v27 = v56;
  v37 = v57;
  v38 = v58;
  result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v15, v20);
  if (v38)
    v39 = 256;
  else
    v39 = 0;
  v30 = v39 | v37;
LABEL_18:
  v47 = v51;
  *v51 = v25;
  v47[1] = v26;
  v47[2] = v27;
  v47[3] = v28;
  *((_WORD *)v47 + 16) = v30;
  return result;
}

uint64_t sub_100237D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v4 = sub_100012E18(&qword_1005D57C0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v5);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v8 = sub_100012E18(&qword_1005D57C8);
  sub_100237400(v2, (uint64_t)&v7[*(int *)(v8 + 44)]);
  KeyPath = swift_getKeyPath(&unk_10045D170, v9);
  sub_100012CE8((uint64_t)v7, a1, &qword_1005D57C0);
  v11 = a1 + *(int *)(sub_100012E18(&qword_1005D57D0) + 36);
  *(_QWORD *)v11 = KeyPath;
  *(_QWORD *)(v11 + 8) = 1;
  *(_BYTE *)(v11 + 16) = 0;
  return sub_100012DDC((uint64_t)v7, &qword_1005D57C0);
}

uint64_t sub_100237E78@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_10045D0A8, a1);
  v5 = swift_getKeyPath(&unk_10045D0D0, v4);
  static Published.subscript.getter(a2);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100237EE4(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = _s14descr10055F441V6ObjectVMa(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v16 - v8;
  sub_100145220(a1, (uint64_t)&v16 - v8, _s14descr10055F441V6ObjectVMa);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_10045D0A8, v11);
  v14 = swift_getKeyPath(&unk_10045D0D0, v13);
  sub_100145220((uint64_t)v9, (uint64_t)v7, _s14descr10055F441V6ObjectVMa);
  static Published.subscript.setter(v7, v10, KeyPath, v14);
  return sub_100145264((uint64_t)v9, _s14descr10055F441V6ObjectVMa);
}

uint64_t type metadata accessor for SyncingDebugSection.SyncStatusLabel(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D5758;
  if (!qword_1005D5758)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SyncingDebugSection.SyncStatusLabel);
  return result;
}

char *sub_100238018(char *a1, char **a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int (*v25)(char *, uint64_t, uint64_t, __n128);
  char *__dst;

  v4 = _s14descr10055F441V6ObjectVMa(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = &v6[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v6);
  }
  else
  {
    v7 = v4;
    v9 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v8;
    v11 = a2[3];
    v10 = a2[4];
    *((_QWORD *)a1 + 3) = v11;
    *((_QWORD *)a1 + 4) = v10;
    v12 = a2[5];
    *((_QWORD *)a1 + 5) = v12;
    a1[48] = *((_BYTE *)a2 + 48);
    v13 = *(int *)(v4 + 36);
    __dst = &a1[v13];
    v14 = (char *)a2 + v13;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
    v17 = v6;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v18 = swift_bridgeObjectRetain(v12);
    if (v25(v14, 1, v15, v18))
    {
      v19 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v20 = *(int *)(v7 + 40);
    v21 = &a1[v20];
    v22 = (char **)((char *)a2 + v20);
    v23 = v22[1];
    *(_QWORD *)v21 = *v22;
    *((_QWORD *)v21 + 1) = v23;
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_10023818C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v2 = _s14descr10055F441V6ObjectVMa(0);
  v3 = a1 + *(int *)(v2 + 36);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v2 + 40) + 8));
}

uint64_t sub_100238230(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t, __n128);
  id v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *__dst;
  uint64_t v23;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = _s14descr10055F441V6ObjectVMa(0);
  v9 = *(int *)(v8 + 36);
  __dst = (void *)(a1 + v9);
  v23 = v8;
  v10 = (const void *)(a2 + v9);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v12 + 48);
  v14 = v4;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v15 = swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11, v15))
  {
    v16 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v17 = *(int *)(v23 + 40);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t sub_100238368(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v13 = _s14descr10055F441V6ObjectVMa(0);
  v14 = *(int *)(v13 + 36);
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = *(int *)(v13 + 40);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  return a1;
}

uint64_t sub_100238520(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = _s14descr10055F441V6ObjectVMa(0);
  v6 = *(int *)(v5 + 36);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(v5 + 40)) = *(_OWORD *)(a2 + *(int *)(v5 + 40));
  return a1;
}

uint64_t sub_100238610(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = _s14descr10055F441V6ObjectVMa(0);
  v11 = *(int *)(v10 + 36);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = *(int *)(v10 + 40);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_10023878C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100238798);
}

uint64_t sub_100238798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s14descr10055F441V6ObjectVMa(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1002387D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002387E0);
}

uint64_t sub_1002387E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s14descr10055F441V6ObjectVMa(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100238820(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = _s14descr10055F441V6ObjectVMa(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10023888C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D5790;
  if (!qword_1005D5790)
  {
    v1 = sub_10001537C(&qword_1005D56C0);
    sub_1002388F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D5790);
  }
  return result;
}

unint64_t sub_1002388F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D5798;
  if (!qword_1005D5798)
  {
    v1 = sub_10001537C(&qword_1005D56B8);
    sub_10023897C();
    sub_100016638(&qword_1005D57B8, &qword_1005D56F8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D5798);
  }
  return result;
}

unint64_t sub_10023897C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1005D57A0;
  if (!qword_1005D57A0)
  {
    v1 = sub_10001537C(&qword_1005D56B0);
    v2[0] = sub_10001537C(&qword_1005D56A0);
    v2[1] = type metadata accessor for PlainListStyle(255);
    v2[2] = sub_100016638(&qword_1005D56F0, &qword_1005D56A0, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v2[3] = &protocol witness table for PlainListStyle;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    sub_100016638(&qword_1005D57A8, &qword_1005D57B0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D57A0);
  }
  return result;
}

uint64_t sub_100238A60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1005051B0, 1);
}

uint64_t sub_100238A70()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100238A90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_100238B0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100238B3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100238B6C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100238B98(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

double sub_100238BD4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (BYTE1(a5) != 255)
    return sub_100238BEC(a1, a2, a3, a4, a5, BYTE1(a5) & 1);
  return result;
}

double sub_100238BEC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  double result;

  if ((a6 & 1) == 0)
    return sub_100238C2C(a1, a2, a3, a4);
  sub_10014BCE0(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  return result;
}

double sub_100238C2C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  sub_10014BCE0(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  return result;
}

uint64_t sub_100238C54(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (BYTE1(a5) != 255)
    return sub_100238C6C(result, a2, a3, a4, a5, BYTE1(a5) & 1);
  return result;
}

uint64_t sub_100238C6C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return sub_100238CAC(a1, a2, a3, a4);
  sub_10014BCF0(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100238CAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10014BCF0(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100238CD4()
{
  return EnvironmentValues.imageScale.getter();
}

unint64_t sub_100238CFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D5800;
  if (!qword_1005D5800)
  {
    v1 = sub_10001537C(&qword_1005D57D0);
    sub_100016638(&qword_1005D5808, &qword_1005D57C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100016638(&qword_1005D5810, &qword_1005D5818, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D5800);
  }
  return result;
}

uint64_t sub_1002393A8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v19 = (uint64_t)_swiftEmptyArrayStorage;
  v1 = *(void **)(v0 + OBJC_IVAR___ICTagsActionMenu_viewControllerManager);
  v2 = sub_1002395C8(v1);
  v18 = v2;
  v3 = sub_100012E18(&qword_1005D5878);
  Array.appendNonNil(_:)(&v18, v3);

  v4 = sub_10023A1C8(v1, &OBJC_IVAR___ICTagsActionMenu_presentingViewController, &OBJC_IVAR___ICTagsActionMenu_completion, (uint64_t)&unk_1005604C0);
  v18 = v4;
  Array.appendNonNil(_:)(&v18, v3);

  v5 = sub_10023A388();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v7 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
  specialized Array._endMutation()(v8);
  v9 = sub_10023A4A4();
  v18 = v9;
  Array.appendNonNil(_:)(&v18, v3);

  v10 = sub_10023A5C4();
  v18 = v10;
  Array.appendNonNil(_:)(&v18, v3);

  v11 = objc_msgSend(*(id *)(v0 + OBJC_IVAR___ICTagsActionMenu_tagSelection), "isEmpty");
  v12 = v19;
  if (v11)
  {
    v19 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v12);
    v12 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v16 = v12;
    else
      v16 = v12 & 0xFFFFFFFFFFFFFF8;
    v17 = sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
    swift_bridgeObjectRetain(v12);
    v14 = _bridgeCocoaArray<A>(_:)(v16, v17);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    swift_bridgeObjectRetain(v12);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v13);
    sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
    v14 = v12;
  }
  swift_bridgeObjectRelease(v12);
  return v14;
}

id sub_1002395C8(void *a1)
{
  char *v1;
  void *Strong;
  void *v4;
  id result;
  void *v6;
  unsigned int v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  void *v21;
  NSString v22;
  id v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  _BOOL8 v38;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  Class isa;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  __CFString *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;

  if (objc_msgSend(a1, "noteContainerViewMode") != (id)1)
    return 0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR___ICTagsActionMenu_presentingViewController]);
  if (!Strong)
    return 0;
  v4 = Strong;
  result = objc_msgSend(Strong, "view");
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, "ic_hasCompactWidth");

    if (!v7)
    {
      v8 = (void *)objc_opt_self(UIDevice);
      if ((objc_msgSend(v8, "ic_isiPad") & 1) != 0
        || (objc_msgSend(v8, "ic_isVision") & 1) != 0
        && (objc_msgSend(a1, "isMainSplitViewDisplayModeSecondaryOnly") & 1) == 0)
      {
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("ICNoteBrowseCollectionViewGalleryWideModeNumberOfColumnsKey"));
        v11 = v10;
        v56 = CFSTR("ICNoteBrowseCollectionViewGalleryWideModeNumberOfColumnsKey");
        v12 = String._bridgeToObjectiveC()();
        v55 = (id)objc_opt_self(UIImage);
        v53 = objc_msgSend(v55, "systemImageNamed:", v12);

        v54 = (id)objc_opt_self(NSBundle);
        v13 = objc_msgSend(v54, "mainBundle");
        v14 = String._bridgeToObjectiveC()();
        v15 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, 0, 0);

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
        v19 = (_QWORD *)swift_allocObject(&unk_1005604F8, 48, 7);
        v19[2] = v58;
        v19[3] = v11;
        v19[4] = 6;
        v19[5] = v1;
        v57 = v53;
        swift_bridgeObjectRetain(v11);
        v20 = v1;
        v21 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v16, v18, 0, 0, v53, 0, 0, 0, 0, 8, 0, sub_10023B6E8, v19);
        v22 = String._bridgeToObjectiveC()();
        v23 = objc_msgSend(v55, "systemImageNamed:", v22);

        v24 = objc_msgSend(v54, "mainBundle");
        v25 = String._bridgeToObjectiveC()();
        v26 = objc_msgSend(v24, "localizedStringForKey:value:table:", v25, 0, 0);

        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        v30 = (_QWORD *)swift_allocObject(&unk_100560520, 48, 7);
        v30[2] = v58;
        v30[3] = v11;
        v30[4] = 3;
        v30[5] = v20;
        v31 = v20;
        v32 = v23;
        v33 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v27, v29, 0, 0, v23, 0, 0, 0, 0, 8, 0, sub_10023B710, v30);
        v34 = objc_msgSend(a1, "adjustedNumberOfGalleryViewColumns");
        v35 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v36 = objc_msgSend(v35, "integerForKey:", v56);

        v38 = v36 == (id)3 || v34 == (id)3;
        objc_msgSend(v33, "setIc_disabled:", v38);
        v40 = v36 == (id)6 || v34 == (id)6;
        objc_msgSend(v21, "setIc_disabled:", v40);
        v41 = sub_100012E18(&qword_1005CF6F0);
        v42 = swift_allocObject(v41, 48, 7);
        *(_OWORD *)(v42 + 16) = xmmword_100451BF0;
        *(_QWORD *)(v42 + 32) = v21;
        *(_QWORD *)(v42 + 40) = v33;
        v59 = v42;
        specialized Array._endMutation()(v42);
        if ((unint64_t)v59 >> 62)
        {
          if (v59 < 0)
            v49 = v59;
          else
            v49 = v59 & 0xFFFFFFFFFFFFFF8;
          v50 = sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
          v51 = v21;
          v52 = v33;
          swift_bridgeObjectRetain(v59);
          v46 = _bridgeCocoaArray<A>(_:)(v49, v50);
          swift_bridgeObjectRelease(v59);
        }
        else
        {
          v43 = v21;
          v44 = v33;
          swift_bridgeObjectRetain(v59);
          dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v45);
          sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
          v46 = v59;
        }
        swift_bridgeObjectRelease(v59);
        v47 = (void *)objc_opt_self(UIMenu);
        sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v46);
        v9 = objc_msgSend(v47, "ic_inlineMenuWithElementSize:children:", 1, isa);

        return v9;
      }
    }

    return 0;
  }
  __break(1u);
  return result;
}

id sub_100239BB8(void *a1)
{
  char *v1;
  void *Strong;
  void *v4;
  id result;
  void *v6;
  unsigned int v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  void *v21;
  NSString v22;
  id v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  _BOOL8 v38;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  Class isa;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  __CFString *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;

  if (objc_msgSend(a1, "noteContainerViewMode") != (id)1)
    return 0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR___ICNoteContainerActionMenu_presentingViewController]);
  if (!Strong)
    return 0;
  v4 = Strong;
  result = objc_msgSend(Strong, "view");
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, "ic_hasCompactWidth");

    if (!v7)
    {
      v8 = (void *)objc_opt_self(UIDevice);
      if ((objc_msgSend(v8, "ic_isiPad") & 1) != 0
        || (objc_msgSend(v8, "ic_isVision") & 1) != 0
        && (objc_msgSend(a1, "isMainSplitViewDisplayModeSecondaryOnly") & 1) == 0)
      {
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("ICNoteBrowseCollectionViewGalleryWideModeNumberOfColumnsKey"));
        v11 = v10;
        v56 = CFSTR("ICNoteBrowseCollectionViewGalleryWideModeNumberOfColumnsKey");
        v12 = String._bridgeToObjectiveC()();
        v55 = (id)objc_opt_self(UIImage);
        v53 = objc_msgSend(v55, "systemImageNamed:", v12);

        v54 = (id)objc_opt_self(NSBundle);
        v13 = objc_msgSend(v54, "mainBundle");
        v14 = String._bridgeToObjectiveC()();
        v15 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, 0, 0);

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
        v19 = (_QWORD *)swift_allocObject(&unk_100560570, 48, 7);
        v19[2] = v58;
        v19[3] = v11;
        v19[4] = 6;
        v19[5] = v1;
        v57 = v53;
        swift_bridgeObjectRetain(v11);
        v20 = v1;
        v21 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v16, v18, 0, 0, v53, 0, 0, 0, 0, 8, 0, sub_10023B738, v19);
        v22 = String._bridgeToObjectiveC()();
        v23 = objc_msgSend(v55, "systemImageNamed:", v22);

        v24 = objc_msgSend(v54, "mainBundle");
        v25 = String._bridgeToObjectiveC()();
        v26 = objc_msgSend(v24, "localizedStringForKey:value:table:", v25, 0, 0);

        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        v30 = (_QWORD *)swift_allocObject(&unk_100560598, 48, 7);
        v30[2] = v58;
        v30[3] = v11;
        v30[4] = 3;
        v30[5] = v20;
        v31 = v20;
        v32 = v23;
        v33 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v27, v29, 0, 0, v23, 0, 0, 0, 0, 8, 0, sub_10023B78C, v30);
        v34 = objc_msgSend(a1, "adjustedNumberOfGalleryViewColumns");
        v35 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v36 = objc_msgSend(v35, "integerForKey:", v56);

        v38 = v36 == (id)3 || v34 == (id)3;
        objc_msgSend(v33, "setIc_disabled:", v38);
        v40 = v36 == (id)6 || v34 == (id)6;
        objc_msgSend(v21, "setIc_disabled:", v40);
        v41 = sub_100012E18(&qword_1005CF6F0);
        v42 = swift_allocObject(v41, 48, 7);
        *(_OWORD *)(v42 + 16) = xmmword_100451BF0;
        *(_QWORD *)(v42 + 32) = v21;
        *(_QWORD *)(v42 + 40) = v33;
        v59 = v42;
        specialized Array._endMutation()(v42);
        if ((unint64_t)v59 >> 62)
        {
          if (v59 < 0)
            v49 = v59;
          else
            v49 = v59 & 0xFFFFFFFFFFFFFF8;
          v50 = sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
          v51 = v21;
          v52 = v33;
          swift_bridgeObjectRetain(v59);
          v46 = _bridgeCocoaArray<A>(_:)(v49, v50);
          swift_bridgeObjectRelease(v59);
        }
        else
        {
          v43 = v21;
          v44 = v33;
          swift_bridgeObjectRetain(v59);
          dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v45);
          sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
          v46 = v59;
        }
        swift_bridgeObjectRelease(v59);
        v47 = (void *)objc_opt_self(UIMenu);
        sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v9 = objc_msgSend(v47, "ic_inlineMenuWithElementSize:children:", 1, isa, swift_bridgeObjectRelease(v46).n128_f64[0]);

        return v9;
      }
    }

    return 0;
  }
  __break(1u);
  return result;
}

id sub_10023A1AC(void *a1)
{
  return sub_10023A1C8(a1, &OBJC_IVAR___ICNoteContainerActionMenu_presentingViewController, &OBJC_IVAR___ICNoteContainerActionMenu_completion, (uint64_t)&unk_100560538);
}

id sub_10023A1C8(void *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  id v9;
  void *Strong;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  Class isa;
  _QWORD aBlock[5];
  uint64_t v23;
  _QWORD *v24;

  if (objc_msgSend(a1, "behavior") == (id)1)
    return 0;
  v24 = _swiftEmptyArrayStorage;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v4 + *a2);
  v11 = objc_msgSend(objc_allocWithZone((Class)ICNoteContainerViewModeActivity), "initWithPresentingViewController:viewControllerManager:", Strong, a1);

  v12 = (_QWORD *)(v4 + *a3);
  if (*v12)
  {
    v13 = v12[1];
    aBlock[4] = *v12;
    v23 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10023ABC8;
    aBlock[3] = a4;
    v14 = _Block_copy(aBlock);
    v15 = v23;
    swift_retain(v13);
    swift_release(v15);
  }
  else
  {
    v14 = 0;
  }
  v16 = objc_msgSend(v11, "actionWithCompletion:", v14);
  _Block_release(v14);
  aBlock[0] = v16;
  v17 = sub_100012E18(&qword_1005D5880);
  Array.appendNonNil(_:)(aBlock, v17);
  v18 = (void *)objc_opt_self(UIMenu);
  v19 = v24;
  sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  v9 = objc_msgSend(v18, "ic_inlineMenuWithChildren:", isa);

  return v9;
}

id sub_10023A388()
{
  id v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  _QWORD *v5;
  Class isa;
  id v7;
  id v9;
  _QWORD *v10;

  v10 = _swiftEmptyArrayStorage;
  v0 = sub_10023A730();
  v9 = v0;
  v1 = sub_100012E18(&qword_1005D5880);
  Array.appendNonNil(_:)(&v9, v1);

  v2 = sub_10023A88C();
  v9 = v2;
  Array.appendNonNil(_:)(&v9, v1);

  v3 = sub_10023AA18();
  v9 = v3;
  Array.appendNonNil(_:)(&v9, v1);

  v4 = (void *)objc_opt_self(UIMenu);
  v5 = v10;
  sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v4, "ic_inlineMenuWithChildren:", isa);

  return v7;
}

id sub_10023A4A4()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  _QWORD *v6;
  Class isa;
  id v9;
  _QWORD *v10;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR___ICTagsActionMenu_tagSelection), "mode"))
    return 0;
  v10 = _swiftEmptyArrayStorage;
  v2 = sub_10023ADB4();
  v9 = v2;
  v3 = sub_100012E18(&qword_1005D5880);
  Array.appendNonNil(_:)(&v9, v3);

  v4 = sub_10023AC2C();
  v9 = v4;
  Array.appendNonNil(_:)(&v9, v3);

  v5 = (void *)objc_opt_self(UIMenu);
  v6 = v10;
  sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  v1 = objc_msgSend(v5, "ic_inlineMenuWithChildren:", isa);

  return v1;
}

id sub_10023A5C4()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t v9;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR___ICTagsActionMenu_tagSelection), "mode"))
    return 0;
  v2 = sub_10023B03C();
  v3 = (void *)objc_opt_self(UIMenu);
  v4 = sub_100012E18(&qword_1005CF6F0);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100456F30;
  *(_QWORD *)(v5 + 32) = v2;
  v9 = v5;
  specialized Array._endMutation()(v5);
  sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  v6 = v2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  v1 = objc_msgSend(v3, "ic_inlineMenuWithChildren:", isa);

  return v1;
}

id sub_10023A730()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v12[5];
  uint64_t v13;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICTagsActionMenu_delegate);
  if (Strong)
  {
    v2 = Strong;
    v3 = objc_msgSend(Strong, "tagsActionMenuNoteCount:", v0);
    swift_unknownObjectRelease(v2, v4);
  }
  else
  {
    v3 = 0;
  }
  v5 = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController);
  v6 = objc_msgSend(objc_allocWithZone((Class)ICSelectNotesActivity), "initWithPresentingViewController:", v5);

  if (*(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion))
  {
    v7 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion + 8);
    v12[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion);
    v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_10023ABC8;
    v12[3] = &unk_100560498;
    v8 = _Block_copy(v12);
    v9 = v13;
    swift_retain(v7);
    swift_release(v9);
  }
  else
  {
    v8 = 0;
  }
  v10 = objc_msgSend(v6, "actionWithCompletion:", v8);
  _Block_release(v8);
  objc_msgSend(v10, "setIc_disabled:", v3 == 0);

  return v10;
}

id sub_10023A88C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *Strong;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _QWORD v15[5];
  uint64_t v16;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR___ICTagsActionMenu_viewControllerManager), "noteContainerViewMode");
  v2 = v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController);
  v4 = swift_unknownObjectWeakLoadStrong(v2);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = objc_opt_self(ICNAViewController);
    v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
    if (v7)
      v8 = objc_msgSend(v7, "eventReporter");
    else
      v8 = 0;

  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)ICSortQueryActivity), "initWithPresentingViewController:noteContainerViewMode:eventReporter:", Strong, v1, v8);

  if (*(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion))
  {
    v10 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion + 8);
    v15[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion);
    v16 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10023ABC8;
    v15[3] = &unk_100560470;
    v11 = _Block_copy(v15);
    v12 = v16;
    swift_retain(v10);
    swift_release(v12);
  }
  else
  {
    v11 = 0;
  }
  v13 = objc_msgSend(v9, "menuWithCompletion:", v11);
  _Block_release(v11);

  return v13;
}

id sub_10023AA18()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *Strong;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v15[5];
  uint64_t v16;

  if (!objc_msgSend((id)objc_opt_self(ICDateHeadersUtilities), "supportsQueryDateHeaders"))
    return 0;
  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR___ICTagsActionMenu_viewControllerManager), "noteContainerViewMode");
  v2 = v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController);
  v4 = swift_unknownObjectWeakLoadStrong(v2);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = objc_opt_self(ICNAViewController);
    v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
    if (v7)
      v8 = objc_msgSend(v7, "eventReporter");
    else
      v8 = 0;

  }
  else
  {
    v8 = 0;
  }
  v10 = objc_msgSend(objc_allocWithZone((Class)ICQueryDateHeadersActivity), "initWithPresentingViewController:noteContainerViewMode:eventReporter:", Strong, v1, v8);

  if (*(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion))
  {
    v11 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion + 8);
    v15[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion);
    v16 = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10023ABC8;
    v15[3] = &unk_100560448;
    v12 = _Block_copy(v15);
    v13 = v16;
    swift_retain(v11);
    swift_release(v13);
  }
  else
  {
    v12 = 0;
  }
  v9 = objc_msgSend(v10, "menuWithCompletion:", v12);
  _Block_release(v12);

  return v9;
}

uint64_t sub_10023ABC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v8 = v7;
  swift_retain(v4);
  v5(a2, v6, v8);
  swift_release(v4);
  return swift_bridgeObjectRelease(v8);
}

id sub_10023AC2C()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  _QWORD v17[5];
  uint64_t v18;

  v1 = v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController);
  v3 = *(void **)(v0 + OBJC_IVAR___ICTagsActionMenu_tagSelection);
  v4 = swift_unknownObjectWeakLoadStrong(v1);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = objc_opt_self(ICNAViewController);
    v7 = (id)swift_dynamicCastObjCClass(v5, v6);
    v8 = v3;
    if (v7)
      v7 = objc_msgSend(v7, "eventReporter");

  }
  else
  {
    v9 = v3;
    v7 = 0;
  }
  v10 = objc_msgSend(objc_allocWithZone((Class)ICDeleteTagActivity), "initWithPresentingViewController:tagSelection:eventReporter:", Strong, v3, v7);

  v11 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion);
  if (v11)
  {
    v12 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion + 8);
    v17[4] = v11;
    v18 = v12;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_10023ABC8;
    v17[3] = &unk_1005603F8;
    v13 = _Block_copy(v17);
    v14 = v18;
    swift_retain(v12);
    swift_release(v14);
  }
  else
  {
    v13 = 0;
  }
  v15 = objc_msgSend(v10, "actionWithCompletion:", v13);
  _Block_release(v13);

  return v15;
}

id sub_10023ADB4()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *Strong;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v28[5];
  uint64_t v29;

  v1 = *(void **)(v0 + OBJC_IVAR___ICTagsActionMenu_tagSelection);
  v2 = objc_msgSend(v1, "objectIDs");
  v3 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  v4 = sub_100167280();
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

  if ((v5 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
    v7 = __CocoaSet.count.getter(v6);
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 16);
  }
  swift_bridgeObjectRelease(v5);
  if (v7 != 1)
    return 0;
  v8 = objc_msgSend(v1, "objectIDs");
  v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v3, v4);

  v10 = (void *)sub_10023FFB0(v9);
  swift_bridgeObjectRelease(v9);
  if (!v10)
    return 0;
  v11 = v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController);
  v13 = *(void **)(v0 + OBJC_IVAR___ICTagsActionMenu_viewControllerManager);
  v14 = swift_unknownObjectWeakLoadStrong(v11);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = objc_opt_self(ICNAViewController);
    v17 = (id)swift_dynamicCastObjCClass(v15, v16);
    v18 = v13;
    v19 = v10;
    if (v17)
      v17 = objc_msgSend(v17, "eventReporter");

  }
  else
  {
    v21 = v13;
    v22 = v10;
    v17 = 0;
  }
  v23 = objc_msgSend(objc_allocWithZone((Class)ICRenameTagActivity), "initWithPresentingViewController:viewControllerManager:tagObjectID:eventReporter:", Strong, v13, v10, v17);

  if (*(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion))
  {
    v24 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion + 8);
    v28[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion);
    v29 = v24;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 1107296256;
    v28[2] = sub_10023ABC8;
    v28[3] = &unk_100560420;
    v25 = _Block_copy(v28);
    v26 = v29;
    swift_retain(v24);
    swift_release(v26);
  }
  else
  {
    v25 = 0;
  }
  v20 = objc_msgSend(v23, "actionWithCompletion:", v25);

  _Block_release(v25);
  return v20;
}

id sub_10023B03C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *Strong;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  _QWORD v17[5];
  uint64_t v18;

  v1 = *(void **)(v0 + OBJC_IVAR___ICTagsActionMenu_tagSelection);
  v2 = v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController);
  v4 = swift_unknownObjectWeakLoadStrong(v2);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = objc_opt_self(ICNAViewController);
    v7 = (id)swift_dynamicCastObjCClass(v5, v6);
    v8 = v1;
    if (v7)
      v7 = objc_msgSend(v7, "eventReporter");

  }
  else
  {
    v9 = v1;
    v7 = 0;
  }
  v10 = objc_msgSend(objc_allocWithZone((Class)ICCreateSmartFolderActivity), "initWithTagSelection:presentingViewController:eventReporter:", v1, Strong, v7);

  v11 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion);
  if (v11)
  {
    v12 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion + 8);
    v17[4] = v11;
    v18 = v12;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_10023ABC8;
    v17[3] = &unk_1005603D0;
    v13 = _Block_copy(v17);
    v14 = v18;
    swift_retain(v12);
    swift_release(v14);
  }
  else
  {
    v13 = 0;
  }
  v15 = objc_msgSend(v10, "actionWithCompletion:", v13);
  _Block_release(v13);

  return v15;
}

uint64_t type metadata accessor for TagsActionMenu()
{
  return objc_opt_self(ICTagsActionMenu);
}

uint64_t sub_10023B28C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion);
  sub_100166B74(v1, *(_QWORD *)(v0 + OBJC_IVAR___ICTagsActionMenu_completion + 8));
  return v1;
}

uint64_t sub_10023B2C8()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICTagsActionMenu_presentingViewController);
}

void *sub_10023B2D8()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___ICTagsActionMenu_presentingBarButtonItem);
  v2 = v1;
  return v1;
}

uint64_t sub_10023B304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v2);
  return ActionMenuProvider.title.getter(ObjectType, a2);
}

void sub_10023B330()
{
  uint64_t v0;

  swift_getObjectType(v0);
  ActionMenuProvider.willShowMenu()();
}

UIMenu sub_10023B358(Swift::Bool a1)
{
  uint64_t v1;

  swift_getObjectType(v1);
  return ActionMenuProvider.makeMenu(deferredChildren:)(a1);
}

UIDeferredMenuElement sub_10023B394()
{
  uint64_t v0;

  swift_getObjectType(v0);
  return ActionMenuProvider.makeDeferredMenuElement()();
}

void sub_10023B3BC(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, _QWORD *a6)
{
  void *v9;
  id v10;
  NSString v11;
  char *v12;
  id v13;
  NSString v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = (void *)objc_opt_self(NSUserDefaults);
  v10 = objc_msgSend(v9, "standardUserDefaults");
  v11 = String._bridgeToObjectiveC()();
  v12 = (char *)objc_msgSend(v10, "integerForKey:", v11);

  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    if ((uint64_t)(v12 + 1) < (uint64_t)a4)
      a4 = v12 + 1;
    v13 = objc_msgSend(v9, "standardUserDefaults");
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setInteger:forKey:", a4, v14);

    v15 = a5 + *a6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))v15;
    if (*(_QWORD *)v15)
    {
      v17 = *(_QWORD *)(v15 + 8);
      swift_retain(v17);
      v18 = objc_msgSend(a1, "identifier");
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      v16(1, v19, v21);
      sub_100012C50((uint64_t)v16, v17);
      swift_bridgeObjectRelease(v21);
    }
  }
}

void sub_10023B550(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, _QWORD *a6)
{
  void *v9;
  id v10;
  NSString v11;
  char *v12;
  id v13;
  NSString v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = (void *)objc_opt_self(NSUserDefaults);
  v10 = objc_msgSend(v9, "standardUserDefaults");
  v11 = String._bridgeToObjectiveC()();
  v12 = (char *)objc_msgSend(v10, "integerForKey:", v11);

  if (__OFSUB__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    if ((uint64_t)(v12 - 1) > (uint64_t)a4)
      a4 = v12 - 1;
    v13 = objc_msgSend(v9, "standardUserDefaults");
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setInteger:forKey:", a4, v14);

    v15 = a5 + *a6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))v15;
    if (*(_QWORD *)v15)
    {
      v17 = *(_QWORD *)(v15 + 8);
      swift_retain(v17);
      v18 = objc_msgSend(a1, "identifier");
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      v16(1, v19, v21);
      sub_100012C50((uint64_t)v16, v17);
      swift_bridgeObjectRelease(v21);
    }
  }
}

void sub_10023B6E8(void *a1)
{
  uint64_t v1;

  sub_10023B3BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), &OBJC_IVAR___ICTagsActionMenu_completion);
}

void sub_10023B710(void *a1)
{
  uint64_t v1;

  sub_10023B550(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), &OBJC_IVAR___ICTagsActionMenu_completion);
}

void sub_10023B738(void *a1)
{
  uint64_t v1;

  sub_10023B3BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), &OBJC_IVAR___ICNoteContainerActionMenu_completion);
}

uint64_t sub_10023B760()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10023B78C(void *a1)
{
  uint64_t v1;

  sub_10023B550(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), &OBJC_IVAR___ICNoteContainerActionMenu_completion);
}

uint64_t sub_10023B7B0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_10023B7D4(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  objc_class *ObjectType;
  objc_super v29;

  v8 = v7;
  ObjectType = (objc_class *)swift_getObjectType(v8);
  v15 = &v8[OBJC_IVAR___ICTagsActionMenu_delegate];
  swift_unknownObjectWeakInit(&v8[OBJC_IVAR___ICTagsActionMenu_delegate], 0);
  v16 = (uint64_t *)&v8[OBJC_IVAR___ICTagsActionMenu_completion];
  *v16 = 0;
  v16[1] = 0;
  v17 = swift_unknownObjectWeakInit(&v8[OBJC_IVAR___ICTagsActionMenu_presentingViewController], 0);
  v18 = OBJC_IVAR___ICTagsActionMenu_presentingBarButtonItem;
  *(_QWORD *)&v8[OBJC_IVAR___ICTagsActionMenu_presentingBarButtonItem] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___ICTagsActionMenu_tagSelection] = a1;
  swift_unknownObjectWeakAssign(v17, a2);
  v19 = *(void **)&v8[v18];
  *(_QWORD *)&v8[v18] = a3;
  v20 = v8;
  v21 = a1;
  v22 = a3;

  *(_QWORD *)&v20[OBJC_IVAR___ICTagsActionMenu_viewControllerManager] = a4;
  swift_unknownObjectWeakAssign(v15, a5);
  v23 = *v16;
  v24 = v16[1];
  *v16 = a6;
  v16[1] = a7;
  v25 = a4;
  sub_100166B74(a6, a7);
  sub_100012C50(v23, v24);

  v29.receiver = v20;
  v29.super_class = ObjectType;
  return objc_msgSendSuper2(&v29, "init");
}

unint64_t sub_10023B910()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D5888;
  if (!qword_1005D5888)
  {
    v1 = type metadata accessor for TagsActionMenu();
    result = swift_getWitnessTable(&unk_10045D250, v1);
    atomic_store(result, (unint64_t *)&qword_1005D5888);
  }
  return result;
}

id sub_10023B9A4()
{
  void *v0;
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  uint64_t v10;

  v1 = v0;
  result = objc_msgSend(v0, "workerContext");
  if (result)
  {
    v3 = result;
    v4 = swift_allocObject(&unk_1005606D0, 24, 7);
    *(_QWORD *)(v4 + 16) = v1;
    v5 = swift_allocObject(&unk_1005606F8, 32, 7);
    *(_QWORD *)(v5 + 16) = sub_10023BE8C;
    *(_QWORD *)(v5 + 24) = v4;
    v9[4] = sub_1000165D0;
    v10 = v5;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_100016618;
    v9[3] = &unk_100560710;
    v6 = _Block_copy(v9);
    v7 = v10;
    v8 = v1;
    swift_retain(v5);
    swift_release(v7);
    objc_msgSend(v3, "performBlockAndWait:", v6);

    _Block_release(v6);
    LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v5, "", 130, 16, 38, 1);
    swift_release(v4);
    result = (id)swift_release(v5);
    if ((v3 & 1) == 0)
      return result;
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_10023BAF4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  id result;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  char *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _BYTE v28[16];

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = objc_msgSend(a1, "workerContext");
  if (!result)
    goto LABEL_27;
  v10 = result;
  v11 = objc_msgSend((id)objc_opt_self(ICAccount), "allActiveAccountsInContext:", result);

  v12 = sub_10023BEA4();
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  v14 = a1;
  v15 = sub_10023BEE0(v13);
  swift_bridgeObjectRelease(v13);

  v16 = sub_10020C160((uint64_t)v15);
  result = (id)swift_bridgeObjectRelease(v15);
  v17 = 0;
  v18 = v16 + 56;
  v19 = 1 << *(_BYTE *)(v16 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(v16 + 56);
  v22 = (unint64_t)(v19 + 63) >> 6;
  if (!v21)
    goto LABEL_6;
LABEL_5:
  v23 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (i = v23 | (v17 << 6); ; i = __clz(__rbit64(v26)) + (v17 << 6))
  {
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v3 + 16))(v8, *(_QWORD *)(v16 + 48) + *(_QWORD *)(v3 + 72) * i, v2);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
      return (id)swift_release(v16);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_10023C3E8((uint64_t)v5);
    result = (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    if (v21)
      goto LABEL_5;
LABEL_6:
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v22)
      goto LABEL_23;
    v26 = *(_QWORD *)(v18 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v22)
        goto LABEL_23;
      v26 = *(_QWORD *)(v18 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v22)
          goto LABEL_23;
        v26 = *(_QWORD *)(v18 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_19:
    v21 = (v26 - 1) & v26;
  }
  v27 = v25 + 3;
  if (v27 >= v22)
  {
LABEL_23:
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    return (id)swift_release(v16);
  }
  v26 = *(_QWORD *)(v18 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_19;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v22)
      goto LABEL_23;
    v26 = *(_QWORD *)(v18 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RemoveTemporaryPaperKitBundlesLaunchTask()
{
  return objc_opt_self(ICRemoveTemporaryPaperKitBundlesLaunchTask);
}

uint64_t sub_10023BE68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10023BE8C()
{
  uint64_t v0;

  return sub_10023BAF4(*(void **)(v0 + 16));
}

uint64_t sub_10023BE94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10023BEA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D58B8;
  if (!qword_1005D58B8)
  {
    v1 = objc_opt_self(ICAccount);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D58B8);
  }
  return result;
}

char *sub_10023BEE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  _QWORD v52[2];
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;

  v2 = v1;
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  __chkstk_darwin(v4);
  v57 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEFD0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v52 - v10;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v66 = (char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v61 = (char *)v52 - v17;
  v18 = __chkstk_darwin(v16);
  v56 = (char *)v52 - v19;
  __chkstk_darwin(v18);
  v60 = (char *)v52 - v20;
  if ((unint64_t)a1 >> 62)
    goto LABEL_25;
  v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v21)
  {
    v52[1] = v2;
    v65 = a1 & 0xC000000000000001;
    v67 = (char *)_swiftEmptyArrayStorage;
    v53 = enum case for URL.DirectoryHint.isDirectory(_:);
    v22 = 4;
    v62 = v21;
    v63 = v9;
    v64 = a1;
    v54 = v13;
    v55 = v12;
    while (1)
    {
      v2 = v22 - 4;
      if (!v65)
        break;
      v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, a1);
      v24 = v22 - 3;
      if (__OFADD__(v2, 1))
        goto LABEL_24;
LABEL_11:
      v71 = v24;
      v68 = v23;
      v25 = objc_msgSend(v23, "identifier");
      if (v25)
      {
        v26 = v25;
        v27 = objc_msgSend((id)objc_opt_self(ICAccountUtilities), "sharedInstance");
        v28 = objc_msgSend(v27, "applicationDocumentsURLForAccountIdentifier:", v26);

        v29 = v61;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);

        v30 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v30(v9, v29, v12);
        v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
        v31(v9, 0, 1, v12);
        v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
        if (v32(v9, 1, v12) != 1)
        {
          v34 = v56;
          v30(v56, v9, v12);
          v69 = 7368052;
          v70 = 0xE300000000000000;
          v36 = v57;
          v35 = v58;
          v37 = v11;
          v38 = v59;
          (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v57, v53, v59);
          v39 = sub_1001452E8();
          URL.appending<A>(path:directoryHint:)(&v69, v36, &type metadata for String, v39);
          v40 = v36;
          v41 = v38;
          v11 = v37;
          v13 = v54;
          v12 = v55;
          (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v41);
          swift_bridgeObjectRelease(v70);
          v42 = v34;
          v21 = v62;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v42, v12);
          v31(v11, 0, 1, v12);

          v33 = v32(v11, 1, v12);
          goto LABEL_17;
        }
        sub_100012DDC((uint64_t)v9, &qword_1005CEFD0);
      }
      else
      {
        v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
      }
      v31(v11, 1, 1, v12);

      v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
LABEL_17:
      if (v33 == 1)
      {
        sub_100012DDC((uint64_t)v11, &qword_1005CEFD0);
        v9 = v63;
        a1 = v64;
      }
      else
      {
        v43 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v44 = v60;
        v43(v60, v11, v12);
        v43(v66, v44, v12);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v67);
        v9 = v63;
        a1 = v64;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v67 = (char *)sub_10016B294(0, *((_QWORD *)v67 + 2) + 1, 1, (unint64_t)v67);
        v47 = *((_QWORD *)v67 + 2);
        v46 = *((_QWORD *)v67 + 3);
        if (v47 >= v46 >> 1)
          v67 = (char *)sub_10016B294(v46 > 1, v47 + 1, 1, (unint64_t)v67);
        v48 = v66;
        v49 = v67;
        *((_QWORD *)v67 + 2) = v47 + 1;
        v43(&v49[((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v47], v48, v12);
        v21 = v62;
      }
      ++v22;
      if (v71 == v21)
      {
        swift_bridgeObjectRelease(a1);
        return v67;
      }
    }
    v23 = *(id *)(a1 + 8 * v22);
    v24 = v22 - 3;
    if (!__OFADD__(v2, 1))
      goto LABEL_11;
LABEL_24:
    __break(1u);
LABEL_25:
    if (a1 < 0)
      v51 = a1;
    else
      v51 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v21 = _CocoaArrayWrapper.endIndex.getter(v51);
  }
  swift_bridgeObjectRelease(a1);
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_10023C3E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  __int128 v22;
  char **v23;
  void (*v24)(char *, uint64_t);
  id v25;
  id v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSURL *v42;
  void *v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  NSObject *v76;
  __int128 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  char *v89;
  char *v90;
  _OWORD v91[2];
  __int128 v92;
  __int128 v93;

  v2 = type metadata accessor for Logger(0);
  v80 = *(_QWORD *)(v2 - 8);
  v81 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CocoaError.Code(0);
  v86 = *(_QWORD *)(v5 - 8);
  v87 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v84 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v89 = (char *)&v73 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v73 - v19;
  v88 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v21 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, 0, 0, 0, 0);
  if (v21)
  {
    v79 = v4;
    v82 = 0;
    v78 = (char *)v91 + 8;
    v23 = &selRef_predicateWithFormat_argumentArray_;
    v90 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v22 = 136315394;
    v77 = v22;
    v83 = v9;
    while (1)
    {
      v25 = objc_msgSend(v21, v23[141]);
      if (v25)
      {
        v26 = v25;
        _bridgeAnyObjectToAny(_:)(v91, v25);
        swift_unknownObjectRelease(v26, v27);
      }
      else
      {
        memset(v91, 0, sizeof(v91));
      }
      sub_1001CBB70((uint64_t)v91, (uint64_t)&v92);
      if (!*((_QWORD *)&v93 + 1))
        goto LABEL_23;
      v28 = swift_dynamicCast(v12, &v92, v90, v13, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, v28 ^ 1u, 1, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
        goto LABEL_24;
      v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v20, v12, v13);
      v30 = URL.pathExtension.getter(v29);
      v32 = v31;
      *(_QWORD *)&v92 = v30;
      *((_QWORD *)&v92 + 1) = v31;
      *(_QWORD *)&v91[0] = 0x656C646E7562;
      *((_QWORD *)&v91[0] + 1) = 0xE600000000000000;
      v33 = sub_1001452E8();
      v34 = StringProtocol.caseInsensitiveCompare<A>(_:)(v91, &type metadata for String, &type metadata for String, v33, v33);
      v35 = swift_bridgeObjectRelease(v32);
      if (v34)
        break;
      v36 = v89;
      v37 = URL.deletingPathExtension()(v35);
      v38 = URL.lastPathComponent.getter(v37);
      v40 = v39;
      v24 = *(void (**)(char *, uint64_t))(v14 + 8);
      v24(v36, v13);
      UUID.init(uuidString:)(v38, v40);
      swift_bridgeObjectRelease(v40);
      v41 = type metadata accessor for UUID(0);
      LODWORD(v38) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v9, 1, v41);
      sub_100012DDC((uint64_t)v9, (uint64_t *)&unk_1005D06A0);
      if ((_DWORD)v38 == 1)
      {
        v23 = &selRef_predicateWithFormat_argumentArray_;
LABEL_4:
        v24(v20, v13);
      }
      else
      {
        URL._bridgeToObjectiveC()(v42);
        v44 = v43;
        *(_QWORD *)&v92 = 0;
        v45 = objc_msgSend(v88, "removeItemAtURL:error:", v43, &v92);

        v46 = v92;
        if (v45)
        {
          v47 = (id)v92;
          v24(v20, v13);
          v23 = &selRef_predicateWithFormat_argumentArray_;
        }
        else
        {
          v48 = (id)v92;
          v49 = _convertNSErrorToError(_:)(v46);

          swift_willThrow(v50);
          v51 = swift_errorRetain(v49);
          v52 = v85;
          static CocoaError.fileNoSuchFile.getter(v51);
          v53 = sub_100019C6C(&qword_1005D58C0, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
          v54 = v87;
          v55 = static _ErrorCodeProtocol.~= infix(_:_:)(v52, v49, v87, v53);
          swift_errorRelease(v49);
          (*(void (**)(char *, uint64_t))(v86 + 8))(v52, v54);
          if ((v55 & 1) != 0)
          {
            v24(v20, v13);
            swift_errorRelease(v49);
          }
          else
          {
            v56 = v79;
            Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF7365746F6E2E65, 0x615468636E75614CLL, 0xEA00000000006B73);
            v57 = v84;
            (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v84, v20, v13);
            swift_errorRetain(v49);
            v58 = swift_errorRetain(v49);
            v59 = Logger.logObject.getter(v58);
            v61 = static os_log_type_t.error.getter(v59, v60);
            LODWORD(v82) = v61;
            if (os_log_type_enabled(v59, v61))
            {
              v62 = swift_slowAlloc(22, -1);
              v74 = (uint64_t *)swift_slowAlloc(8, -1);
              v75 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v92 = v75;
              *(_DWORD *)v62 = v77;
              v73 = v62 + 4;
              v63 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
              v76 = v59;
              v64 = dispatch thunk of CustomStringConvertible.description.getter(v13, v63);
              v66 = v65;
              *(_QWORD *)&v91[0] = sub_1003A4190(v64, v65, (uint64_t *)&v92);
              v67 = v78;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, v78, v73);
              swift_bridgeObjectRelease(v66);
              v24(v84, v13);
              *(_WORD *)(v62 + 12) = 2112;
              v73 = v62 + 14;
              swift_errorRetain(v49);
              v68 = _swift_stdlib_bridgeErrorToNSError(v49);
              *(_QWORD *)&v91[0] = v68;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, v67, v73);
              v69 = v74;
              *v74 = v68;
              swift_errorRelease(v49);
              swift_errorRelease(v49);
              _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v82, "RemoveTemporaryPaperKitBundlesLaunchTask failed to remove %s - error: %@", (uint8_t *)v62, 0x16u);
              v70 = sub_100012E18(&qword_1005D3A30);
              swift_arrayDestroy(v69, 1, v70);
              swift_slowDealloc(v69, -1, -1);
              v71 = v75;
              swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v71, -1, -1);
              swift_slowDealloc(v62, -1, -1);

              swift_errorRelease(v49);
              (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v81);
            }
            else
            {

              swift_errorRelease(v49);
              swift_errorRelease(v49);
              v24(v57, v13);
              swift_errorRelease(v49);
              (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v81);
            }
            v24(v20, v13);
          }
          v82 = 0;
          v9 = v83;
          v23 = &selRef_predicateWithFormat_argumentArray_;
        }
      }
    }
    v24 = *(void (**)(char *, uint64_t))(v14 + 8);
    goto LABEL_4;
  }
  v92 = 0u;
  v93 = 0u;
LABEL_23:
  sub_100012DDC((uint64_t)&v92, &qword_1005CF190);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
LABEL_24:

  return sub_100012DDC((uint64_t)v12, &qword_1005CEFD0);
}

BOOL FastSync.JoinActivityAction.isRelatedTo(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == a1;
}

uint64_t FastSync.JoinActivityAction.activity.getter(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a1);
  return dispatch thunk of GroupSessionProvider.activity.getter(ObjectType, a2);
}

uint64_t FastSync.LeaveActivityAction.isRelatedTo(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  char v20;
  __int128 v22;
  char v23;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for EditNoteActivity(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FastSync.LeaveActivityAction(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2 + *(int *)(v11 + 20);
  v15 = *(_BYTE *)(v14 + 16);
  v22 = *(_OWORD *)v14;
  v23 = v15;
  v16 = sub_100012E18(&qword_1005D58C8);
  Result.value.getter(&v24, v16);
  v17 = v24;
  ObjectType = swift_getObjectType(a1);
  if (!v17)
  {
    sub_100145220(v3, (uint64_t)v13, type metadata accessor for FastSync.LeaveActivityAction);
    goto LABEL_5;
  }
  swift_unknownObjectRelease(v17, v18);
  sub_100145220(v3, (uint64_t)v13, type metadata accessor for FastSync.LeaveActivityAction);
  if (v17 != a1)
  {
LABEL_5:
    dispatch thunk of GroupSessionProvider.activity.getter(ObjectType, a2);
    v20 = static EditNoteActivity.== infix(_:_:)(v13, v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_6;
  }
  v20 = 1;
LABEL_6:
  sub_100145264((uint64_t)v13, type metadata accessor for FastSync.LeaveActivityAction);
  return v20 & 1;
}

uint64_t type metadata accessor for FastSync.LeaveActivityAction(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D5950, (uint64_t)&nominal type descriptor for FastSync.LeaveActivityAction);
}

uint64_t FastSync.JoinActivityAction.perform()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1005D58D8 + dword_1005D58D8);
  v1 = (_QWORD *)swift_task_alloc(unk_1005D58DC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10023CE3C;
  return v3();
}

uint64_t sub_10023CE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *v3;
  swift_task_dealloc(v6);
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v9 = swift_unknownObjectRetain(a1);
  return v10(v9, a2);
}

uint64_t FastSync.LeaveActivityAction.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for EditNoteActivity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FastSync.LeaveActivityAction.perform()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1[22] = v0;
  v2 = sub_100012E18(&qword_1005D58E8);
  v1[23] = v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[24] = swift_task_alloc(v3);
  v1[25] = swift_task_alloc(v3);
  v1[26] = swift_task_alloc(v3);
  v1[27] = swift_task_alloc(v3);
  v1[28] = swift_task_alloc(v3);
  v1[29] = swift_task_alloc(v3);
  v4 = type metadata accessor for CancellationError(0);
  v1[30] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[31] = v5;
  v1[32] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GroupSessionProviderState(0);
  v1[33] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[34] = v7;
  v1[35] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for EditNoteActivity(0);
  v1[36] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[37] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[38] = swift_task_alloc(v10);
  v1[39] = swift_task_alloc(v10);
  v1[40] = swift_task_alloc(v10);
  v11 = type metadata accessor for Logger(0);
  v1[41] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[42] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[43] = swift_task_alloc(v13);
  v1[44] = swift_task_alloc(v13);
  v1[45] = swift_task_alloc(v13);
  return swift_task_switch(sub_10023D070, 0, 0);
}

void sub_10023D070()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *p_isa;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t ObjectType;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(void);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  os_log_type_t v125;
  NSObject *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  Swift::String v144;
  void *object;
  Swift::String v146;
  Swift::String v147;
  void *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  os_log_type_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *log;
  os_log_t logc;
  os_log_type_t loga;
  os_log_type_t logb;
  os_log_t logd;
  os_log_t v207;
  os_log_t v208;
  NSObject *v209;
  os_log_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;

  v1 = (_QWORD *)v0;
  v3 = v0 + 176;
  v2 = *(_QWORD *)(v0 + 176);
  v4 = type metadata accessor for FastSync.LeaveActivityAction(0);
  v5 = *(int *)(v4 + 24);
  *(_DWORD *)(v0 + 392) = v5;
  if ((*(_BYTE *)(v2 + v5) & 1) != 0)
  {
    v6 = type metadata accessor for FastSyncError(0);
    v7 = sub_100019C6C(&qword_1005DB2B0, (uint64_t (*)(uint64_t))&type metadata accessor for FastSyncError, (uint64_t)&protocol conformance descriptor for FastSyncError);
    swift_allocError(v6, v7, 0, 0);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, enum case for FastSyncError.leaveSessionMoreThanOnce(_:), v6);
    swift_willThrow(v9);
LABEL_12:
    v62 = v1[44];
    v61 = v1[45];
    v63 = v1[43];
    v65 = v1[39];
    v64 = v1[40];
    v66 = v1[38];
    v67 = v1[35];
    v68 = v1[32];
    v69 = v1;
    v70 = v1[29];
    v71 = v69[28];
    v189 = v69[27];
    v193 = v69[26];
    v198 = v69[25];
    logc = (os_log_t)v69[24];
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v189);
    swift_task_dealloc(v193);
    swift_task_dealloc(v198);
    swift_task_dealloc(logc);
    v72 = (void (*)(void))v69[1];
LABEL_13:
    v72();
    return;
  }
  p_isa = (_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  v11 = (__int128 *)(v2 + *(int *)(v4 + 20));
  v12 = *v11;
  v13 = *(_QWORD *)v11;
  if (*((_BYTE *)v11 + 16) != 1)
  {
    *(_OWORD *)(v0 + 88) = v12;
    swift_unknownObjectRetain(v12);
    v28 = static Logger.realtimeCollaboration.getter(v27);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v197 = v30;
      log = v29;
      v31 = swift_slowAlloc(22, -1);
      v192 = swift_slowAlloc(64, -1);
      v212 = v192;
      *(_DWORD *)v31 = 136315394;
      swift_beginAccess(v0 + 88, v0 + 16, 0, 0);
      v207 = (os_log_t)(v0 + 88);
      v32 = *p_isa;
      if (!*p_isa)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v33 = *(_QWORD *)(v0 + 320);
      v34 = *(_QWORD *)(v0 + 288);
      v181 = *(_QWORD *)(v0 + 296);
      v35 = *(_QWORD *)(v0 + 96);
      v36 = (_QWORD *)v0;
      ObjectType = swift_getObjectType(v32);
      swift_unknownObjectRetain(v32);
      dispatch thunk of GroupSessionProvider.activity.getter(ObjectType, v35);
      swift_unknownObjectRelease(v32, v38);
      v39 = sub_100019C6C(&qword_1005D22C8, (uint64_t (*)(uint64_t))&type metadata accessor for EditNoteActivity, (uint64_t)&protocol conformance descriptor for EditNoteActivity);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v34, v39);
      v42 = v41;
      (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v33, v34);
      *(_QWORD *)(v0 + 160) = sub_1003A4190(v40, v42, &v212);
      v188 = v0 + 168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v31 + 4);
      swift_bridgeObjectRelease(v42);
      *(_WORD *)(v31 + 12) = 2080;
      v43 = *(_QWORD *)(v0 + 88);
      if (!v43)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      v44 = *(_QWORD *)(v0 + 360);
      v45 = *(_QWORD *)(v0 + 336);
      v182 = v36[41];
      v185 = v44;
      v46 = v36[35];
      v47 = v36[33];
      v48 = v36[12];
      v49 = swift_getObjectType(v43);
      v50 = swift_unknownObjectRetain(v43);
      v51 = v48;
      v1 = v36;
      v52 = dispatch thunk of GroupSessionProvider.state.getter(v49, v51, v50);
      v54 = swift_unknownObjectRelease(v43, v53);
      CurrentValueSubject.value.getter(v54);
      swift_release(v52);
      v55 = String.init<A>(reflecting:)(v46, v47);
      v57 = v56;
      v36[21] = sub_1003A4190(v55, v56, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v188, v3, v31 + 14);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, log, v197, "%s: About to leave group session provider in state: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v192, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v192, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v185, v182);
      p_isa = &v207->isa;
    }
    else
    {
      v73 = *(_QWORD *)(v0 + 360);
      v75 = *(_QWORD *)(v0 + 328);
      v74 = *(_QWORD *)(v0 + 336);

      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
    }
    swift_beginAccess(p_isa, v3 - 136, 0, 0);
    v76 = v1[11];
    v1[46] = v76;
    if (v76)
    {
      v77 = v1[12];
      v78 = swift_getObjectType(v76);
      v79 = *((unsigned int *)&async function pointer to GroupSessionProvider.leave() + 1);
      swift_unknownObjectRetain(v76);
      v80 = (_QWORD *)swift_task_alloc(v79);
      v1[47] = v80;
      *v80 = v1;
      v80[1] = sub_10023DDCC;
      GroupSessionProvider.leave()(v78, v77);
      return;
    }
    __break(1u);
    goto LABEL_35;
  }
  v14 = v0 + 144;
  *(_QWORD *)(v0 + 152) = v12;
  swift_errorRetain(v12);
  v15 = sub_100012E18(&qword_1005D7A90);
  swift_willThrowTypedImpl(v0 + 152, v15, &protocol self-conformance witness table for Error);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 144) = v13;
  swift_errorRetain(v13);
  v18 = sub_100012E18(&qword_1005D7A90);
  if ((swift_dynamicCast(v16, v0 + 144, v18, v17, 0) & 1) == 0)
  {
    v58 = *(int *)(v0 + 392);
    v59 = *(_QWORD *)(v0 + 176);
    swift_errorRelease(v1[18]);
    swift_unknownObjectRelease(v1[11], v60);
    *(_BYTE *)(v59 + v58) = 1;
    goto LABEL_12;
  }
  swift_errorRelease(v13);
  swift_beginAccess(v0 + 88, v0 + 64, 0, 0);
  v19 = *p_isa;
  if (*p_isa)
  {
    v20 = *(_QWORD *)(v0 + 96);
    v21 = swift_getObjectType(*p_isa);
    v22 = swift_unknownObjectRetain(v19);
    v23 = dispatch thunk of GroupSessionProvider.state.getter(v21, v20, v22);
    v25 = swift_unknownObjectRelease(v19, v24);
    CurrentValueSubject.value.getter(v25);
    swift_release(v23);
    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
  v81 = *(_QWORD *)(v0 + 264);
  v82 = *(_QWORD *)(v0 + 272);
  v84 = v1[28];
  v83 = v1[29];
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v82 + 56))(v83, v26, 1, v1[33]);
  sub_10023F200(v83, v84);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v84, 1, v81) == 1)
  {
    v85 = v1[28];
    sub_10023F248(v1[29]);
    v86 = v85;
LABEL_33:
    sub_10023F248(v86);
    (*(void (**)(_QWORD, _QWORD))(v1[31] + 8))(v1[32], v1[30]);
    swift_errorRelease(v1[18]);
    swift_unknownObjectRelease(v1[11], v160);
    v161 = *((int *)v1 + 98);
    v163 = v1[44];
    v162 = v1[45];
    v164 = v1[43];
    v166 = v1[39];
    v165 = v1[40];
    v167 = v1[38];
    v168 = v1[35];
    v169 = v1[32];
    v170 = v1;
    v173 = v1 + 28;
    v172 = v1[28];
    v171 = v173[1];
    v196 = v170[27];
    v201 = v170[26];
    logd = (os_log_t)v170[25];
    v210 = (os_log_t)v170[24];
    *(_BYTE *)(v170[22] + v161) = 1;
    swift_task_dealloc(v162);
    swift_task_dealloc(v163);
    swift_task_dealloc(v164);
    swift_task_dealloc(v165);
    swift_task_dealloc(v166);
    swift_task_dealloc(v167);
    swift_task_dealloc(v168);
    swift_task_dealloc(v169);
    swift_task_dealloc(v171);
    swift_task_dealloc(v172);
    swift_task_dealloc(v196);
    swift_task_dealloc(v201);
    swift_task_dealloc(logd);
    swift_task_dealloc(v210);
    v72 = (void (*)(void))v170[1];
    goto LABEL_13;
  }
  v87 = v1[33];
  v88 = v1[34];
  v89 = v1[27];
  sub_10023F200(v1[28], v89);
  v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 88))(v89, v87);
  if (v90 == enum case for GroupSessionProviderState.invalidated(_:))
  {
    v91 = v1[33];
    v92 = v1[34];
    v93 = v1[28];
    v94 = (_QWORD *)v1[27];
    sub_10023F248(v1[29]);
    (*(void (**)(_QWORD *, uint64_t))(v92 + 96))(v94, v91);
    swift_errorRelease(*v94);
    v86 = v93;
    goto LABEL_33;
  }
  v95 = (uint64_t *)(v3 - 56);
  if (v90 != enum case for GroupSessionProviderState.waiting(_:)
    && v90 != enum case for GroupSessionProviderState.joined(_:))
  {
    v96 = v1[29];
    v97 = v1[24];
    v98 = (*(uint64_t (**)(_QWORD, _QWORD))(v1[34] + 8))(v1[27], v1[33]);
    static Logger.realtimeCollaboration.getter(v98);
    v99 = sub_10023F200(v96, v97);
    v100 = Logger.logObject.getter(v99);
    v102 = static os_log_type_t.error.getter(v100, v101);
    if (!os_log_type_enabled(v100, v102))
    {
      v156 = v1[42];
      v155 = v1[43];
      v157 = v1[41];
      v158 = v1[29];
      v159 = v1[24];

      sub_10023F248(v159);
      (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v155, v157);
      v119 = v158;
      goto LABEL_32;
    }
    loga = v102;
    v208 = (os_log_t)(v3 - 56);
    v103 = swift_slowAlloc(22, -1);
    v199 = swift_slowAlloc(64, -1);
    v212 = v199;
    *(_DWORD *)v103 = 136315394;
    v104 = *p_isa;
    if (*p_isa)
    {
      v183 = v1[42];
      v190 = v1[41];
      v194 = v1[43];
      v105 = v1[37];
      v106 = v1[38];
      v107 = v1[36];
      v186 = v1[29];
      v108 = v1[25];
      v176 = v1[24];
      v178 = v3 - 72;
      v179 = v1[23];
      v174 = v3 - 64;
      v109 = v1[12];
      v110 = swift_getObjectType(v104);
      swift_unknownObjectRetain(v104);
      dispatch thunk of GroupSessionProvider.activity.getter(v110, v109);
      swift_unknownObjectRelease(v104, v111);
      v112 = sub_100019C6C(&qword_1005D22C8, (uint64_t (*)(uint64_t))&type metadata accessor for EditNoteActivity, (uint64_t)&protocol conformance descriptor for EditNoteActivity);
      v113 = dispatch thunk of CustomStringConvertible.description.getter(v107, v112);
      v115 = v114;
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v106, v107);
      v1[13] = sub_1003A4190(v113, v115, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v178, v174, v103 + 4);
      swift_bridgeObjectRelease(v115);
      *(_WORD *)(v103 + 12) = 2080;
      sub_10023F200(v176, v108);
      v116 = String.init<A>(reflecting:)(v108, v179);
      v118 = v117;
      v1[14] = sub_1003A4190(v116, v117, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v174, v208, v103 + 14);
      swift_bridgeObjectRelease(v118);
      sub_10023F248(v176);
      _os_log_impl((void *)&_mh_execute_header, v100, loga, "%s: GroupSessionProvider is in an unknown state: %s", (uint8_t *)v103, 0x16u);
      swift_arrayDestroy(v199, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v199, -1, -1);
      swift_slowDealloc(v103, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v194, v190);
      v119 = v186;
LABEL_32:
      sub_10023F248(v119);
      v86 = v1[28];
      goto LABEL_33;
    }
    goto LABEL_38;
  }
  v120 = v1[29];
  v121 = v1[26];
  sub_10023F248(v1[28]);
  v122 = sub_10023F200(v120, v121);
  v123 = static Logger.realtimeCollaboration.getter(v122);
  v124 = static os_log_type_t.fault.getter(v123);
  v125 = v124;
  v126 = Logger.logObject.getter(v124);
  if (!os_log_type_enabled(v126, v125))
  {
    v150 = v1[44];
    v151 = v1[41];
    v152 = v1[42];
    v153 = v1[29];
    v154 = v1[26];

    sub_10023F248(v154);
    (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v150, v151);
    v86 = v153;
    goto LABEL_33;
  }
  logb = v125;
  v209 = v126;
  v127 = v1;
  v128 = (_QWORD *)(v3 - 48);
  v129 = v3 - 40;
  v130 = swift_slowAlloc(32, -1);
  v200 = swift_slowAlloc(64, -1);
  v211 = v200;
  *(_DWORD *)v130 = 136315650;
  v131 = StaticString.description.getter("MobileNotes/FastSyncPresenceActions.swift", 41, 2);
  v133 = v132;
  *v95 = sub_1003A4190(v131, v132, &v211);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v95, v128, v130 + 4);
  swift_bridgeObjectRelease(v133);
  *(_WORD *)(v130 + 12) = 2048;
  *v128 = 117;
  v195 = v129;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, v129, v130 + 14);
  *(_WORD *)(v130 + 22) = 2080;
  v212 = 0;
  v213 = 0xE000000000000000;
  _StringGuts.grow(_:)(78);
  v134 = *p_isa;
  if (*p_isa)
  {
    v1 = v127;
    v135 = v127[42];
    v187 = v127[41];
    v191 = v127[44];
    v136 = v127[39];
    v137 = v127[37];
    v138 = v1[36];
    v180 = v135;
    v184 = v1[29];
    v139 = v1[25];
    v175 = v1[26];
    v177 = v1[23];
    v140 = v1[12];
    v141 = swift_getObjectType(v134);
    swift_unknownObjectRetain(v134);
    dispatch thunk of GroupSessionProvider.activity.getter(v141, v140);
    swift_unknownObjectRelease(v134, v142);
    v143 = sub_100019C6C(&qword_1005D22C8, (uint64_t (*)(uint64_t))&type metadata accessor for EditNoteActivity, (uint64_t)&protocol conformance descriptor for EditNoteActivity);
    v144._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v138, v143);
    object = v144._object;
    String.append(_:)(v144);
    swift_bridgeObjectRelease(object);
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v136, v138);
    v146._object = (void *)0x8000000100484480;
    v146._countAndFlagsBits = 0xD00000000000004ALL;
    String.append(_:)(v146);
    sub_10023F200(v175, v139);
    v147._countAndFlagsBits = String.init<A>(reflecting:)(v139, v177);
    v148 = v147._object;
    String.append(_:)(v147);
    swift_bridgeObjectRelease(v148);
    v149 = v213;
    v1[17] = sub_1003A4190(v212, v213, &v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v195, v14, v130 + 24);
    swift_bridgeObjectRelease(v149);
    _os_log_impl((void *)&_mh_execute_header, v209, logb, "Failed assertion at %s:%lu: %s", (uint8_t *)v130, 0x20u);
    swift_arrayDestroy(v200, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v200, -1, -1);
    swift_slowDealloc(v130, -1, -1);

    sub_10023F248(v175);
    (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v191, v187);
    v86 = v184;
    goto LABEL_33;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_10023DDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023DF3C;
  else
    v3 = sub_10023DE30;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023DE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 368), a2);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 88), v3);
  v5 = *(_QWORD *)(v2 + 352);
  v4 = *(_QWORD *)(v2 + 360);
  v6 = *(_QWORD *)(v2 + 344);
  v8 = *(_QWORD *)(v2 + 312);
  v7 = *(_QWORD *)(v2 + 320);
  v9 = *(_QWORD *)(v2 + 304);
  v10 = *(_QWORD *)(v2 + 280);
  v11 = *(_QWORD *)(v2 + 256);
  v13 = *(_QWORD *)(v2 + 224);
  v12 = *(_QWORD *)(v2 + 232);
  v15 = *(_QWORD *)(v2 + 216);
  v16 = *(_QWORD *)(v2 + 208);
  v17 = *(_QWORD *)(v2 + 200);
  v18 = *(_QWORD *)(v2 + 192);
  *(_BYTE *)(*(_QWORD *)(v2 + 176) + *(int *)(v2 + 392)) = 1;
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_10023DF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  void *object;
  Swift::String v88;
  Swift::String v89;
  void *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  os_log_type_t v133;
  os_log_type_t v134;
  uint64_t v135;
  os_log_t loga;
  NSObject *log;
  os_log_t logb;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 368), a2);
  v3 = *(_QWORD *)(v2 + 384);
  *(_QWORD *)(v2 + 144) = v3;
  v4 = *(_QWORD *)(v2 + 256);
  v5 = *(_QWORD *)(v2 + 240);
  swift_errorRetain(v3);
  v6 = sub_100012E18(&qword_1005D7A90);
  if (!swift_dynamicCast(v4, v2 + 144, v6, v5, 0))
  {
    v16 = *(int *)(v2 + 392);
    v17 = *(_QWORD *)(v2 + 176);
    swift_errorRelease(*(_QWORD *)(v2 + 144));
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 88), v18);
    *(_BYTE *)(v17 + v16) = 1;
    v19 = *(_QWORD *)(v2 + 352);
    v20 = *(_QWORD *)(v2 + 344);
    v22 = *(_QWORD *)(v2 + 312);
    v21 = *(_QWORD *)(v2 + 320);
    v23 = *(_QWORD *)(v2 + 304);
    v24 = *(_QWORD *)(v2 + 280);
    v25 = *(_QWORD *)(v2 + 256);
    v26 = *(_QWORD *)(v2 + 232);
    v122 = *(_QWORD *)(v2 + 224);
    v125 = *(_QWORD *)(v2 + 216);
    v128 = *(_QWORD *)(v2 + 208);
    v132 = *(_QWORD *)(v2 + 200);
    loga = *(os_log_t *)(v2 + 192);
    swift_task_dealloc(*(_QWORD *)(v2 + 360));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(v132);
    swift_task_dealloc(loga);
    v27 = *(void (**)(void))(v2 + 8);
LABEL_22:
    v27();
    return;
  }
  v7 = (uint64_t *)(v2 + 88);
  swift_errorRelease(v3);
  swift_beginAccess(v2 + 88, v2 + 64, 0, 0);
  v8 = *(_QWORD *)(v2 + 88);
  if (v8)
  {
    v9 = *(_QWORD *)(v2 + 96);
    ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 88));
    v11 = swift_unknownObjectRetain(v8);
    v12 = dispatch thunk of GroupSessionProvider.state.getter(ObjectType, v9, v11);
    v14 = swift_unknownObjectRelease(v8, v13);
    CurrentValueSubject.value.getter(v14);
    swift_release(v12);
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  v28 = *(_QWORD *)(v2 + 264);
  v29 = *(_QWORD *)(v2 + 272);
  v31 = *(_QWORD *)(v2 + 224);
  v30 = *(_QWORD *)(v2 + 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v30, v15, 1, v28);
  sub_10023F200(v30, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v28) == 1)
  {
    v32 = *(_QWORD *)(v2 + 224);
    sub_10023F248(*(_QWORD *)(v2 + 232));
    v33 = v32;
LABEL_21:
    sub_10023F248(v33);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 248) + 8))(*(_QWORD *)(v2 + 256), *(_QWORD *)(v2 + 240));
    swift_errorRelease(*(_QWORD *)(v2 + 144));
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 88), v102);
    v104 = *(_QWORD *)(v2 + 352);
    v103 = *(_QWORD *)(v2 + 360);
    v105 = *(_QWORD *)(v2 + 344);
    v107 = *(_QWORD *)(v2 + 312);
    v106 = *(_QWORD *)(v2 + 320);
    v108 = *(_QWORD *)(v2 + 304);
    v109 = *(_QWORD *)(v2 + 280);
    v110 = *(_QWORD *)(v2 + 256);
    v112 = *(_QWORD *)(v2 + 224);
    v111 = *(_QWORD *)(v2 + 232);
    v127 = *(_QWORD *)(v2 + 216);
    v131 = *(_QWORD *)(v2 + 208);
    v135 = *(_QWORD *)(v2 + 200);
    logb = *(os_log_t *)(v2 + 192);
    *(_BYTE *)(*(_QWORD *)(v2 + 176) + *(int *)(v2 + 392)) = 1;
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v127);
    swift_task_dealloc(v131);
    swift_task_dealloc(v135);
    swift_task_dealloc(logb);
    v27 = *(void (**)(void))(v2 + 8);
    goto LABEL_22;
  }
  v34 = *(_QWORD *)(v2 + 264);
  v35 = *(_QWORD *)(v2 + 272);
  v36 = *(_QWORD *)(v2 + 216);
  sub_10023F200(*(_QWORD *)(v2 + 224), v36);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 88))(v36, v34);
  if (v37 == enum case for GroupSessionProviderState.invalidated(_:))
  {
    v38 = *(_QWORD *)(v2 + 264);
    v39 = *(_QWORD *)(v2 + 272);
    v40 = *(_QWORD *)(v2 + 224);
    v41 = *(_QWORD **)(v2 + 216);
    sub_10023F248(*(_QWORD *)(v2 + 232));
    (*(void (**)(_QWORD *, uint64_t))(v39 + 96))(v41, v38);
    swift_errorRelease(*v41);
    v33 = v40;
    goto LABEL_21;
  }
  if (v37 == enum case for GroupSessionProviderState.waiting(_:)
    || v37 == enum case for GroupSessionProviderState.joined(_:))
  {
    v66 = *(_QWORD *)(v2 + 232);
    v67 = *(_QWORD *)(v2 + 208);
    sub_10023F248(*(_QWORD *)(v2 + 224));
    v68 = sub_10023F200(v66, v67);
    v69 = static Logger.realtimeCollaboration.getter(v68);
    v70 = static os_log_type_t.fault.getter(v69);
    v71 = v70;
    v72 = Logger.logObject.getter(v70);
    if (!os_log_type_enabled(v72, v71))
    {
      v92 = *(_QWORD *)(v2 + 352);
      v93 = *(_QWORD *)(v2 + 328);
      v94 = *(_QWORD *)(v2 + 336);
      v95 = *(_QWORD *)(v2 + 232);
      v96 = *(_QWORD *)(v2 + 208);

      sub_10023F248(v96);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v92, v93);
      v33 = v95;
      goto LABEL_21;
    }
    v134 = v71;
    log = v72;
    v73 = swift_slowAlloc(32, -1);
    v130 = swift_slowAlloc(64, -1);
    v139 = v130;
    *(_DWORD *)v73 = 136315650;
    v74 = StaticString.description.getter("MobileNotes/FastSyncPresenceActions.swift", 41, 2);
    v76 = v75;
    *(_QWORD *)(v2 + 120) = sub_1003A4190(v74, v75, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 120, v2 + 128, v73 + 4);
    swift_bridgeObjectRelease(v76);
    *(_WORD *)(v73 + 12) = 2048;
    *(_QWORD *)(v2 + 128) = 117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 128, v2 + 136, v73 + 14);
    *(_WORD *)(v73 + 22) = 2080;
    v140 = 0;
    v141 = 0xE000000000000000;
    _StringGuts.grow(_:)(78);
    v77 = *v7;
    if (*v7)
    {
      v121 = *(_QWORD *)(v2 + 328);
      v124 = *(_QWORD *)(v2 + 352);
      v78 = *(_QWORD *)(v2 + 312);
      v79 = *(_QWORD *)(v2 + 288);
      v80 = *(_QWORD *)(v2 + 296);
      v117 = *(_QWORD *)(v2 + 336);
      v119 = *(_QWORD *)(v2 + 232);
      v81 = *(_QWORD *)(v2 + 200);
      v113 = *(_QWORD *)(v2 + 208);
      v115 = *(_QWORD *)(v2 + 184);
      v82 = *(_QWORD *)(v2 + 96);
      v83 = swift_getObjectType(v77);
      swift_unknownObjectRetain(v77);
      dispatch thunk of GroupSessionProvider.activity.getter(v83, v82);
      swift_unknownObjectRelease(v77, v84);
      v85 = sub_100019C6C(&qword_1005D22C8, (uint64_t (*)(uint64_t))&type metadata accessor for EditNoteActivity, (uint64_t)&protocol conformance descriptor for EditNoteActivity);
      v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v79, v85);
      object = v86._object;
      String.append(_:)(v86);
      swift_bridgeObjectRelease(object);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v78, v79);
      v88._object = (void *)0x8000000100484480;
      v88._countAndFlagsBits = 0xD00000000000004ALL;
      String.append(_:)(v88);
      sub_10023F200(v113, v81);
      v89._countAndFlagsBits = String.init<A>(reflecting:)(v81, v115);
      v90 = v89._object;
      String.append(_:)(v89);
      swift_bridgeObjectRelease(v90);
      v91 = v141;
      *(_QWORD *)(v2 + 136) = sub_1003A4190(v140, v141, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 136, v2 + 144, v73 + 24);
      swift_bridgeObjectRelease(v91);
      _os_log_impl((void *)&_mh_execute_header, log, v134, "Failed assertion at %s:%lu: %s", (uint8_t *)v73, 0x20u);
      swift_arrayDestroy(v130, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v130, -1, -1);
      swift_slowDealloc(v73, -1, -1);

      sub_10023F248(v113);
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v124, v121);
      v33 = v119;
      goto LABEL_21;
    }
    __break(1u);
  }
  else
  {
    v42 = *(_QWORD *)(v2 + 232);
    v43 = *(_QWORD *)(v2 + 192);
    v44 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 272) + 8))(*(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 264));
    static Logger.realtimeCollaboration.getter(v44);
    v45 = sub_10023F200(v42, v43);
    v46 = Logger.logObject.getter(v45);
    v48 = static os_log_type_t.error.getter(v46, v47);
    if (!os_log_type_enabled(v46, v48))
    {
      v98 = *(_QWORD *)(v2 + 336);
      v97 = *(_QWORD *)(v2 + 344);
      v99 = *(_QWORD *)(v2 + 328);
      v100 = *(_QWORD *)(v2 + 232);
      v101 = *(_QWORD *)(v2 + 192);

      sub_10023F248(v101);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
      v65 = v100;
      goto LABEL_20;
    }
    v133 = v48;
    v49 = swift_slowAlloc(22, -1);
    v129 = swift_slowAlloc(64, -1);
    v140 = v129;
    *(_DWORD *)v49 = 136315394;
    v50 = *v7;
    if (*v7)
    {
      v118 = *(_QWORD *)(v2 + 336);
      v123 = *(_QWORD *)(v2 + 328);
      v126 = *(_QWORD *)(v2 + 344);
      v51 = *(_QWORD *)(v2 + 296);
      v52 = *(_QWORD *)(v2 + 304);
      v53 = *(_QWORD *)(v2 + 288);
      v120 = *(_QWORD *)(v2 + 232);
      v54 = *(_QWORD *)(v2 + 200);
      v114 = *(_QWORD *)(v2 + 192);
      v116 = *(_QWORD *)(v2 + 184);
      v55 = *(_QWORD *)(v2 + 96);
      v56 = swift_getObjectType(v50);
      swift_unknownObjectRetain(v50);
      dispatch thunk of GroupSessionProvider.activity.getter(v56, v55);
      swift_unknownObjectRelease(v50, v57);
      v58 = sub_100019C6C(&qword_1005D22C8, (uint64_t (*)(uint64_t))&type metadata accessor for EditNoteActivity, (uint64_t)&protocol conformance descriptor for EditNoteActivity);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v53, v58);
      v61 = v60;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v53);
      *(_QWORD *)(v2 + 104) = sub_1003A4190(v59, v61, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 104, v2 + 112, v49 + 4);
      swift_bridgeObjectRelease(v61);
      *(_WORD *)(v49 + 12) = 2080;
      sub_10023F200(v114, v54);
      v62 = String.init<A>(reflecting:)(v54, v116);
      v64 = v63;
      *(_QWORD *)(v2 + 112) = sub_1003A4190(v62, v63, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 112, v2 + 120, v49 + 14);
      swift_bridgeObjectRelease(v64);
      sub_10023F248(v114);
      _os_log_impl((void *)&_mh_execute_header, v46, v133, "%s: GroupSessionProvider is in an unknown state: %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy(v129, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v129, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v126, v123);
      v65 = v120;
LABEL_20:
      sub_10023F248(v65);
      v33 = *(_QWORD *)(v2 + 224);
      goto LABEL_21;
    }
  }
  __break(1u);
}

uint64_t FastSync.PresenceAction.perform(onJoinActivity:onLeaveActivity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = type metadata accessor for FastSync.LeaveActivityAction(0);
  v5[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FastSync.PresenceAction(0);
  v5[11] = v7;
  v5[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10023E8F4, 0, 0);
}

uint64_t sub_10023E8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  char v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  sub_100145220(*(_QWORD *)(v0 + 72), v2, type metadata accessor for FastSync.PresenceAction);
  if (swift_getEnumCaseMultiPayload(v2, v1) == 1)
  {
    v3 = *(int **)(v0 + 56);
    sub_10018BA10(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    v11 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_10023EABC;
    v5 = *(_QWORD *)(v0 + 80);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(int **)(v0 + 40);
    v8 = *(_BYTE *)(v6 + 16);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)v6;
    *(_BYTE *)(v0 + 32) = v8;
    v11 = (uint64_t (*)(uint64_t))((char *)v7 + *v7);
    v9 = (_QWORD *)swift_task_alloc(v7[1]);
    *(_QWORD *)(v0 + 104) = v9;
    *v9 = v0;
    v9[1] = sub_10023E9E0;
    v5 = v0 + 16;
  }
  return v11(v5);
}

uint64_t sub_10023E9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023EBB4;
  else
    v3 = sub_10023EA44;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023EA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  sub_100145264(v2, type metadata accessor for FastSync.PresenceAction);
  v3 = *(_BYTE *)(v0 + 32);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v2 + 16) = v3;
  swift_storeEnumTagMultiPayload(v2, v1, 0);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023EABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023EC2C;
  else
    v3 = sub_10023EB20;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023EB20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  sub_100145264(v3, type metadata accessor for FastSync.PresenceAction);
  sub_100145220(v1, v3, type metadata accessor for FastSync.LeaveActivityAction);
  swift_storeEnumTagMultiPayload(v3, v2, 1);
  sub_100145264(v1, type metadata accessor for FastSync.LeaveActivityAction);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023EBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  sub_100145264(v2, type metadata accessor for FastSync.PresenceAction);
  v3 = *(_BYTE *)(v0 + 32);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v2 + 16) = v3;
  swift_storeEnumTagMultiPayload(v2, v1, 0);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023EC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  sub_100145264(v3, type metadata accessor for FastSync.PresenceAction);
  sub_100145220(v1, v3, type metadata accessor for FastSync.LeaveActivityAction);
  swift_storeEnumTagMultiPayload(v3, v2, 1);
  sub_100145264(v1, type metadata accessor for FastSync.LeaveActivityAction);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023ECC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[7] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FastSyncError(0);
  v1[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[12] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[13] = swift_task_alloc(v6);
  v1[14] = swift_task_alloc(v6);
  return swift_task_switch(sub_10023ED58, 0, 0);
}

uint64_t sub_10023ED58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t ObjectType;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  os_log_type_t type;
  uint64_t v42[2];

  v1 = *(_QWORD *)(v0 + 56);
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, enum case for FastSyncError.joinSessionMoreThanOnce(_:), v4);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v7 = v6(v2, v3, v4);
    v8 = static Logger.realtimeCollaboration.getter(v7);
    v9 = static os_log_type_t.fault.getter(v8);
    LOBYTE(v2) = v9;
    v10 = Logger.logObject.getter(v9);
    type = v2;
    v11 = os_log_type_enabled(v10, (os_log_type_t)v2);
    v13 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 72);
    if (v11)
    {
      v39 = *(_QWORD *)(v0 + 64);
      v40 = v6;
      v18 = swift_slowAlloc(32, -1);
      v38 = v17;
      v19 = swift_slowAlloc(64, -1);
      v42[0] = v19;
      *(_DWORD *)v18 = 136315650;
      v20 = StaticString.description.getter("MobileNotes/FastSyncPresenceActions.swift", 41, 2);
      v37 = v13;
      v22 = v21;
      *(_QWORD *)(v0 + 32) = sub_1003A4190(v20, v21, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v18 + 4);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v18 + 12) = 2048;
      *(_QWORD *)(v0 + 40) = 49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v18 + 14);
      *(_WORD *)(v18 + 22) = 2080;
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)(v12, v0 + 16, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v23 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 48) = sub_1003A4190(*(_QWORD *)(v0 + 16), v23, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v18 + 24);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v10, type, "Failed assertion at %s:%lu: %s", (uint8_t *)v18, 0x20u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v24 = v18;
      v6 = v40;
      swift_slowDealloc(v24, -1, -1);

      v25 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v25(v12, v15);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v14, v39);
    }
    else
    {

      v25 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v25(v12, v15);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v14, v16);
    }
    v30 = *(_QWORD *)(v0 + 112);
    v31 = *(_QWORD *)(v0 + 88);
    v32 = sub_100019C6C(&qword_1005DB2B0, (uint64_t (*)(uint64_t))&type metadata accessor for FastSyncError, (uint64_t)&protocol conformance descriptor for FastSyncError);
    swift_allocError(v31, v32, 0, 0);
    v34 = v6(v33, v30, v31);
    swift_willThrow(v34);
    v25(v30, v31);
    v35 = *(_QWORD *)(v0 + 104);
    v36 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v26 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)v1);
    v28 = (_QWORD *)swift_task_alloc(async function pointer to GroupSessionProvider.join()[1]);
    *(_QWORD *)(v0 + 120) = v28;
    *v28 = v0;
    v28[1] = sub_10023F0D8;
    return GroupSessionProvider.join()(ObjectType, v26);
  }
}

uint64_t sub_10023F0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023F1A4;
  else
    v3 = sub_10023F13C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023F13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(uint64_t **)(v0 + 56);
  v5 = *v4;
  v6 = v4[1];
  *((_BYTE *)v4 + 16) = 1;
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v6);
}

uint64_t sub_10023F1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(v0 + 56) + 16) = 1;
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023F200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D58E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10023F248(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18(&qword_1005D58E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for FastSync.PresenceAction(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D5A00, (uint64_t)&nominal type descriptor for FastSync.PresenceAction);
}

uint64_t _s18JoinActivityActionVwCP(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t _s18JoinActivityActionVwxx(_QWORD *a1, uint64_t a2)
{
  return swift_unknownObjectRelease(*a1, a2);
}

uint64_t *_s18JoinActivityActionVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6, v7);
  a1[1] = v5;
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t _s18JoinActivityActionVwta(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease(*(_QWORD *)a1, a2);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for FastSync.JoinActivityAction()
{
  return &type metadata for FastSync.JoinActivityAction;
}

_QWORD *_s19LeaveActivityActionVwCP(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for EditNoteActivity(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = *((_QWORD *)v10 + 1);
    v13 = v10[16];
    sub_10018B6BC(*(_QWORD *)v10, v12, v13);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v9[16] = v13;
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t _s19LeaveActivityActionVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return sub_10018B6C8(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8), *(_BYTE *)(a1 + *(int *)(a2 + 20) + 16));
}

uint64_t _s19LeaveActivityActionVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  sub_10018B6BC(*(_QWORD *)v9, v11, v12);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t _s19LeaveActivityActionVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v6 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  sub_10018B6BC(*(_QWORD *)v9, v11, v12);
  v13 = *(_QWORD *)v8;
  v14 = *(_QWORD *)(v8 + 8);
  v15 = *(_BYTE *)(v8 + 16);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  sub_10018B6C8(v13, v14, v15);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t _s19LeaveActivityActionVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t _s19LeaveActivityActionVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v6 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 16);
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_BYTE *)(v8 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = v10;
  sub_10018B6C8(v11, v12, v13);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t _s19LeaveActivityActionVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023F6C8);
}

uint64_t sub_10023F6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for EditNoteActivity(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t _s19LeaveActivityActionVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023F750);
}

uint64_t sub_10023F750(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for EditNoteActivity(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 16) = -(char)a2;
  return result;
}

uint64_t sub_10023F7CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for EditNoteActivity(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10045D358;
    v4[2] = &unk_10045D370;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _s14PresenceActionOwCP(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for EditNoteActivity(0);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = type metadata accessor for FastSync.LeaveActivityAction(0);
      v9 = *(int *)(v8 + 20);
      v10 = a1 + v9;
      v11 = (uint64_t)a2 + v9;
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_BYTE *)(v11 + 16);
      sub_10018B6BC(*(_QWORD *)v11, v13, v14);
      *(_QWORD *)v10 = v12;
      *(_QWORD *)(v10 + 8) = v13;
      *(_BYTE *)(v10 + 16) = v14;
      *(_BYTE *)(a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
      v15 = a1;
      v16 = a3;
      v17 = 1;
    }
    else
    {
      v19 = *(_OWORD *)a2;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      swift_unknownObjectRetain(v19);
      v15 = a1;
      v16 = a3;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return a1;
}

uint64_t _s14PresenceActionOwxx(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;

  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
    return swift_unknownObjectRelease(*a1, v3);
  v4 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (char *)a1 + *(int *)(type metadata accessor for FastSync.LeaveActivityAction(0) + 20);
  return sub_10018B6C8(*(_QWORD *)v5, *((_QWORD *)v5 + 1), v5[16]);
}

uint64_t _s14PresenceActionOwcp(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for EditNoteActivity(0);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = type metadata accessor for FastSync.LeaveActivityAction(0);
    v8 = *(int *)(v7 + 20);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_BYTE *)(v10 + 16);
    sub_10018B6BC(*(_QWORD *)v10, v12, v13);
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v13;
    *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *((_BYTE *)a2 + *(int *)(v7 + 24));
    v14 = a1;
    v15 = a3;
    v16 = 1;
  }
  else
  {
    v17 = *a2;
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    swift_unknownObjectRetain(v17);
    v14 = a1;
    v15 = a3;
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v15, v16);
  return a1;
}

uint64_t _s14PresenceActionOwca(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if ((__int128 *)a1 != a2)
  {
    sub_100145264(a1, type metadata accessor for FastSync.PresenceAction);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for EditNoteActivity(0);
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = type metadata accessor for FastSync.LeaveActivityAction(0);
      v8 = *(int *)(v7 + 20);
      v9 = a1 + v8;
      v10 = (uint64_t)a2 + v8;
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      v13 = *(_BYTE *)(v10 + 16);
      sub_10018B6BC(*(_QWORD *)v10, v12, v13);
      *(_QWORD *)v9 = v11;
      *(_QWORD *)(v9 + 8) = v12;
      *(_BYTE *)(v9 + 16) = v13;
      *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *((_BYTE *)a2 + *(int *)(v7 + 24));
      v14 = a1;
      v15 = a3;
      v16 = 1;
    }
    else
    {
      v17 = *a2;
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      swift_unknownObjectRetain(v17);
      v14 = a1;
      v15 = a3;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

_BYTE *_s14PresenceActionOwtk(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for EditNoteActivity(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = type metadata accessor for FastSync.LeaveActivityAction(0);
    v8 = *(int *)(v7 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v9[16] = v10[16];
    a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *_s14PresenceActionOwta(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (a1 != a2)
  {
    sub_100145264((uint64_t)a1, type metadata accessor for FastSync.PresenceAction);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for EditNoteActivity(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = type metadata accessor for FastSync.LeaveActivityAction(0);
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = &a2[v8];
      *(_OWORD *)v9 = *(_OWORD *)v10;
      v9[16] = v10[16];
      a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10023FD58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10045D398;
  result = type metadata accessor for FastSync.LeaveActivityAction(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10023FDCC()
{
  return 8;
}

unint64_t sub_10023FDD4()
{
  return sub_10023FEAC();
}

uint64_t type metadata accessor for FolderComposerFilterCellQuickNotes()
{
  return objc_opt_self(_TtC11MobileNotes34FolderComposerFilterCellQuickNotes);
}

unint64_t sub_10023FEAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D5A60;
  if (!qword_1005D5A60)
  {
    v1 = objc_opt_self(ICQuickNotesFilterTypeSelection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D5A60);
  }
  return result;
}

uint64_t sub_10023FEE8(uint64_t a1)
{
  return sub_10023FFC4(a1, &qword_1005CFAC0, ICAttachment_ptr);
}

uint64_t sub_10023FEFC(uint64_t a1)
{
  return sub_10023FFC4(a1, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
}

uint64_t sub_10023FF10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_100242C20(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for IndexPath(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_100242F5C(result, v5, a1, a2);
    v7 = type metadata accessor for IndexPath(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_10023FFB0(uint64_t a1)
{
  return sub_10023FFC4(a1, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
}

uint64_t sub_10023FFC4(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.startIndex.getter(v7);
    v10 = v9;
    v11 = __CocoaSet.endIndex.getter(v7);
    v13 = static __CocoaSet.Index.== infix(_:_:)(v8, v10, v11, v12);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_100242B94(a1);
  if ((v17 & 1) == 0)
  {
    v10 = v16;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v16)
    {
      v8 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_1001EDA28(v8, v10, v6 != 0);
        return 0;
      }
LABEL_10:
      sub_100242CC0(v8, v10, v6 != 0, a1, a2, a3);
      v14 = v18;
      sub_1001EDA28(v8, v10, v6 != 0);
      return v14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1002400E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  _QWORD v36[6];
  void *v37;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
    v5 = sub_10024390C();
    isUniquelyReferenced_nonNull_native = Set.Iterator.init(_cocoa:)(v3, v4, v5);
    v1 = v36[1];
    v35 = v36[2];
    v8 = v36[3];
    v7 = v36[4];
    v9 = v36[5];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v35 = a1 + 56;
    v8 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v7 = 0;
  }
  v32 = v8;
  v34 = (unint64_t)(v8 + 64) >> 6;
  v33 = _swiftEmptyArrayStorage;
  while (1)
  {
    v13 = v7;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    v16 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v16)
      goto LABEL_41;
    v17 = v16;
    v36[0] = v16;
    v18 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
    swift_unknownObjectRetain(v17);
    swift_dynamicCast(&v37, v36, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
    v19 = v37;
    swift_unknownObjectRelease(v17, v20);
    if (!v19)
      goto LABEL_41;
LABEL_34:
    v24 = objc_msgSend(v19, "ic_participantName", v32);
    if (v24)
    {
      v25 = v24;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10016ACE0(0, v33[2] + 1, 1, v33);
        v33 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v30 = v33[2];
      v29 = v33[3];
      if (v30 >= v29 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10016ACE0((_QWORD *)(v29 > 1), v30 + 1, 1, v33);
        v33 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v33[2] = v30 + 1;
      v31 = &v33[2 * v30];
      v31[4] = v26;
      v31[5] = v28;
    }
    else
    {

    }
  }
  if (v9)
  {
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v7 << 6);
LABEL_33:
    v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v19)
      goto LABEL_41;
    goto LABEL_34;
  }
  v21 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v21 >= v34)
      goto LABEL_41;
    v22 = *(_QWORD *)(v35 + 8 * v21);
    ++v7;
    if (!v22)
    {
      v7 = v13 + 2;
      if (v13 + 2 >= v34)
        goto LABEL_41;
      v22 = *(_QWORD *)(v35 + 8 * v7);
      if (!v22)
      {
        v7 = v13 + 3;
        if (v13 + 3 >= v34)
          goto LABEL_41;
        v22 = *(_QWORD *)(v35 + 8 * v7);
        if (!v22)
        {
          v7 = v13 + 4;
          if (v13 + 4 >= v34)
            goto LABEL_41;
          v22 = *(_QWORD *)(v35 + 8 * v7);
          if (!v22)
          {
            v7 = v13 + 5;
            if (v13 + 5 >= v34)
              goto LABEL_41;
            v22 = *(_QWORD *)(v35 + 8 * v7);
            if (!v22)
            {
              v23 = v13 + 6;
              while (v34 != v23)
              {
                v22 = *(_QWORD *)(v35 + 8 * v23++);
                if (v22)
                {
                  v7 = v23 - 1;
                  goto LABEL_32;
                }
              }
LABEL_41:
              sub_1001452E0(v1);
              return;
            }
          }
        }
      }
    }
LABEL_32:
    v9 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v7 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

double InsertMentionIntent.init()@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_100243004((uint64_t *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t InsertMentionIntent.mentionText.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t InsertMentionIntent.mentionText.setter(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return IntentParameter.wrappedValue.setter(v3);
}

uint64_t InsertAllMentionIntent.target.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002436C4(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100012DDC(a1, (uint64_t *)&unk_1005D0B60);
}

void *InsertMentionIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static InsertMentionIntent.persistentIdentifier;
}

unint64_t static InsertMentionIntent.persistentIdentifier.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1002405A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static InsertMentionIntent.title);
  sub_10012A0B0(v10, (uint64_t)static InsertMentionIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x4D20747265736E49, 0xEE006E6F69746E65);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t InsertMentionIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEB48 != -1)
    swift_once(&qword_1005CEB48, sub_1002405A0);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static InsertMentionIntent.title);
}

uint64_t static InsertMentionIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEB48 != -1)
    swift_once(&qword_1005CEB48, sub_1002405A0);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static InsertMentionIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static InsertMentionIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000042, 0x8000000100484530);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static InsertMentionIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005D5A68);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D5A70);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B27A4();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 2, &type metadata for InsertMentionIntent, v6);
  v7._object = (void *)0x8000000100484580;
  v7._countAndFlagsBits = 0xD000000000000013;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10045D3E0, v8);
  v10 = sub_100012E18(&qword_1005D5A78);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 544106784;
  v11._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_10045D408, v12);
  v14 = sub_100012E18(&qword_1005D5A80);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for InsertMentionIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for InsertMentionIntent, v6);
}

uint64_t InsertNoteLinkIntent.insertionRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t InsertNoteLinkIntent.insertionRange.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = result;
  *(_QWORD *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = a3 & 1;
  return result;
}

uint64_t (*InsertNoteLinkIntent.insertionRange.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t InsertMentionIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[19] = a1;
  v2[20] = v1;
  v3 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v2[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NoteEntity(0);
  v2[23] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[24] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v7);
  v2[26] = swift_task_alloc(v7);
  return swift_task_switch(sub_100240C80, 0, 0);
}

uint64_t sub_100240C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD **)(v0 + 176);
  v4 = *(_QWORD **)(v0 + 160);
  v5 = swift_allocObject(&unk_100560800, 24, 7);
  *(_QWORD *)(v0 + 216) = v5;
  *(_QWORD *)(v5 + 16) = 0;
  v6 = swift_allocObject(&unk_100560828, 24, 7);
  *(_QWORD *)(v0 + 224) = v6;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v0 + 232) = *v4;
  IntentParameter.wrappedValue.getter(v3);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 168);
    v8 = sub_100012DDC(*(_QWORD *)(v0 + 176), (uint64_t *)&unk_1005D0B60);
    v9 = IntentParameter.projectedValue.getter(v8);
    v10 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    v11 = type metadata accessor for AppIntentError(0);
    v12 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v11, v12, 0, 0);
    IntentParameter.needsValueError(_:)(v7);
    swift_release(v9);
    v13 = sub_100012DDC(v7, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v13);
    swift_release(v6);
    swift_release(v5);
    v14 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 160);
    sub_100243780(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 208));
    *(_QWORD *)(v0 + 240) = *(_QWORD *)(v18 + 40);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 104));
    v19 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v0 + 248) = v19;
    v20 = swift_allocObject(&unk_100560850, 32, 7);
    *(_QWORD *)(v0 + 256) = v20;
    *(_QWORD *)(v20 + 16) = v5;
    *(_QWORD *)(v20 + 24) = v6;
    v21 = unk_1005D0B54;
    v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D0B50 + dword_1005D0B50);
    swift_retain(v5);
    swift_retain(v6);
    v22 = (_QWORD *)swift_task_alloc(v21);
    *(_QWORD *)(v0 + 264) = v22;
    *v22 = v0;
    v22[1] = sub_100240EDC;
    return v23((uint64_t)v23, v19, (uint64_t)sub_1002437F0, v20);
  }
}

uint64_t sub_100240EDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  v5 = v2 + 248;
  v4 = *(void **)(v2 + 248);
  swift_release(*(_QWORD *)(v5 + 8));

  if (v0)
    v6 = sub_1002424C0;
  else
    v6 = sub_100240F4C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100240F4C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v37;
  void *v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 216);
  swift_beginAccess(v1 + 16, v0 + 16, 0, 0);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v0 + 280) = v2;
  if (!v2)
  {
    v13 = *(_QWORD *)(v0 + 224);
    v14 = swift_beginAccess(v13 + 16, v0 + 40, 0, 0);
    if (*(_QWORD *)(v13 + 16))
    {
      v16 = *(_QWORD *)(v0 + 216);
      v15 = *(_QWORD *)(v0 + 224);
      v17 = *(_QWORD *)(v0 + 208);
      v18 = sub_10013F4E8();
      v19 = swift_allocError(&type metadata for AppIntentsError, v18, 0, 0);
      *v20 = 3;
      swift_willThrow(v19);
      v21 = v17;
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 224);
      v26 = *(_QWORD *)(v0 + 208);
      v16 = *(_QWORD *)(v0 + 216);
      v27 = *(_QWORD *)(v0 + 168);
      v28 = IntentParameter.projectedValue.getter(v14);
      v29 = type metadata accessor for IntentDialog(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 1, 1, v29);
      v30 = type metadata accessor for AppIntentError(0);
      v31 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
      swift_allocError(v30, v31, 0, 0);
      IntentParameter.needsValueError(_:)(v27);
      swift_release(v28);
      v32 = sub_100012DDC(v27, (uint64_t *)&unk_1005CEE20);
      swift_willThrow(v32);
      v21 = v26;
    }
    sub_10014FFE0(v21);
    goto LABEL_10;
  }
  v3 = v2;
  v4 = objc_msgSend(v3, "managedObjectContext");
  *(_QWORD *)(v0 + 288) = v4;
  if (!v4)
  {
    *(_QWORD *)(v0 + 416) = 0;
    v22 = objc_msgSend(*(id *)(v0 + 280), "managedObjectContext");
    *(_QWORD *)(v0 + 424) = v22;
    if (v22)
    {
      v23 = v0 + 96;
      v24 = swift_allocObject(&unk_1005608A0, 24, 7);
      *(_QWORD *)(v0 + 432) = v24;
      *(_QWORD *)(v24 + 16) = 0;
      v25 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(_:)[1]);
      *(_QWORD *)(v0 + 440) = v25;
      v9 = sub_100012E18(&qword_1005D4718);
      *v25 = v0;
      v25[1] = sub_100241E14;
      v10 = sub_100244080;
LABEL_13:
      v11 = v23;
      v12 = v24;
      return NSManagedObjectContext.perform<A>(_:)(v11, v10, v12, v9);
    }
    swift_bridgeObjectRelease(0);
    *(_QWORD *)(v0 + 448) = 0;
    v37 = objc_msgSend(*(id *)(v0 + 280), "managedObjectContext");
    *(_QWORD *)(v0 + 456) = v37;
    if (v37)
    {
      v23 = v0 + 144;
      v38 = *(void **)(v0 + 280);
      v24 = swift_allocObject(&unk_100560878, 24, 7);
      *(_QWORD *)(v0 + 464) = v24;
      *(_QWORD *)(v24 + 16) = v38;
      v39 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v40 = v38;
      v41 = (_QWORD *)swift_task_alloc(v39);
      *(_QWORD *)(v0 + 472) = v41;
      v9 = sub_100012E18(&qword_1005D4718);
      *v41 = v0;
      v41[1] = sub_100242160;
      v10 = sub_100243808;
      goto LABEL_13;
    }
    v42 = swift_bridgeObjectRelease(0);
    v43 = *(void **)(v0 + 416);
    v44 = *(void **)(v0 + 280);
    v16 = *(_QWORD *)(v0 + 216);
    v15 = *(_QWORD *)(v0 + 224);
    v45 = *(_QWORD *)(v0 + 208);
    v46 = *(_QWORD *)(v0 + 168);
    v47 = IntentParameter.projectedValue.getter(v42);
    v48 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v46, 1, 1, v48);
    v49 = type metadata accessor for AppIntentError(0);
    v50 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v49, v50, 0, 0);
    IntentParameter.needsValueError(_:)(v46);
    swift_release(v47);
    v51 = sub_100012DDC(v46, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v51);

    sub_10014FFE0(v45);
    swift_bridgeObjectRelease(0);
LABEL_10:
    swift_release(v15);
    swift_release(v16);
    v33 = *(_QWORD *)(v0 + 200);
    v35 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = swift_allocObject(&unk_100560918, 24, 7);
  *(_QWORD *)(v0 + 296) = v5;
  *(_QWORD *)(v5 + 16) = v3;
  v6 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v7 = v3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 304) = v8;
  v9 = sub_1000163BC(0, &qword_1005D5A90, ICMentionsController_ptr);
  *v8 = v0;
  v8[1] = sub_1002413C0;
  v10 = sub_1002438BC;
  v11 = v0 + 112;
  v12 = v5;
  return NSManagedObjectContext.perform<A>(_:)(v11, v10, v12, v9);
}

uint64_t sub_1002413C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  v2 = *(void **)(*(_QWORD *)v0 + 288);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_release(v1);

  return swift_task_switch(sub_100241424, 0, 0);
}

uint64_t sub_100241424()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  NSString v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  id v42;
  _QWORD *v43;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(void **)(v0 + 112);
  *(_QWORD *)(v0 + 312) = v2;
  v3 = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 64));
  v4 = *(_QWORD *)(v0 + 72);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v6 = objc_msgSend(v3, "participantsForKey:", v5);

  if (!v6)
  {
    v9 = 0;
LABEL_13:
    *(_QWORD *)(v0 + 416) = v3;
    v32 = objc_msgSend(*(id *)(v0 + 280), "managedObjectContext");
    *(_QWORD *)(v0 + 424) = v32;
    if (v32)
    {
      v33 = v0 + 96;
      v34 = swift_allocObject(&unk_1005608A0, 24, 7);
      *(_QWORD *)(v0 + 432) = v34;
      *(_QWORD *)(v34 + 16) = v9;
      v35 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(_:)[1]);
      *(_QWORD *)(v0 + 440) = v35;
      v28 = sub_100012E18(&qword_1005D4718);
      *v35 = v0;
      v35[1] = sub_100241E14;
      v29 = sub_100244080;
LABEL_20:
      v30 = v33;
      v31 = v34;
      return NSManagedObjectContext.perform<A>(_:)(v30, v29, v31, v28);
    }
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v0 + 448) = 0;
    v36 = objc_msgSend(*(id *)(v0 + 280), "managedObjectContext");
    *(_QWORD *)(v0 + 456) = v36;
    if (v36)
    {
      v37 = *(void **)(v0 + 280);
      v38 = swift_allocObject(&unk_100560878, 24, 7);
      *(_QWORD *)(v0 + 464) = v38;
      *(_QWORD *)(v38 + 16) = v37;
      v39 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v40 = v37;
      v41 = (_QWORD *)swift_task_alloc(v39);
      *(_QWORD *)(v0 + 472) = v41;
      v28 = sub_100012E18(&qword_1005D4718);
      *v41 = v0;
      v41[1] = sub_100242160;
      v29 = sub_100243808;
      v30 = v0 + 144;
      v31 = v38;
      return NSManagedObjectContext.perform<A>(_:)(v30, v29, v31, v28);
    }
    v45 = swift_bridgeObjectRelease(0);
    v46 = *(void **)(v0 + 416);
    goto LABEL_24;
  }
  v7 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
  v8 = sub_10024390C();
  v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

  if ((v9 & 0xC000000000000001) == 0)
  {
    v11 = *(_QWORD *)(v9 + 16);
    if (v11)
      goto LABEL_7;
LABEL_18:
    v42 = objc_msgSend(*(id *)(v0 + 280), "managedObjectContext");
    *(_QWORD *)(v0 + 320) = v42;
    if (v42)
    {
      v33 = v0 + 136;
      v34 = swift_allocObject(&unk_1005608F0, 24, 7);
      *(_QWORD *)(v0 + 328) = v34;
      *(_QWORD *)(v34 + 16) = v9;
      v43 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(_:)[1]);
      *(_QWORD *)(v0 + 336) = v43;
      v28 = sub_100012E18(&qword_1005D4718);
      *v43 = v0;
      v43[1] = sub_1002419FC;
      v29 = sub_1002438A4;
      goto LABEL_20;
    }
    v45 = swift_bridgeObjectRelease(v9);
    v46 = *(void **)(v0 + 312);
LABEL_24:
    v47 = *(void **)(v0 + 280);
    v48 = *(_QWORD *)(v0 + 216);
    v49 = *(_QWORD *)(v0 + 224);
    v50 = *(_QWORD *)(v0 + 208);
    v51 = *(_QWORD *)(v0 + 168);
    v52 = IntentParameter.projectedValue.getter(v45);
    v53 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v51, 1, 1, v53);
    v54 = type metadata accessor for AppIntentError(0);
    v55 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v54, v55, 0, 0);
    IntentParameter.needsValueError(_:)(v51);
    swift_release(v52);
    v56 = sub_100012DDC(v51, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v56);

    sub_10014FFE0(v50);
    swift_bridgeObjectRelease(0);
    goto LABEL_26;
  }
  if (v9 < 0)
    v10 = v9;
  else
    v10 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v11 = __CocoaSet.count.getter(v10);
  swift_bridgeObjectRelease(v9);
  if (!v11)
    goto LABEL_18;
LABEL_7:
  if (!v9)
    goto LABEL_13;
  if (v11 != 1)
    goto LABEL_13;
  swift_bridgeObjectRetain(v9);
  v13 = (void *)sub_10023FFC4(v12, &qword_1005D8540, CKShareParticipant_ptr);
  *(_QWORD *)(v0 + 344) = v13;
  swift_bridgeObjectRelease(v9);
  if (!v13)
    goto LABEL_13;
  v14 = *(void **)(v0 + 280);
  swift_bridgeObjectRelease(v9);
  v15 = objc_msgSend(v14, "managedObjectContext");
  *(_QWORD *)(v0 + 352) = v15;
  v16 = *(void **)(v0 + 280);
  if (v15)
  {
    v18 = *(_QWORD *)(v0 + 232);
    v17 = *(_QWORD *)(v0 + 240);
    v19 = *(_OWORD **)(v0 + 160);
    v20 = *(_QWORD *)(v1 + 8);
    v21 = swift_allocObject(&unk_1005608C8, 80, 7);
    *(_QWORD *)(v0 + 360) = v21;
    v23 = v19[1];
    v22 = v19[2];
    *(_OWORD *)(v21 + 16) = *v19;
    *(_OWORD *)(v21 + 32) = v23;
    *(_OWORD *)(v21 + 48) = v22;
    *(_QWORD *)(v21 + 64) = v16;
    *(_QWORD *)(v21 + 72) = v13;
    v24 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v25 = v16;
    swift_retain(v18);
    swift_retain(v20);
    swift_retain(v17);
    v26 = v13;
    v27 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v0 + 368) = v27;
    v28 = sub_100012E18(&qword_1005D0B18);
    *v27 = v0;
    v27[1] = sub_100241CAC;
    v29 = sub_100243888;
    v30 = v0 + 80;
    v31 = v21;
    return NSManagedObjectContext.perform<A>(_:)(v30, v29, v31, v28);
  }
  v48 = *(_QWORD *)(v0 + 216);
  v49 = *(_QWORD *)(v0 + 224);
  v57 = *(_QWORD *)(v0 + 208);

  type metadata accessor for ICError(0);
  v59 = v58;
  *(_QWORD *)(v0 + 128) = 227;
  v60 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
  v61 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
  v62 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 120), v0 + 128, v60, v59, v61);
  swift_willThrow(v62);
  sub_10014FFE0(v57);
LABEL_26:
  swift_release(v49);
  swift_release(v48);
  v63 = *(_QWORD *)(v0 + 200);
  v65 = *(_QWORD *)(v0 + 168);
  v64 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002419FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 328);
  v2 = *(void **)(*(_QWORD *)v0 + 320);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  swift_release(v1);

  return swift_task_switch(sub_100241A60, 0, 0);
}

uint64_t sub_100241A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(v1 + 136);
  if (v2 && *(_QWORD *)(v2 + 16) >= 2uLL)
  {
    v3 = *(void **)(v1 + 312);
    v4 = *(void **)(v1 + 280);
    v5 = *(_QWORD *)(v1 + 216);
    v6 = *(_QWORD *)(v1 + 224);
    v7 = *(_QWORD *)(v1 + 208);
    v8 = *(_QWORD *)(v1 + 168);
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 136));
    v10 = IntentParameter.projectedValue.getter(v9);
    v11 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = type metadata accessor for AppIntentError(0);
    v13 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v12, v13, 0, 0);
    IntentParameter.needsDisambiguationError(among:dialog:)(v2, v8);
    swift_release(v10);
    swift_bridgeObjectRelease(v2);
    v14 = sub_100012DDC(v8, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v14);

    sub_10014FFE0(v7);
    swift_bridgeObjectRelease(v2);
    swift_release(v6);
    swift_release(v5);
  }
  else
  {
    v15 = *(void **)(v1 + 312);
    v16 = *(void **)(v1 + 280);
    v17 = *(_QWORD *)(v1 + 216);
    v18 = *(_QWORD *)(v1 + 224);
    v19 = *(_QWORD *)(v1 + 208);
    v20 = *(_QWORD *)(v1 + 168);
    v21 = IntentParameter.projectedValue.getter(a1);
    v22 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 1, 1, v22);
    v23 = type metadata accessor for AppIntentError(0);
    v24 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v23, v24, 0, 0);
    IntentParameter.needsValueError(_:)(v20);
    swift_release(v21);
    v25 = sub_100012DDC(v20, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v25);

    sub_10014FFE0(v19);
    swift_release(v18);
    swift_release(v17);
    swift_bridgeObjectRelease(v2);
  }
  v26 = *(_QWORD *)(v1 + 200);
  v28 = *(_QWORD *)(v1 + 168);
  v27 = *(_QWORD *)(v1 + 176);
  swift_task_dealloc(*(_QWORD *)(v1 + 208));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100241CAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  *(_QWORD *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);
  v5 = v2 + 352;
  v4 = *(void **)(v2 + 352);
  swift_release(*(_QWORD *)(v5 + 8));

  if (v0)
    v6 = sub_100242534;
  else
    v6 = sub_100241D1C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100241D1C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  _QWORD *v8;

  v1 = *(void **)(v0 + 344);
  v2 = *(void **)(v0 + 280);

  v3 = *(void **)(v0 + 80);
  v4 = *(void **)(v0 + 88);
  *(_QWORD *)(v0 + 384) = v3;
  *(_QWORD *)(v0 + 392) = v4;
  v5 = dword_1005D7854;
  v6 = v3;
  v7 = v4;
  v8 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 400) = v8;
  *v8 = v0;
  v8[1] = sub_100241DB0;
  return NoteEntity.init(for:in:)(*(_QWORD *)(v0 + 200), (uint64_t)v6, (uint64_t)v7);
}

uint64_t sub_100241DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1002425CC;
  else
    v3 = sub_1002423E0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100241E14()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 432);
  v2 = *(void **)(*(_QWORD *)v0 + 424);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 440));
  swift_release(v1);

  return swift_task_switch(sub_100241E78, 0, 0);
}

uint64_t sub_100241E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
    if (v2 != 1)
    {
      v13 = *(void **)(v0 + 416);
      v14 = *(void **)(v0 + 280);
      v16 = *(_QWORD *)(v0 + 216);
      v15 = *(_QWORD *)(v0 + 224);
      v17 = *(_QWORD *)(v0 + 208);
      v18 = *(_QWORD *)(v0 + 168);
      v23 = IntentParameter.projectedValue.getter(v3);
      v24 = type metadata accessor for IntentDialog(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v18, 1, 1, v24);
      v25 = type metadata accessor for AppIntentError(0);
      v26 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
      swift_allocError(v25, v26, 0, 0);
      IntentParameter.needsDisambiguationError(among:dialog:)(v1, v18);
      swift_release(v23);
      swift_bridgeObjectRelease(v1);
      goto LABEL_10;
    }
    v4 = swift_bridgeObjectRelease(v1);
  }
  else
  {
    *(_QWORD *)(v0 + 448) = v1;
    v5 = objc_msgSend(*(id *)(v0 + 280), "managedObjectContext");
    *(_QWORD *)(v0 + 456) = v5;
    if (v5)
    {
      v6 = *(void **)(v0 + 280);
      v7 = swift_allocObject(&unk_100560878, 24, 7);
      *(_QWORD *)(v0 + 464) = v7;
      *(_QWORD *)(v7 + 16) = v6;
      v8 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v9 = v6;
      v10 = (_QWORD *)swift_task_alloc(v8);
      *(_QWORD *)(v0 + 472) = v10;
      v11 = sub_100012E18(&qword_1005D4718);
      *v10 = v0;
      v10[1] = sub_100242160;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 144, sub_100243808, v7, v11);
    }
    v4 = swift_bridgeObjectRelease(v1);
    v1 = 0;
  }
  v13 = *(void **)(v0 + 416);
  v14 = *(void **)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 224);
  v17 = *(_QWORD *)(v0 + 208);
  v18 = *(_QWORD *)(v0 + 168);
  v19 = IntentParameter.projectedValue.getter(v4);
  v20 = type metadata accessor for IntentDialog(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
  v21 = type metadata accessor for AppIntentError(0);
  v22 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
  swift_allocError(v21, v22, 0, 0);
  IntentParameter.needsValueError(_:)(v18);
  swift_release(v19);
LABEL_10:
  v27 = sub_100012DDC(v18, (uint64_t *)&unk_1005CEE20);
  swift_willThrow(v27);

  sub_10014FFE0(v17);
  swift_bridgeObjectRelease(v1);
  swift_release(v15);
  swift_release(v16);
  v28 = *(_QWORD *)(v0 + 200);
  v30 = *(_QWORD *)(v0 + 168);
  v29 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100242160()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 464);
  v2 = *(void **)(*(_QWORD *)v0 + 456);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  swift_release(v1);

  return swift_task_switch(sub_1002421C4, 0, 0);
}

uint64_t sub_1002421C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  v2 = *(_QWORD *)(v0 + 144);
  if (!v2)
    goto LABEL_5;
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 144));
  if (v3 < 2)
  {
    v1 = swift_bridgeObjectRelease(v2);
LABEL_5:
    v5 = *(void **)(v0 + 416);
    v6 = *(void **)(v0 + 280);
    v8 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v15 = IntentParameter.projectedValue.getter(v1);
    v16 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
    v17 = type metadata accessor for AppIntentError(0);
    v18 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v17, v18, 0, 0);
    IntentParameter.needsValueError(_:)(v10);
    swift_release(v15);
    goto LABEL_6;
  }
  v5 = *(void **)(v0 + 416);
  v6 = *(void **)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = IntentParameter.projectedValue.getter(v4);
  v12 = type metadata accessor for IntentDialog(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  v13 = type metadata accessor for AppIntentError(0);
  v14 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
  swift_allocError(v13, v14, 0, 0);
  IntentParameter.needsDisambiguationError(among:dialog:)(v2, v10);
  swift_release(v11);
  swift_bridgeObjectRelease(v2);
LABEL_6:
  v19 = sub_100012DDC(v10, (uint64_t *)&unk_1005CEE20);
  swift_willThrow(v19);

  sub_10014FFE0(v9);
  swift_bridgeObjectRelease(v2);
  swift_release(v7);
  swift_release(v8);
  v20 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002423E0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(void **)(v0 + 384);
  v2 = *(void **)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 168);
  v9 = sub_100019C6C((unint64_t *)&qword_1005D0A80, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  static IntentResult.result<A>(value:)(v6, v7, v9);

  sub_10014FFE0(v6);
  sub_10014FFE0(v5);
  swift_release(v4);
  swift_release(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002424C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  sub_10014FFE0(*(_QWORD *)(v0 + 208));
  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100242534()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 344);
  v2 = *(void **)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);

  sub_10014FFE0(v5);
  swift_release(v4);
  swift_release(v3);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002425CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);

  sub_10014FFE0(v4);
  swift_release(v3);
  swift_release(v2);
  v5 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100242650(void *a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[24];

  v5 = (void **)(a2 + 16);
  v6 = objc_opt_self(ICNote);
  v7 = swift_dynamicCastObjCClass(a1, v6);
  if (v7)
    v8 = a1;
  swift_beginAccess(v5, v15, 1, 0);
  v9 = *v5;
  *v5 = (void *)v7;

  v10 = objc_opt_self(NoteObject);
  v11 = swift_dynamicCastObjCClass(a1, v10);
  if (v11)
    v12 = a1;
  swift_beginAccess(a3 + 16, &v14, 1, 0);
  v13 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v11;

}

uint64_t sub_10024271C@<X0>(void *a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  IntentParameter.wrappedValue.getter(&v20);
  v7 = v21;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v9 = objc_msgSend(a2, "ic_participantNameMatchingString:returnFullName:", v8, 0);

  if (v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

  }
  else
  {
    IntentParameter.wrappedValue.getter(&v20);
    v11 = v21;
  }
  v12 = objc_msgSend(a2, "ic_userRecordNameInNote:", a1);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14 = v13;

  v15 = sub_100243C90(a1);
  if (v3)
  {
    swift_bridgeObjectRelease(v11);
    return swift_bridgeObjectRelease(v14);
  }
  else
  {
    v18 = v15;
    v19 = v16;
    swift_bridgeObjectRelease(v11);
    result = swift_bridgeObjectRelease(v14);
    *a3 = v18;
    a3[1] = v19;
  }
  return result;
}

uint64_t sub_100242860@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = result;
    swift_bridgeObjectRetain(result);
    sub_1002400E8(v4);
    v6 = v5;
    result = swift_bridgeObjectRelease(v3);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

void sub_1002428BC(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = objc_msgSend(a1, "serverShare");
  if (!v3)
  {
    v10 = 0;
LABEL_24:
    *a2 = v10;
    return;
  }
  v4 = v3;
  v22 = a2;
  v5 = objc_msgSend(v3, "participants");

  v6 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v7);
    if (v8)
      goto LABEL_4;
LABEL_22:
    v10 = _swiftEmptyArrayStorage;
LABEL_23:
    swift_bridgeObjectRelease_n(v7, 2);
    a2 = v22;
    goto LABEL_24;
  }
  if (v7 < 0)
    v21 = v7;
  else
    v21 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  if (!v8)
    goto LABEL_22;
LABEL_4:
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = _swiftEmptyArrayStorage;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
      else
        v11 = *(id *)(v7 + 8 * v9 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, "ic_participantName");
      if (v13)
      {
        v14 = v13;
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v17 = v16;

        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_10016ACE0(0, v10[2] + 1, 1, v10);
        v19 = v10[2];
        v18 = v10[3];
        if (v19 >= v18 >> 1)
          v10 = sub_10016ACE0((_QWORD *)(v18 > 1), v19 + 1, 1, v10);
        v10[2] = v19 + 1;
        v20 = &v10[2 * v19];
        v20[4] = v15;
        v20[5] = v17;
      }
      else
      {

      }
      ++v9;
    }
    while (v8 != v9);
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_100242AD8(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  _QWORD *v5;

  v4 = v1[1];
  *(_OWORD *)(v2 + 16) = *v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 48) = v1[2];
  v5 = (_QWORD *)swift_task_alloc(dword_1005D5A8C);
  *(_QWORD *)(v2 + 64) = v5;
  *v5 = v2;
  v5[1] = sub_100242B48;
  return InsertMentionIntent.perform()(a1);
}

uint64_t sub_100242B48()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100242B94(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100242C20(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_100242CC0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  id v25;
  uint64_t v26;
  unint64_t *v27;

  v10 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v15 = __CocoaSet.Index.element.getter(v10, a2);
        v26 = v15;
        v16 = sub_1000163BC(0, a5, a6);
        swift_unknownObjectRetain(v15);
        swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        a5 = v27;
        swift_unknownObjectRelease(v15, v17);
        v18 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v19 = -1 << *(_BYTE *)(a4 + 32);
        v10 = v18 & ~v19;
        if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        {
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          v21 = static NSObject.== infix(_:_:)(v20);

          if ((v21 & 1) == 0)
          {
            v22 = ~v19;
            do
            {
              v10 = (v10 + 1) & v22;
              if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
                goto LABEL_24;
              v23 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
              v24 = static NSObject.== infix(_:_:)(v23);

            }
            while ((v24 & 1) == 0);
          }

LABEL_20:
          v25 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v11 = a4;
  else
    v11 = a4 & 0xFFFFFFFFFFFFFF8;
  v12 = __CocoaSet.element(at:)(a1, a2, v11);
  v26 = v12;
  v13 = sub_1000163BC(0, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  swift_unknownObjectRelease(v12, v14);
}

void sub_100242F20(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100242CC0(a1, a2, a3, a4, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
}

void sub_100242F34(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100242CC0(a1, a2, a3, a4, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
}

void sub_100242F48(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100242CC0(a1, a2, a3, a4, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
}

uint64_t sub_100242F5C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_100242FF0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100242CC0(a1, a2, a3, a4, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
}

uint64_t sub_100243004@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64x2_t v39;
  int16x8_t v40;
  _BYTE *v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t *v57;
  _BYTE v58[12];
  unsigned int v59;
  void (*v60)(_BYTE *);
  uint64_t v61;
  void (*v62)(_BYTE *, uint64_t, uint64_t);
  unsigned int v63;
  _BYTE *v64;
  void (*v65)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v66)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t *v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unsigned __int32 v82;

  v73 = a1;
  v1 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v1);
  v72 = &v58[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for InputConnectionBehavior(0);
  v71 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v75 = &v58[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v5 = __chkstk_darwin(v4);
  v70 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v74 = &v58[-v7];
  v8 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v8);
  v69 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v10);
  v12 = &v58[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v58[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for Locale(0);
  __chkstk_darwin(v17);
  v19 = &v58[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v20);
  v22 = &v58[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = type metadata accessor for LocalizedStringResource(0);
  v24 = *(_QWORD *)(v23 - 8);
  v67 = v23;
  __chkstk_darwin(v23);
  v64 = &v58[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v68 = sub_100012E18(&qword_1005CEEC8);
  v26 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v26);
  v27 = *(void (**)(_BYTE *))(v14 + 104);
  v28 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v63 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v61 = v13;
  v27(v16);
  v62 = (void (*)(_BYTE *, uint64_t, uint64_t))v27;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v22, 0, 0, v19, v16, "Parameter title for note to add mention to", 42, 2);
  v29 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100477AE0);
  static Locale.current.getter(v29);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v27)(v16, v28, v13);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v22, 0, 0, v19, v16, "Parameter description for note", 30, 2);
  v66 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56);
  v66(v12, 0, 1, v23);
  v30 = type metadata accessor for NoteEntity(0);
  v31 = v69;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v69, 1, 1, v30);
  v32 = type metadata accessor for IntentDialog(0);
  v33 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v65 = v33;
  v34 = v74;
  v33(v74, 1, 1, v32);
  v35 = v70;
  v33(v70, 1, 1, v32);
  v78 = sub_1001E8EEC();
  v79 = v36;
  v80 = v37;
  v81 = v38 & 1;
  v39 = (uint64x2_t)vdupq_n_s64(v38);
  v40 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v40.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v40), (int8x8_t)0x1000100010001);
  v82 = vmovn_s16(v40).u32[0];
  v59 = enum case for InputConnectionBehavior.default(_:);
  v60 = *(void (**)(_BYTE *))(v71 + 104);
  v41 = v75;
  v60(v75);
  v42 = sub_100127D40();
  v43 = v64;
  v71 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v64, v12, v31, v34, v35, v41, &v78, &type metadata for VisibleNotesQuery, v42);
  v70 = (_BYTE *)sub_100012E18(&qword_1005CF070);
  v44 = String.LocalizationValue.init(stringLiteral:)(0x6E6F69746E654DLL, 0xE700000000000000);
  static Locale.current.getter(v44);
  v45 = v63;
  v46 = v61;
  v47 = v62;
  v62(v16, v63, v61);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v22, 0, 0, v19, v16, "Parameter title for mention text", 32, 2);
  v48 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100477B30);
  static Locale.current.getter(v48);
  v47(v16, v45, v46);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v22, 0, 0, v19, v16, "Parameter description for mention text", 38, 2);
  v66(v12, 0, 1, v67);
  v49 = type metadata accessor for String.IntentInputOptions(0);
  v78 = 0;
  v79 = 0;
  v50 = v72;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v72, 1, 1, v49);
  v51 = v74;
  v65(v74, 1, 1, v32);
  v52 = v75;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v60)(v75, v59, v76);
  v53 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v43, v12, &v78, v50, v51, v52);
  sub_100012E18(&qword_1005CEE50);
  v77[0] = 0xD000000000000021;
  v77[1] = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(&v78, v77, &type metadata for String, &protocol witness table for String);
  v54 = type metadata accessor for AppDependencyManager(0);
  v55 = static AppDependencyManager.shared.getter(v54);
  result = AppDependency.__allocating_init(key:manager:)(&v78, v55);
  v57 = v73;
  *v73 = v71;
  v57[1] = v53;
  v57[2] = 0;
  v57[3] = 0;
  *((_BYTE *)v57 + 32) = 1;
  v57[5] = result;
  return result;
}

uint64_t sub_1002436C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024370C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100243734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10024375C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100243780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NoteEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002437C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002437F0(void *a1)
{
  uint64_t v1;

  sub_100242650(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100243808(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1002428BC(*(void **)(v1 + 16), a1);
}

uint64_t sub_100243820()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100243844()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100243888@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10024271C(*(void **)(v1 + 64), *(void **)(v1 + 72), a1);
}

uint64_t sub_1002438A4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100242860(*(_QWORD *)(v1 + 16), a1);
}

id sub_1002438BC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)ICMentionsController), "initWithNote:", *(_QWORD *)(v1 + 16));
  *a1 = result;
  return result;
}

unint64_t sub_10024390C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4AC8;
  if (!qword_1005D4AC8)
  {
    v1 = sub_1000163BC(255, &qword_1005D8540, CKShareParticipant_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4AC8);
  }
  return result;
}

unint64_t sub_100243968()
{
  unint64_t result;

  result = qword_1005D5A98;
  if (!qword_1005D5A98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InsertMentionIntent, &type metadata for InsertMentionIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5A98);
  }
  return result;
}

unint64_t sub_1002439B0()
{
  unint64_t result;

  result = qword_1005D5AA0;
  if (!qword_1005D5AA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InsertMentionIntent, &type metadata for InsertMentionIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5AA0);
  }
  return result;
}

uint64_t sub_1002439F4(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of InsertMentionIntent.perform()>>, 1)+ 8);
}

uint64_t sub_100243A18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static InsertMentionIntent.parameterSummary>>, 1);
}

uint64_t destroy for InsertMentionIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for InsertMentionIntent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v5 = a2[5];
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for InsertMentionIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *((_OWORD *)a2 + 1);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  *((_OWORD *)a1 + 1) = v8;
  v9 = a2[5];
  v10 = a1[5];
  a1[5] = v9;
  swift_retain(v9);
  swift_release(v10);
  return a1;
}

uint64_t assignWithTake for InsertMentionIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for InsertMentionIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InsertMentionIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InsertMentionIntent()
{
  return &type metadata for InsertMentionIntent;
}

uint64_t sub_100243C38()
{
  return sub_100016638(&qword_1005D5AB0, &qword_1005D5AB8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_100243C64()
{
  return sub_100016638((unint64_t *)&qword_1005D0AB0, &qword_1005D0AB8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

id sub_100243C90(void *a1)
{
  id v1;
  id v2;
  void *v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  id v14;
  id v15;
  void *v16;
  NSString v17;
  NSString v18;
  id v19;
  NSString v20;
  unsigned __int8 v21;
  id v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;

  v1 = a1;
  v2 = objc_msgSend(a1, "managedObjectContext");
  if (v2)
  {
    v3 = v2;
    if (!objc_msgSend(v1, "isSharedViaICloud"))
    {
      v12 = sub_10013F4E8();
      v5 = (_QWORD *)swift_allocError(&type metadata for AppIntentsError, v12, 0, 0);
      v7 = 4;
      goto LABEL_7;
    }
    if ((objc_msgSend(v1, "isPasswordProtectedAndLocked") & 1) != 0)
    {
      v4 = sub_10013F4E8();
      v5 = (_QWORD *)swift_allocError(&type metadata for AppIntentsError, v4, 0, 0);
      v7 = 11;
LABEL_7:
      *v6 = v7;
LABEL_8:
      swift_willThrow(v5);

      return v1;
    }
    if (!objc_msgSend(v1, "isEditable"))
    {
      v24 = sub_10013F4E8();
      v5 = (_QWORD *)swift_allocError(&type metadata for AppIntentsError, v24, 0, 0);
      v7 = 12;
      goto LABEL_7;
    }
    v14 = objc_msgSend(v1, "textStorage");
    if (!v14)
    {
      type metadata accessor for ICError(0);
      v26 = v25;
      v1 = type metadata accessor for ICError;
      v32 = 227;
      v27 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
      v28 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
      v5 = _BridgedStoredNSError.init(_:userInfo:)(&v33, &v32, v27, v26, v28);
      goto LABEL_8;
    }
    v31 = v14;
    v30 = objc_msgSend(v14, "length");
    v15 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentInsertionController), "initWithNote:", v1);
    v16 = (void *)objc_opt_self(ICInlineAttachment);
    v17 = String._bridgeToObjectiveC()();
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v16, "createMentionAttachmentIfApplicableWithMentionText:userRecordName:note:parentAttachment:", v17, v18, v1, 0);

    if (v19)
    {

      v20 = String._bridgeToObjectiveC()();
      objc_msgSend(v19, "updateChangeCountWithReason:", v20);

    }
    objc_msgSend(v1, "updateModificationDateAndChangeCountAndSaveImmediately");
    v33 = 0;
    v21 = objc_msgSend(v3, "save:", &v33);
    v22 = v33;
    if ((v21 & 1) != 0)
    {
      v23 = v33;
      v1 = objc_msgSend(v1, "objectID");

    }
    else
    {
      v1 = v33;
      _convertNSErrorToError(_:)(v22);

      swift_willThrow(v29);
    }
  }
  else
  {
    type metadata accessor for ICError(0);
    v9 = v8;
    v32 = 225;
    v1 = (id)sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v10 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v11 = _BridgedStoredNSError.init(_:userInfo:)(&v33, &v32, v1, v9, v10);
    swift_willThrow(v11);
  }
  return v1;
}

uint64_t sub_100244080@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002438A4(a1);
}

uint64_t RemoveLockFromNoteIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[20] = a3;
  v5[21] = a5;
  v5[18] = a1;
  v5[19] = a2;
  v6 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v5[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NoteEntity(0);
  v5[23] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[24] = v8;
  v5[25] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  v5[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100244150, 0, 0);
}

uint64_t sub_100244150()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(void **)(v0 + 168);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 208);
    v3 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 192);
    v5 = v1;
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 104));
    v6 = *(void **)(v0 + 104);
    *(_QWORD *)(v0 + 216) = objc_msgSend(v6, "modernManagedObjectContext");

    v7 = swift_allocObject(&unk_100560A78, 24, 7);
    *(_QWORD *)(v0 + 224) = v7;
    *(_QWORD *)(v7 + 16) = 0;
    IntentParameter.wrappedValue.getter(v2);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    {
      v22 = *(_QWORD *)(v0 + 208);
      sub_10014FF9C(v22, *(_QWORD *)(v0 + 200));
      sub_100012DDC(v22, (uint64_t *)&unk_1005D0B60);
      AppDependency.wrappedValue.getter((_QWORD *)(v0 + 136));
      v23 = *(_QWORD *)(v0 + 136);
      *(_QWORD *)(v0 + 232) = v23;
      v24 = unk_1005D0B54;
      v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D0B50 + dword_1005D0B50);
      swift_retain(v7);
      v25 = (_QWORD *)swift_task_alloc(v24);
      *(_QWORD *)(v0 + 240) = v25;
      *v25 = v0;
      v25[1] = sub_1002444EC;
      return v43((uint64_t)v43, v23, (uint64_t)sub_100175158, v7);
    }
    sub_100012DDC(*(_QWORD *)(v0 + 208), (uint64_t *)&unk_1005D0B60);
    *(_QWORD *)(v0 + 256) = 0;
    v8 = *(_QWORD *)(v0 + 224);
    v9 = swift_beginAccess(v8 + 16, v0 + 80, 0, 0);
    v10 = *(void **)(v8 + 16);
    *(_QWORD *)(v0 + 264) = v10;
    if (v10)
    {
      v11 = v10;
      if (objc_msgSend(v11, "ic_isModernNoteType"))
      {
        v12 = *(void **)(v0 + 216);
        v13 = *(id *)(v0 + 168);
        v14 = v11;
        v15 = v12;
        return swift_task_switch(sub_100244748, 0, 0);
      }
      v36 = *(void **)(v0 + 216);
      v35 = *(_QWORD *)(v0 + 224);
      v37 = *(void **)(v0 + 168);
      v38 = sub_10013F4E8();
      v39 = swift_allocError(&type metadata for AppIntentsError, v38, 0, 0);
      *v40 = 20;
      swift_willThrow(v39);

      swift_release(v35);
    }
    else
    {
      v27 = *(void **)(v0 + 216);
      v26 = *(_QWORD *)(v0 + 224);
      v29 = *(void **)(v0 + 168);
      v28 = *(_QWORD *)(v0 + 176);
      v30 = IntentParameter.projectedValue.getter(v9);
      v31 = type metadata accessor for IntentDialog(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v28, 1, 1, v31);
      v32 = type metadata accessor for AppIntentError(0);
      v33 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
      swift_allocError(v32, v33, 0, 0);
      IntentParameter.needsValueError(_:)(v28);
      swift_release(v30);
      v34 = sub_100012DDC(v28, (uint64_t *)&unk_1005CEE20);
      swift_willThrow(v34);
      swift_release(v26);

    }
  }
  else
  {
    type metadata accessor for ICError(0);
    v18 = v17;
    *(_QWORD *)(v0 + 128) = 222;
    v19 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v20 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v21 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 112), v0 + 128, v19, v18, v20);
    swift_willThrow(v21);
  }
  v41 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002444EC()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[30];
  (*v1)[31] = v0;
  swift_task_dealloc(v3);
  v4 = v2[28];
  v5 = (void *)v2[29];
  sub_10014FFE0(v2[25]);
  swift_release(v4);

  if (v0)
    v6 = sub_10017477C;
  else
    v6 = sub_100244570;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100244570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 224);
  v2 = swift_beginAccess(v1 + 16, v0 + 80, 0, 0);
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v0 + 264) = v3;
  if (v3)
  {
    v4 = v3;
    if (objc_msgSend(v4, "ic_isModernNoteType"))
    {
      v5 = *(void **)(v0 + 216);
      v6 = *(id *)(v0 + 168);
      v7 = v4;
      v8 = v5;
      return swift_task_switch(sub_100244748, 0, 0);
    }
    v11 = *(void **)(v0 + 216);
    v10 = *(_QWORD *)(v0 + 224);
    v13 = *(void **)(v0 + 168);
    v19 = sub_10013F4E8();
    v20 = swift_allocError(&type metadata for AppIntentsError, v19, 0, 0);
    *v21 = 20;
    swift_willThrow(v20);

  }
  else
  {
    v11 = *(void **)(v0 + 216);
    v10 = *(_QWORD *)(v0 + 224);
    v13 = *(void **)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 176);
    v14 = IntentParameter.projectedValue.getter(v2);
    v15 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
    v16 = type metadata accessor for AppIntentError(0);
    v17 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v16, v17, 0, 0);
    IntentParameter.needsValueError(_:)(v12);
    swift_release(v14);
    v18 = sub_100012DDC(v12, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v18);
  }
  swift_release(v10);

  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100244748()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0 + 2;
  v2 = v0[32];
  v3 = v0[33];
  v4 = v0[27];
  v5 = v0[21];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1001745DC;
  v6 = swift_continuation_init(v0 + 2, 1);
  v7 = (_QWORD *)swift_task_alloc(48);
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v5;
  v7[5] = v6;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_100244F84, v7, (char *)&type metadata for () + 8);
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_100012E18(&qword_1005D7A90);
    v9 = swift_allocError(v8, &protocol self-conformance witness table for Error, 0, 0);
    *v10 = v2;
    swift_continuation_throwingResumeWithError(v6, v9);
  }
  return swift_continuation_await(v1);
}

void *RemoveLockFromNoteIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static RemoveLockFromNoteIntent.persistentIdentifier;
}

unint64_t static RemoveLockFromNoteIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_100244854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static RemoveLockFromNoteIntent.title);
  sub_10012A0B0(v10, (uint64_t)static RemoveLockFromNoteIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x8000000100484640);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t RemoveLockFromNoteIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEB50 != -1)
    swift_once(&qword_1005CEB50, sub_100244854);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static RemoveLockFromNoteIntent.title);
}

uint64_t static RemoveLockFromNoteIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEB50 != -1)
    swift_once(&qword_1005CEB50, sub_100244854);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static RemoveLockFromNoteIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *RemoveLockFromNoteIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static RemoveLockFromNoteIntent.openAppWhenRun;
}

void *RemoveLockFromNoteIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static RemoveLockFromNoteIntent.assistantOnly;
}

uint64_t static RemoveLockFromNoteIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000076, 0x80000001004845C0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t RemoveLockFromNoteIntent.target.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002436C4(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100012DDC(a1, (uint64_t *)&unk_1005D0B60);
}

void sub_100244D3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD v19[5];
  uint64_t v20;

  v6 = objc_msgSend(a1, "ic_existingObjectWithID:", a2);
  if (v6)
  {
    v7 = v6;
    v8 = objc_opt_self(ICNote);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      v10 = v9;
      if (objc_msgSend(v9, "isPasswordProtected"))
      {
        v11 = objc_msgSend(objc_allocWithZone((Class)ICNoteLockManager), "initWithNote:", v10);
        objc_msgSend(v11, "setWindow:", a3);
        v12 = swift_allocObject(&unk_100560B28, 32, 7);
        *(_QWORD *)(v12 + 16) = a4;
        *(_QWORD *)(v12 + 24) = v11;
        v19[4] = sub_10017547C;
        v20 = v12;
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 1107296256;
        v19[2] = sub_100343CD8;
        v19[3] = &unk_100560B40;
        v13 = _Block_copy(v19);
        v14 = v20;
        v15 = v11;
        swift_release(v14);
        objc_msgSend(v15, "removeLockWithCompletionHandler:", v13);
        _Block_release(v13);

        return;
      }
      v16 = sub_10013F4E8();
      v17 = swift_allocError(&type metadata for AppIntentsError, v16, 0, 0);
      *v18 = 19;
      swift_willThrow(v17);
    }

  }
}

uint64_t sub_100244ECC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[3];
  v7 = (_QWORD *)swift_task_alloc(dword_1005D5AC4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100130768;
  return RemoveLockFromNoteIntent.perform()(a1, v4, v5, v8, v6);
}

uint64_t sub_100244F38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = _s11MobileNotes24RemoveLockFromNoteIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t sub_100244F60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100244F84()
{
  uint64_t v0;

  sub_100244D3C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t _s11MobileNotes24RemoveLockFromNoteIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v48[2];
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD v57[3];
  char v58;
  unsigned __int32 v59;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v53 = *(_QWORD *)(v0 - 8);
  v54 = v0;
  __chkstk_darwin(v0);
  v52 = (char *)v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v51 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v50 = (char *)v48 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v49 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48[1] = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note", 24, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100477B90);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v49, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v50;
  v32(v50, 1, 1, v31);
  v34 = v51;
  v32(v51, 1, 1, v31);
  v57[0] = sub_1001E98EC();
  v57[1] = v35;
  v57[2] = v36;
  v58 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v59 = vmovn_s16(v39).u32[0];
  v40 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, enum case for InputConnectionBehavior.default(_:), v54);
  v41 = sub_100127D40();
  v42 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v57, &type metadata for VisibleNotesQuery, v41);
  sub_100012E18(&qword_1005CEE50);
  v55 = 0xD000000000000021;
  v56 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v57, &v55, &type metadata for String, &protocol witness table for String);
  v43 = type metadata accessor for AppDependencyManager(0);
  v44 = static AppDependencyManager.shared.getter(v43);
  AppDependency.__allocating_init(key:manager:)(v57, v44);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v55 = 0xD000000000000024;
  v56 = 0x8000000100476B40;
  v45 = AnyHashable.init<A>(_:)(v57, &v55, &type metadata for String, &protocol witness table for String);
  v46 = static AppDependencyManager.shared.getter(v45);
  AppDependency.__allocating_init(key:manager:)(v57, v46);
  return v42;
}

unint64_t sub_1002454B4()
{
  unint64_t result;

  result = qword_1005D5AC8;
  if (!qword_1005D5AC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RemoveLockFromNoteIntent, &type metadata for RemoveLockFromNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5AC8);
  }
  return result;
}

unint64_t sub_1002454FC()
{
  unint64_t result;

  result = qword_1005D5AD0;
  if (!qword_1005D5AD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RemoveLockFromNoteIntent, &type metadata for RemoveLockFromNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5AD0);
  }
  return result;
}

uint64_t sub_100245540(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of RemoveLockFromNoteIntent.perform()>>, 1);
}

uint64_t sub_100245550(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100185D3C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for RemoveLockFromNoteIntent()
{
  return &type metadata for RemoveLockFromNoteIntent;
}

uint64_t sub_1002455A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t OpenNotesViewIntent.target.setter(char a1)
{
  char v2;

  v2 = a1 & 1;
  return IntentParameter.wrappedValue.setter(&v2);
}

void *OpenNotesViewIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenNotesViewIntent.persistentIdentifier;
}

uint64_t sub_100245608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static OpenNotesViewIntent.title);
  sub_10012A0B0(v10, (uint64_t)static OpenNotesViewIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x746F4E206E65704FLL, 0xEF77656956207365);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Title for Open Notes View intent", 32, 2);
}

uint64_t OpenNotesViewIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEB58 != -1)
    swift_once(&qword_1005CEB58, sub_100245608);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static OpenNotesViewIntent.title);
}

uint64_t static OpenNotesViewIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEB58 != -1)
    swift_once(&qword_1005CEB58, sub_100245608);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static OpenNotesViewIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *OpenNotesViewIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenNotesViewIntent.openAppWhenRun;
}

uint64_t static OpenNotesViewIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000036, 0x8000000100484680);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static OpenNotesViewIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005D5AE8);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D5AF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100019A7C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1, &type metadata for OpenNotesViewIntent, v6);
  v7._countAndFlagsBits = 0x656874206E65704FLL;
  v7._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10045D668, v8);
  v10 = sub_100012E18(&qword_1005D5AF8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x7765697620;
  v11._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for OpenNotesViewIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenNotesViewIntent, v6);
}

_QWORD *sub_100245BD0@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_100245C08(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t sub_100245C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005D5AE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D5AF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1, a1, a2);
  v10._countAndFlagsBits = 0x656874206E65704FLL;
  v10._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_10045D668, v11);
  v13 = sub_100012E18(&qword_1005D5AF8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x7765697620;
  v14._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_100245DA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _s11MobileNotes04OpenB10ViewIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _s11MobileNotes04OpenB10ViewIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v41 = *(_QWORD *)(v0 - 8);
  v42 = v0;
  __chkstk_darwin(v0);
  v40 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v39 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v38 = (char *)&v37 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100012E18(&qword_1005CF078);
  v23 = String.LocalizationValue.init(stringLiteral:)(2003134806, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Title for View parameter to Open Notes View intent", 50, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100477C00);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for view", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  LOBYTE(v44[0]) = 2;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v38;
  v28(v38, 1, 1, v27);
  v30 = v39;
  v28(v39, 1, 1, v27);
  v31 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v40, enum case for InputConnectionBehavior.default(_:), v42);
  v32 = sub_100128314();
  v33 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v44, v29, v30, v31, &off_100555E30, v32);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v43[0] = 0xD000000000000024;
  v43[1] = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v44, v43, &type metadata for String, &protocol witness table for String);
  v34 = type metadata accessor for AppDependencyManager(0);
  v35 = static AppDependencyManager.shared.getter(v34);
  AppDependency.__allocating_init(key:manager:)(v44, v35);
  return v33;
}

uint64_t sub_1002461BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1002461E8()
{
  unint64_t result;

  result = qword_1005D5B00;
  if (!qword_1005D5B00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNotesViewIntent, &type metadata for OpenNotesViewIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5B00);
  }
  return result;
}

unint64_t sub_100246230()
{
  unint64_t result;

  result = qword_1005D5B08;
  if (!qword_1005D5B08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesView, &type metadata for NotesView);
    atomic_store(result, (unint64_t *)&qword_1005D5B08);
  }
  return result;
}

uint64_t sub_100246278(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of OpenNotesViewIntent.perform()>>, 1);
}

uint64_t sub_100246288(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static OpenNotesViewIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for OpenNotesViewIntent()
{
  return &type metadata for OpenNotesViewIntent;
}

uint64_t sub_1002462A8()
{
  return sub_100016638(&qword_1005D5B28, &qword_1005D5B30, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t ICArchivePreviewer.__allocating_init(forArchiveAt:)(char *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 32, 7);
  ICArchivePreviewer.init(forArchiveAt:)(a1);
  return v3;
}

id ICArchivePreviewer.startPreviewing(_:completion:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t aBlock;
  uint64_t v43;
  uint64_t v44;

  v39 = a2;
  v40 = a3;
  v5 = type metadata accessor for URL(0);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100012E18(&qword_1005D3DA0);
  v8 = *(_QWORD *)(v41 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v41);
  v11 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v36 = (char *)&v35 - v13;
  v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  v37 = v3 + 24;
  swift_beginAccess(v3 + 24, &aBlock, 32, 0);
  v15 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v15 + 16))
  {
    v16 = sub_100248D28(a1);
    if ((v17 & 1) != 0)
    {
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 56) + 24 * v16 + 16);
      swift_endAccess(&aBlock);
      __asm { BR              X9 }
    }
  }
  swift_endAccess(&aBlock);
  if (qword_1005CEB60 != -1)
    swift_once(&qword_1005CEB60, sub_100247270);
  v19 = type metadata accessor for Logger(0);
  sub_10012A0B0(v19, (uint64_t)qword_1005D5B38);
  v20 = v8;
  v21 = v41;
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v41);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.fault.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    aBlock = v26;
    v37 = v20;
    *(_DWORD *)v25 = 136315138;
    v36 = (char *)(v25 + 4);
    ICObjectReferences.identifier.getter(v21);
    v27 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v5, v27);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v5);
    v43 = sub_1003A4190(v28, v30, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v36);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v41);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Object to be previewed does not exist {url: %s}", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v21);
  }

  v31 = sub_10016E9D4();
  v32 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v31, 0, 0);
  *v33 = 4;
  v39(v32, 1);
  swift_errorRelease(v32);
  return objc_msgSend(objc_allocWithZone((Class)NSProgress), "init");
}

double ICArchivePreviewer.stopPreviewing(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  uint8_t *v31;
  uint64_t v32;
  uint8_t *v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  double result;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D3DA0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v37 - v12;
  v14 = (uint64_t *)(v1 + 24);
  swift_beginAccess(v1 + 24, &v48, 32, 0);
  v15 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v15 + 16))
  {
    v16 = sub_100248D28(a1);
    if ((v17 & 1) != 0)
    {
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 56) + 24 * v16 + 16);
      swift_endAccess(&v48);
      __asm { BR              X9 }
    }
  }
  v44 = v4;
  v45 = v3;
  swift_endAccess(&v48);
  if (qword_1005CEB60 != -1)
    swift_once(&qword_1005CEB60, sub_100247270);
  v19 = type metadata accessor for Logger(0);
  sub_10012A0B0(v19, (uint64_t)qword_1005D5B38);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20 = v46(v11, a1, v7);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.fault.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v43 = v13;
    v24 = (uint8_t *)v23;
    v41 = swift_slowAlloc(32, -1);
    v48 = v41;
    v42 = a1;
    *(_DWORD *)v24 = 136315138;
    v39 = v24 + 4;
    v40 = v24;
    ICObjectReferences.identifier.getter(v7);
    v25 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v26 = v45;
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v45, v25);
    v38 = v8;
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v26);
    v47 = sub_1003A4190(v27, v29, &v48);
    a1 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v39);
    swift_bridgeObjectRelease(v29);
    v30 = *(void (**)(char *, uint64_t))(v38 + 8);
    v30(v11, v7);
    v31 = v40;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Object to be previewed does not exist {url: %s}", v40, 0xCu);
    v32 = v41;
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v33 = v31;
    v13 = v43;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v30(v11, v7);
  }

  v46(v13, a1, v7);
  swift_beginAccess(v14, &v48, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  v47 = *v14;
  *v14 = 0x8000000000000000;
  sub_10024E734(0, 0, 3, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  v35 = *v14;
  *v14 = v47;
  swift_bridgeObjectRelease(v35);
  v30(v13, v7);
  *(_QWORD *)&result = swift_endAccess(&v48).n128_u64[0];
  return result;
}

uint64_t sub_100247270()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D5B38);
  sub_10012A0B0(v0, (uint64_t)qword_1005D5B38);
  return static Logger.archiving.getter();
}

uint64_t ICArchivePreviewer.init(forArchiveAt:)(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  id v12;
  void *v13;
  id v14;
  objc_class *v15;
  id v16;
  id v17;
  __int16 IsAlexandriaDemoModeEnabled;
  int v19;
  _BYTE *v20;
  __int16 v21;
  id v22;
  uint64_t ObjectType;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  id v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t *v69;
  id v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76[3];
  uint64_t v77;

  v2 = v1;
  v71 = a1;
  v3 = *v1;
  v4 = sub_100012E18(&qword_1005D0E50);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D3DA0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[3] = sub_100135D6C((uint64_t)_swiftEmptyArrayStorage);
  v11 = v1 + 3;
  v12 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (!v12
    || (v13 = v12,
        v14 = objc_msgSend(v12, "persistentContainer"),
        v13,
        !v14))
  {
    if (qword_1005CEB60 != -1)
      swift_once(&qword_1005CEB60, sub_100247270);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10012A0B0(v28, (uint64_t)qword_1005D5B38);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.fault.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No shared note context has been set up", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    v34 = v33;
    v35 = objc_allocWithZone((Class)NSError);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
    objc_msgSend(v35, "initWithDomain:code:userInfo:", v36, 134060, 0);

    swift_willThrow(v37);
    v38 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v71, v38);
    swift_bridgeObjectRelease(v2[3]);
    swift_deallocPartialClassInstance(v2, v3, 32, 7);
    return (uint64_t)v2;
  }
  v77 = v8;
  v69 = v11;
  v2[2] = v14;
  v70 = v14;
  v72 = (char *)objc_msgSend(v70, "viewContext");
  v15 = (objc_class *)type metadata accessor for ICArchiveImporter();
  v16 = objc_allocWithZone(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v19 = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v20 = objc_allocWithZone(v15);
  if (v19)
    v21 = 256;
  else
    v21 = 0;
  v22 = sub_10021DFC4(v72, v21 | IsAlexandriaDemoModeEnabled, 0, 0, v17, v20, 0.0);
  ObjectType = swift_getObjectType(v16);
  swift_deallocPartialClassInstance(v16, ObjectType, 128, 7);
  v24 = v71;
  v25 = (uint64_t)v73;
  v26 = ICArchiveImporter.objects(forArchiveAt:)(v71);
  if (v25)
  {
    swift_release(v2);

    v27 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v24, v27);
    return (uint64_t)v2;
  }
  v66 = v22;
  v67 = 0;
  v68 = v2;
  v76[0] = (unint64_t)_swiftEmptyArrayStorage;
  v40 = *(_QWORD *)(v26 + 16);
  if (v40)
  {
    v41 = v26 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
    v42 = *(_QWORD *)(v77 + 72);
    v43 = *(void (**)(char *, unint64_t, uint64_t))(v77 + 16);
    v73 = (char *)v26;
    swift_bridgeObjectRetain(v26);
    do
    {
      v43(v10, v41, v7);
      v44 = ICObjectReferences.recursiveChildren.getter(v7);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v10, v7);
      sub_1001D83F8(v44);
      v41 += v42;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease_n(v73, 2);
    v45 = (_QWORD *)v76[0];
  }
  else
  {
    swift_bridgeObjectRelease(v26);
    v45 = _swiftEmptyArrayStorage;
  }
  v46 = v77;
  v47 = v45[2];
  if (v47)
  {
    v76[0] = (unint64_t)_swiftEmptyArrayStorage;
    sub_1001370B4(0, v47, 0);
    v48 = *(unsigned __int8 *)(v46 + 80);
    v65 = v45;
    v49 = (char *)v45 + ((v48 + 32) & ~v48);
    v72 = *(char **)(v46 + 72);
    v73 = v6;
    v50 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
    do
    {
      v50(v10, v49, v7);
      v51 = &v6[*(int *)(v75 + 48)];
      v50(v6, v10, v7);
      *(_QWORD *)v51 = 0;
      *((_QWORD *)v51 + 1) = 0;
      v51[16] = 3;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v7);
      v52 = (_QWORD *)v76[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v76[0]) & 1) == 0)
      {
        sub_1001370B4(0, v52[2] + 1, 1);
        v52 = (_QWORD *)v76[0];
      }
      v54 = v52[2];
      v53 = v52[3];
      if (v54 >= v53 >> 1)
      {
        sub_1001370B4(v53 > 1, v54 + 1, 1);
        v52 = (_QWORD *)v76[0];
      }
      v52[2] = v54 + 1;
      v55 = (uint64_t)v52
          + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))
          + *(_QWORD *)(v74 + 72) * v54;
      v6 = v73;
      sub_100251B60((uint64_t)v73, v55);
      v49 = &v72[(_QWORD)v49];
      --v47;
      v46 = v77;
    }
    while (v47);
    swift_bridgeObjectRelease(v65);
  }
  else
  {
    swift_bridgeObjectRelease(v45);
    v52 = _swiftEmptyArrayStorage;
  }
  v56 = v52[2];
  v2 = v68;
  if (v56)
  {
    sub_100012E18(&qword_1005D0200);
    v57 = (void *)static _DictionaryStorage.allocate(capacity:)(v56);
  }
  else
  {
    v57 = &_swiftEmptyDictionarySingleton;
  }
  v58 = v70;
  v76[0] = (unint64_t)v57;
  v59 = swift_bridgeObjectRetain(v52);
  v60 = v67;
  sub_1002516A8(v59, 1, v76);
  if (!v60)
  {

    swift_bridgeObjectRelease(v52);
    v61 = v76[0];
    v62 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v71, v62);
    v63 = v69;
    swift_beginAccess(v69, v76, 1, 0);
    v64 = *v63;
    *v63 = v61;
    swift_bridgeObjectRelease(v64);
    return (uint64_t)v2;
  }
  result = swift_unexpectedError(v60, "Swift/Dictionary.swift", 22, 1, 489);
  __break(1u);
  return result;
}

uint64_t ICArchivePreviewer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  _BYTE v21[24];

  v1 = sub_100012E18(&qword_1005D3DA0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 24, v21, 1, 0);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = v5 + 64;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 24), 2);
  result = swift_retain(v0);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v10)
      goto LABEL_25;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v10)
        goto LABEL_25;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v10)
          goto LABEL_25;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
        {
          v12 = v16 + 3;
          if (v16 + 3 >= v10)
            goto LABEL_25;
          v17 = *(_QWORD *)(v6 + 8 * v12);
          if (!v17)
          {
            v12 = v16 + 4;
            if (v16 + 4 >= v10)
              goto LABEL_25;
            v17 = *(_QWORD *)(v6 + 8 * v12);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_24:
    v9 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + *(_QWORD *)(v2 + 72) * v14, v1);
    v15 = ICArchivePreviewer.stopPreviewing(_:)((uint64_t)v4);
    result = (*(uint64_t (**)(char *, uint64_t, double))(v2 + 8))(v4, v1, v15);
  }
  v18 = v16 + 5;
  if (v18 >= v10)
  {
LABEL_25:
    swift_release(v5);
    swift_bridgeObjectRelease(v5);
    swift_release(v0);
    v19 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 24) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v19);

    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
    return v0;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v10)
      goto LABEL_25;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t ICArchivePreviewer.__deallocating_deinit()
{
  uint64_t v0;

  ICArchivePreviewer.deinit();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t ICArchivePreviewer.Errors.errorDescription.getter(uint64_t a1)
{
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
  {
    v6 = a1;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ICArchivePreviewer.Errors, &v6, &type metadata for ICArchivePreviewer.Errors, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v2 = String._bridgeToObjectiveC()();
    v3 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, 0, 0);

    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    return v4;
  }
  return result;
}

uint64_t ICArchivePreviewer.Errors.init(rawValue:)()
{
  return 0;
}

unint64_t static ICArchivePreviewer.Errors._nsErrorDomain.getter()
{
  return 0xD000000000000025;
}

uint64_t sub_100247C80(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100251F44();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

_QWORD *sub_100247CB8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_100247CD0()
{
  uint64_t *v0;

  return ICArchivePreviewer.Errors.errorDescription.getter(*v0);
}

uint64_t sub_100247CD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100251F44();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_100247D00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100251F44();
  return _BridgedNSError._code.getter(a1, v2);
}

uint64_t sub_100247D28(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100251F44();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t ICArchivePreviewer.objects.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

void sub_100247D9C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __n128 v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  int v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (*v49)(uint64_t *);
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v8 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  __chkstk_darwin(v8);
  v53 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005D3DA0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v57 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v50 - v14;
  v16 = (uint64_t *)(a3 + 24);
  swift_beginAccess(a3 + 24, &v61, 32, 0);
  v17 = *(_QWORD *)(a3 + 24);
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_100248D28(a4), (v19 & 1) != 0))
  {
    v20 = *(_QWORD *)(v17 + 56) + 24 * v18;
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(unsigned __int8 *)(v20 + 16);
    v58 = *(void **)v20;
    v59 = v21;
    sub_10016D9D0(v58, v21, v22);
  }
  else
  {
    v58 = 0;
    v59 = 0;
    v22 = 255;
  }
  v23 = swift_endAccess(&v61);
  v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v56 = a4;
  v24(v15, a4, v10, v23);
  swift_beginAccess(v16, &v61, 33, 0);
  if ((a2 & 1) != 0)
    v25 = 2;
  else
    v25 = 1;
  sub_1002521B0(a1, a2 & 1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
  v60 = *v16;
  *v16 = 0x8000000000000000;
  sub_10024E734((uint64_t)a1, 0, v25, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
  v27 = *v16;
  *v16 = v60;
  swift_bridgeObjectRelease(v27);
  v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  v28(v15, v10);
  swift_endAccess(&v61);
  if (v22)
  {
    v29 = v59;
    if (qword_1005CEB60 != -1)
      swift_once(&qword_1005CEB60, sub_100247270);
    v30 = type metadata accessor for Logger(0);
    sub_10012A0B0(v30, (uint64_t)qword_1005D5B38);
    v31 = v57;
    v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v57, v56, v10);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.fault.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(12, -1);
      LODWORD(v56) = v22;
      v59 = v29;
      v36 = (uint8_t *)v35;
      v52 = swift_slowAlloc(32, -1);
      v61 = v52;
      *(_DWORD *)v36 = 136315138;
      v51 = v36 + 4;
      v37 = v53;
      ICObjectReferences.identifier.getter(v10);
      v38 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v39 = v55;
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v55, v38);
      v42 = v41;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v39);
      v60 = sub_1003A4190(v40, v42, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v51);
      swift_bridgeObjectRelease(v42);
      v28(v57, v10);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Preview object is in unexpected state {url: %s}", v36, 0xCu);
      v43 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      sub_1002521BC(v58, v59, v56);
    }
    else
    {
      sub_1002521BC(v58, v29, v22);
      v28(v31, v10);

    }
  }
  else
  {
    v45 = v58;
    v44 = v59;
    sub_10016D9D0(v58, v59, 0);

    v46 = *(_QWORD *)(v44 + 16);
    if (v46)
    {
      swift_bridgeObjectRetain(v44);
      v47 = (uint64_t *)(v44 + 40);
      do
      {
        v49 = (void (*)(uint64_t *))*(v47 - 1);
        v48 = *v47;
        v61 = (uint64_t)a1;
        v62 = a2 & 1;
        swift_retain(v48);
        v49(&v61);
        swift_release(v48);
        v47 += 2;
        --v46;
      }
      while (v46);
      swift_bridgeObjectRelease(v44);
    }
    sub_1002521BC(v45, v44, 0);
    swift_bridgeObjectRelease(v44);
  }
}

uint64_t sub_1002481FC(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t IsAlexandriaDemoModeEnabled;
  __int16 v20;
  int v21;
  _BYTE *v22;
  __int16 v23;
  id v24;
  uint64_t ObjectType;
  id v26;
  NSObject *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  void *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **aBlock;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  void *v83;
  void *v84;
  _QWORD *v85;

  v74 = a5;
  v75 = a6;
  v72 = a4;
  v73 = type metadata accessor for DispatchWorkItemFlags(0);
  v79 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v77 = *(_QWORD *)(v11 - 8);
  v78 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (objc_class *)type metadata accessor for ICArchiveImporter();
  v15 = objc_allocWithZone(v14);
  v16 = (void *)objc_opt_self(NSFileManager);
  v17 = a1;
  v18 = objc_msgSend(v16, "defaultManager");
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v18);
  v20 = IsAlexandriaDemoModeEnabled;
  v21 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
  v22 = objc_allocWithZone(v14);
  if (v21)
    v23 = 256;
  else
    v23 = 0;
  v24 = sub_10021DFC4(v17, v23 | v20, 0, 0, v18, v22, 0.0);
  ObjectType = swift_getObjectType(v15);
  swift_deallocPartialClassInstance(v15, ObjectType, 128, 7);
  v26 = objc_msgSend((id)objc_opt_self(ICAccount), "inMemoryAccountInContext:", v17);
  v27 = objc_msgSend(v26, "defaultFolder");
  v76 = v24;
  v28 = sub_10021BAF8(a2, v27, (char *)&off_1005656D8, a3);
  v30 = v29;
  v69 = v28;
  v70 = v31;
  v71 = v32;
  v33 = v72;

  aBlock = 0;
  v34 = objc_msgSend(v17, "save:", &aBlock);
  v35 = aBlock;
  if (v34)
  {
    sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
    v68 = static OS_dispatch_queue.main.getter(v35);
    v36 = swift_allocObject(&unk_100560F70, 80, 7);
    v37 = v69;
    v38 = v70;
    *(_QWORD *)(v36 + 16) = v69;
    *(_QWORD *)(v36 + 24) = v38;
    *(_QWORD *)(v36 + 32) = v71;
    v39 = v30 & 1;
    *(_BYTE *)(v36 + 40) = v30 & 1;
    v40 = v33;
    *(_QWORD *)(v36 + 48) = v33;
    *(_QWORD *)(v36 + 56) = a3;
    v41 = v75;
    *(_QWORD *)(v36 + 64) = v74;
    *(_QWORD *)(v36 + 72) = v41;
    v84 = sub_100252168;
    v85 = (_QWORD *)v36;
    aBlock = _NSConcreteStackBlock;
    v81 = 1107296256;
    v82 = sub_100206734;
    v83 = &unk_100560F88;
    v74 = _Block_copy(&aBlock);
    v42 = v85;
    v43 = v38;
    v44 = v71;
    sub_100252180(v37, v43, v71, v39);
    swift_retain(v40);
    v45 = a3;
    swift_retain(v41);
    v46 = swift_release(v42);
    static DispatchQoS.unspecified.getter(v46);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v47 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v48 = sub_100012E18((uint64_t *)&unk_1005D8530);
    v49 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
    v50 = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v48, v49, v73, v47);
    v51 = v74;
    v52 = (void *)v68;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v74);
    _Block_release(v51);

    sub_1002520F4(v69, v70, v44, v39);
  }
  else
  {
    v53 = aBlock;
    v54 = _convertNSErrorToError(_:)(v35);

    swift_willThrow(v55);
    sub_1002520F4(v69, v70, v71, v30 & 1);

    v56 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
    v57 = (void *)static OS_dispatch_queue.main.getter(v56);
    v58 = (_QWORD *)swift_allocObject(&unk_100560F20, 40, 7);
    v59 = v75;
    v58[2] = v74;
    v58[3] = v59;
    v58[4] = v54;
    v84 = sub_1002520C8;
    v85 = v58;
    aBlock = _NSConcreteStackBlock;
    v81 = 1107296256;
    v82 = sub_100206734;
    v83 = &unk_100560F38;
    v60 = _Block_copy(&aBlock);
    v61 = v85;
    swift_retain(v59);
    swift_errorRetain(v54);
    v62 = swift_release(v61);
    static DispatchQoS.unspecified.getter(v62);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v63 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v64 = sub_100012E18((uint64_t *)&unk_1005D8530);
    v65 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
    v50 = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v64, v65, v73, v63);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v60);

    _Block_release(v60);
    swift_errorRelease(v54);
  }
  (*(void (**)(char *, uint64_t))(v79 + 8))(v10, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v13, v78);
}

void sub_1002487AC(void *a1, uint64_t a2, void *a3, char a4, uint64_t a5, void *a6, void (*a7)(void *, uint64_t))
{
  void *v9;
  id v13;
  uint64_t v14;
  _QWORD v15[3];
  void *v16;
  unsigned __int8 v17;

  v9 = a1;
  if ((a4 & 1) != 0)
  {
    swift_errorRetain(a1);
    v14 = 1;
  }
  else
  {
    v15[0] = a1;
    v15[1] = a2;
    v15[2] = a3;
    swift_bridgeObjectRetain(a2);
    v13 = a3;
    sub_100248888((uint64_t)v15, a5, (uint64_t)&v16);

    swift_bridgeObjectRelease(a2);
    v9 = v16;
    v14 = v17;
  }
  objc_msgSend(a6, "setCompletedUnitCount:", objc_msgSend(a6, "totalUnitCount"));
  a7(v9, v14);
  sub_10016E9AC(v9, v14);
}

void sub_100248888(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  unsigned int v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[4];

  v4 = *(void **)(a1 + 16);
  v5 = objc_msgSend(*(id *)(a2 + 16), "viewContext");
  v6 = objc_msgSend(v4, "objectID");
  v7 = objc_msgSend(v5, "objectWithID:", v6);

  v15[3] = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
  v15[0] = v7;
  v8 = v7;
  v9 = (void *)sub_10016A2A8((uint64_t)v15);
  sub_1000153C0(v15);
  v10 = objc_msgSend(v9, "isPasswordProtected", v15[0]);
  v11 = v10;
  if (v10)
  {
    v12 = sub_100251BF4();
    v13 = swift_allocError(&type metadata for ICArchivePreviewer.Errors, v12, 0, 0);
    *v14 = 0;

    v9 = (void *)v13;
  }

  *(_QWORD *)a3 = v9;
  *(_BYTE *)(a3 + 8) = v11;
}

void sub_1002489AC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

unint64_t sub_100248A00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100249AA0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&unk_1005D1B70, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_100248A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100249744(a1, a2, v5);
}

unint64_t sub_100248AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100249824(a1, v7);
}

unint64_t sub_100248B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::Int v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(v4 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v11, a1, a2);
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a4);
    String.hash(into:)(v11, a3, a4);
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v9 = Hasher._finalize()();
  return sub_100249998(a1, a2, a3, a4, v9);
}

unint64_t sub_100248C44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10024AB8C(a1, v4, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
}

unint64_t sub_100248C90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100249AA0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (unint64_t *)&qword_1005D8A60, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_100248D28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = sub_100012E18(&qword_1005D3DA0);
  v6 = sub_100016638(&qword_1005D5C40, &qword_1005D3DA0, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100249BD0(a1, v7);
}

unint64_t sub_100248DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100249824(a1, v7);
}

unint64_t sub_100248E30(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x776569567473696CLL;
  else
    v5 = 0x567972656C6C6167;
  if ((a1 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEB00000000776569;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_100249D14(v4, v7);
}

unint64_t sub_100248ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100249E5C(a1, v4);
}

void sub_100248EFC(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_100248F58()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;
  uint64_t v4;

  String.hash(into:)(&v4, 0x65746F4E6874616DLL, v0);
  swift_bridgeObjectRelease(v0);
  v2 = Hasher._finalize()();
  return sub_100249F20(v1, v2);
}

unint64_t sub_100248FE0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  if ((a1 & 1) != 0)
    v4 = 7105633;
  else
    v4 = 7958113;
  String.hash(into:)(v7, v4, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  v5 = Hasher._finalize()();
  return sub_10024A118(a1 & 1, v5);
}

unint64_t sub_100249058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v7, a1, a2);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v5 = Hasher._finalize()();
  return sub_10024A20C(a1, a2, v5);
}

void sub_1002490E8(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_100249148()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0xD000000000000014, 0x8000000100476740);
  swift_bridgeObjectRelease(0x8000000100476740);
  v1 = Hasher._finalize()();
  return sub_10024A2D4(v0, v1);
}

unint64_t sub_1002491DC(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x656C6261736964;
    else
      v3 = 0x656C67676F74;
    if (a1 == 1)
      v4 = 0xE700000000000000;
    else
      v4 = 0xE600000000000000;
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x656C62616E65;
  }
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10024A4E4(a1, v5);
}

uint64_t sub_100249288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = ParagraphStyle.rawValue.getter(a1);
  v5 = v4;
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_10024A668(a1, v6);
}

unint64_t sub_1002492FC(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_10024A9B0(a1, v3);
}

unint64_t sub_100249354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v7, a1, a2);
  swift_bridgeObjectRelease(a2);
  v5 = Hasher._finalize()();
  return sub_100249744(a1, a2, v5);
}

unint64_t sub_1002493CC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  unint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x694C7265646C6F66;
  else
    v5 = 0xD000000000000011;
  if ((a1 & 1) != 0)
    v6 = 0xEA00000000007473;
  else
    v6 = 0x80000001004769B0;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_10024AA50(v4, v7);
}

unint64_t sub_100249468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10024AB8C(a1, v4, &qword_1005D8F90, CALayer_ptr);
}

void sub_1002494B4(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_100249514()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0x6C6C616D73, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  v1 = Hasher._finalize()();
  return sub_10024AC9C(v0, v1);
}

unint64_t sub_100249584(Swift::UInt a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_10024AE6C(a1, v3);
}

unint64_t sub_1002495E8(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x65766F6D6572;
    else
      v3 = 0x656C67676F74;
    v4 = 0xE600000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 6579297;
  }
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10024AF08(a1, v5);
}

unint64_t sub_10024968C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6B636568636E75;
    else
      v3 = 0x656C67676F74;
    if (a1 == 1)
      v4 = 0xE700000000000000;
    else
      v4 = 0xE600000000000000;
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6B63656863;
  }
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10024B080(a1, v5);
}

unint64_t sub_100249744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100249824(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100249998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v15 = (_QWORD *)(v14 + 32 * v8);
      v16 = v15[1];
      v18 = v15[2];
      v17 = v15[3];
      v19 = *v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, a1, a2, 0) & 1) != 0)
      {
        if (v17)
        {
          if (a4)
          {
            v20 = v18 == a3 && v17 == a4;
            if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v17, a3, a4, 0) & 1) != 0)
              return v8;
          }
        }
        else if (!a4)
        {
          return v8;
        }
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_100249AA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100019C6C(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_100249BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = sub_100012E18(&qword_1005D3DA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100016638(&qword_1005D5C50, &qword_1005D3DA0, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100249D14(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x776569567473696CLL;
    else
      v6 = 0x567972656C6C6167;
    if ((a1 & 1) != 0)
      v7 = 0xE800000000000000;
    else
      v7 = 0xEB00000000776569;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x776569567473696CLL : 0x567972656C6C6167;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xE800000000000000 : 0xEB00000000776569;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

unint64_t sub_100249E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10020DB18(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10018550C((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_100249F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10024A118(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 7105633;
    else
      v6 = 7958113;
    while (1)
    {
      v7 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 7105633 : 7958113;
      if (v7 == v6)
        break;
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, 0xE300000000000000, v6, 0xE300000000000000, 0);
      swift_bridgeObjectRelease_n(0xE300000000000000, 2);
      if ((v8 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(0xE300000000000000, 2);
  }
  return v4;
}

unint64_t sub_10024A20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = ~v5;
    v10 = *(_QWORD *)(v3 + 48);
    do
    {
      v11 = (_QWORD *)(v10 + 16 * v6);
      v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
            return v6;
        }
      }
      else if (!a2)
      {
        return v6;
      }
      v6 = (v6 + 1) & v9;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

uint64_t sub_10024A2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10024A4E4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0xE700000000000000;
          v8 = 0x656C6261736964;
          v9 = a1;
          if (!a1)
            goto LABEL_6;
          goto LABEL_11;
        }
        v7 = 0xE600000000000000;
        v12 = 1734831988;
      }
      else
      {
        v7 = 0xE600000000000000;
        v12 = 1650552421;
      }
      v8 = v12 & 0xFFFF0000FFFFFFFFLL | 0x656C00000000;
      v9 = a1;
      if (!a1)
      {
LABEL_6:
        v10 = 0xE600000000000000;
        v11 = 0x656C62616E65;
        if (v8 != 0x656C62616E65)
          goto LABEL_19;
        goto LABEL_18;
      }
LABEL_11:
      if (v9 == 1)
        v11 = 0x656C6261736964;
      else
        v11 = 0x656C67676F74;
      if (v9 == 1)
        v10 = 0xE700000000000000;
      else
        v10 = 0xE600000000000000;
      if (v8 != v11)
        goto LABEL_19;
LABEL_18:
      if (v7 == v10)
      {
        swift_bridgeObjectRelease_n(v7, 2);
        return v4;
      }
LABEL_19:
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v11, v10, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v10);
      if ((v13 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

uint64_t sub_10024A668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10024A9B0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10024AA50(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x694C7265646C6F66;
    else
      v6 = 0xD000000000000011;
    if ((a1 & 1) != 0)
      v7 = 0xEA00000000007473;
    else
      v7 = 0x80000001004769B0;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x694C7265646C6F66 : 0xD000000000000011;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xEA00000000007473 : 0x80000001004769B0;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

unint64_t sub_10024AB8C(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1000163BC(0, a3, a4);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v9 = static NSObject.== infix(_:_:)(v8);

    if ((v9 & 1) == 0)
    {
      v10 = ~v6;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v12 = static NSObject.== infix(_:_:)(v11);

        if ((v12 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_10024AC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10024AE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10024AF08(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        v7 = 0xE600000000000000;
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v8 = 0x65766F6D6572;
          v9 = a1;
          if (!a1)
            goto LABEL_14;
        }
        else
        {
          v8 = 0x656C67676F74;
          v9 = a1;
          if (!a1)
          {
LABEL_14:
            v11 = 0xE300000000000000;
            v10 = 6579297;
            if (v8 != 6579297)
              goto LABEL_16;
            goto LABEL_15;
          }
        }
      }
      else
      {
        v7 = 0xE300000000000000;
        v8 = 6579297;
        v9 = a1;
        if (!a1)
          goto LABEL_14;
      }
      if (v9 == 1)
        v10 = 0x65766F6D6572;
      else
        v10 = 0x656C67676F74;
      v11 = 0xE600000000000000;
      if (v8 != v10)
        goto LABEL_16;
LABEL_15:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n(v7, 2);
        return v4;
      }
LABEL_16:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v10, v11, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_10024B080(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0xE700000000000000;
          v8 = 0x6B636568636E75;
          v9 = a1;
          if (!a1)
            goto LABEL_17;
        }
        else
        {
          v7 = 0xE600000000000000;
          v8 = 0x656C67676F74;
          v9 = a1;
          if (!a1)
          {
LABEL_17:
            v11 = 0xE500000000000000;
            v10 = 0x6B63656863;
            if (v8 != 0x6B63656863)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
      }
      else
      {
        v7 = 0xE500000000000000;
        v8 = 0x6B63656863;
        v9 = a1;
        if (!a1)
          goto LABEL_17;
      }
      if (v9 == 1)
        v10 = 0x6B636568636E75;
      else
        v10 = 0x656C67676F74;
      if (v9 == 1)
        v11 = 0xE700000000000000;
      else
        v11 = 0xE600000000000000;
      if (v8 != v10)
        goto LABEL_19;
LABEL_18:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n(v7, 2);
        return v4;
      }
LABEL_19:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v10, v11, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

uint64_t sub_10024B210()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10024B238(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  __int128 v44[2];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D01B8);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v42 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v40 = v2;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v10);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v41)
              goto LABEL_36;
            v25 = v42[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_10013B100((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v22), (uint64_t)v44);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_10012D11C(*(_QWORD *)(v10 + 56) + 40 * v22, (uint64_t)v44);
    }
    v29 = *(_QWORD *)(v12 + 40);
    v30 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v17 + 8 * v33);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    result = sub_10013B100(v44, *(_QWORD *)(v12 + 56) + 40 * v20);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v40;
  v24 = v42;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v10 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_10024B5E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  int64_t v56;
  char *v57;
  uint64_t v58;

  v3 = v2;
  v6 = sub_100012E18(&qword_1005D3DA0);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0200);
  v55 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v57 = v9;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v52 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v50 = v2;
  v51 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  v53 = v10;
  v54 = v7;
  v58 = v6;
  while (1)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v51)
      break;
    v25 = v52;
    v26 = v52[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v51)
        goto LABEL_36;
      v26 = v52[v19];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v51)
        {
LABEL_36:
          swift_release(v10);
          v3 = v50;
          if ((v55 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v52[v27];
        if (!v26)
        {
          while (1)
          {
            v19 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v19 >= v51)
              goto LABEL_36;
            v26 = v52[v19];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v19 = v27;
      }
    }
LABEL_23:
    v16 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    v28 = v7[9];
    v29 = *(_QWORD *)(v10 + 48) + v28 * v23;
    v30 = 24 * v23;
    v56 = v19;
    if ((v55 & 1) != 0)
    {
      v31 = (void (*)(char *, unint64_t, uint64_t))v7[4];
      v32 = v58;
      v31(v57, v29, v58);
      v33 = *(_QWORD *)(v10 + 56) + v30;
      v34 = *(id *)v33;
      v35 = *(_QWORD *)(v33 + 8);
      v36 = *(_BYTE *)(v33 + 16);
    }
    else
    {
      v37 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      v32 = v58;
      v37(v57, v29, v58);
      v38 = *(_QWORD *)(v10 + 56) + v30;
      v34 = *(id *)v38;
      v35 = *(_QWORD *)(v38 + 8);
      v36 = *(_BYTE *)(v38 + 16);
      sub_10016D9D0(*(id *)v38, v35, v36);
    }
    v39 = *(_QWORD *)(v12 + 40);
    v40 = sub_100016638(&qword_1005D5C40, &qword_1005D3DA0, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v32, v40);
    v41 = -1 << *(_BYTE *)(v12 + 32);
    v42 = result & ~v41;
    v43 = v42 >> 6;
    if (((-1 << v42) & ~*(_QWORD *)(v17 + 8 * (v42 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v17 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
      v7 = v54;
    }
    else
    {
      v44 = 0;
      v45 = (unint64_t)(63 - v41) >> 6;
      v7 = v54;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v46 = v43 == v45;
        if (v43 == v45)
          v43 = 0;
        v44 |= v46;
        v47 = *(_QWORD *)(v17 + 8 * v43);
      }
      while (v47 == -1);
      v20 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v7[4])(*(_QWORD *)(v12 + 48) + v28 * v20, v57, v58);
    v21 = *(_QWORD *)(v12 + 56) + 24 * v20;
    *(_QWORD *)v21 = v34;
    *(_QWORD *)(v21 + 8) = v35;
    *(_BYTE *)(v21 + 16) = v36;
    ++*(_QWORD *)(v12 + 16);
    v10 = v53;
    v19 = v56;
  }
  swift_release(v10);
  v3 = v50;
  v25 = v52;
  if ((v55 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v48 = 1 << *(_BYTE *)(v10 + 32);
  if (v48 >= 64)
    bzero(v25, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v48;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

Swift::Int sub_10024B9C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0168);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10024BC90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D5C28);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_46;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v34 = v3;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_39;
      v20 = *(_QWORD *)(v36 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_39:
          swift_release(v5);
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_46;
          goto LABEL_42;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_48;
            if (v14 >= v35)
              goto LABEL_39;
            v20 = *(_QWORD *)(v36 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v23 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v17);
    v37 = v22;
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v17 + 8);
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain(*((_QWORD *)&v22 + 1));
      v25 = v23;
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    if (v24)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v24);
      String.hash(into:)(v38, v37, v24);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15) = v37;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15) = v23;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_46;
LABEL_42:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_46:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

_OWORD *sub_10024BFBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];
  _OWORD v42[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D02A0);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = (_OWORD *)swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v18 >= v38)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v39 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v38)
        goto LABEL_37;
      v20 = *(_QWORD *)(v39 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_37:
          swift_release(v5);
          if ((v40 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v39 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v38)
              goto LABEL_37;
            v20 = *(_QWORD *)(v39 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((v40 & 1) != 0)
    {
      sub_1000160B8(v23, v42);
    }
    else
    {
      sub_100128424((uint64_t)v23, (uint64_t)v42);
      v24 = v22;
    }
    v25 = *(_QWORD *)(v8 + 40);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v28 = v27;
    Hasher.init(_seed:)(v41, v25);
    String.hash(into:)(v41, v26, v28);
    v29 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v28);
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v12 + 8 * v32);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    result = sub_1000160B8(v42, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v19 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = (_OWORD *)swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10024C2F4(uint64_t a1, uint64_t a2)
{
  return sub_10024CC90(a1, a2, &qword_1005D4DA8);
}

Swift::Int sub_10024C300(uint64_t a1, uint64_t a2)
{
  return sub_10024CC90(a1, a2, &qword_1005D5C48);
}

Swift::Int sub_10024C30C(uint64_t a1, uint64_t a2)
{
  return sub_10024CC90(a1, a2, &qword_1005D0228);
}

uint64_t sub_10024C318(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0238);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_errorRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

Swift::Int sub_10024C6AC(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0130);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_10024C97C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0150);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_1000160B8((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_10020DB18(v26, (uint64_t)&v39);
      sub_100128424(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_1000160B8(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10024CC90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100012E18(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_10024CF98(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D01E8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    swift_bridgeObjectRetain(v31);
    String.hash(into:)(v39, v32, v31);
    swift_bridgeObjectRelease(v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10024D2B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;
  uint64_t v48;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0220);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v45 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = v2;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v44)
      break;
    v24 = v45;
    v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v44)
        goto LABEL_36;
      v25 = v45[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_36:
          swift_release(v9);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v44)
              goto LABEL_36;
            v25 = v45[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v48 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      v32 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain(v30);
    }
    v33 = *(_QWORD *)(v11 + 40);
    v34 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    v35 = -1 << *(_BYTE *)(v11 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v16 + 8 * v37);
      }
      while (v41 == -1);
      v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v6);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v43;
  v24 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v9 + 32);
  if (v42 >= 64)
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v42;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

Swift::Int sub_10024D65C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  Swift::Int result;
  Swift::Int v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40[9];

  v3 = v2;
  v6 = type metadata accessor for FastSyncPresenceController.EditorDebounceState(0);
  v38 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100012E18(&qword_1005D01E0);
  v39 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v35 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v37 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v36 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v20 = v19 | (v12 << 6);
      }
      else
      {
        v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = (Swift::Int)v37;
        if (v21 >= v36)
          goto LABEL_36;
        v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          v12 = v21 + 1;
          if (v21 + 1 >= v36)
            goto LABEL_36;
          v22 = v37[v12];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_36:
              if ((v39 & 1) == 0)
              {
                result = swift_release(v9);
                v3 = v35;
                goto LABEL_43;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v34;
              v3 = v35;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                v12 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v12 >= v36)
                  goto LABEL_36;
                v22 = v37[v12];
                ++v23;
                if (v22)
                  goto LABEL_23;
              }
            }
            v12 = v23;
          }
        }
LABEL_23:
        v16 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v20);
      v25 = *(_QWORD *)(v38 + 72);
      v26 = *(_QWORD *)(v9 + 56) + v25 * v20;
      if ((v39 & 1) != 0)
        sub_100252010(v26, (uint64_t)v8);
      else
        sub_100251FCC(v26, (uint64_t)v8);
      Hasher.init(_seed:)(v40, *(_QWORD *)(v11 + 40));
      Hasher._combine(_:)(v24);
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v18) = v24;
      result = sub_100252010((uint64_t)v8, *(_QWORD *)(v11 + 56) + v25 * v18);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release(v9);
LABEL_43:
  *v3 = v11;
  return result;
}

void sub_10024D988(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  int v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0160);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v3;
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_36;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    if ((a2 & 1) == 0)
      v32 = v30;
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v18 == v27;
        if (v18 == v27)
          v18 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v29 == -1);
      v19 = __clz(__rbit64(~v29)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v30;
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + 4 * v19) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10024DC4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::UInt v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D5C20);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v36[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v36[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((v37 & 1) == 0)
              {
                swift_release(v5);
                v3 = v34;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v36[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      v31 = *v30;
      v32 = v30[1];
      if ((v37 & 1) == 0)
        swift_bridgeObjectRetain(v32);
      Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v29);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18);
      *v19 = v31;
      v19[1] = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

Swift::Int sub_10024DF30(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int *v34;
  char v35;
  uint64_t v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0140);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v35 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v24);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

void sub_10024E200(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  int64_t v48;
  _QWORD v49[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D0138);
  v47 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_46;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v45 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v43 = v2;
  v44 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  v46 = v5;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v48 = v13;
      v18 = v17 | (v13 << 6);
      goto LABEL_25;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return;
    }
    if (v19 >= v44)
      break;
    v20 = v45;
    v21 = v45[v19];
    v22 = v13 + 1;
    if (!v21)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v44)
        goto LABEL_39;
      v21 = v45[v22];
      if (!v21)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v44)
        {
LABEL_39:
          swift_release(v5);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_46;
          goto LABEL_42;
        }
        v21 = v45[v23];
        if (!v21)
        {
          while (1)
          {
            v22 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_48;
            if (v22 >= v44)
              goto LABEL_39;
            v21 = v45[v22];
            ++v23;
            if (v21)
              goto LABEL_24;
          }
        }
        v22 = v13 + 3;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v48 = v22;
    v18 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_25:
    v24 = *(_QWORD *)(v5 + 56);
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 32 * v18);
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v25[3];
    v30 = v24 + 24 * v18;
    v31 = *(_QWORD *)v30;
    v32 = *(_BYTE *)(v30 + 8);
    v33 = *(_QWORD *)(v30 + 16);
    if ((v47 & 1) == 0)
    {
      swift_bridgeObjectRetain(v25[3]);
      swift_bridgeObjectRetain(v27);
      sub_10013ADF8(v31, v32);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v49, *(_QWORD *)(v8 + 40));
    swift_bridgeObjectRetain(v27);
    String.hash(into:)(v49, v26, v27);
    swift_bridgeObjectRelease(v27);
    if (v29)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v29);
      String.hash(into:)(v49, v28, v29);
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v34 = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v8 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v12 + 8 * (v36 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v12 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v12 + 8 * v37);
      }
      while (v41 == -1);
      v14 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 32 * v14);
    *v15 = v26;
    v15[1] = v27;
    v15[2] = v28;
    v15[3] = v29;
    v16 = *(_QWORD *)(v8 + 56) + 24 * v14;
    *(_QWORD *)v16 = v31;
    *(_BYTE *)(v16 + 8) = v32;
    *(_QWORD *)(v16 + 16) = v33;
    ++*(_QWORD *)(v8 + 16);
    v5 = v46;
    v13 = v48;
  }
  swift_release(v5);
  v3 = v43;
  v20 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_46;
LABEL_42:
  v42 = 1 << *(_BYTE *)(v5 + 32);
  if (v42 >= 64)
    bzero(v20, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v42;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_46:
  swift_release(v5);
  *v3 = v8;
}

uint64_t sub_10024E5B4(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100248A00(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 40 * v14);
        sub_1000153C0(v21);
        return sub_10013B100(a1, (uint64_t)v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10024F854();
      goto LABEL_7;
    }
    sub_10024B238(v17, a3 & 1);
    v23 = sub_100248A00(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10024F4A0(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10024E734(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  int v28;

  v6 = (_QWORD **)v5;
  v28 = a3;
  v27 = a2;
  v10 = sub_100012E18(&qword_1005D3DA0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_100248D28(a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    v22 = *v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7] + 24 * v16;
      sub_10024E8CC(*(void **)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
      v24 = v27;
      *(_QWORD *)v23 = a1;
      *(_QWORD *)(v23 + 8) = v24;
      *(_BYTE *)(v23 + 16) = v28;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_10024FA94();
    goto LABEL_7;
  }
  sub_10024B5E0(v19, a5 & 1);
  v25 = sub_100248D28(a4);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return;
  }
  v16 = v25;
  v22 = *v6;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  sub_10024F544(v16, (uint64_t)v13, a1, v27, v28, v22);
}

void sub_10024E8CC(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 2:
      swift_errorRelease(a1);
      break;
    case 1:

      break;
    case 0:

      swift_bridgeObjectRelease(a2);
      break;
  }
}

_OWORD *sub_10024E914(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_100248DA0((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_1000153C0(v16);
        return sub_1000160B8(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10025006C();
      goto LABEL_7;
    }
    sub_10024BFBC(v12, a3 & 1);
    v18 = sub_100248DA0((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10024F5FC(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_10024EA34(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100248C90(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_errorRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10025023C();
    goto LABEL_7;
  }
  sub_10024C318(v17, a3 & 1);
  v23 = sub_100248C90(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10024F660(v14, (uint64_t)v11, a1, v20);
}

void sub_10024EB90(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1002492FC(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10025046C();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_10024C6AC(v13, a3 & 1);
  v18 = sub_1002492FC(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for FolderComposerFilterDataSource.Section);
  __break(1u);
}

_OWORD *sub_10024ECC4(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100248ECC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_1000153C0(v17);
        return sub_1000160B8(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10025060C();
      goto LABEL_7;
    }
    sub_10024C97C(v13, a3 & 1);
    v19 = sub_100248ECC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10020DB18(a2, (uint64_t)v21);
      return sub_10024F6F8(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_10024EDFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100248A98(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002507F0(&qword_1005D5C38);
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10024CC90(v15, a4 & 1, &qword_1005D5C38);
  v20 = sub_100248A98(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10024EF68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100249354(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100250998();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10024CF98(v15, a4 & 1);
  v19 = sub_100249354(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ActivityID);
  __break(1u);
}

uint64_t sub_10024F0B8(uint64_t a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100249584(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = v17
            + *(_QWORD *)(*(_QWORD *)(type metadata accessor for FastSyncPresenceController.EditorDebounceState(0) - 8)
                        + 72)
            * v10;
        return sub_100251F88(a1, v18);
      }
      return sub_10024F770(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100250DB4();
      goto LABEL_7;
    }
    sub_10024D65C(v13, a3 & 1);
    v20 = sub_100249584(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_10024F770(v10, a2, a1, v16);
    }
  }
  type metadata accessor for ID(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

uint64_t sub_10024F1D4(Swift::UInt a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100249584(a1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_100251318();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a3;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v18 = 8 * v10;
    *(_QWORD *)(v16[6] + v18) = a1;
    *(double *)(v16[7] + v18) = a3;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_10024DF30(result, a2 & 1);
  result = sub_100249584(a1);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ActivityStreamNavigationController.ViewModes);
  __break(1u);
  return result;
}

void sub_10024F2FC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;

  v9 = (_QWORD **)v8;
  v16 = (_QWORD *)*v8;
  v18 = sub_100248B7C(a4, a5, a6, a7);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = v16[3];
    if (v23 >= v21 && (a8 & 1) != 0)
    {
LABEL_7:
      v24 = *v9;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = v24[7] + 24 * v18;
        v26 = *(_QWORD *)(v25 + 16);
        sub_100251F00(*(_QWORD *)v25, *(_BYTE *)(v25 + 8));
        swift_release(v26);
        *(_QWORD *)v25 = a1;
        *(_BYTE *)(v25 + 8) = a2;
        *(_QWORD *)(v25 + 16) = a3;
        return;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a8 & 1) == 0)
    {
      sub_1002514A4();
      goto LABEL_7;
    }
    sub_10024E200(v21, a8 & 1);
    v27 = sub_100248B7C(a4, a5, a6, a7);
    if ((v22 & 1) == (v28 & 1))
    {
      v18 = v27;
      v24 = *v9;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10024F7F4(v18, a4, a5, a6, a7, a1, a2, a3, v24);
      swift_bridgeObjectRetain(a7);
      swift_bridgeObjectRetain(a5);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for GroupActivityDebugStatusController.GroupActivityIdentifier);
  __break(1u);
}

uint64_t sub_10024F4A0(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_10013B100(a3, a4[7] + 40 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10024F544(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v12 = a6[6];
  v13 = sub_100012E18(&qword_1005D3DA0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a2, v13);
  v15 = a6[7] + 24 * a1;
  *(_QWORD *)v15 = a3;
  *(_QWORD *)(v15 + 8) = a4;
  *(_BYTE *)(v15 + 16) = a5;
  v16 = a6[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a6[2] = v18;
  return result;
}

_OWORD *sub_10024F5FC(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1000160B8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10024F660(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_10024F6F8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_1000160B8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_10024F770(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for FastSyncPresenceController.EditorDebounceState(0);
  result = sub_100252010(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

unint64_t sub_10024F7F4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, _QWORD *a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a9[(result >> 6) + 8] |= 1 << result;
  v9 = (_QWORD *)(a9[6] + 32 * result);
  *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  v10 = a9[7] + 24 * result;
  *(_QWORD *)v10 = a6;
  *(_BYTE *)(v10 + 8) = a7;
  *(_QWORD *)(v10 + 16) = a8;
  v11 = a9[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a9[2] = v13;
  return result;
}

void *sub_10024F854()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27[2];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012E18(&qword_1005D01B8);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 40 * v18;
    sub_10012D11C(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = (void *)sub_10013B100(v27, *(_QWORD *)(v8 + 56) + v20);
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *sub_10024FA94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = sub_100012E18(&qword_1005D3DA0);
  v1 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v37 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012E18(&qword_1005D0200);
  v34 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v40 = v4;
  if (!v5)
  {
    result = (char *)swift_release(v3);
    v32 = v40;
    v31 = v34;
LABEL_25:
    *v31 = v32;
    return result;
  }
  v6 = v4;
  result = (char *)(v4 + 64);
  v8 = (char *)(v3 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v35 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    result = (char *)memmove(result, v8, 8 * v9);
    v6 = v40;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v39 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v36 = (unint64_t)(v11 + 63) >> 6;
  v15 = v37;
  v14 = v38;
  v16 = v40;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v39;
      goto LABEL_9;
    }
    v28 = v10 + 1;
    v19 = v39;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v36)
      goto LABEL_23;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v10;
    if (!v29)
    {
      v10 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_23;
      v29 = *(_QWORD *)(v35 + 8 * v10);
      if (!v29)
        break;
    }
LABEL_22:
    v13 = (v29 - 1) & v29;
    v18 = __clz(__rbit64(v29)) + (v10 << 6);
LABEL_9:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = *(_QWORD *)(v19 + 56);
    v22 = 24 * v18;
    v23 = v21 + 24 * v18;
    v24 = *(void **)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_QWORD *)(v16 + 48) + v20;
    LOBYTE(v20) = *(_BYTE *)(v23 + 16);
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v26, v15, v14);
    v27 = *(_QWORD *)(v16 + 56) + v22;
    *(_QWORD *)v27 = v24;
    *(_QWORD *)(v27 + 8) = v25;
    *(_BYTE *)(v27 + 16) = v20;
    result = (char *)sub_10016D9D0(v24, v25, v20);
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_23:
    result = (char *)swift_release(v39);
    v31 = v34;
    v32 = v40;
    goto LABEL_25;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v10 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v10 >= v36)
      goto LABEL_23;
    v29 = *(_QWORD *)(v35 + 8 * v10);
    ++v30;
    if (v29)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10024FD1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100012E18(&qword_1005D0168);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10024FEC0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100012E18(&qword_1005D5C28);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
    result = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10025006C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_100012E18(&qword_1005D02A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_100128424(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1000160B8(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100250230()
{
  return sub_1002507F0(&qword_1005D4DA8);
}

void *sub_10025023C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012E18(&qword_1005D0238);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_errorRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10025046C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_100012E18(&qword_1005D0130);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    swift_bridgeObjectRetain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10025060C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100012E18(&qword_1005D0150);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_10020DB18(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_100128424(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_1000160B8(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002507F0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100012E18(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100250998()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100012E18(&qword_1005D01E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100250B44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012E18(&qword_1005D0220);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    swift_release(v3);
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
    swift_bridgeObjectRetain(v24);
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    swift_release(v37);
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_100250DB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for FastSyncPresenceController.EditorDebounceState(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012E18(&qword_1005D01E0);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = 8 * v18;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v21 = *(_QWORD *)(v26 + 72) * v18;
    sub_100251FCC(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v20;
    result = (void *)sub_100252010((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21);
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100250FC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_100012E18(&qword_1005D0160);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 4 * v15;
    v19 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    v20 = v17;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10025116C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100012E18(&qword_1005D5C20);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100251318()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_100012E18(&qword_1005D0140);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002514A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;

  sub_100012E18(&qword_1005D0138);
  v31 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    swift_release(v1);
    *v31 = v3;
    return;
  }
  v4 = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v6)
    memmove(v4, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v28 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v12)
      goto LABEL_26;
    v29 = *(_QWORD *)(v5 + 8 * v28);
    ++v8;
    if (!v29)
    {
      v8 = v28 + 1;
      if (v28 + 1 >= v12)
        goto LABEL_26;
      v29 = *(_QWORD *)(v5 + 8 * v8);
      if (!v29)
        break;
    }
LABEL_25:
    v11 = (v29 - 1) & v29;
    v14 = __clz(__rbit64(v29)) + (v8 << 6);
LABEL_12:
    v15 = 32 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 32 * v14);
    v17 = *v16;
    v18 = v16[1];
    v20 = v16[2];
    v19 = v16[3];
    v21 = 24 * v14;
    v22 = *(_QWORD *)(v1 + 56) + v21;
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 16);
    v25 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v15);
    v26 = *(_BYTE *)(v22 + 8);
    *v25 = v17;
    v25[1] = v18;
    v25[2] = v20;
    v25[3] = v19;
    v27 = *(_QWORD *)(v3 + 56) + v21;
    *(_QWORD *)v27 = v23;
    *(_BYTE *)(v27 + 8) = v26;
    *(_QWORD *)(v27 + 16) = v24;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v18);
    sub_10013ADF8(v23, v26);
    swift_retain(v24);
  }
  v30 = v28 + 2;
  if (v30 >= v12)
    goto LABEL_26;
  v29 = *(_QWORD *)(v5 + 8 * v30);
  if (v29)
  {
    v8 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v29 = *(_QWORD *)(v5 + 8 * v8);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1002516A8(uint64_t a1, char a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(unint64_t, uint64_t, unint64_t);
  void *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(unint64_t, uint64_t, unint64_t);
  unint64_t v70;
  unint64_t *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  v7 = sub_100012E18(&qword_1005D3DA0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100012E18(&qword_1005D0E50);
  v12 = __chkstk_darwin(v11);
  v15 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease(a1);
  v62[1] = v3;
  v63 = v16;
  v17 = a3;
  v18 = &v15[*(int *)(v12 + 48)];
  v62[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = a1 + v62[0];
  v68 = *(_QWORD *)(v13 + 72);
  v65 = a1;
  swift_bridgeObjectRetain(a1);
  sub_100252054(v19, (uint64_t)v15);
  v64 = v8;
  v20 = *(void (**)(unint64_t, uint64_t, unint64_t))(v8 + 32);
  v67 = v15;
  v69 = v20;
  v70 = v7;
  v20((unint64_t)v10, (uint64_t)v15, v7);
  v21 = *(void **)v18;
  v22 = *((_QWORD *)v18 + 1);
  v23 = v18[16];
  v71 = v17;
  v72 = v10;
  v24 = *v17;
  v26 = sub_100248D28((uint64_t)v10);
  v27 = *(_QWORD *)(v24 + 16);
  v28 = (v25 & 1) == 0;
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
    goto LABEL_24;
  v7 = v25;
  if (*(_QWORD *)(v24 + 24) >= v29)
  {
    if ((a2 & 1) != 0)
    {
      if ((v25 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10024FA94();
      if ((v7 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v37 = (uint64_t)v72;
    v7 = *v71;
    *(_QWORD *)(*v71 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    v38 = *(_QWORD *)(v7 + 48);
    v66 = *(_QWORD *)(v64 + 72);
    v69(v38 + v66 * v26, v37, v70);
    v39 = *(_QWORD *)(v7 + 56) + 24 * v26;
    *(_QWORD *)v39 = v21;
    *(_QWORD *)(v39 + 8) = v22;
    *(_BYTE *)(v39 + 16) = v23;
    v40 = *(_QWORD *)(v7 + 16);
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    *(_QWORD *)(v7 + 16) = v42;
    v43 = v63 - 1;
    if (v63 == 1)
      return swift_bridgeObjectRelease_n(v65, 2);
    v44 = v65 + v68 + v62[0];
    while (1)
    {
      v45 = (uint64_t)v67;
      sub_100252054(v44, (uint64_t)v67);
      v46 = (uint64_t)v72;
      v69((unint64_t)v72, v45, v70);
      v21 = *(void **)v18;
      v22 = *((_QWORD *)v18 + 1);
      v23 = v18[16];
      v47 = *v71;
      v7 = sub_100248D28(v46);
      v49 = *(_QWORD *)(v47 + 16);
      v50 = (v48 & 1) == 0;
      v51 = v49 + v50;
      if (__OFADD__(v49, v50))
        break;
      v52 = v48;
      if (*(_QWORD *)(v47 + 24) < v51)
      {
        sub_10024B5E0(v51, 1);
        v53 = sub_100248D28((uint64_t)v72);
        if ((v52 & 1) != (v54 & 1))
          goto LABEL_26;
        v7 = v53;
      }
      if ((v52 & 1) != 0)
        goto LABEL_10;
      v55 = (uint64_t)v72;
      v56 = (_QWORD *)*v71;
      *(_QWORD *)(*v71 + 8 * (v7 >> 6) + 64) |= 1 << v7;
      v69(v56[6] + v66 * v7, v55, v70);
      v57 = v56[7] + 24 * v7;
      *(_QWORD *)v57 = v21;
      *(_QWORD *)(v57 + 8) = v22;
      *(_BYTE *)(v57 + 16) = v23;
      v58 = v56[2];
      v41 = __OFADD__(v58, 1);
      v59 = v58 + 1;
      if (v41)
        goto LABEL_25;
      v56[2] = v59;
      v44 += v68;
      if (!--v43)
        return swift_bridgeObjectRelease_n(v65, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_10024B5E0(v29, a2 & 1);
  v30 = sub_100248D28((uint64_t)v72);
  if ((v7 & 1) == (v31 & 1))
  {
    v26 = v30;
    if ((v7 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v33 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v33);
    v75 = v33;
    swift_errorRetain(v33);
    v34 = sub_100012E18(&qword_1005D7A90);
    v35 = swift_dynamicCast(v34, &v75, v34, &type metadata for _MergeError, 0);
    v7 = (unint64_t)v72;
    if ((v35 & 1) == 0)
    {
      v36 = v65;
      swift_bridgeObjectRelease(v65);
      sub_10024E8CC(v21, v22, v23);
      (*(void (**)(unint64_t, unint64_t))(v64 + 8))(v7, v70);
      swift_bridgeObjectRelease(v36);
      return swift_errorRelease(v75);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v70);
  __break(1u);
LABEL_27:
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v60._object = (void *)0x8000000100484800;
  v60._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v60);
  _print_unlocked<A, B>(_:_:)(v7, &v73, v70, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v61._countAndFlagsBits = 39;
  v61._object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v73, v74, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_100251B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D0E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100251BAC()
{
  unint64_t result;

  result = qword_1005D5B50;
  if (!qword_1005D5B50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D5B50);
  }
  return result;
}

unint64_t sub_100251BF4()
{
  unint64_t result;

  result = qword_1005D5B58;
  if (!qword_1005D5B58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D5B58);
  }
  return result;
}

unint64_t sub_100251C3C()
{
  unint64_t result;

  result = qword_1005D5B60;
  if (!qword_1005D5B60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D5B60);
  }
  return result;
}

unint64_t sub_100251C84()
{
  unint64_t result;

  result = qword_1005D5B68;
  if (!qword_1005D5B68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D5B68);
  }
  return result;
}

unint64_t sub_100251CCC()
{
  unint64_t result;

  result = qword_1005D5B70;
  if (!qword_1005D5B70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D5B70);
  }
  return result;
}

uint64_t type metadata accessor for ICArchivePreviewer()
{
  return objc_opt_self(_TtC11MobileNotes18ICArchivePreviewer);
}

ValueMetadata *type metadata accessor for ICArchivePreviewer.Errors()
{
  return &type metadata for ICArchivePreviewer.Errors;
}

void destroy for ICArchivePreviewer.ObjectStates(uint64_t a1)
{
  sub_10024E8CC(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s11MobileNotes18ICArchivePreviewerC12ObjectStatesOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10016D9D0(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ICArchivePreviewer.ObjectStates(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10016D9D0(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10024E8CC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ICArchivePreviewer.ObjectStates(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10024E8CC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchivePreviewer.ObjectStates(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchivePreviewer.ObjectStates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100251EC0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_100251ED8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ICArchivePreviewer.ObjectStates()
{
  return &type metadata for ICArchivePreviewer.ObjectStates;
}

uint64_t sub_100251F00(uint64_t result, char a2)
{
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      result = swift_errorRelease(result);
      break;
    case 1:
      result = sub_100251F34(result);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100251F34(unint64_t result)
{
  if (result >= 2)
    return swift_errorRelease(result);
  return result;
}

unint64_t sub_100251F44()
{
  unint64_t result;

  result = qword_1005D5C30;
  if (!qword_1005D5C30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1005D5C30);
  }
  return result;
}

uint64_t sub_100251F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FastSyncPresenceController.EditorDebounceState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100251FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FastSyncPresenceController.EditorDebounceState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100252010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FastSyncPresenceController.EditorDebounceState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100252054(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D0E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10025209C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002520C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 16))(*(_QWORD *)(v0 + 32), 1);
}

void sub_1002520F4(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    swift_errorRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(a2);

  }
}

uint64_t sub_100252124()
{
  uint64_t v0;

  sub_1002520F4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_100252168()
{
  uint64_t v0;

  sub_1002487AC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(void (**)(void *, uint64_t))(v0 + 64));
}

id sub_100252180(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if ((a4 & 1) != 0)
    return (id)swift_errorRetain(a1);
  swift_bridgeObjectRetain(a2);
  return a3;
}

id sub_1002521B0(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

void sub_1002521BC(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    sub_10024E8CC(a1, a2, a3);
}

id sub_1002521D0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v42;
  char *v43;
  void (**v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t aBlock;
  uint64_t v53;
  uint64_t v54;

  v8 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100012E18(&qword_1005D3DA0);
  v11 = *(char **)(v48 - 8);
  v12 = *((_QWORD *)v11 + 8);
  v13 = __chkstk_darwin(v48);
  v44 = (void (**)(char *, uint64_t))((char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v13);
  v43 = (char *)&v42 - v15;
  v16 = __chkstk_darwin(v14);
  __chkstk_darwin(v16);
  v18 = (char *)&v42 - v17;
  v19 = swift_allocObject(&unk_100560FC0, 32, 7);
  v50 = a3;
  v51 = v19;
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  v45 = a2 + 24;
  swift_beginAccess(a2 + 24, &aBlock, 32, 0);
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD *)(v20 + 16);
  v49 = a4;
  swift_retain(a4);
  if (v21)
  {
    v22 = sub_100248D28(a1);
    if ((v23 & 1) != 0)
    {
      v24 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 56) + 24 * v22 + 16);
      swift_endAccess(&aBlock);
      __asm { BR              X9 }
    }
  }
  swift_endAccess(&aBlock);
  if (qword_1005CEB60 != -1)
    swift_once(&qword_1005CEB60, sub_100247270);
  v25 = type metadata accessor for Logger(0);
  sub_10012A0B0(v25, (uint64_t)qword_1005D5B38);
  v26 = v48;
  v27 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v11 + 2))(v18, a1, v48);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.fault.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    aBlock = v45;
    *(_DWORD *)v30 = 136315138;
    v43 = (char *)(v30 + 4);
    v44 = (void (**)(char *, uint64_t))v11;
    ICObjectReferences.identifier.getter(v26);
    v31 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v32 = v47;
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v47, v31);
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v32);
    v53 = sub_1003A4190(v33, v35, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v43);
    swift_bridgeObjectRelease(v35);
    v44[1](v18, v26);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Object to be previewed does not exist {url: %s}", v30, 0xCu);
    v36 = v45;
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    (*((void (**)(char *, uint64_t))v11 + 1))(v18, v26);
  }

  v37 = sub_10016E9D4();
  v38 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v37, 0, 0);
  *v39 = 4;
  swift_errorRetain(v38);
  v50(v38, 1);
  swift_errorRelease(v38);
  swift_errorRelease(v38);
  v40 = objc_msgSend(objc_allocWithZone((Class)NSProgress), "init");
  swift_release(v51);
  return v40;
}

void sub_100252B0C(void *a1, char a2)
{
  uint64_t v2;

  sub_100169BAC(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_100252B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100012E18(&qword_1005D3DA0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100252B94(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012E18(&qword_1005D3DA0) - 8) + 80);
  sub_100247D9C(a1, v4, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_100252BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = sub_100012E18(&qword_1005D3DA0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_100252C90(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_100012E18(&qword_1005D3DA0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1002481FC(a1, v1 + v4, *(void **)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100252D00(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t OpenTableIntent.target.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for TableEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100253A98(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100253ADC(a1);
}

void *OpenTableIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenTableIntent.persistentIdentifier;
}

unint64_t static OpenTableIntent.persistentIdentifier.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_100252DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static OpenTableIntent.title);
  sub_10012A0B0(v10, (uint64_t)static OpenTableIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x54206C6165766552, 0xEC000000656C6261);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t OpenTableIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEB68 != -1)
    swift_once(&qword_1005CEB68, sub_100252DFC);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static OpenTableIntent.title);
}

uint64_t static OpenTableIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEB68 != -1)
    swift_once(&qword_1005CEB68, sub_100252DFC);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static OpenTableIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *OpenTableIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenTableIntent.openAppWhenRun;
}

uint64_t static OpenTableIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100484840);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static OpenTableIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005D5C60);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D5C68);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100185B88();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for OpenTableIntent, v6);
  v7._countAndFlagsBits = 0x74206C6165766552;
  v7._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10045DA60, v8);
  v10 = sub_100012E18(&qword_1005D5C70);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x656C62617420;
  v11._object = (void *)0xE600000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for OpenTableIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenTableIntent, v6);
}

uint64_t sub_1002533C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for TableEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100253A98(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100253ADC(a1);
}

uint64_t sub_100253440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005D5C60);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D5C68);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, a1, a2);
  v10._countAndFlagsBits = 0x74206C6165766552;
  v10._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_10045DA60, v11);
  v13 = sub_100012E18(&qword_1005D5C70);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x656C62617420;
  v14._object = (void *)0xE600000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_1002535B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes15OpenTableIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t _s11MobileNotes15OpenTableIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD v52[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18(&qword_1005CF088);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18((uint64_t *)&unk_1005CF090);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x656C626154, 0xE500000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Table intent", 37, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100477C80);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for table", 31, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for TableEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v35 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v36 = sub_100253D28(&qword_1005DCC40, (uint64_t)&protocol conformance descriptor for TableEntity);
  v37 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v50 = 0xD000000000000024;
  v51 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v38 = type metadata accessor for AppDependencyManager(0);
  v39 = static AppDependencyManager.shared.getter(v38);
  AppDependency.__allocating_init(key:manager:)(v52, v39);
  sub_100012E18(&qword_1005CEE50);
  v50 = 0xD000000000000021;
  v51 = 0x8000000100476B70;
  v40 = AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v41 = static AppDependencyManager.shared.getter(v40);
  AppDependency.__allocating_init(key:manager:)(v52, v41);
  return v37;
}

uint64_t sub_100253A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TableEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100253ADC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TableEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100253B18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100253B40()
{
  return sub_100253D28(&qword_1005D5C78, (uint64_t)&protocol conformance descriptor for TableEntity);
}

unint64_t sub_100253B64(uint64_t a1)
{
  unint64_t result;

  result = sub_100253B88();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100253B88()
{
  unint64_t result;

  result = qword_1005D5CA8;
  if (!qword_1005D5CA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTableIntent, &type metadata for OpenTableIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5CA8);
  }
  return result;
}

unint64_t sub_100253BD0()
{
  unint64_t result;

  result = qword_1005D5CB0;
  if (!qword_1005D5CB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTableIntent, &type metadata for OpenTableIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5CB0);
  }
  return result;
}

uint64_t sub_100253C14()
{
  return sub_100253D28(&qword_1005D10B0, (uint64_t)&protocol conformance descriptor for TableEntity);
}

unint64_t sub_100253C40()
{
  unint64_t result;

  result = qword_1005D5CB8;
  if (!qword_1005D5CB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTableIntent, &type metadata for OpenTableIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5CB8);
  }
  return result;
}

unint64_t sub_100253C88()
{
  unint64_t result;

  result = qword_1005D5CC0;
  if (!qword_1005D5CC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTableIntent, &type metadata for OpenTableIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5CC0);
  }
  return result;
}

uint64_t sub_100253CCC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of OpenTableIntent.perform()>>, 1);
}

uint64_t sub_100253CDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static OpenTableIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for OpenTableIntent()
{
  return &type metadata for OpenTableIntent;
}

uint64_t sub_100253CFC()
{
  return sub_100016638(&qword_1005D5CD0, &qword_1005D5CD8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_100253D28(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TableEntity(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100253D68()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D5CE0);
  sub_10012A0B0(v0, (uint64_t)qword_1005D5CE0);
  return static Logger.archiving.getter();
}

uint64_t sub_100253DB0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v13 = _s16AttributedStringV9AttributeVMa(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = a6;
  swift_bridgeObjectRetain(a1);
  sub_100253EEC(v18, a2, a3, a6, a7, v16);
  v19 = *(_QWORD *)(a5 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  *(_QWORD *)(a5 + 16) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = sub_10016B2A8(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
    *(_QWORD *)(a5 + 16) = v19;
  }
  v22 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  if (v22 >= v21 >> 1)
  {
    v19 = sub_10016B2A8(v21 > 1, v22 + 1, 1, v19);
    *(_QWORD *)(a5 + 16) = v19;
  }
  *(_QWORD *)(v19 + 16) = v22 + 1;
  return sub_10013B170((uint64_t)v16, v19+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v22, _s16AttributedStringV9AttributeVMa);
}

void sub_100253EEC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(void);
  void (*v42)(void);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  __n128 v51;
  uint64_t v52;
  char v53;
  void (*v54)(void);
  int v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void (*v61)(void);
  id v62;
  __n128 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  id v67;
  __n128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  __int16 v83;
  unsigned int v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  __n128 v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  unint64_t v103;
  unsigned int v104;
  int v105;
  int v106;
  __int16 v107;
  unsigned int v108;
  uint64_t v109;
  id v110;
  __n128 v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  __int16 v125;
  unsigned int v126;
  uint64_t v127;
  id v128;
  __n128 v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  unint64_t v139;
  unsigned int v140;
  int v141;
  int v142;
  __int16 v143;
  unsigned int v144;
  uint64_t v145;
  id v146;
  __n128 v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  unint64_t v156;
  unsigned int v157;
  int v158;
  int v159;
  __int16 v160;
  unsigned int v161;
  uint64_t v162;
  id v163;
  __n128 v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  unint64_t v173;
  unsigned int v174;
  int v175;
  int v176;
  __int16 v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  __n128 v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  id v192;
  uint64_t v193;
  id v194;
  unint64_t v195;
  char v196;
  char v197;
  id v198;
  __n128 v199;
  uint64_t v200;
  char v201;
  int v202;
  void (*v203)(char *, uint64_t, uint64_t);
  char *v204;
  uint64_t v205;
  id v206;
  __n128 v207;
  uint64_t v208;
  char v209;
  unint64_t v210;
  char v211;
  id v212;
  __n128 v213;
  uint64_t v214;
  char v215;
  unint64_t v216;
  char v217;
  id v218;
  __n128 v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  void *v223;
  id v224;
  id v225;
  id v226;
  uint64_t *v227;
  id v228;
  void *v229;
  id v230;
  char *v231;
  uint64_t v232;
  void (*v233)(char *, char *, uint64_t);
  __int128 *v234;
  char *v235;
  uint64_t v236;
  uint64_t *v237;
  __int128 *v238;
  id v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  id v246;
  NSObject *v247;
  os_log_type_t v248;
  uint8_t *v249;
  _QWORD *v250;
  id v251;
  uint64_t v252;
  unsigned __int8 v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  int v260;
  uint64_t v261;
  char *v262;
  uint64_t *v263;
  void (*v264)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  char *v267;
  void (*v268)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(void);
  uint64_t v278;
  void *v279;
  _QWORD *v280;
  uint64_t v281;
  char *v282;
  CGColor *v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;

  v260 = a5;
  v279 = a4;
  v280 = a2;
  v281 = a3;
  v8 = sub_100012E18(&qword_1005D5CF8);
  __chkstk_darwin(v8);
  v259 = (uint64_t *)((char *)&v254 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100012E18(&qword_1005CEFD0);
  v11 = __chkstk_darwin(v10);
  v256 = (char *)&v254 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v282 = (char *)&v254 - v13;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v255 = (char *)&v254 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v254 = (char *)&v254 - v19;
  __chkstk_darwin(v18);
  v272 = (char *)&v254 - v20;
  v21 = sub_100012E18(&qword_1005D5D00);
  __chkstk_darwin(v21);
  v271 = (uint64_t)&v254 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v23);
  v267 = (char *)&v254 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v25);
  v27 = (char *)&v254 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v262 = (char *)&v254 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = (int *)_s16AttributedStringV9AttributeVMa(0);
  v32 = *(void (**)(void))(v29 + 56);
  v261 = (uint64_t)a6 + v31[5];
  v277 = v32;
  v32();
  v33 = (uint64_t)a6 + v31[6];
  v34 = type metadata accessor for Date(0);
  v35 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v266 = v33;
  v265 = v34;
  v264 = v35;
  ((void (*)(uint64_t, uint64_t, uint64_t))v35)(v33, 1, 1);
  v36 = (char *)a6 + v31[7];
  *(_OWORD *)v36 = xmmword_10045A5A0;
  *((_OWORD *)v36 + 1) = 0u;
  *((_OWORD *)v36 + 2) = 0u;
  *((_OWORD *)v36 + 3) = 0u;
  *((_QWORD *)v36 + 8) = 0;
  v37 = (uint64_t)a6 + v31[8];
  v38 = _s16AttributedStringV14ParagraphStyleVMa(0);
  v39 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v270 = v37;
  v269 = v38;
  v268 = v39;
  ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v37, 1, 1);
  v273 = v31[9];
  *((_BYTE *)a6 + v273) = 5;
  v40 = (uint64_t)a6 + v31[10];
  v276 = v15;
  v41 = *(void (**)(void))(v15 + 56);
  v274 = v40;
  v278 = v14;
  v42 = v41;
  v41();
  v275 = v31[11];
  *((_BYTE *)a6 + v275) = 5;
  v43 = (_QWORD *)((char *)a6 + v31[12]);
  *v43 = 0;
  v43[1] = 0;
  v44 = (uint64_t)a6 + v31[13];
  v45 = _s16AttributedStringV16InlineAttachmentVMa(0);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v258 = v44;
  v257 = v45;
  v46(v44, 1, 1);
  v47 = v280;
  v280 = a6;
  v48 = v281;
  *a6 = v47;
  a6[1] = v48;
  v49 = *(_QWORD *)(a1 + 16);
  v263 = v43;
  if (!v49)
  {
    v286 = 0u;
    v287 = 0u;
LABEL_8:
    v54 = v277;
    goto LABEL_9;
  }
  v50 = ICTTAttributeNameReplicaID;
  v52 = sub_1002489FC(v50, v51);
  if ((v53 & 1) == 0)
  {
    v286 = 0u;
    v287 = 0u;

    goto LABEL_8;
  }
  sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v52, (uint64_t)&v286);

  v54 = v277;
  if (!*((_QWORD *)&v287 + 1))
  {
LABEL_9:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v54)(v27, 1, 1, v28);
    goto LABEL_10;
  }
  v55 = swift_dynamicCast(v27, &v286, (char *)&type metadata for Any + 8, v28, 6);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v54)(v27, v55 ^ 1u, 1, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) != 1)
  {
    v56 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v57 = v262;
    v56(v262, v27, v28);
    v58 = v261;
    sub_100012DDC(v261, (uint64_t *)&unk_1005D06A0);
    v56((char *)v58, v57, v28);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v54)(v58, 0, 1, v28);
    goto LABEL_11;
  }
LABEL_10:
  sub_100012DDC((uint64_t)v27, (uint64_t *)&unk_1005D06A0);
LABEL_11:
  v59 = v278;
  v60 = v279;
  v61 = v42;
  if (!*(_QWORD *)(a1 + 16))
  {
    v286 = 0u;
    v287 = 0u;
    goto LABEL_22;
  }
  v62 = ICTTAttributeNameTimestamp;
  v64 = sub_1002489FC(v62, v63);
  if ((v65 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v64, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (!*((_QWORD *)&v287 + 1))
  {
LABEL_22:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_20;
LABEL_23:
    v286 = 0u;
    v287 = 0u;
    goto LABEL_29;
  }
  if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
  {
    v66 = (uint64_t)v267;
    Date.init(timeIntervalSince1970:)(*(double *)&v284);
    v264(v66, 0, 1, v265);
    sub_100164108(v66, v266, (uint64_t *)&unk_1005D7B20);
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_23;
LABEL_20:
  v67 = ICTTAttributeNameFont;
  v69 = sub_1002489FC(v67, v68);
  if ((v70 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v69, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (!*((_QWORD *)&v287 + 1))
  {
LABEL_29:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_40;
    goto LABEL_30;
  }
  v71 = sub_1000163BC(0, &qword_1005D5D08, ICTTFont_ptr);
  if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, v71, 6) & 1) == 0)
    goto LABEL_39;
  v72 = (void *)v284;
  v73 = *((_QWORD *)v36 + 1);
  if (v73 == 1)
  {
    v74 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0uLL;
    v79 = 0x200000000;
    v80 = 1;
    v81 = 0x2000000;
    v82 = 0x20000;
    v83 = 512;
    v84 = 1;
  }
  else
  {
    v77 = *((_QWORD *)v36 + 8);
    v78 = *((_OWORD *)v36 + 3);
    v85 = *((_QWORD *)v36 + 3);
    v76 = *((_QWORD *)v36 + 4);
    v75 = *((_QWORD *)v36 + 2);
    v74 = *(_QWORD *)v36;
    v83 = v85 & 0xFF00;
    v82 = v85 & 0xFFFF0000;
    v81 = v85 & 0xFF000000;
    v79 = v85 & 0xFFFFFFFF00000000;
    v80 = v85 & 1;
    v84 = v36[40] & 1;
  }
  *(_QWORD *)v36 = v74;
  *((_QWORD *)v36 + 1) = v73;
  *((_QWORD *)v36 + 2) = v75;
  *((_QWORD *)v36 + 3) = (unsigned __int16)v83 & 0xFF00 | *(_QWORD *)&v82 & 0xFF0000 | v80 | v81 & 0xFF000000 | v79 & 0xFF00000000;
  *((_QWORD *)v36 + 4) = v76;
  *((_QWORD *)v36 + 5) = v84;
  *((_OWORD *)v36 + 3) = v78;
  *((_QWORD *)v36 + 8) = v77;
  v86 = objc_msgSend(v72, "fontName");
  if (v86)
  {
    v87 = v86;
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
    v90 = v89;

  }
  else
  {
    v88 = 0;
    v90 = 0;
  }
  swift_bridgeObjectRelease(*((_QWORD *)v36 + 1));
  *(_QWORD *)v36 = v88;
  *((_QWORD *)v36 + 1) = v90;
  if (v90 == 1
    || (objc_msgSend(v72, "pointSize"), *((_QWORD *)v36 + 2) = v91, v36[24] = 0, *((_QWORD *)v36 + 1) == 1)
    || (v36[25] = objc_msgSend(v72, "fontHints") & 1, *((_QWORD *)v36 + 1) == 1))
  {

LABEL_39:
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_40;
LABEL_30:
    v286 = 0u;
    v287 = 0u;
    goto LABEL_47;
  }
  v253 = objc_msgSend(v72, "fontHints");

  v36[26] = (v253 & 2) != 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_30;
LABEL_40:
  v92 = ICTTAttributeNameFontHints;
  v94 = sub_1002489FC(v92, v93);
  if ((v95 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v94, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (!*((_QWORD *)&v287 + 1))
  {
LABEL_47:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_52;
LABEL_48:
    v286 = 0u;
    v287 = 0u;
    goto LABEL_59;
  }
  if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6) & 1) != 0)
  {
    v96 = v284;
    v97 = *((_QWORD *)v36 + 1);
    if (v97 == 1)
    {
      v98 = 0;
      v97 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v102 = 0uLL;
      v103 = 0x200000000;
      v104 = 1;
      v105 = 0x2000000;
      v106 = 0x20000;
      v107 = 512;
      v108 = 1;
    }
    else
    {
      v101 = *((_QWORD *)v36 + 8);
      v102 = *((_OWORD *)v36 + 3);
      v109 = *((_QWORD *)v36 + 3);
      v100 = *((_QWORD *)v36 + 4);
      v99 = *((_QWORD *)v36 + 2);
      v98 = *(_QWORD *)v36;
      v107 = v109 & 0xFF00;
      v106 = v109 & 0xFFFF0000;
      v105 = v109 & 0xFF000000;
      v103 = v109 & 0xFFFFFFFF00000000;
      v104 = v109 & 1;
      v108 = v36[40] & 1;
    }
    *(_QWORD *)v36 = v98;
    *((_QWORD *)v36 + 1) = v97;
    *((_QWORD *)v36 + 2) = v99;
    *((_QWORD *)v36 + 3) = (unsigned __int16)v107 & 0xFF00 | *(_QWORD *)&v106 & 0xFF0000 | v104 | v105 & 0xFF000000 | v103 & 0xFF00000000;
    *((_QWORD *)v36 + 4) = v100;
    *((_QWORD *)v36 + 5) = v108;
    *((_OWORD *)v36 + 3) = v102;
    *((_QWORD *)v36 + 8) = v101;
    v36[25] = v96 & 1;
    v36[26] = (v96 & 2) != 0;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_48;
LABEL_52:
  v110 = ICTTAttributeNameUnderline;
  v112 = sub_1002489FC(v110, v111);
  if ((v113 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v112, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (!*((_QWORD *)&v287 + 1))
  {
LABEL_59:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_64;
LABEL_60:
    v286 = 0u;
    v287 = 0u;
    goto LABEL_71;
  }
  if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
  {
    v114 = v284;
    v115 = *((_QWORD *)v36 + 1);
    if (v115 == 1)
    {
      v116 = 0;
      v115 = 0;
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v120 = 0uLL;
      v121 = 0x200000000;
      v122 = 1;
      v123 = 0x2000000;
      v124 = 0x20000;
      v125 = 512;
      v126 = 1;
    }
    else
    {
      v119 = *((_QWORD *)v36 + 8);
      v120 = *((_OWORD *)v36 + 3);
      v127 = *((_QWORD *)v36 + 3);
      v118 = *((_QWORD *)v36 + 4);
      v117 = *((_QWORD *)v36 + 2);
      v116 = *(_QWORD *)v36;
      v125 = v127 & 0xFF00;
      v124 = v127 & 0xFFFF0000;
      v123 = v127 & 0xFF000000;
      v121 = v127 & 0xFFFFFFFF00000000;
      v122 = v127 & 1;
      v126 = v36[40] & 1;
    }
    *(_QWORD *)v36 = v116;
    *((_QWORD *)v36 + 1) = v115;
    *((_QWORD *)v36 + 2) = v117;
    *((_QWORD *)v36 + 3) = (unsigned __int16)v125 & 0xFF00 | *(_QWORD *)&v124 & 0xFF0000 | v122 | v123 & 0xFF000000 | v121 & 0xFF00000000;
    *((_QWORD *)v36 + 4) = v118;
    *((_QWORD *)v36 + 5) = v126;
    *((_OWORD *)v36 + 3) = v120;
    *((_QWORD *)v36 + 8) = v119;
    v36[27] = v114;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_60;
LABEL_64:
  v128 = ICTTAttributeNameStrikethrough;
  v130 = sub_1002489FC(v128, v129);
  if ((v131 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v130, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (!*((_QWORD *)&v287 + 1))
  {
LABEL_71:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_76;
LABEL_72:
    v286 = 0u;
    v287 = 0u;
    goto LABEL_83;
  }
  if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
  {
    v132 = v284;
    v133 = *((_QWORD *)v36 + 1);
    if (v133 == 1)
    {
      v134 = 0;
      v133 = 0;
      v135 = 0;
      v136 = 0;
      v137 = 0;
      v138 = 0uLL;
      v139 = 0x200000000;
      v140 = 1;
      v141 = 0x2000000;
      v142 = 0x20000;
      v143 = 512;
      v144 = 1;
    }
    else
    {
      v137 = *((_QWORD *)v36 + 8);
      v138 = *((_OWORD *)v36 + 3);
      v145 = *((_QWORD *)v36 + 3);
      v136 = *((_QWORD *)v36 + 4);
      v135 = *((_QWORD *)v36 + 2);
      v134 = *(_QWORD *)v36;
      v143 = v145 & 0xFF00;
      v142 = v145 & 0xFFFF0000;
      v141 = v145 & 0xFF000000;
      v139 = v145 & 0xFFFFFFFF00000000;
      v140 = v145 & 1;
      v144 = v36[40] & 1;
    }
    *(_QWORD *)v36 = v134;
    *((_QWORD *)v36 + 1) = v133;
    *((_QWORD *)v36 + 2) = v135;
    *((_QWORD *)v36 + 3) = (unsigned __int16)v143 & 0xFF00 | *(_QWORD *)&v142 & 0xFF0000 | v140 | v141 & 0xFF000000 | v139 & 0xFF00000000;
    *((_QWORD *)v36 + 4) = v136;
    *((_QWORD *)v36 + 5) = v144;
    *((_OWORD *)v36 + 3) = v138;
    *((_QWORD *)v36 + 8) = v137;
    v36[28] = v132;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_72;
LABEL_76:
  v146 = ICTTAttributeNameSuperscript;
  v148 = sub_1002489FC(v146, v147);
  if ((v149 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v148, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (!*((_QWORD *)&v287 + 1))
  {
LABEL_83:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_88;
LABEL_84:
    v284 = 0u;
    v285 = 0u;
LABEL_94:
    sub_100012DDC((uint64_t)&v284, &qword_1005CF190);
    goto LABEL_97;
  }
  if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
  {
    v150 = v284;
    v151 = *((_QWORD *)v36 + 1);
    if (v151 == 1)
    {
      v152 = 0;
      v151 = 0;
      v153 = 0;
      v154 = 0;
      v155 = 0uLL;
      v156 = 0x200000000;
      v157 = 1;
      v158 = 0x2000000;
      v159 = 0x20000;
      v160 = 512;
      v161 = 1;
    }
    else
    {
      v154 = *((_QWORD *)v36 + 8);
      v155 = *((_OWORD *)v36 + 3);
      v153 = *((_QWORD *)v36 + 2);
      v162 = *((_QWORD *)v36 + 3);
      v152 = *(_QWORD *)v36;
      v160 = v162 & 0xFF00;
      v159 = v162 & 0xFFFF0000;
      v158 = v162 & 0xFF000000;
      v156 = v162 & 0xFFFFFFFF00000000;
      v157 = v162 & 1;
      v161 = v36[40] & 1;
    }
    *(_QWORD *)v36 = v152;
    *((_QWORD *)v36 + 1) = v151;
    *((_QWORD *)v36 + 2) = v153;
    *((_QWORD *)v36 + 3) = (unsigned __int16)v160 & 0xFF00 | *(_QWORD *)&v159 & 0xFF0000 | v157 | v158 & 0xFF000000 | v156 & 0xFF00000000;
    *((_OWORD *)v36 + 3) = v155;
    *((_QWORD *)v36 + 8) = v154;
    *((_QWORD *)v36 + 4) = v150;
    *((_QWORD *)v36 + 5) = v161;
    v36[40] = 0;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_84;
LABEL_88:
  v163 = ICTTAttributeNameForegroundColor;
  v165 = sub_1002489FC(v163, v164);
  if ((v166 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v165, (uint64_t)&v284);
  }
  else
  {
    v284 = 0u;
    v285 = 0u;
  }

  if (!*((_QWORD *)&v285 + 1))
    goto LABEL_94;
  sub_1000160B8(&v284, &v286);
  v167 = *((_QWORD *)v36 + 1);
  if (v167 == 1)
  {
    v168 = 0;
    v167 = 0;
    v169 = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0uLL;
    v173 = 0x200000000;
    v174 = 1;
    v175 = 0x2000000;
    v176 = 0x20000;
    v177 = 512;
    v178 = 1;
  }
  else
  {
    v171 = *((_QWORD *)v36 + 8);
    v172 = *((_OWORD *)v36 + 3);
    v179 = *((_QWORD *)v36 + 3);
    v170 = *((_QWORD *)v36 + 4);
    v169 = *((_QWORD *)v36 + 2);
    v168 = *(_QWORD *)v36;
    v177 = v179 & 0xFF00;
    v176 = v179 & 0xFFFF0000;
    v175 = v179 & 0xFF000000;
    v173 = v179 & 0xFFFFFFFF00000000;
    v174 = v179 & 1;
    v178 = v36[40] & 1;
  }
  *(_QWORD *)v36 = v168;
  *((_QWORD *)v36 + 1) = v167;
  *((_QWORD *)v36 + 2) = v169;
  *((_QWORD *)v36 + 3) = (unsigned __int16)v177 & 0xFF00 | *(_QWORD *)&v176 & 0xFF0000 | v174 | v175 & 0xFF000000 | v173 & 0xFF00000000;
  *((_QWORD *)v36 + 4) = v170;
  *((_QWORD *)v36 + 5) = v178;
  *((_OWORD *)v36 + 3) = v172;
  *((_QWORD *)v36 + 8) = v171;
  sub_100128424((uint64_t)&v286, (uint64_t)&v284);
  type metadata accessor for CGColor(0);
  swift_dynamicCast(&v283, &v284, (char *)&type metadata for Any + 8, v180, 7);
  v181 = sub_10025BA14(v283);
  v183 = v182;
  v185 = v184;
  sub_1000153C0(&v286);
  sub_1001F41A0(*((_QWORD *)v36 + 6), *((_QWORD *)v36 + 7), *((_QWORD *)v36 + 8));
  *((_QWORD *)v36 + 6) = v181;
  *((_QWORD *)v36 + 7) = v183;
  *((_QWORD *)v36 + 8) = v185;
LABEL_97:
  v186 = (uint64_t)v282;
  if (!*(_QWORD *)(a1 + 16))
  {
    v286 = 0u;
    v287 = 0u;
    goto LABEL_114;
  }
  v187 = ICTTAttributeNameParagraphStyle;
  v189 = sub_1002489FC(v187, v188);
  if ((v190 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v189, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (!*((_QWORD *)&v287 + 1))
  {
LABEL_114:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_112;
LABEL_115:
    v286 = 0u;
    v287 = 0u;
LABEL_121:
    sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v61)(v186, 1, 1, v59);
LABEL_122:
    sub_100012DDC(v186, &qword_1005CEFD0);
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_120;
    goto LABEL_123;
  }
  v191 = sub_1000163BC(0, (unint64_t *)&qword_1005D06B0, ICTTParagraphStyle_ptr);
  if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, v191, 6) & 1) != 0)
  {
    v192 = (id)v284;
    v193 = v271;
    sub_100258770(v192, v271);
    v268(v193, 0, 1, v269);
    sub_100164108(v193, v270, &qword_1005D5D00);
    v194 = objc_msgSend(v192, "writingDirection");

    v195 = (unint64_t)v194 + 1;
    if (v194 == (id)3)
      v196 = 4;
    else
      v196 = 5;
    if (v195 >= 4)
      v197 = v196;
    else
      v197 = 0x2030100u >> (8 * v195);
    *((_BYTE *)v280 + v275) = v197;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_115;
LABEL_112:
  v198 = ICTTNSLinkAttributeName;
  v200 = sub_1002489FC(v198, v199);
  if ((v201 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v200, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (!*((_QWORD *)&v287 + 1))
    goto LABEL_121;
  v202 = swift_dynamicCast(v186, &v286, (char *)&type metadata for Any + 8, v59, 6);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v61)(v186, v202 ^ 1u, 1, v59);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v276 + 48))(v186, 1, v59) == 1)
    goto LABEL_122;
  v203 = *(void (**)(char *, uint64_t, uint64_t))(v276 + 32);
  v204 = v272;
  v203(v272, v186, v59);
  v205 = v274;
  sub_100012DDC(v274, &qword_1005CEFD0);
  v203((char *)v205, (uint64_t)v204, v59);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v61)(v205, 0, 1, v59);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_120:
    v286 = 0u;
    v287 = 0u;
    goto LABEL_137;
  }
LABEL_123:
  v206 = ICTTNSWritingDirectionAttributeName;
  v208 = sub_1002489FC(v206, v207);
  if ((v209 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v208, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (*((_QWORD *)&v287 + 1))
  {
    if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v210 = v284 + 1;
      if ((_QWORD)v284 == 3)
        v211 = 4;
      else
        v211 = 5;
      if (v210 < 4)
        v211 = 0x2030100u >> (8 * v210);
      *((_BYTE *)v280 + v275) = v211;
    }
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_138;
    goto LABEL_135;
  }
LABEL_137:
  sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_138:
    v286 = 0u;
    v287 = 0u;
    goto LABEL_146;
  }
LABEL_135:
  v212 = ICTTAttributeNameEmphasis;
  v214 = sub_1002489FC(v212, v213);
  if ((v215 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v214, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

  if (*((_QWORD *)&v287 + 1))
  {
    if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v216 = ICEmphasisColorTypeForTag(v284);
      v217 = sub_10025BF2C(v216);
      *((_BYTE *)v280 + v273) = v217;
    }
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_147;
    goto LABEL_144;
  }
LABEL_146:
  sub_100012DDC((uint64_t)&v286, &qword_1005CF190);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_147:
    v286 = 0u;
    v287 = 0u;
    goto LABEL_150;
  }
LABEL_144:
  v218 = ICTTNSAttachmentAttributeName;
  v220 = sub_1002489FC(v218, v219);
  if ((v221 & 1) != 0)
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v220, (uint64_t)&v286);
  }
  else
  {
    v286 = 0u;
    v287 = 0u;
  }

LABEL_150:
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v287 + 1))
  {

    v237 = &qword_1005CF190;
    v238 = &v286;
LABEL_161:
    sub_100012DDC((uint64_t)v238, v237);
    return;
  }
  v222 = sub_1000163BC(0, (unint64_t *)&qword_1005D41A8, ICTTAttachment_ptr);
  if ((swift_dynamicCast(&v284, &v286, (char *)&type metadata for Any + 8, v222, 6) & 1) == 0)
    goto LABEL_174;
  v223 = (void *)v284;
  if (!objc_msgSend((id)objc_opt_self(ICTTAttachment), "isInlineAttachment:", (_QWORD)v284))
  {
    v239 = objc_msgSend(v223, "attachmentIdentifier");
    if (v239)
    {
      v240 = v239;
      v241 = static String._unconditionallyBridgeFromObjectiveC(_:)(v239);
      v243 = v242;

    }
    else
    {

      v241 = 0;
      v243 = 0;
    }
    v244 = v263;
    swift_bridgeObjectRelease(v263[1]);
    *v244 = v241;
    v244[1] = v243;
    return;
  }
  if (!v60)
  {
LABEL_169:
    if (qword_1005CEB70 != -1)
      swift_once(&qword_1005CEB70, sub_100253D68);
    v245 = type metadata accessor for Logger(0);
    sub_10012A0B0(v245, (uint64_t)qword_1005D5CE0);
    v246 = v223;
    v247 = Logger.logObject.getter(v246);
    v248 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v247, v248))
    {
      v249 = (uint8_t *)swift_slowAlloc(12, -1);
      v250 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v249 = 138412290;
      *(_QWORD *)&v286 = v246;
      v251 = v246;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v286, (char *)&v286 + 8, v249 + 4);
      *v250 = v246;

      _os_log_impl((void *)&_mh_execute_header, v247, v248, "Cannot resolve inline attachment — skipping {attachment: %@}", v249, 0xCu);
      v252 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v250, 1, v252);
      swift_slowDealloc(v250, -1, -1);
      swift_slowDealloc(v249, -1, -1);

    }
    else
    {

    }
LABEL_174:

    return;
  }
  v224 = v60;
  v225 = objc_msgSend(v223, "inlineAttachmentInContext:", v224);
  if (!v225)
  {

    goto LABEL_169;
  }
  v226 = v225;
  v227 = v259;
  sub_100259804(v226, v259);
  ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v46)(v227, 0, 1, v257);
  sub_100164108((uint64_t)v227, v258, &qword_1005D5CF8);
  if ((v260 & 1) != 0)
  {
    v228 = objc_msgSend(v226, "tokenContentIdentifier");
    if (v228)
    {
      v229 = v228;
      v230 = (id)NotesAppURLForNoteIdentifierOrTokenContentIdentifier();

      if (v230)
      {
        v231 = v255;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v230);

        v232 = v276;
        v233 = *(void (**)(char *, char *, uint64_t))(v276 + 32);
        v234 = (__int128 *)v256;
        v233(v256, v231, v59);
        ((void (*)(__int128 *, _QWORD, uint64_t, uint64_t))v61)(v234, 0, 1, v59);
        if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v232 + 48))(v234, 1, v59) != 1)
        {
          v235 = v254;
          v233(v254, (char *)v234, v59);
          v236 = v274;
          sub_100012DDC(v274, &qword_1005CEFD0);
          v233((char *)v236, v235, v59);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v61)(v236, 0, 1, v59);
          return;
        }
      }
      else
      {

        v234 = (__int128 *)v256;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v61)(v256, 1, 1, v59);
      }
      v237 = &qword_1005CEFD0;
      v238 = v234;
      goto LABEL_161;
    }
  }

}

uint64_t sub_100255670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  type metadata accessor for Key(0);
  v11 = v10;
  v12 = sub_100019C6C((unint64_t *)&qword_1005CF5E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100452820);
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, v11, (char *)&type metadata for Any + 8, v12);
  v9(v13, a3, a4, a5);
  return swift_bridgeObjectRelease(v13);
}

id sub_100255710(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSUInteger *v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  NSUInteger v26;
  NSUInteger v27;
  NSUInteger v28;
  NSRange v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSRange v41;
  NSRange v42;

  v39 = a5;
  v40 = a6;
  v37 = a2;
  v38 = a3;
  v36 = a1;
  v14 = _s16AttributedStringV9AttributeVMa(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (NSUInteger *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = objc_allocWithZone((Class)NSMutableAttributedString);
  swift_bridgeObjectRetain(a9);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a9);
  v20 = objc_msgSend(v18, "initWithString:", v19);

  v21 = *(_QWORD *)(a10 + 16);
  if (v21)
  {
    v22 = a10 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v35 = a4 & 0x101;
    v34 = *(_QWORD *)(v15 + 72);
    v32 = a10;
    swift_bridgeObjectRetain(a10);
    v33 = (char *)&type metadata for Any + 8;
    while (1)
    {
      sub_100145220(v22, (uint64_t)v17, _s16AttributedStringV9AttributeVMa);
      sub_100255958(v36, v37, v38, v35, v39, v40, a7);
      if (v10)
        break;
      v24 = v23;
      type metadata accessor for Key(0);
      sub_100019C6C((unint64_t *)&qword_1005CF5E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100452820);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v24);
      v27 = *v17;
      v26 = v17[1];
      v42.location = (NSUInteger)objc_msgSend(v20, "ic_range");
      v42.length = v28;
      v41.location = v27;
      v41.length = v26;
      v29 = NSIntersectionRange(v41, v42);
      objc_msgSend(v20, "addAttributes:range:", isa, v29.location, v29.length);

      sub_100145264((uint64_t)v17, _s16AttributedStringV9AttributeVMa);
      v22 += v34;
      if (!--v21)
        goto LABEL_7;
    }

    sub_100145264((uint64_t)v17, _s16AttributedStringV9AttributeVMa);
LABEL_7:
    swift_bridgeObjectRelease(v32);
  }
  return v20;
}

void sub_100255958(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  _QWORD *v41;
  id v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  double v50;
  char v51;
  uint64_t v52;
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int *v69;
  unint64_t v70;
  _OWORD v71[2];
  __int128 v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  char v78;
  char v79;
  char v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  uint64_t v84;

  v58 = a6;
  v54 = a4;
  v56 = a3;
  v55 = a2;
  v61 = a1;
  v10 = sub_100012E18(&qword_1005D5CF8);
  __chkstk_darwin(v10);
  v64 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = _s16AttributedStringV16InlineAttachmentVMa(0);
  v62 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v65 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v13);
  v67 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v53[1] = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100012E18(&qword_1005D5D00);
  __chkstk_darwin(v16);
  v18 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v19);
  v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for Date(0);
  v66 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v53[0] = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v23);
  v25 = (char *)v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = (int *)_s16AttributedStringV9AttributeVMa(0);
  v30 = v7;
  v31 = (uint64_t *)(v7 + v69[7]);
  v32 = v31[1];
  v57 = a5;
  if (v32 == 1)
  {
    v33 = sub_100135F1C((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v34 = v31[8];
    v35 = *((_DWORD *)v31 + 10);
    v37 = v31[3];
    v36 = v31[4];
    v38 = v31[2];
    v74 = *v31;
    v75 = v32;
    v76 = v38;
    v77 = v37 & 0xFF01;
    v78 = BYTE2(v37);
    v79 = BYTE3(v37);
    v80 = BYTE4(v37);
    v81 = v36;
    v82 = v35 & 1;
    v83 = *((_OWORD *)v31 + 3);
    v84 = v34;
    v33 = (unint64_t)sub_100256E70();
  }
  v39 = v33;
  sub_100012CE8(v7 + v69[5], (uint64_t)v25, (uint64_t *)&unk_1005D06A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_100012DDC((uint64_t)v25, (uint64_t *)&unk_1005D06A0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v25, v26);
    v40 = (void *)ICTTAttributeNameReplicaID;
    v73 = (void *)v26;
    v41 = sub_10012D160(&v72);
    (*(void (**)(_QWORD *, char *, uint64_t))(v27 + 16))(v41, v29, v26);
    sub_1000160B8(&v72, v71);
    v42 = v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    v70 = v39;
    sub_10024E914(v71, v42, isUniquelyReferenced_nonNull_native);
    v39 = v70;

    swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  }
  v44 = v30;
  v45 = v69;
  v46 = v59;
  sub_100012CE8(v30 + v69[6], (uint64_t)v21, (uint64_t *)&unk_1005D7B20);
  v47 = v66;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v21, 1, v46) == 1)
  {
    sub_100012DDC((uint64_t)v21, (uint64_t *)&unk_1005D7B20);
  }
  else
  {
    v48 = v53[0];
    (*(void (**)(_QWORD, char *, uint64_t))(v47 + 32))(v53[0], v21, v46);
    v49 = ICTTAttributeNameTimestamp;
    v50 = Date.timeIntervalSince1970.getter();
    v73 = &type metadata for Double;
    *(double *)&v72 = v50 + a7;
    sub_1000160B8(&v72, v71);
    v51 = swift_isUniquelyReferenced_nonNull_native(v39);
    v70 = v39;
    sub_10024E914(v71, v49, v51);

    v45 = v69;
    swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v46);
  }
  sub_100012CE8(v44 + v45[8], (uint64_t)v18, &qword_1005D5D00);
  v52 = _s16AttributedStringV14ParagraphStyleVMa(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v18, 1, v52) == 1)
  {
    sub_100012DDC((uint64_t)v18, &qword_1005D5D00);
    __asm { BR              X11 }
  }
  sub_100258AFC();
  sub_100145264((uint64_t)v18, _s16AttributedStringV14ParagraphStyleVMa);
  __asm { BR              X10 }
}

void sub_100255F3C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;

  objc_msgSend(v0, "setWritingDirection:", 0);
  v3 = (void *)ICTTAttributeNameParagraphStyle;
  *(_QWORD *)(v2 - 168) = sub_1000163BC(0, (unint64_t *)&qword_1005D1B60, ICTTMutableParagraphStyle_ptr);
  *(_QWORD *)(v2 - 192) = v0;
  sub_1000160B8((_OWORD *)(v2 - 192), (_OWORD *)(v2 - 224));
  v4 = v3;
  v5 = v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v2 - 232) = v1;
  sub_10024E914((_OWORD *)(v2 - 224), v4, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x10025607CLL);
}

void sub_100255F44()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v2 = (void *)ICTTNSWritingDirectionAttributeName;
  *(_QWORD *)(v1 - 168) = &type metadata for Int;
  *(_QWORD *)(v1 - 192) = 2;
  sub_1000160B8((_OWORD *)(v1 - 192), (_OWORD *)(v1 - 224));
  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  *(_QWORD *)(v1 - 232) = v0;
  sub_10024E914(v1 - 224, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x10025607CLL);
}

void sub_100255F4C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v2 = (void *)ICTTNSWritingDirectionAttributeName;
  *(_QWORD *)(v1 - 168) = &type metadata for Int;
  *(_QWORD *)(v1 - 192) = 1;
  sub_1000160B8((_OWORD *)(v1 - 192), (_OWORD *)(v1 - 224));
  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  *(_QWORD *)(v1 - 232) = v0;
  sub_10024E914(v1 - 224, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x10025607CLL);
}

void sub_100255FC0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t isUniquelyReferenced_nonNull_native;

  objc_msgSend(v0, "setWritingDirection:", 2);
  v3 = (void *)ICTTAttributeNameParagraphStyle;
  *(_QWORD *)(v2 - 168) = sub_1000163BC(0, (unint64_t *)&qword_1005D1B60, ICTTMutableParagraphStyle_ptr);
  *(_QWORD *)(v2 - 192) = v0;
  sub_1000160B8((_OWORD *)(v2 - 192), (_OWORD *)(v2 - 224));
  v4 = v3;
  v5 = v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v2 - 232) = v1;
  sub_10024E914(v2 - 224, v4, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x10025607CLL);
}

void sub_100255FC8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t isUniquelyReferenced_nonNull_native;

  objc_msgSend(v0, "setWritingDirection:", 1);
  v3 = (void *)ICTTAttributeNameParagraphStyle;
  *(_QWORD *)(v2 - 168) = sub_1000163BC(0, (unint64_t *)&qword_1005D1B60, ICTTMutableParagraphStyle_ptr);
  *(_QWORD *)(v2 - 192) = v0;
  sub_1000160B8((_OWORD *)(v2 - 192), (_OWORD *)(v2 - 224));
  v4 = v3;
  v5 = v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v2 - 232) = v1;
  sub_10024E914(v2 - 224, v4, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x10025607CLL);
}

void sub_100255FD0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t isUniquelyReferenced_nonNull_native;

  objc_msgSend(v0, "setWritingDirection:", 3);
  v3 = (void *)ICTTAttributeNameParagraphStyle;
  *(_QWORD *)(v2 - 168) = sub_1000163BC(0, (unint64_t *)&qword_1005D1B60, ICTTMutableParagraphStyle_ptr);
  *(_QWORD *)(v2 - 192) = v0;
  sub_1000160B8((_OWORD *)(v2 - 192), (_OWORD *)(v2 - 224));
  v4 = v3;
  v5 = v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v2 - 232) = v1;
  sub_10024E914(v2 - 224, v4, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x10025607CLL);
}

void sub_100255FD8()
{
  void *v0;

  objc_msgSend(v0, "writingDirection");
  JUMPOUT(0x100255FECLL);
}

uint64_t sub_100256540(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100012E18(&qword_1005D6158);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10012D19C(a1, v12);
  v14 = sub_100261EC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s16AttributedStringV10CodingKeysON, &_s16AttributedStringV10CodingKeysON, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_100012E18(&qword_1005D6140);
    v16 = sub_100261F0C(&qword_1005D6160, &qword_1005D6168, (uint64_t)&unk_10045DEB4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1002566AC()
{
  _BYTE *v0;

  if (*v0)
    return 0x7475626972747461;
  else
    return 1954047348;
}

uint64_t sub_1002566E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100260C00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100256708(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100261EC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100256730(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100261EC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100256758@<X0>(uint64_t *a1@<X8>)
{
  return sub_100256E28((uint64_t (*)(void))sub_100260CEC, a1);
}

uint64_t sub_100256774(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100256540(a1, *v1, v1[1], v1[2]);
}

CGColorRef sub_100256790(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __CFString *v6;
  CGColorSpace *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  CGColorRef v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  _QWORD *v35;

  v6 = (__CFString *)String._bridgeToObjectiveC()();
  v7 = CGColorSpaceCreateWithName(v6);

  if (!v7)
  {
    if (qword_1005CEB70 != -1)
      swift_once(&qword_1005CEB70, sub_100253D68);
    v15 = type metadata accessor for Logger(0);
    sub_10012A0B0(v15, (uint64_t)qword_1005D5CE0);
    swift_bridgeObjectRetain_n(a2, 2);
    v16 = swift_bridgeObjectRetain_n(a3, 2);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (_QWORD *)swift_slowAlloc(32, -1);
      v35 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain(a2);
      v34 = sub_1003A4190(a1, a2, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v20 + 4);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "Cannot create color space with name — returning nil {name: %s}", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }
    return 0;
  }
  v8 = *(_QWORD *)(a3 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v35 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a3);
    sub_100137178(0, v8, 0);
    v10 = 0;
    v9 = _swiftEmptyArrayStorage;
    v11 = _swiftEmptyArrayStorage[2];
    do
    {
      v12 = *(_QWORD *)(a3 + 8 * v10 + 32);
      v35 = v9;
      v13 = v9[3];
      if (v11 >= v13 >> 1)
      {
        sub_100137178(v13 > 1, v11 + 1, 1);
        v9 = v35;
      }
      ++v10;
      v9[2] = v11 + 1;
      v9[v11++ + 4] = v12;
    }
    while (v8 != v10);
    swift_bridgeObjectRelease(a3);
  }
  v14 = CGColorCreate(v7, (const CGFloat *)v9 + 4);
  swift_bridgeObjectRelease(v9);
  if (!v14)
  {
    if (qword_1005CEB70 != -1)
      swift_once(&qword_1005CEB70, sub_100253D68);
    v22 = type metadata accessor for Logger(0);
    sub_10012A0B0(v22, (uint64_t)qword_1005D5CE0);
    swift_bridgeObjectRetain_n(a3, 2);
    v23 = swift_bridgeObjectRetain_n(a2, 2);
    v24 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.error.getter(v24, v25);
    if (os_log_type_enabled(v24, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (_QWORD *)swift_slowAlloc(32, -1);
      v35 = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain(a3);
      v30 = Array.description.getter(v29, &type metadata for Double);
      v32 = v31;
      swift_bridgeObjectRelease(a3);
      v34 = sub_1003A4190(v30, v32, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v27 + 4);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v24, v26, "Cannot create color with components — returning nil {components: %s}", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }

    return 0;
  }

  return v14;
}

uint64_t sub_100256BF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100012E18(&qword_1005D5FF8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10012D19C(a1, v12);
  v14 = sub_1002611A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s16AttributedStringV5ColorV10CodingKeysON, &_s16AttributedStringV5ColorV10CodingKeysON, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_100012E18(&qword_1005D5FE8);
    v16 = sub_1002611EC(&qword_1005D6000, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100256D5C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E656E6F706D6F63;
  else
    return 0x6563617073;
}

uint64_t sub_100256D98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100260ED4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100256DBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002611A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100256DE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002611A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100256E0C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100256E28((uint64_t (*)(void))sub_100260FC8, a1);
}

uint64_t sub_100256E28@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100256E54(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100256BF8(a1, *v1, v1[1], v1[2]);
}

void *sub_100256E70()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  void *v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  double v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  char v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  char v23;
  void *v24;
  id v25;
  void *v26;
  char v27;
  void *v28;
  id v29;
  void *v30;
  char v31;
  CGColorRef v32;
  CGColorRef v33;
  void *v34;
  void *v35;
  id v36;
  CGColor *v37;
  void *v38;
  char v39;
  _OWORD v41[2];
  __int128 v42;
  void *v43;
  void *v44;
  _BYTE v45[24];
  _BYTE v46[14];
  char v47;
  char v48;
  _BYTE v49[12];
  char v50;
  char v51;
  char v52;
  char v53;
  double v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;

  v1 = v0;
  v44 = &_swiftEmptyDictionarySingleton;
  sub_10014BD1C(v0 + 25, (uint64_t)&v51, &qword_1005D3FD0);
  sub_10014BD1C((uint64_t)&v51, (uint64_t)&v52, &qword_1005D3FD0);
  v2 = v52 & 1;
  sub_10014BD1C(v0 + 26, (uint64_t)&v50, &qword_1005D3FD0);
  sub_10014BD1C((uint64_t)&v50, (uint64_t)&v53, &qword_1005D3FD0);
  v3 = v2 & 0xFFFFFFFD | (2 * (v53 & 1));
  v4 = *(_QWORD *)(v0 + 8);
  if (v4)
  {
    sub_10014BD1C(v0 + 16, (uint64_t)v49, &qword_1005D5D20);
    sub_10014BD1C((uint64_t)v49, (uint64_t)&v54, &qword_1005D5D20);
    if ((v55 & 1) != 0)
    {
      v5 = objc_allocWithZone((Class)ICTTFont);
      swift_bridgeObjectRetain(v4);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      v7 = objc_msgSend(v5, "initWithName:size:hints:", v6, v3, 0.0);
    }
    else
    {
      v11 = v54;
      v12 = objc_allocWithZone((Class)ICTTFont);
      swift_bridgeObjectRetain(v4);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      v7 = objc_msgSend(v12, "initWithName:size:hints:", v6, v3, v11);
    }
    v13 = v7;

    v14 = (void *)ICTTAttributeNameFont;
    if (!v13)
      goto LABEL_14;
    goto LABEL_12;
  }
  sub_10014BD1C(v0 + 16, (uint64_t)v49, &qword_1005D5D20);
  sub_10014BD1C((uint64_t)v49, (uint64_t)&v54, &qword_1005D5D20);
  if ((v55 & 1) != 0)
  {
    if (!(_DWORD)v3)
      goto LABEL_15;
    v8 = (void *)ICTTAttributeNameFontHints;
    v43 = &type metadata for UInt32;
    LODWORD(v42) = v3;
    sub_1000160B8(&v42, v41);
    v9 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v60 = &_swiftEmptyDictionarySingleton;
    sub_10024E914(v41, v9, isUniquelyReferenced_nonNull_native);
    v44 = v60;

    goto LABEL_13;
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)ICTTFont), "initWithName:size:hints:", 0, v3, v54);
  v14 = (void *)ICTTAttributeNameFont;
  if (v15)
  {
    v13 = v15;
LABEL_12:
    v43 = (void *)sub_1000163BC(0, &qword_1005D5D08, ICTTFont_ptr);
    *(_QWORD *)&v42 = v13;
    sub_1000160B8(&v42, v41);
    v16 = v14;
    v17 = v13;
    v18 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v60 = &_swiftEmptyDictionarySingleton;
    sub_10024E914(v41, v16, v18);
    v44 = v60;

LABEL_13:
    swift_bridgeObjectRelease(0x8000000000000000);
    goto LABEL_15;
  }
LABEL_14:
  v19 = v14;
  sub_1003AE4B0((uint64_t)v19, v41);

  sub_100012DDC((uint64_t)v41, &qword_1005CF190);
LABEL_15:
  sub_10014BD1C(v0 + 27, (uint64_t)&v48, &qword_1005D3FD0);
  sub_10014BD1C((uint64_t)&v48, (uint64_t)&v56, &qword_1005D3FD0);
  if ((v56 & 1) != 0)
  {
    v20 = (void *)ICTTAttributeNameUnderline;
    v43 = &type metadata for Bool;
    LOBYTE(v42) = 1;
    sub_1000160B8(&v42, v41);
    v21 = v20;
    v22 = v44;
    v23 = swift_isUniquelyReferenced_nonNull_native(v44);
    v60 = v22;
    sub_10024E914(v41, v21, v23);
    v44 = v60;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_10014BD1C(v1 + 28, (uint64_t)&v47, &qword_1005D3FD0);
  sub_10014BD1C((uint64_t)&v47, (uint64_t)&v57, &qword_1005D3FD0);
  if ((v57 & 1) != 0)
  {
    v24 = (void *)ICTTAttributeNameStrikethrough;
    v43 = &type metadata for Bool;
    LOBYTE(v42) = 1;
    sub_1000160B8(&v42, v41);
    v25 = v24;
    v26 = v44;
    v27 = swift_isUniquelyReferenced_nonNull_native(v44);
    v60 = v26;
    sub_10024E914(v41, v25, v27);
    v44 = v60;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_10014BD1C(v1 + 32, (uint64_t)v46, &qword_1005D6790);
  sub_10014BD1C((uint64_t)v46, (uint64_t)&v58, &qword_1005D6790);
  if ((v59 & 1) == 0)
  {
    v28 = (void *)ICTTAttributeNameSuperscript;
    v43 = &type metadata for Int;
    *(_QWORD *)&v42 = v58;
    sub_1000160B8(&v42, v41);
    v29 = v28;
    v30 = v44;
    v31 = swift_isUniquelyReferenced_nonNull_native(v44);
    v60 = v30;
    sub_10024E914(v41, v29, v31);
    v44 = v60;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_10014BD1C(v1 + 48, (uint64_t)v45, &qword_1005D5D28);
  sub_10014BD1C((uint64_t)v45, (uint64_t)&v60, &qword_1005D5D28);
  if (v61)
  {
    v32 = sub_100256790((uint64_t)v60, v61, v62);
    if (v32)
    {
      v33 = v32;
      v34 = (void *)ICTTAttributeNameForegroundColor;
      type metadata accessor for CGColor(0);
      v43 = v35;
      *(_QWORD *)&v42 = v33;
      sub_1000160B8(&v42, v41);
      v36 = v34;
      v37 = v33;
      v38 = v44;
      v39 = swift_isUniquelyReferenced_nonNull_native(v44);
      sub_10024E914(v41, v36, v39);
      v44 = v38;

      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  return v44;
}

uint64_t sub_100257408(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  char v25;
  _BYTE v26[24];
  _BYTE v27[24];

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D6120);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_100261DCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s16AttributedStringV4FontV10CodingKeysON, &_s16AttributedStringV4FontV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v26[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v26, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = *((unsigned __int8 *)v3 + 24);
    v26[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v26, v5);
    v16 = *((unsigned __int8 *)v3 + 25);
    v26[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v26, v5);
    v17 = *((unsigned __int8 *)v3 + 26);
    v26[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v26, v5);
    v18 = *((unsigned __int8 *)v3 + 27);
    v26[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v26, v5);
    v19 = *((unsigned __int8 *)v3 + 28);
    v26[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v26, v5);
    v20 = v3[4];
    v21 = *((unsigned __int8 *)v3 + 40);
    v26[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v26, v5);
    sub_10014BD1C((uint64_t)(v3 + 6), (uint64_t)v27, &qword_1005D5D28);
    sub_10014BD1C((uint64_t)v27, (uint64_t)v26, &qword_1005D5D28);
    v25 = 7;
    v22 = sub_100261E84();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v25, v5, &_s16AttributedStringV5ColorVN, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10025764C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100257674
                                                            + 4 * asc_10045DC30[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_100257674()
{
  return 0x7A6953746E696F70;
}

uint64_t sub_100257690()
{
  return 0x646C6F427369;
}

uint64_t sub_1002576A4()
{
  return 0x63696C6174497369;
}

uint64_t sub_1002576BC()
{
  return 0x6C7265646E557369;
}

uint64_t sub_1002576DC()
{
  return 0x656B697274537369;
}

uint64_t sub_100257700()
{
  return 0x7263737265707573;
}

uint64_t sub_100257720()
{
  return 0x726F6C6F63;
}

uint64_t sub_100257734@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002616D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100257758(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100261DCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100257780(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100261DCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1002577A8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_100261A60(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1002577F8(_QWORD *a1)
{
  return sub_100257408(a1);
}

void sub_100257838(char *a1)
{
  sub_10021688C(*a1);
}

void sub_100257844()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10025788C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1263421776, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_1002578F4()
{
  __asm { BR              X10 }
}

uint64_t sub_10025792C(uint64_t a1)
{
  String.hash(into:)(a1, 1263421776, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_100257980(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1002579C4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1263421776, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100257A2C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1005569B0;
  result = sub_100262F28(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100257A60()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100257A8C + 4 * byte_10045DC47[*v0]))();
}

void sub_100257A8C(_QWORD *a1@<X8>)
{
  *a1 = 1263421776;
  a1[1] = 0xE400000000000000;
}

void sub_100257AA0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x45474E41524FLL;
  a1[1] = v1;
}

void sub_100257AB4(_QWORD *a1@<X8>)
{
  *a1 = 1414416717;
  a1[1] = 0xE400000000000000;
}

void sub_100257AC8(_QWORD *a1@<X8>)
{
  *a1 = 1163217986;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_100257ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100263828();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100257B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100263828();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100257B84(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100257BB4 + 4 * byte_10045DC4C[a1]))(0x454C544954, 0xE500000000000000);
}

uint64_t sub_100257BB4()
{
  return 0x474E4944414548;
}

uint64_t sub_100257BCC()
{
  return 0x4944414548425553;
}

uint64_t sub_100257BEC()
{
  return 1497648962;
}

uint64_t sub_100257BFC()
{
  return 0x4E4F4954504143;
}

uint64_t sub_100257C14()
{
  return 0x434150534F4E4F4DLL;
}

uint64_t sub_100257C30()
{
  return 0x4C5F54454C4C5542;
}

uint64_t sub_100257C60()
{
  return 0x44455245424D554ELL;
}

uint64_t sub_100257C84()
{
  return 0x53494C4B43454843;
}

uint64_t sub_100257CA0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100257B84(*a1);
  v5 = v4;
  v6 = sub_100257B84(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100257D28()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100257B84(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100257D88(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100257B84(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100257DC8(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100257B84(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100257E24@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100262A5C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100257E50@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100257B84(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100257E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100262EA0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100257ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100262EA0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100257F20(char *a1)
{
  sub_1002169D4(*a1);
}

void sub_100257F2C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_100257F70()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x5245544E4543, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_100257FF4()
{
  __asm { BR              X10 }
}

uint64_t sub_100258028(uint64_t a1)
{
  String.hash(into:)(a1, 0x5245544E4543, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_100258098(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1002580D8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x5245544E4543, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10025815C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100556B58;
  result = sub_100262F28(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100258190()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1002581B8 + 4 * byte_10045DC65[*v0]))();
}

void sub_1002581B8(_QWORD *a1@<X8>)
{
  *a1 = 0x5245544E4543;
  a1[1] = 0xE600000000000000;
}

void sub_1002581D0(_QWORD *a1@<X8>)
{
  *a1 = 0x5448474952;
  a1[1] = 0xE500000000000000;
}

void sub_1002581E8(_QWORD *a1@<X8>)
{
  *a1 = 0x454946495453554ALL;
  a1[1] = 0xE900000000000044;
}

void sub_100258208(_QWORD *a1@<X8>)
{
  *a1 = 0x4C41525554414ELL;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_100258224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100262EE4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100258280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100262EE4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002582CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D6020);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_10026124C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s16AttributedStringV13ChecklistItemV10CodingKeysON, &_s16AttributedStringV13ChecklistItemV10CodingKeysON, v11, v9, v10);
  v18 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100019C6C(&qword_1005D6028, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v14 = *(unsigned __int8 *)(v3 + *(int *)(_s16AttributedStringV13ChecklistItemVMa(0) + 20));
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v17, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10025841C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD *, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v29 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  v33 = v5;
  __chkstk_darwin(v4);
  v30 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_100012E18(&qword_1005D6008);
  v7 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s16AttributedStringV13ChecklistItemVMa(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10012D19C(a1, v14);
  v15 = sub_10026124C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s16AttributedStringV13ChecklistItemV10CodingKeysON, &_s16AttributedStringV13ChecklistItemV10CodingKeysON, v15, v14, v13);
  if (v2)
    return sub_1000153C0(a1);
  v27 = v10;
  v28 = v12;
  v16 = v7;
  v17 = v33;
  v35 = 0;
  v18 = sub_100019C6C(&qword_1005D6018, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v30;
  v20 = v31;
  v21 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v32, &v35, v31, v32, v18);
  v22 = *(void (**)(char *, _QWORD *, uint64_t))(v17 + 32);
  v23 = (uint64_t)v28;
  v22(v28, v19, v21);
  v34 = 1;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v20);
  *(_BYTE *)(v23 + *(int *)(v27 + 20)) = v24 & 1;
  sub_100145220(v23, v29, _s16AttributedStringV13ChecklistItemVMa);
  sub_1000153C0(a1);
  return sub_100145264(v23, _s16AttributedStringV13ChecklistItemVMa);
}

uint64_t sub_100258698()
{
  _BYTE *v0;

  if (*v0)
    return 0x656E6F447369;
  else
    return 0x696669746E656469;
}

uint64_t sub_1002586D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100262AA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002586F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026124C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100258720(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10026124C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100258748@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10025841C(a1, a2);
}

uint64_t sub_10025875C(_QWORD *a1)
{
  return sub_1002582CC(a1);
}

uint64_t sub_100258770@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  char v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v4 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D5D10);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)_s16AttributedStringV14ParagraphStyleVMa(0);
  v11 = a2 + v10[8];
  v12 = _s16AttributedStringV13ChecklistItemVMa(0);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v37 = v11;
  v36(v11, 1, 1, v12);
  v13 = a2 + v10[9];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a2 + v10[10];
  v15 = type metadata accessor for UUID(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v38 = v14;
  v16(v14, 1, 1, v15);
  v17 = sub_10025BCEC((int)objc_msgSend(a1, "style"));
  if (v17 == 10)
    v18 = 3;
  else
    v18 = v17;
  *(_BYTE *)a2 = v18;
  v19 = sub_10025BE54((unint64_t)objc_msgSend(a1, "alignment"));
  if (v19 == 5)
    v20 = 4;
  else
    v20 = v19;
  *(_BYTE *)(a2 + 1) = v20;
  *(_QWORD *)(a2 + 8) = objc_msgSend(a1, "indent");
  v21 = sub_100257B84(v18);
  v23 = v22;
  if (v21 == 0x44455245424D554ELL && v22 == 0xED00005453494C5FLL)
  {
    swift_bridgeObjectRelease(0xED00005453494C5FLL);
LABEL_11:
    v25 = objc_msgSend(a1, "startingItemNumber");
    v26 = 0;
    goto LABEL_13;
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x44455245424D554ELL, 0xED00005453494C5FLL, 0);
  swift_bridgeObjectRelease(v23);
  if ((v24 & 1) != 0)
    goto LABEL_11;
  v25 = 0;
  v26 = 1;
LABEL_13:
  *(_QWORD *)(a2 + 16) = v25;
  *(_BYTE *)(a2 + 24) = v26;
  v27 = objc_msgSend(a1, "todo");
  if (v27)
  {
    v28 = v27;
    v29 = objc_msgSend(v28, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

    LOBYTE(v29) = objc_msgSend(v28, "done");
    v9[*(int *)(v12 + 20)] = (char)v29;
    v36((uint64_t)v9, 0, 1, v12);

  }
  else
  {
    v36((uint64_t)v9, 1, 1, v12);
  }
  sub_100164108((uint64_t)v9, v37, &qword_1005D5D10);
  *(_QWORD *)v13 = objc_msgSend(a1, "blockQuoteLevel");
  *(_BYTE *)(v13 + 8) = 0;
  v30 = objc_msgSend(a1, "uuid");
  if (v30)
  {
    v31 = v30;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    v32 = 0;
  }
  else
  {
    v32 = 1;
  }
  v33 = v38;

  v16((uint64_t)v6, v32, 1, v15);
  return sub_100164108((uint64_t)v6, v33, (uint64_t *)&unk_1005D06A0);
}

id sub_100258AFC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  int *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  Class isa;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v22;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005D5D10);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(ICTTMutableParagraphStyle), "paragraphStyleNamed:", dword_10045ED30[*v1]);
  objc_msgSend(v8, "setAlignment:", v1[1]);
  objc_msgSend(v8, "setIndent:", *((_QWORD *)v1 + 1));
  if (v1[24] == 1)
    v9 = objc_msgSend(v8, "startingItemNumber");
  else
    v9 = (id)*((_QWORD *)v1 + 2);
  objc_msgSend(v8, "setStartingItemNumber:", v9);
  v10 = (int *)_s16AttributedStringV14ParagraphStyleVMa(0);
  sub_100012CE8((uint64_t)&v1[v10[8]], (uint64_t)v7, &qword_1005D5D10);
  v11 = _s16AttributedStringV13ChecklistItemVMa(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v7, 1, v11) == 1)
  {
    sub_100012DDC((uint64_t)v7, &qword_1005D5D10);
    v12 = 0;
  }
  else
  {
    v13 = v7[*(int *)(v11 + 20)];
    v14 = objc_allocWithZone((Class)ICTTTodo);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v12 = objc_msgSend(v14, "initWithIdentifier:done:", isa, v13);

    sub_100145264((uint64_t)v7, _s16AttributedStringV13ChecklistItemVMa);
  }
  objc_msgSend(v8, "setTodo:", v12);

  v16 = &v1[v10[9]];
  if (v16[8])
    v17 = 0;
  else
    v17 = *(_QWORD *)v16;
  objc_msgSend(v8, "setBlockQuoteLevel:", v17);
  sub_100012CE8((uint64_t)&v1[v10[10]], (uint64_t)v4, (uint64_t *)&unk_1005D06A0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v4, 1, v18) != 1)
  {
    v20 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v18);
  }
  objc_msgSend(v8, "setUuid:", v20);

  return v8;
}

uint64_t sub_100258DB0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100258DDC + 4 * byte_10045DC6A[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_100258DDC()
{
  return 0x6E656D6E67696C61;
}

uint64_t sub_100258DF8()
{
  return 0x746E65646E69;
}

unint64_t sub_100258E0C()
{
  return 0xD000000000000012;
}

uint64_t sub_100258E28()
{
  return 0x73696C6B63656863;
}

uint64_t sub_100258E4C()
{
  return 0x6F75516B636F6C62;
}

uint64_t sub_100258E70()
{
  return 1684632949;
}

uint64_t sub_100258E7C(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D6058);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_100261290();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s16AttributedStringV14ParagraphStyleV10CodingKeysON, &_s16AttributedStringV14ParagraphStyleV10CodingKeysON, v11, v9, v10);
  v36 = *v3;
  v35 = 0;
  v12 = sub_10026135C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v35, v5, &_s16AttributedStringV19ParagraphStyleNamesON, v12);
  if (!v2)
  {
    v34 = v3[1];
    v33 = 1;
    v13 = sub_1002613A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v5, &_s16AttributedStringV10AlignmentsON, v13);
    v14 = *((_QWORD *)v3 + 1);
    v32 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v32, v5);
    v15 = *((_QWORD *)v3 + 2);
    v16 = v3[24];
    v31 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v31, v5);
    v17 = (int *)_s16AttributedStringV14ParagraphStyleVMa(0);
    v18 = &v3[v17[8]];
    v30 = 4;
    v19 = _s16AttributedStringV13ChecklistItemVMa(0);
    v20 = sub_100019C6C(&qword_1005D6070, _s16AttributedStringV13ChecklistItemVMa, (uint64_t)&unk_10045DFA4);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v30, v5, v19, v20);
    v21 = (uint64_t *)&v3[v17[9]];
    v22 = *v21;
    v23 = *((unsigned __int8 *)v21 + 8);
    v29 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v29, v5);
    v24 = &v3[v17[10]];
    HIBYTE(v28) = 6;
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100019C6C(&qword_1005D6028, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, (char *)&v28 + 7, v5, v25, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100259114@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;

  v41 = a2;
  v3 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v3);
  v42 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005D5D10);
  __chkstk_darwin(v5);
  v44 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100012E18(&qword_1005D6030);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s16AttributedStringV14ParagraphStyleVMa(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v12 + 2) = 0;
  v12[24] = 1;
  v13 = (uint64_t)&v12[*(int *)(v10 + 32)];
  v14 = _s16AttributedStringV13ChecklistItemVMa(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v48 = v13;
  v15(v13, 1, 1, v14);
  v16 = &v12[*(int *)(v9 + 36)];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v17 = (uint64_t)&v12[*(int *)(v9 + 40)];
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v47 = v17;
  v19(v17, 1, 1, v18);
  v21 = a1[3];
  v20 = a1[4];
  v49 = a1;
  sub_10012D19C(a1, v21);
  v22 = sub_100261290();
  v46 = v8;
  v23 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s16AttributedStringV14ParagraphStyleV10CodingKeysON, &_s16AttributedStringV14ParagraphStyleV10CodingKeysON, v22, v21, v20);
  if (v23)
  {
    v31 = v48;
    v32 = v47;
    sub_1000153C0(v49);
    sub_100012DDC(v31, &qword_1005D5D10);
    return sub_100012DDC(v32, (uint64_t *)&unk_1005D06A0);
  }
  else
  {
    v24 = v43;
    v25 = (uint64_t)v44;
    BYTE1(v57) = 0;
    v26 = sub_1002612D4();
    v27 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v57 + 2), &_s16AttributedStringV19ParagraphStyleNamesON, (char *)&v57 + 1, v45, &_s16AttributedStringV19ParagraphStyleNamesON, v26);
    *v12 = BYTE2(v57);
    v56 = 1;
    v28 = sub_100261318();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, &_s16AttributedStringV10AlignmentsON, &v56, v27, &_s16AttributedStringV10AlignmentsON, v28);
    v12[1] = v57;
    v55 = 2;
    *((_QWORD *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v55, v27);
    v54 = 3;
    *((_QWORD *)v12 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v27);
    v12[24] = v29 & 1;
    v53 = 4;
    v30 = sub_100019C6C(&qword_1005D6050, _s16AttributedStringV13ChecklistItemVMa, (uint64_t)&unk_10045DFCC);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, &v53, v27, v14, v30);
    sub_100164108(v25, v48, &qword_1005D5D10);
    v52 = 5;
    *(_QWORD *)v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v27);
    v16[8] = v33 & 1;
    v51 = 6;
    v34 = sub_100019C6C(&qword_1005D6018, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = v24;
    v36 = (uint64_t)v42;
    v37 = v46;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v51, v27, v18, v34);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v27);
    v38 = v49;
    sub_100164108(v36, v47, (uint64_t *)&unk_1005D06A0);
    sub_100145220((uint64_t)v12, v41, _s16AttributedStringV14ParagraphStyleVMa);
    sub_1000153C0(v38);
    return sub_100145264((uint64_t)v12, _s16AttributedStringV14ParagraphStyleVMa);
  }
}

uint64_t sub_100259594()
{
  unsigned __int8 *v0;

  return sub_100258DB0(*v0);
}

uint64_t sub_10025959C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100262B98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002595C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100261290();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002595E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100261290();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100259610@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100259114(a1, a2);
}

uint64_t sub_100259624(_QWORD *a1)
{
  return sub_100258E7C(a1);
}

uint64_t sub_100259638(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10025966C + 4 * byte_10045DC71[a1]))(0x4C41525554414ELL, 0xE700000000000000);
}

uint64_t sub_10025966C()
{
  return 0x5F4F545F5446454CLL;
}

unint64_t sub_100259690()
{
  return 0xD000000000000016;
}

void sub_1002596DC(char *a1)
{
  sub_1002166F8(*a1);
}

void sub_1002596E8()
{
  char *v0;

  sub_1001FAE78(*v0);
}

void sub_1002596F0(uint64_t a1)
{
  char *v1;

  sub_1001FB1A0(a1, *v1);
}

void sub_1002596F8(uint64_t a1)
{
  char *v1;

  sub_1001FB404(a1, *v1);
}

uint64_t sub_100259700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10026386C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10025975C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10026386C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1002597A8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100556BF0;
  result = sub_100262F28(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1002597DC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100259638(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100259804@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;

  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
  v8 = (uint64_t)a2 + v7[6];
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v38 = v8;
  v10(v8, 1, 1, v9);
  v11 = (uint64_t *)((char *)a2 + v7[7]);
  *v11 = 0;
  v11[1] = 0;
  v12 = (uint64_t *)((char *)a2 + v7[8]);
  *v12 = 0;
  v12[1] = 0;
  v13 = objc_msgSend(a1, "typeUTI");
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  *a2 = v15;
  a2[1] = v17;
  v18 = objc_msgSend(a1, "identifier");
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0xE000000000000000;
  }
  a2[2] = v20;
  a2[3] = v22;
  v23 = objc_msgSend(a1, "creationDate");
  if (v23)
  {
    v24 = v23;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  v10((uint64_t)v6, v25, 1, v9);
  sub_100164108((uint64_t)v6, v38, (uint64_t *)&unk_1005D7B20);
  v26 = objc_msgSend(a1, "tokenContentIdentifier");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  swift_bridgeObjectRelease(v11[1]);
  *v11 = v28;
  v11[1] = v30;
  v31 = objc_msgSend(a1, "altText");
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

  }
  else
  {

    v33 = 0;
    v35 = 0;
  }
  result = swift_bridgeObjectRelease(v12[1]);
  *v12 = v33;
  v12[1] = v35;
  return result;
}

void *sub_100259A50(uint64_t a1, uint64_t a2, __int16 a3, char *a4, uint64_t a5, double a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t ObjectType;
  uint64_t v23;
  void *v24;
  void *v25;
  NSString v26;
  id v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  NSDate v34;
  uint64_t v35;
  Class isa;
  NSString v37;
  NSString v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v42 = a5;
  v7 = v6;
  v41 = a4;
  v12 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v40 - v20;
  ObjectType = swift_getObjectType(a1);
  v23 = (uint64_t)v43;
  v24 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t, uint64_t, double))(a2 + 48))(v7[2], v7[3], a3 & 0x101, v41, v42, ObjectType, a2, a6);
  v25 = v24;
  if (!v23)
  {
    v42 = 0;
    v43 = v14;
    v41 = v19;
    v26 = (NSString)v7[1];
    v27 = v24;
    if (v26)
      v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "setTypeUTI:", v26);

    v28 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
    v29 = (uint64_t)v43;
    sub_100012CE8((uint64_t)v7 + v28[6], (uint64_t)v43, (uint64_t *)&unk_1005D7B20);
    v30 = v15;
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v29, 1, v15);
    v32 = v41;
    if ((_DWORD)v31 == 1)
    {
      Date.init()(v31);
      sub_100012DDC(v29, (uint64_t *)&unk_1005D7B20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v41, v29, v30);
    }
    static Date.+ infix(_:_:)(v32, a6);
    v33 = *(void (**)(char *, uint64_t))(v16 + 8);
    v33(v32, v30);
    v34.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v35 = v30;
    isa = v34.super.isa;
    v33(v21, v35);
    objc_msgSend(v25, "setCreationDate:", isa);

    if (*(_QWORD *)((char *)v7 + v28[7] + 8))
      v37 = String._bridgeToObjectiveC()();
    else
      v37 = 0;
    objc_msgSend(v25, "setTokenContentIdentifier:", v37);

    if (*(_QWORD *)((char *)v7 + v28[8] + 8))
      v38 = String._bridgeToObjectiveC()();
    else
      v38 = 0;
    objc_msgSend(v25, "setAltText:", v38);

  }
  return v25;
}

uint64_t sub_100259D14(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100259D50 + 4 * byte_10045DC76[a1]))(0xD000000000000018, 0x80000001004828D0);
}

uint64_t sub_100259D50()
{
  return 0x696669746E656469;
}

uint64_t sub_100259D6C()
{
  return 0x4164657461657263;
}

unint64_t sub_100259D88()
{
  return 0xD000000000000011;
}

uint64_t sub_100259DA4()
{
  return 0x74786554746C61;
}

uint64_t sub_100259DBC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D6088);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1002613E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s16AttributedStringV16InlineAttachmentV10CodingKeysON, &_s16AttributedStringV16InlineAttachmentV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v32 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v31 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v31, v5);
    v16 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
    v17 = (char *)v3 + v16[6];
    v30 = 2;
    v18 = type metadata accessor for Date(0);
    v19 = sub_100019C6C(&qword_1005D37B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v30, v5, v18, v19);
    v20 = (uint64_t *)((char *)v3 + v16[7]);
    v21 = *v20;
    v22 = v20[1];
    v29 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v29, v5);
    v23 = (uint64_t *)((char *)v3 + v16[8]);
    v24 = *v23;
    v25 = v23[1];
    v28 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v28, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100259F9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v41 = a2;
  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100012E18(&qword_1005D6078);
  v6 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s16AttributedStringV16InlineAttachmentVMa(0);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v12 = 0;
  v12[1] = 0;
  v13 = (char *)v12 + *(int *)(v10 + 24);
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v46 = (uint64_t)v13;
  v15(v13, 1, 1, v14);
  v16 = (_QWORD *)((char *)v12 + *(int *)(v9 + 28));
  *v16 = 0;
  v16[1] = 0;
  v43 = v16;
  v44 = a1;
  v17 = (_QWORD *)((char *)v12 + *(int *)(v9 + 32));
  *v17 = 0;
  v17[1] = 0;
  v45 = v17;
  v18 = a1[3];
  v19 = a1[4];
  sub_10012D19C(a1, v18);
  v20 = sub_1002613E4();
  v21 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s16AttributedStringV16InlineAttachmentV10CodingKeysON, &_s16AttributedStringV16InlineAttachmentV10CodingKeysON, v20, v18, v19);
  if (v21)
  {
    v23 = v45;
    v24 = v46;
    v25 = v43;
    sub_1000153C0(v44);
    swift_bridgeObjectRelease(v12[1]);
    sub_100012DDC(v24, (uint64_t *)&unk_1005D7B20);
    swift_bridgeObjectRelease(v25[1]);
    return swift_bridgeObjectRelease(v23[1]);
  }
  else
  {
    v52 = 0;
    v22 = v42;
    *v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v42);
    v12[1] = v26;
    v51 = 1;
    v27 = KeyedDecodingContainer.decode(_:forKey:)(&v51, v22);
    v28 = v46;
    v12[2] = v27;
    v12[3] = v29;
    v50 = 2;
    v30 = sub_100019C6C(&qword_1005D36E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, &v50, v22, v14, v30);
    sub_100164108((uint64_t)v5, v28, (uint64_t *)&unk_1005D7B20);
    v49 = 3;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v22);
    v33 = v32;
    v34 = v43;
    swift_bridgeObjectRelease(v43[1]);
    *v34 = v31;
    v34[1] = v33;
    v48 = 4;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v22);
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
    v38 = v45;
    swift_bridgeObjectRelease(v45[1]);
    *v38 = v35;
    v38[1] = v37;
    sub_100145220((uint64_t)v12, v41, _s16AttributedStringV16InlineAttachmentVMa);
    sub_1000153C0(v44);
    return sub_100145264((uint64_t)v12, _s16AttributedStringV16InlineAttachmentVMa);
  }
}

uint64_t sub_10025A33C()
{
  unsigned __int8 *v0;

  return sub_100259D14(*v0);
}

uint64_t sub_10025A344@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100262F6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10025A368(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002613E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10025A390(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002613E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10025A3B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100259F9C(a1, a2);
}

uint64_t sub_10025A3CC(_QWORD *a1)
{
  return sub_100259DBC(a1);
}

uint64_t sub_10025A3E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_100012E18(&qword_1005D6268);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10012D19C(a1, v11);
  v13 = sub_1002637E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s16AttributedStringV14AttributeRangeV10CodingKeysON, &_s16AttributedStringV14AttributeRangeV10CodingKeysON, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v7);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10025A4FC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6874676E656CLL;
  else
    return 0x7441737472617473;
}

uint64_t sub_10025A534@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100263198(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10025A558(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002637E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10025A580(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002637E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10025A5A8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100263280(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10025A5D0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10025A3E0(a1, *v1, v1[1]);
}

uint64_t sub_10025A5E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10025A618 + 4 * byte_10045DC7B[a1]))(0x65676E6172, 0xE500000000000000);
}

unint64_t sub_10025A618()
{
  return 0xD000000000000010;
}

uint64_t sub_10025A6F0(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v40[4];
  uint64_t v41;
  char v42;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D60D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_100261428();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s16AttributedStringV9AttributeV10CodingKeysON, &_s16AttributedStringV9AttributeV10CodingKeysON, v11, v9, v10);
  v40[0] = *v3;
  v42 = 0;
  v12 = sub_1002615C8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v40, &v42, v5, &_s16AttributedStringV14AttributeRangeVN, v12);
  if (!v2)
  {
    v13 = (int *)_s16AttributedStringV9AttributeVMa(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v40[0]) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100019C6C(&qword_1005D6028, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, v40, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v40[0]) = 2;
    v18 = type metadata accessor for Date(0);
    v19 = sub_100019C6C(&qword_1005D37B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, v40, v5, v18, v19);
    v20 = (char *)v3 + v13[7];
    v21 = *((_QWORD *)v20 + 8);
    v22 = *((_OWORD *)v20 + 1);
    v40[0] = *(_OWORD *)v20;
    v40[1] = v22;
    v23 = *((_OWORD *)v20 + 3);
    v40[2] = *((_OWORD *)v20 + 2);
    v40[3] = v23;
    v41 = v21;
    v42 = 3;
    v24 = sub_10026160C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v42, v5, &_s16AttributedStringV4FontVN, v24);
    v25 = (char *)v3 + v13[8];
    LOBYTE(v40[0]) = 4;
    v26 = _s16AttributedStringV14ParagraphStyleVMa(0);
    v27 = sub_100019C6C(&qword_1005D60E8, _s16AttributedStringV14ParagraphStyleVMa, (uint64_t)&unk_10045DF54);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, v40, v5, v26, v27);
    LOBYTE(v40[0]) = *((_BYTE *)v3 + v13[9]);
    v42 = 5;
    v28 = sub_100261650();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v42, v5, &_s16AttributedStringV13EmphasisStyleON, v28);
    v29 = (char *)v3 + v13[10];
    LOBYTE(v40[0]) = 6;
    v30 = type metadata accessor for URL(0);
    v31 = sub_100019C6C(&qword_1005D1598, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, v40, v5, v30, v31);
    LOBYTE(v40[0]) = *((_BYTE *)v3 + v13[11]);
    v42 = 7;
    v32 = sub_100261694();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v42, v5, &_s16AttributedStringV17WritingDirectionsON, v32);
    v33 = (uint64_t *)((char *)v3 + v13[12]);
    v34 = *v33;
    v35 = v33[1];
    LOBYTE(v40[0]) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, v40, v5);
    v36 = (char *)v3 + v13[13];
    LOBYTE(v40[0]) = 9;
    v37 = _s16AttributedStringV16InlineAttachmentVMa(0);
    v38 = sub_100019C6C(&qword_1005D6100, _s16AttributedStringV16InlineAttachmentVMa, (uint64_t)&unk_10045DF04);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, v40, v5, v37, v38);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10025AAF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _OWORD *v67;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;
  _OWORD v94[4];
  uint64_t v95;
  char v96;

  v93 = a1;
  v74 = a2;
  v2 = sub_100012E18(&qword_1005D5CF8);
  __chkstk_darwin(v2);
  v75 = (uint64_t)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v4);
  v77 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005D5D00);
  __chkstk_darwin(v6);
  v82 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v8);
  *(_QWORD *)&v81 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v10);
  *(_QWORD *)&v80 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100012E18(&qword_1005D6090);
  v79 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v92 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)_s16AttributedStringV9AttributeVMa(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t)&v16[*(int *)(v14 + 20)];
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v85 = v17;
  *(_QWORD *)&v78 = v18;
  v19(v17, 1, 1);
  v20 = (uint64_t)&v16[v13[6]];
  v21 = type metadata accessor for Date(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v91 = v20;
  v22(v20, 1, 1, v21);
  v23 = &v16[v13[7]];
  *(_OWORD *)v23 = xmmword_10045A5A0;
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *((_OWORD *)v23 + 3) = 0u;
  v84 = (uint64_t *)v23;
  *((_QWORD *)v23 + 8) = 0;
  v24 = (uint64_t)&v16[v13[8]];
  v25 = _s16AttributedStringV14ParagraphStyleVMa(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v90 = v24;
  v26(v24, 1, 1, v25);
  v76 = v13[9];
  v16[v76] = 5;
  v27 = (uint64_t)&v16[v13[10]];
  v28 = type metadata accessor for URL(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v89 = v27;
  v29(v27, 1, 1, v28);
  v30 = v13[11];
  v16[v30] = 5;
  v31 = &v16[v13[12]];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  v88 = v31;
  v32 = (uint64_t)&v16[v13[13]];
  v33 = _s16AttributedStringV16InlineAttachmentVMa(0);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  v86 = v32;
  v34(v32, 1, 1, v33);
  v36 = v93[3];
  v35 = v93[4];
  sub_10012D19C(v93, v36);
  v37 = sub_100261428();
  v38 = v87;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s16AttributedStringV9AttributeV10CodingKeysON, &_s16AttributedStringV9AttributeV10CodingKeysON, v37, v36, v35);
  if (v38)
  {
    v45 = v85;
    v46 = v91;
    v47 = v84;
    sub_1000153C0(v93);
    sub_100012DDC(v45, (uint64_t *)&unk_1005D06A0);
    sub_100012DDC(v46, (uint64_t *)&unk_1005D7B20);
    sub_10026146C(*v47, v47[1], v47[2], v47[3], v47[4], v47[5], v47[6], v47[7], v47[8]);
    sub_100012DDC(v90, &qword_1005D5D00);
    sub_100012DDC(v89, &qword_1005CEFD0);
    swift_bridgeObjectRelease(*((_QWORD *)v88 + 1));
    return sub_100012DDC(v86, &qword_1005D5CF8);
  }
  else
  {
    v39 = v80;
    v87 = v25;
    v40 = v81;
    v73 = v16;
    v72 = v28;
    v71 = v30;
    v70 = v33;
    v41 = (uint64_t)v82;
    v42 = v79;
    v96 = 0;
    v43 = sub_1002614B8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v94, &_s16AttributedStringV14AttributeRangeVN, &v96, v83, &_s16AttributedStringV14AttributeRangeVN, v43);
    *v73 = v94[0];
    LOBYTE(v94[0]) = 1;
    v44 = sub_100019C6C(&qword_1005D6018, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v78, v94, v83, v78, v44);
    sub_100164108(v39, v85, (uint64_t *)&unk_1005D06A0);
    LOBYTE(v94[0]) = 2;
    v48 = sub_100019C6C(&qword_1005D36E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, v94, v83, v21, v48);
    sub_100164108(v40, v91, (uint64_t *)&unk_1005D7B20);
    v96 = 3;
    v49 = sub_1002614FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s16AttributedStringV4FontVN, &v96, v83, &_s16AttributedStringV4FontVN, v49);
    v50 = v84;
    v81 = v94[0];
    v80 = v94[1];
    v78 = v94[2];
    v69 = v94[3];
    v51 = v95;
    sub_10026146C(*v84, v84[1], v84[2], v84[3], v84[4], v84[5], v84[6], v84[7], v84[8]);
    v52 = v80;
    *(_OWORD *)v50 = v81;
    *((_OWORD *)v50 + 1) = v52;
    v53 = v69;
    *((_OWORD *)v50 + 2) = v78;
    *((_OWORD *)v50 + 3) = v53;
    v50[8] = v51;
    LOBYTE(v94[0]) = 4;
    v54 = sub_100019C6C(&qword_1005D60B0, _s16AttributedStringV14ParagraphStyleVMa, (uint64_t)&unk_10045DF7C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v87, v94, v83, v87, v54);
    sub_100164108(v41, v90, &qword_1005D5D00);
    v96 = 5;
    v55 = sub_100261540();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s16AttributedStringV13EmphasisStyleON, &v96, v83, &_s16AttributedStringV13EmphasisStyleON, v55);
    *((_BYTE *)v73 + v76) = v94[0];
    LOBYTE(v94[0]) = 6;
    v56 = sub_100019C6C(&qword_1005D1550, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v57 = (uint64_t)v77;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v72, v94, v83, v72, v56);
    sub_100164108(v57, v89, &qword_1005CEFD0);
    v96 = 7;
    v58 = sub_100261584();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s16AttributedStringV17WritingDirectionsON, &v96, v83, &_s16AttributedStringV17WritingDirectionsON, v58);
    v59 = v93;
    *((_BYTE *)v73 + v71) = v94[0];
    LOBYTE(v94[0]) = 8;
    v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v94, v83);
    v62 = v61;
    v63 = (uint64_t *)v88;
    swift_bridgeObjectRelease(*((_QWORD *)v88 + 1));
    *v63 = v60;
    v63[1] = v62;
    LOBYTE(v94[0]) = 9;
    v64 = sub_100019C6C(&qword_1005D60C8, _s16AttributedStringV16InlineAttachmentVMa, (uint64_t)&unk_10045DF2C);
    v65 = v83;
    v66 = v92;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v70, v94, v83, v70, v64);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v66, v65);
    sub_100164108(v75, v86, &qword_1005D5CF8);
    v67 = v73;
    sub_100145220((uint64_t)v73, v74, _s16AttributedStringV9AttributeVMa);
    sub_1000153C0(v59);
    return sub_100145264((uint64_t)v67, _s16AttributedStringV9AttributeVMa);
  }
}

uint64_t sub_10025B454()
{
  unsigned __int8 *v0;

  return sub_10025A5E8(*v0);
}

uint64_t sub_10025B45C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002633D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10025B480(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10025B48C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100261428();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10025B4B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100261428();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10025B4DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10025AAF0(a1, a2);
}

uint64_t sub_10025B4F0(_QWORD *a1)
{
  return sub_10025A6F0(a1);
}

id sub_10025B504(void *a1, void *a2, uint64_t a3)
{
  char v6;
  id result;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  void **aBlock;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v52;
  uint64_t (*v53)();
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v6 = *(_BYTE *)(a3 + 49);
  result = objc_msgSend(a1, "attributedString");
  v8 = result;
  if ((v6 & 1) == 0)
  {
    if (!result)
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    v9 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", result);

    v10 = ICTTAttributeNameReplicaID;
    v11 = objc_msgSend(v9, "ic_range");
    objc_msgSend(v9, "removeAttribute:range:", v10, v11, v12);

    v13 = ICTTAttributeNameTimestamp;
    v14 = objc_msgSend(v9, "ic_range");
    objc_msgSend(v9, "removeAttribute:range:", v13, v14, v15);

    v16 = v9;
    v17 = objc_msgSend(a2, "managedObjectContext");
    v18 = *(_BYTE *)(a3 + 52);
    v57 = _swiftEmptyArrayStorage;
    v19 = objc_msgSend(v16, "string");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v55 = v20;
    v56 = v22;
    v23 = objc_msgSend(v16, "ic_range");
    v25 = v24;
    v26 = swift_allocObject(&unk_100561340, 33, 7);
    *(_QWORD *)(v26 + 16) = &v55;
    *(_QWORD *)(v26 + 24) = v17;
    *(_BYTE *)(v26 + 32) = v18;
    v27 = swift_allocObject(&unk_100561368, 32, 7);
    *(_QWORD *)(v27 + 16) = sub_10025B9AC;
    *(_QWORD *)(v27 + 24) = v26;
    v53 = sub_1000165D8;
    v54 = v27;
    aBlock = _NSConcreteStackBlock;
    v50 = 1107296256;
    v51 = sub_100255670;
    v52 = &unk_100561380;
    v28 = _Block_copy(&aBlock);
    v29 = v54;
    v30 = v17;
    swift_retain(v27);
    swift_release(v29);
    objc_msgSend(v16, "enumerateAttributesInRange:options:usingBlock:", v23, v25, 0, v28);

    _Block_release(v28);
    LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v27, "", 120, 25, 93, 1);
    result = (id)swift_release(v27);
    if ((v30 & 1) == 0)
    {
      v31 = v55;

LABEL_8:
      swift_release(v26);
      return (id)v31;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (result)
  {
    v32 = objc_msgSend(result, "ic_range");
    v34 = v33;

    v35 = ICTTMergeableAttributedString.authorAttributedString(for:object:)(v32, v34, a2);
    v36 = objc_msgSend(a2, "managedObjectContext");
    v37 = *(_BYTE *)(a3 + 52);
    v57 = _swiftEmptyArrayStorage;
    v38 = objc_msgSend((id)v35, "string");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v55 = v39;
    v56 = v41;
    v42 = objc_msgSend((id)v35, "ic_range");
    v44 = v43;
    v26 = swift_allocObject(&unk_1005613B8, 33, 7);
    *(_QWORD *)(v26 + 16) = &v55;
    *(_QWORD *)(v26 + 24) = v36;
    *(_BYTE *)(v26 + 32) = v37;
    v45 = swift_allocObject(&unk_1005613E0, 32, 7);
    *(_QWORD *)(v45 + 16) = sub_100263A54;
    *(_QWORD *)(v45 + 24) = v26;
    v53 = sub_1001F789C;
    v54 = v45;
    aBlock = _NSConcreteStackBlock;
    v50 = 1107296256;
    v51 = sub_100255670;
    v52 = &unk_1005613F8;
    v46 = _Block_copy(&aBlock);
    v47 = v54;
    v48 = v36;
    swift_retain(v45);
    swift_release(v47);
    objc_msgSend((id)v35, "enumerateAttributesInRange:options:usingBlock:", v42, v44, 0, v46);

    _Block_release(v46);
    LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v45, "", 120, 25, 93, 1);
    result = (id)swift_release(v45);
    if ((v35 & 1) == 0)
    {
      v31 = v55;
      goto LABEL_8;
    }
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10025B988()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10025B9AC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100253DB0(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24), *(unsigned __int8 *)(v4 + 32));
}

uint64_t sub_10025B9B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10025B9C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t _s16AttributedStringV9AttributeVMa(uint64_t a1)
{
  return sub_100010414(a1, (uint64_t *)&unk_1005D5F70, (uint64_t)&_s16AttributedStringV9AttributeVMn);
}

uint64_t _s16AttributedStringV14ParagraphStyleVMa(uint64_t a1)
{
  return sub_100010414(a1, (uint64_t *)&unk_1005D5E18, (uint64_t)&_s16AttributedStringV14ParagraphStyleVMn);
}

uint64_t _s16AttributedStringV16InlineAttachmentVMa(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D5ED0, (uint64_t)&_s16AttributedStringV16InlineAttachmentVMn);
}

uint64_t sub_10025BA14(CGColor *a1)
{
  CGColorSpace *v2;
  CGColorSpace *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  CGColor *v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;

  v2 = CGColorGetColorSpace(a1);
  if (v2)
  {
    v3 = v2;
    v4 = (__CFString *)CGColorSpaceCopyName(v2);

    if (v4)
    {
      v5 = CGColorRef.components.getter();
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)(v5 + 16);
        if (v7)
        {
          v28 = _swiftEmptyArrayStorage;
          sub_1001372AC(0, v7, 0);
          v8 = 0;
          v9 = _swiftEmptyArrayStorage;
          v10 = _swiftEmptyArrayStorage[2];
          do
          {
            v11 = *(_QWORD *)(v6 + 8 * v8 + 32);
            v28 = v9;
            v12 = v9[3];
            if (v10 >= v12 >> 1)
            {
              sub_1001372AC(v12 > 1, v10 + 1, 1);
              v9 = v28;
            }
            ++v8;
            v9[2] = v10 + 1;
            v9[v10++ + 4] = v11;
          }
          while (v7 != v8);
          swift_bridgeObjectRelease(v6);
        }
        else
        {
          swift_bridgeObjectRelease(v5);
        }
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

        return v25;
      }

    }
  }
  if (qword_1005CEB70 != -1)
    swift_once(&qword_1005CEB70, sub_100253D68);
  v13 = type metadata accessor for Logger(0);
  sub_10012A0B0(v13, (uint64_t)qword_1005D5CE0);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.error.getter(v15, v16);
  if (os_log_type_enabled(v15, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = (_QWORD *)swift_slowAlloc(32, -1);
    v27 = (uint64_t)v14;
    v28 = v19;
    *(_DWORD *)v18 = 136315138;
    type metadata accessor for CGColor(0);
    v21 = v20;
    v14 = v14;
    v22 = String.init<A>(describing:)(&v27, v21);
    v24 = v23;
    v27 = sub_1003A4190(v22, v23, (uint64_t *)&v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v18 + 4);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "Cannot create color from CGColor — returning nil {cgColor: %s}", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_10025BCEC(int a1)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 5;
      break;
    case 5:
      result = 4;
      break;
    default:
      switch(a1)
      {
        case 'd':
          result = 6;
          break;
        case 'e':
          result = 7;
          break;
        case 'f':
          result = 8;
          break;
        case 'g':
          result = 9;
          break;
        default:
          if (qword_1005CEB70 != -1)
            swift_once(&qword_1005CEB70, sub_100253D68);
          v4 = type metadata accessor for Logger(0);
          v5 = sub_10012A0B0(v4, (uint64_t)qword_1005D5CE0);
          v6 = Logger.logObject.getter(v5);
          v7 = static os_log_type_t.fault.getter(v6);
          if (os_log_type_enabled(v6, v7))
          {
            v8 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v8 = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unknown named paragraph style — returning nil", v8, 2u);
            swift_slowDealloc(v8, -1, -1);
          }

          result = 10;
          break;
      }
      break;
  }
  return result;
}

unint64_t sub_10025BE54(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (result >= 5)
  {
    if (qword_1005CEB70 != -1)
      swift_once(&qword_1005CEB70, sub_100253D68);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10012A0B0(v1, (uint64_t)qword_1005D5CE0);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.fault.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unknown text alignment — returning nil", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    return 5;
  }
  return result;
}

unint64_t sub_10025BF2C(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 < 6)
    return 0x40302010005uLL >> (8 * a1);
  if (qword_1005CEB70 != -1)
    swift_once(&qword_1005CEB70, sub_100253D68);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005D5CE0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown emphasis color type — returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 5;
}

uint64_t _s16AttributedStringV13ChecklistItemVMa(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D5D88, (uint64_t)&_s16AttributedStringV13ChecklistItemVMn);
}

ValueMetadata *_s16AttributedStringV5ColorVMa()
{
  return &_s16AttributedStringV5ColorVN;
}

_QWORD *sub_10025C058(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10025C0E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10025C114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10025C170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10025C1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10025C228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10025C284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10025C290);
}

uint64_t sub_10025C290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10025C31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025C328);
}

uint64_t sub_10025C328(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_10025C3A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10045DCD8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10025C410(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v8 = a3[8];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = _s16AttributedStringV13ChecklistItemVMa(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100012E18(&qword_1005D5D10);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v9, v10, v15);
      *((_BYTE *)v9 + *(int *)(v11 + 20)) = v10[*(int *)(v11 + 20)];
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[9];
    v17 = a3[10];
    v18 = (char *)v4 + v16;
    v19 = (uint64_t)a2 + v16;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = *(_BYTE *)(v19 + 8);
    v20 = (char *)v4 + v17;
    v21 = (char *)a2 + v17;
    v22 = type metadata accessor for UUID(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_100012E18((uint64_t *)&unk_1005D06A0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return v4;
}

uint64_t sub_10025C5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 32);
  v5 = _s16AttributedStringV13ChecklistItemVMa(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  v7 = a1 + *(int *)(a2 + 40);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

uint64_t sub_10025C688(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = _s16AttributedStringV13ChecklistItemVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100012E18(&qword_1005D5D10);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v8, v9, v13);
    *((_BYTE *)v8 + *(int *)(v10 + 20)) = *((_BYTE *)v9 + *(int *)(v10 + 20));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (void *)(a1 + v15);
  v19 = (const void *)(a2 + v15);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_10025C818(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[8];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = _s16AttributedStringV13ChecklistItemVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
      v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100145264((uint64_t)v8, _s16AttributedStringV13ChecklistItemVMa);
LABEL_6:
    v16 = sub_100012E18(&qword_1005D5D10);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v31 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v8, v9, v31);
  v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
LABEL_7:
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  *(_BYTE *)(v18 + 8) = *((_BYTE *)v19 + 8);
  *(_QWORD *)v18 = v20;
  v21 = a3[10];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v29 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_10025CA64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = _s16AttributedStringV13ChecklistItemVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100012E18(&qword_1005D5D10);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    *((_BYTE *)v8 + *(int *)(v10 + 20)) = *((_BYTE *)v9 + *(int *)(v10 + 20));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (void *)(a1 + v15);
  v19 = (const void *)(a2 + v15);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_10025CBF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = a3[8];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = _s16AttributedStringV13ChecklistItemVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v8, v9, v15);
      v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100145264((uint64_t)v8, _s16AttributedStringV13ChecklistItemVMa);
LABEL_6:
    v16 = sub_100012E18(&qword_1005D5D10);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v30 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v8, v9, v30);
  v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
LABEL_7:
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = (void *)(a1 + v18);
  v22 = (void *)(a2 + v18);
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v28 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_10025CE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10025CE38);
}

uint64_t sub_10025CE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 251)
  {
    v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 5)
      return v4 - 4;
    else
      return 0;
  }
  else
  {
    v8 = sub_100012E18(&qword_1005D5D10);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_100012E18((uint64_t *)&unk_1005D06A0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10025CED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025CEE4);
}

uint64_t sub_10025CEE4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 251)
  {
    *(_BYTE *)(result + 1) = a2 + 4;
  }
  else
  {
    v8 = sub_100012E18(&qword_1005D5D10);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_100012E18((uint64_t *)&unk_1005D06A0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10025CF84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_10045DD00;
  v6[1] = &unk_10045DD18;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[3] = &unk_10045DD30;
  sub_100018C7C(319, &qword_1005D5E28, _s16AttributedStringV13ChecklistItemVMa);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_10045DD30;
    sub_100018C7C(319, (unint64_t *)&unk_1005D5E30, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t *sub_10025D054(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    v15 = swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12, v15))
    {
      v16 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = a3[7];
    v19 = a3[8];
    v20 = (uint64_t *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (uint64_t *)((char *)v4 + v19);
    v24 = (uint64_t *)((char *)a2 + v19);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v25);
  }
  return v4;
}

uint64_t sub_10025D19C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

_QWORD *sub_10025D238(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  v14 = swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11, v14))
  {
    v15 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (_QWORD *)((char *)a1 + v17);
  v22 = (_QWORD *)((char *)a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  return a1;
}

_QWORD *sub_10025D354(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[8];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

_OWORD *sub_10025D4FC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *sub_10025D5DC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  return a1;
}

uint64_t sub_10025D744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10025D750);
}

uint64_t sub_10025D750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10025D7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025D7DC);
}

uint64_t sub_10025D7DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_10025D854(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10045DD68;
  v4[1] = &unk_10045DD80;
  sub_100018C7C(319, (unint64_t *)&qword_1005DA840, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10045DD68;
    v4[4] = &unk_10045DD68;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

_QWORD *sub_10025D8E4(_OWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  _WORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int *v64;
  uint64_t v65;
  unsigned int (*v66)(_QWORD *, uint64_t, int *, __n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void (*v84)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v85;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  unsigned int (*v94)(char *, uint64_t, uint64_t, __n128);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    v11 = *(_QWORD *)(v10 - 8);
    v92 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    v91 = v11;
    if (v92(v9, 1, v10))
    {
      v12 = sub_100012E18((uint64_t *)&unk_1005D06A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[6];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    v93 = v10;
    if (v19(v16, 1, v17))
    {
      v20 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v21 = a3[7];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = *(_QWORD *)((char *)a2 + v21 + 8);
    v94 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v19;
    if (v24 == 1)
    {
      v25 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v25;
      *((_QWORD *)v22 + 8) = *((_QWORD *)v23 + 8);
      v26 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v26;
    }
    else
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v24;
      *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
      v22[24] = v23[24];
      *(_DWORD *)(v22 + 25) = *(_DWORD *)(v23 + 25);
      *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
      v22[40] = v23[40];
      v27 = *((_QWORD *)v23 + 7);
      swift_bridgeObjectRetain(v24);
      if (v27)
      {
        *((_QWORD *)v22 + 6) = *((_QWORD *)v23 + 6);
        *((_QWORD *)v22 + 7) = v27;
        v28 = *((_QWORD *)v23 + 8);
        *((_QWORD *)v22 + 8) = v28;
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
      }
      else
      {
        *((_OWORD *)v22 + 3) = *((_OWORD *)v23 + 3);
        *((_QWORD *)v22 + 8) = *((_QWORD *)v23 + 8);
      }
    }
    v29 = a3[8];
    v30 = (_WORD *)((char *)v4 + v29);
    v31 = (_WORD *)((char *)a2 + v29);
    v32 = (int *)_s16AttributedStringV14ParagraphStyleVMa(0);
    v33 = *((_QWORD *)v32 - 1);
    if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100012E18(&qword_1005D5D00);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v88 = v33;
      v89 = v18;
      v90 = v17;
      *v30 = *v31;
      v35 = *((_QWORD *)v31 + 2);
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      *((_QWORD *)v30 + 2) = v35;
      *((_BYTE *)v30 + 24) = *((_BYTE *)v31 + 24);
      v36 = v32[8];
      v37 = (char *)v30 + v36;
      v38 = (char *)v31 + v36;
      v39 = _s16AttributedStringV13ChecklistItemVMa(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = sub_100012E18(&qword_1005D5D10);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        v42 = v93;
      }
      else
      {
        v43 = v37;
        v87 = v37;
        v42 = v93;
        (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v43, v38, v93);
        v87[*(int *)(v39 + 20)] = v38[*(int *)(v39 + 20)];
        (*(void (**)(void))(v40 + 56))();
      }
      v44 = v32[9];
      v45 = (char *)v30 + v44;
      v46 = (char *)v31 + v44;
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      v47 = v32[10];
      v48 = (char *)v30 + v47;
      v49 = (char *)v31 + v47;
      v18 = v89;
      if (v92((char *)v31 + v47, 1, v42))
      {
        v50 = sub_100012E18((uint64_t *)&unk_1005D06A0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v48, v49, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v48, 0, 1, v42);
      }
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v88 + 56))(v30, 0, 1, v32);
      v17 = v90;
    }
    v51 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v52 = (char *)v4 + v51;
    v53 = (char *)a2 + v51;
    v54 = type metadata accessor for URL(0);
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = sub_100012E18(&qword_1005CEFD0);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    v57 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v58 = (_QWORD *)((char *)v4 + v57);
    v59 = (_QWORD *)((char *)a2 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = a3[13];
    v62 = (_QWORD *)((char *)v4 + v61);
    v63 = (_QWORD *)((char *)a2 + v61);
    v64 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
    v65 = *((_QWORD *)v64 - 1);
    v66 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v65 + 48);
    v67 = swift_bridgeObjectRetain(v60);
    if (v66(v63, 1, v64, v67))
    {
      v68 = sub_100012E18(&qword_1005D5CF8);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v69 = v63[1];
      *v62 = *v63;
      v62[1] = v69;
      v70 = v63[3];
      v62[2] = v63[2];
      v62[3] = v70;
      v71 = v64[6];
      v72 = (char *)v62 + v71;
      v73 = (char *)v63 + v71;
      swift_bridgeObjectRetain(v69);
      v74 = swift_bridgeObjectRetain(v70);
      if (v94(v73, 1, v17, v74))
      {
        v75 = sub_100012E18((uint64_t *)&unk_1005D7B20);
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v72, v73, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v72, 0, 1, v17);
      }
      v76 = v64[7];
      v77 = (_QWORD *)((char *)v62 + v76);
      v78 = (_QWORD *)((char *)v63 + v76);
      v79 = v78[1];
      *v77 = *v78;
      v77[1] = v79;
      v80 = v64[8];
      v81 = (_QWORD *)((char *)v62 + v80);
      v82 = (_QWORD *)((char *)v63 + v80);
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      v84 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v65 + 56);
      swift_bridgeObjectRetain(v79);
      v85 = swift_bridgeObjectRetain(v83);
      v84(v62, 0, 1, v64, v85);
    }
  }
  return v4;
}

uint64_t sub_10025DEE0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v12 = (_QWORD *)(a1 + a2[7]);
  v13 = v12[1];
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    v14 = v12[7];
    if (v14)
    {
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v12[8]);
    }
  }
  v15 = a1 + a2[8];
  v16 = _s16AttributedStringV14ParagraphStyleVMa(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v28 = v10;
    v17 = v11;
    v18 = v15 + *(int *)(v16 + 32);
    v19 = _s16AttributedStringV13ChecklistItemVMa(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
    v20 = v15 + *(int *)(v16 + 40);
    v11 = v17;
    v10 = v28;
    if (!v7(v20, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
  }
  v21 = a1 + a2[10];
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  v24 = a1 + a2[13];
  v25 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v25 - 1) + 48))(v24, 1, v25);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v24 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v24 + 24));
    v27 = v24 + v25[6];
    if (!v11(v27, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v27, v9);
    swift_bridgeObjectRelease(*(_QWORD *)(v24 + v25[7] + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(v24 + v25[8] + 8));
  }
  return result;
}

_OWORD *sub_10025E174(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  int *v62;
  uint64_t v63;
  unsigned int (*v64)(_QWORD *, uint64_t, int *, __n128);
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v83;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  unsigned int (*v92)(char *, uint64_t, uint64_t, __n128);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v89 = v10;
  if (v90(v8, 1, v9))
  {
    v11 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v91 = v9;
  if (v17(v14, 1, v15))
  {
    v18 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)((char *)a2 + v19 + 8);
  v92 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v17;
  if (v22 == 1)
  {
    v23 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v23;
    *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
    v24 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v24;
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    v20[24] = v21[24];
    *(_DWORD *)(v20 + 25) = *(_DWORD *)(v21 + 25);
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    v20[40] = v21[40];
    v25 = *((_QWORD *)v21 + 7);
    swift_bridgeObjectRetain(v22);
    if (v25)
    {
      *((_QWORD *)v20 + 6) = *((_QWORD *)v21 + 6);
      *((_QWORD *)v20 + 7) = v25;
      v26 = *((_QWORD *)v21 + 8);
      *((_QWORD *)v20 + 8) = v26;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
    }
    else
    {
      *((_OWORD *)v20 + 3) = *((_OWORD *)v21 + 3);
      *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
    }
  }
  v27 = a3[8];
  v28 = (_WORD *)((char *)a1 + v27);
  v29 = (_WORD *)((char *)a2 + v27);
  v30 = (int *)_s16AttributedStringV14ParagraphStyleVMa(0);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_100012E18(&qword_1005D5D00);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v86 = v31;
    v87 = v16;
    v88 = v15;
    *v28 = *v29;
    v33 = *((_QWORD *)v29 + 2);
    *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 2) = v33;
    *((_BYTE *)v28 + 24) = *((_BYTE *)v29 + 24);
    v34 = v30[8];
    v35 = (char *)v28 + v34;
    v36 = (char *)v29 + v34;
    v37 = _s16AttributedStringV13ChecklistItemVMa(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = sub_100012E18(&qword_1005D5D10);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      v40 = v91;
    }
    else
    {
      v41 = v35;
      v85 = v35;
      v40 = v91;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v41, v36, v91);
      v85[*(int *)(v37 + 20)] = v36[*(int *)(v37 + 20)];
      (*(void (**)(void))(v38 + 56))();
    }
    v42 = v30[9];
    v43 = (char *)v28 + v42;
    v44 = (char *)v29 + v42;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v30[10];
    v46 = (char *)v28 + v45;
    v47 = (char *)v29 + v45;
    v16 = v87;
    if (v90((char *)v29 + v45, 1, v40))
    {
      v48 = sub_100012E18((uint64_t *)&unk_1005D06A0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v46, v47, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v46, 0, 1, v40);
    }
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v86 + 56))(v28, 0, 1, v30);
    v15 = v88;
  }
  v49 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = type metadata accessor for URL(0);
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    v54 = sub_100012E18(&qword_1005CEFD0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v51, v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  }
  v55 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v56 = (_QWORD *)((char *)a1 + v55);
  v57 = (_QWORD *)((char *)a2 + v55);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = a3[13];
  v60 = (_QWORD *)((char *)a1 + v59);
  v61 = (_QWORD *)((char *)a2 + v59);
  v62 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
  v63 = *((_QWORD *)v62 - 1);
  v64 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v63 + 48);
  v65 = swift_bridgeObjectRetain(v58);
  if (v64(v61, 1, v62, v65))
  {
    v66 = sub_100012E18(&qword_1005D5CF8);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    v67 = v61[1];
    *v60 = *v61;
    v60[1] = v67;
    v68 = v61[3];
    v60[2] = v61[2];
    v60[3] = v68;
    v69 = v62[6];
    v70 = (char *)v60 + v69;
    v71 = (char *)v61 + v69;
    swift_bridgeObjectRetain(v67);
    v72 = swift_bridgeObjectRetain(v68);
    if (v92(v71, 1, v15, v72))
    {
      v73 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v70, v71, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v70, 0, 1, v15);
    }
    v74 = v62[7];
    v75 = (_QWORD *)((char *)v60 + v74);
    v76 = (_QWORD *)((char *)v61 + v74);
    v77 = v76[1];
    *v75 = *v76;
    v75[1] = v77;
    v78 = v62[8];
    v79 = (_QWORD *)((char *)v60 + v78);
    v80 = (_QWORD *)((char *)v61 + v78);
    v81 = v80[1];
    *v79 = *v80;
    v79[1] = v81;
    v82 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v63 + 56);
    swift_bridgeObjectRetain(v77);
    v83 = swift_bridgeObjectRetain(v81);
    v82(v60, 0, 1, v62, v83);
  }
  return a1;
}

_QWORD *sub_10025E744(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, int *);
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  int v80;
  size_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int *v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t, int *);
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  char *v158;
  int v159;
  int v160;
  uint64_t v161;
  _BYTE *__src;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(void *, uint64_t, uint64_t);
  uint64_t (*v169)(char *, uint64_t, uint64_t);
  _QWORD *v170;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  v166 = v10;
  v167 = v9;
  v168 = (uint64_t (*)(void *, uint64_t, uint64_t))v11;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  v165 = v19;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    v23 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_13:
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)((char *)a1 + v24 + 8);
  v28 = *(_QWORD *)((char *)a2 + v24 + 8);
  v169 = v20;
  if (v27 == 1)
  {
    if (v28 == 1)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
      v29 = *((_OWORD *)v26 + 1);
      v30 = *((_OWORD *)v26 + 2);
      v31 = *((_OWORD *)v26 + 3);
      *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
      *((_OWORD *)v25 + 2) = v30;
      *((_OWORD *)v25 + 3) = v31;
      *((_OWORD *)v25 + 1) = v29;
      goto LABEL_29;
    }
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v35 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v25 + 1) = v35;
    v36 = *((_QWORD *)v26 + 2);
    v25[24] = v26[24];
    *((_QWORD *)v25 + 2) = v36;
    v25[25] = v26[25];
    v25[26] = v26[26];
    v25[27] = v26[27];
    v25[28] = v26[28];
    v37 = *((_QWORD *)v26 + 4);
    v25[40] = v26[40];
    *((_QWORD *)v25 + 4) = v37;
    v38 = *((_QWORD *)v26 + 7);
    swift_bridgeObjectRetain(v35);
    if (!v38)
    {
      v39 = *((_OWORD *)v26 + 3);
      *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
      *((_OWORD *)v25 + 3) = v39;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  if (v28 == 1)
  {
    sub_10025F394(v25);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v33 = *((_OWORD *)v26 + 2);
    v32 = *((_OWORD *)v26 + 3);
    v34 = *((_OWORD *)v26 + 1);
    *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
    *((_OWORD *)v25 + 2) = v33;
    *((_OWORD *)v25 + 3) = v32;
    *((_OWORD *)v25 + 1) = v34;
    goto LABEL_29;
  }
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v40 = *((_QWORD *)v26 + 1);
  *((_QWORD *)v25 + 1) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v27);
  v41 = *((_QWORD *)v26 + 2);
  v25[24] = v26[24];
  *((_QWORD *)v25 + 2) = v41;
  v25[25] = v26[25];
  v25[26] = v26[26];
  v25[27] = v26[27];
  v25[28] = v26[28];
  v42 = *((_QWORD *)v26 + 4);
  v25[40] = v26[40];
  *((_QWORD *)v25 + 4) = v42;
  v43 = v25 + 48;
  v44 = v26 + 48;
  v45 = *((_QWORD *)v25 + 7);
  v46 = *((_QWORD *)v26 + 7);
  if (v45)
  {
    if (v46)
    {
      *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
      v47 = *((_QWORD *)v26 + 7);
      *((_QWORD *)v25 + 7) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v45);
      v48 = *((_QWORD *)v26 + 8);
      v49 = *((_QWORD *)v25 + 8);
      *((_QWORD *)v25 + 8) = v48;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRelease(v49);
    }
    else
    {
      sub_10025F364((uint64_t)(v25 + 48));
      v52 = *((_QWORD *)v26 + 8);
      *v43 = *v44;
      *((_QWORD *)v25 + 8) = v52;
    }
  }
  else
  {
    if (v46)
    {
LABEL_26:
      *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
      v50 = *((_QWORD *)v26 + 7);
      *((_QWORD *)v25 + 7) = v50;
      v51 = *((_QWORD *)v26 + 8);
      *((_QWORD *)v25 + 8) = v51;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v51);
      goto LABEL_29;
    }
    v53 = *v44;
    *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
    *v43 = v53;
  }
LABEL_29:
  v54 = a3[8];
  v170 = a1;
  v55 = (uint64_t)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = (int *)_s16AttributedStringV14ParagraphStyleVMa(0);
  v58 = *((_QWORD *)v57 - 1);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59((uint64_t)v56, 1, v57);
  if (!v60)
  {
    if (v61)
    {
      sub_100145264(v55, _s16AttributedStringV14ParagraphStyleVMa);
      goto LABEL_35;
    }
    v164 = v18;
    *(_BYTE *)v55 = *v56;
    *(_BYTE *)(v55 + 1) = v56[1];
    *(_QWORD *)(v55 + 8) = *((_QWORD *)v56 + 1);
    v73 = *((_QWORD *)v56 + 2);
    *(_BYTE *)(v55 + 24) = v56[24];
    *(_QWORD *)(v55 + 16) = v73;
    v74 = v57[8];
    v75 = v55 + v74;
    v76 = &v56[v74];
    v77 = _s16AttributedStringV13ChecklistItemVMa(0);
    v78 = *(_QWORD *)(v77 - 8);
    v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
    v161 = v75;
    LODWORD(v75) = v79(v75, 1, v77);
    v80 = v79((uint64_t)v76, 1, v77);
    if ((_DWORD)v75)
    {
      if (v80)
      {
        v81 = *(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D5D10) - 8) + 64);
        v82 = (void *)v161;
LABEL_66:
        memcpy(v82, v76, v81);
        v18 = v164;
        v139 = v167;
LABEL_75:
        v152 = v57[9];
        v153 = v55 + v152;
        v154 = &v56[v152];
        v155 = *(_QWORD *)v154;
        *(_BYTE *)(v153 + 8) = v154[8];
        *(_QWORD *)v153 = v155;
        v156 = v57[10];
        v157 = (void *)(v55 + v156);
        v158 = &v56[v156];
        v159 = v168(v157, 1, v139);
        v160 = v168(v158, 1, v139);
        if (v159)
        {
          if (!v160)
          {
            (*(void (**)(void *, char *, uint64_t))(v166 + 16))(v157, v158, v139);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v157, 0, 1, v139);
            goto LABEL_45;
          }
        }
        else
        {
          if (!v160)
          {
            (*(void (**)(void *, char *, uint64_t))(v166 + 24))(v157, v158, v139);
            goto LABEL_45;
          }
          (*(void (**)(void *, uint64_t))(v166 + 8))(v157, v139);
        }
        v70 = *(_QWORD *)(*(_QWORD *)(sub_100012E18((uint64_t *)&unk_1005D06A0) - 8) + 64);
        v71 = v157;
        v72 = v158;
LABEL_36:
        memcpy(v71, v72, v70);
        goto LABEL_45;
      }
      v139 = v167;
      (*(void (**)(uint64_t, char *, uint64_t))(v166 + 16))(v161, v76, v167);
      *(_BYTE *)(v161 + *(int *)(v77 + 20)) = v76[*(int *)(v77 + 20)];
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v161, 0, 1, v77);
    }
    else
    {
      if (v80)
      {
        sub_100145264(v161, _s16AttributedStringV13ChecklistItemVMa);
        v81 = *(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D5D10) - 8) + 64);
        v82 = (void *)v161;
        goto LABEL_66;
      }
      v139 = v167;
      (*(void (**)(uint64_t, char *, uint64_t))(v166 + 24))(v161, v76, v167);
      *(_BYTE *)(v161 + *(int *)(v77 + 20)) = v76[*(int *)(v77 + 20)];
    }
    v18 = v164;
    goto LABEL_75;
  }
  if (v61)
  {
LABEL_35:
    v70 = *(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D5D00) - 8) + 64);
    v71 = (void *)v55;
    v72 = v56;
    goto LABEL_36;
  }
  v163 = v18;
  *(_BYTE *)v55 = *v56;
  *(_BYTE *)(v55 + 1) = v56[1];
  *(_QWORD *)(v55 + 8) = *((_QWORD *)v56 + 1);
  v62 = *((_QWORD *)v56 + 2);
  *(_BYTE *)(v55 + 24) = v56[24];
  *(_QWORD *)(v55 + 16) = v62;
  v63 = v57[8];
  v64 = (void *)(v55 + v63);
  v65 = &v56[v63];
  v66 = _s16AttributedStringV13ChecklistItemVMa(0);
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    v68 = sub_100012E18(&qword_1005D5D10);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    v69 = v167;
  }
  else
  {
    v83 = v64;
    __src = v64;
    v69 = v167;
    (*(void (**)(void *, char *, uint64_t))(v166 + 16))(v83, v65, v167);
    __src[*(int *)(v66 + 20)] = v65[*(int *)(v66 + 20)];
    (*(void (**)(void))(v67 + 56))();
  }
  v84 = v57[9];
  v85 = v55 + v84;
  v86 = &v56[v84];
  v87 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = v86[8];
  *(_QWORD *)v85 = v87;
  v88 = v57[10];
  v89 = (void *)(v55 + v88);
  v90 = &v56[v88];
  v18 = v163;
  if (v168(&v56[v88], 1, v69))
  {
    v91 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v166 + 16))(v89, v90, v69);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v89, 0, 1, v69);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v58 + 56))(v55, 0, 1, v57);
LABEL_45:
  *((_BYTE *)v170 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v92 = a3[10];
  v93 = (char *)v170 + v92;
  v94 = (char *)a2 + v92;
  v95 = type metadata accessor for URL(0);
  v96 = *(_QWORD *)(v95 - 8);
  v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48);
  v98 = v97(v93, 1, v95);
  v99 = v97(v94, 1, v95);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v93, v94, v95);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v95);
LABEL_50:
    v100 = sub_100012E18(&qword_1005CEFD0);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_51;
  }
  (*(void (**)(char *, char *, uint64_t))(v96 + 24))(v93, v94, v95);
LABEL_51:
  *((_BYTE *)v170 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v101 = a3[12];
  v102 = (_QWORD *)((char *)v170 + v101);
  v103 = (_QWORD *)((char *)a2 + v101);
  *v102 = *v103;
  v104 = v103[1];
  v105 = v102[1];
  v102[1] = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v105);
  v106 = a3[13];
  v107 = (char *)v170 + v106;
  v108 = (char *)a2 + v106;
  v109 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
  v110 = *((_QWORD *)v109 - 1);
  v111 = *(uint64_t (**)(char *, uint64_t, int *))(v110 + 48);
  LODWORD(v105) = v111(v107, 1, v109);
  v112 = v111(v108, 1, v109);
  if (!(_DWORD)v105)
  {
    if (v112)
    {
      sub_100145264((uint64_t)v107, _s16AttributedStringV16InlineAttachmentVMa);
      goto LABEL_57;
    }
    *(_QWORD *)v107 = *(_QWORD *)v108;
    v121 = *((_QWORD *)v108 + 1);
    v122 = *((_QWORD *)v107 + 1);
    *((_QWORD *)v107 + 1) = v121;
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRelease(v122);
    *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
    v123 = *((_QWORD *)v108 + 3);
    v124 = *((_QWORD *)v107 + 3);
    *((_QWORD *)v107 + 3) = v123;
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRelease(v124);
    v125 = v109[6];
    v126 = &v107[v125];
    v127 = &v108[v125];
    LODWORD(v124) = v169(&v107[v125], 1, v18);
    v128 = v169(v127, 1, v18);
    if ((_DWORD)v124)
    {
      if (!v128)
      {
        (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v126, v127, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v126, 0, 1, v18);
LABEL_70:
        v141 = v109[7];
        v142 = &v107[v141];
        v143 = &v108[v141];
        *(_QWORD *)v142 = *v143;
        v144 = v143[1];
        v145 = *((_QWORD *)v142 + 1);
        *((_QWORD *)v142 + 1) = v144;
        swift_bridgeObjectRetain(v144);
        swift_bridgeObjectRelease(v145);
        v146 = v109[8];
        v147 = &v107[v146];
        v148 = &v108[v146];
        *(_QWORD *)v147 = *v148;
        v149 = v148[1];
        v150 = *((_QWORD *)v147 + 1);
        *((_QWORD *)v147 + 1) = v149;
        swift_bridgeObjectRetain(v149);
        swift_bridgeObjectRelease(v150);
        return v170;
      }
    }
    else
    {
      if (!v128)
      {
        (*(void (**)(char *, char *, uint64_t))(v165 + 24))(v126, v127, v18);
        goto LABEL_70;
      }
      (*(void (**)(char *, uint64_t))(v165 + 8))(v126, v18);
    }
    v140 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    goto LABEL_70;
  }
  if (v112)
  {
LABEL_57:
    v120 = sub_100012E18(&qword_1005D5CF8);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    return v170;
  }
  *(_QWORD *)v107 = *(_QWORD *)v108;
  v113 = *((_QWORD *)v108 + 1);
  *((_QWORD *)v107 + 1) = v113;
  *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
  v114 = *((_QWORD *)v108 + 3);
  *((_QWORD *)v107 + 3) = v114;
  v115 = v109[6];
  v116 = &v107[v115];
  v117 = &v108[v115];
  swift_bridgeObjectRetain(v113);
  v118 = swift_bridgeObjectRetain(v114);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v169)(v117, 1, v18, v118))
  {
    v119 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v116, v117, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v116, 0, 1, v18);
  }
  v129 = v109[7];
  v130 = &v107[v129];
  v131 = &v108[v129];
  *(_QWORD *)v130 = *v131;
  v132 = v131[1];
  *((_QWORD *)v130 + 1) = v132;
  v133 = v109[8];
  v134 = &v107[v133];
  v135 = &v108[v133];
  *(_QWORD *)v134 = *v135;
  v136 = v135[1];
  *((_QWORD *)v134 + 1) = v136;
  v137 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v110 + 56);
  swift_bridgeObjectRetain(v132);
  v138 = swift_bridgeObjectRetain(v136);
  v137(v107, 0, 1, v109, v138);
  return v170;
}

uint64_t sub_10025F364(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return a1;
}

_QWORD *sub_10025F394(_QWORD *a1)
{
  _s16AttributedStringV4FontVwxx(a1);
  return a1;
}

_OWORD *sub_10025F3C0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  _WORD *v24;
  _WORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *__dst;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  unsigned int (*v67)(char *, uint64_t, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v65 = v10;
  if (v66(v8, 1, v9))
  {
    v11 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v67(v14, 1, v15))
  {
    v17 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
  v22 = *((_OWORD *)v21 + 3);
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  *((_OWORD *)v20 + 3) = v22;
  v23 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v23;
  v24 = (_WORD *)((char *)a1 + v19);
  v25 = (_WORD *)((char *)a2 + v19);
  v26 = (int *)_s16AttributedStringV14ParagraphStyleVMa(0);
  v27 = *((_QWORD *)v26 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_100012E18(&qword_1005D5D00);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v61 = v27;
    v62 = v16;
    *v24 = *v25;
    v29 = *((_QWORD *)v25 + 2);
    *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
    *((_QWORD *)v24 + 2) = v29;
    *((_BYTE *)v24 + 24) = *((_BYTE *)v25 + 24);
    v30 = v26[8];
    v63 = v15;
    __dst = (char *)v24 + v30;
    v31 = (char *)v25 + v30;
    v32 = _s16AttributedStringV13ChecklistItemVMa(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100012E18(&qword_1005D5D10);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(__dst, v31, v9);
      __dst[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
      (*(void (**)(void))(v33 + 56))();
    }
    v35 = v26[9];
    v36 = (char *)v24 + v35;
    v37 = (char *)v25 + v35;
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v26[10];
    v39 = (char *)v24 + v38;
    v40 = (char *)v25 + v38;
    v16 = v62;
    if (v66((char *)v25 + v38, 1, v9))
    {
      v41 = sub_100012E18((uint64_t *)&unk_1005D06A0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v39, v40, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v39, 0, 1, v9);
    }
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v61 + 56))(v24, 0, 1, v26);
    v15 = v63;
  }
  v42 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = sub_100012E18(&qword_1005CEFD0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_OWORD *)((char *)a1 + v48) = *(_OWORD *)((char *)a2 + v48);
  v49 = a3[13];
  v50 = (_OWORD *)((char *)a1 + v49);
  v51 = (_OWORD *)((char *)a2 + v49);
  v52 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
  v53 = *((_QWORD *)v52 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v53 + 48))(v51, 1, v52))
  {
    v54 = sub_100012E18(&qword_1005D5CF8);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v55 = v51[1];
    *v50 = *v51;
    v50[1] = v55;
    v56 = v52[6];
    v57 = (char *)v50 + v56;
    v58 = (char *)v51 + v56;
    if (v67((char *)v51 + v56, 1, v15))
    {
      v59 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    *(_OWORD *)((char *)v50 + v52[7]) = *(_OWORD *)((char *)v51 + v52[7]);
    *(_OWORD *)((char *)v50 + v52[8]) = *(_OWORD *)((char *)v51 + v52[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v53 + 56))(v50, 0, 1, v52);
  }
  return a1;
}

_OWORD *sub_10025F8B0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int *);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  size_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int *v89;
  uint64_t v90;
  uint64_t (*v91)(char *, uint64_t, int *);
  int v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  int v130;
  int v131;
  uint64_t v132;
  _BYTE *__src;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(void *, uint64_t, uint64_t);
  uint64_t (*v140)(char *, uint64_t, uint64_t);
  _OWORD *v141;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  v137 = v10;
  v138 = v9;
  v139 = (uint64_t (*)(void *, uint64_t, uint64_t))v11;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v140 = v20;
  v22 = v20(v17, 1, v18);
  v136 = v19;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    v23 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_13:
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)((char *)a1 + v24 + 8);
  if (v27 == 1)
  {
LABEL_16:
    v29 = *((_OWORD *)v26 + 3);
    *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
    *((_OWORD *)v25 + 3) = v29;
    *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
    v30 = *((_OWORD *)v26 + 1);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v30;
    goto LABEL_17;
  }
  v28 = *((_QWORD *)v26 + 1);
  if (v28 == 1)
  {
    sub_10025F394(v25);
    goto LABEL_16;
  }
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v28;
  swift_bridgeObjectRelease(v27);
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  v25[24] = v26[24];
  *(_DWORD *)(v25 + 25) = *(_DWORD *)(v26 + 25);
  *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
  v25[40] = v26[40];
  v50 = *((_QWORD *)v25 + 7);
  if (v50)
  {
    v51 = *((_QWORD *)v26 + 7);
    if (v51)
    {
      *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
      *((_QWORD *)v25 + 7) = v51;
      swift_bridgeObjectRelease(v50);
      v52 = *((_QWORD *)v25 + 8);
      *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
      swift_bridgeObjectRelease(v52);
      goto LABEL_17;
    }
    sub_10025F364((uint64_t)(v25 + 48));
  }
  *((_OWORD *)v25 + 3) = *((_OWORD *)v26 + 3);
  *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
LABEL_17:
  v31 = a3[8];
  v141 = a1;
  v32 = (uint64_t)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = (int *)_s16AttributedStringV14ParagraphStyleVMa(0);
  v35 = *((_QWORD *)v34 - 1);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36((uint64_t)v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      sub_100145264(v32, _s16AttributedStringV14ParagraphStyleVMa);
      goto LABEL_23;
    }
    v135 = v18;
    *(_WORD *)v32 = *(_WORD *)v33;
    v53 = *((_QWORD *)v33 + 2);
    *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
    *(_QWORD *)(v32 + 16) = v53;
    *(_BYTE *)(v32 + 24) = v33[24];
    v54 = v34[8];
    v55 = v32 + v54;
    v56 = &v33[v54];
    v57 = _s16AttributedStringV13ChecklistItemVMa(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
    v132 = v55;
    LODWORD(v55) = v59(v55, 1, v57);
    v60 = v59((uint64_t)v56, 1, v57);
    if ((_DWORD)v55)
    {
      if (v60)
      {
        v61 = *(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D5D10) - 8) + 64);
        v62 = (void *)v132;
LABEL_61:
        memcpy(v62, v56, v61);
        v18 = v135;
        v109 = v138;
LABEL_70:
        v124 = v34[9];
        v125 = v32 + v124;
        v126 = &v33[v124];
        *(_QWORD *)v125 = *(_QWORD *)v126;
        *(_BYTE *)(v125 + 8) = v126[8];
        v127 = v34[10];
        v128 = (void *)(v32 + v127);
        v129 = &v33[v127];
        v130 = v139(v128, 1, v109);
        v131 = v139(v129, 1, v109);
        if (v130)
        {
          if (!v131)
          {
            (*(void (**)(void *, char *, uint64_t))(v137 + 32))(v128, v129, v109);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v128, 0, 1, v109);
            goto LABEL_38;
          }
        }
        else
        {
          if (!v131)
          {
            (*(void (**)(void *, char *, uint64_t))(v137 + 40))(v128, v129, v109);
            goto LABEL_38;
          }
          (*(void (**)(void *, uint64_t))(v137 + 8))(v128, v109);
        }
        v47 = *(_QWORD *)(*(_QWORD *)(sub_100012E18((uint64_t *)&unk_1005D06A0) - 8) + 64);
        v48 = v128;
        v49 = v129;
LABEL_24:
        memcpy(v48, v49, v47);
        goto LABEL_38;
      }
      v109 = v138;
      (*(void (**)(uint64_t, char *, uint64_t))(v137 + 32))(v132, v56, v138);
      *(_BYTE *)(v132 + *(int *)(v57 + 20)) = v56[*(int *)(v57 + 20)];
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v132, 0, 1, v57);
    }
    else
    {
      if (v60)
      {
        sub_100145264(v132, _s16AttributedStringV13ChecklistItemVMa);
        v61 = *(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D5D10) - 8) + 64);
        v62 = (void *)v132;
        goto LABEL_61;
      }
      v109 = v138;
      (*(void (**)(uint64_t, char *, uint64_t))(v137 + 40))(v132, v56, v138);
      *(_BYTE *)(v132 + *(int *)(v57 + 20)) = v56[*(int *)(v57 + 20)];
    }
    v18 = v135;
    goto LABEL_70;
  }
  if (v38)
  {
LABEL_23:
    v47 = *(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D5D00) - 8) + 64);
    v48 = (void *)v32;
    v49 = v33;
    goto LABEL_24;
  }
  v134 = v18;
  *(_WORD *)v32 = *(_WORD *)v33;
  v39 = *((_QWORD *)v33 + 2);
  *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
  *(_QWORD *)(v32 + 16) = v39;
  *(_BYTE *)(v32 + 24) = v33[24];
  v40 = v34[8];
  v41 = (void *)(v32 + v40);
  v42 = &v33[v40];
  v43 = _s16AttributedStringV13ChecklistItemVMa(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    v45 = sub_100012E18(&qword_1005D5D10);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    v46 = v138;
  }
  else
  {
    v63 = v41;
    __src = v41;
    v46 = v138;
    (*(void (**)(void *, char *, uint64_t))(v137 + 32))(v63, v42, v138);
    __src[*(int *)(v43 + 20)] = v42[*(int *)(v43 + 20)];
    (*(void (**)(void))(v44 + 56))();
  }
  v64 = v34[9];
  v65 = v32 + v64;
  v66 = &v33[v64];
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_BYTE *)(v65 + 8) = v66[8];
  v67 = v34[10];
  v68 = (void *)(v32 + v67);
  v69 = &v33[v67];
  v18 = v134;
  if (v139(&v33[v67], 1, v46))
  {
    v70 = sub_100012E18((uint64_t *)&unk_1005D06A0);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v137 + 32))(v68, v69, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v68, 0, 1, v46);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
LABEL_38:
  v71 = a3[10];
  *((_BYTE *)v141 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v72 = (char *)v141 + v71;
  v73 = (char *)a2 + v71;
  v74 = type metadata accessor for URL(0);
  v75 = *(_QWORD *)(v74 - 8);
  v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
  v77 = v76(v72, 1, v74);
  v78 = v76(v73, 1, v74);
  if (v77)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v72, v73, v74);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v78)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v72, v74);
LABEL_43:
    v79 = sub_100012E18(&qword_1005CEFD0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 40))(v72, v73, v74);
LABEL_44:
  v80 = a3[12];
  *((_BYTE *)v141 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v81 = (_QWORD *)((char *)v141 + v80);
  v82 = (uint64_t *)((char *)a2 + v80);
  v84 = *v82;
  v83 = v82[1];
  v85 = v81[1];
  *v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease(v85);
  v86 = a3[13];
  v87 = (char *)v141 + v86;
  v88 = (_QWORD *)((char *)a2 + v86);
  v89 = (int *)_s16AttributedStringV16InlineAttachmentVMa(0);
  v90 = *((_QWORD *)v89 - 1);
  v91 = *(uint64_t (**)(char *, uint64_t, int *))(v90 + 48);
  v92 = v91(v87, 1, v89);
  v93 = v91((char *)v88, 1, v89);
  if (!v92)
  {
    if (v93)
    {
      sub_100145264((uint64_t)v87, _s16AttributedStringV16InlineAttachmentVMa);
      goto LABEL_50;
    }
    v100 = v88[1];
    v101 = *((_QWORD *)v87 + 1);
    *(_QWORD *)v87 = *v88;
    *((_QWORD *)v87 + 1) = v100;
    swift_bridgeObjectRelease(v101);
    v102 = v88[3];
    v103 = *((_QWORD *)v87 + 3);
    *((_QWORD *)v87 + 2) = v88[2];
    *((_QWORD *)v87 + 3) = v102;
    swift_bridgeObjectRelease(v103);
    v104 = v89[6];
    v105 = &v87[v104];
    v106 = (char *)v88 + v104;
    v107 = v140(&v87[v104], 1, v18);
    v108 = v140(v106, 1, v18);
    if (v107)
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v105, v106, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v105, 0, 1, v18);
LABEL_65:
        v111 = v89[7];
        v112 = &v87[v111];
        v113 = (_QWORD *)((char *)v88 + v111);
        v115 = *v113;
        v114 = v113[1];
        v116 = *((_QWORD *)v112 + 1);
        *(_QWORD *)v112 = v115;
        *((_QWORD *)v112 + 1) = v114;
        swift_bridgeObjectRelease(v116);
        v117 = v89[8];
        v118 = &v87[v117];
        v119 = (_QWORD *)((char *)v88 + v117);
        v121 = *v119;
        v120 = v119[1];
        v122 = *((_QWORD *)v118 + 1);
        *(_QWORD *)v118 = v121;
        *((_QWORD *)v118 + 1) = v120;
        swift_bridgeObjectRelease(v122);
        return v141;
      }
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v136 + 40))(v105, v106, v18);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v136 + 8))(v105, v18);
    }
    v110 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    goto LABEL_65;
  }
  if (v93)
  {
LABEL_50:
    v99 = sub_100012E18(&qword_1005D5CF8);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    return v141;
  }
  v94 = *((_OWORD *)v88 + 1);
  *(_OWORD *)v87 = *(_OWORD *)v88;
  *((_OWORD *)v87 + 1) = v94;
  v95 = v89[6];
  v96 = &v87[v95];
  v97 = (char *)v88 + v95;
  if (v140((char *)v88 + v95, 1, v18))
  {
    v98 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v96, v97, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v96, 0, 1, v18);
  }
  *(_OWORD *)&v87[v89[7]] = *(_OWORD *)((char *)v88 + v89[7]);
  *(_OWORD *)&v87[v89[8]] = *(_OWORD *)((char *)v88 + v89[8]);
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v90 + 56))(v87, 0, 1, v89);
  return v141;
}

uint64_t sub_1002602D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002602E0);
}

uint64_t sub_1002602E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_100012E18(&qword_1005D5D00);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = sub_100012E18(&qword_1005CEFD0);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = sub_100012E18(&qword_1005D5CF8);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(_QWORD *)(a1 + a3[12] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t sub_100260414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100260420);
}

uint64_t sub_100260420(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      v13 = sub_100012E18(&qword_1005D5D00);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[8];
      }
      else
      {
        result = sub_100012E18(&qword_1005CEFD0);
        v9 = *(_QWORD *)(result - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = result;
          v11 = a4[10];
        }
        else
        {
          if (a3 == 2147483646)
          {
            *(_QWORD *)(a1 + a4[12] + 8) = a2;
            return result;
          }
          v10 = sub_100012E18(&qword_1005D5CF8);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[13];
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_100260544(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[10];

  v12[0] = &unk_10045DDA8;
  sub_100018C7C(319, (unint64_t *)&unk_1005D5E30, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v12[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100018C7C(319, (unint64_t *)&qword_1005DA840, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v4 - 8) + 64;
      v12[3] = &unk_10045DDC0;
      sub_100018C7C(319, &qword_1005D5F80, _s16AttributedStringV14ParagraphStyleVMa);
      if (v7 <= 0x3F)
      {
        v12[4] = *(_QWORD *)(v6 - 8) + 64;
        v12[5] = &unk_10045DDD8;
        sub_100018C7C(319, (unint64_t *)&qword_1005D2CD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
        if (v9 <= 0x3F)
        {
          v12[6] = *(_QWORD *)(v8 - 8) + 64;
          v12[7] = &unk_10045DDD8;
          v12[8] = &unk_10045DD68;
          sub_100018C7C(319, (unint64_t *)&unk_1005D5F88, _s16AttributedStringV16InlineAttachmentVMa);
          if (v11 <= 0x3F)
          {
            v12[9] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 10, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t _s16AttributedStringV4FontVwxx(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  result = a1[7];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[8]);
  }
  return result;
}

uint64_t _s16AttributedStringV4FontVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t _s16AttributedStringV4FontVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v7 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = (_OWORD *)(a1 + 48);
  v9 = (_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a2 + 56);
  if (v10)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v12 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v10);
      v13 = *(_QWORD *)(a2 + 64);
      v14 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_10025F364(a1 + 48);
      v17 = *(_QWORD *)(a2 + 64);
      *v8 = *v9;
      *(_QWORD *)(a1 + 64) = v17;
    }
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v15;
    v16 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v16;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
  }
  else
  {
    v18 = *v9;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *v8 = v18;
  }
  return a1;
}

__n128 _s16AttributedStringV4FontVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s16AttributedStringV4FontVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  if (!v6)
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 56);
  if (!v7)
  {
    sub_10025F364(a1 + 48);
LABEL_5:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    return a1;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v6);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s16AttributedStringV4FontVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s16AttributedStringV4FontVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *_s16AttributedStringV4FontVMa()
{
  return &_s16AttributedStringV4FontVN;
}

uint64_t _s16AttributedStringV5ColorVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s16AttributedStringV5ColorVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *_s16AttributedStringV5ColorVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *_s16AttributedStringV5ColorVwta_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s16AttributedStringV5ColorVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100260BB0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s16AttributedStringVMa()
{
  return &_s16AttributedStringVN;
}

uint64_t sub_100260C00(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7475626972747461, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100260CEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v3 = sub_100012E18(&qword_1005D6130);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10012D19C(a1, v7);
  v9 = sub_100261EC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s16AttributedStringV10CodingKeysON, &_s16AttributedStringV10CodingKeysON, v9, v7, v8);
  if (v1)
  {
    sub_1000153C0(a1);
  }
  else
  {
    v19 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    v12 = v11;
    v13 = sub_100012E18(&qword_1005D6140);
    v17 = 1;
    v14 = sub_100261F0C(&qword_1005D6148, &qword_1005D6150, (uint64_t)&unk_10045DEDC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v18;
    swift_bridgeObjectRetain(v18);
    sub_1000153C0(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

uint64_t sub_100260ED4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6563617073 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563617073, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E656E6F706D6F63 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease(0xEA00000000007374);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656E6F706D6F63, 0xEA00000000007374, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100260FC8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v3 = sub_100012E18(&qword_1005D5FD8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10012D19C(a1, v7);
  v9 = sub_1002611A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s16AttributedStringV5ColorV10CodingKeysON, &_s16AttributedStringV5ColorV10CodingKeysON, v9, v7, v8);
  if (v1)
  {
    sub_1000153C0(a1);
  }
  else
  {
    v19 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    v12 = v11;
    v13 = sub_100012E18(&qword_1005D5FE8);
    v17 = 1;
    v14 = sub_1002611EC(&qword_1005D5FF0, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v18;
    swift_bridgeObjectRetain(v18);
    sub_1000153C0(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

unint64_t sub_1002611A8()
{
  unint64_t result;

  result = qword_1005D5FE0;
  if (!qword_1005D5FE0)
  {
    result = swift_getWitnessTable(&unk_10045EBA8, &_s16AttributedStringV5ColorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D5FE0);
  }
  return result;
}

uint64_t sub_1002611EC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001537C(&qword_1005D5FE8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10026124C()
{
  unint64_t result;

  result = qword_1005D6010;
  if (!qword_1005D6010)
  {
    result = swift_getWitnessTable(&unk_10045EB58, &_s16AttributedStringV13ChecklistItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6010);
  }
  return result;
}

unint64_t sub_100261290()
{
  unint64_t result;

  result = qword_1005D6038;
  if (!qword_1005D6038)
  {
    result = swift_getWitnessTable(&unk_10045EB08, &_s16AttributedStringV14ParagraphStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6038);
  }
  return result;
}

unint64_t sub_1002612D4()
{
  unint64_t result;

  result = qword_1005D6040;
  if (!qword_1005D6040)
  {
    result = swift_getWitnessTable(&unk_10045EAE0, &_s16AttributedStringV19ParagraphStyleNamesON);
    atomic_store(result, (unint64_t *)&qword_1005D6040);
  }
  return result;
}

unint64_t sub_100261318()
{
  unint64_t result;

  result = qword_1005D6048;
  if (!qword_1005D6048)
  {
    result = swift_getWitnessTable(&unk_10045EAB8, &_s16AttributedStringV10AlignmentsON);
    atomic_store(result, (unint64_t *)&qword_1005D6048);
  }
  return result;
}

unint64_t sub_10026135C()
{
  unint64_t result;

  result = qword_1005D6060;
  if (!qword_1005D6060)
  {
    result = swift_getWitnessTable(&unk_10045EA90, &_s16AttributedStringV19ParagraphStyleNamesON);
    atomic_store(result, (unint64_t *)&qword_1005D6060);
  }
  return result;
}

unint64_t sub_1002613A0()
{
  unint64_t result;

  result = qword_1005D6068;
  if (!qword_1005D6068)
  {
    result = swift_getWitnessTable(&unk_10045EA68, &_s16AttributedStringV10AlignmentsON);
    atomic_store(result, (unint64_t *)&qword_1005D6068);
  }
  return result;
}

unint64_t sub_1002613E4()
{
  unint64_t result;

  result = qword_1005D6080;
  if (!qword_1005D6080)
  {
    result = swift_getWitnessTable(&unk_10045EA18, &_s16AttributedStringV16InlineAttachmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6080);
  }
  return result;
}

unint64_t sub_100261428()
{
  unint64_t result;

  result = qword_1005D6098;
  if (!qword_1005D6098)
  {
    result = swift_getWitnessTable(&unk_10045E9C8, &_s16AttributedStringV9AttributeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6098);
  }
  return result;
}

uint64_t sub_10026146C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    return sub_1001F41A0(a7, a8, a9);
  }
  return result;
}

unint64_t sub_1002614B8()
{
  unint64_t result;

  result = qword_1005D60A0;
  if (!qword_1005D60A0)
  {
    result = swift_getWitnessTable(&unk_10045E9A0, &_s16AttributedStringV14AttributeRangeVN);
    atomic_store(result, (unint64_t *)&qword_1005D60A0);
  }
  return result;
}

unint64_t sub_1002614FC()
{
  unint64_t result;

  result = qword_1005D60A8;
  if (!qword_1005D60A8)
  {
    result = swift_getWitnessTable(&unk_10045DE8C, &_s16AttributedStringV4FontVN);
    atomic_store(result, (unint64_t *)&qword_1005D60A8);
  }
  return result;
}

unint64_t sub_100261540()
{
  unint64_t result;

  result = qword_1005D60B8;
  if (!qword_1005D60B8)
  {
    result = swift_getWitnessTable(&unk_10045E978, &_s16AttributedStringV13EmphasisStyleON);
    atomic_store(result, (unint64_t *)&qword_1005D60B8);
  }
  return result;
}

unint64_t sub_100261584()
{
  unint64_t result;

  result = qword_1005D60C0;
  if (!qword_1005D60C0)
  {
    result = swift_getWitnessTable(&unk_10045E950, &_s16AttributedStringV17WritingDirectionsON);
    atomic_store(result, (unint64_t *)&qword_1005D60C0);
  }
  return result;
}

unint64_t sub_1002615C8()
{
  unint64_t result;

  result = qword_1005D60D8;
  if (!qword_1005D60D8)
  {
    result = swift_getWitnessTable(&unk_10045E928, &_s16AttributedStringV14AttributeRangeVN);
    atomic_store(result, (unint64_t *)&qword_1005D60D8);
  }
  return result;
}

unint64_t sub_10026160C()
{
  unint64_t result;

  result = qword_1005D60E0;
  if (!qword_1005D60E0)
  {
    result = swift_getWitnessTable(&unk_10045DE64, &_s16AttributedStringV4FontVN);
    atomic_store(result, (unint64_t *)&qword_1005D60E0);
  }
  return result;
}

unint64_t sub_100261650()
{
  unint64_t result;

  result = qword_1005D60F0;
  if (!qword_1005D60F0)
  {
    result = swift_getWitnessTable(&unk_10045E900, &_s16AttributedStringV13EmphasisStyleON);
    atomic_store(result, (unint64_t *)&qword_1005D60F0);
  }
  return result;
}

unint64_t sub_100261694()
{
  unint64_t result;

  result = qword_1005D60F8;
  if (!qword_1005D60F8)
  {
    result = swift_getWitnessTable(&unk_10045E8D8, &_s16AttributedStringV17WritingDirectionsON);
    atomic_store(result, (unint64_t *)&qword_1005D60F8);
  }
  return result;
}

uint64_t sub_1002616D8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7A6953746E696F70 && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7A6953746E696F70, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x646C6F427369 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646C6F427369, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x63696C6174497369 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C6174497369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6C7265646E557369 && a2 == 0xEB00000000656E69)
  {
    v10 = 0xEB00000000656E69;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C7265646E557369, 0xEB00000000656E69, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x656B697274537369 && a2 == 0xEF6867756F726874)
  {
    v11 = 0xEF6867756F726874;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656B697274537369, 0xEF6867756F726874, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x7263737265707573 && a2 == 0xEB00000000747069)
  {
    v12 = 0xEB00000000747069;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7263737265707573, 0xEB00000000747069, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F63, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_100261A60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v5 = sub_100012E18(&qword_1005D6108);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_100261DCC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s16AttributedStringV4FontV10CodingKeysON, &_s16AttributedStringV4FontV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_1000153C0(a1);
    swift_bridgeObjectRelease(0);
    return sub_1001F41A0(0, 0, 0);
  }
  else
  {
    LOBYTE(v32) = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    v14 = v13;
    LOBYTE(v32) = 1;
    v15 = swift_bridgeObjectRetain(v13);
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5, v15);
    v35 = v17;
    v31 = v16;
    LOBYTE(v32) = 2;
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    LOBYTE(v32) = 3;
    v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    LOBYTE(v32) = 4;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    LOBYTE(v32) = 5;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    LOBYTE(v32) = 6;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    HIDWORD(v25) = v19;
    v26 = v18;
    v36 = 7;
    v20 = sub_100261E10();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s16AttributedStringV5ColorVN, &v36, v5, &_s16AttributedStringV5ColorVN, v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v21 = v32;
    v22 = v33;
    v23 = v34;
    sub_100261E54(v32, v33, v34);
    sub_1001F41A0(0, 0, 0);
    swift_bridgeObjectRetain(v14);
    sub_100261E54(v21, v22, v23);
    sub_1001F41A0(v21, v22, v23);
    swift_bridgeObjectRelease(v14);
    sub_1000153C0(a1);
    swift_bridgeObjectRelease(v14);
    result = sub_1001F41A0(v21, v22, v23);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v31;
    *(_BYTE *)(a2 + 24) = v35 & 1;
    *(_BYTE *)(a2 + 25) = v30;
    *(_BYTE *)(a2 + 26) = v29;
    *(_BYTE *)(a2 + 27) = v28;
    *(_BYTE *)(a2 + 28) = v27;
    *(_QWORD *)(a2 + 32) = v26;
    *(_BYTE *)(a2 + 40) = BYTE4(v25) & 1;
    *(_QWORD *)(a2 + 48) = v21;
    *(_QWORD *)(a2 + 56) = v22;
    *(_QWORD *)(a2 + 64) = v23;
  }
  return result;
}

unint64_t sub_100261DCC()
{
  unint64_t result;

  result = qword_1005D6110;
  if (!qword_1005D6110)
  {
    result = swift_getWitnessTable(&unk_10045E888, &_s16AttributedStringV4FontV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6110);
  }
  return result;
}

unint64_t sub_100261E10()
{
  unint64_t result;

  result = qword_1005D6118;
  if (!qword_1005D6118)
  {
    result = swift_getWitnessTable(&unk_10045E01C, &_s16AttributedStringV5ColorVN);
    atomic_store(result, (unint64_t *)&qword_1005D6118);
  }
  return result;
}

uint64_t sub_100261E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

unint64_t sub_100261E84()
{
  unint64_t result;

  result = qword_1005D6128;
  if (!qword_1005D6128)
  {
    result = swift_getWitnessTable(&unk_10045DFF4, &_s16AttributedStringV5ColorVN);
    atomic_store(result, (unint64_t *)&qword_1005D6128);
  }
  return result;
}

unint64_t sub_100261EC8()
{
  unint64_t result;

  result = qword_1005D6138;
  if (!qword_1005D6138)
  {
    result = swift_getWitnessTable(&unk_10045E838, &_s16AttributedStringV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6138);
  }
  return result;
}

uint64_t sub_100261F0C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001537C(&qword_1005D6140);
    sub_100019C6C(a2, _s16AttributedStringV9AttributeVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *_s16AttributedStringV10CodingKeysOMa()
{
  return &_s16AttributedStringV10CodingKeysON;
}

uint64_t _s16AttributedStringV4FontV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100261FF0 + 4 * byte_10045DC94[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100262024 + 4 * byte_10045DC8F[v4]))();
}

uint64_t sub_100262024(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026202C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100262034);
  return result;
}

uint64_t sub_100262040(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100262048);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10026204C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100262054(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s16AttributedStringV4FontV10CodingKeysOMa()
{
  return &_s16AttributedStringV4FontV10CodingKeysON;
}

ValueMetadata *_s16AttributedStringV9AttributeV10CodingKeysOMa()
{
  return &_s16AttributedStringV9AttributeV10CodingKeysON;
}

ValueMetadata *_s16AttributedStringV16InlineAttachmentV10CodingKeysOMa()
{
  return &_s16AttributedStringV16InlineAttachmentV10CodingKeysON;
}

uint64_t _s16AttributedStringV14ParagraphStyleV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1002620EC + 4 * byte_10045DC9E[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100262120 + 4 * byte_10045DC99[v4]))();
}

uint64_t sub_100262120(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100262128(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100262130);
  return result;
}

uint64_t sub_10026213C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100262144);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100262148(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100262150(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s16AttributedStringV14ParagraphStyleV10CodingKeysOMa()
{
  return &_s16AttributedStringV14ParagraphStyleV10CodingKeysON;
}

ValueMetadata *_s16AttributedStringV13ChecklistItemV10CodingKeysOMa()
{
  return &_s16AttributedStringV13ChecklistItemV10CodingKeysON;
}

ValueMetadata *_s16AttributedStringV5ColorV10CodingKeysOMa()
{
  return &_s16AttributedStringV5ColorV10CodingKeysON;
}

ValueMetadata *_s16AttributedStringV10AlignmentsOMa()
{
  return &_s16AttributedStringV10AlignmentsON;
}

uint64_t _s16AttributedStringV19ParagraphStyleNamesOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1002621E8 + 4 * byte_10045DCA8[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10026221C + 4 * byte_10045DCA3[v4]))();
}

uint64_t sub_10026221C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100262224(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026222CLL);
  return result;
}

uint64_t sub_100262238(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100262240);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100262244(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026224C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s16AttributedStringV19ParagraphStyleNamesOMa()
{
  return &_s16AttributedStringV19ParagraphStyleNamesON;
}

ValueMetadata *_s16AttributedStringV17WritingDirectionsOMa()
{
  return &_s16AttributedStringV17WritingDirectionsON;
}

uint64_t _s16AttributedStringV10AlignmentsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1002622C4 + 4 * byte_10045DCB2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1002622F8 + 4 * byte_10045DCAD[v4]))();
}

uint64_t sub_1002622F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100262300(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100262308);
  return result;
}

uint64_t sub_100262314(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026231CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100262320(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100262328(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s16AttributedStringV13EmphasisStyleOMa()
{
  return &_s16AttributedStringV13EmphasisStyleON;
}

ValueMetadata *_s16AttributedStringV14AttributeRangeVMa()
{
  return &_s16AttributedStringV14AttributeRangeVN;
}

unint64_t sub_100262358()
{
  unint64_t result;

  result = qword_1005D6170;
  if (!qword_1005D6170)
  {
    result = swift_getWitnessTable(&unk_10045E128, &_s16AttributedStringV13EmphasisStyleON);
    atomic_store(result, (unint64_t *)&qword_1005D6170);
  }
  return result;
}

unint64_t sub_1002623A0()
{
  unint64_t result;

  result = qword_1005D6178;
  if (!qword_1005D6178)
  {
    result = swift_getWitnessTable(&unk_10045E1C8, &_s16AttributedStringV17WritingDirectionsON);
    atomic_store(result, (unint64_t *)&qword_1005D6178);
  }
  return result;
}

unint64_t sub_1002623E8()
{
  unint64_t result;

  result = qword_1005D6180;
  if (!qword_1005D6180)
  {
    result = swift_getWitnessTable(&unk_10045E268, &_s16AttributedStringV19ParagraphStyleNamesON);
    atomic_store(result, (unint64_t *)&qword_1005D6180);
  }
  return result;
}

unint64_t sub_100262430()
{
  unint64_t result;

  result = qword_1005D6188;
  if (!qword_1005D6188)
  {
    result = swift_getWitnessTable(&unk_10045E308, &_s16AttributedStringV10AlignmentsON);
    atomic_store(result, (unint64_t *)&qword_1005D6188);
  }
  return result;
}

unint64_t sub_100262478()
{
  unint64_t result;

  result = qword_1005D6190;
  if (!qword_1005D6190)
  {
    result = swift_getWitnessTable(&unk_10045E3C0, &_s16AttributedStringV5ColorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6190);
  }
  return result;
}

unint64_t sub_1002624C0()
{
  unint64_t result;

  result = qword_1005D6198;
  if (!qword_1005D6198)
  {
    result = swift_getWitnessTable(&unk_10045E478, &_s16AttributedStringV13ChecklistItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6198);
  }
  return result;
}

unint64_t sub_100262508()
{
  unint64_t result;

  result = qword_1005D61A0;
  if (!qword_1005D61A0)
  {
    result = swift_getWitnessTable(&unk_10045E530, &_s16AttributedStringV14ParagraphStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61A0);
  }
  return result;
}

unint64_t sub_100262550()
{
  unint64_t result;

  result = qword_1005D61A8;
  if (!qword_1005D61A8)
  {
    result = swift_getWitnessTable(&unk_10045E5E8, &_s16AttributedStringV16InlineAttachmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61A8);
  }
  return result;
}

unint64_t sub_100262598()
{
  unint64_t result;

  result = qword_1005D61B0;
  if (!qword_1005D61B0)
  {
    result = swift_getWitnessTable(&unk_10045E6A0, &_s16AttributedStringV9AttributeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61B0);
  }
  return result;
}

unint64_t sub_1002625E0()
{
  unint64_t result;

  result = qword_1005D61B8;
  if (!qword_1005D61B8)
  {
    result = swift_getWitnessTable(&unk_10045E758, &_s16AttributedStringV4FontV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61B8);
  }
  return result;
}

unint64_t sub_100262628()
{
  unint64_t result;

  result = qword_1005D61C0;
  if (!qword_1005D61C0)
  {
    result = swift_getWitnessTable(&unk_10045E810, &_s16AttributedStringV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61C0);
  }
  return result;
}

unint64_t sub_100262670()
{
  unint64_t result;

  result = qword_1005D61C8;
  if (!qword_1005D61C8)
  {
    result = swift_getWitnessTable(&unk_10045E780, &_s16AttributedStringV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61C8);
  }
  return result;
}

unint64_t sub_1002626B8()
{
  unint64_t result;

  result = qword_1005D61D0;
  if (!qword_1005D61D0)
  {
    result = swift_getWitnessTable(&unk_10045E7A8, &_s16AttributedStringV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61D0);
  }
  return result;
}

unint64_t sub_100262700()
{
  unint64_t result;

  result = qword_1005D61D8;
  if (!qword_1005D61D8)
  {
    result = swift_getWitnessTable(&unk_10045E6C8, &_s16AttributedStringV4FontV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61D8);
  }
  return result;
}

unint64_t sub_100262748()
{
  unint64_t result;

  result = qword_1005D61E0;
  if (!qword_1005D61E0)
  {
    result = swift_getWitnessTable(&unk_10045E6F0, &_s16AttributedStringV4FontV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61E0);
  }
  return result;
}

unint64_t sub_100262790()
{
  unint64_t result;

  result = qword_1005D61E8;
  if (!qword_1005D61E8)
  {
    result = swift_getWitnessTable(&unk_10045E610, &_s16AttributedStringV9AttributeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61E8);
  }
  return result;
}

unint64_t sub_1002627D8()
{
  unint64_t result;

  result = qword_1005D61F0;
  if (!qword_1005D61F0)
  {
    result = swift_getWitnessTable(&unk_10045E638, &_s16AttributedStringV9AttributeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61F0);
  }
  return result;
}

unint64_t sub_100262820()
{
  unint64_t result;

  result = qword_1005D61F8;
  if (!qword_1005D61F8)
  {
    result = swift_getWitnessTable(&unk_10045E558, &_s16AttributedStringV16InlineAttachmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D61F8);
  }
  return result;
}

unint64_t sub_100262868()
{
  unint64_t result;

  result = qword_1005D6200;
  if (!qword_1005D6200)
  {
    result = swift_getWitnessTable(&unk_10045E580, &_s16AttributedStringV16InlineAttachmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6200);
  }
  return result;
}

unint64_t sub_1002628B0()
{
  unint64_t result;

  result = qword_1005D6208;
  if (!qword_1005D6208)
  {
    result = swift_getWitnessTable(&unk_10045E4A0, &_s16AttributedStringV14ParagraphStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6208);
  }
  return result;
}

unint64_t sub_1002628F8()
{
  unint64_t result;

  result = qword_1005D6210;
  if (!qword_1005D6210)
  {
    result = swift_getWitnessTable(&unk_10045E4C8, &_s16AttributedStringV14ParagraphStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6210);
  }
  return result;
}

unint64_t sub_100262940()
{
  unint64_t result;

  result = qword_1005D6218;
  if (!qword_1005D6218)
  {
    result = swift_getWitnessTable(&unk_10045E3E8, &_s16AttributedStringV13ChecklistItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6218);
  }
  return result;
}

unint64_t sub_100262988()
{
  unint64_t result;

  result = qword_1005D6220;
  if (!qword_1005D6220)
  {
    result = swift_getWitnessTable(&unk_10045E410, &_s16AttributedStringV13ChecklistItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6220);
  }
  return result;
}

unint64_t sub_1002629D0()
{
  unint64_t result;

  result = qword_1005D6228;
  if (!qword_1005D6228)
  {
    result = swift_getWitnessTable(&unk_10045E330, &_s16AttributedStringV5ColorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6228);
  }
  return result;
}

unint64_t sub_100262A18()
{
  unint64_t result;

  result = qword_1005D6230;
  if (!qword_1005D6230)
  {
    result = swift_getWitnessTable(&unk_10045E358, &_s16AttributedStringV5ColorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6230);
  }
  return result;
}

unint64_t sub_100262A5C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100556A48, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t sub_100262AA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656E6F447369 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F447369, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100262B98(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074)
  {
    v7 = 0xE900000000000074;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656D6E67696C61, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746E65646E69 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65646E69, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x80000001004848A0;
    if (a2 == 0x80000001004848A0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001004848A0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x73696C6B63656863 && a2 == 0xED00006D65744974)
  {
    v10 = 0xED00006D65744974;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73696C6B63656863, 0xED00006D65744974, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6F75516B636F6C62 && a2 == 0xEF6C6576654C6574)
  {
    v11 = 0xEF6C6576654C6574;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F75516B636F6C62, 0xEF6C6576654C6574, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(1684632949, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_100262EA0()
{
  unint64_t result;

  result = qword_1005D6238;
  if (!qword_1005D6238)
  {
    result = swift_getWitnessTable(&unk_10045E1F0, &_s16AttributedStringV19ParagraphStyleNamesON);
    atomic_store(result, (unint64_t *)&qword_1005D6238);
  }
  return result;
}

unint64_t sub_100262EE4()
{
  unint64_t result;

  result = qword_1005D6240;
  if (!qword_1005D6240)
  {
    result = swift_getWitnessTable(&unk_10045E290, &_s16AttributedStringV10AlignmentsON);
    atomic_store(result, (unint64_t *)&qword_1005D6240);
  }
  return result;
}

unint64_t sub_100262F28(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 5)
    return 5;
  else
    return v5;
}

uint64_t sub_100262F6C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000018 && a2 == 0x80000001004828D0)
  {
    v4 = 0x80000001004828D0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001004828D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074)
  {
    v7 = 0xE900000000000074;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x80000001004848C0;
    if (a2 == 0x80000001004848C0)
      goto LABEL_23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001004848C0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if (a1 == 0x74786554746C61 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74786554746C61, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100263198(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7441737472617473 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7441737472617473, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6874676E656CLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100263280(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  v3 = sub_100012E18(&qword_1005D6248);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10012D19C(a1, v7);
  v9 = sub_1002637E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s16AttributedStringV14AttributeRangeV10CodingKeysON, &_s16AttributedStringV14AttributeRangeV10CodingKeysON, v9, v7, v8);
  if (!v1)
  {
    v13 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    v12 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_1000153C0(a1);
  return v7;
}

uint64_t sub_1002633D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6172, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000001004848E0;
    if (a2 == 0x80000001004848E0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001004848E0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v8 = 0xE900000000000070;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 1953394534 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953394534, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x7061726761726170 && a2 == 0xEE00656C79745368)
  {
    v10 = 0xEE00656C79745368;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7061726761726170, 0xEE00656C79745368, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x7369736168706D65 && a2 == 0xED0000656C797453)
  {
    v11 = 0xED0000656C797453;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7369736168706D65, 0xED0000656C797453, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 1802398060 && a2 == 0xE400000000000000)
  {
    v12 = 0xE400000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1802398060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000010)
  {
    v13 = 0x8000000100484900;
    if (a2 == 0x8000000100484900)
      goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100484900, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100484920)
  {
    v14 = 0x8000000100484920;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100484920, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100484940)
  {
    swift_bridgeObjectRelease(0x8000000100484940);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100484940, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

unint64_t sub_1002637E4()
{
  unint64_t result;

  result = qword_1005D6250;
  if (!qword_1005D6250)
  {
    result = swift_getWitnessTable(&unk_10045ECB0, &_s16AttributedStringV14AttributeRangeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6250);
  }
  return result;
}

unint64_t sub_100263828()
{
  unint64_t result;

  result = qword_1005D6258;
  if (!qword_1005D6258)
  {
    result = swift_getWitnessTable(&unk_10045E0B0, &_s16AttributedStringV13EmphasisStyleON);
    atomic_store(result, (unint64_t *)&qword_1005D6258);
  }
  return result;
}

unint64_t sub_10026386C()
{
  unint64_t result;

  result = qword_1005D6260;
  if (!qword_1005D6260)
  {
    result = swift_getWitnessTable(&unk_10045E150, &_s16AttributedStringV17WritingDirectionsON);
    atomic_store(result, (unint64_t *)&qword_1005D6260);
  }
  return result;
}

uint64_t _s16AttributedStringV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002638FC + 4 * byte_10045DCBC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100263930 + 4 * byte_10045DCB7[v4]))();
}

uint64_t sub_100263930(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100263938(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100263940);
  return result;
}

uint64_t sub_10026394C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100263954);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100263958(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100263960(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s16AttributedStringV14AttributeRangeV10CodingKeysOMa()
{
  return &_s16AttributedStringV14AttributeRangeV10CodingKeysON;
}

unint64_t sub_100263980()
{
  unint64_t result;

  result = qword_1005D6270;
  if (!qword_1005D6270)
  {
    result = swift_getWitnessTable(&unk_10045EC88, &_s16AttributedStringV14AttributeRangeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6270);
  }
  return result;
}

unint64_t sub_1002639C8()
{
  unint64_t result;

  result = qword_1005D6278;
  if (!qword_1005D6278)
  {
    result = swift_getWitnessTable(&unk_10045EBF8, &_s16AttributedStringV14AttributeRangeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6278);
  }
  return result;
}

unint64_t sub_100263A10()
{
  unint64_t result;

  result = qword_1005D6280;
  if (!qword_1005D6280)
  {
    result = swift_getWitnessTable(&unk_10045EC20, &_s16AttributedStringV14AttributeRangeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D6280);
  }
  return result;
}

uint64_t sub_100263A64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100263B28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 32));
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2);
    return 1;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v14 = 5;
  while (1)
  {
    v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1))
      break;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 8 * v14));
    v7 = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0);
    swift_bridgeObjectRelease(v7);
    result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
      goto LABEL_7;
    ++v14;
    if (v15 == v2)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100263C7C(uint64_t a1, uint64_t a2)
{
  return sub_100263D08(a1, a2, (uint64_t)&qword_1005D2500, NSManagedObjectID_ptr);
}

BOOL sub_100263C94(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100263CF4(uint64_t a1, uint64_t a2)
{
  return sub_100263D08(a1, a2, (uint64_t)&qword_1005D3D50, UIViewController_ptr);
}

uint64_t sub_100263D08(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v8 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v9 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v10 = v9;
      a4 = (_QWORD *)sub_1000163BC(0, (unint64_t *)a3, a4);
      a3 = static NSObject.== infix(_:_:)(v10);

      if ((a3 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v7 == 1)
        goto LABEL_18;
      if (v8)
        break;
      v8 = 5;
      while (1)
      {
        v17 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
          break;
        a3 = (uint64_t)*(id *)(a2 + 8 * v8);
        v18 = static NSObject.== infix(_:_:)(a3);

        if ((v18 & 1) != 0)
          goto LABEL_6;
        ++v8;
        if (v17 == v7)
          goto LABEL_18;
      }
      __break(1u);
    }
    a3 = 1;
    while (1)
    {
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, a2);
      v13 = a3 + 1;
      if (__OFADD__(a3, 1))
        break;
      v14 = v12;
      v15 = static NSObject.== infix(_:_:)(v12);
      swift_unknownObjectRelease(v14, v16);
      if ((v15 & 1) != 0)
        goto LABEL_6;
      ++a3;
      if (v13 == v7)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v19 = a2;
    else
      v19 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100263E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  v5 = *(_QWORD *)(a5 + 16);
  if (v5)
  {
    v10 = (uint64_t *)(a5 + 56);
    do
    {
      v11 = *(v10 - 3);
      v12 = *(v10 - 2);
      v14 = *(v10 - 1);
      v13 = *v10;
      v15 = v11 == a1 && v12 == a2;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0) & 1) != 0)
      {
        if (v13)
        {
          if (a4)
          {
            v16 = v14 == a3 && v13 == a4;
            if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, a3, a4, 0) & 1) != 0)
              return 1;
          }
        }
        else if (!a4)
        {
          return 1;
        }
      }
      v10 += 4;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t sub_100263F50(int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t isa;
  int64_t v37;
  uint64_t v38;
  _QWORD *v39;
  BOOL v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  int v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, void **);
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  id v79;
  void *v80;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char *v95;
  id v96;
  void *v97;
  void **v98;
  char *v99;
  void (*v100)(unint64_t, char *, uint64_t);
  char *v101;
  int64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  int64_t v106;
  Class v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  NSDate v111;
  id v112;
  void *v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t);
  int64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  char *v122;
  Class v123;
  id v124;
  void *v125;
  void (*v126)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v127;
  uint64_t v128;
  void (*v129)(uint64_t, char *, uint64_t);
  uint64_t v130;
  char *v131;
  unsigned int (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  id v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unint64_t v142;
  BOOL v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  char v154;
  char v155;
  BOOL v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  Swift::OpaquePointer v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  void **v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  char *v194;
  char *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  int64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  id v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  void **v227;
  _QWORD *v228;
  unint64_t v229;
  unint64_t v230;
  _QWORD aBlock[5];
  uint64_t v232;
  _QWORD *v233;
  char v234[8];
  void **v235;
  uint64_t v236;
  uint64_t v237;

  v4 = v3;
  v198 = a3;
  v197 = a2;
  v196 = a1;
  v204 = type metadata accessor for DispatchWorkItemFlags(0);
  v203 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v202 = (char *)&v190 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for DispatchQoS(0);
  v200 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v199 = (char *)&v190 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t)&v190 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v207 = (char *)&v190 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t)&v190 - v14;
  v16 = __chkstk_darwin(v13);
  v195 = (char *)&v190 - v17;
  __chkstk_darwin(v16);
  v19 = (unint64_t)&v190 - v18;
  v217 = type metadata accessor for Date(0);
  v20 = *(_QWORD **)(v217 - 8);
  v21 = __chkstk_darwin(v217);
  v194 = (char *)&v190 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v213 = (char *)&v190 - v24;
  __chkstk_darwin(v23);
  v26 = (int64_t)&v190 - v25;
  v27 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v27);
  v208 = (char *)&v190 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = type metadata accessor for IndexPath(0);
  v211 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v206 = (char *)&v190 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100012E18(&qword_1005D50D0);
  v219 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v218 = (char *)&v190 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = (void **)sub_100267D70();
  v235 = v32;
  v230 = sub_10013ACF8((uint64_t)_swiftEmptyArrayStorage);
  v33 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection), "filterTypeSelections");
  v34 = sub_1000163BC(0, &qword_1005D6360, ICFilterTypeSelection_ptr);
  v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v34);

  isa = v35;
  v37 = (int64_t)&v237;
  v223 = v35;
  if (v35 >> 62)
    goto LABEL_307;
  v38 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v225 = v4;
  v226 = v30;
  v221 = v38;
  if (v38)
  {
    v209 = v26;
    v210 = v19;
    v192 = v15;
    v191 = v10;
    v220 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries;
    v222 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem;
    v205 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView;
    v229 = isa & 0xC000000000000001;
    v224 = (_QWORD *)(v4 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_enabledSections);
    swift_beginAccess(v4 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_enabledSections, v234, 0, 0);
    v19 = 0;
    v216 = isa & 0xFFFFFFFFFFFFFF8;
    v37 = (int64_t)&v236;
    v215 = isa + 32;
    v26 = (int64_t)&byte_100556853;
    v228 = v20;
    v10 = v221;
    while (1)
    {
      if (v229)
      {
        v39 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, isa);
      }
      else
      {
        if (v19 >= *(_QWORD *)(v216 + 16))
          goto LABEL_302;
        v39 = *(id *)(v215 + 8 * v19);
      }
      v20 = v39;
      v40 = __OFADD__(v19++, 1);
      if (v40)
        goto LABEL_297;
      v41 = objc_msgSend(v39, "filterType");
      v42 = 11;
      v43 = 1;
      v44 = 2;
      v15 = 11;
      switch((unint64_t)v41)
      {
        case 0uLL:
          v43 = 8;
          goto LABEL_13;
        case 1uLL:
          v44 = 4;
          goto LABEL_21;
        case 2uLL:
          v44 = 5;
          goto LABEL_21;
        case 3uLL:
          v44 = 6;
          goto LABEL_21;
        case 4uLL:
          v44 = 7;
          goto LABEL_21;
        case 5uLL:
          v44 = 9;
          goto LABEL_21;
        case 6uLL:
          v44 = 10;
          goto LABEL_21;
        case 7uLL:
          goto LABEL_22;
        case 8uLL:
LABEL_13:
          v15 = v43;
          v42 = v43;
          goto LABEL_31;
        case 9uLL:
          goto LABEL_21;
        case 0xAuLL:
          v44 = 3;
LABEL_21:
          v15 = v44;
          v42 = v44;
LABEL_22:
          if (v15 != 2
            && v15 != 3
            && v15 != 4
            && v15 != 5
            && v15 != 6
            && v15 != asc_100556857[0]
            && v15 != asc_100556857[1]
            && v15 != asc_100556857[2]
            && v15 != asc_100556857[3])
          {
            goto LABEL_5;
          }
LABEL_31:
          if ((v42 - 1) >= 0xB)
          {
LABEL_5:

            if (v19 == v10)
              goto LABEL_152;
          }
          else
          {
            v37 = (int64_t)byte_10045F04A;
            LODWORD(v227) = byte_10045F04A[(int)v42 - 1];
            isa = (uint64_t)v235;
            v45 = (unint64_t)v235[2];
            if (v45)
            {
              if (v15 == *((unsigned __int8 *)v235 + 32))
              {
                v4 = 0;
LABEL_35:
                v26 = v4 + 1;
                if (__OFADD__(v4, 1))
                  goto LABEL_306;
                if (v26 != v45)
                {
                  v30 = v4 + 33;
                  while (1)
                  {
                    if (v26 < 0)
                      goto LABEL_290;
                    if (v30 - 32 >= v45)
                      break;
                    v32 = (void **)*(unsigned __int8 *)(isa + v30);
                    if ((void **)v15 != v32)
                    {
                      if (v30 - 32 != v4)
                      {
                        if (v4 >= v45)
                          goto LABEL_300;
                        v10 = *(unsigned __int8 *)(isa + 32 + v4);
                        if ((swift_isUniquelyReferenced_nonNull_native(isa) & 1) == 0)
                          isa = (uint64_t)sub_10026C6C0((_QWORD *)isa);
                        *(_BYTE *)(isa + v4 + 32) = (_BYTE)v32;
                        *(_BYTE *)(isa + v30) = v10;
                        v235 = (void **)isa;
                      }
                      v40 = __OFADD__(v4++, 1);
                      if (v40)
                        goto LABEL_293;
                      v45 = *(_QWORD *)(isa + 16);
                    }
                    v46 = v30 - 31;
                    ++v30;
                    if (v46 == v45)
                      goto LABEL_37;
                  }
LABEL_291:
                  __break(1u);
LABEL_292:
                  __break(1u);
LABEL_293:
                  __break(1u);
LABEL_294:
                  __break(1u);
LABEL_295:
                  __break(1u);
LABEL_296:
                  __break(1u);
LABEL_297:
                  __break(1u);
LABEL_298:
                  __break(1u);
LABEL_299:
                  __break(1u);
LABEL_300:
                  __break(1u);
LABEL_301:
                  __break(1u);
LABEL_302:
                  __break(1u);
LABEL_303:
                  __break(1u);
LABEL_304:
                  __break(1u);
                  goto LABEL_305;
                }
LABEL_37:
                v30 = v226;
                if ((uint64_t)v45 < (uint64_t)v4)
                  goto LABEL_301;
              }
              else if (v45 == 1)
              {
                v4 = 1;
              }
              else
              {
                v47 = 33;
                do
                {
                  v4 = v47 - 32;
                  v37 = *((unsigned __int8 *)v235 + v47);
                  if (v15 == v37)
                    goto LABEL_35;
                  v37 = v47 - 31;
                  if (__OFADD__(v4, 1))
                    goto LABEL_296;
                  ++v47;
                }
                while (v37 != v45);
                v4 = (unint64_t)v235[2];
              }
            }
            else
            {
              v4 = 0;
            }
            sub_10026D938(v4, v45, (uint64_t (*)(void))sub_10016B174);
            v48 = sub_10016B174(0, 1, 1, _swiftEmptyArrayStorage);
            v50 = v48[2];
            v49 = v48[3];
            if (v50 >= v49 >> 1)
              v48 = sub_10016B174((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
            v4 = v225;
            v48[2] = v50 + 1;
            *((_BYTE *)v48 + v50 + 32) = v42;
            v233 = v48;
            v15 = (uint64_t)sub_100265C6C(v20, *(_BYTE *)(v4 + v220), v42);
            swift_bridgeObjectRetain(v15);
            v52 = sub_1001D8EA8(v51);
            v53 = (void *)sub_100265BD8(v52);
            v10 = (uint64_t)v218;
            dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

            v54 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v30);
            (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v10, v30);
            if (!*(_QWORD *)(v15 + 16))
            {
              swift_bridgeObjectRelease(v54);
              v55 = v15;
              goto LABEL_68;
            }
            isa = *(unsigned __int8 *)(v15 + 32);
            swift_bridgeObjectRelease(v15);
            if (!sub_100263C94(isa, (uint64_t)&off_1005567D0) || *(_BYTE *)(v4 + v222) != 35)
            {
              v55 = v54;
LABEL_68:
              swift_bridgeObjectRelease(v55);
LABEL_69:
              isa = *(unsigned __int8 *)(v4 + v222);
              goto LABEL_70;
            }
            v15 = sub_100263C94(isa, v54);
            swift_bridgeObjectRelease(v54);
            if ((v15 & 1) != 0)
              goto LABEL_69;
            *(_BYTE *)(v4 + v222) = isa;
LABEL_70:
            v56 = isa - 8;
            if ((isa - 8) <= 0x11 && ((0x3FFC1u >> v56) & 1) != 0)
            {
              v15 = byte_10045F055[v56];
              v57 = (uint64_t)v233;
              v58 = sub_1003DA478(isa, (uint64_t)v233);
              if ((v59 & 1) == 0)
              {
                v60 = v58;
                if (*(_BYTE *)(v4 + v220) != 1 || !sub_100263C94(isa, (uint64_t)&off_100556800))
                {
                  v61 = v60 + 1;
                  if (__OFADD__(v60, 1))
                  {
                    __break(1u);
LABEL_312:
                    __break(1u);
LABEL_313:
                    __break(1u);
                    JUMPOUT(0x100265B50);
                  }
                  if (*(_QWORD *)(v57 + 16) < v61)
                    goto LABEL_312;
                  if (v61 < 0)
                    goto LABEL_313;
                  isa = (uint64_t)&v233;
                  sub_10026C8E4(v61, v60 + 1, v15);
                }
              }
            }
            v62 = objc_opt_self(ICTagSelection);
            v63 = swift_dynamicCastObjCClass(v20, v62);
            if (!v63)
              goto LABEL_101;
            isa = v63;
            v10 = v20;
            v64 = objc_msgSend((id)isa, "mode");
            v26 = (int64_t)v228;
            v65 = (int)v227;
            if (!v64)
            {
              v66 = v233;
              if ((swift_isUniquelyReferenced_nonNull_native(v233) & 1) == 0)
                v66 = sub_10016B174(0, v66[2] + 1, 1, v66);
              v68 = v66[2];
              v67 = v66[3];
              if (v68 >= v67 >> 1)
                v66 = sub_10016B174((_QWORD *)(v67 > 1), v68 + 1, 1, v66);
              v214 = (id)v10;
              v66[2] = v68 + 1;
              *((_BYTE *)v66 + v68 + 32) = 12;
              v233 = v66;
              v15 = *(_QWORD *)(v225 + v205);
              v69 = objc_msgSend((id)v15, "indexPathsForVisibleItems");
              v32 = (void **)v212;
              isa = static Array._unconditionallyBridgeFromObjectiveC(_:)(v69, v212);

              if (*(_QWORD *)(isa + 16))
              {
                v70 = v211;
                v10 = (uint64_t)v208;
                (*(void (**)(char *, unint64_t, void **))(v211 + 16))(v208, isa + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80)), v32);
                v71 = 0;
                v26 = (int64_t)v228;
              }
              else
              {
                v71 = 1;
                v26 = (int64_t)v228;
                v10 = (uint64_t)v208;
                v70 = v211;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(v70 + 56))(v10, v71, 1, v32);
              swift_bridgeObjectRelease(isa);
              if ((*(unsigned int (**)(uint64_t, uint64_t, void **))(v70 + 48))(v10, 1, v32) == 1)
              {

                sub_100012DDC(v10, (uint64_t *)&unk_1005D6350);
                goto LABEL_99;
              }
              v72 = *(void (**)(char *, uint64_t, void **))(v70 + 32);
              v193 = (id)v15;
              v15 = (uint64_t)v206;
              v72(v206, v10, v32);
              v10 = (uint64_t)v32;
              isa = (uint64_t)IndexPath._bridgeToObjectiveC()().super.isa;
              v32 = (void **)objc_msgSend(v193, "cellForItemAtIndexPath:", isa);

              if (v32)
              {
                objc_msgSend(v32, "frame");
                v74 = v73;
                v10 = (uint64_t)&selRef_copyNoteHTMLToPasteboard;
                objc_msgSend(v32, "directionalLayoutMargins");
                v76 = v74 - (v75 + -16.0);
                objc_msgSend(v32, "directionalLayoutMargins");
                v78 = v76 - (v77 + -16.0);
                v79 = objc_allocWithZone((Class)type metadata accessor for TagCollectionView());
                v190 = v190 & 0xFFFF000000000000 | 0x10101000100;
                isa = (uint64_t)sub_1002FE0C4(v190, 3, 0);
                v80 = (void *)sub_1002FB200(v78);

                if (v80)
                {
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v66);
                  v65 = (int)v227;
                  v10 = (uint64_t)v214;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v66 = sub_10016B174(0, v66[2] + 1, 1, v66);
                  v83 = v66[2];
                  v82 = v66[3];
                  if (v83 >= v82 >> 1)
                    v66 = sub_10016B174((_QWORD *)(v82 > 1), v83 + 1, 1, v66);
                  v66[2] = v83 + 1;
                  *((_BYTE *)v66 + v83 + 32) = 13;

                  v233 = v66;
                  (*(void (**)(char *, uint64_t))(v211 + 8))(v206, v212);
                  v4 = v225;
                  v30 = v226;
                  v26 = (int64_t)v228;
                  goto LABEL_103;
                }
                (*(void (**)(char *, uint64_t))(v211 + 8))(v206, v212);

                v4 = v225;
LABEL_101:
                v26 = (int64_t)v228;
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v15, v10);

LABEL_99:
                v4 = v225;
              }
              v65 = (int)v227;
              goto LABEL_103;
            }

LABEL_103:
            v84 = *v224;
            v37 = *(_QWORD *)(*v224 + 16);
            if (v37)
            {
              if (*(unsigned __int8 *)(v84 + 32) == v65)
                goto LABEL_111;
              if (v37 != 1)
              {
                if (*(unsigned __int8 *)(v84 + 33) == v65)
                  goto LABEL_111;
                if (v37 != 2)
                {
                  v109 = 34;
                  do
                  {
                    v110 = v109 - 31;
                    if (__OFADD__(v109 - 32, 1))
                      goto LABEL_304;
                    if (*(unsigned __int8 *)(v84 + v109) == v65)
                      goto LABEL_111;
                    ++v109;
                  }
                  while (v110 != v37);
                }
              }
            }
            v85 = v224;
            swift_beginAccess(v224, aBlock, 33, 0);
            v86 = (_QWORD *)*v85;
            v87 = swift_isUniquelyReferenced_nonNull_native(*v85);
            *v85 = v86;
            if ((v87 & 1) == 0)
            {
              v86 = sub_10016B180(0, v86[2] + 1, 1, v86);
              *v224 = v86;
            }
            v89 = v86[2];
            v88 = v86[3];
            if (v89 >= v88 >> 1)
            {
              v86 = sub_10016B180((_QWORD *)(v88 > 1), v89 + 1, 1, v86);
              *v224 = v86;
            }
            v86[2] = v89 + 1;
            *((_BYTE *)v86 + v89 + 32) = v65;
            swift_endAccess(aBlock);
            v26 = (int64_t)v228;
LABEL_111:
            v15 = (uint64_t)v233;
            v90 = v230;
            v91 = swift_isUniquelyReferenced_nonNull_native(v230);
            aBlock[0] = v90;
            sub_10024EB90(v15, v65, v91);
            v230 = aBlock[0];
            swift_bridgeObjectRelease(0x8000000000000000);
            v92 = objc_opt_self(ICDateFilterTypeSelection);
            v93 = swift_dynamicCastObjCClass(v20, v92);
            isa = v223;
            if (v93)
            {
              v94 = (void *)v93;
              v32 = v20;
              v95 = (char *)objc_msgSend(v94, "selectionType");
              if ((unint64_t)(v95 - 8) < 3)
              {
                v96 = objc_msgSend(v94, "primaryDate");
                if (v96)
                {
                  v97 = v96;
                  v98 = v32;
                  v99 = v213;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

                  v100 = *(void (**)(unint64_t, char *, uint64_t))(v26 + 32);
                  v15 = v210;
                  v101 = v99;
                  v102 = v26;
                  v103 = v217;
                  v100(v210, v101, v217);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v102 + 56))(v15, 0, 1, v103);
                  v104 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
                  v32 = v98;
                  v105 = v104(v15, 1, v103);
                  if ((_DWORD)v105 != 1)
                  {
                    v106 = v209;
                    v100(v209, (char *)v15, v217);
                    goto LABEL_131;
                  }
                }
                else
                {
                  v15 = v210;
                  v105 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v210, 1, 1, v217);
                }
                v106 = v209;
                static Date.now.getter(v105);
                sub_100012DDC(v15, (uint64_t *)&unk_1005D7B20);
LABEL_131:
                v111.super.isa = Date._bridgeToObjectiveC()().super.isa;
                ((void (*)(int64_t, uint64_t))v228[1])(v106, v217);
                objc_msgSend(v94, "setPrimaryDate:", v111.super.isa);
LABEL_149:

                isa = v223;
LABEL_150:

                goto LABEL_151;
              }
              if (v95 != (char *)6)
              {
                if (v95 == (char *)7)
                {
                  v107 = (Class)objc_msgSend(v94, "relativeRangeAmount");
                  if (!v107)
                  {
                    sub_1000163BC(0, (unint64_t *)&unk_1005D8C50, NSNumber_ptr);
                    v107 = NSNumber.init(integerLiteral:)(1).super.super.isa;
                  }
                  objc_msgSend(v94, "setRelativeRangeAmount:", v107);

                  v108 = objc_msgSend(v94, "relativeRangeSelectionType");
                  isa = v223;
                  if (!v108)
                    objc_msgSend(v94, "setRelativeRangeSelectionType:", 1);
                }
                goto LABEL_150;
              }
              v112 = objc_msgSend(v94, "primaryDate");
              v227 = v32;
              if (v112)
              {
                v113 = v112;
                v114 = v213;
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v112);

                v115 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
                v116 = v26;
                v117 = (uint64_t)v195;
                v118 = v114;
                v119 = v217;
                v115(v195, v118, v217);
                v120 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v116 + 56);
                v120(v117, 0, 1, v119);
                v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v117, 1, v119);
                if ((_DWORD)v121 != 1)
                {
                  v122 = v194;
                  v115(v194, (char *)v117, v119);
                  goto LABEL_137;
                }
              }
              else
              {
                v120 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56);
                v117 = (uint64_t)v195;
                v119 = v217;
                v121 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v120)(v195, 1, 1, v217);
              }
              v122 = v194;
              static Date.now.getter(v121);
              sub_100012DDC(v117, (uint64_t *)&unk_1005D7B20);
LABEL_137:
              v123 = Date._bridgeToObjectiveC()().super.isa;
              v15 = (uint64_t)v228;
              v214 = (id)v228[1];
              ((void (*)(char *, uint64_t))v214)(v122, v119);
              objc_msgSend(v94, "setPrimaryDate:", v123);

              v124 = objc_msgSend(v94, "secondaryDate");
              if (v124)
              {
                v125 = v124;
                v126 = v120;
                v127 = v213;
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v124);

                v128 = v119;
                v129 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
                v130 = (uint64_t)v207;
                v131 = v127;
                v120 = v126;
                v4 = v225;
                v129((uint64_t)v207, v131, v128);
                v120(v130, 0, 1, v128);
                v132 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
                if (v132(v130, 1, v128) != 1)
                {
                  v133 = v192;
                  v134 = v217;
                  v129(v192, v207, v217);
                  v120(v133, 0, 1, v134);
                  v30 = v226;
LABEL_145:
                  if (v132(v133, 1, v134) == 1)
                  {
                    v111.super.isa = 0;
                  }
                  else
                  {
                    v111.super.isa = Date._bridgeToObjectiveC()().super.isa;
                    ((void (*)(uint64_t, uint64_t))v214)(v133, v134);
                  }
                  v32 = v227;
                  objc_msgSend(v94, "setSecondaryDate:", v111.super.isa);
                  goto LABEL_149;
                }
              }
              else
              {
                v120((uint64_t)v207, 1, 1, v119);
              }
              v135 = objc_msgSend(v94, "primaryDate");
              if (v135)
              {
                v136 = v135;
                v137 = v191;
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v135);

                v138 = 0;
                v30 = v226;
              }
              else
              {
                v138 = 1;
                v30 = v226;
                v137 = v191;
              }
              v134 = v217;
              v120(v137, v138, 1, v217);
              v139 = v137;
              v133 = v192;
              sub_100213048(v139, v192);
              sub_100012DDC((uint64_t)v207, (uint64_t *)&unk_1005D7B20);
              v132 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v228[6];
              goto LABEL_145;
            }
LABEL_151:

            v10 = v221;
            v26 = (int64_t)&byte_100556853;
            if (v19 == v221)
            {
LABEL_152:
              swift_bridgeObjectRelease(isa);
              v32 = v235;
              goto LABEL_154;
            }
          }
          break;
        default:
          goto LABEL_5;
      }
    }
  }
  swift_bridgeObjectRelease(isa);
LABEL_154:
  v228 = v32[2];
  if (v228)
  {
    isa = v4 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_enabledSections;
    v227 = v32 + 4;
    v229 = (unint64_t)v32;
    swift_bridgeObjectRetain(v32);
    v4 = 0;
    v141 = (unsigned __int8 *)&unk_100556000;
    while (1)
    {
      if (v4 >= *(_QWORD *)(v229 + 16))
        goto LABEL_298;
      v10 = *((unsigned __int8 *)v227 + v4);
      swift_beginAccess(isa, aBlock, 33, 0);
      v20 = *(_QWORD **)(*(_QWORD *)isa + 16);
      if (!v20)
      {
        v142 = 0;
        v19 = 0;
        goto LABEL_157;
      }
      v15 = (uint64_t)v141;
      v26 = (_DWORD)v10 == 2;
      v150 = (_DWORD)v10 == 3
          || (_DWORD)v10 == 4
          || (_DWORD)v10 == 5
          || (_DWORD)v10 == 6
          || (_DWORD)v10 == 7
          || (_DWORD)v10 == 9
          || (_DWORD)v10 == 10
          || (_DWORD)v10 == 11;
      swift_bridgeObjectRetain(*(_QWORD *)isa);
      v19 = 0;
      v30 = 33;
      while (1)
      {
        v152 = *(unsigned __int8 *)(v151 + v19 + 32);
        if ((_DWORD)v10 == 2)
        {
LABEL_188:
          switch((int)v10)
          {
            case 1:
              goto LABEL_185;
            case 2:
              if (v152 == 10)
                goto LABEL_212;
              goto LABEL_186;
            case 3:
              if (v152 == 11)
                goto LABEL_212;
              goto LABEL_186;
            case 4:
              if (v152 == 2)
                goto LABEL_212;
              goto LABEL_186;
            case 5:
              if (v152 == 3)
                goto LABEL_212;
              goto LABEL_186;
            case 6:
              if (v152 == 4)
                goto LABEL_212;
              goto LABEL_186;
            case 7:
              if (v152 == 5)
                goto LABEL_212;
              goto LABEL_186;
            case 8:
              goto LABEL_193;
            case 9:
              if (v152 == 6)
                goto LABEL_212;
              goto LABEL_186;
            case 10:
              if (v152 == 7)
                goto LABEL_212;
              goto LABEL_186;
            case 11:
              if (v152 == 8)
                goto LABEL_212;
              goto LABEL_186;
            default:
              goto LABEL_186;
          }
        }
        if ((_DWORD)v10 == 1)
        {
LABEL_185:
          if (v152 == 9)
            break;
          goto LABEL_186;
        }
        if ((_DWORD)v10 != 8)
        {
          if (v150)
            goto LABEL_188;
          goto LABEL_186;
        }
LABEL_193:
        if (v152 == 1)
          break;
LABEL_186:
        ++v19;
        ++v30;
        if (v20 == (_QWORD *)v19)
        {
          swift_bridgeObjectRelease(v151);
          v142 = *(_QWORD *)(*(_QWORD *)isa + 16);
          v19 = (unint64_t)v20;
          goto LABEL_262;
        }
      }
LABEL_212:
      swift_bridgeObjectRelease(v151);
      v142 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_303;
      v20 = *(_QWORD **)isa;
      if (v142 != *(_QWORD *)(*(_QWORD *)isa + 16))
      {
        v142 = *(_QWORD *)(*(_QWORD *)isa + 16);
        v141 = (unsigned __int8 *)v15;
        while (1)
        {
          if (v30 - 32 >= v142)
          {
            __break(1u);
LABEL_290:
            __break(1u);
            goto LABEL_291;
          }
          v26 = *((unsigned __int8 *)v20 + v30);
          v37 = v141[2226];
          if ((_DWORD)v37 == (_DWORD)v10)
            goto LABEL_221;
          if ((_DWORD)v10 == 1)
          {
LABEL_228:
            if ((_DWORD)v26 == 9)
              goto LABEL_218;
          }
          else if ((_DWORD)v10 == 8)
          {
LABEL_226:
            if ((_DWORD)v26 == 1)
              goto LABEL_218;
          }
          else
          {
            v156 = (_DWORD)v10 == 3 || (_DWORD)v10 == 4;
            if (v156
              || (_DWORD)v10 == 5
              || (_DWORD)v10 == 6
              || asc_1005568B7[0] == (_DWORD)v10
              || asc_1005568B7[1] == (_DWORD)v10
              || asc_1005568B7[2] == (_DWORD)v10
              || (v37 = asc_1005568B7[3], asc_1005568B7[3] == (_DWORD)v10))
            {
LABEL_221:
              v37 = (v10 - 1);
              switch((int)v10)
              {
                case 1:
                  goto LABEL_228;
                case 2:
                  if ((_DWORD)v26 != 10)
                    break;
                  goto LABEL_218;
                case 3:
                  if ((_DWORD)v26 != 11)
                    break;
                  goto LABEL_218;
                case 4:
                  if ((_DWORD)v26 != 2)
                    break;
                  goto LABEL_218;
                case 5:
                  if ((_DWORD)v26 != 3)
                    break;
                  goto LABEL_218;
                case 6:
                  if ((_DWORD)v26 != 4)
                    break;
                  goto LABEL_218;
                case 7:
                  if ((_DWORD)v26 != 5)
                    break;
                  goto LABEL_218;
                case 8:
                  goto LABEL_226;
                case 9:
                  if ((_DWORD)v26 != 6)
                    break;
                  goto LABEL_218;
                case 10:
                  if ((_DWORD)v26 != 7)
                    break;
                  goto LABEL_218;
                case 11:
                  if ((_DWORD)v26 != 8)
                    break;
                  goto LABEL_218;
                default:
                  break;
              }
            }
          }
          if (v30 - 32 != v19)
          {
            if ((v19 & 0x8000000000000000) != 0)
              goto LABEL_294;
            if (v19 >= v142)
              goto LABEL_295;
            v154 = *((_BYTE *)v20 + v19 + 32);
            v155 = swift_isUniquelyReferenced_nonNull_native(v20);
            *(_QWORD *)isa = v20;
            if ((v155 & 1) == 0)
            {
              v20 = sub_10026C6AC(v20);
              *(_QWORD *)isa = v20;
            }
            *((_BYTE *)v20 + v19 + 32) = v26;
            *(_BYTE *)(*(_QWORD *)isa + v30) = v154;
            v141 = (unsigned __int8 *)v15;
          }
          v40 = __OFADD__(v19++, 1);
          if (v40)
            goto LABEL_292;
          v20 = *(_QWORD **)isa;
          v142 = *(_QWORD *)(*(_QWORD *)isa + 16);
LABEL_218:
          v153 = v30 - 31;
          ++v30;
          if (v153 == v142)
            goto LABEL_263;
        }
      }
LABEL_262:
      v141 = (unsigned __int8 *)v15;
LABEL_263:
      v30 = v226;
      if ((uint64_t)v142 < (uint64_t)v19)
      {
        __break(1u);
LABEL_265:
        swift_bridgeObjectRelease(v229);
        v4 = v225;
        break;
      }
LABEL_157:
      ++v4;
      sub_10026D938(v19, v142, (uint64_t (*)(void))sub_10016B180);
      swift_endAccess(aBlock);
      if ((_QWORD *)v4 == v228)
        goto LABEL_265;
    }
  }
  v10 = swift_allocBox(v30, v140);
  isa = v157;
  v158 = sub_10026DAB0();
  v159 = sub_10026DAF4();
  NSDiffableDataSourceSnapshot.init()(&type metadata for FolderComposerFilterDataSource.Section, &type metadata for FolderComposerFilterDataSource.Item, v158, v159);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_1005568C0);
  LOBYTE(aBlock[0]) = 0;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_1005568E8, aBlock, v30);
  v160 = (uint64_t *)(v4 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_enabledSections);
  swift_beginAccess(v4 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_enabledSections, &v233, 0, 0);
  v15 = *v160;
  swift_bridgeObjectRetain(v15);
  NSDiffableDataSourceSnapshot.appendSections(_:)(v161);
  swift_bridgeObjectRelease(v15);
  v26 = 0;
  v19 = v230 + 64;
  v37 = 1 << *(_BYTE *)(v230 + 32);
  v162 = -1;
  if (v37 < 64)
    v162 = ~(-1 << v37);
  v163 = v162 & *(_QWORD *)(v230 + 64);
  v20 = (_QWORD *)((unint64_t)(v37 + 63) >> 6);
  while (1)
  {
    if (v163)
    {
      v164 = __clz(__rbit64(v163));
      v163 &= v163 - 1;
      v165 = v164 | (v26 << 6);
      goto LABEL_270;
    }
    v167 = (char *)(v26 + 1);
    if (__OFADD__(v26, 1))
      goto LABEL_299;
    if ((uint64_t)v167 >= (uint64_t)v20)
      break;
    v37 = *(_QWORD *)(v19 + 8 * (_QWORD)v167);
    ++v26;
    if (!v37)
    {
      v26 = (int64_t)(v167 + 1);
      if ((uint64_t)(v167 + 1) >= (uint64_t)v20)
        break;
      v37 = *(_QWORD *)(v19 + 8 * v26);
      if (!v37)
      {
        v26 = (int64_t)(v167 + 2);
        if ((uint64_t)(v167 + 2) >= (uint64_t)v20)
          break;
        v37 = *(_QWORD *)(v19 + 8 * v26);
        if (!v37)
        {
          v168 = v167 + 3;
          if ((uint64_t)v168 >= (uint64_t)v20)
            break;
          v37 = *(_QWORD *)(v19 + 8 * (_QWORD)v168);
          if (!v37)
          {
            while (1)
            {
              v26 = (int64_t)(v168 + 1);
              if (__OFADD__(v168, 1))
                break;
              if (v26 >= (uint64_t)v20)
                goto LABEL_286;
              v37 = *(_QWORD *)(v19 + 8 * v26);
              ++v168;
              if (v37)
                goto LABEL_285;
            }
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            v187 = *(_QWORD *)(v37 - 256);
            if (isa < 0)
              v188 = v187;
            else
              v188 = isa & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v223);
            v189 = v188;
            isa = v223;
            v38 = _CocoaArrayWrapper.endIndex.getter(v189);
            swift_bridgeObjectRelease(isa);
            goto LABEL_3;
          }
          v26 = (int64_t)v168;
        }
      }
    }
LABEL_285:
    v163 = (v37 - 1) & v37;
    v165 = __clz(__rbit64(v37)) + (v26 << 6);
LABEL_270:
    v15 = *(_QWORD *)(*(_QWORD *)(v230 + 56) + 8 * v165);
    LOBYTE(aBlock[0]) = *(_BYTE *)(*(_QWORD *)(v230 + 48) + v165);
    swift_bridgeObjectRetain(v15);
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v166, aBlock, v30);
    swift_bridgeObjectRelease(v15);
  }
LABEL_286:
  swift_release(v230);
  v169 = v235;
  if (v235[2])
  {
    NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100556910);
    LOBYTE(aBlock[0]) = 12;
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v169, aBlock, v30);
  }
  swift_bridgeObjectRelease(v169);
  v170 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v171 = (void *)static OS_dispatch_queue.main.getter(v170);
  v172 = swift_allocObject(&unk_100561F00, 24, 7);
  swift_unknownObjectWeakInit(v172 + 16, v4);
  v173 = swift_allocObject(&unk_100561F28, 56, 7);
  *(_BYTE *)(v173 + 16) = v196 & 1;
  *(_QWORD *)(v173 + 24) = v172;
  *(_QWORD *)(v173 + 32) = v10;
  v174 = v197;
  v175 = v198;
  *(_QWORD *)(v173 + 40) = v197;
  *(_QWORD *)(v173 + 48) = v175;
  aBlock[4] = sub_10026DB98;
  v232 = v173;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_100561F40;
  v176 = _Block_copy(aBlock);
  v177 = v232;
  swift_retain(v10);
  sub_100166B74(v174, v175);
  v178 = swift_release(v177);
  v179 = v199;
  static DispatchQoS.unspecified.getter(v178);
  aBlock[0] = _swiftEmptyArrayStorage;
  v180 = sub_100225940();
  v181 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v182 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
  v183 = v202;
  v184 = v181;
  v185 = v204;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v184, v182, v204, v180);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v179, v183, v176);
  _Block_release(v176);

  (*(void (**)(char *, uint64_t))(v203 + 8))(v183, v185);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v179, v201);
  return swift_release(v10);
}

id sub_100265BD8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource____lazy_storage___diffableDataSource;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource____lazy_storage___diffableDataSource);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource____lazy_storage___diffableDataSource);
  }
  else
  {
    v4 = (void *)sub_100266160();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

unint64_t sub_100265C34@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10026DA90(*a1);
  *a2 = result;
  return result;
}

void sub_100265C5C(_QWORD *a1@<X8>)
{
  *a1 = &off_100555BE0;
}

_QWORD *sub_100265C6C(void *a1, char a2, _BOOL8 a3)
{
  unsigned __int8 v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  _UNKNOWN **v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  _UNKNOWN **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  void *v37;

  v3 = a3;
  v6 = _swiftEmptyArrayStorage;
  if (!sub_100263C94(a3, (uint64_t)&off_100556568))
    return v6;
  v7 = objc_opt_self(ICDateFilterTypeSelection);
  v8 = swift_dynamicCastObjCClass(a1, v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = a1;
    v11 = objc_msgSend(v9, "selectionType");
    v12 = _swiftEmptyArrayStorage;
    switch((unint64_t)v11)
    {
      case 6uLL:
        v13 = v3;
        v14 = &off_1005565C0;
        if (v3 != 5)
          v14 = _swiftEmptyArrayStorage;
        v15 = &off_100556598;
        goto LABEL_26;
      case 7uLL:
        v13 = v3;
        v14 = &off_100556610;
        if (v3 != 5)
          v14 = _swiftEmptyArrayStorage;
        v15 = &off_1005565E8;
        goto LABEL_26;
      case 8uLL:
        v13 = v3;
        v14 = &off_100556660;
        if (v3 != 5)
          v14 = _swiftEmptyArrayStorage;
        v15 = &off_100556638;
        goto LABEL_26;
      case 9uLL:
        v13 = v3;
        v14 = &off_1005566B0;
        if (v3 != 5)
          v14 = _swiftEmptyArrayStorage;
        v15 = &off_100556688;
        goto LABEL_26;
      case 0xAuLL:
        v13 = v3;
        v14 = &off_100556700;
        if (v3 != 5)
          v14 = _swiftEmptyArrayStorage;
        v15 = &off_1005566D8;
LABEL_26:
        if (v13 == 4)
          v12 = v15;
        else
          v12 = v14;
        break;
      default:
        break;
    }
    v26 = v12[2];
    if (!v26)
    {
      swift_bridgeObjectRelease(v12);

      return _swiftEmptyArrayStorage;
    }
    v37 = v10;
    swift_bridgeObjectRetain(v12);
    v27 = 0;
    v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      v28 = *((unsigned __int8 *)v12 + v27 + 32);
      if ((a2 & 1) == 0)
        goto LABEL_50;
      if ((v28 & 0xFE) != 0xE && v28 != 20 && v28 != 21 && v28 != 17)
      {
        v31 = v28 == 18 || v28 == 19;
        if (!v31 && v28 != 23 && v28 != 24 && v28 != 25 && v28 != 32 && v28 != 33 && v28 != 34)
          goto LABEL_50;
      }
      v32 = v28 - 8;
      if ((v28 - 8) < 0x12 && ((0x3FFC1u >> v32) & 1) != 0)
        break;
LABEL_32:
      if (v26 == ++v27)
      {

        swift_bridgeObjectRelease_n(v12, 2);
        return v6;
      }
    }
    LOBYTE(v28) = byte_10045F067[v32];
LABEL_50:
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      v6 = sub_10016B174(0, v6[2] + 1, 1, v6);
    v34 = v6[2];
    v33 = v6[3];
    if (v34 >= v33 >> 1)
      v6 = sub_10016B174((_QWORD *)(v33 > 1), v34 + 1, 1, v6);
    v6[2] = v34 + 1;
    *((_BYTE *)v6 + v34 + 32) = v28;
    goto LABEL_32;
  }
  v16 = objc_opt_self(ICSharedFilterTypeSelection);
  v17 = swift_dynamicCastObjCClass(a1, v16);
  if (v17)
  {
    v18 = (void *)v17;
    v19 = a1;
    v20 = objc_msgSend(v18, "selectionType");

    v21 = &off_100556758;
    goto LABEL_11;
  }
  v22 = objc_opt_self(ICMentionsFilterTypeSelection);
  v23 = swift_dynamicCastObjCClass(a1, v22);
  if (v23)
  {
    v24 = (void *)v23;
    v25 = a1;
    v20 = objc_msgSend(v24, "selectionType");

    v21 = &off_100556780;
LABEL_11:
    if (v20 == (id)2)
      return v21;
    return v6;
  }
  v36 = objc_opt_self(ICFoldersFilterTypeSelection);
  if (swift_dynamicCastObjCClass(a1, v36))
    return &off_1005567A8;
  return v6;
}

uint64_t sub_100266074(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = 8;
      break;
    case 1:
      result = 9;
      break;
    case 2:
      result = 10;
      break;
    case 3:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 25:
    case 26:
    case 29:
      result = 1;
      break;
    case 4:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 27:
    case 28:
    case 30:
      result = 2;
      break;
    case 5:
    case 31:
      result = 3;
      break;
    case 6:
    case 32:
      result = 4;
      break;
    case 7:
      return result;
    case 8:
      result = 5;
      break;
    case 9:
      result = 6;
      break;
    case 10:
    case 33:
      result = 7;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t sub_100266128@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10026DAA0(*a1);
  *a2 = result;
  return result;
}

void sub_100266150(_QWORD *a1@<X8>)
{
  *a1 = &off_100555B98;
}

uint64_t sub_100266160()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t locked;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  void *v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  char *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  id v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t ObjectType;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;

  ObjectType = swift_getObjectType(v0);
  v204 = sub_100012E18(&qword_1005D63A0);
  v202 = *(_QWORD *)(v204 - 8);
  v203 = *(_QWORD *)(v202 + 64);
  v1 = __chkstk_darwin(v204);
  v201 = (char *)&v177 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v200 = (char *)&v177 - v3;
  v230 = sub_100012E18(&qword_1005D63A8);
  v218 = *(_QWORD *)(v230 - 8);
  v199 = *(_QWORD *)(v218 + 64);
  v4 = __chkstk_darwin(v230);
  v229 = (char *)&v177 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v213 = (char *)&v177 - v6;
  v256 = sub_100012E18(&qword_1005D63B0);
  v270 = *(_QWORD *)(v256 - 8);
  v198 = *(_QWORD *)(v270 + 64);
  v7 = __chkstk_darwin(v256);
  v228 = (char *)&v177 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v210 = (char *)&v177 - v9;
  v253 = sub_100012E18(&qword_1005D63B8);
  v268 = *(_QWORD *)(v253 - 8);
  v197 = *(_QWORD *)(v268 + 64);
  v10 = __chkstk_darwin(v253);
  v227 = (char *)&v177 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v207 = (char *)&v177 - v12;
  v251 = sub_100012E18(&qword_1005D63C0);
  v269 = *(_QWORD *)(v251 - 8);
  v196 = *(_QWORD *)(v269 + 64);
  v13 = __chkstk_darwin(v251);
  v225 = (char *)&v177 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v205 = (char *)&v177 - v15;
  v261 = sub_100012E18(&qword_1005D63C8);
  v271 = *(_QWORD *)(v261 - 8);
  v195 = *(_QWORD *)(v271 + 64);
  v16 = __chkstk_darwin(v261);
  v226 = (char *)&v177 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v236 = (char *)&v177 - v18;
  v246 = sub_100012E18(&qword_1005D63D0);
  v245 = *(_QWORD *)(v246 - 8);
  v194 = *(_QWORD *)(v245 + 64);
  v19 = __chkstk_darwin(v246);
  v224 = (char *)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v235 = (char *)&v177 - v21;
  v242 = sub_100012E18(&qword_1005D63D8);
  v255 = *(_QWORD *)(v242 - 8);
  v193 = *(_QWORD *)(v255 + 64);
  v22 = __chkstk_darwin(v242);
  v221 = (char *)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v239 = (char *)&v177 - v24;
  v267 = sub_100012E18(&qword_1005D63E0);
  v254 = *(_QWORD *)(v267 - 8);
  v192 = *(_QWORD *)(v254 + 64);
  v25 = __chkstk_darwin(v267);
  v222 = (char *)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v240 = (char *)&v177 - v27;
  v266 = sub_100012E18(&qword_1005D63E8);
  v252 = *(_QWORD *)(v266 - 8);
  v191 = *(_QWORD *)(v252 + 64);
  v28 = __chkstk_darwin(v266);
  v219 = (char *)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v241 = (char *)&v177 - v30;
  v265 = sub_100012E18(&qword_1005D63F0);
  v249 = *(_QWORD *)(v265 - 8);
  v190 = *(_QWORD *)(v249 + 64);
  v31 = __chkstk_darwin(v265);
  v217 = (char *)&v177 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v243 = (char *)&v177 - v33;
  v264 = sub_100012E18(&qword_1005D63F8);
  v238 = *(_QWORD *)(v264 - 8);
  v188 = *(_QWORD *)(v238 + 64);
  v34 = __chkstk_darwin(v264);
  v215 = (char *)&v177 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v247 = (char *)&v177 - v36;
  v263 = sub_100012E18(&qword_1005D6400);
  v237 = *(_QWORD *)(v263 - 8);
  v187 = *(_QWORD *)(v237 + 64);
  v37 = __chkstk_darwin(v263);
  v214 = (char *)&v177 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v248 = (char *)&v177 - v39;
  v262 = sub_100012E18(&qword_1005D6408);
  v244 = *(_QWORD *)(v262 - 8);
  v186 = *(_QWORD *)(v244 + 64);
  v40 = __chkstk_darwin(v262);
  v212 = (char *)&v177 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v250 = (char *)&v177 - v42;
  v260 = sub_100012E18(&qword_1005D6410);
  v234 = *(_QWORD *)(v260 - 8);
  v185 = *(_QWORD *)(v234 + 64);
  v43 = __chkstk_darwin(v260);
  v211 = (char *)&v177 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v216 = (char *)&v177 - v45;
  v259 = sub_100012E18(&qword_1005D6418);
  v233 = *(_QWORD *)(v259 - 8);
  v183 = *(_QWORD *)(v233 + 64);
  v46 = __chkstk_darwin(v259);
  v209 = (char *)&v177 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v49 = (char *)&v177 - v48;
  v258 = sub_100012E18(&qword_1005D6420);
  v232 = *(_QWORD *)(v258 - 8);
  v184 = *(_QWORD *)(v232 + 64);
  v50 = __chkstk_darwin(v258);
  v208 = (char *)&v177 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v220 = (char *)&v177 - v52;
  v257 = sub_100012E18(&qword_1005D6428);
  v231 = *(_QWORD *)(v257 - 8);
  v181 = *(_QWORD *)(v231 + 64);
  v53 = __chkstk_darwin(v257);
  v206 = (char *)&v177 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v223 = (char *)&v177 - v55;
  v56 = swift_allocObject(&unk_100561F78, 24, 7);
  *(_QWORD *)(v56 + 16) = v0;
  v57 = type metadata accessor for FolderComposerFilterJoinCell();
  v58 = v0;
  UICollectionView.CellRegistration.init(handler:)(sub_10026DBA8, v56, v57, &type metadata for FolderComposerFilterDataSource.Item);
  v59 = swift_allocObject(&unk_100561FA0, 24, 7);
  *(_QWORD *)(v59 + 16) = v58;
  v60 = swift_allocObject(&unk_100561FC8, 32, 7);
  *(_QWORD *)(v60 + 16) = sub_10026DBB0;
  *(_QWORD *)(v60 + 24) = v59;
  v61 = type metadata accessor for FolderComposerFilterCellPinnedNotes();
  v62 = v58;
  v182 = v59;
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v60, v61, &type metadata for FolderComposerFilterDataSource.Item);
  v63 = swift_allocObject(&unk_100561FF0, 32, 7);
  *(_QWORD *)(v63 + 16) = sub_10026DBB0;
  *(_QWORD *)(v63 + 24) = v59;
  v64 = type metadata accessor for FolderComposerFilterCellQuickNotes();
  swift_retain(v59);
  v180 = v49;
  UICollectionView.CellRegistration.init(handler:)(sub_10026DBDC, v63, v64, &type metadata for FolderComposerFilterDataSource.Item);
  v65 = swift_allocObject(&unk_100562018, 32, 7);
  *(_QWORD *)(v65 + 16) = sub_10026DBB0;
  *(_QWORD *)(v65 + 24) = v59;
  locked = type metadata accessor for FolderComposerFilterCellLockedNotes();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v65, locked, &type metadata for FolderComposerFilterDataSource.Item);
  v67 = swift_allocObject(&unk_100562040, 32, 7);
  *(_QWORD *)(v67 + 16) = sub_10026DBB0;
  *(_QWORD *)(v67 + 24) = v59;
  v68 = type metadata accessor for FolderComposerFilterCellDateCreated();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v67, v68, &type metadata for FolderComposerFilterDataSource.Item);
  v69 = swift_allocObject(&unk_100562068, 32, 7);
  *(_QWORD *)(v69 + 16) = sub_10026DBB0;
  *(_QWORD *)(v69 + 24) = v59;
  v70 = type metadata accessor for FolderComposerFilterCellDateEdited();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v69, v70, &type metadata for FolderComposerFilterDataSource.Item);
  v71 = swift_allocObject(&unk_100562090, 32, 7);
  *(_QWORD *)(v71 + 16) = sub_10026DBB0;
  *(_QWORD *)(v71 + 24) = v59;
  v72 = type metadata accessor for FolderComposerFilterCellTags();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v71, v72, &type metadata for FolderComposerFilterDataSource.Item);
  v73 = swift_allocObject(&unk_1005620B8, 32, 7);
  *(_QWORD *)(v73 + 16) = sub_10026DBB0;
  *(_QWORD *)(v73 + 24) = v59;
  v74 = type metadata accessor for FolderComposerFilterCellChecklists();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v73, v74, &type metadata for FolderComposerFilterDataSource.Item);
  v75 = swift_allocObject(&unk_1005620E0, 32, 7);
  *(_QWORD *)(v75 + 16) = sub_10026DBB0;
  *(_QWORD *)(v75 + 24) = v59;
  v76 = type metadata accessor for FolderComposerFilterCellAttachments();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v75, v76, &type metadata for FolderComposerFilterDataSource.Item);
  v77 = swift_allocObject(&unk_100562108, 32, 7);
  *(_QWORD *)(v77 + 16) = sub_10026DBB0;
  *(_QWORD *)(v77 + 24) = v59;
  v78 = type metadata accessor for FolderComposerFilterCellFolders();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v77, v78, &type metadata for FolderComposerFilterDataSource.Item);
  v79 = swift_allocObject(&unk_100562130, 32, 7);
  *(_QWORD *)(v79 + 16) = sub_10026DBB0;
  *(_QWORD *)(v79 + 24) = v59;
  v80 = type metadata accessor for FolderComposerFilterCellShared();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v79, v80, &type metadata for FolderComposerFilterDataSource.Item);
  v81 = swift_allocObject(&unk_100562158, 32, 7);
  *(_QWORD *)(v81 + 16) = sub_10026DBB0;
  *(_QWORD *)(v81 + 24) = v59;
  v82 = type metadata accessor for FolderComposerFilterCellMentions();
  swift_retain(v59);
  UICollectionView.CellRegistration.init(handler:)(sub_10026FA68, v81, v82, &type metadata for FolderComposerFilterDataSource.Item);
  v83 = swift_allocObject(&unk_100562180, 24, 7);
  *(_QWORD *)(v83 + 16) = v62;
  v84 = type metadata accessor for FolderComposerFilterCellEntry();
  v85 = v62;
  UICollectionView.CellRegistration.init(handler:)(sub_10026DC00, v83, v84, &type metadata for FolderComposerFilterDataSource.Item);
  v86 = swift_allocObject(&unk_1005621A8, 24, 7);
  *(_QWORD *)(v86 + 16) = v85;
  v87 = type metadata accessor for FolderComposerFilterCellDatePicker(0);
  v88 = v85;
  v89 = v205;
  UICollectionView.CellRegistration.init(handler:)(sub_10026DC24, v86, v87, &type metadata for FolderComposerFilterDataSource.Item);
  v90 = swift_allocObject(&unk_1005621D0, 24, 7);
  *(_QWORD *)(v90 + 16) = v88;
  v91 = type metadata accessor for FolderComposerFilterCellDateRangePicker();
  v92 = v88;
  v93 = v207;
  UICollectionView.CellRegistration.init(handler:)(sub_10026DC2C, v90, v91, &type metadata for FolderComposerFilterDataSource.Item);
  v94 = swift_allocObject(&unk_1005621F8, 32, 7);
  v95 = ObjectType;
  *(_QWORD *)(v94 + 16) = v92;
  *(_QWORD *)(v94 + 24) = v95;
  v96 = type metadata accessor for TagContainerCell();
  v97 = v92;
  v98 = v210;
  UICollectionView.CellRegistration.init(handler:)(sub_10026DC58, v94, v96, &type metadata for FolderComposerFilterDataSource.Item);
  v99 = swift_allocObject(&unk_100562220, 24, 7);
  *(_QWORD *)(v99 + 16) = v97;
  v100 = type metadata accessor for FolderComposerFilterCellTagsExpandCollapse();
  v101 = (char *)v97;
  ObjectType = (uint64_t)v101;
  v102 = v213;
  UICollectionView.CellRegistration.init(handler:)(sub_10026DC60, v99, v100, &type metadata for FolderComposerFilterDataSource.Item);
  v179 = *(id *)&v101[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView];
  v103 = v231;
  (*(void (**)(char *, char *, uint64_t))(v231 + 16))(v206, v223, v257);
  v104 = v233;
  (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v209, v49, v259);
  v105 = v232;
  (*(void (**)(char *, char *, uint64_t))(v232 + 16))(v208, v220, v258);
  (*(void (**)(char *, char *, uint64_t))(v234 + 16))(v211, v216, v260);
  (*(void (**)(char *, char *, uint64_t))(v244 + 16))(v212, v250, v262);
  v106 = v238;
  (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v215, v247, v264);
  v107 = v237;
  (*(void (**)(char *, char *, uint64_t))(v237 + 16))(v214, v248, v263);
  (*(void (**)(char *, char *, uint64_t))(v255 + 16))(v221, v239, v242);
  v108 = v245;
  (*(void (**)(char *, char *, uint64_t))(v245 + 16))(v224, v235, v246);
  (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v217, v243, v265);
  (*(void (**)(char *, char *, uint64_t))(v252 + 16))(v219, v241, v266);
  (*(void (**)(char *, char *, uint64_t))(v254 + 16))(v222, v240, v267);
  (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v225, v89, v251);
  (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v227, v93, v253);
  (*(void (**)(char *, char *, uint64_t))(v270 + 16))(v228, v98, v256);
  v109 = v218;
  (*(void (**)(char *, char *, uint64_t))(v218 + 16))(v229, v102, v230);
  (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v226, v236, v261);
  v110 = *(unsigned __int8 *)(v103 + 80);
  v178 = (v110 + 16) & ~v110;
  v111 = *(unsigned __int8 *)(v104 + 80);
  v181 = (v181 + v111 + v178) & ~v111;
  v112 = *(unsigned __int8 *)(v105 + 80);
  v183 = (v183 + v112 + v181) & ~v112;
  v113 = v110 | v111;
  v114 = v234;
  v115 = *(unsigned __int8 *)(v234 + 80);
  v116 = (v184 + v115 + v183) & ~v115;
  v117 = v112 | v115;
  v118 = v244;
  v119 = *(unsigned __int8 *)(v244 + 80);
  v120 = (v185 + v119 + v116) & ~v119;
  v121 = v113 | v117;
  v122 = *(unsigned __int8 *)(v106 + 80);
  v123 = (v186 + v122 + v120) & ~v122;
  v124 = v119 | v122;
  v125 = *(unsigned __int8 *)(v107 + 80);
  v185 = (v188 + v125 + v123) & ~v125;
  v126 = v124 | v125;
  v127 = v255;
  v128 = *(unsigned __int8 *)(v255 + 80);
  v186 = (v187 + v128 + v185) & ~v128;
  v129 = v121 | v126;
  v130 = *(unsigned __int8 *)(v108 + 80);
  v187 = (v193 + v130 + v186) & ~v130;
  v131 = v128 | v130;
  v132 = v249;
  v133 = *(unsigned __int8 *)(v249 + 80);
  v188 = (v194 + v133 + v187) & ~v133;
  v134 = v131 | v133;
  v135 = v252;
  v136 = *(unsigned __int8 *)(v252 + 80);
  v190 = (v190 + v136 + v188) & ~v136;
  v137 = v134 | v136;
  v138 = v254;
  v139 = *(unsigned __int8 *)(v254 + 80);
  v193 = (v191 + v139 + v190) & ~v139;
  v140 = v129 | v137;
  v141 = *(unsigned __int8 *)(v269 + 80);
  v194 = (v192 + v141 + v193) & ~v141;
  v142 = v139 | v141;
  v143 = *(unsigned __int8 *)(v268 + 80);
  v196 = (v196 + v143 + v194) & ~v143;
  v144 = v142 | v143;
  v145 = *(unsigned __int8 *)(v270 + 80);
  v197 = (v197 + v145 + v196) & ~v145;
  v146 = v144 | v145;
  v147 = *(unsigned __int8 *)(v109 + 80);
  v198 = (v198 + v147 + v197) & ~v147;
  v148 = v140 | v146 | v147;
  v149 = *(unsigned __int8 *)(v271 + 80);
  v199 = (v199 + v149 + v198) & ~v149;
  v150 = swift_allocObject(&unk_100562248, v199 + v195, v148 | v149 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v231 + 32))(v150 + v178, v206, v257);
  (*(void (**)(uint64_t, char *, uint64_t))(v233 + 32))(v150 + v181, v209, v259);
  (*(void (**)(uint64_t, char *, uint64_t))(v232 + 32))(v150 + v183, v208, v258);
  (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v150 + v116, v211, v260);
  (*(void (**)(uint64_t, char *, uint64_t))(v118 + 32))(v150 + v120, v212, v262);
  (*(void (**)(uint64_t, char *, uint64_t))(v238 + 32))(v150 + v123, v215, v264);
  (*(void (**)(uint64_t, char *, uint64_t))(v237 + 32))(v150 + v185, v214, v263);
  (*(void (**)(uint64_t, char *, uint64_t))(v127 + 32))(v150 + v186, v221, v242);
  (*(void (**)(uint64_t, char *, uint64_t))(v245 + 32))(v150 + v187, v224, v246);
  (*(void (**)(uint64_t, char *, uint64_t))(v132 + 32))(v150 + v188, v217, v265);
  (*(void (**)(uint64_t, char *, uint64_t))(v135 + 32))(v150 + v190, v219, v266);
  (*(void (**)(uint64_t, char *, uint64_t))(v138 + 32))(v150 + v193, v222, v267);
  (*(void (**)(uint64_t, char *, uint64_t))(v269 + 32))(v150 + v194, v225, v251);
  (*(void (**)(uint64_t, char *, uint64_t))(v268 + 32))(v150 + v196, v227, v253);
  (*(void (**)(uint64_t, char *, uint64_t))(v270 + 32))(v150 + v197, v228, v256);
  v151 = v218;
  v152 = v230;
  (*(void (**)(uint64_t, char *, uint64_t))(v218 + 32))(v150 + v198, v229, v230);
  (*(void (**)(uint64_t, char *, uint64_t))(v271 + 32))(v150 + v199, v226, v261);
  v153 = objc_allocWithZone((Class)sub_100012E18((uint64_t *)&unk_1005D6430));
  v154 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v179, sub_10026E20C, v150);
  v155 = (void *)ObjectType;
  v156 = *(void **)(ObjectType
                  + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource____lazy_storage___diffableDataSource);
  *(_QWORD *)(ObjectType
            + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource____lazy_storage___diffableDataSource) = v154;
  v157 = v155;

  v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  v160 = v159;
  v161 = swift_allocObject(&unk_100562270, 24, 7);
  *(_QWORD *)(v161 + 16) = v157;
  v162 = type metadata accessor for FolderComposerFilterHeader();
  v163 = v157;
  v164 = v200;
  v165 = UICollectionView.SupplementaryRegistration.init(elementKind:handler:)(v158, v160, sub_10026E554, v161, v162);
  v166 = (void *)sub_100265BD8(v165);
  v167 = v202;
  v168 = v201;
  v169 = v204;
  (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v201, v164, v204);
  v170 = *(unsigned __int8 *)(v167 + 80);
  v171 = v167;
  v172 = (v170 + 16) & ~v170;
  v173 = swift_allocObject(&unk_100562298, v172 + v203, v170 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v171 + 32))(v173 + v172, v168, v169);
  dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter(sub_10026E5C0, v173);

  v175 = sub_100265BD8(v174);
  swift_release(v182);
  (*(void (**)(char *, uint64_t))(v171 + 8))(v164, v169);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v213, v152);
  (*(void (**)(char *, uint64_t))(v270 + 8))(v210, v256);
  (*(void (**)(char *, uint64_t))(v268 + 8))(v207, v253);
  (*(void (**)(char *, uint64_t))(v269 + 8))(v205, v251);
  (*(void (**)(char *, uint64_t))(v271 + 8))(v236, v261);
  (*(void (**)(char *, uint64_t))(v245 + 8))(v235, v246);
  (*(void (**)(char *, uint64_t))(v255 + 8))(v239, v242);
  (*(void (**)(char *, uint64_t))(v254 + 8))(v240, v267);
  (*(void (**)(char *, uint64_t))(v252 + 8))(v241, v266);
  (*(void (**)(char *, uint64_t))(v249 + 8))(v243, v265);
  (*(void (**)(char *, uint64_t))(v238 + 8))(v247, v264);
  (*(void (**)(char *, uint64_t))(v237 + 8))(v248, v263);
  (*(void (**)(char *, uint64_t))(v244 + 8))(v250, v262);
  (*(void (**)(char *, uint64_t))(v234 + 8))(v216, v260);
  (*(void (**)(char *, uint64_t))(v233 + 8))(v180, v259);
  (*(void (**)(char *, uint64_t))(v232 + 8))(v220, v258);
  (*(void (**)(char *, uint64_t))(v231 + 8))(v223, v257);
  return v175;
}

id sub_100267A38(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v10;
  id v11;
  char *v12;
  Class isa;
  id v14;
  char *v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  objc_class *ObjectType;
  objc_super v24;

  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentingViewController] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource____lazy_storage___diffableDataSource] = 0;
  v10 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection;
  v11 = objc_allocWithZone((Class)ICFilterSelection);
  sub_1000163BC(0, &qword_1005D6360, ICFilterTypeSelection_ptr);
  v12 = v5;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v11, "initWithFilterTypeSelections:joinOperator:", isa, 0);

  *(_QWORD *)&v5[v10] = v14;
  v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_popoverSelectionObservation] = 0;
  v15 = &v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_tagRowLimit];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_enabledSections] = _swiftEmptyArrayStorage;
  v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem] = 35;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView] = a1;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_accountObjectID] = a2;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_context] = a3;
  v16 = &v12[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentViewControllerBlock];
  *(_QWORD *)v16 = a4;
  *((_QWORD *)v16 + 1) = a5;
  v17 = a3;
  swift_retain(a5);
  v18 = a1;
  v19 = a2;

  v24.receiver = v12;
  v24.super_class = ObjectType;
  v20 = objc_msgSendSuper2(&v24, "init");
  objc_msgSend(v18, "setDelegate:", v20);

  swift_release(a5);
  return v20;
}

void sub_100267C24()
{
  _BYTE *v0;
  uint64_t v1;
  id v2;
  Class isa;
  id v4;
  char *v5;

  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentingViewController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource____lazy_storage___diffableDataSource] = 0;
  v1 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection;
  v2 = objc_allocWithZone((Class)ICFilterSelection);
  sub_1000163BC(0, &qword_1005D6360, ICFilterTypeSelection_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, "initWithFilterTypeSelections:joinOperator:", isa, 0);

  *(_QWORD *)&v0[v1] = v4;
  v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_popoverSelectionObservation] = 0;
  v5 = &v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_tagRowLimit];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_enabledSections] = _swiftEmptyArrayStorage;
  v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem] = 35;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x8000000100484AB0, "MobileNotes/FolderComposerFilterDataSource.swift", 48, 2, 309, 0);
  __break(1u);
}

_UNKNOWN **sub_100267D70()
{
  char *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  char *v7;
  char isEscapingClosureAtFileLocation;
  _UNKNOWN **result;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)();
  _QWORD v17[5];
  uint64_t v18;
  char v19;

  v19 = 0;
  v1 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_context];
  if (!v1)
  {
    v2 = 0;
    v16 = 0;
    goto LABEL_7;
  }
  v2 = (_QWORD *)swift_allocObject(&unk_100562450, 40, 7);
  v2[2] = v1;
  v2[3] = v0;
  v2[4] = &v19;
  v3 = swift_allocObject(&unk_100562478, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10026E7C4;
  *(_QWORD *)(v3 + 24) = v2;
  v17[4] = sub_1000165D0;
  v18 = v3;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_100016618;
  v17[3] = &unk_100562490;
  v4 = _Block_copy(v17);
  v5 = v18;
  v6 = v1;
  v7 = v0;
  swift_retain(v3);
  swift_release(v5);
  objc_msgSend(v6, "performBlockAndWait:", v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 116, 522, 36, 1);
  result = (_UNKNOWN **)swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    if (v19 == 1)
    {
      v10 = objc_msgSend((id)objc_opt_self(ICFilterSelection), "cloudSpecificFilterTypes");
      v11 = sub_1000163BC(0, (unint64_t *)&unk_1005D8C50, NSNumber_ptr);
      v12 = sub_10026E740();
      v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v11, v12);

      sub_10026D4A8((uint64_t)&off_100556538, v13);
      v15 = v14;
      swift_bridgeObjectRelease(v13);
      sub_100012C50((uint64_t)sub_10026E7C4, (uint64_t)v2);
      return (_UNKNOWN **)v15;
    }
    v16 = sub_10026E7C4;
LABEL_7:
    sub_100012C50((uint64_t)v16, (uint64_t)v2);
    return &off_100556538;
  }
  __break(1u);
  return result;
}

void sub_100267F7C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];

  v10 = sub_100012E18(&qword_1005D50D0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = a2 + 16;
  v15 = swift_projectBox(a3);
  if ((a1 & 1) != 0)
  {
    swift_beginAccess(v14, v32, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (!Strong)
      goto LABEL_7;
    v17 = (void *)Strong;
    v18 = (void *)sub_100265BD8(Strong);

    swift_beginAccess(v15, v31, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v13, 1, a4, a5);
  }
  else
  {
    swift_beginAccess(v14, v32, 0, 0);
    v19 = swift_unknownObjectWeakLoadStrong(v14);
    if (!v19)
      goto LABEL_7;
    v20 = (void *)v19;
    v18 = (void *)sub_100265BD8(v19);

    swift_beginAccess(v15, v31, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)(v13, a4, a5);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_7:
  swift_beginAccess(v14, v30, 0, 0);
  v21 = swift_unknownObjectWeakLoadStrong(v14);
  if (v21)
  {
    v22 = (void *)v21;
    sub_100268188();

  }
  swift_beginAccess(v14, v29, 0, 0);
  v23 = swift_unknownObjectWeakLoadStrong(v14);
  if (v23)
  {
    v24 = (void *)v23;
    sub_100268368();

  }
  swift_beginAccess(v14, v28, 0, 0);
  v25 = swift_unknownObjectWeakLoadStrong(v14);
  if (v25)
  {
    v26 = (void *)v25;
    sub_10026876C();

  }
}

uint64_t sub_100268188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  NSString *v16;
  Class isa;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for IndexPath(0);
  v26 = *(_QWORD *)(v1 - 8);
  v27 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005D50D0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v0;
  v9 = (void *)sub_100265BD8(v6);
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  v10 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v24 = v10;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = 0;
    v13 = *(void **)(v25 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView);
    v14 = v24 + 32;
    do
    {
      v15 = *(_BYTE *)(v14 + v12);
      v16 = UICollectionElementKindSectionHeader;
      IndexPath.init(row:section:)(0, v12);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v3, v27);
      v18 = objc_msgSend(v13, "supplementaryViewForElementKind:atIndexPath:", v16, isa);

      if (v18)
      {
        v19 = type metadata accessor for FolderComposerFilterHeader();
        v20 = swift_dynamicCastClass(v18, v19);
        if (v20)
        {
          v21 = (char *)v20;
          v22 = v18;
          sub_10026BEA0(v21, v15);

        }
      }
      ++v12;
    }
    while (v11 != v12);
  }
  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_100268368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 v15;
  void *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Class isa;
  id v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  Class v33;
  id v34;
  uint64_t v35;
  char *v36;
  void *v37;
  void *v39;
  Class v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  char v49;
  unsigned __int8 v50;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D6350);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v44 - v5;
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v45 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v44 - v12;
  v14 = 0;
  v47 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView;
  do
  {
    v15 = *((_BYTE *)&off_100556C88 + v14 + 32);
    v16 = (void *)sub_100265BD8(v11);
    v50 = v15;
    dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v50);

    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v17(v6, 1, v7) == 1)
    {
      v11 = sub_100012DDC((uint64_t)v6, (uint64_t *)&unk_1005D6350);
      goto LABEL_3;
    }
    v48 = v17;
    v18 = v7;
    v19 = v8;
    v20 = v18;
    (*(void (**)(char *, char *))(v8 + 32))(v13, v6);
    v21 = v1;
    v22 = *(void **)(v1 + v47);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v24 = objc_msgSend(v22, "cellForItemAtIndexPath:", isa);

    if (v24)
    {
      v25 = type metadata accessor for FolderComposerFilterCellDatePicker(0);
      v26 = (char *)swift_dynamicCastClass(v24, v25);
      if (v26)
      {
        sub_10026A92C(v26, v15);

        v1 = v21;
        v8 = v19;
        v27 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
        v7 = v20;
        v11 = v27(v13, v20);
        v17 = v48;
        goto LABEL_3;
      }

    }
    v11 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v13, v20);
    v1 = v21;
    v8 = v19;
    v7 = v20;
    v17 = v48;
LABEL_3:
    ++v14;
  }
  while (v14 != 4);
  v28 = (void *)sub_100265BD8(v11);
  v49 = 30;
  v29 = (uint64_t)v46;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v49);

  if (v17((char *)v29, 1, v7) == 1)
  {
    v30 = sub_100012DDC(v29, (uint64_t *)&unk_1005D6350);
    v31 = v45;
  }
  else
  {
    v31 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v45, v29, v7);
    v32 = *(void **)(v1 + v47);
    v33 = IndexPath._bridgeToObjectiveC()().super.isa;
    v34 = objc_msgSend(v32, "cellForItemAtIndexPath:", v33);

    if (v34)
    {
      v35 = type metadata accessor for FolderComposerFilterCellDateRangePicker();
      v36 = (char *)swift_dynamicCastClass(v34, v35);
      if (v36)
        sub_10026B140(v36);

    }
    v30 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v31, v7);
    v29 = (uint64_t)v46;
  }
  v37 = (void *)sub_100265BD8(v30);
  v49 = 31;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v49);

  if (v17((char *)v29, 1, v7) == 1)
    return sub_100012DDC(v29, (uint64_t *)&unk_1005D6350);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v31, v29, v7);
  v39 = *(void **)(v1 + v47);
  v40 = IndexPath._bridgeToObjectiveC()().super.isa;
  v41 = objc_msgSend(v39, "cellForItemAtIndexPath:", v40);

  if (v41)
  {
    v42 = type metadata accessor for FolderComposerFilterCellDateRangePicker();
    v43 = (char *)swift_dynamicCastClass(v41, v42);
    if (v43)
      sub_10026B140(v43);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v31, v7);
}

uint64_t sub_10026876C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;
  Class isa;
  id v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned __int8 v19;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v18 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView;
  do
  {
    v11 = *((_BYTE *)&off_100556CD8 + v10 + 32);
    v12 = (void *)sub_100265BD8(result);
    v19 = v11;
    dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v19);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      result = sub_100012DDC((uint64_t)v4, (uint64_t *)&unk_1005D6350);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
      v13 = *(void **)(v1 + v18);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v15 = objc_msgSend(v13, "cellForItemAtIndexPath:", isa);

      if (v15)
      {
        v16 = type metadata accessor for FolderComposerFilterCellEntry();
        v17 = (_BYTE *)swift_dynamicCastClass(v15, v16);
        if (v17)
          sub_10026998C(v17, v11);

      }
      result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    ++v10;
  }
  while (v10 != 3);
  return result;
}

uint64_t sub_100268928(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  double v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005D50D0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocBox(v12, v15);
  v18 = v17;
  v19 = (void *)sub_100265BD8(v16);
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  v20 = sub_100228DBC();
  objc_msgSend(a1, "frame");
  v22 = (void *)sub_1002FB200(v21);

  if (v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v18, v10);
    v23 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v24 = sub_100263C94(13, v23);
    swift_bridgeObjectRelease(v23);
    if (!v24)
    {
      LOBYTE(aBlock[0]) = 12;
      NSDiffableDataSourceSnapshot.insertItems(_:afterItem:)(&off_100556D00, aBlock, v10);
      v25 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
      v26 = (void *)static OS_dispatch_queue.main.getter(v25);
      v27 = swift_allocObject(&unk_100561F00, 24, 7);
      swift_unknownObjectWeakInit(v27 + 16, v2);
      v28 = swift_allocObject(&unk_100562310, 32, 7);
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = v16;
      aBlock[4] = sub_10026E664;
      v42 = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100206734;
      aBlock[3] = &unk_100562328;
      v29 = _Block_copy(aBlock);
      v30 = v42;
      swift_retain(v16);
      v31 = swift_release(v30);
      static DispatchQoS.unspecified.getter(v31);
      aBlock[0] = _swiftEmptyArrayStorage;
      v32 = sub_100225940();
      v33 = sub_100012E18((uint64_t *)&unk_1005D8530);
      v34 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
      v35 = v40;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v40, v32);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v29);
      _Block_release(v29);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v35);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v38);
    }
  }
  return swift_release(v16);
}

uint64_t sub_100268C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  void *v12;
  _BYTE v13[24];
  _BYTE v14[24];

  v4 = sub_100012E18(&qword_1005D50D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = a1 + 16;
  v9 = swift_projectBox(a2);
  swift_beginAccess(v8, v14, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v8);
  if (result)
  {
    v11 = (void *)result;
    v12 = (void *)sub_100265BD8(result);

    swift_beginAccess(v9, v13, 0, 0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v7, 1, 0, 0);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_100268D98(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = a3;
  v14 = a1;
  LOBYTE(a5) = sub_10026E7E0((uint64_t)v12, a5);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return a5 & 1;
}

void sub_100268E5C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*a1, "participantUserIDs");
  v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  *a2 = v4;
}

void sub_100268EBC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*a1, "folderIdentifiers");
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a2 = v4;
}

uint64_t sub_100268F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[15];
  char v17;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (void *)sub_100265BD8(v7);
  v17 = 12;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v17);

  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100012DDC((uint64_t)v4, (uint64_t *)&unk_1005D6350);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v9, v4, v5);
    v11 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v13 = objc_msgSend(v11, "cellForItemAtIndexPath:", isa);

    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    if (v13)
    {
      v14 = type metadata accessor for TagContainerCell();
      result = swift_dynamicCastClass(v13, v14);
      if (result)
        return result;

    }
  }
  return 0;
}

uint64_t sub_10026908C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  Class isa;
  id v15;
  uint64_t v16;
  char *v17;
  _BYTE v18[15];
  char v19;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (void *)sub_100268F14();
  if (v9)
  {
    v10 = v9;
    sub_100268928(v9);

  }
  v11 = (void *)sub_100265BD8(v9);
  v19 = 13;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v19);

  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_100012DDC((uint64_t)v4, (uint64_t *)&unk_1005D6350);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
  v13 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "cellForItemAtIndexPath:", isa);

  if (v15)
  {
    v16 = type metadata accessor for FolderComposerFilterCellTagsExpandCollapse();
    v17 = (char *)swift_dynamicCastClass(v15, v16);
    if (v17)
      sub_10026B9B4(v17);

  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1002692D8(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;

  v4 = objc_msgSend(a1, "ic_existingObjectWithID:", *(_QWORD *)(a2 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_accountObjectID));
  if (v4)
  {
    v5 = v4;
    v6 = objc_opt_self(ICAccount);
    v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
    if (v7)
      v8 = objc_msgSend(v7, "isLocalAccount");
    else
      v8 = 0;

  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
}

uint64_t sub_100269368(char *a1, uint64_t a2, char *a3, char *a4)
{
  void *v6;
  char v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;

  v6 = *(void **)&a4[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection];
  v7 = *a3;
  v8 = *(void **)&a1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection];
  *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection] = v6;
  v9 = v6;

  sub_1003A4650();
  objc_msgSend(a1, "setNeedsUpdateConfiguration");

  v10 = swift_allocObject(&unk_100562428, 25, 7);
  *(_QWORD *)(v10 + 16) = a4;
  *(_BYTE *)(v10 + 24) = v7;
  v11 = (uint64_t (**)(uint64_t))&a1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged];
  v12 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged];
  v13 = (uint64_t)v11[1];
  *v11 = sub_10026E734;
  v11[1] = (uint64_t (*)(uint64_t))v10;
  v14 = a4;
  return sub_100012C50(v12, v13);
}

uint64_t sub_10026942C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BYTE v17[40];

  v4 = sub_100012E18(&qword_1005D50D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100012E18(&qword_1005D0D70);
  inited = swift_initStackObject(v8, v17);
  *(_OWORD *)(inited + 16) = xmmword_100451C20;
  *(_BYTE *)(inited + 32) = a3;
  v10 = (void *)((uint64_t (*)(void))sub_100265BD8)();
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  v11 = sub_10026D738(inited, (uint64_t)v7);
  v12 = v11;
  if (*(_QWORD *)(v11 + 16))
  {
    NSDiffableDataSourceSnapshot.reconfigureItems(_:)((Swift::OpaquePointer)v11);
    v13 = swift_bridgeObjectRelease(v12);
    v14 = (void *)sub_100265BD8(v13);
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v7, 0, 0, 0);

  }
  else
  {
    swift_bridgeObjectRelease(v11);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_setDeallocating(inited);
}

void sub_100269564(char *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;

  v6 = swift_allocObject(&unk_1005623B0, 32, 7);
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = a1;
  v7 = (uint64_t (**)())&a1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  v8 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
  *v7 = sub_10026E718;
  v7[1] = (uint64_t (*)())v6;
  v10 = a4;
  v11 = a1;
  sub_100012C50(v8, v9);
  v12 = *(void **)&v10[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_accountObjectID];
  v13 = *(void **)&v11[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_accountObjectID];
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_accountObjectID] = v12;
  v14 = v12;

  v15 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection], "filterTypeSelectionForFilterType:", (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v11) + 0xC8))());
  v16 = *(void **)&v11[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v15;
  v17 = v15;

  objc_msgSend(v11, "setNeedsUpdateConfiguration");
}

uint64_t sub_100269688(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[5];
  uint64_t v39;

  v34 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v33 - 8);
  v10 = __chkstk_darwin(v33);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection), "setSelection:forFilterType:", *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection), (*(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xC8))(v13));
  *(_BYTE *)(a1 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem) = 35;
  sub_100263F50(1, 0, 0);
  v16 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  static DispatchTime.now()(v17);
  + infix(_:_:)(v12, 0.5);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19 = v12;
  v20 = v33;
  v18(v19, v33);
  v21 = swift_allocObject(&unk_1005623D8, 24, 7);
  *(_QWORD *)(v21 + 16) = a2;
  aBlock[4] = sub_10026E720;
  v39 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_1005623F0;
  v22 = _Block_copy(aBlock);
  v23 = v39;
  v24 = a2;
  v25 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_100225940();
  v27 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v28 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = v27;
  v30 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v28, v34, v26);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v5, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v30);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v20);
}

void sub_10026998C(_BYTE *a1, unsigned __int8 a2)
{
  uint64_t v2;
  char v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  NSString v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  NSString v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  void *v84;
  id v85;
  NSString v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  NSString v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  id v104;

  v3 = a2 - 1;
  if ((a2 - 1) > 0x21u)
    return;
  if (((0x3FFFFE7FFuLL >> v3) & 1) == 0)
    return;
  v6 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection), "filterTypeSelectionForFilterType:", qword_10045F190[v3]);
  if (!v6)
    return;
  v104 = v6;
  v7 = objc_opt_self(ICDateFilterTypeSelection);
  v8 = swift_dynamicCastObjCClass(v104, v7);
  if (v8)
  {
    v9 = (void *)v8;
    a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_showDisclosure] = 0;
    v10 = v104;
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
    if (a2 <= 0x16u)
    {
      if (((1 << a2) & 0x104000) != 0)
      {
        v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v17 = String._bridgeToObjectiveC()();
        v18 = objc_msgSend(v16, "localizedStringForKey:value:table:", v17, 0, 0);

        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v21 = v20;

        v22 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText];
        v23 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8];
        *v22 = v19;
        v22[1] = v21;
        swift_bridgeObjectRelease(v23);
        objc_msgSend(a1, "setNeedsUpdateConfiguration");
        v24 = objc_msgSend(v9, "primaryDateSummary");
LABEL_17:
        v36 = v24;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v39 = v38;

        v40 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText];
        v41 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText + 8];
        *v40 = v37;
        v40[1] = v39;
LABEL_28:
        swift_bridgeObjectRelease(v41);
        objc_msgSend(a1, "setNeedsUpdateConfiguration");

        goto LABEL_29;
      }
      if (((1 << a2) & 0x208000) != 0)
      {
        v25 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v26 = String._bridgeToObjectiveC()();
        v27 = objc_msgSend(v25, "localizedStringForKey:value:table:", v26, 0, 0);

        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

        v31 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText];
        v32 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8];
        *v31 = v28;
        v31[1] = v30;
        swift_bridgeObjectRelease(v32);
        objc_msgSend(a1, "setNeedsUpdateConfiguration");
        v33 = objc_msgSend(v9, "secondaryDateSummary");
        if (v33)
          goto LABEL_25;
        goto LABEL_26;
      }
      if (((1 << a2) & 0x410000) != 0)
      {
        if (objc_msgSend((id)objc_opt_self(ICLocalizationUtilities), "isArabic"))
        {
          v11 = objc_msgSend(v9, "relativeRangeAmountAndTimeInterval");
          if (v11)
          {
            v12 = v11;
            v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
            v15 = v14;

          }
          else
          {
            v13 = 0;
            v15 = 0;
          }
          v47 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText];
          v48 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8];
          *v47 = v13;
          v47[1] = v15;
          swift_bridgeObjectRelease(v48);
          objc_msgSend(a1, "setNeedsUpdateConfiguration");
          v33 = objc_msgSend(v9, "relativeRangeLabel");
          if (!v33)
          {
            v49 = 0;
            v50 = 0xE000000000000000;
LABEL_27:
            v55 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText];
            v41 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText + 8];
            *v55 = v49;
            v55[1] = v50;
            goto LABEL_28;
          }
LABEL_25:
          v53 = v33;
          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          v50 = v54;

          goto LABEL_27;
        }
        v42 = objc_msgSend(v9, "relativeRangeLabel");
        if (v42)
        {
          v43 = v42;
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v46 = v45;

        }
        else
        {
          v44 = 0;
          v46 = 0xE000000000000000;
        }
        v51 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText];
        v52 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8];
        *v51 = v44;
        v51[1] = v46;
        swift_bridgeObjectRelease(v52);
        objc_msgSend(a1, "setNeedsUpdateConfiguration");
        v33 = objc_msgSend(v9, "relativeRangeAmountAndTimeInterval");
        if (v33)
          goto LABEL_25;
LABEL_26:
        v49 = 0;
        v50 = 0;
        goto LABEL_27;
      }
    }
    v34 = &a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText];
    v35 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8];
    *v34 = 0;
    v34[1] = 0;
    swift_bridgeObjectRelease(v35);
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
    v24 = objc_msgSend(v9, "primaryDateSummary");
    goto LABEL_17;
  }
LABEL_29:
  v56 = objc_opt_self(ICParticipantsFilterTypeSelection);
  v57 = swift_dynamicCastObjCClass(v104, v56);
  if (v57)
  {
    v58 = (void *)v57;
    a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_showDisclosure] = 1;
    v59 = v104;
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
    v60 = (void *)objc_opt_self(NSBundle);
    v61 = objc_msgSend(v60, "mainBundle");
    v62 = String._bridgeToObjectiveC()();
    v63 = objc_msgSend(v61, "localizedStringForKey:value:table:", v62, 0, 0);

    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v66 = v65;

    v67 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText];
    v68 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8];
    *v67 = v64;
    v67[1] = v66;
    swift_bridgeObjectRelease(v68);
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
    v69 = objc_msgSend(v58, "participantUserIDs");
    v70 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    v71 = *(_QWORD *)(v70 + 16);
    swift_bridgeObjectRelease(v70);
    if (v71)
    {
      v72 = objc_msgSend(v58, "summary");
    }
    else
    {
      v73 = objc_msgSend(v60, "mainBundle");
      v74 = String._bridgeToObjectiveC()();
      v72 = objc_msgSend(v73, "localizedStringForKey:value:table:", v74, 0, 0);

    }
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v77 = v76;

    v78 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText];
    v79 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText + 8];
    *v78 = v75;
    v78[1] = v77;
    swift_bridgeObjectRelease(v79);
    objc_msgSend(a1, "setNeedsUpdateConfiguration");

  }
  v80 = objc_opt_self(ICFoldersFilterTypeSelection);
  v81 = swift_dynamicCastObjCClass(v104, v80);
  if (v81)
  {
    v82 = (void *)v81;
    a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_showDisclosure] = 1;
    v83 = v104;
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
    v84 = (void *)objc_opt_self(NSBundle);
    v85 = objc_msgSend(v84, "mainBundle");
    v86 = String._bridgeToObjectiveC()();
    v87 = objc_msgSend(v85, "localizedStringForKey:value:table:", v86, 0, 0);

    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v90 = v89;

    v91 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText];
    v92 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_leadingText + 8];
    *v91 = v88;
    v91[1] = v90;
    swift_bridgeObjectRelease(v92);
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
    v93 = objc_msgSend(v82, "folderIdentifiers");
    v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v95 = *(_QWORD *)(v94 + 16);
    swift_bridgeObjectRelease(v94);
    if (v95)
    {
      v96 = objc_msgSend(v82, "folderSummaryList");
    }
    else
    {
      v97 = objc_msgSend(v84, "mainBundle");
      v98 = String._bridgeToObjectiveC()();
      v96 = objc_msgSend(v97, "localizedStringForKey:value:table:", v98, 0, 0);

    }
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    v101 = v100;

    v102 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText];
    v103 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerFilterCellEntry_trailingText + 8];
    *v102 = v99;
    v102[1] = v101;
    swift_bridgeObjectRelease(v103);
    objc_msgSend(a1, "setNeedsUpdateConfiguration");

  }
}

void sub_10026A264(char *a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  void (**v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *a3;
  v7 = swift_allocObject(&unk_100562388, 25, 7);
  *(_QWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 24) = v6;
  v8 = (void (**)(uint64_t))&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_dateSelectionChanged];
  v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_dateSelectionChanged];
  v10 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_dateSelectionChanged + 8];
  *v8 = sub_10026E6C4;
  v8[1] = (void (*)(uint64_t))v7;
  v11 = a4;
  sub_100012C50(v9, v10);
  sub_10026A92C(a1, v6);
}

void sub_10026A2F8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  Class v28;
  SEL *v29;
  unsigned int v30;
  Class v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  char **v38;
  void *v39;
  Class v40;
  id v41;
  uint64_t v42;
  char *v43;
  Class v44;
  uint64_t v45;
  int v46;
  Class v47;
  void *v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  void *v50;
  Class v51;
  id v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  void *v56;
  Class v57;
  id v58;
  _BYTE *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  int v63;
  int v64;
  id v65;
  Class isa;
  char v67;
  char v68;
  char v69;

  v3 = sub_100012E18((uint64_t *)&unk_1005D6350);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v61 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v61 - v10;
  v12 = type metadata accessor for IndexPath(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v61 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v61 - v20;
  v22 = a2 - 1;
  if ((a2 - 1) > 0x21u)
    return;
  if (((0x3FFFFE7FFuLL >> v22) & 1) == 0)
    return;
  v23 = objc_msgSend(*(id *)((char *)isa + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection), "filterTypeSelectionForFilterType:", qword_10045F190[v22]);
  if (!v23)
    return;
  v65 = v23;
  v24 = objc_opt_self(ICDateFilterTypeSelection);
  v25 = swift_dynamicCastObjCClass(v65, v24);
  if (!v25)
    goto LABEL_22;
  if (*((_BYTE *)isa + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries) == 1)
  {
    v26 = (void *)v25;
    v27 = (a2 - 26);
    if (v27 >= 4)
    {
      isa = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v26, "setPrimaryDate:", isa);

    }
    else
    {
      v28 = isa;
      v29 = (SEL *)off_100562580[(char)(a2 - 26)];
      v30 = 0x1C1D1A1Bu >> (8 * v27);
      v31 = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v26, *v29, v31);

      v33 = (void *)sub_100265BD8(v32);
      v67 = v30;
      dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v67);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
      {

        sub_100012DDC((uint64_t)v11, (uint64_t *)&unk_1005D6350);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v21, v11, v12);
        v39 = *(void **)((char *)v28 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView);
        v40 = IndexPath._bridgeToObjectiveC()().super.isa;
        v41 = objc_msgSend(v39, "cellForItemAtIndexPath:", v40);

        if (v41)
        {
          v42 = type metadata accessor for FolderComposerFilterCellDatePicker(0);
          v43 = (char *)swift_dynamicCastClass(v41, v42);
          if (v43)
            sub_10026A92C(v43, v30);

        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
      }
    }
    return;
  }
  v34 = (void *)v25;
  v35 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem;
  v36 = 0;
  v37 = 15;
  v38 = &selRef_setPrimaryDate_;
  switch(*((_BYTE *)isa + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem))
  {
    case 0xE:
      break;
    case 0xF:
      v36 = 0;
      v37 = 14;
      goto LABEL_20;
    case 0x14:
      v36 = 0;
      v37 = 21;
      break;
    case 0x15:
      v36 = 0;
      v37 = 20;
LABEL_20:
      v38 = &selRef_setSecondaryDate_;
      break;
    default:
      v37 = 35;
      v36 = 1;
      v38 = &selRef_setPrimaryDate_;
      break;
  }
  v63 = v37;
  v64 = v36;
  v44 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v34, *v38, v44);

  v46 = *((unsigned __int8 *)isa + v35);
  if (v46 == 35)
  {
LABEL_22:

    return;
  }
  v47 = isa;
  v48 = (void *)sub_100265BD8(v45);
  v69 = v46;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v69);

  v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v49(v9, 1, v12) == 1)
  {

    sub_100012DDC((uint64_t)v9, (uint64_t *)&unk_1005D6350);
    return;
  }
  v62 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v62(v19, v9, v12);
  v50 = *(void **)((char *)v47 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView);
  v51 = IndexPath._bridgeToObjectiveC()().super.isa;
  v52 = objc_msgSend(v50, "cellForItemAtIndexPath:", v51);

  if (!v52)
  {
LABEL_30:

    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    return;
  }
  v53 = type metadata accessor for FolderComposerFilterCellEntry();
  v54 = (_BYTE *)swift_dynamicCastClass(v52, v53);
  if (!v54)
  {

    goto LABEL_30;
  }
  v61 = v53;
  sub_10026998C(v54, v46);
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);

  }
  else
  {
    v56 = (void *)sub_100265BD8(v55);
    v68 = v63;
    dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v68);

    if (v49(v6, 1, v12) == 1)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);

      sub_100012DDC((uint64_t)v6, (uint64_t *)&unk_1005D6350);
    }
    else
    {
      v62(v16, v6, v12);
      v57 = IndexPath._bridgeToObjectiveC()().super.isa;
      v58 = objc_msgSend(v50, "cellForItemAtIndexPath:", v57);

      if (v58)
      {
        v59 = (_BYTE *)swift_dynamicCastClass(v58, v61);
        if (v59)
          sub_10026998C(v59, v63);

      }
      v60 = *(void (**)(char *, uint64_t))(v13 + 8);
      v60(v16, v12);
      v60(v19, v12);
    }
  }
}

void sub_10026A92C(char *a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _BYTE v47[24];

  v5 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v6 = __chkstk_darwin(v5);
  v8 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v6);
  v11 = &v47[-v10 - 8];
  __chkstk_darwin(v9);
  v13 = &v47[-v12 - 8];
  v14 = sub_100266074(a2);
  if ((v15 & 1) != 0)
    goto LABEL_8;
  v16 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection), "filterTypeSelectionForFilterType:", v14);
  if (!v16)
    goto LABEL_8;
  v17 = v16;
  v18 = objc_opt_self(ICDateFilterTypeSelection);
  v19 = (void *)swift_dynamicCastObjCClass(v17, v18);
  if (!v19)
  {

LABEL_8:
    v24 = &a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_popoverLeadingText];
    v25 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_popoverLeadingText + 8];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    swift_bridgeObjectRelease(v25);
    static Date.now.getter(objc_msgSend(a1, "setNeedsUpdateConfiguration"));
    v26 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 0, 1, v26);
    v27 = (uint64_t)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_date];
    swift_beginAccess(&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_date], v47, 33, 0);
    sub_1001CE91C((uint64_t)v8, v27);
    objc_msgSend(a1, "setNeedsUpdateConfiguration", swift_endAccess(v47).n128_f64[0]);
    sub_100012DDC((uint64_t)v8, (uint64_t *)&unk_1005D7B20);
    return;
  }
  v20 = v19;
  switch(a2)
  {
    case 0x1Au:
    case 0x1Cu:
      v21 = objc_msgSend(v19, "primaryDate");
      if (v21)
      {
        v22 = v21;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

        v23 = type metadata accessor for Date(0);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 0, 1, v23);
      }
      else
      {
        v31 = type metadata accessor for Date(0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v13, 1, 1, v31);
      }
      v32 = (uint64_t)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_date];
      swift_beginAccess(&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_date], v47, 33, 0);
      sub_1001CE91C((uint64_t)v13, v32);
      *(_QWORD *)&v33 = swift_endAccess(v47).n128_u64[0];
      goto LABEL_15;
    case 0x1Bu:
    case 0x1Du:
      v28 = objc_msgSend(v19, "secondaryDate");
      if (v28)
      {
        v29 = v28;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v28);

        v30 = type metadata accessor for Date(0);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v11, 0, 1, v30);
      }
      else
      {
        v34 = type metadata accessor for Date(0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v11, 1, 1, v34);
      }
      v35 = (uint64_t)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_date];
      swift_beginAccess(&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_date], v47, 33, 0);
      sub_1001CE91C((uint64_t)v11, v35);
      *(_QWORD *)&v33 = swift_endAccess(v47).n128_u64[0];
      v13 = v11;
LABEL_15:
      objc_msgSend(a1, "setNeedsUpdateConfiguration", v33);
      sub_100012DDC((uint64_t)v13, (uint64_t *)&unk_1005D7B20);
      break;
    default:
      break;
  }
  v36 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries;
  a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_prefersPopover] = *(_BYTE *)(v2
                                                                                                  + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries);
  objc_msgSend(a1, "setNeedsUpdateConfiguration");
  if (*(_BYTE *)(v2 + v36) == 1)
  {
    if (objc_msgSend(v20, "selectionType") == (id)6)
    {
      switch(a2)
      {
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
          v39 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v40 = String._bridgeToObjectiveC()();
          v41 = objc_msgSend(v39, "localizedStringForKey:value:table:", v40, 0, 0);

          v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
          v44 = v43;

          v45 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_popoverLeadingText];
          v38 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_popoverLeadingText + 8];
          *v45 = v42;
          v45[1] = v44;
          break;
        default:
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      v37 = &a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_popoverLeadingText];
      v38 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellDatePicker_popoverLeadingText + 8];
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = 0;
    }
    swift_bridgeObjectRelease(v38);
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
  }

}

void sub_10026AE34(char *a1, uint64_t a2, char *a3, void *a4)
{
  char v6;
  uint64_t v7;
  void (**v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *a3;
  v7 = swift_allocObject(&unk_100562360, 25, 7);
  *(_QWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 24) = v6;
  v8 = (void (**)(uint64_t, uint64_t))&a1[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeSelectionChanged];
  v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeSelectionChanged];
  v10 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeSelectionChanged + 8];
  *v8 = sub_10026E690;
  v8[1] = (void (*)(uint64_t, uint64_t))v7;
  v11 = a4;
  sub_100012C50(v9, v10);
  sub_10026B140(a1);
}

void sub_10026AEBC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Class v19;
  uint64_t v20;
  int v21;
  void *v22;
  void *v23;
  Class isa;
  id v25;
  uint64_t v26;
  _BYTE *v27;
  id v28;
  char v29;

  v4 = v3;
  v7 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IndexPath(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a3 - 1;
  if ((a3 - 1) <= 0x21u && ((0x3FFFFE7FFuLL >> v14) & 1) != 0)
  {
    v15 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection), "filterTypeSelectionForFilterType:", qword_10045F190[v14]);
    if (v15)
    {
      v28 = v15;
      v16 = objc_opt_self(ICDateFilterTypeSelection);
      v17 = (void *)swift_dynamicCastObjCClass(v28, v16);
      if (v17
        && (v18 = v17,
            objc_msgSend(v17, "setRelativeRangeSelectionType:", a1),
            v19 = Int._bridgeToObjectiveC()().super.super.isa,
            objc_msgSend(v18, "setRelativeRangeAmount:", v19),
            v19,
            v21 = *(unsigned __int8 *)(v4
                                     + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem),
            v21 != 35))
      {
        v22 = (void *)sub_100265BD8(v20);
        v29 = v21;
        dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v29);

        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
        {

          sub_100012DDC((uint64_t)v9, (uint64_t *)&unk_1005D6350);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
          v23 = *(void **)(v4 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView);
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          v25 = objc_msgSend(v23, "cellForItemAtIndexPath:", isa);

          if (v25)
          {
            v26 = type metadata accessor for FolderComposerFilterCellEntry();
            v27 = (_BYTE *)swift_dynamicCastClass(v25, v26);
            if (v27)
              sub_10026998C(v27, v21);

          }
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        }
      }
      else
      {

      }
    }
  }
}

void sub_10026B140(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  id v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v10;
  id v11;
  void *v12;
  id v13;
  char *v14;
  id v15;
  char *v16;
  id v17;

  v2 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem;
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem)
     - 1;
  if (v3 <= 0x21 && ((0x3FFFFE7FFuLL >> v3) & 1) != 0)
  {
    v5 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection), "filterTypeSelectionForFilterType:", qword_10045F080[(char)v3]);
    if (v5)
    {
      v17 = v5;
      v6 = objc_opt_self(ICDateFilterTypeSelection);
      v7 = (void *)swift_dynamicCastObjCClass(v17, v6);
      if (v7)
      {
        v8 = *(unsigned __int8 *)(v1 + v2);
        if (v8 == 22 || v8 == 16)
        {
          v10 = v7;
          v11 = objc_msgSend(v7, "relativeRangeAmount");
          v12 = v11;
          if (v11)
          {
            v13 = objc_msgSend(v11, "integerValue");

          }
          else
          {
            v13 = 0;
          }
          v14 = &a1[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_amount];
          *(_QWORD *)v14 = v13;
          v14[8] = v12 == 0;
          objc_msgSend(a1, "setNeedsUpdateConfiguration");
          v15 = objc_msgSend(v10, "relativeRangeSelectionType");
          v16 = &a1[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeType];
          *(_QWORD *)v16 = v15;
          v16[8] = 0;
          objc_msgSend(a1, "setNeedsUpdateConfiguration");
        }
      }

    }
  }
}

uint64_t sub_10026B2B4(_BYTE *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  char v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  char *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  char *v28;
  void *v29;
  void *v30;
  id v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  uint64_t v38;
  void (**v39)(void *);
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t (**v44)();
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;

  v6 = 3;
  if (!a4[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_tagRowLimit + 8])
    v6 = *(_QWORD *)&a4[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_tagRowLimit];
  v7 = &a1[OBJC_IVAR___ICTagContainerCell_tagRowLimit];
  v8 = *(_QWORD *)&a1[OBJC_IVAR___ICTagContainerCell_tagRowLimit];
  v9 = a1[OBJC_IVAR___ICTagContainerCell_tagRowLimit + 8];
  *(_QWORD *)v7 = v6;
  v7[8] = 0;
  if ((v9 & 1) != 0 || v6 != v8)
    sub_10022902C();
  v10 = OBJC_IVAR___ICTagContainerCell_allowsContextualMenu;
  a1[OBJC_IVAR___ICTagContainerCell_allowsContextualMenu] = 0;
  v11 = sub_100228DBC();
  v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_allowsContextualMenu] = a1[v10];

  v12 = a1[OBJC_IVAR___ICTagContainerCell_hasGroupInset];
  a1[OBJC_IVAR___ICTagContainerCell_hasGroupInset] = 1;
  if ((v12 & 1) == 0)
  {
    objc_msgSend(a1, "setNeedsLayout");
    objc_msgSend(a1, "layoutIfNeeded");
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
  }
  v13 = a1[OBJC_IVAR___ICTagContainerCell_allowsExclusion];
  a1[OBJC_IVAR___ICTagContainerCell_allowsExclusion] = 1;
  if ((v13 & 1) == 0)
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
  v14 = a1[OBJC_IVAR___ICTagContainerCell_includesNewTagItem];
  a1[OBJC_IVAR___ICTagContainerCell_includesNewTagItem] = 1;
  if ((v14 & 1) == 0)
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
  v15 = a1[OBJC_IVAR___ICTagContainerCell_includesAllTagsItem];
  a1[OBJC_IVAR___ICTagContainerCell_includesAllTagsItem] = 0;
  if (v15 == 1)
    objc_msgSend(a1, "setNeedsUpdateConfiguration");
  v16 = *(void **)&a4[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentingViewController];
  v17 = OBJC_IVAR___ICTagContainerCell_presentingViewController;
  v18 = *(void **)&a1[OBJC_IVAR___ICTagContainerCell_presentingViewController];
  *(_QWORD *)&a1[OBJC_IVAR___ICTagContainerCell_presentingViewController] = v16;
  v19 = v16;

  v20 = sub_100228DBC();
  v21 = *(void **)&a1[v17];
  v22 = *(void **)&v20[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_presentingViewController];
  *(_QWORD *)&v20[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_presentingViewController] = v21;
  v23 = v21;

  v24 = *(void **)&a4[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_accountObjectID];
  v25 = OBJC_IVAR___ICTagContainerCell_defaultAccountObjectID;
  v26 = *(void **)&a1[OBJC_IVAR___ICTagContainerCell_defaultAccountObjectID];
  *(_QWORD *)&a1[OBJC_IVAR___ICTagContainerCell_defaultAccountObjectID] = v24;
  v27 = v24;

  v28 = sub_100228DBC();
  v29 = *(void **)&a1[v25];
  v30 = *(void **)&v28[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_defaultAccountObjectID];
  *(_QWORD *)&v28[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_defaultAccountObjectID] = v29;
  v31 = v29;

  a1[OBJC_IVAR___ICTagContainerCell_preservesSuperviewHorizontalLayoutMargins] = 1;
  objc_msgSend(a1, "setNeedsUpdateConfiguration");
  v32 = (char *)objc_msgSend(*(id *)&a4[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection], "filterTypeSelectionForFilterType:", 0);
  if (v32)
  {
    v33 = v32;
    v34 = objc_opt_self(ICTagSelection);
    v35 = (void *)swift_dynamicCastObjCClass(v33, v34);
    if (v35)
    {
      v36 = v35;
      if (!objc_msgSend(v35, "mode"))
      {
        v37 = v33;
        v33 = sub_100228DBC();
        sub_1002FAE4C(v36, 0);

      }
    }

  }
  v38 = swift_allocObject(&unk_1005622C0, 24, 7);
  *(_QWORD *)(v38 + 16) = a4;
  v39 = (void (**)(void *))&a1[OBJC_IVAR___ICTagContainerCell_selectionDidChange];
  v40 = *(_QWORD *)&a1[OBJC_IVAR___ICTagContainerCell_selectionDidChange];
  v41 = *(_QWORD *)&a1[OBJC_IVAR___ICTagContainerCell_selectionDidChange + 8];
  *v39 = sub_10026E628;
  v39[1] = (void (*)(void *))v38;
  v42 = a4;
  sub_100012C50(v40, v41);
  v43 = swift_allocObject(&unk_1005622E8, 24, 7);
  *(_QWORD *)(v43 + 16) = v42;
  v44 = (uint64_t (**)())&a1[OBJC_IVAR___ICTagContainerCell_dataDidChange];
  v45 = *(_QWORD *)&a1[OBJC_IVAR___ICTagContainerCell_dataDidChange];
  v46 = (uint64_t)v44[1];
  *v44 = sub_10026E630;
  v44[1] = (uint64_t (*)())v43;
  v47 = v42;
  return sub_100012C50(v45, v46);
}

void sub_10026B628(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  void *v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  _BYTE v28[15];
  char v29;

  v4 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v4);
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (void *)sub_100265BD8(v9);
  v29 = 8;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v29);

  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100012DDC((uint64_t)v6, (uint64_t *)&unk_1005D6350);
    return;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v11, v6, v7);
  v13 = *(void **)(a2 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "cellForItemAtIndexPath:", isa);

  if (v15)
  {
    v16 = type metadata accessor for FolderComposerFilterCellTags();
    v17 = swift_dynamicCastClass(v15, v16);
    if (v17
      && (v18 = (char *)v17,
          v19 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection,
          (v20 = *(void **)(v17 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection)) != 0)
      && (v21 = objc_opt_self(ICTagSelection), (v22 = swift_dynamicCastObjCClass(v20, v21)) != 0))
    {
      v23 = (void *)v22;
      v24 = v20;
      if (objc_msgSend(v23, "mode"))
      {
        (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);

        return;
      }
      objc_msgSend(a1, "setTagOperator:", objc_msgSend(v23, "tagOperator"));
      v25 = *(void **)&v18[v19];
      *(_QWORD *)&v18[v19] = a1;
      v26 = a1;
      v27 = v15;

      objc_msgSend(v18, "setNeedsUpdateConfiguration");
      objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection), "setSelection:forFilterType:", v26, 0);

    }
    else
    {

    }
  }
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_10026B8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v0 = sub_100012E18(&qword_1005D50D0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)sub_100265BD8(v2);
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  v6 = sub_10026D738((uint64_t)&off_100556DA0, (uint64_t)v4);
  v7 = v6;
  if (*(_QWORD *)(v6 + 16))
  {
    NSDiffableDataSourceSnapshot.reconfigureItems(_:)((Swift::OpaquePointer)v6);
    v8 = swift_bridgeObjectRelease(v7);
    v9 = (void *)sub_100265BD8(v8);
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v4, 0, 0, 0);

  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return sub_10026908C();
}

id sub_10026B9B4(char *a1)
{
  uint64_t v2;
  void *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = sub_100268F14();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = sub_100228DBC();

    v5 = *(void **)&v4[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
    if (v5 && (v6 = (char *)objc_msgSend(v5, "indexer")) != 0)
    {
      v7 = v6;
      v8 = objc_opt_self(ICTagCoreDataIndexer);
      v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
      if (v9)
        v10 = objc_msgSend(v9, "hiddenTagCount");
      else
        v10 = 0;

    }
    else
    {
      v10 = 0;
      v7 = v4;
    }

  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes42FolderComposerFilterCellTagsExpandCollapse_hiddenTagCount] = v10;
  return objc_msgSend(a1, "setNeedsUpdateConfiguration");
}

void sub_10026BA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10026BAE4@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v4;
  char v6;

  v6 = a2;
  v4 = type metadata accessor for FolderComposerFilterCellEntry();
  return UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(v2, a1, &v6, v4, &type metadata for FolderComposerFilterDataSource.Item);
}

void sub_10026BD7C()
{
  type metadata accessor for FolderComposerFilterCellTags();
  JUMPOUT(0x10026BD54);
}

unint64_t sub_10026BDAC(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  unsigned __int8 v11;
  uint64_t v12;

  v2 = sub_100012E18(&qword_1005D50D0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)sub_100265BD8(v4);
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  v8 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(v2);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  result = IndexPath.section.getter(v9);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v8 + 16))
  {
    v11 = *(_BYTE *)(v8 + result + 32);
    swift_bridgeObjectRelease(v8);
    return sub_10026BEA0(a1, v11);
  }
  __break(1u);
  return result;
}

uint64_t sub_10026BEA0(char *a1, unsigned __int8 a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;

  v4 = a2;
  v5 = sub_100012E18(&qword_1005D50D0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)sub_100265BD8(v7);
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  if (v4 == 12)
  {
    NSDiffableDataSourceSnapshot.numberOfSections.getter(v5);
    v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);
  }
  else
  {
    v14 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(v5);
    v15 = sub_1003DA478(a2, v14);
    v17 = v16;
    swift_bridgeObjectRelease(v14);
    if ((v17 & 1) != 0 || v15 != 1)
    {
      v24 = &a1[OBJC_IVAR____TtC11MobileNotes26FolderComposerFilterHeader_text];
      v23 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes26FolderComposerFilterHeader_text + 8];
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      goto LABEL_8;
    }
    v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);
  }
  v18 = v13;

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes26FolderComposerFilterHeader_text];
  v23 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes26FolderComposerFilterHeader_text + 8];
  *v22 = v19;
  v22[1] = v21;
LABEL_8:
  swift_bridgeObjectRelease(v23);
  objc_msgSend(a1, "setNeedsUpdateConfiguration");
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10026C124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  if (v9 == a2 && v10 == a3)
  {
    swift_bridgeObjectRelease(a3);
    goto LABEL_12;
  }
  v12 = v10;
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0);
  swift_bridgeObjectRelease(v12);
  if ((v13 & 1) != 0)
  {
LABEL_12:
    v19 = type metadata accessor for FolderComposerFilterHeader();
    return UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)(a5, a4, v19);
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionFooter);
  if (v14 == a2 && v15 == a3)
  {
    v18 = a3;
  }
  else
  {
    v17 = v15;
    _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a2, a3, 0);
    v18 = v17;
  }
  swift_bridgeObjectRelease(v18);
  return 0;
}

uint64_t type metadata accessor for FolderComposerFilterDataSource()
{
  return objc_opt_self(_TtC11MobileNotes30FolderComposerFilterDataSource);
}

uint64_t getEnumTagSinglePayload for FolderComposerFilterDataSource.Item(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDE)
    goto LABEL_17;
  if (a2 + 34 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 34) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 34;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 34;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 34;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x23;
  v8 = v6 - 35;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FolderComposerFilterDataSource.Item(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 34 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 34) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDD)
    return ((uint64_t (*)(void))((char *)&loc_10026C3BC + 4 * byte_10045EDAF[v4]))();
  *a1 = a2 + 34;
  return ((uint64_t (*)(void))((char *)sub_10026C3F0 + 4 * byte_10045EDAA[v4]))();
}

uint64_t sub_10026C3F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026C3F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026C400);
  return result;
}

uint64_t sub_10026C40C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026C414);
  *(_BYTE *)result = a2 + 34;
  return result;
}

uint64_t sub_10026C418(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026C420(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FolderComposerFilterDataSource.Item()
{
  return &type metadata for FolderComposerFilterDataSource.Item;
}

uint64_t getEnumTagSinglePayload for FolderComposerFilterDataSource.Section(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FolderComposerFilterDataSource.Section(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_10026C518 + 4 * byte_10045EDB9[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10026C54C + 4 * byte_10045EDB4[v4]))();
}

uint64_t sub_10026C54C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026C554(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10026C55CLL);
  return result;
}

uint64_t sub_10026C568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10026C570);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_10026C574(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026C57C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FolderComposerFilterDataSource.Section()
{
  return &type metadata for FolderComposerFilterDataSource.Section;
}

uint64_t sub_10026C598()
{
  return sub_100016638(&qword_1005D6318, &qword_1005D6320, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10026C5C8()
{
  unint64_t result;

  result = qword_1005D6328;
  if (!qword_1005D6328)
  {
    result = swift_getWitnessTable(&unk_10045EE9C, &type metadata for FolderComposerFilterDataSource.Section);
    atomic_store(result, (unint64_t *)&qword_1005D6328);
  }
  return result;
}

uint64_t sub_10026C60C()
{
  return sub_100016638(&qword_1005D6330, &qword_1005D6338, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10026C63C()
{
  unint64_t result;

  result = qword_1005D6340;
  if (!qword_1005D6340)
  {
    result = swift_getWitnessTable(&unk_10045EF74, &type metadata for FolderComposerFilterDataSource.Item);
    atomic_store(result, (unint64_t *)&qword_1005D6340);
  }
  return result;
}

uint64_t sub_10026C680(unint64_t a1)
{
  return sub_10016AB98(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_10026C698(unint64_t a1)
{
  return sub_10016B03C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_10026C6AC(_QWORD *a1)
{
  return sub_10016B180(0, a1[2], 0, a1);
}

_QWORD *sub_10026C6C0(_QWORD *a1)
{
  return sub_10016B174(0, a1[2], 0, a1);
}

uint64_t sub_10026C6D4(unint64_t a1)
{
  return sub_10016B3C8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_10026C6E8(_QWORD *a1)
{
  return sub_10016B9C8(0, a1[2], 0, a1);
}

uint64_t sub_10026C6FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

char *sub_10026C764(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v15;
  _QWORD *v16;
  char *result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v6 = (_QWORD *)*v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11)
      v15 = v7 + v10;
    else
      v15 = v7;
    v6 = sub_10016ACE0(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  v16 = &v6[2 * a1 + 4];
  result = (char *)swift_arrayDestroy(v16, v9, &type metadata for String);
  if (!v10)
    goto LABEL_20;
  v18 = v6[2];
  v19 = __OFSUB__(v18, a2);
  v20 = v18 - a2;
  if (v19)
    goto LABEL_26;
  if ((v20 & 0x8000000000000000) == 0)
  {
    result = (char *)(v16 + 2);
    v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20])
      result = (char *)memmove(result, v21, 16 * v20);
    v22 = v6[2];
    v19 = __OFADD__(v22, v10);
    v23 = v22 + v10;
    if (!v19)
    {
      v6[2] = v23;
LABEL_20:
      *v16 = a3;
      v16[1] = a4;
      *v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v24 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10026C8E4(uint64_t a1, int64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *result;
  int64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = (char *)sub_10016B174(result, v13, 1, v5);
    v5 = result;
  }
  v14 = v5 + 4;
  v15 = (char *)v5 + a1 + 32;
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = v16 - a2;
  if (__OFSUB__(v16, a2))
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v15 + 1;
    v18 = (char *)v14 + a2;
    if (v15 + 1 != (char *)v14 + a2 || result >= &v18[v17])
      result = (char *)memmove(result, v18, v17);
    v19 = v5[2];
    v20 = __OFADD__(v19, v9);
    v21 = v19 + v9;
    if (!v20)
    {
      v5[2] = v21;
LABEL_20:
      *v15 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v22 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v22, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10026CA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026CD60(a1, a2, a3, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr, (uint64_t (*)(__n128))sub_10016C078);
}

uint64_t sub_10026CA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v7 = a1;
    v6 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v6 < 0)
    v24 = v6;
  else
    v24 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v6);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v6 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v6 < 0)
      v26 = v6;
    else
      v26 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v6);
    goto LABEL_15;
  }
LABEL_37:
  if (v6 < 0)
    v25 = v6;
  else
    v25 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v6);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v6 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v6;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v6);
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v6);
  swift_bridgeObjectRelease(*v4);
  *v4 = v6;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v7);
  v16 = sub_1000163BC(0, (unint64_t *)&unk_1005D6450, UISheetPresentationControllerDetent_ptr);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v6 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v6 < 0)
    v27 = v6;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v6);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v6);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v6 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v6 < 0)
      v29 = v6;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v6);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    v17 = (char *)swift_bridgeObjectRelease(v6);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10026CD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026CD60(a1, a2, a3, &qword_1005D8540, CKShareParticipant_ptr, (uint64_t (*)(__n128))sub_10016C078);
}

uint64_t sub_10026CD60(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5, uint64_t (*a6)(__n128))
{
  uint64_t (*v6)(__n128);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(__n128);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v48;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a6;
    v9 = a3;
    v10 = a2;
    v11 = a1;
    v8 = *v7;
    if (!((unint64_t)*v7 >> 62))
    {
      v13 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13 >= a2)
        goto LABEL_4;
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
  }
  if (v8 < 0)
    v34 = v8;
  else
    v34 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v13 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(v8);
  if (v13 < v10)
    goto LABEL_40;
LABEL_4:
  v12 = v10 - v11;
  if (__OFSUB__(v10, v11))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v13 = (unint64_t)v9 >> 62;
  if (!((unint64_t)v9 >> 62))
  {
    v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v15 = v14 - v12;
    if (!__OFSUB__(v14, v12))
      goto LABEL_7;
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_42:
  if (v9 < 0)
    v8 = v9;
  else
    v8 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v14 = _CocoaArrayWrapper.endIndex.getter(v8);
  swift_bridgeObjectRelease(v9);
  v15 = v14 - v12;
  if (__OFSUB__(v14, v12))
    goto LABEL_47;
LABEL_7:
  v8 = *v7;
  v45 = v15;
  v43 = v13;
  if (!((unint64_t)*v7 >> 62))
  {
    v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v17 = v16 + v15;
    if (!__OFADD__(v16, v15))
      goto LABEL_9;
LABEL_53:
    __break(1u);
LABEL_54:
    if (v14 < 0)
      v37 = v14;
    else
      v37 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v20 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(v14);
    goto LABEL_16;
  }
LABEL_48:
  if (v8 < 0)
    v35 = v8;
  else
    v35 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v36 = _CocoaArrayWrapper.endIndex.getter(v35);
  swift_bridgeObjectRelease(v8);
  v17 = v36 + v45;
  if (__OFADD__(v36, v45))
    goto LABEL_53;
LABEL_9:
  v48 = v14;
  v42 = v6;
  v14 = *v7;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v7);
  *v7 = v14;
  v44 = v9;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v14 & 0x8000000000000000) == 0
    && (v14 & 0x4000000000000000) == 0)
  {
    v19 = v14 & 0xFFFFFFFFFFFFFF8;
    if (v17 <= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v8 = 1;
  }
  if ((unint64_t)v14 >> 62)
    goto LABEL_54;
  v20 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v20 <= v17)
    v20 = v17;
  swift_bridgeObjectRetain(v14);
  v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v20, 1, v14);
  swift_bridgeObjectRelease(*v7);
  *v7 = v14;
  v19 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  v21 = v19 + 32 + 8 * v11;
  v22 = sub_1000163BC(0, a4, a5);
  swift_arrayDestroy(v21, v12, v22);
  v23 = v45;
  if (!v45)
  {
LABEL_29:
    if (v48 < 1)
    {
LABEL_34:
      v32 = swift_bridgeObjectRelease(v44);
      return specialized Array._endMutation()(v32);
    }
    if (v43)
    {
      v30 = swift_bridgeObjectRetain(v44);
      v31 = v42(v30);
      swift_bridgeObjectRelease(v44);
      sub_10026D144(v31 + 32, *(_QWORD *)(v31 + 16), v48, v21, a4, a5);
      swift_release(v31);
      goto LABEL_34;
    }
    if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) == v48)
    {
      swift_arrayInitWithCopy(v21);
      goto LABEL_34;
    }
    goto LABEL_70;
  }
  if (!((unint64_t)v14 >> 62))
  {
    v24 = *(_QWORD *)(v19 + 16);
    v25 = v24 - v10;
    if (!__OFSUB__(v24, v10))
      goto LABEL_22;
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v14 < 0)
    v38 = v14;
  else
    v38 = v19;
  swift_bridgeObjectRetain(v14);
  v39 = _CocoaArrayWrapper.endIndex.getter(v38);
  swift_bridgeObjectRelease(v14);
  v23 = v45;
  v25 = v39 - v10;
  if (__OFSUB__(v39, v10))
    goto LABEL_63;
LABEL_22:
  if ((v25 & 0x8000000000000000) == 0)
  {
    v26 = (char *)(v21 + 8 * v48);
    v27 = (char *)(v19 + 32 + 8 * v10);
    if (v26 != v27 || v26 >= &v27[8 * v25])
    {
      memmove(v26, v27, 8 * v25);
      v23 = v45;
    }
    if (!((unint64_t)v14 >> 62))
    {
      v28 = *(_QWORD *)(v19 + 16);
      v29 = v28 + v23;
      if (!__OFADD__(v28, v23))
      {
LABEL_28:
        *(_QWORD *)(v19 + 16) = v29;
        goto LABEL_29;
      }
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
LABEL_64:
    if (v14 < 0)
      v40 = v14;
    else
      v40 = v19;
    swift_bridgeObjectRetain(v14);
    v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v14);
    v29 = v41 + v45;
    if (!__OFADD__(v41, v45))
      goto LABEL_28;
    goto LABEL_69;
  }
LABEL_71:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10026D144(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  if (a2 == a3)
  {
    if (result)
    {
      sub_1000163BC(0, a5, a6);
      return swift_arrayInitWithCopy(a4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10026D1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v26 = v5;
  else
    v26 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v7);
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v7);
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  v14 = *v3;
  *v3 = v13;
  swift_bridgeObjectRelease(v14);
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v11 + 32;
  v16 = (char *)(v11 + 32 + 8 * v4);
  v17 = type metadata accessor for ICSelectionStateModel(0);
  v18 = (void *)swift_arrayDestroy(v16, v5, v17);
  if (!v6)
    return specialized Array._endMutation()(v18);
  v19 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = v20 - v2;
    if (!__OFSUB__(v20, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v19 < 0)
    v29 = *v3;
  else
    v29 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v3);
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  v18 = (void *)swift_bridgeObjectRelease(v19);
  v21 = v30 - v2;
  if (__OFSUB__(v30, v2))
    goto LABEL_52;
LABEL_21:
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = (char *)(v15 + 8 * v2);
    if (v4 != v2 || v16 >= &v22[8 * v21])
      v18 = memmove(v16, v22, 8 * v21);
    v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v23 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v24 = v23 + v6;
      if (!__OFADD__(v23, v6))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v24;
        return specialized Array._endMutation()(v18);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    v18 = (void *)swift_bridgeObjectRelease(v2);
    v24 = v32 + v6;
    if (!__OFADD__(v32, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v33 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v33, 1046, 0);
  __break(1u);
  return result;
}

void sub_10026D4A8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int v10;
  char v11;
  id v12;
  void *v13;
  char v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = 0;
    v5 = a1 + 32;
    v6 = a2 & 0xC000000000000001;
    if (a2 < 0)
      v7 = a2;
    else
      v7 = a2 & 0xFFFFFFFFFFFFFF8;
    v30 = v7;
    v31 = a2 + 56;
    v8 = _swiftEmptyArrayStorage;
    v26 = a1 + 32;
    v27 = *(_QWORD *)(a1 + 16);
    v25 = a2 & 0xC000000000000001;
    do
    {
      if (v4 <= v2)
        v9 = v2;
      else
        v9 = v4;
      v28 = v8;
      v29 = v9;
      while (1)
      {
        if (v4 == v9)
        {
          __break(1u);
          return;
        }
        v10 = *(unsigned __int8 *)(v5 + v4++);
        v11 = v10 - 1;
        if ((v10 - 1) > 0x21 || ((0x3FFFFE7FFuLL >> v11) & 1) == 0)
          break;
        v12 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", qword_10045F190[v11]);
        v13 = v12;
        if (v6)
        {
          v14 = __CocoaSet.contains(_:)(v12, v30);

          if ((v14 & 1) == 0)
            break;
          if (v4 == v2)
            return;
        }
        else
        {
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_25;
          v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
          v16 = -1 << *(_BYTE *)(a2 + 32);
          v17 = v15 & ~v16;
          if (((*(_QWORD *)(v31 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
            goto LABEL_25;
          sub_1000163BC(0, (unint64_t *)&unk_1005D8C50, NSNumber_ptr);
          v18 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v17);
          v19 = static NSObject.== infix(_:_:)(v18);

          if ((v19 & 1) == 0)
          {
            v20 = ~v16;
            while (1)
            {
              v17 = (v17 + 1) & v20;
              if (((*(_QWORD *)(v31 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
                break;
              v21 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v17);
              v22 = static NSObject.== infix(_:_:)(v21);

              if ((v22 & 1) != 0)
                goto LABEL_23;
            }
LABEL_25:

            v5 = v26;
            v2 = v27;
            v6 = v25;
            break;
          }
LABEL_23:

          v5 = v26;
          v2 = v27;
          v6 = v25;
          v9 = v29;
          if (v4 == v27)
            return;
        }
      }
      v8 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      {
        sub_100137274(0, v28[2] + 1, 1);
        v8 = v28;
      }
      v24 = v8[2];
      v23 = v8[3];
      if (v24 >= v23 >> 1)
      {
        sub_100137274(v23 > 1, v24 + 1, 1);
        v8 = v28;
      }
      v8[2] = v24 + 1;
      *((_BYTE *)v8 + v24 + 32) = v10;
    }
    while (v4 != v2);
  }
}

uint64_t sub_10026D738(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v22 = a2;
  v3 = sub_100012E18(&qword_1005D50D0);
  v4 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = 0;
    v21 = a1 + 32;
    v10 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v9 <= v8)
        v11 = v8;
      else
        v11 = v9;
      while (1)
      {
        if (v9 == v11)
          goto LABEL_25;
        v12 = *(unsigned __int8 *)(v21 + v9++);
        (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v22, v3);
        v13 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v3);
        result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        v14 = *(_QWORD *)(v13 + 16);
        if (!v14)
          goto LABEL_6;
        if (*(unsigned __int8 *)(v13 + 32) == v12)
          break;
        if (v14 != 1)
        {
          v15 = 33;
          while (1)
          {
            v16 = v15 - 31;
            if (__OFADD__(v15 - 32, 1))
              break;
            if (*(unsigned __int8 *)(v13 + v15) == v12)
              goto LABEL_16;
            ++v15;
            if (v16 == v14)
              goto LABEL_6;
          }
          __break(1u);
LABEL_25:
          __break(1u);
          return result;
        }
LABEL_6:
        result = swift_bridgeObjectRelease(v13);
        if (v9 == v8)
          return (uint64_t)v10;
      }
LABEL_16:
      swift_bridgeObjectRelease(v13);
      result = swift_isUniquelyReferenced_nonNull_native(v10);
      v23 = v10;
      if ((result & 1) == 0)
      {
        result = sub_100137274(0, v10[2] + 1, 1);
        v10 = v23;
      }
      v18 = v10[2];
      v17 = v10[3];
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        result = sub_100137274(v17 > 1, v18 + 1, 1);
        v19 = v18 + 1;
        v10 = v23;
      }
      v10[2] = v19;
      *((_BYTE *)v10 + v18 + 32) = v12;
      if (v9 == v8)
        return (uint64_t)v10;
    }
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_10026D924(uint64_t a1, uint64_t a2)
{
  return sub_10026F234(a1, a2, (uint64_t (*)(void))sub_10016B03C, (uint64_t (*)(_QWORD))&type metadata accessor for CollaboratorStatus);
}

char *sub_10026D938(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  _QWORD *v3;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v5 = (char *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = a1 - a2;
  if (__OFSUB__(0, v8))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = v6 - v8;
  if (__OFADD__(v6, v9))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if ((_DWORD)result && v10 <= *((_QWORD *)v5 + 3) >> 1)
  {
    if (!v9)
      goto LABEL_18;
  }
  else
  {
    result = (char *)a3();
    v5 = result;
    if (!v9)
    {
LABEL_18:
      *v3 = v5;
      return result;
    }
  }
  v13 = *((_QWORD *)v5 + 2);
  v14 = v13 - a2;
  if (__OFSUB__(v13, a2))
    goto LABEL_24;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v5[a1 + 32];
    v15 = &v5[a2 + 32];
    if (a1 != a2 || result >= &v15[v14])
      result = (char *)memmove(result, v15, v14);
    v16 = *((_QWORD *)v5 + 2);
    v17 = __OFADD__(v16, v9);
    v18 = v16 + v9;
    if (!v17)
    {
      *((_QWORD *)v5 + 2) = v18;
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_26:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_10026DA90(unint64_t result)
{
  if (result >= 0xD)
    return 13;
  return result;
}

unint64_t sub_10026DAA0(unint64_t result)
{
  if (result >= 0x23)
    return 35;
  return result;
}

unint64_t sub_10026DAB0()
{
  unint64_t result;

  result = qword_1005D6368;
  if (!qword_1005D6368)
  {
    result = swift_getWitnessTable(&unk_10045EE5C, &type metadata for FolderComposerFilterDataSource.Section);
    atomic_store(result, (unint64_t *)&qword_1005D6368);
  }
  return result;
}

unint64_t sub_10026DAF4()
{
  unint64_t result;

  result = qword_1005D6370;
  if (!qword_1005D6370)
  {
    result = swift_getWitnessTable(&unk_10045EF34, &type metadata for FolderComposerFilterDataSource.Item);
    atomic_store(result, (unint64_t *)&qword_1005D6370);
  }
  return result;
}

uint64_t sub_10026DB38()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026DB5C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_10026DB98()
{
  uint64_t v0;

  sub_100267F7C(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10026DBA8(char *a1, uint64_t a2, char *a3)
{
  uint64_t v3;

  return sub_100269368(a1, a2, a3, *(char **)(v3 + 16));
}

void sub_10026DBB0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100269564(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10026DBB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026DBDC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(a1, a2, *a3);
}

void sub_10026DC00(_BYTE *a1, uint64_t a2, unsigned __int8 *a3)
{
  sub_10026998C(a1, *a3);
}

void sub_10026DC24(char *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;

  sub_10026A264(a1, a2, a3, *(void **)(v3 + 16));
}

void sub_10026DC2C(char *a1, uint64_t a2, char *a3)
{
  uint64_t v3;

  sub_10026AE34(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10026DC34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026DC58(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10026B2B4(a1, a2, a3, *(_BYTE **)(v3 + 16));
}

id sub_10026DC60(char *a1)
{
  return sub_10026B9B4(a1);
}

uint64_t sub_10026DC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v88 = sub_100012E18(&qword_1005D6428);
  v86 = *(_QWORD *)(v88 - 8);
  v80 = *(unsigned __int8 *)(v86 + 80);
  v1 = *(_QWORD *)(v86 + 64);
  v87 = sub_100012E18(&qword_1005D6418);
  v84 = *(_QWORD *)(v87 - 8);
  v73 = *(unsigned __int8 *)(v84 + 80);
  v79 = (((v80 + 16) & ~v80) + v1 + v73) & ~v73;
  v2 = *(_QWORD *)(v84 + 64);
  v85 = sub_100012E18(&qword_1005D6420);
  v82 = *(_QWORD *)(v85 - 8);
  v66 = *(unsigned __int8 *)(v82 + 80);
  v76 = (v79 + v2 + v66) & ~v66;
  v3 = *(_QWORD *)(v82 + 64);
  v83 = sub_100012E18(&qword_1005D6410);
  v78 = *(_QWORD *)(v83 - 8);
  v57 = *(unsigned __int8 *)(v78 + 80);
  v72 = (v76 + v3 + v57) & ~v57;
  v4 = *(_QWORD *)(v78 + 64);
  v81 = sub_100012E18(&qword_1005D6408);
  v75 = *(_QWORD *)(v81 - 8);
  v52 = *(unsigned __int8 *)(v75 + 80);
  v69 = (v72 + v4 + v52) & ~v52;
  v5 = *(_QWORD *)(v75 + 64);
  v77 = sub_100012E18(&qword_1005D63F8);
  v71 = *(_QWORD *)(v77 - 8);
  v43 = *(unsigned __int8 *)(v71 + 80);
  v65 = (v69 + v5 + v43) & ~v43;
  v6 = *(_QWORD *)(v71 + 64);
  v74 = sub_100012E18(&qword_1005D6400);
  v68 = *(_QWORD *)(v74 - 8);
  v35 = *(unsigned __int8 *)(v68 + 80);
  v62 = (v65 + v6 + v35) & ~v35;
  v7 = *(_QWORD *)(v68 + 64);
  v70 = sub_100012E18(&qword_1005D63D8);
  v64 = *(_QWORD *)(v70 - 8);
  v32 = *(unsigned __int8 *)(v64 + 80);
  v59 = (v62 + v7 + v32) & ~v32;
  v8 = *(_QWORD *)(v64 + 64);
  v67 = sub_100012E18(&qword_1005D63D0);
  v61 = *(_QWORD *)(v67 - 8);
  v31 = *(unsigned __int8 *)(v61 + 80);
  v55 = (v59 + v8 + v31) & ~v31;
  v9 = *(_QWORD *)(v61 + 64);
  v63 = sub_100012E18(&qword_1005D63F0);
  v58 = *(_QWORD *)(v63 - 8);
  v10 = *(unsigned __int8 *)(v58 + 80);
  v51 = (v55 + v9 + v10) & ~v10;
  v11 = *(_QWORD *)(v58 + 64);
  v60 = sub_100012E18(&qword_1005D63E8);
  v54 = *(_QWORD *)(v60 - 8);
  v12 = *(unsigned __int8 *)(v54 + 80);
  v48 = (v51 + v11 + v12) & ~v12;
  v13 = *(_QWORD *)(v54 + 64);
  v56 = sub_100012E18(&qword_1005D63E0);
  v50 = *(_QWORD *)(v56 - 8);
  v14 = *(unsigned __int8 *)(v50 + 80);
  v45 = (v48 + v13 + v14) & ~v14;
  v15 = *(_QWORD *)(v50 + 64);
  v53 = sub_100012E18(&qword_1005D63C0);
  v47 = *(_QWORD *)(v53 - 8);
  v16 = *(unsigned __int8 *)(v47 + 80);
  v41 = (v45 + v15 + v16) & ~v16;
  v17 = *(_QWORD *)(v47 + 64);
  v49 = sub_100012E18(&qword_1005D63B8);
  v44 = *(_QWORD *)(v49 - 8);
  v18 = *(unsigned __int8 *)(v44 + 80);
  v37 = (v41 + v17 + v18) & ~v18;
  v19 = *(_QWORD *)(v44 + 64);
  v46 = sub_100012E18(&qword_1005D63B0);
  v40 = *(_QWORD *)(v46 - 8);
  v20 = *(unsigned __int8 *)(v40 + 80);
  v21 = (v37 + v19 + v20) & ~v20;
  v34 = v21;
  v22 = *(_QWORD *)(v40 + 64);
  v42 = sub_100012E18(&qword_1005D63A8);
  v36 = *(_QWORD *)(v42 - 8);
  v23 = *(unsigned __int8 *)(v36 + 80);
  v24 = (v21 + v22 + v23) & ~v23;
  v25 = *(_QWORD *)(v36 + 64);
  v26 = sub_100012E18(&qword_1005D63C8);
  v33 = *(_QWORD *)(v26 - 8);
  v27 = *(unsigned __int8 *)(v33 + 80);
  v28 = (v24 + v25 + v27) & ~v27;
  v38 = v28 + *(_QWORD *)(v33 + 64);
  v39 = v26;
  v29 = v80 | v73 | v66 | v57 | v52 | v43 | v35 | v32 | v31 | v10 | v12 | v14 | v16 | v18 | v20 | v23 | v27 | 7;
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v0 + ((v80 + 16) & ~v80), v88);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v0 + v79, v87);
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v0 + v76, v85);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v0 + v72, v83);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v0 + v69, v81);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v0 + v65, v77);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v0 + v62, v74);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v0 + v59, v70);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v0 + v55, v67);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v0 + v51, v63);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v0 + v48, v60);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v0 + v45, v56);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v0 + v41, v53);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v0 + v37, v49);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v0 + v34, v46);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v0 + v24, v42);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v0 + v28, v39);
  return swift_deallocObject(v0, v38, v29);
}

void sub_10026E20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100012E18(&qword_1005D6428);
  sub_100012E18(&qword_1005D6418);
  sub_100012E18(&qword_1005D6420);
  sub_100012E18(&qword_1005D6410);
  sub_100012E18(&qword_1005D6408);
  sub_100012E18(&qword_1005D63F8);
  sub_100012E18(&qword_1005D6400);
  sub_100012E18(&qword_1005D63D8);
  sub_100012E18(&qword_1005D63D0);
  sub_100012E18(&qword_1005D63F0);
  sub_100012E18(&qword_1005D63E8);
  sub_100012E18(&qword_1005D63E0);
  sub_100012E18(&qword_1005D63C0);
  sub_100012E18(&qword_1005D63B8);
  sub_100012E18(&qword_1005D63B0);
  sub_100012E18(&qword_1005D63A8);
  sub_100012E18(&qword_1005D63C8);
  sub_10026BA90(a1, a2, a3);
}

unint64_t sub_10026E554(char *a1)
{
  return sub_10026BDAC(a1);
}

uint64_t sub_10026E55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100012E18(&qword_1005D63A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10026E5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012E18(&qword_1005D63A0) - 8) + 80);
  return sub_10026C124(a1, a2, a3, a4, v4 + ((v9 + 16) & ~v9));
}

void sub_10026E628(void *a1)
{
  uint64_t v1;

  sub_10026B628(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10026E630()
{
  return sub_10026B8AC();
}

uint64_t sub_10026E638()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026E664()
{
  uint64_t v0;

  return sub_100268C78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10026E66C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_10026E690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10026AEBC(a2, a1, *(_BYTE *)(v2 + 24));
}

void sub_10026E6C4(uint64_t a1)
{
  uint64_t v1;

  sub_10026A2F8(a1, *(_BYTE *)(v1 + 24));
}

uint64_t sub_10026E6EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026E718()
{
  uint64_t v0;

  return sub_100269688(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

void sub_10026E720()
{
  uint64_t v0;

  UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, *(id *)(v0 + 16));
}

uint64_t sub_10026E734(uint64_t a1)
{
  uint64_t v1;

  return sub_10026942C(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

unint64_t sub_10026E740()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D6440;
  if (!qword_1005D6440)
  {
    v1 = sub_1000163BC(255, (unint64_t *)&unk_1005D8C50, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1005D6440);
  }
  return result;
}

uint64_t sub_10026E798()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10026E7C4()
{
  uint64_t v0;

  sub_1002692D8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 **)(v0 + 32));
}

uint64_t sub_10026E7D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026E7E0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v7;

  v3 = sub_100265BD8();
  dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)(&v7);

  v4 = v7;
  if (v7 == 35)
  {
    v5 = 0;
  }
  else if (sub_100263C94(v7, (uint64_t)&off_1005567D0))
  {
    v5 = 1;
  }
  else
  {
    v5 = ((_DWORD)v4 == 13) | sub_100263C94(v4, a2);
  }
  return v5 & 1;
}

void sub_10026E874()
{
  _BYTE *v0;
  _BYTE *v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  int v15;
  char v17;
  Class isa;
  id v19;
  int v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  objc_class *v41;
  char *v42;
  char *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  void (*v51)(void);
  id v52;
  uint64_t v53;
  char *v54;
  void *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  objc_class *v62;
  char *v63;
  id v64;
  id v65;
  void *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  void *v78;
  char *v79;
  objc_class *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  id v98;
  void (*KeyPath)(void);
  char *v100;
  char *v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  objc_super v110;
  objc_super v111;
  objc_super v112;
  _QWORD aBlock[5];
  uint64_t v114;

  v1 = v0;
  v2 = (_QWORD *)type metadata accessor for DispatchWorkItemFlags(0);
  v107 = *(v2 - 1);
  __chkstk_darwin(v2);
  v4 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v109 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for DispatchTime(0);
  v106 = *(_QWORD *)(v108 - 8);
  v8 = __chkstk_darwin(v108);
  v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v97 - v11;
  v13 = sub_100265BD8();
  dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)(aBlock);

  v14 = LOBYTE(aBlock[0]);
  if (LOBYTE(aBlock[0]) != 35)
  {
    if (sub_100263C94(LOBYTE(aBlock[0]), (uint64_t)&off_1005567D0))
    {
      v15 = v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem];
      if (v15 != (_DWORD)v14 || v15 == 35)
        v17 = v14;
      else
        v17 = 35;
      v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_selectedInlineEntryItem] = v17;
      sub_100263F50(1, 0, 0);
LABEL_44:
      v104 = v6;
      v105 = v5;
      v85 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
      v86 = (void *)static OS_dispatch_queue.main.getter(v85);
      static DispatchTime.now()(v86);
      + infix(_:_:)(v10, 0.275);
      v106 = *(_QWORD *)(v106 + 8);
      v87 = v108;
      ((void (*)(char *, uint64_t))v106)(v10, v108);
      v88 = swift_allocObject(&unk_1005624C8, 24, 7);
      *(_QWORD *)(v88 + 16) = v1;
      aBlock[4] = sub_10026F8BC;
      v114 = v88;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100206734;
      aBlock[3] = &unk_1005624E0;
      v89 = _Block_copy(aBlock);
      v90 = v114;
      v91 = v1;
      v92 = swift_release(v90);
      v93 = v109;
      static DispatchQoS.unspecified.getter(v92);
      aBlock[0] = _swiftEmptyArrayStorage;
      v94 = sub_100225940();
      v95 = sub_100012E18((uint64_t *)&unk_1005D8530);
      v96 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v95, v96, v2, v94);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v12, v93, v4, v89);
      _Block_release(v89);

      (*(void (**)(char *, _QWORD *))(v107 + 8))(v4, v2);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v93, v105);
      ((void (*)(char *, uint64_t))v106)(v12, v87);
      return;
    }
    if (!sub_100263C94(v14, (uint64_t)&off_100556D78))
    {
      if ((_DWORD)v14 == 13)
      {
        v21 = sub_100268F14();
        if (!v21)
          return;
        v22 = (void *)v21;
        v23 = &v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_tagRowLimit];
        if ((v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_tagRowLimit + 8] & 1) != 0
          || *(_QWORD *)v23 == 3)
        {
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v24 = 3;
        }
        *(_QWORD *)v23 = v24;
        v23[8] = 0;
        v82 = v21 + OBJC_IVAR___ICTagContainerCell_tagRowLimit;
        v83 = *(_QWORD *)(v21 + OBJC_IVAR___ICTagContainerCell_tagRowLimit);
        v84 = *(_BYTE *)(v21 + OBJC_IVAR___ICTagContainerCell_tagRowLimit + 8);
        *(_QWORD *)v82 = v24;
        *(_BYTE *)(v82 + 8) = 0;
        if ((v84 & 1) != 0 || v24 != v83)
          sub_10022902C();
        sub_10026908C();

      }
      goto LABEL_44;
    }
    if (v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_prefersPopoverEntries] == 1
      && sub_100263C94(v14, (uint64_t)&off_100556800))
    {
      v103 = *(id *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView];
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v19 = objc_msgSend(v103, "cellForItemAtIndexPath:", isa);

      v20 = 1;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    switch((_DWORD)v14)
    {
      case '"':
        v45 = (char *)objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection], "filterTypeSelectionForFilterType:", 7);
        if (v45)
        {
          v26 = v45;
          v46 = objc_opt_self(ICFoldersFilterTypeSelection);
          v47 = swift_dynamicCastObjCClass(v26, v46);
          if (v47)
          {
            aBlock[0] = v47;
            v101 = (char *)v47;
            KeyPath = (void (*)(void))swift_getKeyPath(&unk_10045EFB8, v48);
            v49 = (_QWORD *)swift_allocObject(&unk_100562518, 24, 7);
            v100 = v26;
            v98 = v49;
            v49[2] = v1;
            v50 = v1;
            v102 = v19;
            v97 = v50;
            LODWORD(v103) = v20;
            v51 = KeyPath;
            v52 = v98;
            v53 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_10026F9F0, v98, &protocol witness table for NSObject);
            swift_release(v51);
            swift_release(v52);
            v54 = v97;
            v55 = *(void **)&v97[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_popoverSelectionObservation];
            *(_QWORD *)&v97[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_popoverSelectionObservation] = v53;
            v56 = v54;

            v57 = *(void **)&v56[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentViewControllerBlock
                               + 8];
            KeyPath = *(void (**)(void))&v56[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentViewControllerBlock];
            v98 = v57;
            v58 = v6;
            v59 = v5;
            v60 = v2;
            v61 = *(void **)&v56[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_accountObjectID];
            v62 = (objc_class *)type metadata accessor for FolderComposerFolderViewController(0);
            v63 = (char *)objc_allocWithZone(v62);
            *(_QWORD *)&v63[OBJC_IVAR____TtC11MobileNotes34FolderComposerFolderViewController____lazy_storage___folderSelectionDataSource] = 0;
            *(_QWORD *)&v63[OBJC_IVAR____TtC11MobileNotes34FolderComposerFolderViewController_accountObjectID] = v61;
            *(_QWORD *)&v63[OBJC_IVAR____TtC11MobileNotes34FolderComposerFolderViewController_folderSelection] = v101;
            v112.receiver = v63;
            v112.super_class = v62;
            v64 = v61;
            v2 = v60;
            v5 = v59;
            v6 = v58;
            v101 = v100;
            v65 = objc_msgSendSuper2(&v112, "initWithNibName:bundle:", 0, 0);
            v66 = v102;
            KeyPath();
            v67 = v101;
            v20 = (int)v103;
LABEL_33:

            v19 = v66;
            goto LABEL_34;
          }
LABEL_37:

        }
        break;
      case '!':
        v68 = (char *)objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection], "filterTypeSelectionForFilterType:", 4);
        if (v68)
        {
          v26 = v68;
          v69 = objc_opt_self(ICMentionsFilterTypeSelection);
          v70 = swift_dynamicCastObjCClass(v26, v69);
          if (v70)
          {
            aBlock[0] = v70;
            KeyPath = (void (*)(void))v70;
            v101 = (char *)swift_getKeyPath(&unk_10045EFF8, v71);
            v72 = swift_allocObject(&unk_100562540, 24, 7);
            v102 = v19;
            v73 = v72;
            *(_QWORD *)(v72 + 16) = v1;
            v74 = v1;
            v98 = v26;
            v100 = v74;
            LODWORD(v103) = v20;
            v75 = v101;
            v76 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v101, 0, sub_10026F960, v73, &protocol witness table for NSObject);
            swift_release(v75);
            swift_release(v73);
            v77 = v100;
            v78 = *(void **)&v100[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_popoverSelectionObservation];
            *(_QWORD *)&v100[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_popoverSelectionObservation] = v76;
            v79 = v77;

            v101 = v4;
            v38 = v6;
            v39 = v5;
            v100 = (char *)v2;
            v40 = *(void (**)(void))&v79[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentViewControllerBlock];
            v80 = (objc_class *)type metadata accessor for FolderComposerParticipantViewController(0);
            v81 = (char *)objc_allocWithZone(v80);
            *(_QWORD *)&v81[OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController____lazy_storage___diffableDataSource] = 0;
            *(_QWORD *)&v81[OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection] = KeyPath;
            v111.receiver = v81;
            v111.super_class = v80;
            v43 = (char *)v98;
            v44 = objc_msgSendSuper2(&v111, "initWithNibName:bundle:", 0, 0);
            goto LABEL_32;
          }
          goto LABEL_37;
        }
        break;
      case ' ':
        v25 = (char *)objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_filterSelection], "filterTypeSelectionForFilterType:", 3);
        if (v25)
        {
          v26 = v25;
          v27 = objc_opt_self(ICSharedFilterTypeSelection);
          v28 = swift_dynamicCastObjCClass(v26, v27);
          if (v28)
          {
            aBlock[0] = v28;
            KeyPath = (void (*)(void))v28;
            v101 = (char *)swift_getKeyPath(&unk_10045F020, v29);
            v30 = swift_allocObject(&unk_100562568, 24, 7);
            v102 = v19;
            v31 = v30;
            *(_QWORD *)(v30 + 16) = v1;
            v32 = v1;
            v98 = v26;
            v100 = v32;
            LODWORD(v103) = v20;
            v33 = v101;
            v34 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v101, 0, sub_10026F9F0, v31, &protocol witness table for NSObject);
            swift_release(v33);
            swift_release(v31);
            v35 = v100;
            v36 = *(void **)&v100[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_popoverSelectionObservation];
            *(_QWORD *)&v100[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_popoverSelectionObservation] = v34;
            v37 = v35;

            v101 = v4;
            v38 = v6;
            v39 = v5;
            v100 = (char *)v2;
            v40 = *(void (**)(void))&v37[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_presentViewControllerBlock];
            v41 = (objc_class *)type metadata accessor for FolderComposerParticipantViewController(0);
            v42 = (char *)objc_allocWithZone(v41);
            *(_QWORD *)&v42[OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController____lazy_storage___diffableDataSource] = 0;
            *(_QWORD *)&v42[OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection] = KeyPath;
            v110.receiver = v42;
            v110.super_class = v41;
            v43 = (char *)v98;
            v44 = objc_msgSendSuper2(&v110, "initWithNibName:bundle:", 0, 0);
LABEL_32:
            v65 = v44;
            v66 = v102;
            v40();
            v67 = v43;
            v20 = (int)v103;
            v2 = v100;
            v5 = v39;
            v6 = v38;
            v4 = v101;
            goto LABEL_33;
          }
          goto LABEL_37;
        }
        break;
      default:
LABEL_34:
        if (v20)
          objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView], "ic_deselectAllItemsAnimated:", 0);

        goto LABEL_44;
    }

  }
}

uint64_t sub_10026F20C(uint64_t a1, uint64_t a2)
{
  return sub_10026F3F8(a1, a2, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
}

uint64_t sub_10026F220(uint64_t a1, uint64_t a2)
{
  return sub_10026F234(a1, a2, (uint64_t (*)(void))sub_10016B3C8, (uint64_t (*)(_QWORD))&type metadata accessor for FastSync.SelectionMessage);
}

uint64_t sub_10026F234(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = a4(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = v6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v16 * a1;
  v18 = v15 + v16 * a1;
  result = swift_arrayDestroy(v18, v9, v13);
  if (!v9)
    goto LABEL_22;
  v20 = *(_QWORD *)(v6 + 16);
  v21 = v20 - a2;
  if (__OFSUB__(v20, a2))
    goto LABEL_28;
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = v15 + v16 * a2;
    if (v17 < v16 * a2 || v18 >= v22 + v21 * v16)
    {
      result = swift_arrayInitWithTakeFrontToBack(v18, v22);
    }
    else if (v17 != v16 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v18, v22);
    }
    v24 = *(_QWORD *)(v6 + 16);
    v25 = __OFADD__(v24, v10);
    v26 = v24 - v9;
    if (!v25)
    {
      *(_QWORD *)(v6 + 16) = v26;
LABEL_22:
      *v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  v27 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v27, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10026F3E4(uint64_t a1, uint64_t a2)
{
  return sub_10026F3F8(a1, a2, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
}

uint64_t sub_10026F3F8(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = a4;
    v8 = a3;
    v4 = a2;
    v7 = a1;
    v9 = *v5;
    if (!((unint64_t)*v5 >> 62))
    {
      if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  if (v9 < 0)
    v19 = v9;
  else
    v19 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v9);
  if (v20 < v4)
    goto LABEL_18;
LABEL_4:
  v6 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v7 - v4;
  if (__OFSUB__(0, v6))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    if (v9 < 0)
      v21 = v9;
    else
      v21 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v9);
    v13 = v22 + v39;
    if (!__OFADD__(v22, v39))
      goto LABEL_8;
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = *v5;
  v39 = v7 - v4;
  v40 = v7;
  if ((unint64_t)*v5 >> 62)
    goto LABEL_21;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 - v6;
  if (__OFADD__(v12, v11))
    goto LABEL_26;
LABEL_8:
  v9 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v9;
  v15 = 0;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
    goto LABEL_28;
  v16 = v9 & 0xFFFFFFFFFFFFFF8;
  if (v13 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    v17 = v8;
    v18 = v10;
    goto LABEL_33;
  }
LABEL_27:
  v15 = 1;
LABEL_28:
  v17 = v8;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v34 = v9;
    else
      v34 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v23 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v23 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = v10;
  if (v23 <= v13)
    v23 = v13;
  swift_bridgeObjectRetain(v9);
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15, v23, 1, v9);
  swift_bridgeObjectRelease(*v5);
  *v5 = v9;
  v16 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_33:
  v24 = (char *)(v16 + 32 + 8 * v40);
  v25 = sub_1000163BC(0, v17, v18);
  v26 = (void *)swift_arrayDestroy(v24, v6, v25);
  v27 = v39;
  if (!v39)
    return specialized Array._endMutation()(v26);
  if (!((unint64_t)v9 >> 62))
  {
    v28 = *(_QWORD *)(v16 + 16);
    v29 = v28 - v4;
    if (!__OFSUB__(v28, v4))
      goto LABEL_36;
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v9 < 0)
    v35 = v9;
  else
    v35 = v16;
  swift_bridgeObjectRetain(v9);
  v36 = _CocoaArrayWrapper.endIndex.getter(v35);
  v26 = (void *)swift_bridgeObjectRelease(v9);
  v27 = v39;
  v29 = v36 - v4;
  if (__OFSUB__(v36, v4))
    goto LABEL_53;
LABEL_36:
  if ((v29 & 0x8000000000000000) == 0)
  {
    v30 = (char *)(v16 + 32 + 8 * v4);
    if (v40 != v4 || v24 >= &v30[8 * v29])
    {
      v26 = memmove(v24, v30, 8 * v29);
      v27 = v39;
    }
    if (!((unint64_t)v9 >> 62))
    {
      v31 = *(_QWORD *)(v16 + 16);
      v32 = v31 + v27;
      if (!__OFADD__(v31, v27))
      {
LABEL_42:
        *(_QWORD *)(v16 + 16) = v32;
        return specialized Array._endMutation()(v26);
      }
      goto LABEL_59;
    }
LABEL_54:
    if (v9 < 0)
      v37 = v9;
    else
      v37 = v16;
    swift_bridgeObjectRetain(v9);
    v38 = _CocoaArrayWrapper.endIndex.getter(v37);
    v26 = (void *)swift_bridgeObjectRelease(v9);
    v32 = v38 + v39;
    if (!__OFADD__(v38, v39))
      goto LABEL_42;
LABEL_59:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10026F708(uint64_t a1, uint64_t a2)
{
  return sub_10026F3F8(a1, a2, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
}

void *sub_10026F71C(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10016B9C8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[4 * a1 + 4], v7, &type metadata for GroupActivityDebugStatusController.GroupActivityIdentifier);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (_QWORD *)&v16[32 * v15])
      result = memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10026F884(uint64_t a1, uint64_t a2)
{
  return sub_10026F3F8(a1, a2, &qword_1005D8540, CKShareParticipant_ptr);
}

uint64_t sub_10026F898()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10026F8BC()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterDataSource_collectionView), "ic_deselectAllItemsAnimated:", 1);
}

const char *sub_10026F8DC()
{
  return "folderIdentifiers";
}

void sub_10026F8EC(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;

  v2 = *a2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setFolderIdentifiers:", isa);

}

const char *sub_10026F93C()
{
  return "participantUserIDs";
}

void sub_10026F948(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100268E5C(a1, a2);
}

uint64_t sub_10026F960()
{
  return sub_10026876C();
}

void sub_10026F980(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100268E5C(a1, a2);
}

void sub_10026F998(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;

  v2 = *a2;
  isa = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setParticipantUserIDs:", isa);

}

void *DeleteAttachmentsIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static DeleteAttachmentsIntent.persistentIdentifier;
}

unint64_t static DeleteAttachmentsIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10026FAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static DeleteAttachmentsIntent.title);
  sub_10012A0B0(v10, (uint64_t)static DeleteAttachmentsIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x8000000100484B70);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t DeleteAttachmentsIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEB78 != -1)
    swift_once(&qword_1005CEB78, sub_10026FAA8);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static DeleteAttachmentsIntent.title);
}

uint64_t static DeleteAttachmentsIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEB78 != -1)
    swift_once(&qword_1005CEB78, sub_10026FAA8);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static DeleteAttachmentsIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static DeleteAttachmentsIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100484B10);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static DeleteAttachmentsIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005D6468);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D6470);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B293C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 1, &type metadata for DeleteAttachmentsIntent, v6);
  v7._countAndFlagsBits = 0x74206574656C6544;
  v7._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10045F2A0, v8);
  v10 = sub_100012E18(&qword_1005D6478);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x6D68636174746120;
  v11._object = (void *)0xEC00000073746E65;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for DeleteAttachmentsIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for DeleteAttachmentsIntent, v6);
}

uint64_t sub_10027006C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005D6468);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D6470);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 1, a1, a2);
  v10._countAndFlagsBits = 0x74206574656C6544;
  v10._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_10045F2A0, v11);
  v13 = sub_100012E18(&qword_1005D6478);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x6D68636174746120;
  v14._object = (void *)0xEC00000073746E65;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_1002701E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = (_QWORD *)swift_task_alloc(dword_1005D6484);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100130768;
  return DeleteAttachmentsIntent.perform()(a1, v4, v5, v6);
}

uint64_t DeleteAttachmentsIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = *(_QWORD *)(type metadata accessor for AttachmentEntity(0) - 8);
  v4[9] = v5;
  v4[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002702B4, 0, 0);
}

uint64_t sub_1002702B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(void);

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 88) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 96) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 80);
    v5 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 176) = v5;
    *(_QWORD *)(v0 + 104) = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 112) = 0;
    sub_100270EC4(v1 + ((v5 + 32) & ~(unint64_t)v5), v3);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 24));
    *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 24);
    v15 = (uint64_t (*)(void))((char *)&dword_1005D0B20 + dword_1005D0B20);
    v6 = (_QWORD *)swift_task_alloc(unk_1005D0B24);
    *(_QWORD *)(v0 + 128) = v6;
    *v6 = v0;
    v6[1] = sub_10027046C;
    return v15();
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v9 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 48);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 32));
    v11 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 144) = objc_msgSend(v11, "modernManagedObjectContext");

    v12 = (_QWORD *)swift_allocObject(&unk_100562638, 40, 7);
    *(_QWORD *)(v0 + 152) = v12;
    v12[2] = v10;
    v12[3] = v9;
    v12[4] = v8;
    v13 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v10);
    swift_retain(v9);
    swift_retain(v8);
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 160) = v14;
    *v14 = v0;
    v14[1] = sub_1002706AC;
    return NSManagedObjectContext.perform<A>(_:)(v14, sub_1001476AC, v12, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_10027046C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  v4 = *(void **)(v2 + 120);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 88));

    v5 = sub_10027075C;
  }
  else
  {

    v5 = sub_1002704EC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002704EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(void);

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 112) + 1;
  sub_100270F08(*(_QWORD *)(v0 + 80));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
    v4 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 48);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 32));
    v6 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 144) = objc_msgSend(v6, "modernManagedObjectContext");

    v7 = (_QWORD *)swift_allocObject(&unk_100562638, 40, 7);
    *(_QWORD *)(v0 + 152) = v7;
    v7[2] = v5;
    v7[3] = v4;
    v7[4] = v3;
    v8 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v5);
    swift_retain(v4);
    swift_retain(v3);
    v9 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 160) = v9;
    *v9 = v0;
    v9[1] = sub_1002706AC;
    return NSManagedObjectContext.perform<A>(_:)(v9, sub_1001476AC, v7, (char *)&type metadata for () + 8);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112) + 1;
    *(_QWORD *)(v0 + 112) = v12;
    sub_100270EC4(*(_QWORD *)(v0 + 88)+ ((*(unsigned __int8 *)(v0 + 176) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 176))+ v11 * v12, *(_QWORD *)(v0 + 80));
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 24));
    *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 24);
    v14 = (uint64_t (*)(void))((char *)&dword_1005D0B20 + dword_1005D0B20);
    v13 = (_QWORD *)swift_task_alloc(unk_1005D0B24);
    *(_QWORD *)(v0 + 128) = v13;
    *v13 = v0;
    v13[1] = sub_10027046C;
    return v14();
  }
}

uint64_t sub_1002706AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100270798;
  }
  else
  {
    v5 = *(void **)(v2 + 144);
    swift_release(*(_QWORD *)(v2 + 152));

    v4 = sub_10027071C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10027071C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 80);
  static IntentResult.result<>()(a1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10027075C()
{
  uint64_t v0;

  sub_100270F08(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100270798()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 152));

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002707D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes23DeleteAttachmentsIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

void sub_100270800(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v2 = objc_opt_self(ICAttachment);
  v3 = swift_dynamicCastObjCClass(a1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = a1;
    v6 = objc_msgSend(v4, "note");
    if (v6)
    {
      v7 = v6;
      v8 = swift_allocObject(&unk_1005626E8, 32, 7);
      *(_QWORD *)(v8 + 16) = v4;
      *(_QWORD *)(v8 + 24) = v7;
      v14[4] = sub_100271128;
      v15 = v8;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 1107296256;
      v14[2] = sub_10028A1F0;
      v14[3] = &unk_100562700;
      v9 = _Block_copy(v14);
      v10 = v15;
      v11 = v5;
      v12 = v7;
      swift_release(v10);
      objc_msgSend(v12, "enumerateAttachmentsInOrderUsingBlock:", v9);
      _Block_release(v9);
      objc_msgSend(v12, "updateModificationDateAndChangeCountAndSaveImmediately");
      v13 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
      objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "deleteAttachment:", v4);

    }
    else
    {

    }
  }
}

void sub_100270964(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, void *a6)
{
  id v11;
  void *v12;
  NSString v13;

  sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1) & 1) != 0)
  {
    v11 = objc_msgSend(a6, "textStorage");
    if (v11)
    {
      v12 = v11;
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "replaceCharactersInRange:withString:", a2, a3, v13);

    }
    *a4 = 1;
  }
}

uint64_t _s11MobileNotes23DeleteAttachmentsIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD v51[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v47 = *(_QWORD *)(v0 - 8);
  v48 = v0;
  __chkstk_darwin(v0);
  v46 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v45 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v44 = (char *)&v36 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v39 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizedStringResource(0);
  v40 = *(_QWORD *)(v17 - 8);
  v41 = v17;
  __chkstk_darwin(v17);
  v37 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012E18(&qword_1005CEE50);
  v49 = 0xD000000000000021;
  v50 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v51, &v49, &type metadata for String, &protocol witness table for String);
  v19 = type metadata accessor for AppDependencyManager(0);
  v20 = static AppDependencyManager.shared.getter(v19);
  v42 = AppDependency.__allocating_init(key:manager:)(v51, v20);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v49 = 0xD000000000000024;
  v50 = 0x8000000100476B40;
  v21 = AnyHashable.init<A>(_:)(v51, &v49, &type metadata for String, &protocol witness table for String);
  v22 = static AppDependencyManager.shared.getter(v21);
  v38 = AppDependency.__allocating_init(key:manager:)(v51, v22);
  sub_100012E18((uint64_t *)&unk_1005CF0A0);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x656D686361747441, 0xEB0000000073746ELL);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 104);
  v25(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v8);
  v26 = v37;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, v13, v10, "Parameter title for Delete Attachments intent", 45, 2);
  v27 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x8000000100477CF0);
  static Locale.current.getter(v27);
  v25(v10, v24, v8);
  v28 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, v13, v10, "Parameter description for attachments", 37, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, v41);
  v51[0] = 0;
  v29 = type metadata accessor for IntentDialog(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v31 = v44;
  v30(v44, 1, 1, v29);
  v32 = v45;
  v30(v45, 1, 1, v29);
  v33 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v46, enum case for InputConnectionBehavior.default(_:), v48);
  v34 = sub_100270FC4();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v26, v28, v51, v31, v32, v33, v34);
  return v42;
}

uint64_t sub_100270E9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100270EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttachmentEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100270F08(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttachmentEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100270F44()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_100270F7C()
{
  unint64_t result;

  result = qword_1005D6488;
  if (!qword_1005D6488)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteAttachmentsIntent, &type metadata for DeleteAttachmentsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D6488);
  }
  return result;
}

unint64_t sub_100270FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D2C60;
  if (!qword_1005D2C60)
  {
    v1 = type metadata accessor for AttachmentEntity(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentEntity, v1);
    atomic_store(result, (unint64_t *)&qword_1005D2C60);
  }
  return result;
}

unint64_t sub_100271014()
{
  unint64_t result;

  result = qword_1005D6490;
  if (!qword_1005D6490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteAttachmentsIntent, &type metadata for DeleteAttachmentsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D6490);
  }
  return result;
}

unint64_t sub_10027105C()
{
  unint64_t result;

  result = qword_1005D6498;
  if (!qword_1005D6498)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteAttachmentsIntent, &type metadata for DeleteAttachmentsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D6498);
  }
  return result;
}

uint64_t sub_1002710A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of DeleteAttachmentsIntent.perform()>>, 1);
}

uint64_t sub_1002710B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static DeleteAttachmentsIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for DeleteAttachmentsIntent()
{
  return &type metadata for DeleteAttachmentsIntent;
}

uint64_t sub_1002710D0()
{
  return sub_100016638(&qword_1005D64A8, (uint64_t *)&unk_1005D64B0, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_1002710FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100271128(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  sub_100270964(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24));
}

uint64_t sub_100271130()
{
  uint64_t result;
  uint64_t v1;
  char v2;

  result = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  static AccountEntity.defaultQuery = result;
  *(_QWORD *)algn_100601A38 = v1;
  byte_100601A40 = v2 & 1;
  return result;
}

uint64_t *AccountEntity.defaultQuery.unsafeMutableAddressor()
{
  if (qword_1005CEB80 != -1)
    swift_once(&qword_1005CEB80, sub_100271130);
  return &static AccountEntity.defaultQuery;
}

uint64_t static AccountEntity.defaultQuery.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1005CEB80 != -1)
    swift_once(&qword_1005CEB80, sub_100271130);
  v0 = static AccountEntity.defaultQuery;
  v1 = *(_QWORD *)algn_100601A38;
  swift_retain(static AccountEntity.defaultQuery);
  swift_retain(v1);
  return v0;
}

uint64_t sub_10027120C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static AccountEntity.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static AccountEntity.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x746E756F636341, 0xE700000000000000);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "App entity name", 15, 2);
  LocalizedStringResource.init(stringLiteral:)(0x63636120646C6C25, 0xED000073746E756FLL);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v2, 0, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t AccountEntity.typeDisplayRepresentation.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEB88 != -1)
    swift_once(&qword_1005CEB88, sub_10027120C);
  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  return sub_10012A0B0(v0, (uint64_t)static AccountEntity.typeDisplayRepresentation);
}

uint64_t static AccountEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEB88 != -1)
    swift_once(&qword_1005CEB88, sub_10027120C);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static AccountEntity.typeDisplayRepresentation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t AccountEntity.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AccountID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AccountEntity.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AccountID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t AccountEntity.managedObjectURI.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccountEntity(0) + 20);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AccountEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D6680;
  if (!qword_1005D6680)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccountEntity);
  return result;
}

uint64_t AccountEntity.managedObjectURI.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AccountEntity(0) + 20);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AccountEntity.managedObjectURI.modify())()
{
  type metadata accessor for AccountEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t AccountEntity.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AccountEntity(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t AccountEntity.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AccountEntity(0) + 24));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AccountEntity.title.modify())()
{
  type metadata accessor for AccountEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t AccountEntity.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for AccountID(0);
  v4 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = type metadata accessor for AccountEntity(0);
  v6 = type metadata accessor for URL(0);
  v7 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  v8 = (uint64_t *)(v1 + *(int *)(v5 + 24));
  v9 = *v8;
  v10 = v8[1];
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(a1, v9, v10);
  return swift_bridgeObjectRelease(v10);
}

uint64_t static AccountEntity.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if ((static AccountID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for AccountEntity(0);
  if ((static URL.== infix(_:_:)(a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20)) & 1) == 0)
    return 0;
  v5 = *(int *)(v4 + 24);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  if (v6 == *v8 && v7 == v9)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0);
}

Swift::Int AccountEntity.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10, 0);
  v1 = type metadata accessor for AccountID(0);
  v2 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
  dispatch thunk of Hashable.hash(into:)(v10, v1, v2);
  v3 = type metadata accessor for AccountEntity(0);
  v4 = type metadata accessor for URL(0);
  v5 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v10, v4, v5);
  v6 = (uint64_t *)(v0 + *(int *)(v3 + 24));
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v10, v7, v8);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

Swift::Int sub_100271964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  v3 = type metadata accessor for AccountID(0);
  v4 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
  dispatch thunk of Hashable.hash(into:)(v11, v3, v4);
  v5 = type metadata accessor for URL(0);
  v6 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v11, v5, v6);
  v7 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(v11, v8, v9);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

uint64_t sub_100271A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = type metadata accessor for AccountID(0);
  v6 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  v7 = type metadata accessor for URL(0);
  v8 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  v9 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  return swift_bridgeObjectRelease(v11);
}

Swift::Int sub_100271B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12, a1);
  v4 = type metadata accessor for AccountID(0);
  v5 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
  dispatch thunk of Hashable.hash(into:)(v12, v4, v5);
  v6 = type metadata accessor for URL(0);
  v7 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v12, v6, v7);
  v8 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  v9 = *v8;
  v10 = v8[1];
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(v12, v9, v10);
  swift_bridgeObjectRelease(v10);
  return Hasher._finalize()();
}

uint64_t sub_100271C04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (qword_1005CEB80 != -1)
    swift_once(&qword_1005CEB80, sub_100271130);
  v2 = static AccountEntity.defaultQuery;
  v3 = *(_QWORD *)algn_100601A38;
  v4 = byte_100601A40;
  *(_QWORD *)a1 = static AccountEntity.defaultQuery;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  swift_retain(v2);
  return swift_retain(v3);
}

uint64_t sub_100271C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if ((static AccountID.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) == 0)
  {
    return 0;
  }
  v6 = *(int *)(a3 + 24);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  if (v7 == *v9 && v8 == v10)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0);
}

uint64_t sub_100271CF0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C((unint64_t *)&unk_1005CEE40, type metadata accessor for AccountEntity, (uint64_t)&protocol conformance descriptor for AccountEntity);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t AccountEntity.displayRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v20;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  v16 = *(Swift::String *)(v1 + *(int *)(type metadata accessor for AccountEntity(0) + 24));
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v16);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  LocalizedStringResource.init(stringInterpolation:)(v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  v18 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v4, 1, 1, v18);
  return DisplayRepresentation.init(title:subtitle:image:)(v11, v7, v4);
}

uint64_t sub_100271EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v21;

  v3 = v1;
  v4 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v3 + *(int *)(a1 + 24)));
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  LocalizedStringResource.init(stringInterpolation:)(v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  v19 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
  return DisplayRepresentation.init(title:subtitle:image:)(v13, v9, v6);
}

uint64_t sub_1002720AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005D65B0, type metadata accessor for AccountEntity, (uint64_t)&protocol conformance descriptor for AccountEntity);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void AccountEntity.init<A>(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  id v9;
  id v10;

  static AccountEntity.identifier<A>(for:)(a1);
  v3 = objc_msgSend(a1, "localizedName");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xE000000000000000;
  }
  v8 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AccountEntity(0) + 24));
  *v8 = v5;
  v8[1] = v7;
  v9 = objc_msgSend(a1, "objectID");
  v10 = objc_msgSend(v9, "URIRepresentation");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v10);
}

void static AccountEntity.identifier<A>(for:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t ObjectType;
  Swift::String v26;
  void *object;
  id v28;
  uint64_t v29;
  unint64_t v30;
  __objc2_prot *v31;

  v2 = type metadata accessor for ManagedEntityContextType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccountID.Authority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v28 - v11);
  v13 = objc_opt_self(ICAccount);
  v14 = swift_dynamicCastObjCClass(a1, v13);
  if (v14)
  {
    v15 = v14;
    v16 = a1;
    AccountID.Authority.init(_:)(v15);
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v10, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ManagedEntityContextType.modern(_:), v2);
    AccountID.init(authority:contextType:)(v10, v5);
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v12, v6);
  }
  else
  {
    v31 = &OBJC_PROTOCOL___ICLegacyAccount;
    v17 = swift_dynamicCastObjCProtocolConditional(a1, 1, &v31);
    if (v17)
    {
      v18 = (void *)v17;
      v19 = a1;
      if (objc_msgSend(v18, "isLocalAccount"))
      {
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v12, enum case for AccountID.Authority.local(_:), v6);
        (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ManagedEntityContextType.html(_:), v2);
        AccountID.init(authority:contextType:)(v12, v5);

      }
      else
      {
        v20 = objc_msgSend((id)objc_opt_self(ICLegacyAccountUtilities), "emailAddressForAccount:", v18);
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v28 = v19;
        v23 = v22;

        *v12 = v21;
        v12[1] = v23;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v12, enum case for AccountID.Authority.synced(_:), v6);
        (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ManagedEntityContextType.html(_:), v2);
        AccountID.init(authority:contextType:)(v12, v5);

      }
    }
    else
    {
      v29 = 0;
      v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v24._object = (void *)0x8000000100484BC0;
      v24._countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v24);
      ObjectType = swift_getObjectType(a1);
      v26._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
      object = v26._object;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(object);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, "MobileNotes/AccountEntity.swift", 31, 2, 70, 0);
      __break(1u);
    }
  }
}

uint64_t AccountEntity.init(for:in:)(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  id v8;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v6 = type metadata accessor for AccountEntity(0);
  v3[5] = v6;
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2;
  v8 = a3;
  return swift_task_switch(sub_10027255C, 0, 0);
}

uint64_t sub_10027255C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_100562820, 32, 7);
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v2;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[8] = v7;
  *v7 = v0;
  v7[1] = sub_1002725F4;
  return NSManagedObjectContext.perform<A>(_:)(v0[6], sub_10013B0D0, v3, v0[5]);
}

uint64_t sub_1002725F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1002726C4;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 56));
    v4 = sub_100272660;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100272660()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(void **)(v0 + 24);
  v2 = *(void **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);

  sub_100272A90(v1, v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002726C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(void **)(v0 + 24);
  v3 = *(void **)(v0 + 32);

  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AccountEntity.init(for:in:includeContents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10027273C, 0, 0);
}

uint64_t sub_10027273C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_100562848, 32, 7);
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v1;
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[6] = v7;
  v8 = type metadata accessor for AccountEntity(0);
  *v7 = v0;
  v7[1] = sub_1002727E0;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_1002743EC, v3, v8);
}

uint64_t sub_1002727E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100272884;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 40));
    v4 = sub_10027284C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10027284C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100272884()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(void **)(v0 + 24);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002728C8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  id v18;
  id v19;
  __objc2_prot *v20;

  v19 = 0;
  v4 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v19);
  v5 = v19;
  if (v4)
  {
    v6 = v4;
    v20 = &OBJC_PROTOCOL___ICAccountObject;
    v7 = (void *)swift_dynamicCastObjCProtocolUnconditional(v4, 1, &v20, 0, 0, 0);
    v8 = v5;
    sub_1003713B4(v7);
    v9 = objc_msgSend(v7, "localizedName");
    if (v9)
    {
      v10 = v9;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v13 = v12;

    }
    else
    {
      v11 = 0;
      v13 = 0xE000000000000000;
    }
    v16 = (uint64_t *)(a3 + *(int *)(type metadata accessor for AccountEntity(0) + 24));
    *v16 = v11;
    v16[1] = v13;
    v17 = objc_msgSend(v7, "objectID");
    v18 = objc_msgSend(v17, "URIRepresentation");

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v18);
  }
  else
  {
    v14 = v19;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v15);
  }
}

uint64_t sub_100272A64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100272A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccountEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AccountEntity.init(for:in:includeContents:noteContext:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  id v9;
  id v10;

  v5[4] = a3;
  v5[5] = a5;
  v5[2] = a1;
  v5[3] = a2;
  v8 = type metadata accessor for AccountEntity(0);
  v5[6] = v8;
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2;
  v10 = a3;
  return swift_task_switch(sub_100272B44, 0, 0);
}

uint64_t sub_100272B44()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_100562870, 32, 7);
  v0[8] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v2;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[9] = v7;
  *v7 = v0;
  v7[1] = sub_100272BDC;
  return NSManagedObjectContext.perform<A>(_:)(v0[7], sub_1002743EC, v3, v0[6]);
}

uint64_t sub_100272BDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100272CB8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_100272C48;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100272C48()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(void **)(v0 + 32);
  v2 = *(void **)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(void **)(v0 + 24);

  sub_100272A90(v1, v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100272CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(void **)(v0 + 32);
  v3 = *(void **)(v0 + 40);
  v5 = *(void **)(v0 + 24);

  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static AccountEntity.managedObjectID(for:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D6550 + dword_1005D6550);
  v5 = (_QWORD *)swift_task_alloc(unk_1005D6554);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100158D18;
  return v7(a1, a2);
}

id sub_100272D90@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  id v4;
  id v5;
  uint64_t v6;

  result = objc_msgSend(a1, "legacyAccountForLocalAccount");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "objectID");
    result = (id)swift_unknownObjectRelease(v4, v6);
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100272E04(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend((id)objc_opt_self(ICAccount), "localAccountInContext:", a1);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "objectID");

  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void sub_100272E88(void *a1@<X0>, _QWORD *a2@<X8>)
{
  NSString v4;
  id v5;
  id v6;
  uint64_t v7;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a1, "legacyAccountForEmailAddress:", v4);

  if (v5)
  {
    v6 = objc_msgSend(v5, "objectID");
    swift_unknownObjectRelease(v5, v7);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

void sub_100272F20(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  void *v4;
  NSString v5;
  id v6;
  id v7;

  v4 = (void *)objc_opt_self(ICAccount);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "activeAccountWithUserRecordName:context:", v5, a1);

  if (v6)
  {
    v7 = objc_msgSend(v6, "objectID");

  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
}

uint64_t sub_100272FD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1005D6534);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100145358;
  return AccountEntity.init(for:in:)(a1, a2, a3);
}

uint64_t sub_100273040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[4] = a3;
  v5[5] = a5;
  v5[2] = a1;
  v5[3] = a2;
  return swift_task_switch(sub_10027305C, 0, 0);
}

uint64_t sub_10027305C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_100562898, 32, 7);
  v0[6] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v1;
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[7] = v7;
  *v7 = v0;
  v7[1] = sub_1002730F4;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_1002743EC, v3, v0[5]);
}

uint64_t sub_1002730F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100273160;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 48));
    v4 = sub_10027284C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100273160()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(void **)(v0 + 24);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002731A4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_1005D6544);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100130768;
  return AccountEntity.init(for:in:includeContents:noteContext:)(a1, a2, a3, 0, a5);
}

uint64_t sub_100273218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D6550 + dword_1005D6550);
  v5 = (_QWORD *)swift_task_alloc(unk_1005D6554);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100159034;
  return v7(a1, a2);
}

uint64_t sub_100273284(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[6] = a1;
  v2[7] = a2;
  v3 = sub_100012E18(&qword_1005D66C0);
  v2[8] = v3;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ManagedEntityContextType(0);
  v2[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[11] = v5;
  v2[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccountID.Authority(0);
  v2[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[14] = v7;
  v2[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100273334, 0, 0);
}

