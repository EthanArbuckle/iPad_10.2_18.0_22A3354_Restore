void sub_100005A2C(id a1)
{
  QuickNoteAlertManager *v1;
  void *v2;

  v1 = objc_alloc_init(QuickNoteAlertManager);
  v2 = (void *)qword_10008E240;
  qword_10008E240 = (uint64_t)v1;

}

void sub_100005D8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)))
  {
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    objc_msgSend(*(id *)(a1 + 32), "unregisterObserver:", *(_QWORD *)(a1 + 40));
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;

  }
}

void sub_100005DF0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_1000060C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000060F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100006100(uint64_t a1)
{

}

void sub_100006108(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  unsigned int v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICWidget sharedWidget](ICWidget, "sharedWidget"));
  v3 = objc_msgSend(v2, "hidesObject:", *(_QWORD *)(a1 + 32));

  if ((v3 & 1) == 0)
  {
    v4 = *(id *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities appURLForNote:](ICAppURLUtilities, "appURLForNote:", *(_QWORD *)(a1 + 32)));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "absoluteString"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteListSortUtilities dateForCurrentSortTypeForNote:folderNoteSortType:](ICNoteListSortUtilities, "dateForCurrentSortTypeForNote:folderNoteSortType:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48)));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentInfoText"));
    v10 = objc_msgSend(*(id *)(a1 + 32), "isPasswordProtected");
    v11 = objc_msgSend(*(id *)(a1 + 32), "isSharedViaICloud");
    v12 = objc_msgSend(*(id *)(a1 + 32), "isSharedViaICloud");
    if (v12)
      LOBYTE(v12) = objc_msgSend(*(id *)(a1 + 32), "hasUnreadChanges");
    LOBYTE(v16) = v12;
    v13 = objc_msgSend(v4, "initWithIdentifier:title:date:contentInfo:isLocked:isShared:isUnread:", v6, v7, v8, v9, v10, v11, v16);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

    _objc_msgSend(*(id *)(a1 + 32), "turnAttachmentsIntoFaults");
  }
}

void sub_10000627C(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICWidget sharedWidget](ICWidget, "sharedWidget"));
  v3 = objc_msgSend(v2, "hidesObject:", *(_QWORD *)(a1 + 32));

  if ((v3 & 1) == 0)
  {
    v4 = *(id *)(a1 + 40);
    v13 = (id)objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities appURLForHTMLNote:](ICAppURLUtilities, "appURLForHTMLNote:", *(_QWORD *)(a1 + 32)));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "absoluteString"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteListSortUtilities dateForCurrentSortTypeForNote:folderNoteSortType:](ICNoteListSortUtilities, "dateForCurrentSortTypeForNote:folderNoteSortType:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48)));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentInfoText"));
    LOBYTE(v12) = 0;
    v9 = objc_msgSend(v4, "initWithIdentifier:title:date:contentInfo:isLocked:isShared:isUnread:", v5, v6, v7, v8, 0, 0, v12);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
}

void sub_100006A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100006A58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100006A68(uint64_t a1)
{

}

void sub_100006A70(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICWidget sharedWidget](ICWidget, "sharedWidget"));
  v3 = objc_msgSend(v2, "hidesObject:", *(_QWORD *)(a1 + 32));

  if ((v3 & 1) == 0)
  {
    v4 = objc_opt_class(ICAccount);
    v5 = ICDynamicCast(v4, *(_QWORD *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if (v6)
    {
      v19 = v6;
    }
    else
    {
      v8 = objc_opt_class(ICAccountProxy);
      v9 = ICDynamicCast(v8, *(_QWORD *)(a1 + 32));
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "account"));

    }
    v11 = *(id *)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities appURLForFolder:](ICAppURLUtilities, "appURLForFolder:", v19));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "absoluteString"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "allItemsFolderLocalizedTitle"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder defaultSystemImageName](ICFolder, "defaultSystemImageName"));
    v16 = objc_msgSend(v11, "initWithIdentifier:title:depth:shareDescription:systemImageName:", v13, v14, 0, 0, v15);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

  }
}

void sub_100006BD8(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICWidget sharedWidget](ICWidget, "sharedWidget"));
  v3 = objc_msgSend(v2, "hidesObject:", *(_QWORD *)(a1 + 32));

  if ((v3 & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = objc_opt_class(NSManagedObject);
    v6 = ICClassAndProtocolCast(v4, v5, 1);
    v15 = (id)objc_claimAutoreleasedReturnValue(v6);
    v7 = *(id *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities appURLForHTMLFolder:](ICAppURLUtilities, "appURLForHTMLFolder:", v15, &OBJC_PROTOCOL___ICLegacyAccount));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "absoluteString"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allItemsFolderLocalizedTitle"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder defaultSystemImageName](ICFolder, "defaultSystemImageName"));
    v12 = objc_msgSend(v7, "initWithIdentifier:title:depth:shareDescription:systemImageName:", v9, v10, 0, 0, v11);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

  }
}

void sub_100006D18(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICWidget sharedWidget](ICWidget, "sharedWidget"));
  v3 = objc_msgSend(v2, "hidesObject:", *(_QWORD *)(a1 + 32));

  if ((v3 & 1) == 0)
  {
    v4 = objc_opt_class(ICFolder);
    v5 = ICDynamicCast(v4, *(_QWORD *)(a1 + 32));
    v16 = (id)objc_claimAutoreleasedReturnValue(v5);
    v6 = *(id *)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities appURLForFolder:](ICAppURLUtilities, "appURLForFolder:", v16));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "absoluteString"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedTitle"));
    v10 = objc_msgSend(v16, "depth");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "shareDescription"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "systemImageName"));
    v13 = objc_msgSend(v6, "initWithIdentifier:title:depth:shareDescription:systemImageName:", v8, v9, v10, v11, v12);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

  }
}

void sub_100006E68(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICWidget sharedWidget](ICWidget, "sharedWidget"));
  v3 = objc_msgSend(v2, "hidesObject:", *(_QWORD *)(a1 + 32));

  if ((v3 & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = objc_opt_class(NSManagedObject);
    v6 = ICClassAndProtocolCast(v4, v5, 1);
    v16 = (id)objc_claimAutoreleasedReturnValue(v6);
    v7 = *(id *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities appURLForHTMLFolder:](ICAppURLUtilities, "appURLForHTMLFolder:", v16, &OBJC_PROTOCOL___ICLegacyFolder));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "absoluteString"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedTitle"));
    v11 = objc_msgSend(v16, "depth");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder defaultSystemImageName](ICFolder, "defaultSystemImageName"));
    v13 = objc_msgSend(v7, "initWithIdentifier:title:depth:shareDescription:systemImageName:", v9, v10, v11, 0, v12);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

  }
}

uint64_t sub_1000072F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  ValueMetadata *v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  ValueMetadata *v65;
  __int128 v66;
  char v67;
  uint64_t v68;

  v62 = a1;
  v1 = sub_100009F30(&qword_10008B210);
  __chkstk_darwin(v1);
  v3 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for QuickNoteContent(0);
  v4 = __chkstk_darwin(v61);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v58 = (uint64_t)&v53 - v7;
  v8 = type metadata accessor for Note(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v56 = (uint64_t)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v57 = (uint64_t)&v53 - v12;
  v13 = sub_100009F30(&qword_10008B218);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100009F30(&qword_10008B220);
  __chkstk_darwin(v19);
  v60 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = &type metadata for PencilAndPaperFeature;
  *(_QWORD *)&v66 = sub_10000AD68();
  *(_QWORD *)&v63 = "QNWidget";
  *((_QWORD *)&v63 + 1) = 8;
  v64 = 2;
  v21 = isFeatureEnabled(_:)(&v63);
  v22 = sub_10000ADAC(&v63);
  if ((v21 & 1) != 0)
  {
    v54 = v19;
    v55 = v1;
    sub_10000CC94(v59, (uint64_t)v18, &qword_10008B168);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 2, v8))
    {
      swift_storeEnumTagMultiPayload(v15, v13, 0);
      v23 = sub_10000AE94();
      v24 = sub_10000C5FC(&qword_10008B248, type metadata accessor for QuickNoteContent, (uint64_t)&unk_1000657A0);
      v25 = (uint64_t)v60;
      _ConditionalContent<>.init(storage:)(v15, &type metadata for QuickNoteEmpty, v61, v23, v24);
    }
    else
    {
      v37 = v57;
      sub_10000AEE0((uint64_t)v18, v57, type metadata accessor for Note);
      v38 = v56;
      sub_10000AF24(v37, v56, type metadata accessor for Note);
      v39 = v61;
      v40 = &v6[*(int *)(v61 + 20)];
      *(_QWORD *)v40 = swift_getKeyPath(&unk_1000656D8);
      v41 = sub_100009F30(&qword_10008B258);
      swift_storeEnumTagMultiPayload(v40, v41, 0);
      v42 = &v6[*(int *)(v39 + 24)];
      *(_QWORD *)v42 = swift_getKeyPath(&unk_100065708);
      v42[8] = 0;
      v43 = &v6[*(int *)(v39 + 28)];
      *(_QWORD *)v43 = swift_getKeyPath(&unk_100065730);
      v44 = sub_100009F30(&qword_10008B260);
      swift_storeEnumTagMultiPayload(v43, v44, 0);
      sub_10000AEE0(v38, (uint64_t)v6, type metadata accessor for Note);
      v45 = v58;
      sub_10000AEE0((uint64_t)v6, v58, type metadata accessor for QuickNoteContent);
      sub_10000AF24(v45, (uint64_t)v15, type metadata accessor for QuickNoteContent);
      swift_storeEnumTagMultiPayload(v15, v13, 1);
      v46 = sub_10000AE94();
      v47 = sub_10000C5FC(&qword_10008B248, type metadata accessor for QuickNoteContent, (uint64_t)&unk_1000657A0);
      v25 = (uint64_t)v60;
      _ConditionalContent<>.init(storage:)(v15, &type metadata for QuickNoteEmpty, v39, v46, v47);
      sub_10000AF68(v45, type metadata accessor for QuickNoteContent);
      sub_10000AF68(v37, type metadata accessor for Note);
    }
    v49 = v54;
    v48 = v55;
    sub_10000CC94(v25, (uint64_t)v3, &qword_10008B220);
    swift_storeEnumTagMultiPayload(v3, v48, 0);
    v50 = sub_100009F30(&qword_10008B230);
    v51 = sub_10000ADCC();
    v52 = sub_10000CC08(&qword_10008B250, &qword_10008B230, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v3, v49, v50, v51, v52);
    return sub_10000CCD8(v25, &qword_10008B220);
  }
  else
  {
    v26 = static HorizontalAlignment.center.getter(v22);
    sub_100007850((uint64_t)&v63);
    v27 = v64;
    v28 = v65;
    v29 = v67;
    v30 = v68;
    v31 = v63;
    v32 = v66;
    *(_QWORD *)v3 = v26;
    *((_QWORD *)v3 + 1) = 0;
    v3[16] = 1;
    *(_OWORD *)(v3 + 24) = v31;
    v3[40] = v27;
    *((_QWORD *)v3 + 6) = v28;
    *(_OWORD *)(v3 + 56) = v32;
    v3[72] = v29;
    *((_QWORD *)v3 + 10) = v30;
    swift_storeEnumTagMultiPayload(v3, v1, 1);
    v33 = sub_100009F30(&qword_10008B230);
    v34 = sub_10000ADCC();
    v35 = sub_10000CC08(&qword_10008B250, &qword_10008B230, (uint64_t)&protocol conformance descriptor for VStack<A>);
    return _ConditionalContent<>.init(storage:)(v3, v19, v33, v34, v35);
  }
}

uint64_t sub_100007850@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = static Font.title.getter();
  v3 = Text.font(_:)(v2, 0x7265656E69676E45, 0xEE00495520676E69, 0, &_swiftEmptyArrayStorage);
  v29 = v4;
  v30 = v3;
  v6 = v5;
  v31 = v7;
  v8 = swift_release(v2);
  v28 = v6 & 1;
  v9 = static Font.subheadline.getter(v8);
  v10 = Text.font(_:)(v9, 0x100000000000001BLL, 0x800000010006BD50, 0, &_swiftEmptyArrayStorage);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = swift_release(v9);
  v18 = v14 & 1;
  v19 = static Color.secondary.getter(v17);
  v20 = Text.foregroundColor(_:)(v19, v10, v12, v18, v16);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_release(v19);
  v24 &= 1u;
  sub_10000AFA4(v10, v12, v18);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)a1 = v30;
  *(_QWORD *)(a1 + 8) = v29;
  *(_BYTE *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v31;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v22;
  *(_BYTE *)(a1 + 48) = v24;
  *(_QWORD *)(a1 + 56) = v26;
  sub_10000AFB4(v30, v29, v28);
  swift_bridgeObjectRetain(v31);
  sub_10000AFB4(v20, v22, v24);
  swift_bridgeObjectRetain(v26);
  sub_10000AFA4(v20, v22, v24);
  swift_bridgeObjectRelease(v26);
  sub_10000AFA4(v30, v29, v28);
  return swift_bridgeObjectRelease(v31);
}

uint64_t sub_100007A10()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100007A2C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100007A50()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  v0 = static Color.black.getter();
  result = Gradient.Stop.init(color:location:)(v0, 0.7);
  qword_1000992A0 = result;
  qword_1000992A8 = v2;
  return result;
}

uint64_t sub_100007A84(uint64_t a1)
{
  return sub_100007AC4(0.62, 0.865, a1, &qword_1000992B0, &qword_1000992B8);
}

uint64_t sub_100007AA4(uint64_t a1)
{
  return sub_100007AC4(0.0, 0.95, a1, &qword_1000992C0, &qword_1000992C8);
}

uint64_t sub_100007AC4(double a1, double a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v9 = static Color.black.getter();
  v10 = Color.opacity(_:)(a1);
  swift_release(v9);
  result = Gradient.Stop.init(color:location:)(v10, a2);
  *a4 = result;
  *a5 = v12;
  return result;
}

uint64_t sub_100007B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_100009F30(&qword_10008B4C0);
  v1 = swift_allocObject(v0, 80, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100065600;
  if (qword_10008B008 != -1)
    swift_once(&qword_10008B008, sub_100007A50);
  v2 = qword_1000992A0;
  v3 = qword_1000992A8;
  *(_QWORD *)(v1 + 32) = qword_1000992A0;
  *(_QWORD *)(v1 + 40) = v3;
  v4 = qword_10008B010;
  swift_retain(v2);
  if (v4 != -1)
    swift_once(&qword_10008B010, sub_100007A84);
  v5 = qword_1000992B0;
  v6 = qword_1000992B8;
  *(_QWORD *)(v1 + 48) = qword_1000992B0;
  *(_QWORD *)(v1 + 56) = v6;
  v7 = qword_10008B018;
  swift_retain(v5);
  if (v7 != -1)
    swift_once(&qword_10008B018, sub_100007AA4);
  v8 = qword_1000992C0;
  v9 = qword_1000992C8;
  *(_QWORD *)(v1 + 64) = qword_1000992C0;
  *(_QWORD *)(v1 + 72) = v9;
  qword_1000992D0 = v1;
  return swift_retain(v8);
}

uint64_t sub_100007C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a1;
  v2 = sub_100009F30(&qword_10008B3F8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (uint64_t)&v38 - v6;
  v7 = sub_100009F30(&qword_10008B400);
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100009F30(&qword_10008B408);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v1 + *(int *)(type metadata accessor for QuickNoteContent(0) + 24);
  v14 = *(_QWORD *)v13;
  v15 = *(_BYTE *)(v13 + 8);
  sub_10000B2CC(*(_QWORD *)v13, v15);
  v16 = sub_1000337B0(v14, v15);
  sub_10000B470(v14, v15);
  sub_100007F40((uint64_t)v12);
  if ((v16 & 1) != 0)
  {
    v17 = &qword_10008B408;
    sub_10000CC94((uint64_t)v12, (uint64_t)v9, &qword_10008B408);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v18 = sub_10000C7D8();
    v19 = sub_10000CB84();
    _ConditionalContent<>.init(storage:)(v9, v10, v2, v18, v19);
    v20 = (uint64_t)v12;
  }
  else
  {
    v21 = v7;
    v39 = v10;
    if (qword_10008B020 != -1)
      swift_once(&qword_10008B020, sub_100007B2C);
    v22 = qword_1000992D0;
    v23 = swift_bridgeObjectRetain(qword_1000992D0);
    v24 = static UnitPoint.top.getter(v23);
    v26 = v25;
    v27 = static UnitPoint.bottom.getter();
    v29 = v28;
    Gradient.init(stops:)(v22);
    LinearGradient.init(gradient:startPoint:endPoint:)(&v42, v24, v26, v27, v29);
    v30 = v42;
    v38 = v43;
    v31 = v44;
    v32 = v45;
    sub_10000CC94((uint64_t)v12, (uint64_t)v5, &qword_10008B408);
    v33 = &v5[*(int *)(v2 + 36)];
    *(_QWORD *)v33 = v30;
    *(_OWORD *)(v33 + 8) = v38;
    *((_QWORD *)v33 + 3) = v31;
    *((_QWORD *)v33 + 4) = v32;
    sub_10000CCD8((uint64_t)v12, &qword_10008B408);
    v17 = &qword_10008B3F8;
    v34 = v40;
    sub_10000CC50((uint64_t)v5, v40, &qword_10008B3F8);
    sub_10000CC94(v34, (uint64_t)v9, &qword_10008B3F8);
    swift_storeEnumTagMultiPayload(v9, v21, 1);
    v35 = sub_10000C7D8();
    v36 = sub_10000CB84();
    _ConditionalContent<>.init(storage:)(v9, v39, v2, v35, v36);
    v20 = v34;
  }
  return sub_10000CCD8(v20, v17);
}

uint64_t sub_100007F40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t OpaqueTypeConformance2;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  __n128 v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  __n128 v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char v194[8];
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;

  v2 = v1;
  v191 = a1;
  v192 = type metadata accessor for ColorScheme(0);
  v190 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v189 = (uint64_t)&v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B170);
  v5 = __chkstk_darwin(v4);
  v155 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v176 = (uint64_t)&v154 - v8;
  __chkstk_darwin(v7);
  v188 = (uint64_t)&v154 - v9;
  v182 = type metadata accessor for AccessibilityChildBehavior(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for ContainerBackgroundPlacement(0);
  v172 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v167 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for ContentSizeCategory(0);
  v161 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v157 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for Font.TextStyle(0);
  v13 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v15 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100009F30(&qword_10008B490);
  __chkstk_darwin(v16);
  v18 = (char *)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100009F30(&qword_10008B480);
  __chkstk_darwin(v19);
  v21 = (char *)&v154 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100009F30(&qword_10008B468);
  __chkstk_darwin(v22);
  v24 = (char *)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100009F30(&qword_10008B460);
  v160 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v26 = (char *)&v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100009F30(&qword_10008B4C8);
  v164 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v158 = (char *)&v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100009F30(&qword_10008B458);
  __chkstk_darwin(v163);
  v29 = (char *)&v154 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100009F30(&qword_10008B448);
  __chkstk_darwin(v168);
  v166 = (uint64_t)&v154 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100009F30(&qword_10008B430);
  __chkstk_darwin(v170);
  v169 = (uint64_t)&v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100009F30(&qword_10008B4D0);
  v178 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v171 = (char *)&v154 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100009F30(&qword_10008B420);
  v33 = __chkstk_darwin(v179);
  v174 = (char *)&v154 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v175 = (char *)&v154 - v35;
  v184 = sub_100009F30(&qword_10008B418);
  v183 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v193 = (char *)&v154 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100009F30(&qword_10008B4D8);
  v186 = *(_QWORD *)(v37 - 8);
  v187 = v37;
  v38 = __chkstk_darwin(v37);
  v185 = (char *)&v154 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v18 = static HorizontalAlignment.center.getter(v38);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v40 = sub_100009F30(&qword_10008B4E0);
  v41 = sub_100008D5C(v2, (uint64_t)&v18[*(int *)(v40 + 44)]);
  v42 = static Alignment.center.getter(v41);
  sub_100059510(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v21, 0.0, 1, INFINITY, 0, v42, v43);
  sub_10000CCD8((uint64_t)v18, &qword_10008B490);
  v44 = v156;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Font.TextStyle.footnote(_:), v156);
  v45 = static Font.systemSingleLineA(_:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v44);
  KeyPath = swift_getKeyPath(&unk_100065840);
  sub_10000CC94((uint64_t)v21, (uint64_t)v24, &qword_10008B480);
  v47 = (uint64_t *)&v24[*(int *)(v22 + 36)];
  *v47 = KeyPath;
  v47[1] = v45;
  sub_10000CCD8((uint64_t)v21, &qword_10008B480);
  v48 = v161;
  v49 = v157;
  v50 = v162;
  (*(void (**)(char *, _QWORD, uint64_t))(v161 + 104))(v157, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v162);
  v51 = sub_10000CAE0();
  View.maximumSizeCategory(_:)(v49, v22, v51);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  v52 = sub_10000CCD8((uint64_t)v24, &qword_10008B468);
  v53 = v167;
  v54 = static ContainerBackgroundPlacement.widget.getter(v52);
  v195 = v2;
  v55 = static Alignment.center.getter(v54);
  v57 = v56;
  v196 = v22;
  v197 = v51;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v196, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
  v59 = v158;
  v60 = v159;
  View.containerBackground<A>(for:alignment:content:)(v53, v55, v57, sub_10000CC48, v194, v159, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v53, v173);
  v61 = (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v26, v60);
  v62 = static Edge.Set.leading.getter(v61);
  v173 = type metadata accessor for QuickNoteContent(0);
  v63 = v2 + *(int *)(v173 + 24);
  v64 = *(_QWORD *)v63;
  LOBYTE(v57) = *(_BYTE *)(v63 + 8);
  sub_10000B2CC(*(_QWORD *)v63, v57);
  LOBYTE(v49) = sub_1000337B0(v64, v57);
  v65 = sub_10000B470(v64, v57);
  if ((v49 & 1) != 0)
    v66.n128_f64[0] = 9.0;
  else
    v66.n128_f64[0] = 0.0;
  v67 = EdgeInsets.init(_all:)(v65, v66);
  v69 = v68;
  v71 = v70;
  v73 = v72;
  v74 = v164;
  v75 = v165;
  (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v29, v59, v165);
  v76 = &v29[*(int *)(v163 + 36)];
  *v76 = v62;
  *((double *)v76 + 1) = v67;
  *((_QWORD *)v76 + 2) = v69;
  *((_QWORD *)v76 + 3) = v71;
  *((_QWORD *)v76 + 4) = v73;
  v76[40] = 0;
  v77 = (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v59, v75);
  v78 = static Edge.Set.top.getter(v77);
  v79 = *(_QWORD *)v63;
  v80 = *(_BYTE *)(v63 + 8);
  sub_10000B2CC(*(_QWORD *)v63, v80);
  v81 = sub_1000337B0(v79, v80);
  v82 = sub_10000B470(v79, v80);
  v83.n128_u64[0] = 12.0;
  if ((v81 & 1) == 0)
    v83.n128_f64[0] = 0.0;
  v84 = EdgeInsets.init(_all:)(v82, v83);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  v91 = v166;
  sub_10000CC94((uint64_t)v29, v166, &qword_10008B458);
  v92 = v91 + *(int *)(v168 + 36);
  *(_BYTE *)v92 = v78;
  *(double *)(v92 + 8) = v84;
  *(_QWORD *)(v92 + 16) = v86;
  *(_QWORD *)(v92 + 24) = v88;
  *(_QWORD *)(v92 + 32) = v90;
  *(_BYTE *)(v92 + 40) = 0;
  v93 = (uint64_t)v29;
  v94 = v2;
  v95 = sub_10000CCD8(v93, &qword_10008B458);
  v96 = static Edge.Set.trailing.getter(v95);
  v97 = *(_QWORD *)v63;
  v98 = *(_BYTE *)(v63 + 8);
  sub_10000B2CC(*(_QWORD *)v63, v98);
  v99 = sub_1000337B0(v97, v98);
  v100 = sub_10000B470(v97, v98);
  if ((v99 & 1) != 0)
    v101.n128_f64[0] = 9.0;
  else
    v101.n128_f64[0] = 0.0;
  v102 = EdgeInsets.init(_all:)(v100, v101);
  v104 = v103;
  v106 = v105;
  v108 = v107;
  v109 = v169;
  sub_10000CC94(v91, v169, &qword_10008B448);
  v110 = v170;
  v111 = v109 + *(int *)(v170 + 36);
  *(_BYTE *)v111 = v96;
  *(double *)(v111 + 8) = v102;
  *(_QWORD *)(v111 + 16) = v104;
  *(_QWORD *)(v111 + 24) = v106;
  *(_QWORD *)(v111 + 32) = v108;
  *(_BYTE *)(v111 + 40) = 0;
  v112 = sub_10000CCD8(v91, &qword_10008B448);
  v113 = v180;
  static AccessibilityChildBehavior.ignore.getter(v112);
  v114 = sub_10000C99C(&qword_10008B438, &qword_10008B430, (void (*)(void))sub_10000C980);
  v115 = v171;
  View.accessibilityElement(children:)(v113, v110, v114);
  (*(void (**)(char *, uint64_t))(v181 + 8))(v113, v182);
  sub_10000CCD8(v109, &qword_10008B430);
  v116 = sub_10005BC54();
  v118 = v117;
  v196 = v110;
  v197 = v114;
  v119 = swift_getOpaqueTypeConformance2(&v196, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v120 = (uint64_t)v174;
  v121 = v177;
  View.accessibility(label:)(v116, v118, 0, &_swiftEmptyArrayStorage, v177, v119);
  swift_bridgeObjectRelease(v118);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v115, v121);
  v122 = *(_QWORD *)(v94 + 32);
  v123 = *(_QWORD *)(v94 + 40);
  swift_bridgeObjectRetain(v123);
  v124 = (uint64_t)v175;
  v125 = v179;
  ModifiedContent<>.accessibility(value:)(v122, v123, 0, &_swiftEmptyArrayStorage, v179);
  swift_bridgeObjectRelease(v123);
  sub_10000CCD8(v120, &qword_10008B420);
  v126 = sub_10000C8B4();
  v127 = v125;
  View.privacySensitive(_:)(1, v125, v126);
  sub_10000CCD8(v124, &qword_10008B420);
  v128 = type metadata accessor for Note(0);
  v129 = v176;
  sub_10000CC94(v94 + *(int *)(v128 + 44), v176, &qword_10008B170);
  v130 = type metadata accessor for URL(0);
  v131 = *(_QWORD *)(v130 - 8);
  v132 = v129;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130) == 1)
  {
    v133 = (void *)objc_opt_self(ICAppURLUtilities);
    v134 = objc_msgSend((id)objc_opt_self(ICAccount), "globalVirtualSystemPaperFolder");
    v135 = objc_msgSend(v133, "appURLForVirtualSmartFolder:", v134);

    if (v135)
    {
      v136 = (uint64_t)v155;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v135);

      v137 = 0;
      v138 = v190;
    }
    else
    {
      v137 = 1;
      v138 = v190;
      v136 = (uint64_t)v155;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v136, v137, 1, v130);
    v139 = v188;
    sub_10000CC50(v136, v188, &qword_10008B170);
    sub_10000CCD8(v132, &qword_10008B170);
  }
  else
  {
    v139 = v188;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32))(v188, v132, v130);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v131 + 56))(v139, 0, 1, v130);
    v138 = v190;
  }
  v196 = v127;
  v197 = v126;
  v140 = swift_getOpaqueTypeConformance2(&v196, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v141 = v185;
  v142 = v184;
  v143 = v193;
  View.widgetURL(_:)(v139, v184, v140);
  sub_10000CCD8(v139, &qword_10008B170);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v143, v142);
  v144 = v189;
  if (*(_BYTE *)(v94 + *(int *)(v128 + 64)) == 1)
  {
    v145 = v192;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v138 + 104))(v189, enum case for ColorScheme.light(_:), v192);
  }
  else
  {
    sub_100033780(v189);
    v145 = v192;
  }
  v146 = swift_getKeyPath(&unk_1000658D0);
  v147 = sub_100009F30(&qword_10008B408);
  v148 = v191;
  v149 = (uint64_t *)(v191 + *(int *)(v147 + 36));
  v150 = sub_100009F30(&qword_10008B4A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))((char *)v149 + *(int *)(v150 + 28), v144, v145);
  *v149 = v146;
  v152 = v186;
  v151 = v187;
  (*(void (**)(uint64_t, char *, uint64_t))(v186 + 16))(v148, v141, v187);
  (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v144, v145);
  return (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v141, v151);
}

uint64_t sub_100008D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = a2;
  v3 = sub_100009F30(&qword_10008B4E8);
  __chkstk_darwin(v3);
  v44 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Image.ResizingMode(0);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100009F30(&qword_10008B4F0);
  v48 = *(_QWORD *)(v12 - 8);
  v49 = v12;
  __chkstk_darwin(v12);
  v47 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100009F30(&qword_10008B4F8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v43 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v43 - v21;
  type metadata accessor for QuickNoteContent(0);
  v23 = a1;
  sub_100033968((uint64_t)v11);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  LODWORD(a1) = enum case for WidgetFamily.systemSmall(_:);
  v25 = type metadata accessor for Note(0);
  if (v24 != (_DWORD)a1)
  {
    v26 = *(_QWORD *)(v23 + *(int *)(v25 + 56));
    v39 = *(void (**)(char *, uint64_t))(v9 + 8);
    swift_retain(v26);
    v39(v11, v8);
    v27 = v50;
    if (v26)
      goto LABEL_3;
LABEL_5:
    v40 = sub_100009F30(&qword_10008B500);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v20, 1, 1, v40);
    goto LABEL_6;
  }
  v26 = *(_QWORD *)(v23 + *(int *)(v25 + 60));
  swift_retain(v26);
  v27 = v50;
  if (!v26)
    goto LABEL_5;
LABEL_3:
  v29 = v45;
  v28 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v46);
  v30 = Image.resizable(capInsets:resizingMode:)(v7, v26, 0.0, 0.0, 0.0, 0.0);
  swift_release(v26);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v7, v28);
  v32 = (uint64_t)v44;
  static WidgetAccentedRenderingMode.fullColor.getter(v31);
  v33 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
  v34 = v47;
  Image.widgetAccentedRenderingMode(_:)(v32, v30);
  swift_release(v30);
  sub_10000CCD8(v32, &qword_10008B4E8);
  v36 = v48;
  v35 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v20, v34, v49);
  v37 = sub_100009F30(&qword_10008B500);
  v38 = &v20[*(int *)(v37 + 36)];
  *(_QWORD *)v38 = 0;
  *((_WORD *)v38 + 4) = 257;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v20, 0, 1, v37);
LABEL_6:
  sub_10000CC50((uint64_t)v20, (uint64_t)v22, &qword_10008B4F8);
  sub_10000CC94((uint64_t)v22, (uint64_t)v17, &qword_10008B4F8);
  sub_10000CC94((uint64_t)v17, v27, &qword_10008B4F8);
  v41 = v27 + *(int *)(sub_100009F30(&qword_10008B508) + 48);
  *(_QWORD *)v41 = 0;
  *(_BYTE *)(v41 + 8) = 0;
  sub_10000CCD8((uint64_t)v22, &qword_10008B4F8);
  return sub_10000CCD8((uint64_t)v17, &qword_10008B4F8);
}

uint64_t sub_10000913C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for Note(0) + 64)) == 1)
  {
    result = static Color.white.getter();
  }
  else
  {
    if (qword_10008B130 != -1)
      swift_once(&qword_10008B130, sub_100039B20);
    result = swift_retain(qword_100099508);
  }
  *a2 = result;
  return result;
}

uint64_t sub_1000091B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t OpaqueTypeConformance2;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  unint64_t v90;
  void *v91;

  v87 = a1;
  v1 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v1);
  v86 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v79 = *(_QWORD *)(v3 - 8);
  v80 = v3;
  __chkstk_darwin(v3);
  v77 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContainerBackgroundPlacement(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008B330);
  __chkstk_darwin(v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100009F30(&qword_10008B338);
  __chkstk_darwin(v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100009F30(&qword_10008B340);
  __chkstk_darwin(v14);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100009F30(&qword_10008B348);
  v70 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100009F30(&qword_10008B350);
  v78 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v69 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100009F30(&qword_10008B358);
  __chkstk_darwin(v72);
  v73 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100009F30(&qword_10008B360);
  v84 = *(_QWORD *)(v22 - 8);
  v85 = v22;
  __chkstk_darwin(v22);
  v71 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100009F30(&qword_10008B368);
  v82 = *(_QWORD *)(v24 - 8);
  v83 = v24;
  v25 = __chkstk_darwin(v24);
  v81 = (char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v25);
  *((_QWORD *)v10 + 1) = 0x4014000000000000;
  v10[16] = 0;
  v27 = sub_100009F30(&qword_10008B370);
  v28 = sub_1000098A4((uint64_t *)&v10[*(int *)(v27 + 44)]);
  v29 = static Alignment.center.getter(v28);
  sub_100059568(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, INFINITY, 0, v29, v30);
  v31 = sub_10000CCD8((uint64_t)v10, &qword_10008B330);
  LOBYTE(v10) = static Edge.Set.all.getter(v31);
  sub_10000CC94((uint64_t)v13, (uint64_t)v16, &qword_10008B338);
  v32 = &v16[*(int *)(v14 + 36)];
  *v32 = (char)v10;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  v32[40] = 1;
  v33 = sub_10000CCD8((uint64_t)v13, &qword_10008B338);
  v34 = static ContainerBackgroundPlacement.widget.getter(v33);
  v35 = static Alignment.center.getter(v34);
  v37 = v36;
  v38 = sub_10000C400();
  View.containerBackground<A>(for:alignment:content:)(v7, v35, v37, sub_100009C48, 0, v14, &type metadata for Color, v38, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v7, v75);
  v39 = sub_10000CCD8((uint64_t)v16, &qword_10008B340);
  v40 = v77;
  static AccessibilityChildBehavior.ignore.getter(v39);
  v88 = v14;
  v89 = &type metadata for Color;
  v90 = v38;
  v91 = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v42 = v69;
  View.accessibilityElement(children:)(v40, v17, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v40, v80);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v19, v17);
  v43 = LocalizedStringKey.init(stringLiteral:)(0x6B63697551206F4ELL, 0xEE007365746F4E20);
  v44 = Text.init(_:tableName:bundle:comment:)(v43);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  v88 = v17;
  v89 = (void *)OpaqueTypeConformance2;
  v51 = v72;
  v52 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v53 = (uint64_t)v73;
  v54 = v76;
  View.accessibility(label:)(v44, v46, v50, v48, v76, v52);
  v55 = v46;
  v56 = v71;
  sub_10000AFA4(v44, v55, v50);
  swift_bridgeObjectRelease(v48);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v54);
  v57 = sub_10000C50C();
  View.privacySensitive(_:)(1, v51, v57);
  sub_10000CCD8(v53, &qword_10008B358);
  v58 = (void *)objc_opt_self(ICAppURLUtilities);
  v59 = objc_msgSend((id)objc_opt_self(ICAccount), "globalVirtualSystemPaperFolder");
  v60 = objc_msgSend(v58, "appURLForVirtualSmartFolder:", v59);

  if (v60)
  {
    v61 = (uint64_t)v86;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v60);

    v62 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 0, 1, v62);
  }
  else
  {
    v63 = type metadata accessor for URL(0);
    v61 = (uint64_t)v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v86, 1, 1, v63);
  }
  v88 = v51;
  v89 = (void *)v57;
  v64 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v65 = v81;
  v66 = v85;
  View.widgetURL(_:)(v61, v85, v64);
  sub_10000CCD8(v61, &qword_10008B170);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v56, v66);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v82 + 32))(v87, v65, v83);
}

uint64_t sub_1000098A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;

  v54 = a1;
  v53 = sub_100009F30(&qword_10008B3A0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v2 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100009F30(&qword_10008B3A8);
  v3 = __chkstk_darwin(v50);
  v52 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v45 = (char *)&v41 - v6;
  __chkstk_darwin(v5);
  v48 = (uint64_t)&v41 - v7;
  v49 = Image.init(_internalSystemName:)(0x746F6E6B63697571, 0xE900000000000065);
  v47 = static Font.largeTitle.getter();
  KeyPath = swift_getKeyPath(&unk_100065840);
  v8 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v44 = Color.init(_:)(v8);
  v43 = static HierarchicalShapeStyle.secondary.getter();
  v9 = LocalizedStringKey.init(stringLiteral:)(0x6B63697551206F4ELL, 0xEE007365746F4E20);
  v10 = Text.init(_:tableName:bundle:comment:)(v9);
  v12 = v11;
  v14 = v13;
  v42 = v13;
  v16 = v15 & 1;
  v17 = swift_getKeyPath(&unk_100065870);
  v18 = static Font.subheadline.getter(v17);
  v19 = swift_getKeyPath(&unk_100065840);
  v55 = v10;
  v56 = v12;
  v57 = v16;
  v58 = v14;
  v59 = v17;
  v60 = 1;
  v61 = v19;
  v62 = v18;
  v20 = static Font.Weight.semibold.getter();
  v21 = sub_100009F30(&qword_10008B3B0);
  v22 = sub_10000C6C8();
  View.fontWeight(_:)(*(_QWORD *)&v20, 0, v21, v22);
  sub_10000AFA4(v10, v12, v16);
  swift_release(v18);
  swift_release(v19);
  swift_release(v17);
  v23 = swift_bridgeObjectRelease(v42);
  v24 = static Color.secondary.getter(v23);
  v25 = swift_getKeyPath(&unk_1000658A0);
  v26 = v51;
  v27 = v45;
  v28 = v53;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v45, v2, v53);
  v29 = (uint64_t *)&v27[*(int *)(v50 + 36)];
  *v29 = v25;
  v29[1] = v24;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v2, v28);
  v30 = (uint64_t)v27;
  v31 = v48;
  sub_10000CC50(v30, v48, &qword_10008B3A8);
  v32 = v52;
  sub_10000CC94(v31, v52, &qword_10008B3A8);
  v33 = v54;
  v34 = v49;
  v36 = KeyPath;
  v35 = v47;
  *v54 = v49;
  v33[1] = v36;
  v37 = v44;
  v33[2] = v35;
  v33[3] = v37;
  *((_DWORD *)v33 + 8) = v43;
  v38 = v33;
  v39 = sub_100009F30(&qword_10008B3F0);
  sub_10000CC94(v32, (uint64_t)v38 + *(int *)(v39 + 48), &qword_10008B3A8);
  swift_retain(v34);
  swift_retain(v36);
  swift_retain(v35);
  swift_retain(v37);
  sub_10000CCD8(v31, &qword_10008B3A8);
  sub_10000CCD8(v32, &qword_10008B3A8);
  swift_release(v37);
  swift_release(v35);
  swift_release(v36);
  return swift_release(v34);
}

uint64_t sub_100009C48@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_10008B130 != -1)
    swift_once(&qword_10008B130, sub_100039B20);
  v2 = qword_100099508;
  *a1 = qword_100099508;
  return swift_retain(v2);
}

void type metadata accessor for ICPaperStyleType()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10008B160)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_100081EB0);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10008B160);
  }
}

uint64_t *sub_100009CF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v28;
  char *__dst;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;

  v4 = *(_QWORD *)(sub_100009F30(&qword_10008B168) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v6 = (int *)type metadata accessor for Note(0);
    v7 = *((_QWORD *)v6 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      v32 = v7;
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      v11 = a2[5];
      a1[4] = a2[4];
      a1[5] = v11;
      v12 = a2[7];
      a1[6] = a2[6];
      a1[7] = v12;
      v13 = a2[9];
      a1[8] = a2[8];
      a1[9] = v13;
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      v14 = a2[12];
      a1[11] = a2[11];
      a1[12] = v14;
      v15 = v6[11];
      __dst = (char *)a1 + v15;
      v31 = (char *)a2 + v15;
      v16 = type metadata accessor for URL(0);
      v28 = *(_QWORD *)(v16 - 8);
      v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      if (v30(v31, 1, v16))
      {
        v17 = sub_100009F30(&qword_10008B170);
        memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v31, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v16);
      }
      v18 = v6[12];
      v19 = *(uint64_t *)((char *)a2 + v18);
      *(uint64_t *)((char *)a1 + v18) = v19;
      v20 = v6[13];
      v21 = *(uint64_t *)((char *)a2 + v20);
      *(uint64_t *)((char *)a1 + v20) = v21;
      v22 = v6[14];
      v23 = *(uint64_t *)((char *)a2 + v22);
      *(uint64_t *)((char *)a1 + v22) = v23;
      v24 = v6[15];
      v25 = *(uint64_t *)((char *)a2 + v24);
      *(uint64_t *)((char *)a1 + v24) = v25;
      *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
      v26 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v32 + 56);
      swift_retain(v19);
      swift_bridgeObjectRetain(v21);
      swift_retain(v23);
      swift_retain(v25);
      v26(a1, 0, 2, v6);
    }
  }
  return a1;
}

uint64_t sub_100009F30(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100009F70(_QWORD *a1)
{
  int *v2;
  uint64_t result;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (int *)type metadata accessor for Note(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v2 - 1) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[3]);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[12]);
    v4 = (char *)a1 + v2[11];
    v5 = type metadata accessor for URL(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    swift_release(*(_QWORD *)((char *)a1 + v2[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v2[13]));
    swift_release(*(_QWORD *)((char *)a1 + v2[14]));
    return swift_release(*(_QWORD *)((char *)a1 + v2[15]));
  }
  return result;
}

_QWORD *sub_10000A074(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *__dst;
  uint64_t v30;

  v4 = (int *)type metadata accessor for Note(0);
  v5 = *((_QWORD *)v4 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v5 + 48))(a2, 2, v4))
  {
    v6 = sub_100009F30(&qword_10008B168);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v30 = v5;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    v12 = a2[12];
    a1[11] = a2[11];
    a1[12] = v12;
    v13 = v4[11];
    v28 = (char *)a2 + v13;
    __dst = (char *)a1 + v13;
    v14 = type metadata accessor for URL(0);
    v26 = *(_QWORD *)(v14 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v27(v28, 1, v14))
    {
      v15 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dst, v28, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v14);
    }
    v16 = v4[12];
    v17 = *(_QWORD *)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v17;
    v18 = v4[13];
    v19 = *(_QWORD *)((char *)a2 + v18);
    *(_QWORD *)((char *)a1 + v18) = v19;
    v20 = v4[14];
    v21 = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)a1 + v20) = v21;
    v22 = v4[15];
    v23 = *(_QWORD *)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v23;
    *((_BYTE *)a1 + v4[16]) = *((_BYTE *)a2 + v4[16]);
    v24 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56);
    swift_retain(v17);
    swift_bridgeObjectRetain(v19);
    swift_retain(v21);
    swift_retain(v23);
    v24(a1, 0, 2, v4);
  }
  return a1;
}

uint64_t sub_10000A28C(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, int *);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unsigned int (*v65)(const void *, uint64_t, uint64_t);
  const void *v66;
  void *__dst;

  v4 = (int *)type metadata accessor for Note(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v5 + 48);
  v7 = v6(a1, 2, v4);
  v8 = v6(a2, 2, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_10000AF68(a1, type metadata accessor for Note);
      goto LABEL_7;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v22);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v23 = *(_QWORD *)(a2 + 24);
    v24 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v25 = *(_QWORD *)(a2 + 40);
    v26 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v27 = *(_QWORD *)(a2 + 56);
    v28 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v29 = *(_QWORD *)(a2 + 72);
    v30 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v29;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v30);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v31 = *(_QWORD *)(a2 + 96);
    v32 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v31;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRelease(v32);
    v33 = v4[11];
    v34 = (void *)(a1 + v33);
    v35 = (void *)(a2 + v33);
    v36 = type metadata accessor for URL(0);
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
    v39 = v38(v34, 1, v36);
    v40 = v38(v35, 1, v36);
    if (v39)
    {
      if (!v40)
      {
        (*(void (**)(void *, void *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
LABEL_16:
        v51 = v4[12];
        v52 = *(_QWORD *)(a1 + v51);
        v53 = *(_QWORD *)(a2 + v51);
        *(_QWORD *)(a1 + v51) = v53;
        swift_retain(v53);
        swift_release(v52);
        v54 = v4[13];
        v55 = *(_QWORD *)(a2 + v54);
        v56 = *(_QWORD *)(a1 + v54);
        *(_QWORD *)(a1 + v54) = v55;
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRelease(v56);
        v57 = v4[14];
        v58 = *(_QWORD *)(a1 + v57);
        v59 = *(_QWORD *)(a2 + v57);
        *(_QWORD *)(a1 + v57) = v59;
        swift_retain(v59);
        swift_release(v58);
        v60 = v4[15];
        v61 = *(_QWORD *)(a1 + v60);
        v62 = *(_QWORD *)(a2 + v60);
        *(_QWORD *)(a1 + v60) = v62;
        swift_retain(v62);
        swift_release(v61);
        *(_BYTE *)(a1 + v4[16]) = *(_BYTE *)(a2 + v4[16]);
        return a1;
      }
    }
    else
    {
      if (!v40)
      {
        (*(void (**)(void *, void *, uint64_t))(v37 + 24))(v34, v35, v36);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v37 + 8))(v34, v36);
    }
    v50 = sub_100009F30(&qword_10008B170);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_16;
  }
  if (v8)
  {
LABEL_7:
    v20 = sub_100009F30(&qword_10008B168);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  v15 = v4[11];
  v66 = (const void *)(a2 + v15);
  __dst = (void *)(a1 + v15);
  v16 = type metadata accessor for URL(0);
  v64 = *(_QWORD *)(v16 - 8);
  v65 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48);
  v17 = v9;
  v18 = v16;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v65(v66, 1, v18))
  {
    v19 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v66, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v64 + 16))(__dst, v66, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dst, 0, 1, v18);
  }
  v41 = v4[12];
  v42 = *(_QWORD *)(a2 + v41);
  *(_QWORD *)(a1 + v41) = v42;
  v43 = v4[13];
  v44 = *(_QWORD *)(a2 + v43);
  *(_QWORD *)(a1 + v43) = v44;
  v45 = v4[14];
  v46 = *(_QWORD *)(a2 + v45);
  *(_QWORD *)(a1 + v45) = v46;
  v47 = v4[15];
  v48 = *(_QWORD *)(a2 + v47);
  *(_QWORD *)(a1 + v47) = v48;
  *(_BYTE *)(a1 + v4[16]) = *(_BYTE *)(a2 + v4[16]);
  v49 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v5 + 56);
  swift_retain(v42);
  swift_bridgeObjectRetain(v44);
  swift_retain(v46);
  swift_retain(v48);
  v49(a1, 0, 2, v4);
  return a1;
}

_OWORD *sub_10000A70C(_OWORD *a1, _OWORD *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (int *)type metadata accessor for Note(0);
  v5 = *((_QWORD *)v4 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v5 + 48))(a2, 2, v4))
  {
    v6 = sub_100009F30(&qword_10008B168);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    a1[4] = a2[4];
    *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
    v9 = v4[11];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_100009F30(&qword_10008B170);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_QWORD *)((char *)a1 + v4[12]) = *(_QWORD *)((char *)a2 + v4[12]);
    *(_QWORD *)((char *)a1 + v4[13]) = *(_QWORD *)((char *)a2 + v4[13]);
    *(_QWORD *)((char *)a1 + v4[14]) = *(_QWORD *)((char *)a2 + v4[14]);
    *(_QWORD *)((char *)a1 + v4[15]) = *(_QWORD *)((char *)a2 + v4[15]);
    *((_BYTE *)a1 + v4[16]) = *((_BYTE *)a2 + v4[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v5 + 56))(a1, 0, 2, v4);
  }
  return a1;
}

uint64_t sub_10000A894(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, int *);
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = (int *)type metadata accessor for Note(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v5 + 48);
  v7 = v6(a1, 2, v4);
  v8 = v6(a2, 2, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_10000AF68(a1, type metadata accessor for Note);
      goto LABEL_7;
    }
    v18 = *(_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v18;
    swift_bridgeObjectRelease(v19);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v20;
    swift_bridgeObjectRelease(v21);
    v22 = *(_QWORD *)(a2 + 40);
    v23 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v22;
    swift_bridgeObjectRelease(v23);
    v24 = *(_QWORD *)(a2 + 56);
    v25 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v24;
    swift_bridgeObjectRelease(v25);
    v26 = *(_QWORD *)(a2 + 72);
    v27 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v26;
    swift_bridgeObjectRelease(v27);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v28 = *(_QWORD *)(a2 + 96);
    v29 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v28;
    swift_bridgeObjectRelease(v29);
    v30 = v4[11];
    v31 = (void *)(a1 + v30);
    v32 = (void *)(a2 + v30);
    v33 = type metadata accessor for URL(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
    v36 = v35(v31, 1, v33);
    v37 = v35(v32, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_16:
        v39 = v4[12];
        v40 = *(_QWORD *)(a1 + v39);
        *(_QWORD *)(a1 + v39) = *(_QWORD *)(a2 + v39);
        swift_release(v40);
        v41 = v4[13];
        v42 = *(_QWORD *)(a1 + v41);
        *(_QWORD *)(a1 + v41) = *(_QWORD *)(a2 + v41);
        swift_bridgeObjectRelease(v42);
        v43 = v4[14];
        v44 = *(_QWORD *)(a1 + v43);
        *(_QWORD *)(a1 + v43) = *(_QWORD *)(a2 + v43);
        swift_release(v44);
        v45 = v4[15];
        v46 = *(_QWORD *)(a1 + v45);
        *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
        swift_release(v46);
        *(_BYTE *)(a1 + v4[16]) = *(_BYTE *)(a2 + v4[16]);
        return a1;
      }
    }
    else
    {
      if (!v37)
      {
        (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    }
    v38 = sub_100009F30(&qword_10008B170);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_16;
  }
  if (v8)
  {
LABEL_7:
    v17 = sub_100009F30(&qword_10008B168);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v11 = v4[11];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100009F30(&qword_10008B170);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_QWORD *)(a1 + v4[12]) = *(_QWORD *)(a2 + v4[12]);
  *(_QWORD *)(a1 + v4[13]) = *(_QWORD *)(a2 + v4[13]);
  *(_QWORD *)(a1 + v4[14]) = *(_QWORD *)(a2 + v4[14]);
  *(_QWORD *)(a1 + v4[15]) = *(_QWORD *)(a2 + v4[15]);
  *(_BYTE *)(a1 + v4[16]) = *(_BYTE *)(a2 + v4[16]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v5 + 56))(a1, 0, 2, v4);
  return a1;
}

uint64_t sub_10000ABE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000ABEC);
}

uint64_t sub_10000ABEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008B168);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10000AC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000AC38);
}

uint64_t sub_10000AC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008B168);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for QuickNoteWidgetView(uint64_t a1)
{
  return sub_10000AD34(a1, (uint64_t *)&unk_10008B1D0, (uint64_t)&nominal type descriptor for QuickNoteWidgetView);
}

void sub_10000AC90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10000C2F0(319, (unint64_t *)&qword_10008B1E0, type metadata accessor for Note, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ObjectStates);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t sub_10000AD10(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006EF70, 1);
}

uint64_t type metadata accessor for QuickNoteContent(uint64_t a1)
{
  return sub_10000AD34(a1, (uint64_t *)&unk_10008B2D0, (uint64_t)&nominal type descriptor for QuickNoteContent);
}

uint64_t sub_10000AD34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

unint64_t sub_10000AD68()
{
  unint64_t result;

  result = qword_10008B228;
  if (!qword_10008B228)
  {
    result = swift_getWitnessTable(&unk_10006AA5C, &type metadata for PencilAndPaperFeature);
    atomic_store(result, (unint64_t *)&qword_10008B228);
  }
  return result;
}

uint64_t sub_10000ADAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_10000ADCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B238;
  if (!qword_10008B238)
  {
    v1 = sub_10000AE50(&qword_10008B220);
    sub_10000AE94();
    sub_10000C5FC(&qword_10008B248, type metadata accessor for QuickNoteContent, (uint64_t)&unk_1000657A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B238);
  }
  return result;
}

uint64_t sub_10000AE50(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_10000AE94()
{
  unint64_t result;

  result = qword_10008B240;
  if (!qword_10008B240)
  {
    result = swift_getWitnessTable(&unk_1000657F0, &type metadata for QuickNoteEmpty);
    atomic_store(result, (unint64_t *)&qword_10008B240);
  }
  return result;
}

uint64_t sub_10000AEE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000AF24(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000AF68(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000AFA4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10000AFB4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain(a2);
}

_QWORD *sub_10000AFC4(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  char *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v11 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v11;
    v12 = (int *)type metadata accessor for Note(0);
    v13 = v12[11];
    __dst = (char *)v4 + v13;
    v48 = (char *)a2 + v13;
    v14 = type metadata accessor for URL(0);
    v47 = *(_QWORD *)(v14 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v49(v48, 1, v14))
    {
      v15 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v48, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(__dst, v48, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v14);
    }
    v17 = v12[12];
    v18 = *(uint64_t *)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v18;
    v19 = v12[13];
    v20 = *(uint64_t *)((char *)a2 + v19);
    *(_QWORD *)((char *)v4 + v19) = v20;
    v21 = v12[14];
    v22 = *(uint64_t *)((char *)a2 + v21);
    *(_QWORD *)((char *)v4 + v21) = v22;
    v23 = v12[15];
    v24 = *(uint64_t *)((char *)a2 + v23);
    *(_QWORD *)((char *)v4 + v23) = v24;
    *((_BYTE *)v4 + v12[16]) = *((_BYTE *)a2 + v12[16]);
    v25 = a3[5];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    swift_retain(v18);
    swift_bridgeObjectRetain(v20);
    swift_retain(v22);
    swift_retain(v24);
    v28 = sub_100009F30(&qword_10008B258);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
    v32 = a3[6];
    v33 = (char *)v4 + v32;
    v34 = (uint64_t)a2 + v32;
    v35 = *(_QWORD *)v34;
    v36 = *(_BYTE *)(v34 + 8);
    sub_10000B2CC(*(_QWORD *)v34, v36);
    *(_QWORD *)v33 = v35;
    v33[8] = v36;
    v37 = a3[7];
    v38 = (_QWORD *)((char *)v4 + v37);
    v39 = (uint64_t *)((char *)a2 + v37);
    v40 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
      v42 = v38;
      v43 = v40;
      v44 = 1;
    }
    else
    {
      v45 = *v39;
      *v38 = *v39;
      swift_retain(v45);
      v42 = v38;
      v43 = v40;
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v43, v44);
  }
  return v4;
}

uint64_t sub_10000B2CC(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t sub_10000B2D8(_QWORD *a1, int *a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[12]);
  v4 = (int *)type metadata accessor for Note(0);
  v5 = (char *)a1 + v4[11];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  swift_release(*(_QWORD *)((char *)a1 + v4[12]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[13]));
  swift_release(*(_QWORD *)((char *)a1 + v4[14]));
  swift_release(*(_QWORD *)((char *)a1 + v4[15]));
  v8 = (_QWORD *)((char *)a1 + a2[5]);
  v9 = sub_100009F30(&qword_10008B258);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  sub_10000B470(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v11 = (_QWORD *)((char *)a1 + a2[7]);
  v12 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v11, v12) != 1)
    return swift_release(*v11);
  v13 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
}

uint64_t sub_10000B470(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_10000B47C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  const void *v44;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  void *__dst;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = (int *)type metadata accessor for Note(0);
  v12 = v11[11];
  __dst = (void *)(a1 + v12);
  v44 = (const void *)(a2 + v12);
  v13 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v13 - 8);
  v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v45(v44, 1, v13))
  {
    v14 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v43 + 16))(__dst, v44, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v13);
  }
  v15 = v11[12];
  v16 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  v17 = v11[13];
  v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  v19 = v11[14];
  v20 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v21 = v11[15];
  v22 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  *(_BYTE *)(a1 + v11[16]) = *(_BYTE *)(a2 + v11[16]);
  v23 = a3[5];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  swift_retain(v16);
  swift_bridgeObjectRetain(v18);
  swift_retain(v20);
  swift_retain(v22);
  v26 = sub_100009F30(&qword_10008B258);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
    v28 = 1;
  }
  else
  {
    v29 = *v25;
    *v24 = *v25;
    swift_retain(v29);
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v28);
  v30 = a3[6];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_QWORD *)v32;
  v34 = *(_BYTE *)(v32 + 8);
  sub_10000B2CC(*(_QWORD *)v32, v34);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = v34;
  v35 = a3[7];
  v36 = (uint64_t *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v38 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
  {
    v39 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v36, v37, v39);
    v40 = 1;
  }
  else
  {
    v41 = *v37;
    *v36 = *v37;
    swift_retain(v41);
    v40 = 0;
  }
  swift_storeEnumTagMultiPayload(v36, v38, v40);
  return a1;
}

uint64_t sub_10000B750(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for Note(0);
  v19 = v18[11];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100009F30(&qword_10008B170);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = v18[12];
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a2 + v28);
  *(_QWORD *)(a1 + v28) = v30;
  swift_retain(v30);
  swift_release(v29);
  v31 = v18[13];
  v32 = *(_QWORD *)(a2 + v31);
  v33 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = v18[14];
  v35 = *(_QWORD *)(a1 + v34);
  v36 = *(_QWORD *)(a2 + v34);
  *(_QWORD *)(a1 + v34) = v36;
  swift_retain(v36);
  swift_release(v35);
  v37 = v18[15];
  v38 = *(_QWORD *)(a1 + v37);
  v39 = *(_QWORD *)(a2 + v37);
  *(_QWORD *)(a1 + v37) = v39;
  swift_retain(v39);
  swift_release(v38);
  *(_BYTE *)(a1 + v18[16]) = *(_BYTE *)(a2 + v18[16]);
  if (a1 != a2)
  {
    v40 = a3[5];
    v41 = (uint64_t *)(a1 + v40);
    v42 = (uint64_t *)(a2 + v40);
    sub_10000CCD8(a1 + v40, &qword_10008B258);
    v43 = sub_100009F30(&qword_10008B258);
    if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
    {
      v44 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v41, v42, v44);
      v45 = 1;
    }
    else
    {
      v46 = *v42;
      *v41 = *v42;
      swift_retain(v46);
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v41, v43, v45);
  }
  v47 = a3[6];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = *(_QWORD *)v49;
  v51 = *(_BYTE *)(v49 + 8);
  sub_10000B2CC(*(_QWORD *)v49, v51);
  v52 = *(_QWORD *)v48;
  v53 = *(_BYTE *)(v48 + 8);
  *(_QWORD *)v48 = v50;
  *(_BYTE *)(v48 + 8) = v51;
  sub_10000B470(v52, v53);
  if (a1 != a2)
  {
    v54 = a3[7];
    v55 = (uint64_t *)(a1 + v54);
    v56 = (uint64_t *)(a2 + v54);
    sub_10000CCD8(a1 + v54, &qword_10008B260);
    v57 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v56, v57) == 1)
    {
      v58 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v55, v56, v58);
      v59 = 1;
    }
    else
    {
      v60 = *v56;
      *v55 = *v56;
      swift_retain(v60);
      v59 = 0;
    }
    swift_storeEnumTagMultiPayload(v55, v57, v59);
  }
  return a1;
}

uint64_t sub_10000BAFC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v8 = (int *)type metadata accessor for Note(0);
  v9 = v8[11];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100009F30(&qword_10008B170);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_QWORD *)(a1 + v8[12]) = *(_QWORD *)(a2 + v8[12]);
  *(_QWORD *)(a1 + v8[13]) = *(_QWORD *)(a2 + v8[13]);
  *(_QWORD *)(a1 + v8[14]) = *(_QWORD *)(a2 + v8[14]);
  *(_QWORD *)(a1 + v8[15]) = *(_QWORD *)(a2 + v8[15]);
  *(_BYTE *)(a1 + v8[16]) = *(_BYTE *)(a2 + v8[16]);
  v15 = a3[5];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_100009F30(&qword_10008B258);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v20 = a3[6];
  v21 = a3[7];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = (void *)(a1 + v21);
  v25 = (const void *)(a2 + v21);
  v26 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
    swift_storeEnumTagMultiPayload(v24, v26, 1);
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10000BD38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for Note(0);
  v19 = v18[11];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = sub_100009F30(&qword_10008B170);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  v28 = v18[12];
  v29 = *(_QWORD *)(a1 + v28);
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  swift_release(v29);
  v30 = v18[13];
  v31 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_bridgeObjectRelease(v31);
  v32 = v18[14];
  v33 = *(_QWORD *)(a1 + v32);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  swift_release(v33);
  v34 = v18[15];
  v35 = *(_QWORD *)(a1 + v34);
  *(_QWORD *)(a1 + v34) = *(_QWORD *)(a2 + v34);
  swift_release(v35);
  *(_BYTE *)(a1 + v18[16]) = *(_BYTE *)(a2 + v18[16]);
  if (a1 != a2)
  {
    v36 = a3[5];
    v37 = (void *)(a1 + v36);
    v38 = (const void *)(a2 + v36);
    sub_10000CCD8(a1 + v36, &qword_10008B258);
    v39 = sub_100009F30(&qword_10008B258);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v37, v38, v40);
      swift_storeEnumTagMultiPayload(v37, v39, 1);
    }
    else
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
  }
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  v45 = *(_QWORD *)v42;
  v46 = *(_BYTE *)(v42 + 8);
  *(_QWORD *)v42 = v44;
  *(_BYTE *)(v42 + 8) = (_BYTE)v43;
  sub_10000B470(v45, v46);
  if (a1 != a2)
  {
    v47 = a3[7];
    v48 = (void *)(a1 + v47);
    v49 = (const void *)(a2 + v47);
    sub_10000CCD8(a1 + v47, &qword_10008B260);
    v50 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v48, v49, v51);
      swift_storeEnumTagMultiPayload(v48, v50, 1);
    }
    else
    {
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10000C060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000C06C);
}

uint64_t sub_10000C06C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = type metadata accessor for Note(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_100009F30(&qword_10008B268);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v11 = sub_100009F30(&qword_10008B270);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[6] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10000C13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000C148);
}

uint64_t sub_10000C148(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for Note(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_100009F30(&qword_10008B268);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        return result;
      }
      v10 = sub_100009F30(&qword_10008B270);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10000C218(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for Note(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000C2F0(319, &qword_10008B2E0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      sub_10000C2F0(319, (unint64_t *)&unk_10008B2E8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

void sub_10000C2F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

ValueMetadata *type metadata accessor for QuickNoteEmpty()
{
  return &type metadata for QuickNoteEmpty;
}

unint64_t sub_10000C35C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B320;
  if (!qword_10008B320)
  {
    v1 = sub_10000AE50(&qword_10008B328);
    sub_10000ADCC();
    sub_10000CC08(&qword_10008B250, &qword_10008B230, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B320);
  }
  return result;
}

uint64_t sub_10000C3E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006EFC0, 1);
}

uint64_t sub_10000C3F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006EF98, 1);
}

unint64_t sub_10000C400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B378;
  if (!qword_10008B378)
  {
    v1 = sub_10000AE50(&qword_10008B340);
    sub_10000C48C(&qword_10008B380, &qword_10008B338, &qword_10008B388, &qword_10008B330);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B378);
  }
  return result;
}

uint64_t sub_10000C48C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000AE50(a2);
    sub_10000CC08(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000C50C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;

  result = qword_10008B390;
  if (!qword_10008B390)
  {
    v1 = sub_10000AE50(&qword_10008B358);
    v2 = sub_10000AE50(&qword_10008B348);
    v4 = sub_10000AE50(&qword_10008B340);
    v5 = &type metadata for Color;
    v6 = sub_10000C400();
    v7 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v4 = v2;
    v5 = (void *)OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000C5FC(&qword_10008B398, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B390);
  }
  return result;
}

uint64_t sub_10000C5FC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000C644(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ColorScheme(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.colorScheme.setter(v3);
}

unint64_t sub_10000C6C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B3B8;
  if (!qword_10008B3B8)
  {
    v1 = sub_10000AE50(&qword_10008B3B0);
    sub_10000C74C();
    sub_10000CC08(&qword_10008B3E0, &qword_10008B3E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B3B8);
  }
  return result;
}

unint64_t sub_10000C74C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B3C0;
  if (!qword_10008B3C0)
  {
    v1 = sub_10000AE50(&qword_10008B3C8);
    sub_10000CC08(&qword_10008B3D0, &qword_10008B3D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B3C0);
  }
  return result;
}

unint64_t sub_10000C7D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_10008B410;
  if (!qword_10008B410)
  {
    v1 = sub_10000AE50(&qword_10008B408);
    v2 = sub_10000AE50(&qword_10008B418);
    v4 = sub_10000AE50(&qword_10008B420);
    v5 = sub_10000C8B4();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_10000CC08(&qword_10008B498, &qword_10008B4A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B410);
  }
  return result;
}

unint64_t sub_10000C8B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008B428;
  if (!qword_10008B428)
  {
    v1 = sub_10000AE50(&qword_10008B420);
    v2[0] = sub_10000AE50(&qword_10008B430);
    v2[1] = sub_10000C99C(&qword_10008B438, &qword_10008B430, (void (*)(void))sub_10000C980);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000C5FC(&qword_10008B398, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B428);
  }
  return result;
}

uint64_t sub_10000C980()
{
  return sub_10000C99C(&qword_10008B440, &qword_10008B448, (void (*)(void))sub_10000CA08);
}

uint64_t sub_10000C99C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000AE50(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000CA08()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  result = qword_10008B450;
  if (!qword_10008B450)
  {
    v1 = sub_10000AE50(&qword_10008B458);
    v2 = sub_10000AE50(&qword_10008B460);
    v4 = sub_10000AE50(&qword_10008B468);
    v5 = (void *)sub_10000CAE0();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
    v4 = v2;
    v5 = &type metadata for Color;
    v6 = OpaqueTypeConformance2;
    v7 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B450);
  }
  return result;
}

unint64_t sub_10000CAE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B470;
  if (!qword_10008B470)
  {
    v1 = sub_10000AE50(&qword_10008B468);
    sub_10000C48C(&qword_10008B478, &qword_10008B480, &qword_10008B488, &qword_10008B490);
    sub_10000CC08(&qword_10008B3E0, &qword_10008B3E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B470);
  }
  return result;
}

unint64_t sub_10000CB84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B4A8;
  if (!qword_10008B4A8)
  {
    v1 = sub_10000AE50(&qword_10008B3F8);
    sub_10000C7D8();
    sub_10000CC08(&qword_10008B4B0, &qword_10008B4B8, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B4A8);
  }
  return result;
}

uint64_t sub_10000CC08(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000AE50(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000CC48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10000913C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10000CC50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100009F30(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000CC94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100009F30(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000CCD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100009F30(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000CD14()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  unint64_t v4;

  v0 = sub_10000AE50(&qword_10008B360);
  v3 = sub_10000AE50(&qword_10008B358);
  v4 = sub_10000C50C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
}

unint64_t sub_10000CD8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B510;
  if (!qword_10008B510)
  {
    v1 = sub_10000AE50(&qword_10008B518);
    sub_10000C7D8();
    sub_10000CB84();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008B510);
  }
  return result;
}

uint64_t sub_10000CDFC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100010B60(v0, qword_10008B520);
  sub_100010130(v0, (uint64_t)qword_10008B520);
  return static Logger.widget.getter();
}

uint64_t sub_10000CE48@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10000CE58()
{
  _QWORD *v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE v27[80];

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, 0, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = sub_100009F30(&qword_10008B638);
  inited = swift_initStackObject(v7, v27);
  *(_OWORD *)(inited + 16) = xmmword_100065600;
  v10 = v0[2];
  v9 = v0[3];
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v6;
  v12 = v0[5];
  v11 = v0[6];
  *(_QWORD *)(inited + 64) = v12;
  *(_QWORD *)(inited + 72) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain_n(v9, 2);
  v13 = sub_10005E6F0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v15 = *((_QWORD *)v13 + 2);
  v14 = *((_QWORD *)v13 + 3);
  v16 = v15 + 1;
  if (v15 >= v14 >> 1)
    v13 = sub_10005E6F0((char *)(v14 > 1), v15 + 1, 1, v13);
  *((_QWORD *)v13 + 2) = v16;
  v17 = &v13[16 * v15];
  *((_QWORD *)v17 + 4) = v10;
  *((_QWORD *)v17 + 5) = v9;
  v18 = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRetain(v6);
  if (v16 >= v18 >> 1)
    v13 = sub_10005E6F0((char *)(v18 > 1), v15 + 2, 1, v13);
  *((_QWORD *)v13 + 2) = v15 + 2;
  v19 = &v13[16 * v16];
  *((_QWORD *)v19 + 4) = v4;
  *((_QWORD *)v19 + 5) = v6;
  if (v11)
  {
    v20 = *((_QWORD *)v13 + 2);
    v21 = *((_QWORD *)v13 + 3);
    swift_bridgeObjectRetain(v11);
    if (v20 >= v21 >> 1)
      v13 = sub_10005E6F0((char *)(v21 > 1), v20 + 1, 1, v13);
    *((_QWORD *)v13 + 2) = v20 + 1;
    v22 = &v13[16 * v20];
    *((_QWORD *)v22 + 4) = v12;
    *((_QWORD *)v22 + 5) = v11;
  }
  swift_release(inited);
  v23 = sub_100009F30(&qword_10008B628);
  v24 = sub_10001157C();
  v25 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v23, v24);
  swift_bridgeObjectRelease(v13);
  return v25;
}

uint64_t sub_10000D0A4(_QWORD *a1)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, 0);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v9 = a1[2];
  v8 = a1[3];
  v11 = a1[8];
  v10 = a1[9];
  swift_bridgeObjectRetain_n(v8, 2);
  swift_bridgeObjectRetain(v10);
  v12 = sub_10005E6F0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v14 = *((_QWORD *)v12 + 2);
  v13 = *((_QWORD *)v12 + 3);
  v15 = v14 + 1;
  if (v14 >= v13 >> 1)
    v12 = sub_10005E6F0((char *)(v13 > 1), v14 + 1, 1, v12);
  *((_QWORD *)v12 + 2) = v15;
  v16 = &v12[16 * v14];
  *((_QWORD *)v16 + 4) = v9;
  *((_QWORD *)v16 + 5) = v8;
  v17 = *((_QWORD *)v12 + 3);
  swift_bridgeObjectRetain(v7);
  if (v15 >= v17 >> 1)
    v12 = sub_10005E6F0((char *)(v17 > 1), v14 + 2, 1, v12);
  *((_QWORD *)v12 + 2) = v14 + 2;
  v18 = &v12[16 * v15];
  *((_QWORD *)v18 + 4) = v5;
  *((_QWORD *)v18 + 5) = v7;
  v19 = *((_QWORD *)v12 + 2);
  v20 = *((_QWORD *)v12 + 3);
  swift_bridgeObjectRetain(v10);
  if (v19 >= v20 >> 1)
    v12 = sub_10005E6F0((char *)(v20 > 1), v19 + 1, 1, v12);
  *((_QWORD *)v12 + 2) = v19 + 1;
  v21 = &v12[16 * v19];
  *((_QWORD *)v21 + 4) = v11;
  *((_QWORD *)v21 + 5) = v10;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v7);
  v22 = sub_100009F30(&qword_10008B628);
  v23 = sub_10001157C();
  v24 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v22, v23);
  swift_bridgeObjectRelease(v12);
  return v24;
}

uint64_t sub_10000D2C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v4 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "identifier");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v35 = v10;
    v36 = v9;

  }
  else
  {
    v35 = 0xE000000000000000;
    v36 = 0;
  }
  v11 = objc_msgSend(a1, "localizedTitle");
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v13 = v12;

  v14 = objc_msgSend(a1, "isSharedViaICloud");
  v15 = objc_msgSend(a1, "shareDescription");
  if (v15)
  {
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v20 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForFolder:", a1);
  if (v20)
  {
    v21 = v20;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v22 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 0, 1, v22);
  }
  else
  {
    v23 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v6, 1, 1, v23);
  }
  v24 = objc_msgSend(a1, "systemImageName");
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = Image.init(_internalSystemName:)(v25, v27);
  v29 = sub_10001063C(a1);

  v30 = v35;
  *(_QWORD *)a2 = v36;
  *(_QWORD *)(a2 + 8) = v30;
  *(_QWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v19;
  v31 = (int *)type metadata accessor for NotesFolder(0);
  result = sub_10000CC50((uint64_t)v6, a2 + v31[8], &qword_10008B170);
  *(_QWORD *)(a2 + v31[9]) = v28;
  *(_QWORD *)(a2 + v31[10]) = v29;
  return result;
}

uint64_t sub_10000D508@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t result;
  uint64_t v26;

  v4 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "identifier");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = objc_msgSend(a1, "title");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForVirtualSmartFolder:", a1);
  if (v15)
  {
    v16 = v15;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v17 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 0, 1, v17);
  }
  else
  {
    v18 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  }
  v19 = objc_msgSend(a1, "systemImageName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v23 = Image.init(_internalSystemName:)(v20, v22);
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v14;
  *(_BYTE *)(a2 + 32) = 0;
  v24 = (int *)type metadata accessor for NotesFolder(0);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  result = sub_10000CC50((uint64_t)v6, a2 + v24[8], &qword_10008B170);
  *(_QWORD *)(a2 + v24[9]) = v23;
  *(_QWORD *)(a2 + v24[10]) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10000D6E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t result;
  uint64_t v27;

  v4 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "identifier");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0xE000000000000000;
  }
  v12 = objc_msgSend(a1, "allItemsFolderLocalizedTitle");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForFolder:", a1);
  if (v16)
  {
    v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v18 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 0, 1, v18);
  }
  else
  {
    v19 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
  }
  v20 = objc_msgSend((id)objc_opt_self(ICFolder), "defaultSystemImageName");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = Image.init(systemName:)(v21, v23);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v15;
  *(_BYTE *)(a2 + 32) = 0;
  v25 = (int *)type metadata accessor for NotesFolder(0);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  result = sub_10000CC50((uint64_t)v6, a2 + v25[8], &qword_10008B170);
  *(_QWORD *)(a2 + v25[9]) = v24;
  *(_QWORD *)(a2 + v25[10]) = &_swiftEmptyArrayStorage;
  return result;
}

id sub_10000D8D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;

  v4 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "externalIdentifier");
  if (result)
  {
    v8 = result;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v11 = v10;

    v12 = objc_msgSend(a1, "localizedTitle");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForHTMLFolder:", a1);
    if (v16)
    {
      v17 = v16;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

      v18 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 0, 1, v18);
    }
    else
    {
      v19 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
    }
    v20 = objc_msgSend((id)objc_opt_self(ICFolder), "defaultSystemImageName");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = Image.init(systemName:)(v21, v23);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v15;
    *(_BYTE *)(a2 + 32) = 0;
    v25 = (int *)type metadata accessor for NotesFolder(0);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    result = (id)sub_10000CC50((uint64_t)v6, a2 + v25[8], &qword_10008B170);
    *(_QWORD *)(a2 + v25[9]) = v24;
    *(_QWORD *)(a2 + v25[10]) = &_swiftEmptyArrayStorage;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10000DAB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;

  v4 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "accountIdentifier");
  if (result)
  {
    v8 = result;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v11 = v10;

    v12 = objc_msgSend(a1, "allItemsFolderLocalizedTitle");
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

    }
    else
    {
      v14 = 0;
      v16 = 0xE000000000000000;
    }
    v17 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForHTMLFolder:", a1);
    if (v17)
    {
      v18 = v17;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

      v19 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 0, 1, v19);
    }
    else
    {
      v20 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 1, 1, v20);
    }
    v21 = objc_msgSend((id)objc_opt_self(ICFolder), "defaultSystemImageName");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v25 = Image.init(systemName:)(v22, v24);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v16;
    *(_BYTE *)(a2 + 32) = 0;
    v26 = (int *)type metadata accessor for NotesFolder(0);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    result = (id)sub_10000CC50((uint64_t)v6, a2 + v26[8], &qword_10008B170);
    *(_QWORD *)(a2 + v26[9]) = v25;
    *(_QWORD *)(a2 + v26[10]) = &_swiftEmptyArrayStorage;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000DCB0@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (**v59)(char *, uint64_t);
  char *v60;
  void *v61;
  NSURL *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  NSURL *v66;
  id v67;
  int *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  void *v91;
  void *v92;
  unsigned int v93;
  NSURL *v94;
  id v95;
  id v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  unsigned int v103;
  uint64_t v104;
  NSURL *v105;
  void (**v106)(char *, uint64_t);
  id v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  unsigned int v114;
  void *v115;
  id v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  id v122;
  id v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  __n128 v136;
  void (*v137)(char *, uint64_t);
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  id v154;
  id v155;
  void *v156;
  char *v157;
  uint64_t v158;
  id v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  _QWORD *v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  id v185;
  uint64_t v186;
  int *v187;
  char *v188;
  uint64_t v189;
  id v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;

  v190 = a3;
  v191 = a1;
  v185 = a2;
  v186 = a4;
  v180 = sub_100009F30(&qword_10008B538);
  v4 = __chkstk_darwin(v180);
  v179 = (uint64_t)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v169 = (char *)&v168 - v7;
  v8 = __chkstk_darwin(v6);
  v174 = (char *)&v168 - v9;
  v10 = __chkstk_darwin(v8);
  v177 = (char *)&v168 - v11;
  v12 = __chkstk_darwin(v10);
  v175 = (char *)&v168 - v13;
  __chkstk_darwin(v12);
  v178 = (uint64_t)&v168 - v14;
  v15 = type metadata accessor for Logger(0);
  v182 = *(_QWORD *)(v15 - 8);
  v183 = v15;
  __chkstk_darwin(v15);
  v188 = (char *)&v168 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v17);
  v19 = (char *)&v168 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v21 = *(char **)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v173 = (char *)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v170 = (char *)&v168 - v25;
  __chkstk_darwin(v24);
  v181 = (char *)&v168 - v26;
  v27 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v168 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = (int *)type metadata accessor for NotesFolder(0);
  v189 = *((_QWORD *)v31 - 1);
  v32 = __chkstk_darwin(v31);
  v176 = (uint64_t)&v168 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v171 = (uint64_t)&v168 - v35;
  v36 = __chkstk_darwin(v34);
  v172 = (uint64_t)&v168 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v168 - v39;
  v41 = UUID.init()(v38);
  v42 = UUID.uuidString.getter(v41);
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  *(_QWORD *)v40 = v42;
  *((_QWORD *)v40 + 1) = v44;
  *((_QWORD *)v40 + 2) = 0;
  *((_QWORD *)v40 + 3) = 0xE000000000000000;
  v40[32] = 0;
  *((_QWORD *)v40 + 5) = 0;
  *((_QWORD *)v40 + 6) = 0;
  v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v21 + 7);
  v45(&v40[v31[8]], 1, 1, v20);
  v46 = v31[9];
  v47 = objc_msgSend((id)objc_opt_self(ICFolder), "defaultSystemImageName");
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  v50 = v49;

  *(_QWORD *)&v40[v46] = Image.init(systemName:)(v48, v50);
  v187 = v31;
  v51 = v31[10];
  v52 = v191;
  v184 = v40;
  *(_QWORD *)&v40[v51] = &_swiftEmptyArrayStorage;
  v53 = objc_msgSend(v52, "identifier");
  if (!v53)
  {
    v45(v19, 1, 1, v20);
    goto LABEL_8;
  }
  v54 = v53;
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v57 = v56;

  swift_bridgeObjectRetain(v57);
  URL.init(string:)(v55, v57);
  swift_bridgeObjectRelease_n(v57, 2);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v21 + 6))(v19, 1, v20) == 1)
  {
LABEL_8:
    sub_10000CCD8((uint64_t)v19, &qword_10008B170);
    v73 = v183;
    if (qword_10008B028 != -1)
      swift_once(&qword_10008B028, sub_10000CDFC);
    v74 = sub_100010130(v73, (uint64_t)qword_10008B520);
    v75 = v182;
    v76 = v188;
    (*(void (**)(char *, uint64_t, uint64_t))(v182 + 16))(v188, v74, v73);
    v77 = v52;
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(12, -1);
      v81 = swift_slowAlloc(32, -1);
      v193 = v81;
      *(_DWORD *)v80 = 136315138;
      v82 = objc_msgSend(v77, "identifier");
      if (v82)
      {
        v83 = v82;
        v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
        v86 = v85;

      }
      else
      {
        v86 = 0xA300000000000000;
        v84 = 9732322;
      }
      v192 = sub_10002D35C(v84, v86, &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v80 + 4, v80 + 12);

      swift_bridgeObjectRelease(v86);
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Cannot create notes folder URL from intent note folder identifier — returning nil {identifier: %s}", v80, 0xCu);
      v87 = 1;
      swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v80, -1, -1);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v188, v73);
      sub_100010148((uint64_t)v184);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v73);
      sub_100010148((uint64_t)v184);
      v87 = 1;
    }
    v88 = v186;
    v68 = v187;
    goto LABEL_18;
  }
  v58 = v20;
  v59 = (void (**)(char *, uint64_t))v21;
  v60 = v181;
  (*((void (**)(char *, char *, uint64_t))v21 + 4))(v181, v19, v20);
  v61 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v62);
  v64 = v63;
  v65 = objc_msgSend(v61, "isShowFolderURL:", v63);

  if (v65)
  {
    v67 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
    v68 = v187;
    if (v67)
    {
      v69 = v67;
      v70 = objc_msgSend(v67, "managedObjectContext");
      __chkstk_darwin(v70);
      *(&v168 - 2) = (uint64_t)v60;
      *(&v168 - 1) = (uint64_t)v69;
      v71 = (uint64_t)v175;
      NSManagedObjectContext.performAndWait<A>(_:)(sub_100010260);

      v72 = v189;
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v189 + 48))(v71, 1, v68) != 1)
      {

        v98 = (uint64_t)v184;
        sub_100010148((uint64_t)v184);
        (*((void (**)(char *, uint64_t))v21 + 1))(v60, v58);
        v139 = v172;
        sub_100010184(v71, v172);
        v100 = v178;
        sub_100010184(v139, v178);
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v72 + 56))(v100, 0, 1, v68);
        v88 = v186;
        goto LABEL_36;
      }
      sub_10000CCD8(v71, &qword_10008B538);
    }
    v59 = (void (**)(char *, uint64_t))v21;
  }
  else
  {
    v68 = v187;
  }
  v90 = v183;
  URL._bridgeToObjectiveC()(v66);
  v92 = v91;
  v93 = objc_msgSend(v61, "isShowVirtualSmartFolderURL:", v91);

  if (v93)
  {
    v95 = v185;
    v96 = objc_msgSend(v185, "managedObjectContext");
    __chkstk_darwin(v96);
    *(&v168 - 2) = (uint64_t)v60;
    *(&v168 - 1) = (uint64_t)v95;
    v97 = v177;
    NSManagedObjectContext.performAndWait<A>(_:)(sub_100010248);

    v98 = (uint64_t)v184;
    sub_100010148((uint64_t)v184);
    v59[1](v60, v58);
    v99 = (uint64_t)v97;
    v100 = v178;
    sub_10000CC50(v99, v178, &qword_10008B538);
    v88 = v186;
    v72 = v189;
    goto LABEL_36;
  }
  URL._bridgeToObjectiveC()(v94);
  v102 = v101;
  v103 = objc_msgSend(v61, "isShowHTMLFolderURL:", v101);

  if (!v103)
  {
LABEL_26:
    URL._bridgeToObjectiveC()(v105);
    v113 = v112;
    v114 = objc_msgSend(v61, "isShowDefaultFolderURL:", v112);

    if (v114)
    {
      v115 = (void *)objc_opt_self(ICDefaultAccountUtilities);
      v116 = objc_msgSend(v115, "defaultFolderWithHTMLNoteContext:", v190);
      if (v116)
      {
        v117 = v116;
        v118 = objc_opt_self(ICFolder);
        v119 = swift_dynamicCastObjCClass(v117, v118);
        if (v119)
        {
          v120 = v119;
          v121 = v117;
          v188 = (char *)v59;
          v122 = v185;
          v123 = objc_msgSend(v185, "managedObjectContext");
          __chkstk_darwin(v123);
          *(&v168 - 2) = v120;
          v124 = v177;
          NSManagedObjectContext.performAndWait<A>(_:)(sub_1000101FC);

          v98 = (uint64_t)v184;
          sub_100010148((uint64_t)v184);

          (*((void (**)(char *, uint64_t))v188 + 1))(v60, v58);
          v72 = v189;
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v189 + 56))(v124, 0, 1, v68);
          v125 = (uint64_t)v124;
          v100 = v178;
          sub_10000CC50(v125, v178, &qword_10008B538);
          v88 = v186;
          goto LABEL_36;
        }
        v150 = objc_opt_self(NoteStoreObject);
        v151 = swift_dynamicCastObjCClass(v117, v150);
        if (v151)
        {
          v152 = v151;
          v188 = (char *)v59;
          v153 = v117;
          v154 = v190;
          v155 = objc_msgSend(v190, "managedObjectContext");
          if (v155)
          {
            v156 = v155;
            __chkstk_darwin(v155);
            *(&v168 - 2) = v152;
            v157 = v169;
            NSManagedObjectContext.performAndWait<A>(_:)(sub_1000101C8);

            v158 = 0;
            v88 = v186;
          }
          else
          {

            v158 = 1;
            v88 = v186;
            v157 = v169;
          }
          v98 = (uint64_t)v184;
          sub_100010148((uint64_t)v184);
          (*((void (**)(char *, uint64_t))v188 + 1))(v60, v58);
          v72 = v189;
          (*(void (**)(char *, uint64_t, uint64_t, int *))(v189 + 56))(v157, v158, 1, v68);
          v167 = (uint64_t)v157;
          v100 = v178;
          sub_10000CC50(v167, v178, &qword_10008B538);
          goto LABEL_36;
        }
        if (qword_10008B028 != -1)
          swift_once(&qword_10008B028, sub_10000CDFC);
        sub_100010130(v90, (uint64_t)qword_10008B520);
        v159 = v117;
        v160 = Logger.logObject.getter(v159);
        v161 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v160, v161))
        {
          v162 = (uint8_t *)swift_slowAlloc(12, -1);
          v163 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v162 = 138412290;
          v188 = (char *)(v162 + 4);
          v164 = v58;
          v165 = objc_msgSend(v159, "objectID");
          v193 = (uint64_t)v165;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, &v194, v188, v162 + 12);
          *v163 = v165;
          v58 = v164;
          v60 = v181;

          _os_log_impl((void *)&_mh_execute_header, v160, v161, "Unknown object type — returning nil {objectID: %@}", v162, 0xCu);
          v166 = sub_100009F30(&qword_10008B548);
          swift_arrayDestroy(v163, 1, v166);
          swift_slowDealloc(v163, -1, -1);
          swift_slowDealloc(v162, -1, -1);
        }
        else
        {

        }
        v88 = v186;

        sub_100010148((uint64_t)v184);
        v59[1](v60, v58);
        v87 = 1;
LABEL_18:
        v72 = v189;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v72 + 56))(v88, v87, 1, v68);
      }
      if (qword_10008B028 != -1)
        swift_once(&qword_10008B028, sub_10000CDFC);
      sub_100010130(v90, (uint64_t)qword_10008B520);
      v126 = v170;
      v144 = ((uint64_t (*)(char *, char *, uint64_t))v59[2])(v170, v60, v58);
      v128 = Logger.logObject.getter(v144);
      v129 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v128, v129))
      {
        v130 = (uint8_t *)swift_slowAlloc(12, -1);
        v131 = swift_slowAlloc(32, -1);
        v193 = v131;
        v188 = (char *)v59;
        *(_DWORD *)v130 = 136315138;
        v145 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
        v146 = dispatch thunk of CustomStringConvertible.description.getter(v58, v145);
        v148 = v147;
        v192 = sub_10002D35C(v146, v147, &v193);
        v60 = v181;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v130 + 4, v130 + 12);
        v149 = swift_bridgeObjectRelease(v148);
        v137 = (void (*)(char *, uint64_t))*((_QWORD *)v188 + 1);
        ((void (*)(char *, uint64_t, __n128))v137)(v126, v58, v149);
        v138 = "Cannot find object for current default notes folder URL — returning nil {notesFolderURL: %s}";
        goto LABEL_43;
      }
    }
    else
    {
      if (qword_10008B028 != -1)
        swift_once(&qword_10008B028, sub_10000CDFC);
      sub_100010130(v90, (uint64_t)qword_10008B520);
      v126 = v173;
      v127 = ((uint64_t (*)(char *, char *, uint64_t))v59[2])(v173, v60, v58);
      v128 = Logger.logObject.getter(v127);
      v129 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v128, v129))
      {
        v130 = (uint8_t *)swift_slowAlloc(12, -1);
        v131 = swift_slowAlloc(32, -1);
        v193 = v131;
        v188 = (char *)v59;
        *(_DWORD *)v130 = 136315138;
        v132 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
        v133 = dispatch thunk of CustomStringConvertible.description.getter(v58, v132);
        v135 = v134;
        v192 = sub_10002D35C(v133, v134, &v193);
        v60 = v181;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v130 + 4, v130 + 12);
        v136 = swift_bridgeObjectRelease(v135);
        v137 = (void (*)(char *, uint64_t))*((_QWORD *)v188 + 1);
        ((void (*)(char *, uint64_t, __n128))v137)(v126, v58, v136);
        v138 = "Unknown notes folder URL type — returning nil {notesFolderURL: %s}";
LABEL_43:
        _os_log_impl((void *)&_mh_execute_header, v128, v129, v138, v130, 0xCu);
        swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v131, -1, -1);
        swift_slowDealloc(v130, -1, -1);

LABEL_45:
        sub_100010148((uint64_t)v184);
        v88 = v186;
        v137(v60, v58);
        v87 = 1;
        goto LABEL_18;
      }
    }

    v137 = v59[1];
    v137(v126, v58);
    goto LABEL_45;
  }
  v106 = v59;
  __chkstk_darwin(v104);
  v107 = v190;
  *(&v168 - 2) = (uint64_t)v60;
  *(&v168 - 1) = (uint64_t)v107;
  v108 = sub_100010B28(0, &qword_10008B550, NoteContext_ptr);
  v109 = v107;
  v110 = (uint64_t)v174;
  ICLegacyContext.performAndWait<A>(_:)(sub_100010230, &v168 - 4, v108, v180);

  v111 = v189;
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v189 + 48))(v110, 1, v68) == 1)
  {
    sub_10000CCD8(v110, &qword_10008B538);
    v59 = v106;
    v90 = v183;
    goto LABEL_26;
  }

  v98 = (uint64_t)v184;
  sub_100010148((uint64_t)v184);
  v106[1](v60, v58);
  v140 = v171;
  sub_100010184(v110, v171);
  v100 = v178;
  sub_100010184(v140, v178);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v111 + 56))(v100, 0, 1, v68);
  v88 = v186;
  v72 = v111;
LABEL_36:
  v141 = v179;
  sub_10000CC50(v100, v179, &qword_10008B538);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v72 + 48))(v141, 1, v68) == 1)
  {
    sub_10000CCD8(v141, &qword_10008B538);
    v87 = 1;
  }
  else
  {
    v142 = v141;
    v143 = v176;
    sub_100010184(v142, v176);
    sub_100010184(v143, v98);
    sub_100010184(v98, v88);
    v87 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v72 + 56))(v88, v87, 1, v68);
}

uint64_t sub_10000EEFC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  NSURL *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v11);
  v13 = v12;
  v14 = objc_msgSend(a2, "managedObjectContext");
  v15 = objc_msgSend(v10, "virtualSmartFolderMentionedInURL:context:", v13, v14);

  if (v15)
  {
    sub_10000D508(v15, a3);
    v16 = type metadata accessor for NotesFolder(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 0, 1, v16);
  }
  else
  {
    v33 = a3;
    if (qword_10008B028 != -1)
      swift_once(&qword_10008B028, sub_10000CDFC);
    v18 = type metadata accessor for Logger(0);
    sub_100010130(v18, (uint64_t)qword_10008B520);
    v19 = v9;
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v36 = v24;
      *(_DWORD *)v23 = 136315138;
      v32 = v23 + 4;
      v25 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v6, v25);
      v28 = v27;
      v34 = sub_10002D35C(v26, v27, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v32, v23 + 12);
      v29 = swift_bridgeObjectRelease(v28);
      (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v19, v6, v29);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cannot find notes object for notes folder URL — returning nil {notesFolderURL: %s}", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    v30 = v33;
    v31 = type metadata accessor for NotesFolder(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  }
}

uint64_t sub_10000F1F0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  os_log_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  os_log_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;

  v76 = a3;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v73 - v10;
  v12 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  v16 = objc_msgSend(v12, "objectIDForModernFolderMentionedInURL:noteContext:", v14, a2);

  if (!v16)
    goto LABEL_9;
  v17 = objc_msgSend(a2, "managedObjectContext");
  v79 = 0;
  v18 = objc_msgSend(v17, "existingObjectWithID:error:", v16, &v79);

  v19 = v79;
  if (!v18)
  {
    v37 = v79;
    v38 = _convertNSErrorToError(_:)(v19);

    swift_willThrow(v39);
    swift_errorRelease(v38);
    v77 = 0;
LABEL_9:
    if (qword_10008B028 != -1)
      swift_once(&qword_10008B028, sub_10000CDFC);
    v40 = type metadata accessor for Logger(0);
    sub_100010130(v40, (uint64_t)qword_10008B520);
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v79 = v45;
      *(_DWORD *)v44 = 136315138;
      v75 = v6;
      v46 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v5, v46);
      v49 = v48;
      v78 = sub_10002D35C(v47, v48, (uint64_t *)&v79);
      v50 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v44 + 4, v44 + 12);
      v51 = swift_bridgeObjectRelease(v49);
      (*(void (**)(char *, uint64_t, __n128))(v75 + 8))(v9, v5, v51);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Cannot find notes object for notes folder URL — returning nil {notesFolderURL: %s}", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);

      v50 = v76;
    }
    v52 = type metadata accessor for NotesFolder(0);
    v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v54 = v50;
    return v53(v54, 1, 1, v52);
  }
  v20 = objc_opt_self(ICWidget);
  v21 = v19;
  v22 = objc_msgSend((id)v20, "sharedWidget");
  LOBYTE(v20) = objc_msgSend(v22, "hidesObject:", v18);

  if ((v20 & 1) != 0)
  {
    if (qword_10008B028 != -1)
      swift_once(&qword_10008B028, sub_10000CDFC);
    v23 = type metadata accessor for Logger(0);
    sub_100010130(v23, (uint64_t)qword_10008B520);
    v24 = v5;
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(12, -1);
      v74 = v26;
      v29 = (uint8_t *)v28;
      v30 = swift_slowAlloc(32, -1);
      v79 = v30;
      v75 = v6;
      *(_DWORD *)v29 = 136315138;
      v73 = v29 + 4;
      v31 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v24, v31);
      v34 = v33;
      v78 = sub_10002D35C(v32, v33, (uint64_t *)&v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v73, v29 + 12);
      v35 = swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t, __n128))(v75 + 8))(v11, v24, v35);
      v36 = v74;
      _os_log_impl((void *)&_mh_execute_header, v74, v27, "Widget hides object for notes folder URL — returning nil {notesFolderURL: %s}", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
    v60 = v76;
    v52 = type metadata accessor for NotesFolder(0);
    v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v54 = v60;
    return v53(v54, 1, 1, v52);
  }
  v55 = objc_opt_self(ICAccount);
  v56 = swift_dynamicCastObjCClass(v18, v55);
  if (v56)
  {
    v57 = (void *)v56;
    v58 = v18;
    v59 = v76;
    sub_10000D6E0(v57, v76);
  }
  else
  {
    v62 = objc_opt_self(ICFolder);
    v63 = swift_dynamicCastObjCClass(v18, v62);
    if (!v63)
    {
      if (qword_10008B028 != -1)
        swift_once(&qword_10008B028, sub_10000CDFC);
      v66 = type metadata accessor for Logger(0);
      sub_100010130(v66, (uint64_t)qword_10008B520);
      v67 = v16;
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(8, -1);
        *(_DWORD *)v70 = 138412290;
        v79 = v67;
        v67 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v70 + 4, v70 + 12);
        v71 = v75;
        *(_QWORD *)v75 = v16;

        _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unknown object type — returning nil {objectID: %@}", v70, 0xCu);
        v72 = sub_100009F30(&qword_10008B548);
        swift_arrayDestroy(v71, 1, v72);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);
      }
      else
      {

        v18 = v67;
        v68 = v67;
      }

      v52 = type metadata accessor for NotesFolder(0);
      v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
      v54 = v76;
      return v53(v54, 1, 1, v52);
    }
    v64 = (void *)v63;
    v58 = v18;
    v59 = v76;
    sub_10000D2C0(v64, v76);
  }

  v65 = type metadata accessor for NotesFolder(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v59, 0, 1, v65);
}

uint64_t sub_10000F980@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  os_log_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  os_log_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;

  v76 = a3;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v73 - v10;
  v12 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  v16 = objc_msgSend(v12, "objectIDForHTMLFolderMentionedInURL:context:", v14, a2);

  if (!v16)
    goto LABEL_9;
  v79 = 0;
  v17 = objc_msgSend(a2, "existingObjectWithID:error:", v16, &v79);
  v18 = v79;
  if (!v17)
  {
    v37 = v79;
    v38 = _convertNSErrorToError(_:)(v18);

    swift_willThrow(v39);
    swift_errorRelease(v38);
    v77 = 0;
LABEL_9:
    if (qword_10008B028 != -1)
      swift_once(&qword_10008B028, sub_10000CDFC);
    v40 = type metadata accessor for Logger(0);
    sub_100010130(v40, (uint64_t)qword_10008B520);
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v79 = v45;
      *(_DWORD *)v44 = 136315138;
      v75 = v6;
      v46 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v5, v46);
      v49 = v48;
      v78 = sub_10002D35C(v47, v48, (uint64_t *)&v79);
      v50 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v44 + 4, v44 + 12);
      v51 = swift_bridgeObjectRelease(v49);
      (*(void (**)(char *, uint64_t, __n128))(v75 + 8))(v9, v5, v51);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Cannot find HTML object for notes folder URL — returning nil {notesFolderURL: %s}", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);

      v50 = v76;
    }
    v52 = type metadata accessor for NotesFolder(0);
    v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v54 = v50;
    return v53(v54, 1, 1, v52);
  }
  v19 = v17;
  v20 = objc_opt_self(ICWidget);
  v21 = v18;
  v22 = objc_msgSend((id)v20, "sharedWidget");
  LOBYTE(v20) = objc_msgSend(v22, "hidesObject:", v19);

  if ((v20 & 1) != 0)
  {
    if (qword_10008B028 != -1)
      swift_once(&qword_10008B028, sub_10000CDFC);
    v23 = type metadata accessor for Logger(0);
    sub_100010130(v23, (uint64_t)qword_10008B520);
    v24 = v5;
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(12, -1);
      v74 = v26;
      v29 = (uint8_t *)v28;
      v30 = swift_slowAlloc(32, -1);
      v79 = v30;
      v75 = v6;
      *(_DWORD *)v29 = 136315138;
      v73 = v29 + 4;
      v31 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v24, v31);
      v34 = v33;
      v78 = sub_10002D35C(v32, v33, (uint64_t *)&v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v73, v29 + 12);
      v35 = swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t, __n128))(v75 + 8))(v11, v24, v35);
      v36 = v74;
      _os_log_impl((void *)&_mh_execute_header, v74, v27, "Widget hides object for notes folder URL — returning nil {notesFolderURL: %s}", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
    v60 = v76;
    v52 = type metadata accessor for NotesFolder(0);
    v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v54 = v60;
    return v53(v54, 1, 1, v52);
  }
  v55 = objc_opt_self(NoteAccountObject);
  v56 = swift_dynamicCastObjCClass(v19, v55);
  if (v56)
  {
    v57 = (void *)v56;
    v58 = v19;
    v59 = v76;
    sub_10000DAB8(v57, v76);
  }
  else
  {
    v62 = objc_opt_self(NoteStoreObject);
    v63 = swift_dynamicCastObjCClass(v19, v62);
    if (!v63)
    {
      if (qword_10008B028 != -1)
        swift_once(&qword_10008B028, sub_10000CDFC);
      v66 = type metadata accessor for Logger(0);
      sub_100010130(v66, (uint64_t)qword_10008B520);
      v67 = v16;
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(8, -1);
        *(_DWORD *)v70 = 138412290;
        v79 = v67;
        v67 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v70 + 4, v70 + 12);
        v71 = v75;
        *(_QWORD *)v75 = v16;

        _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unknown object type — returning nil {objectID: %@}", v70, 0xCu);
        v72 = sub_100009F30(&qword_10008B548);
        swift_arrayDestroy(v71, 1, v72);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);
      }
      else
      {

        v19 = v67;
        v68 = v67;
      }

      v52 = type metadata accessor for NotesFolder(0);
      v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
      v54 = v76;
      return v53(v54, 1, 1, v52);
    }
    v64 = (void *)v63;
    v58 = v19;
    v59 = v76;
    sub_10000D8D0(v64, v76);
  }

  v65 = type metadata accessor for NotesFolder(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v59, 0, 1, v65);
}

uint64_t type metadata accessor for NotesFolder(uint64_t a1)
{
  uint64_t result;

  result = qword_10008B5C0;
  if (!qword_10008B5C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotesFolder);
  return result;
}

uint64_t sub_100010130(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100010148(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NotesFolder(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100010184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NotesFolder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1000101C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000D8D0(*(id *)(v1 + 16), a1);
}

uint64_t sub_1000101FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000D2C0(*(id *)(v1 + 16), a1);
}

uint64_t sub_100010230@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000F980(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_100010248@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000EEFC(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_100010260@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000F1F0(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_100010278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008B618);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100009F30(&qword_10008B170);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v37 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v37 - v18;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), v21 = 0, (v20 & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(), v21 = 0, (v22 & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
      {
LABEL_8:
        v21 = 0;
        return v21 & 1;
      }
      v24 = *(_QWORD *)(a1 + 48);
      v25 = *(_QWORD *)(a2 + 48);
      if (!v24)
      {
        if (v25)
          goto LABEL_8;
        goto LABEL_17;
      }
      if (!v25)
        goto LABEL_8;
      if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && v24 == v25
        || (v26 = _stringCompareWithSmolCheck(_:_:expecting:)(), v21 = 0, (v26 & 1) != 0))
      {
LABEL_17:
        v27 = type metadata accessor for NotesFolder(0);
        v39 = v4;
        v28 = v27;
        sub_1000114F4(a1 + *(int *)(v27 + 32), (uint64_t)v19);
        v38 = v28;
        v29 = *(int *)(v28 + 32);
        v30 = v39;
        sub_1000114F4(a2 + v29, (uint64_t)v17);
        v31 = (uint64_t)&v10[*(int *)(v8 + 48)];
        sub_1000114F4((uint64_t)v19, (uint64_t)v10);
        v40 = v31;
        sub_1000114F4((uint64_t)v17, v31);
        v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v32((uint64_t)v10, 1, v30) == 1)
        {
          sub_10000CCD8((uint64_t)v17, &qword_10008B170);
          sub_10000CCD8((uint64_t)v19, &qword_10008B170);
          if (v32(v40, 1, v30) == 1)
          {
            sub_10000CCD8((uint64_t)v10, &qword_10008B170);
            goto LABEL_24;
          }
        }
        else
        {
          sub_1000114F4((uint64_t)v10, (uint64_t)v14);
          if (v32(v40, 1, v30) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v40, v30);
            v33 = sub_10001153C(&qword_10008B620, (uint64_t)&protocol conformance descriptor for URL);
            v34 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v30, v33);
            v35 = *(void (**)(char *, uint64_t))(v5 + 8);
            v35(v7, v30);
            sub_10000CCD8((uint64_t)v17, &qword_10008B170);
            sub_10000CCD8((uint64_t)v19, &qword_10008B170);
            v35(v14, v30);
            sub_10000CCD8((uint64_t)v10, &qword_10008B170);
            if ((v34 & 1) == 0)
              goto LABEL_8;
LABEL_24:
            v36 = v38;
            if ((static Image.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v38 + 36)), *(_QWORD *)(a2 + *(int *)(v38 + 36))) & 1) != 0)
            {
              v21 = sub_10005E5F8(*(_QWORD **)(a1 + *(int *)(v36 + 40)), *(_QWORD **)(a2 + *(int *)(v36 + 40)));
              return v21 & 1;
            }
            goto LABEL_8;
          }
          sub_10000CCD8((uint64_t)v17, &qword_10008B170);
          sub_10000CCD8((uint64_t)v19, &qword_10008B170);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v30);
        }
        sub_10000CCD8((uint64_t)v10, &qword_10008B618);
        goto LABEL_8;
      }
    }
  }
  return v21 & 1;
}

void *sub_10001063C(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  id v29;
  Class isa;
  id v31;
  id v32;
  id v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = objc_msgSend(a1, "serverShareCheckingParent");
  v2 = &_swiftEmptyArrayStorage;
  if (!v1)
    return v2;
  v3 = v1;
  v4 = (char *)objc_msgSend(v1, "ic_nonCurrentUserParticipants");

  v5 = sub_100010B28(0, &qword_10008B558, CKShareParticipant_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v7 = (unint64_t)v6 >> 62;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v4 = (char *)v6;
    else
      v4 = (char *)(v6 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v6);
    v17 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRetain(v6);
    v44 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(v6);
    if ((v44 & 0x8000000000000000) == 0)
      goto LABEL_53;
    __break(1u);
    goto LABEL_45;
  }
  if (*(uint64_t *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3)
    v8 = 3;
  else
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if ((v6 & 0xC000000000000001) != 0 && v8 != 0)
    {
      v10 = 0;
      do
      {
        v4 = (char *)(v10 + 1);
        _ArrayBuffer._typeCheckSlowPath(_:)(v10);
        v10 = (Swift::Int)v4;
      }
      while ((char *)v8 != v4);
    }
    if (v7)
    {
      v4 = (char *)(v6 < 0 ? v6 : v6 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.subscript.getter(0, v8, v4);
      v12 = v13;
      v11 = v14;
      v16 = v15;
      swift_bridgeObjectRelease_n(v6, 2);
      v8 = v16 >> 1;
    }
    else
    {
      v11 = 0;
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
      v12 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    v49 = (uint64_t)&_swiftEmptyArrayStorage;
    v17 = (uint64_t)&_swiftEmptyArrayStorage;
    if (v8 == v11)
      break;
    v18 = objc_opt_self(ICThumbnailService);
    v4 = (char *)(v8 - v11);
    if (v8 > v11)
    {
      v20 = (void *)v18;
      swift_unknownObjectRetain(v7, v19);
      v21 = (void **)(v12 + 8 * v11);
      do
      {
        v22 = *v21;
        v23 = sub_100009F30(&qword_10008B560);
        v24 = swift_allocObject(v23, 40, 7);
        *(_OWORD *)(v24 + 16) = xmmword_100065910;
        *(_QWORD *)(v24 + 32) = v22;
        v48 = v24;
        v25 = v22;
        ((void (*)(void))specialized Array._endMutation())();
        v26 = qword_10008B0F0;
        v27 = v25;
        if (v26 != -1)
          swift_once(&qword_10008B0F0, sub_100027BD8);
        v28 = xmmword_1000994F0;
        v29 = objc_allocWithZone((Class)ICThumbnailConfiguration);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v48);
        v31 = objc_msgSend(v29, "initForAvatarWithParticipants:preferredSize:hasBorder:", isa, 0, v28);

        v32 = objc_msgSend(v20, "sharedThumbnailService");
        v33 = objc_msgSend(v32, "thumbnailWithConfiguration:", v31);

        if (v33)
        {
          v34 = objc_msgSend(v33, "image");

          if (v34)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v36 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v35 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v36 >= v35 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
            specialized Array._endMutation()(v37);
          }
        }
        else
        {

        }
        ++v21;
        --v4;
      }
      while (v4);
      swift_unknownObjectRelease(v7);
      v17 = v49;
      break;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    if (v17 >= 3)
      v47 = 3;
    else
      v47 = v17;
    if (v17 >= 0)
      v8 = v47;
    else
      v8 = 3;
    swift_bridgeObjectRetain(v6);
    v4 = (char *)_CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(v6);
    if ((uint64_t)v4 < v8)
      __break(1u);
  }
  swift_unknownObjectRelease(v7);
  if ((unint64_t)v17 >> 62)
  {
LABEL_45:
    if (v17 < 0)
      v45 = v17;
    else
      v45 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v38 = _CocoaArrayWrapper.endIndex.getter(v45);
    swift_bridgeObjectRelease(v17);
    if (!v38)
    {
LABEL_49:
      swift_bridgeObjectRelease(v17);
      return &_swiftEmptyArrayStorage;
    }
  }
  else
  {
    v38 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v38)
      goto LABEL_49;
  }
  v49 = (uint64_t)&_swiftEmptyArrayStorage;
  v6 = (uint64_t)&v49;
  specialized ContiguousArray.reserveCapacity(_:)(v38);
  if (v38 < 0)
  {
    __break(1u);
    goto LABEL_52;
  }
  v39 = 0;
  do
  {
    if ((v17 & 0xC000000000000001) != 0)
      v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v17);
    else
      v40 = *(id *)(v17 + 8 * v39 + 32);
    ++v39;
    v41 = Image.init(uiImage:)(v40);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v42 = *(_QWORD *)(v49 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v42);
    v43 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v41);
    specialized ContiguousArray._endMutation()(v43);
  }
  while (v38 != v39);
  v2 = (void *)v49;
  swift_bridgeObjectRelease(v17);
  return v2;
}

uint64_t sub_100010B28(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t *sub_100010B60(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

_QWORD *sub_100010BA0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    v10 = a3[8];
    __dst = (void *)(a1 + v10);
    v11 = (char *)a2 + v10;
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = a3[9];
    v18 = a3[10];
    v19 = *(uint64_t *)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v19;
    v20 = *(uint64_t *)((char *)a2 + v18);
    *(_QWORD *)((char *)v4 + v18) = v20;
    swift_retain(v19);
    swift_bridgeObjectRetain(v20);
  }
  return v4;
}

uint64_t sub_100010D00(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  v4 = (char *)a1 + a2[8];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_release(*(_QWORD *)((char *)a1 + a2[9]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10]));
}

uint64_t sub_100010D9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = a3[8];
  __dst = (void *)(a1 + v9);
  v10 = (const void *)(a2 + v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = a3[9];
  v16 = a3[10];
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  swift_retain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_100010ED0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100009F30(&qword_10008B170);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = a3[9];
  v22 = *(_QWORD *)(a2 + v21);
  v23 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_retain(v22);
  swift_release(v23);
  v24 = a3[10];
  v25 = *(_QWORD *)(a2 + v24);
  v26 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_100011080(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100009F30(&qword_10008B170);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_100011170(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100009F30(&qword_10008B170);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = a3[9];
  v22 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_release(v22);
  v23 = a3[10];
  v24 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_1000112E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000112EC);
}

uint64_t sub_1000112EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100009F30(&qword_10008B170);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_10001136C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100011378);
}

uint64_t sub_100011378(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100009F30(&qword_10008B170);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_1000113F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100065948;
  v4[1] = &unk_100065948;
  v4[2] = &unk_100065960;
  v4[3] = &unk_100065978;
  sub_100011494(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_100011494(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10008B5D0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10008B5D0);
  }
}

void *sub_1000114E8()
{
  return &protocol witness table for String;
}

uint64_t sub_1000114F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008B170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001153C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001157C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B630;
  if (!qword_10008B630)
  {
    v1 = sub_10000AE50(&qword_10008B628);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008B630);
  }
  return result;
}

uint64_t sub_1000115C8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, qword_1000992D8);
  sub_100010130(v16, (uint64_t)qword_1000992D8);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x20262073656E694CLL, 0xED00007364697247);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Device Expert Type Display Representation", 41, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_1000117E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v42 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v40 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v41 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v39 = (char *)&v39 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0x20262073656E694CLL, 0xED00007364697247);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  v26 = (id)ICNotesAppBundleIdentifier(v25);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = v40;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v27, v29);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v32 = v30;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  v33 = sub_100009F30(&qword_10008B878);
  v34 = swift_allocObject(v33, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000659F0;
  v35 = String.LocalizationValue.init(stringLiteral:)(0x7473207265706170, 0xEB00000000656C79);
  static Locale.current.getter(v35);
  v22(v8, v21, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000030, 0x800000010006BE50);
  static Locale.current.getter(v36);
  v22(v8, v21, v5);
  v37 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v39, v43, v32, v34, v37);
}

uint64_t sub_100011C20()
{
  return _UpdatableEntityProperty.projectedValue.getter();
}

uint64_t sub_100011C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008B888);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100011CC4, 0, 0);
}

uint64_t sub_100011CC4()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000663F8);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008B890);
  v4 = sub_10000CC08(&qword_10008B850, &qword_10008B858, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_100011D70;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_100011D70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_100011DCC, 0, 0);
}

uint64_t sub_100011DCC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008B838);
    LocalizedStringResource.init(stringLiteral:)(0x20262073656E694CLL, 0xED00007364697247);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008B840, 0, &unk_10008B848, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_1000663F8);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_100011F6C;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100011F6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_100011FF8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100011FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_100013B84();
  static _AppEntityUpdateResult.success.getter(&type metadata for LinesAndGridsEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100012060()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000120A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008B884);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_100011C40(a1, v7, a3);
}

uint64_t sub_1000120F8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100012144()
{
  uint64_t v0;

  v0 = qword_10008B640;
  swift_bridgeObjectRetain(off_10008B648);
  return v0;
}

uint64_t sub_100012178(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100013BCC();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD00000000000004FLL, 0x800000010006BF00, a1, v2);
}

uint64_t sub_1000121C0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100014C34();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_100012208@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_10001439C();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100012248@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B030, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000992D8, (uint64_t)sub_1000115C8, a1);
}

uint64_t sub_10001226C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100013BCC();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1000122A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100013EF0();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000122E0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, static LinesAndGridsOption.typeDisplayRepresentation);
  sub_100010130(v16, (uint64_t)static LinesAndGridsOption.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x7453207265706150, 0xEB00000000656C79);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Title for entity representing Notes paper style", 47, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t LinesAndGridsOption.typeDisplayRepresentation.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10008B038 != -1)
    swift_once(&qword_10008B038, sub_1000122E0);
  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  return sub_100010130(v0, (uint64_t)static LinesAndGridsOption.typeDisplayRepresentation);
}

uint64_t static LinesAndGridsOption.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10008B038 != -1)
    swift_once(&qword_10008B038, sub_1000122E0);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_100010130(v2, (uint64_t)static LinesAndGridsOption.typeDisplayRepresentation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_1000125B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD, uint64_t);
  char *v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t, uint64_t);
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t result;
  uint64_t v96;
  char *v97;
  _BYTE *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unsigned int v114;
  void (*v115)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v0 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v0);
  v111 = (char *)&v96 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v2);
  v106 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v116 = *(_QWORD *)(v4 - 8);
  v118 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v119 - 8);
  v14 = __chkstk_darwin(v119);
  v105 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v103 = (char *)&v96 - v17;
  v18 = __chkstk_darwin(v16);
  v102 = (char *)&v96 - v19;
  v20 = __chkstk_darwin(v18);
  v101 = (char *)&v96 - v21;
  v22 = __chkstk_darwin(v20);
  v100 = (char *)&v96 - v23;
  v24 = __chkstk_darwin(v22);
  v99 = (char *)&v96 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v96 - v26;
  v28 = sub_100009F30(&qword_10008B8A0);
  v29 = sub_100009F30(&qword_10008B8A8);
  v30 = *(_QWORD *)(v29 - 8);
  v117 = *(_QWORD *)(v30 + 72);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = (v31 + 32) & ~v31;
  v33 = swift_allocObject(v28, v32 - v117 + 8 * v117, v31 | 7);
  v104 = v33;
  *(_OWORD *)(v33 + 16) = xmmword_100065A00;
  *(_BYTE *)(v33 + v32) = 0;
  v108 = v29;
  v34 = v33 + v32;
  v35 = String.LocalizationValue.init(stringLiteral:)(1701736270, 0xE400000000000000);
  v107 = v9;
  static Locale.current.getter(v35);
  v114 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v116 = *(_QWORD *)(v116 + 104);
  ((void (*)(char *))v116)(v6);
  v36 = v9;
  v37 = v6;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v36, v6, "Link enum value", 15, 2);
  v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v38 = v106;
  v39 = v119;
  v115(v106, 1, 1, v119);
  v113 = type metadata accessor for DisplayRepresentation.Image(0);
  v109 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56);
  v40 = v111;
  v109(v111, 1, 1, v113);
  DisplayRepresentation.init(title:subtitle:image:)(v27, v38, v40);
  v41 = v117;
  v110 = v34;
  *(_BYTE *)(v34 + v117) = 1;
  v98 = (_BYTE *)(v34 + v41 + *(int *)(v29 + 48));
  v42 = String.LocalizationValue.init(stringLiteral:)(0x616D532064697247, 0xEA00000000006C6CLL);
  v43 = v107;
  static Locale.current.getter(v42);
  v44 = v37;
  v112 = v37;
  v45 = v114;
  ((void (*)(char *, _QWORD, uint64_t))v116)(v37, v114, v118);
  v46 = v99;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v43, v44, "Link enum value", 15, 2);
  v115(v38, 1, 1, v39);
  v109(v40, 1, 1, v113);
  v47 = v38;
  v48 = v38;
  v49 = v40;
  DisplayRepresentation.init(title:subtitle:image:)(v46, v47, v40);
  v99 = (char *)(2 * v41);
  v50 = (_BYTE *)(v34 + 2 * v41);
  *v50 = 2;
  v51 = v108;
  v98 = &v50[*(int *)(v108 + 48)];
  v97 = v12;
  v52 = String.LocalizationValue.init(stringLiteral:)(0x64654D2064697247, 0xEB000000006D7569);
  v53 = v43;
  static Locale.current.getter(v52);
  v54 = v112;
  v55 = v118;
  v56 = (void (*)(char *, _QWORD, uint64_t))v116;
  ((void (*)(char *, uint64_t, uint64_t))v116)(v112, v45, v118);
  v57 = v100;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v53, v54, "Link enum value", 15, 2);
  v58 = v115;
  v115(v48, 1, 1, v119);
  v59 = v49;
  v60 = v49;
  v61 = v109;
  v109(v60, 1, 1, v113);
  DisplayRepresentation.init(title:subtitle:image:)(v57, v48, v59);
  v62 = v110;
  v63 = &v99[v117 + v110];
  *v63 = 3;
  v100 = &v63[*(int *)(v51 + 48)];
  v64 = v97;
  v65 = String.LocalizationValue.init(stringLiteral:)(0x72614C2064697247, 0xEA00000000006567);
  v66 = v107;
  static Locale.current.getter(v65);
  v67 = v112;
  v56(v112, v114, v55);
  v68 = v101;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v64, 0, 0, v66, v67, "Link enum value", 15, 2);
  v58(v48, 1, 1, v119);
  v69 = v113;
  v61(v59, 1, 1, v113);
  DisplayRepresentation.init(title:subtitle:image:)(v68, v48, v59);
  v101 = (char *)(4 * v117);
  v70 = (_BYTE *)(v62 + 4 * v117);
  *v70 = 4;
  v71 = v108;
  v100 = &v70[*(int *)(v108 + 48)];
  v72 = v64;
  v73 = String.LocalizationValue.init(stringLiteral:)(0x6D532073656E694CLL, 0xEB000000006C6C61);
  static Locale.current.getter(v73);
  v74 = v112;
  v75 = v114;
  v76 = (void (*)(char *, uint64_t, uint64_t))v116;
  ((void (*)(char *, _QWORD, uint64_t))v116)(v112, v114, v118);
  v77 = v102;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v72, 0, 0, v66, v74, "Link enum value", 15, 2);
  v78 = v48;
  v79 = v48;
  v80 = v119;
  v81 = v115;
  v115(v79, 1, 1, v119);
  v82 = v111;
  v83 = v69;
  v84 = v109;
  v109(v111, 1, 1, v83);
  DisplayRepresentation.init(title:subtitle:image:)(v77, v78, v82);
  v85 = &v101[v117 + v110];
  *v85 = 5;
  v102 = &v85[*(int *)(v71 + 48)];
  v86 = String.LocalizationValue.init(stringLiteral:)(0x654D2073656E694CLL, 0xEC0000006D756964);
  v87 = v107;
  static Locale.current.getter(v86);
  v88 = v112;
  v76(v112, v75, v118);
  v89 = v103;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v72, 0, 0, v87, v88, "Link enum value", 15, 2);
  v90 = v106;
  v81(v106, 1, 1, v80);
  v91 = v111;
  v92 = v113;
  v84(v111, 1, 1, v113);
  DisplayRepresentation.init(title:subtitle:image:)(v89, v90, v91);
  *(_BYTE *)(v110 + 6 * v117) = 6;
  v93 = String.LocalizationValue.init(stringLiteral:)(0x614C2073656E694CLL, 0xEB00000000656772);
  static Locale.current.getter(v93);
  ((void (*)(char *, _QWORD, uint64_t))v116)(v88, v114, v118);
  v94 = v105;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v72, 0, 0, v87, v88, "Link enum value", 15, 2);
  v115(v90, 1, 1, v119);
  v84(v91, 1, 1, v92);
  DisplayRepresentation.init(title:subtitle:image:)(v94, v90, v91);
  result = sub_10001F9D4(v104);
  static LinesAndGridsOption.caseDisplayRepresentations = result;
  return result;
}

uint64_t *LinesAndGridsOption.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_10008B040 != -1)
    swift_once(&qword_10008B040, sub_1000125B0);
  return &static LinesAndGridsOption.caseDisplayRepresentations;
}

uint64_t static LinesAndGridsOption.caseDisplayRepresentations.getter()
{
  _BYTE v1[24];

  if (qword_10008B040 != -1)
    swift_once(&qword_10008B040, sub_1000125B0);
  swift_beginAccess(&static LinesAndGridsOption.caseDisplayRepresentations, v1, 0, 0);
  return swift_bridgeObjectRetain(static LinesAndGridsOption.caseDisplayRepresentations);
}

uint64_t static LinesAndGridsOption.caseDisplayRepresentations.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  if (qword_10008B040 != -1)
    swift_once(&qword_10008B040, sub_1000125B0);
  swift_beginAccess(&static LinesAndGridsOption.caseDisplayRepresentations, v4, 1, 0);
  v2 = static LinesAndGridsOption.caseDisplayRepresentations;
  static LinesAndGridsOption.caseDisplayRepresentations = a1;
  return swift_bridgeObjectRelease(v2);
}

void *static LinesAndGridsOption.caseDisplayRepresentations.modify(uint64_t a1)
{
  if (qword_10008B040 != -1)
    swift_once(&qword_10008B040, sub_1000125B0);
  swift_beginAccess(&static LinesAndGridsOption.caseDisplayRepresentations, a1, 33, 0);
  return &j__swift_endAccess;
}

_UNKNOWN **static LinesAndGridsOption.allCases.getter()
{
  return &off_100081B50;
}

uint64_t LinesAndGridsOption.rawValue.getter(char a1)
{
  return *(_QWORD *)&aNone_1[8 * a1];
}

uint64_t sub_1000130B4(char *a1, char *a2)
{
  return sub_10001FBA4(*a1, *a2);
}

unint64_t sub_1000130C0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s37com_apple_mobilenotes_WidgetExtension19LinesAndGridsOptionO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000130EC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = LinesAndGridsOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_100013114()
{
  char *v0;

  return sub_10001FDF8(0, *v0);
}

uint64_t sub_100013120(uint64_t a1)
{
  char *v1;

  return sub_10001FD14(a1, *v1);
}

Swift::Int sub_100013128(uint64_t a1)
{
  char *v1;

  return sub_10001FDF8(a1, *v1);
}

uint64_t sub_100013130@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B038, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static LinesAndGridsOption.typeDisplayRepresentation, (uint64_t)sub_1000122E0, a1);
}

uint64_t sub_100013154(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100014208();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10001318C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000141B0();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_1000131C4(_QWORD *a1@<X8>)
{
  *a1 = &off_100081B50;
}

uint64_t sub_1000131D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_10008B830 + dword_10008B830);
  v2 = (_QWORD *)swift_task_alloc(unk_10008B834);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100014DC4;
  return v4();
}

uint64_t sub_100013230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100013C5C();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_100013298(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000132F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100013C5C();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100013364(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000133B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100013C5C();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

uint64_t sub_100013420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100013DC4();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_10001348C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000120F8;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

uint64_t sub_1000134FC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_100099310);
  sub_100010130(v0, (uint64_t)qword_100099310);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ALL, 0x800000010006BDB0);
}

_QWORD *sub_10001355C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_100013594(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *a1;
  v3 = v1;
  swift_retain(v1);
  IntentParameter.wrappedValue.setter(&v3);
  return swift_release(v1);
}

void (*sub_1000135D8(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100013620;
}

void sub_100013620(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_100013650(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100014BAC();
  v5 = sub_100014C34();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_1000136A8()
{
  uint64_t v0;

  v0 = qword_10008B650;
  swift_bridgeObjectRetain(off_10008B658);
  return v0;
}

uint64_t sub_1000136E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B048, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100099310, (uint64_t)sub_1000134FC, a1);
}

uint64_t sub_100013704@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_100010130(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_100013774()
{
  return 0;
}

uint64_t sub_100013780()
{
  return 1;
}

uint64_t sub_100013790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100014BAC();
  v7 = sub_100014BF0();
  v8 = sub_100014C34();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10001381C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_100013878@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000149A4();
  *a1 = result;
  return result;
}

uint64_t sub_10001389C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001456C();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_1000138C4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = a1;
  return swift_task_switch(sub_1000138DC, 0, 0);
}

uint64_t sub_1000138DC()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  id *v4;
  unint64_t v5;
  id v6;
  id v7;
  unint64_t v8;

  v1 = (void *)objc_opt_self(ICSettingsUtilities);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v3);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  sub_100014C78(v0 + 48, v0 + 16);
  if (!*(_QWORD *)(v0 + 40))
  {
    sub_100014CC0(v0 + 16);
    goto LABEL_9;
  }
  v4 = (id *)(v0 + 80);
  v5 = sub_100014D00();
  if ((swift_dynamicCast(v0 + 80, v0 + 16, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
  {
LABEL_9:
    LOBYTE(v8) = 0;
    goto LABEL_10;
  }
  v6 = *v4;
  v7 = objc_msgSend(*v4, "unsignedIntegerValue");

  v8 = 0x605040302010000uLL >> (8 * v7);
  if ((unint64_t)v7 >= 8)
    LOBYTE(v8) = 0;
LABEL_10:
  **(_BYTE **)(v0 + 88) = v8;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013A24(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 24) = *a2;
  return swift_task_switch(sub_100013A40, 0, 0);
}

uint64_t sub_100013A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  NSString v4;

  *(_QWORD *)(v0 + 16) = *(unsigned __int8 *)(v0 + 24) + 1;
  type metadata accessor for ICPaperStyleType();
  v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v0 + 16, v1);
  v3 = (void *)objc_opt_self(ICSettingsUtilities);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setObject:forKey:", v2, v4);

  swift_unknownObjectRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t _s37com_apple_mobilenotes_WidgetExtension19LinesAndGridsOptionO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100081A88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t sub_100013B3C()
{
  unint64_t result;

  result = qword_10008B660;
  if (!qword_10008B660)
  {
    result = swift_getWitnessTable(&unk_100065A5C, &type metadata for LinesAndGridsEntity.ChangeLinesAndGridsEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008B660);
  }
  return result;
}

unint64_t sub_100013B84()
{
  unint64_t result;

  result = qword_10008B668;
  if (!qword_10008B668)
  {
    result = swift_getWitnessTable(&unk_100065A78, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B668);
  }
  return result;
}

unint64_t sub_100013BCC()
{
  unint64_t result;

  result = qword_10008B678;
  if (!qword_10008B678)
  {
    result = swift_getWitnessTable(&unk_100065B50, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B678);
  }
  return result;
}

unint64_t sub_100013C14()
{
  unint64_t result;

  result = qword_10008B680;
  if (!qword_10008B680)
  {
    result = swift_getWitnessTable(&unk_100065A1C, &type metadata for LinesAndGridsEntity.ChangeLinesAndGridsEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008B680);
  }
  return result;
}

unint64_t sub_100013C5C()
{
  unint64_t result;

  result = qword_10008B688;
  if (!qword_10008B688)
  {
    result = swift_getWitnessTable(&unk_100066000, &type metadata for LinesAndGridsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B688);
  }
  return result;
}

unint64_t sub_100013CA4()
{
  unint64_t result;

  result = qword_10008B690;
  if (!qword_10008B690)
  {
    result = swift_getWitnessTable(&unk_100065BA8, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B690);
  }
  return result;
}

unint64_t sub_100013CEC()
{
  unint64_t result;

  result = qword_10008B698;
  if (!qword_10008B698)
  {
    result = swift_getWitnessTable(&unk_100065BD0, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B698);
  }
  return result;
}

unint64_t sub_100013D34()
{
  unint64_t result;

  result = qword_10008B6A0;
  if (!qword_10008B6A0)
  {
    result = swift_getWitnessTable(&unk_100065C08, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B6A0);
  }
  return result;
}

unint64_t sub_100013D7C()
{
  unint64_t result;

  result = qword_10008B6A8;
  if (!qword_10008B6A8)
  {
    result = swift_getWitnessTable(&unk_100065C38, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B6A8);
  }
  return result;
}

unint64_t sub_100013DC4()
{
  unint64_t result;

  result = qword_10008B6B0;
  if (!qword_10008B6B0)
  {
    result = swift_getWitnessTable(&unk_100066078, &type metadata for LinesAndGridsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B6B0);
  }
  return result;
}

void *sub_100013E08()
{
  return &protocol witness table for String;
}

unint64_t sub_100013E18()
{
  unint64_t result;

  result = qword_10008B6C0;
  if (!qword_10008B6C0)
  {
    result = swift_getWitnessTable(&unk_100065C70, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B6C0);
  }
  return result;
}

unint64_t sub_100013E60()
{
  unint64_t result;

  result = qword_10008B6C8;
  if (!qword_10008B6C8)
  {
    result = swift_getWitnessTable(&unk_100065C98, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B6C8);
  }
  return result;
}

unint64_t sub_100013EA8()
{
  unint64_t result;

  result = qword_10008B6D0;
  if (!qword_10008B6D0)
  {
    result = swift_getWitnessTable(&unk_100065CC0, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B6D0);
  }
  return result;
}

unint64_t sub_100013EF0()
{
  unint64_t result;

  result = qword_10008B6D8;
  if (!qword_10008B6D8)
  {
    result = swift_getWitnessTable(&unk_100065D18, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B6D8);
  }
  return result;
}

uint64_t sub_100013F34()
{
  return sub_10000CC08(&qword_10008B6E0, &qword_10008B6E8, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_100013F64()
{
  unint64_t result;

  result = qword_10008B6F0;
  if (!qword_10008B6F0)
  {
    result = swift_getWitnessTable(&unk_100065D48, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B6F0);
  }
  return result;
}

unint64_t sub_100013FAC()
{
  unint64_t result;

  result = qword_10008B6F8;
  if (!qword_10008B6F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B6F8);
  }
  return result;
}

unint64_t sub_100013FF4()
{
  unint64_t result;

  result = qword_10008B700;
  if (!qword_10008B700)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B700);
  }
  return result;
}

unint64_t sub_10001403C()
{
  unint64_t result;

  result = qword_10008B708;
  if (!qword_10008B708)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B708);
  }
  return result;
}

unint64_t sub_100014084()
{
  unint64_t result;

  result = qword_10008B710;
  if (!qword_10008B710)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B710);
  }
  return result;
}

void *sub_1000140C8()
{
  return &protocol witness table for String;
}

unint64_t sub_1000140D8()
{
  unint64_t result;

  result = qword_10008B718;
  if (!qword_10008B718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B718);
  }
  return result;
}

unint64_t sub_100014120()
{
  unint64_t result;

  result = qword_10008B720;
  if (!qword_10008B720)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B720);
  }
  return result;
}

unint64_t sub_100014168()
{
  unint64_t result;

  result = qword_10008B728;
  if (!qword_10008B728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B728);
  }
  return result;
}

unint64_t sub_1000141B0()
{
  unint64_t result;

  result = qword_10008B730;
  if (!qword_10008B730)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B730);
  }
  return result;
}

uint64_t sub_1000141F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001469C(a1, a2, a3, (uint64_t (*)(void))sub_100014208, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

unint64_t sub_100014208()
{
  unint64_t result;

  result = qword_10008B738;
  if (!qword_10008B738)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B738);
  }
  return result;
}

unint64_t sub_100014250()
{
  unint64_t result;

  result = qword_10008B740;
  if (!qword_10008B740)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B740);
  }
  return result;
}

unint64_t sub_100014298()
{
  unint64_t result;

  result = qword_10008B748;
  if (!qword_10008B748)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B748);
  }
  return result;
}

unint64_t sub_1000142E0()
{
  unint64_t result;

  result = qword_10008B750;
  if (!qword_10008B750)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinesAndGridsOption, &type metadata for LinesAndGridsOption);
    atomic_store(result, (unint64_t *)&qword_10008B750);
  }
  return result;
}

uint64_t sub_100014324()
{
  return sub_10000CC08(&qword_10008B758, &qword_10008B760, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100014354()
{
  unint64_t result;

  result = qword_10008B768;
  if (!qword_10008B768)
  {
    result = swift_getWitnessTable(&unk_100066040, &type metadata for LinesAndGridsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B768);
  }
  return result;
}

unint64_t sub_10001439C()
{
  unint64_t result;

  result = qword_10008B770[0];
  if (!qword_10008B770[0])
  {
    result = swift_getWitnessTable(&unk_100065AB8, &type metadata for LinesAndGridsEntity);
    atomic_store(result, qword_10008B770);
  }
  return result;
}

unint64_t sub_1000143E4()
{
  unint64_t result;

  result = qword_10008B788;
  if (!qword_10008B788)
  {
    result = swift_getWitnessTable(&unk_1000660D0, &type metadata for LinesAndGridsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B788);
  }
  return result;
}

unint64_t sub_10001442C()
{
  unint64_t result;

  result = qword_10008B790[0];
  if (!qword_10008B790[0])
  {
    result = swift_getWitnessTable(&unk_100066130, &type metadata for LinesAndGridsEntityQuery);
    atomic_store(result, qword_10008B790);
  }
  return result;
}

unint64_t sub_100014474()
{
  unint64_t result;

  result = qword_10008B7A8;
  if (!qword_10008B7A8)
  {
    result = swift_getWitnessTable(&unk_100066158, &type metadata for LinesAndGridsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B7A8);
  }
  return result;
}

unint64_t sub_1000144BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B7B0;
  if (!qword_10008B7B0)
  {
    v1 = sub_10000AE50(qword_10008B7B8);
    sub_100013EA8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008B7B0);
  }
  return result;
}

unint64_t sub_100014524()
{
  unint64_t result;

  result = qword_10008B7D0;
  if (!qword_10008B7D0)
  {
    result = swift_getWitnessTable(&unk_100066244, &type metadata for OpenLinesAndGridsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B7D0);
  }
  return result;
}

unint64_t sub_10001456C()
{
  unint64_t result;

  result = qword_10008B7D8;
  if (!qword_10008B7D8)
  {
    result = swift_getWitnessTable(&unk_10006626C, &type metadata for OpenLinesAndGridsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B7D8);
  }
  return result;
}

unint64_t sub_1000145B4()
{
  unint64_t result;

  result = qword_10008B7E0;
  if (!qword_10008B7E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_10008B7E0);
  }
  return result;
}

unint64_t sub_1000145FC()
{
  unint64_t result;

  result = qword_10008B7E8;
  if (!qword_10008B7E8)
  {
    result = swift_getWitnessTable(&unk_1000662FC, &type metadata for OpenLinesAndGridsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B7E8);
  }
  return result;
}

unint64_t sub_100014644()
{
  unint64_t result;

  result = qword_10008B7F0;
  if (!qword_10008B7F0)
  {
    result = swift_getWitnessTable(&unk_100066324, &type metadata for OpenLinesAndGridsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B7F0);
  }
  return result;
}

uint64_t sub_100014688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001469C(a1, a2, a3, (uint64_t (*)(void))sub_10001456C, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_10001469C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

_BYTE *initializeBufferWithCopyOfBuffer for LinesAndGridsOption(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LinesAndGridsOption(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LinesAndGridsOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000147C8 + 4 * byte_100065A15[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000147FC + 4 * byte_100065A10[v4]))();
}

uint64_t sub_1000147FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001480CLL);
  return result;
}

uint64_t sub_100014818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100014820);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100014824(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001482C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014838(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100014840(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LinesAndGridsOption()
{
  return &type metadata for LinesAndGridsOption;
}

ValueMetadata *type metadata accessor for OpenLinesAndGridsDeepLink()
{
  return &type metadata for OpenLinesAndGridsDeepLink;
}

ValueMetadata *type metadata accessor for LinesAndGridsEntityQuery()
{
  return &type metadata for LinesAndGridsEntityQuery;
}

ValueMetadata *type metadata accessor for LinesAndGridsEntity()
{
  return &type metadata for LinesAndGridsEntity;
}

ValueMetadata *type metadata accessor for LinesAndGridsEntity.ChangeLinesAndGridsEntityHandler()
{
  return &type metadata for LinesAndGridsEntity.ChangeLinesAndGridsEntityHandler;
}

uint64_t sub_100014898()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v0 + 16) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000148EC, 0, 0);
}

uint64_t sub_1000148EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_100009F30(&qword_10008B838);
  LocalizedStringResource.init(stringLiteral:)(0x20262073656E694CLL, 0xED00007364697247);
  v2 = sub_10000CC08(&qword_10008B850, &qword_10008B858, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v3 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v1, &unk_10008B840, 0, &unk_10008B848, 0, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000149A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008B810);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x800000010006BD90);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100013BCC();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_100014BAC()
{
  unint64_t result;

  result = qword_10008B818;
  if (!qword_10008B818)
  {
    result = swift_getWitnessTable(&unk_100066174, &type metadata for OpenLinesAndGridsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B818);
  }
  return result;
}

unint64_t sub_100014BF0()
{
  unint64_t result;

  result = qword_10008B820;
  if (!qword_10008B820)
  {
    result = swift_getWitnessTable(&unk_1000661C4, &type metadata for OpenLinesAndGridsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B820);
  }
  return result;
}

unint64_t sub_100014C34()
{
  unint64_t result;

  result = qword_10008B828;
  if (!qword_10008B828)
  {
    result = swift_getWitnessTable(&unk_100065B18, &type metadata for LinesAndGridsEntity);
    atomic_store(result, (unint64_t *)&qword_10008B828);
  }
  return result;
}

uint64_t sub_100014C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008B860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014CC0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100009F30(&qword_10008B860);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100014D00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B868;
  if (!qword_10008B868)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008B868);
  }
  return result;
}

uint64_t sub_100014D3C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t sub_100014D50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100014D78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B898;
  if (!qword_10008B898)
  {
    v1 = type metadata accessor for _PrebuiltAppIntentError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for _PrebuiltAppIntentError, v1);
    atomic_store(result, (unint64_t *)&qword_10008B898);
  }
  return result;
}

unint64_t sub_100014DCC()
{
  unint64_t result;

  result = qword_10008B8D0;
  if (!qword_10008B8D0)
  {
    result = swift_getWitnessTable(&unk_1000664D0, &type metadata for AutoConvertToTagEntity.ChangeAutoConvertToTagEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008B8D0);
  }
  return result;
}

unint64_t sub_100014E14()
{
  unint64_t result;

  result = qword_10008B8D8;
  if (!qword_10008B8D8)
  {
    result = swift_getWitnessTable(&unk_1000664EC, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B8D8);
  }
  return result;
}

uint64_t sub_100014E58()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, qword_100099328);
  sub_100010130(v16, (uint64_t)qword_100099328);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x800000010006BFE0);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Device Expert Type Display Representation", 41, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10001506C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v42 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v40 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v41 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v39 = (char *)&v39 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x800000010006BFE0);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  v26 = (id)ICNotesAppBundleIdentifier(v25);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = v40;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v27, v29);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v32 = v30;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  v33 = sub_100009F30(&qword_10008B878);
  v34 = swift_allocObject(v33, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000659F0;
  v35 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x800000010006C000);
  static Locale.current.getter(v35);
  v22(v8, v21, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003ELL, 0x800000010006C020);
  static Locale.current.getter(v36);
  v22(v8, v21, v5);
  v37 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v39, v43, v32, v34, v37);
}

uint64_t sub_10001549C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008BA48);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015520, 0, 0);
}

uint64_t sub_100015520()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100066BB8);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008BA50);
  v4 = sub_10000CC08(&qword_10008BA30, &qword_10008BA38, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_1000155CC;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_1000155CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_100015628, 0, 0);
}

uint64_t sub_100015628()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008BA18);
    LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x800000010006BFE0);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008BA20, 0, &unk_10008BA28, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_100066BB8);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_1000157C0;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000157C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_10001584C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001584C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_100014E14();
  static _AppEntityUpdateResult.success.getter(&type metadata for AutoConvertToTagEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000158B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008BA44);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_10001549C(a1, v7, a3);
}

unint64_t sub_100015910()
{
  unint64_t result;

  result = qword_10008B8E8;
  if (!qword_10008B8E8)
  {
    result = swift_getWitnessTable(&unk_1000665C4, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B8E8);
  }
  return result;
}

unint64_t sub_100015958()
{
  unint64_t result;

  result = qword_10008B8F0;
  if (!qword_10008B8F0)
  {
    result = swift_getWitnessTable(&unk_100066490, &type metadata for AutoConvertToTagEntity.ChangeAutoConvertToTagEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008B8F0);
  }
  return result;
}

unint64_t sub_1000159A0()
{
  unint64_t result;

  result = qword_10008B8F8;
  if (!qword_10008B8F8)
  {
    result = swift_getWitnessTable(&unk_1000667E4, &type metadata for AutoConvertToTagEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B8F8);
  }
  return result;
}

uint64_t sub_1000159E4()
{
  uint64_t v0;

  v0 = qword_10008B8B0;
  swift_bridgeObjectRetain(off_10008B8B8);
  return v0;
}

unint64_t sub_100015A1C()
{
  unint64_t result;

  result = qword_10008B900;
  if (!qword_10008B900)
  {
    result = swift_getWitnessTable(&unk_10006661C, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B900);
  }
  return result;
}

uint64_t sub_100015A60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015910();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD000000000000057, 0x800000010006C060, a1, v2);
}

unint64_t sub_100015AAC()
{
  unint64_t result;

  result = qword_10008B908;
  if (!qword_10008B908)
  {
    result = swift_getWitnessTable(&unk_100066644, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B908);
  }
  return result;
}

unint64_t sub_100015AF4()
{
  unint64_t result;

  result = qword_10008B910;
  if (!qword_10008B910)
  {
    result = swift_getWitnessTable(&unk_10006667C, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B910);
  }
  return result;
}

unint64_t sub_100015B3C()
{
  unint64_t result;

  result = qword_10008B918;
  if (!qword_10008B918)
  {
    result = swift_getWitnessTable(&unk_1000666AC, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B918);
  }
  return result;
}

unint64_t sub_100015B84()
{
  unint64_t result;

  result = qword_10008B920;
  if (!qword_10008B920)
  {
    result = swift_getWitnessTable(&unk_10006685C, &type metadata for AutoConvertToTagEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B920);
  }
  return result;
}

uint64_t sub_100015BC8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000169DC();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_100015C14()
{
  unint64_t result;

  result = qword_10008B930;
  if (!qword_10008B930)
  {
    result = swift_getWitnessTable(&unk_1000666E4, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B930);
  }
  return result;
}

unint64_t sub_100015C5C()
{
  unint64_t result;

  result = qword_10008B938;
  if (!qword_10008B938)
  {
    result = swift_getWitnessTable(&unk_10006670C, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B938);
  }
  return result;
}

unint64_t sub_100015CA4()
{
  unint64_t result;

  result = qword_10008B940;
  if (!qword_10008B940)
  {
    result = swift_getWitnessTable(&unk_100066734, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B940);
  }
  return result;
}

unint64_t sub_100015CEC()
{
  unint64_t result;

  result = qword_10008B948;
  if (!qword_10008B948)
  {
    result = swift_getWitnessTable(&unk_10006678C, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B948);
  }
  return result;
}

uint64_t sub_100015D30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100015EC4();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100015D6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B050, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100099328, (uint64_t)sub_100014E58, a1);
}

uint64_t sub_100015D90()
{
  return sub_10000CC08(&qword_10008B950, &qword_10008B958, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100015DBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015910();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100015DF8()
{
  unint64_t result;

  result = qword_10008B960;
  if (!qword_10008B960)
  {
    result = swift_getWitnessTable(&unk_1000667BC, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008B960);
  }
  return result;
}

uint64_t sub_100015E40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015CEC();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100015E7C()
{
  unint64_t result;

  result = qword_10008B968;
  if (!qword_10008B968)
  {
    result = swift_getWitnessTable(&unk_100066824, &type metadata for AutoConvertToTagEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B968);
  }
  return result;
}

unint64_t sub_100015EC4()
{
  unint64_t result;

  result = qword_10008B970[0];
  if (!qword_10008B970[0])
  {
    result = swift_getWitnessTable(&unk_10006652C, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, qword_10008B970);
  }
  return result;
}

uint64_t sub_100015F08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015F60, 0, 0);
}

uint64_t sub_100015F60()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100009F30(&qword_10008BA18);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x800000010006BFE0);
  v3 = sub_10000CC08(&qword_10008BA30, &qword_10008BA38, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v1, &unk_10008BA20, 0, &unk_10008BA28, 0, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100016014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000159A0();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100016080()
{
  unint64_t result;

  result = qword_10008B988;
  if (!qword_10008B988)
  {
    result = swift_getWitnessTable(&unk_1000668B4, &type metadata for AutoConvertToTagEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B988);
  }
  return result;
}

unint64_t sub_1000160C8()
{
  unint64_t result;

  result = qword_10008B990[0];
  if (!qword_10008B990[0])
  {
    result = swift_getWitnessTable(&unk_100066914, &type metadata for AutoConvertToTagEntityQuery);
    atomic_store(result, qword_10008B990);
  }
  return result;
}

uint64_t sub_10001610C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000159A0();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100016178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000159A0();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000161E4()
{
  unint64_t result;

  result = qword_10008B9A8;
  if (!qword_10008B9A8)
  {
    result = swift_getWitnessTable(&unk_10006693C, &type metadata for AutoConvertToTagEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008B9A8);
  }
  return result;
}

unint64_t sub_10001622C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008B9B0;
  if (!qword_10008B9B0)
  {
    v1 = sub_10000AE50(qword_10008B9B8);
    sub_100015CA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008B9B0);
  }
  return result;
}

uint64_t sub_100016290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100015B84();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_100016300()
{
  unint64_t result;

  result = qword_10008B9D0;
  if (!qword_10008B9D0)
  {
    result = swift_getWitnessTable(&unk_100066A28, &type metadata for OpenAutoConvertToTagDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B9D0);
  }
  return result;
}

uint64_t sub_100016344()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_100099340);
  sub_100010130(v0, (uint64_t)qword_100099340);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x800000010006BFB0);
}

unint64_t sub_1000163A8()
{
  unint64_t result;

  result = qword_10008B9D8;
  if (!qword_10008B9D8)
  {
    result = swift_getWitnessTable(&unk_100066A50, &type metadata for OpenAutoConvertToTagDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B9D8);
  }
  return result;
}

uint64_t sub_1000163EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100016954();
  v5 = sub_1000169DC();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100016440()
{
  uint64_t v0;

  v0 = qword_10008B8C0;
  swift_bridgeObjectRetain(off_10008B8C8);
  return v0;
}

unint64_t sub_100016478()
{
  unint64_t result;

  result = qword_10008B9E0;
  if (!qword_10008B9E0)
  {
    result = swift_getWitnessTable(&unk_100066AE0, &type metadata for OpenAutoConvertToTagDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B9E0);
  }
  return result;
}

unint64_t sub_1000164C0()
{
  unint64_t result;

  result = qword_10008B9E8;
  if (!qword_10008B9E8)
  {
    result = swift_getWitnessTable(&unk_100066B08, &type metadata for OpenAutoConvertToTagDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008B9E8);
  }
  return result;
}

uint64_t sub_100016504(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000163A8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100016544@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B058, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100099340, (uint64_t)sub_100016344, a1);
}

uint64_t sub_100016568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100016954();
  v7 = sub_100016998();
  v8 = sub_1000169DC();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000165F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10001674C();
  *a1 = result;
  return result;
}

uint64_t sub_100016618(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000163A8();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenAutoConvertToTagDeepLink()
{
  return &type metadata for OpenAutoConvertToTagDeepLink;
}

ValueMetadata *type metadata accessor for AutoConvertToTagEntityQuery()
{
  return &type metadata for AutoConvertToTagEntityQuery;
}

ValueMetadata *type metadata accessor for AutoConvertToTagEntity()
{
  return &type metadata for AutoConvertToTagEntity;
}

ValueMetadata *type metadata accessor for AutoConvertToTagEntity.ChangeAutoConvertToTagEntityHandler()
{
  return &type metadata for AutoConvertToTagEntity.ChangeAutoConvertToTagEntityHandler;
}

uint64_t sub_100016680(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100016698, 0, 0);
}

uint64_t sub_100016698()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = *(_BYTE **)(v0 + 16);
  *v1 = objc_msgSend((id)objc_opt_self(ICHashtagController), "shouldAutoConvertToTag");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000166E4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100016700, 0, 0);
}

uint64_t sub_100016700()
{
  uint64_t v0;

  objc_msgSend((id)objc_opt_self(ICHashtagController), "setShouldAutoConvertToTag:", *(unsigned __int8 *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001674C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008B9F8);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001BLL, 0x800000010006BF90);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100015910();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_100016954()
{
  unint64_t result;

  result = qword_10008BA00;
  if (!qword_10008BA00)
  {
    result = swift_getWitnessTable(&unk_100066958, &type metadata for OpenAutoConvertToTagDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BA00);
  }
  return result;
}

unint64_t sub_100016998()
{
  unint64_t result;

  result = qword_10008BA08;
  if (!qword_10008BA08)
  {
    result = swift_getWitnessTable(&unk_1000669A8, &type metadata for OpenAutoConvertToTagDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BA08);
  }
  return result;
}

unint64_t sub_1000169DC()
{
  unint64_t result;

  result = qword_10008BA10;
  if (!qword_10008BA10)
  {
    result = swift_getWitnessTable(&unk_10006658C, &type metadata for AutoConvertToTagEntity);
    atomic_store(result, (unint64_t *)&qword_10008BA10);
  }
  return result;
}

uint64_t sub_100016A20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100016A4C()
{
  unint64_t result;

  result = qword_10008BA78;
  if (!qword_10008BA78)
  {
    result = swift_getWitnessTable(&unk_100066C20, &type metadata for AllowDarkBackgroundsEntity.ChangeAllowDarkBackgroundsEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008BA78);
  }
  return result;
}

unint64_t sub_100016A94()
{
  unint64_t result;

  result = qword_10008BA80;
  if (!qword_10008BA80)
  {
    result = swift_getWitnessTable(&unk_100066C3C, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BA80);
  }
  return result;
}

uint64_t sub_100016AD8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, qword_100099358);
  sub_100010130(v16, (uint64_t)qword_100099358);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x800000010006C110);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Device Expert Type Display Representation", 41, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_100016CEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v42 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v40 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v41 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v39 = (char *)&v39 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x800000010006C110);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  v26 = (id)ICNotesAppBundleIdentifier(v25);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = v40;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v27, v29);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v32 = v30;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  v33 = sub_100009F30(&qword_10008B878);
  v34 = swift_allocObject(v33, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000659F0;
  v35 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x800000010006C130);
  static Locale.current.getter(v35);
  v22(v8, v21, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x800000010006C150);
  static Locale.current.getter(v36);
  v22(v8, v21, v5);
  v37 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v39, v43, v32, v34, v37);
}

uint64_t sub_10001711C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008BA48);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000171A0, 0, 0);
}

uint64_t sub_1000171A0()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100067318);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008BBF8);
  v4 = sub_10000CC08(&qword_10008BBE0, &qword_10008BBE8, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_10001724C;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_10001724C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_1000172A8, 0, 0);
}

uint64_t sub_1000172A8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008BBC8);
    LocalizedStringResource.init(stringLiteral:)(0xD000000000000010, 0x800000010006C110);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008BBD0, 0, &unk_10008BBD8, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_100067318);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_100017440;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100017440()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_1000174CC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000174CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_100016A94();
  static _AppEntityUpdateResult.success.getter(&type metadata for AllowDarkBackgroundsEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008BBF4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_10001711C(a1, v7, a3);
}

unint64_t sub_100017590()
{
  unint64_t result;

  result = qword_10008BA90;
  if (!qword_10008BA90)
  {
    result = swift_getWitnessTable(&unk_100066D14, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BA90);
  }
  return result;
}

unint64_t sub_1000175D8()
{
  unint64_t result;

  result = qword_10008BA98;
  if (!qword_10008BA98)
  {
    result = swift_getWitnessTable(&unk_100066BE0, &type metadata for AllowDarkBackgroundsEntity.ChangeAllowDarkBackgroundsEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008BA98);
  }
  return result;
}

unint64_t sub_100017620()
{
  unint64_t result;

  result = qword_10008BAA0;
  if (!qword_10008BAA0)
  {
    result = swift_getWitnessTable(&unk_100066F34, &type metadata for AllowDarkBackgroundsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BAA0);
  }
  return result;
}

uint64_t sub_100017664()
{
  uint64_t v0;

  v0 = qword_10008BA58;
  swift_bridgeObjectRetain(off_10008BA60);
  return v0;
}

unint64_t sub_10001769C()
{
  unint64_t result;

  result = qword_10008BAA8;
  if (!qword_10008BAA8)
  {
    result = swift_getWitnessTable(&unk_100066D6C, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BAA8);
  }
  return result;
}

uint64_t sub_1000176E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017590();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD00000000000005ALL, 0x800000010006C180, a1, v2);
}

unint64_t sub_10001772C()
{
  unint64_t result;

  result = qword_10008BAB0;
  if (!qword_10008BAB0)
  {
    result = swift_getWitnessTable(&unk_100066D94, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BAB0);
  }
  return result;
}

unint64_t sub_100017774()
{
  unint64_t result;

  result = qword_10008BAB8;
  if (!qword_10008BAB8)
  {
    result = swift_getWitnessTable(&unk_100066DCC, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BAB8);
  }
  return result;
}

unint64_t sub_1000177BC()
{
  unint64_t result;

  result = qword_10008BAC0;
  if (!qword_10008BAC0)
  {
    result = swift_getWitnessTable(&unk_100066DFC, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BAC0);
  }
  return result;
}

unint64_t sub_100017804()
{
  unint64_t result;

  result = qword_10008BAC8;
  if (!qword_10008BAC8)
  {
    result = swift_getWitnessTable(&unk_100066FAC, &type metadata for AllowDarkBackgroundsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BAC8);
  }
  return result;
}

uint64_t sub_100017848(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100018864();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_100017894()
{
  unint64_t result;

  result = qword_10008BAD8;
  if (!qword_10008BAD8)
  {
    result = swift_getWitnessTable(&unk_100066E34, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BAD8);
  }
  return result;
}

unint64_t sub_1000178DC()
{
  unint64_t result;

  result = qword_10008BAE0;
  if (!qword_10008BAE0)
  {
    result = swift_getWitnessTable(&unk_100066E5C, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BAE0);
  }
  return result;
}

unint64_t sub_100017924()
{
  unint64_t result;

  result = qword_10008BAE8;
  if (!qword_10008BAE8)
  {
    result = swift_getWitnessTable(&unk_100066E84, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BAE8);
  }
  return result;
}

unint64_t sub_10001796C()
{
  unint64_t result;

  result = qword_10008BAF0;
  if (!qword_10008BAF0)
  {
    result = swift_getWitnessTable(&unk_100066EDC, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BAF0);
  }
  return result;
}

uint64_t sub_1000179B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100017B44();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1000179EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B060, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100099358, (uint64_t)sub_100016AD8, a1);
}

uint64_t sub_100017A10()
{
  return sub_10000CC08(&qword_10008BAF8, &qword_10008BB00, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100017A3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017590();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100017A78()
{
  unint64_t result;

  result = qword_10008BB08;
  if (!qword_10008BB08)
  {
    result = swift_getWitnessTable(&unk_100066F0C, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BB08);
  }
  return result;
}

uint64_t sub_100017AC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001796C();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100017AFC()
{
  unint64_t result;

  result = qword_10008BB10;
  if (!qword_10008BB10)
  {
    result = swift_getWitnessTable(&unk_100066F74, &type metadata for AllowDarkBackgroundsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BB10);
  }
  return result;
}

unint64_t sub_100017B44()
{
  unint64_t result;

  result = qword_10008BB18[0];
  if (!qword_10008BB18[0])
  {
    result = swift_getWitnessTable(&unk_100066C7C, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, qword_10008BB18);
  }
  return result;
}

uint64_t sub_100017B88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_10008BBC0 + dword_10008BBC0);
  v2 = (_QWORD *)swift_task_alloc(unk_10008BBC4);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100014DC4;
  return v4();
}

uint64_t sub_100017BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100017620();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100017C50()
{
  unint64_t result;

  result = qword_10008BB30;
  if (!qword_10008BB30)
  {
    result = swift_getWitnessTable(&unk_100067004, &type metadata for AllowDarkBackgroundsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BB30);
  }
  return result;
}

unint64_t sub_100017C98()
{
  unint64_t result;

  result = qword_10008BB38[0];
  if (!qword_10008BB38[0])
  {
    result = swift_getWitnessTable(&unk_100067064, &type metadata for AllowDarkBackgroundsEntityQuery);
    atomic_store(result, qword_10008BB38);
  }
  return result;
}

uint64_t sub_100017CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100017620();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100017D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100017620();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100017DB4()
{
  unint64_t result;

  result = qword_10008BB50;
  if (!qword_10008BB50)
  {
    result = swift_getWitnessTable(&unk_10006708C, &type metadata for AllowDarkBackgroundsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BB50);
  }
  return result;
}

unint64_t sub_100017DFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008BB58;
  if (!qword_10008BB58)
  {
    v1 = sub_10000AE50(qword_10008BB60);
    sub_100017924();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008BB58);
  }
  return result;
}

uint64_t sub_100017E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100017804();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_100017ED0()
{
  unint64_t result;

  result = qword_10008BB78;
  if (!qword_10008BB78)
  {
    result = swift_getWitnessTable(&unk_100067178, &type metadata for OpenAllowDarkBackgroundsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BB78);
  }
  return result;
}

uint64_t sub_100017F14()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_100099370);
  sub_100010130(v0, (uint64_t)qword_100099370);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000023, 0x800000010006C0E0);
}

unint64_t sub_100017F78()
{
  unint64_t result;

  result = qword_10008BB80;
  if (!qword_10008BB80)
  {
    result = swift_getWitnessTable(&unk_1000671A0, &type metadata for OpenAllowDarkBackgroundsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BB80);
  }
  return result;
}

uint64_t sub_100017FBC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1000187DC();
  v5 = sub_100018864();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100018010()
{
  uint64_t v0;

  v0 = qword_10008BA68;
  swift_bridgeObjectRetain(off_10008BA70);
  return v0;
}

unint64_t sub_100018048()
{
  unint64_t result;

  result = qword_10008BB88;
  if (!qword_10008BB88)
  {
    result = swift_getWitnessTable(&unk_100067230, &type metadata for OpenAllowDarkBackgroundsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BB88);
  }
  return result;
}

unint64_t sub_100018090()
{
  unint64_t result;

  result = qword_10008BB90;
  if (!qword_10008BB90)
  {
    result = swift_getWitnessTable(&unk_100067258, &type metadata for OpenAllowDarkBackgroundsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BB90);
  }
  return result;
}

uint64_t sub_1000180D4(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100017F78();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100018114@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B068, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100099370, (uint64_t)sub_100017F14, a1);
}

uint64_t sub_100018138(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000187DC();
  v7 = sub_100018820();
  v8 = sub_100018864();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000181C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000185D4();
  *a1 = result;
  return result;
}

uint64_t sub_1000181E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017F78();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenAllowDarkBackgroundsDeepLink()
{
  return &type metadata for OpenAllowDarkBackgroundsDeepLink;
}

ValueMetadata *type metadata accessor for AllowDarkBackgroundsEntityQuery()
{
  return &type metadata for AllowDarkBackgroundsEntityQuery;
}

ValueMetadata *type metadata accessor for AllowDarkBackgroundsEntity()
{
  return &type metadata for AllowDarkBackgroundsEntity;
}

ValueMetadata *type metadata accessor for AllowDarkBackgroundsEntity.ChangeAllowDarkBackgroundsEntityHandler()
{
  return &type metadata for AllowDarkBackgroundsEntity.ChangeAllowDarkBackgroundsEntityHandler;
}

uint64_t sub_100018250(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100018268, 0, 0);
}

uint64_t sub_100018268()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = *(_BYTE **)(v0 + 16);
  *v1 = objc_msgSend((id)objc_opt_self(UITraitCollection), "ic_alwaysShowLightContent") ^ 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000182B8(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_1000182D4, 0, 0);
}

uint64_t sub_1000182D4()
{
  uint64_t v0;

  objc_msgSend((id)objc_opt_self(UITraitCollection), "setIc_alwaysShowLightContent:", (*(_BYTE *)(v0 + 16) & 1) == 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018324()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v0 + 16) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100018378, 0, 0);
}

uint64_t sub_100018378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 24) = objc_opt_self(UIDevice);
  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 32) = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000183F0, v2, v3);
}

uint64_t sub_1000183F0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  *(_BYTE *)(v0 + 40) = objc_msgSend(v1, "ic_isVision");
  return swift_task_switch(sub_100018440, 0, 0);
}

uint64_t sub_100018440()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(v0 + 40) == 1)
  {
    v1 = type metadata accessor for _PrebuiltAppIntentError(0);
    v2 = sub_100014D78();
    swift_allocError(v1, v2, 0, 0);
    v3 = static _UnrecoverableError.unsupportedOnDevice.getter();
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    v5 = objc_msgSend(v4, "userInterfaceStyle");

    if (v5 == (id)2)
    {
      v6 = *(_QWORD *)(v0 + 16);
      sub_100009F30(&qword_10008BBC8);
      LocalizedStringResource.init(stringLiteral:)(0xD000000000000010, 0x800000010006C110);
      v7 = sub_10000CC08(&qword_10008BBE0, &qword_10008BBE8, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
      v8 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v6, &unk_10008BBD0, 0, &unk_10008BBD8, 0, v7);
      swift_task_dealloc(v6);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
    }
    v10 = type metadata accessor for _PrebuiltAppIntentError(0);
    v11 = sub_100014D78();
    swift_allocError(v10, v11, 0, 0);
    v3 = static _UnrecoverableError.featureCurrentlyRestricted.getter();
  }
  v12 = *(_QWORD *)(v0 + 16);
  swift_willThrow(v3);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000185D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008BBA0);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x800000010006C0C0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100017590();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_1000187DC()
{
  unint64_t result;

  result = qword_10008BBA8;
  if (!qword_10008BBA8)
  {
    result = swift_getWitnessTable(&unk_1000670A8, &type metadata for OpenAllowDarkBackgroundsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BBA8);
  }
  return result;
}

unint64_t sub_100018820()
{
  unint64_t result;

  result = qword_10008BBB0;
  if (!qword_10008BBB0)
  {
    result = swift_getWitnessTable(&unk_1000670F8, &type metadata for OpenAllowDarkBackgroundsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BBB0);
  }
  return result;
}

unint64_t sub_100018864()
{
  unint64_t result;

  result = qword_10008BBB8;
  if (!qword_10008BBB8)
  {
    result = swift_getWitnessTable(&unk_100066CDC, &type metadata for AllowDarkBackgroundsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BBB8);
  }
  return result;
}

uint64_t sub_1000188A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1000188D4()
{
  unint64_t result;

  result = qword_10008BC20;
  if (!qword_10008BC20)
  {
    result = swift_getWitnessTable(&unk_100067380, &type metadata for DateHeadersEntity.ChangeDateHeadersEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008BC20);
  }
  return result;
}

unint64_t sub_10001891C()
{
  unint64_t result;

  result = qword_10008BC28;
  if (!qword_10008BC28)
  {
    result = swift_getWitnessTable(&unk_10006739C, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC28);
  }
  return result;
}

uint64_t sub_100018960()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, qword_100099388);
  sub_100010130(v16, (uint64_t)qword_100099388);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x800000010006C220);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Device Expert Type Display Representation", 41, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_100018B74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v42 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v40 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v41 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v39 = (char *)&v39 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x800000010006C220);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  v26 = (id)ICNotesAppBundleIdentifier(v25);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = v40;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v27, v29);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v32 = v30;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  v33 = sub_100009F30(&qword_10008B878);
  v34 = swift_allocObject(v33, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000659F0;
  v35 = String.LocalizationValue.init(stringLiteral:)(0x6165682065746164, 0xEC00000073726564);
  static Locale.current.getter(v35);
  v22(v8, v21, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x800000010006C240);
  static Locale.current.getter(v36);
  v22(v8, v21, v5);
  v37 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v39, v43, v32, v34, v37);
}

uint64_t sub_100018FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008BA48);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100019030, 0, 0);
}

uint64_t sub_100019030()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100067A60);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008BD98);
  v4 = sub_10000CC08(&qword_10008BD80, &qword_10008BD88, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_1000190DC;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_1000190DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_100019138, 0, 0);
}

uint64_t sub_100019138()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008BD68);
    LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x800000010006C220);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008BD70, 0, &unk_10008BD78, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_100067A60);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_1000192D0;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000192D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_10001935C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001935C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_10001891C();
  static _AppEntityUpdateResult.success.getter(&type metadata for DateHeadersEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000193C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008BD94);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_100018FAC(a1, v7, a3);
}

unint64_t sub_100019420()
{
  unint64_t result;

  result = qword_10008BC38;
  if (!qword_10008BC38)
  {
    result = swift_getWitnessTable(&unk_100067474, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC38);
  }
  return result;
}

unint64_t sub_100019468()
{
  unint64_t result;

  result = qword_10008BC40;
  if (!qword_10008BC40)
  {
    result = swift_getWitnessTable(&unk_100067340, &type metadata for DateHeadersEntity.ChangeDateHeadersEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008BC40);
  }
  return result;
}

unint64_t sub_1000194B0()
{
  unint64_t result;

  result = qword_10008BC48;
  if (!qword_10008BC48)
  {
    result = swift_getWitnessTable(&unk_100067694, &type metadata for DateHeadersEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BC48);
  }
  return result;
}

uint64_t sub_1000194F4()
{
  uint64_t v0;

  v0 = qword_10008BC00;
  swift_bridgeObjectRetain(off_10008BC08);
  return v0;
}

unint64_t sub_10001952C()
{
  unint64_t result;

  result = qword_10008BC50;
  if (!qword_10008BC50)
  {
    result = swift_getWitnessTable(&unk_1000674CC, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC50);
  }
  return result;
}

uint64_t sub_100019570(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100019420();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD000000000000050, 0x800000010006C270, a1, v2);
}

unint64_t sub_1000195BC()
{
  unint64_t result;

  result = qword_10008BC58;
  if (!qword_10008BC58)
  {
    result = swift_getWitnessTable(&unk_1000674F4, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC58);
  }
  return result;
}

unint64_t sub_100019604()
{
  unint64_t result;

  result = qword_10008BC60;
  if (!qword_10008BC60)
  {
    result = swift_getWitnessTable(&unk_10006752C, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC60);
  }
  return result;
}

unint64_t sub_10001964C()
{
  unint64_t result;

  result = qword_10008BC68;
  if (!qword_10008BC68)
  {
    result = swift_getWitnessTable(&unk_10006755C, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC68);
  }
  return result;
}

unint64_t sub_100019694()
{
  unint64_t result;

  result = qword_10008BC70;
  if (!qword_10008BC70)
  {
    result = swift_getWitnessTable(&unk_10006770C, &type metadata for DateHeadersEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BC70);
  }
  return result;
}

uint64_t sub_1000196D8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10001A4FC();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_100019724()
{
  unint64_t result;

  result = qword_10008BC80;
  if (!qword_10008BC80)
  {
    result = swift_getWitnessTable(&unk_100067594, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC80);
  }
  return result;
}

unint64_t sub_10001976C()
{
  unint64_t result;

  result = qword_10008BC88;
  if (!qword_10008BC88)
  {
    result = swift_getWitnessTable(&unk_1000675BC, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC88);
  }
  return result;
}

unint64_t sub_1000197B4()
{
  unint64_t result;

  result = qword_10008BC90;
  if (!qword_10008BC90)
  {
    result = swift_getWitnessTable(&unk_1000675E4, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC90);
  }
  return result;
}

unint64_t sub_1000197FC()
{
  unint64_t result;

  result = qword_10008BC98;
  if (!qword_10008BC98)
  {
    result = swift_getWitnessTable(&unk_10006763C, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BC98);
  }
  return result;
}

uint64_t sub_100019840@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_1000199D4();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_10001987C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B070, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100099388, (uint64_t)sub_100018960, a1);
}

uint64_t sub_1000198A0()
{
  return sub_10000CC08(&qword_10008BCA0, &qword_10008BCA8, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1000198CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100019420();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100019908()
{
  unint64_t result;

  result = qword_10008BCB0;
  if (!qword_10008BCB0)
  {
    result = swift_getWitnessTable(&unk_10006766C, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BCB0);
  }
  return result;
}

uint64_t sub_100019950(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000197FC();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10001998C()
{
  unint64_t result;

  result = qword_10008BCB8;
  if (!qword_10008BCB8)
  {
    result = swift_getWitnessTable(&unk_1000676D4, &type metadata for DateHeadersEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BCB8);
  }
  return result;
}

unint64_t sub_1000199D4()
{
  unint64_t result;

  result = qword_10008BCC0[0];
  if (!qword_10008BCC0[0])
  {
    result = swift_getWitnessTable(&unk_1000673DC, &type metadata for DateHeadersEntity);
    atomic_store(result, qword_10008BCC0);
  }
  return result;
}

uint64_t sub_100019A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100019A70, 0, 0);
}

uint64_t sub_100019A70()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100009F30(&qword_10008BD68);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x800000010006C220);
  v3 = sub_10000CC08(&qword_10008BD80, &qword_10008BD88, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v1, &unk_10008BD70, 0, &unk_10008BD78, 0, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100019B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000194B0();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100019B90()
{
  unint64_t result;

  result = qword_10008BCD8;
  if (!qword_10008BCD8)
  {
    result = swift_getWitnessTable(&unk_100067764, &type metadata for DateHeadersEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BCD8);
  }
  return result;
}

unint64_t sub_100019BD8()
{
  unint64_t result;

  result = qword_10008BCE0[0];
  if (!qword_10008BCE0[0])
  {
    result = swift_getWitnessTable(&unk_1000677C4, &type metadata for DateHeadersEntityQuery);
    atomic_store(result, qword_10008BCE0);
  }
  return result;
}

uint64_t sub_100019C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000194B0();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100019C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000194B0();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100019CF4()
{
  unint64_t result;

  result = qword_10008BCF8;
  if (!qword_10008BCF8)
  {
    result = swift_getWitnessTable(&unk_1000677EC, &type metadata for DateHeadersEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BCF8);
  }
  return result;
}

unint64_t sub_100019D3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008BD00;
  if (!qword_10008BD00)
  {
    v1 = sub_10000AE50(qword_10008BD08);
    sub_1000197B4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008BD00);
  }
  return result;
}

uint64_t sub_100019DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100019694();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_100019E10()
{
  unint64_t result;

  result = qword_10008BD20;
  if (!qword_10008BD20)
  {
    result = swift_getWitnessTable(&unk_1000678D8, &type metadata for OpenDateHeadersDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BD20);
  }
  return result;
}

uint64_t sub_100019E54()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_1000993A0);
  sub_100010130(v0, (uint64_t)qword_1000993A0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000019, 0x800000010006C200);
}

unint64_t sub_100019EB8()
{
  unint64_t result;

  result = qword_10008BD28;
  if (!qword_10008BD28)
  {
    result = swift_getWitnessTable(&unk_100067900, &type metadata for OpenDateHeadersDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BD28);
  }
  return result;
}

uint64_t sub_100019EFC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10001A474();
  v5 = sub_10001A4FC();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100019F50()
{
  uint64_t v0;

  v0 = qword_10008BC10;
  swift_bridgeObjectRetain(off_10008BC18);
  return v0;
}

unint64_t sub_100019F88()
{
  unint64_t result;

  result = qword_10008BD30;
  if (!qword_10008BD30)
  {
    result = swift_getWitnessTable(&unk_100067990, &type metadata for OpenDateHeadersDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BD30);
  }
  return result;
}

unint64_t sub_100019FD0()
{
  unint64_t result;

  result = qword_10008BD38;
  if (!qword_10008BD38)
  {
    result = swift_getWitnessTable(&unk_1000679B8, &type metadata for OpenDateHeadersDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BD38);
  }
  return result;
}

uint64_t sub_10001A014(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100019EB8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10001A054@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B078, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000993A0, (uint64_t)sub_100019E54, a1);
}

uint64_t sub_10001A078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001A474();
  v7 = sub_10001A4B8();
  v8 = sub_10001A4FC();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10001A104@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10001A26C();
  *a1 = result;
  return result;
}

uint64_t sub_10001A128(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100019EB8();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenDateHeadersDeepLink()
{
  return &type metadata for OpenDateHeadersDeepLink;
}

ValueMetadata *type metadata accessor for DateHeadersEntityQuery()
{
  return &type metadata for DateHeadersEntityQuery;
}

ValueMetadata *type metadata accessor for DateHeadersEntity()
{
  return &type metadata for DateHeadersEntity;
}

ValueMetadata *type metadata accessor for DateHeadersEntity.ChangeDateHeadersEntityHandler()
{
  return &type metadata for DateHeadersEntity.ChangeDateHeadersEntityHandler;
}

uint64_t sub_10001A190(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10001A1A8, 0, 0);
}

uint64_t sub_10001A1A8()
{
  uint64_t v0;
  BOOL *v1;

  v1 = *(BOOL **)(v0 + 16);
  *v1 = objc_msgSend((id)objc_opt_self(ICDateHeadersUtilities), "defaultDateHeadersType") != 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A1FC(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10001A218, 0, 0);
}

uint64_t sub_10001A218()
{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = (void *)objc_opt_self(ICDateHeadersUtilities);
  if (v1)
    v3 = 2;
  else
    v3 = 1;
  objc_msgSend(v2, "setDefaultDateHeadersType:", v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A26C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008BD48);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x800000010006C1E0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100019420();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_10001A474()
{
  unint64_t result;

  result = qword_10008BD50;
  if (!qword_10008BD50)
  {
    result = swift_getWitnessTable(&unk_100067808, &type metadata for OpenDateHeadersDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BD50);
  }
  return result;
}

unint64_t sub_10001A4B8()
{
  unint64_t result;

  result = qword_10008BD58;
  if (!qword_10008BD58)
  {
    result = swift_getWitnessTable(&unk_100067858, &type metadata for OpenDateHeadersDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BD58);
  }
  return result;
}

unint64_t sub_10001A4FC()
{
  unint64_t result;

  result = qword_10008BD60;
  if (!qword_10008BD60)
  {
    result = swift_getWitnessTable(&unk_10006743C, &type metadata for DateHeadersEntity);
    atomic_store(result, (unint64_t *)&qword_10008BD60);
  }
  return result;
}

uint64_t sub_10001A540@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001A568()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, qword_1000993B8);
  sub_100010130(v16, (uint64_t)qword_1000993B8);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010006C320);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Device Expert Type Display Representation", 41, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10001A77C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v42 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v40 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v41 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v39 = (char *)&v39 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010006C320);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  v26 = (id)ICNotesAppBundleIdentifier(v25);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = v40;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v27, v29);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v32 = v30;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  v33 = sub_100009F30(&qword_10008B878);
  v34 = swift_allocObject(v33, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000659F0;
  v35 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x800000010006C340);
  static Locale.current.getter(v35);
  v22(v8, v21, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x800000010006C360);
  static Locale.current.getter(v36);
  v22(v8, v21, v5);
  v37 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v39, v43, v32, v34, v37);
}

uint64_t sub_10001ABAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008BFA8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001AC30, 0, 0);
}

uint64_t sub_10001AC30()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000684C0);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008BFB0);
  v4 = sub_10000CC08(&qword_10008BF90, &qword_10008BF98, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_10001ACDC;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_10001ACDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_10001AD38, 0, 0);
}

uint64_t sub_10001AD38()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008BF78);
    LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x800000010006C320);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008BF80, 0, &unk_10008BF88, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_1000684C0);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_10001AED0;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001AED0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_10001AF5C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001AF5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_10001CCA4();
  static _AppEntityUpdateResult.success.getter(&type metadata for DefaultParagraphStyleEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001AFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008BFA4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_10001ABAC(a1, v7, a3);
}

uint64_t sub_10001B01C()
{
  uint64_t v0;

  v0 = qword_10008BDA0;
  swift_bridgeObjectRetain(off_10008BDA8);
  return v0;
}

uint64_t sub_10001B050(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001CCEC();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD000000000000051, 0x800000010006C390, a1, v2);
}

uint64_t sub_10001B098(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10001DB88();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10001B0E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_10001D4A4();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_10001B11C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B080, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000993B8, (uint64_t)sub_10001A568, a1);
}

uint64_t sub_10001B140(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001CCEC();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10001B17C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001D004();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_10001B1B4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, static ParagraphStyle.typeDisplayRepresentation);
  sub_100010130(v16, (uint64_t)static ParagraphStyle.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x7061726761726150, 0xEF656C7974532068);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Title for entity representing Notes paragraph styles", 52, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t ParagraphStyle.typeDisplayRepresentation.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10008B088 != -1)
    swift_once(&qword_10008B088, sub_10001B1B4);
  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  return sub_100010130(v0, (uint64_t)static ParagraphStyle.typeDisplayRepresentation);
}

uint64_t static ParagraphStyle.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10008B088 != -1)
    swift_once(&qword_10008B088, sub_10001B1B4);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_100010130(v2, (uint64_t)static ParagraphStyle.typeDisplayRepresentation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_10001B488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *);
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  char *v71;
  _BYTE *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t, uint64_t);
  char *v83;
  uint64_t v84;
  _BYTE *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  void (*v106)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  _BYTE *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  void (*v112)(char *);
  char *v113;
  char *v114;
  void (*v115)(char *, uint64_t, uint64_t, uint64_t);
  char *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, uint64_t, uint64_t, uint64_t);
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *);
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  unint64_t result;
  _QWORD v149[2];
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t, uint64_t, uint64_t);
  void (*v164)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *);
  unsigned int v172;
  uint64_t v173;
  char *v174;

  v0 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v0);
  v174 = (char *)v149 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v2);
  v161 = (char *)v149 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v6 = (char *)v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v167 - 8);
  v14 = __chkstk_darwin(v167);
  v159 = (char *)v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v157 = (char *)v149 - v17;
  v18 = __chkstk_darwin(v16);
  v156 = (char *)v149 - v19;
  v20 = __chkstk_darwin(v18);
  v155 = (char *)v149 - v21;
  v22 = __chkstk_darwin(v20);
  v154 = (char *)v149 - v23;
  v24 = __chkstk_darwin(v22);
  v153 = (char *)v149 - v25;
  v26 = __chkstk_darwin(v24);
  v152 = (char *)v149 - v27;
  v28 = __chkstk_darwin(v26);
  v151 = (char *)v149 - v29;
  v30 = __chkstk_darwin(v28);
  v150 = (char *)v149 - v31;
  __chkstk_darwin(v30);
  v33 = (char *)v149 - v32;
  v34 = sub_100009F30(&qword_10008BFB8);
  v35 = sub_100009F30(&qword_10008BFC0);
  v36 = *(_QWORD *)(v35 - 8);
  v162 = v35;
  v166 = *(_QWORD *)(v36 + 72);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = (v37 + 32) & ~v37;
  v39 = swift_allocObject(v34, v38 + 10 * v166, v37 | 7);
  v158 = v39;
  *(_OWORD *)(v39 + 16) = xmmword_100067A90;
  *(_BYTE *)(v39 + v38) = 0;
  v40 = v39 + v38;
  v170 = v39 + v38;
  v41 = String.LocalizationValue.init(stringLiteral:)(0x656C746954, 0xE500000000000000);
  v160 = v9;
  static Locale.current.getter(v41);
  v172 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v171 = *(void (**)(char *))(v4 + 104);
  v42 = v173;
  v171(v6);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v6, "Link enum value", 15, 2);
  v164 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v43 = v161;
  v44 = v167;
  v164(v161, 1, 1, v167);
  v165 = type metadata accessor for DisplayRepresentation.Image(0);
  v163 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 56);
  v45 = v174;
  v163(v174, 1, 1, v165);
  DisplayRepresentation.init(title:subtitle:image:)(v33, v43, v45);
  v46 = v166;
  *(_BYTE *)(v40 + v166) = 1;
  v47 = v162;
  v149[1] = v40 + v46 + *(int *)(v162 + 48);
  v48 = v12;
  v168 = v12;
  v49 = String.LocalizationValue.init(stringLiteral:)(0x676E6964616548, 0xE700000000000000);
  v50 = v160;
  static Locale.current.getter(v49);
  v169 = v6;
  v51 = v171;
  ((void (*)(char *, _QWORD, uint64_t))v171)(v6, v172, v42);
  v52 = v150;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v48, 0, 0, v50, v6, "Link enum value", 15, 2);
  v53 = v43;
  v54 = v43;
  v55 = v44;
  v56 = v164;
  v164(v54, 1, 1, v44);
  v57 = v174;
  v58 = v165;
  v163(v174, 1, 1, v165);
  DisplayRepresentation.init(title:subtitle:image:)(v52, v53, v57);
  v59 = 2 * v46;
  v60 = v170;
  *(_BYTE *)(v170 + v59) = 2;
  v150 = (char *)(v60 + v59 + *(int *)(v47 + 48));
  v61 = v168;
  v62 = String.LocalizationValue.init(stringLiteral:)(0x6964616568627553, 0xEA0000000000676ELL);
  v63 = v50;
  static Locale.current.getter(v62);
  v64 = v169;
  ((void (*)(char *, _QWORD, uint64_t))v51)(v169, v172, v173);
  v65 = v151;
  v66 = v61;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v61, 0, 0, v63, v64, "Link enum value", 15, 2);
  v67 = v161;
  v56(v161, 1, 1, v55);
  v68 = v174;
  v69 = v58;
  v70 = v163;
  v163(v174, 1, 1, v69);
  v71 = v67;
  DisplayRepresentation.init(title:subtitle:image:)(v65, v67, v68);
  v72 = (_BYTE *)(v60 + v59 + v166);
  *v72 = 3;
  v73 = v162;
  v151 = &v72[*(int *)(v162 + 48)];
  v74 = v66;
  v75 = String.LocalizationValue.init(stringLiteral:)(2036625218, 0xE400000000000000);
  v76 = v160;
  static Locale.current.getter(v75);
  v77 = v169;
  v78 = v172;
  ((void (*)(char *, _QWORD, uint64_t))v171)(v169, v172, v173);
  v79 = v152;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v74, 0, 0, v76, v77, "Link enum value", 15, 2);
  v80 = v71;
  v81 = v167;
  v82 = v164;
  v164(v71, 1, 1, v167);
  v70(v68, 1, 1, v165);
  v83 = v68;
  DisplayRepresentation.init(title:subtitle:image:)(v79, v71, v68);
  v84 = v166;
  v85 = (_BYTE *)(v170 + 4 * v166);
  *v85 = 4;
  v152 = &v85[*(int *)(v73 + 48)];
  v86 = v168;
  v87 = String.LocalizationValue.init(stringLiteral:)(0x6C7974736F6E6F4DLL, 0xEA00000000006465);
  static Locale.current.getter(v87);
  v88 = v169;
  ((void (*)(char *, uint64_t, uint64_t))v171)(v169, v78, v173);
  v89 = v153;
  v90 = v86;
  v91 = v76;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v90, 0, 0, v76, v88, "Link enum value", 15, 2);
  v82(v80, 1, 1, v81);
  v92 = v83;
  v93 = v83;
  v94 = v165;
  v163(v93, 1, 1, v165);
  DisplayRepresentation.init(title:subtitle:image:)(v89, v80, v92);
  v95 = v170;
  v96 = (_BYTE *)(v170 + 5 * v84);
  *v96 = 5;
  v97 = v162;
  v153 = &v96[*(int *)(v162 + 48)];
  v98 = v168;
  v99 = String.LocalizationValue.init(stringLiteral:)(0x6E6F6974706143, 0xE700000000000000);
  static Locale.current.getter(v99);
  v100 = v88;
  v101 = v173;
  ((void (*)(char *, _QWORD, uint64_t))v171)(v88, v172, v173);
  v102 = v154;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v98, 0, 0, v91, v100, "Link enum value", 15, 2);
  v103 = v80;
  v104 = v167;
  v164(v80, 1, 1, v167);
  v105 = v174;
  v106 = v163;
  v163(v174, 1, 1, v94);
  DisplayRepresentation.init(title:subtitle:image:)(v102, v103, v105);
  v107 = v166;
  v108 = (_BYTE *)(v95 + 6 * v166);
  *v108 = 6;
  v154 = &v108[*(int *)(v97 + 48)];
  v109 = v168;
  v110 = String.LocalizationValue.init(stringLiteral:)(0x646574656C6C7542, 0xED00007473694C20);
  static Locale.current.getter(v110);
  v111 = v169;
  v112 = v171;
  ((void (*)(char *, _QWORD, uint64_t))v171)(v169, v172, v101);
  v113 = v155;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v109, 0, 0, v91, v111, "Link enum value", 15, 2);
  v114 = v103;
  v115 = v164;
  v164(v103, 1, 1, v104);
  v116 = v174;
  v117 = v165;
  v106(v174, 1, 1, v165);
  DisplayRepresentation.init(title:subtitle:image:)(v113, v114, v116);
  v155 = (char *)(8 * v107);
  v118 = (_BYTE *)(v170 + 7 * v107);
  *v118 = 7;
  v119 = v162;
  v154 = &v118[*(int *)(v162 + 48)];
  v120 = v168;
  v121 = String.LocalizationValue.init(stringLiteral:)(0x4C20646568736144, 0xEB00000000747369);
  v122 = v91;
  static Locale.current.getter(v121);
  v123 = v169;
  v124 = v172;
  v125 = v173;
  ((void (*)(char *, _QWORD, uint64_t))v112)(v169, v172, v173);
  v126 = v156;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v120, 0, 0, v122, v123, "Link enum value", 15, 2);
  v127 = v161;
  v128 = v167;
  v115(v161, 1, 1, v167);
  v129 = v174;
  v130 = v163;
  v163(v174, 1, 1, v117);
  DisplayRepresentation.init(title:subtitle:image:)(v126, v127, v129);
  v131 = v155;
  v132 = &v155[v170];
  *v132 = 8;
  v156 = &v132[*(int *)(v119 + 48)];
  v133 = v168;
  v134 = String.LocalizationValue.init(stringLiteral:)(0x64657265626D754ELL, 0xED00007473694C20);
  v135 = v160;
  static Locale.current.getter(v134);
  v136 = v169;
  v137 = v124;
  v138 = v171;
  ((void (*)(char *, uint64_t, uint64_t))v171)(v169, v137, v125);
  v139 = v157;
  v140 = v133;
  v141 = v133;
  v142 = v136;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v140, 0, 0, v135, v136, "Link enum value", 15, 2);
  v143 = v161;
  v115(v161, 1, 1, v128);
  v144 = v174;
  v145 = v165;
  v130(v174, 1, 1, v165);
  DisplayRepresentation.init(title:subtitle:image:)(v139, v143, v144);
  v131[v166 + v170] = 9;
  v146 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xE900000000000074);
  static Locale.current.getter(v146);
  ((void (*)(char *, _QWORD, uint64_t))v138)(v142, v172, v173);
  v147 = v159;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v141, 0, 0, v135, v142, "Link enum value", 15, 2);
  v164(v143, 1, 1, v167);
  v130(v144, 1, 1, v145);
  DisplayRepresentation.init(title:subtitle:image:)(v147, v143, v144);
  result = sub_10001F9F0(v158);
  static ParagraphStyle.caseDisplayRepresentations = result;
  return result;
}

uint64_t *ParagraphStyle.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_10008B090 != -1)
    swift_once(&qword_10008B090, sub_10001B488);
  return &static ParagraphStyle.caseDisplayRepresentations;
}

uint64_t static ParagraphStyle.caseDisplayRepresentations.getter()
{
  _BYTE v1[24];

  if (qword_10008B090 != -1)
    swift_once(&qword_10008B090, sub_10001B488);
  swift_beginAccess(&static ParagraphStyle.caseDisplayRepresentations, v1, 0, 0);
  return swift_bridgeObjectRetain(static ParagraphStyle.caseDisplayRepresentations);
}

uint64_t static ParagraphStyle.caseDisplayRepresentations.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  if (qword_10008B090 != -1)
    swift_once(&qword_10008B090, sub_10001B488);
  swift_beginAccess(&static ParagraphStyle.caseDisplayRepresentations, v4, 1, 0);
  v2 = static ParagraphStyle.caseDisplayRepresentations;
  static ParagraphStyle.caseDisplayRepresentations = a1;
  return swift_bridgeObjectRelease(v2);
}

void *static ParagraphStyle.caseDisplayRepresentations.modify(uint64_t a1)
{
  if (qword_10008B090 != -1)
    swift_once(&qword_10008B090, sub_10001B488);
  swift_beginAccess(&static ParagraphStyle.caseDisplayRepresentations, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t ParagraphStyle.init(namedStyle:)(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
LABEL_5:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 5;
      break;
    default:
      switch(a1)
      {
        case 'd':
          result = 6;
          break;
        case 'e':
          result = 7;
          break;
        case 'f':
          result = 8;
          break;
        case 'g':
          result = 9;
          break;
        default:
          goto LABEL_5;
      }
      break;
  }
  return result;
}

uint64_t ParagraphStyle.namedStyle.getter(char a1)
{
  return dword_100068588[a1];
}

_UNKNOWN **static ParagraphStyle.allCases.getter()
{
  return &off_100081C88;
}

uint64_t ParagraphStyle.rawValue.getter(char a1)
{
  return *(_QWORD *)&aTitle_5[8 * a1];
}

uint64_t sub_10001C394(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = ParagraphStyle.rawValue.getter(*a1);
  v5 = v4;
  v6 = ParagraphStyle.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_10001C41C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s37com_apple_mobilenotes_WidgetExtension14ParagraphStyleO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001C448@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = ParagraphStyle.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_10001C470()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = ParagraphStyle.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10001C4D0(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = ParagraphStyle.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10001C510(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = ParagraphStyle.rawValue.getter(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10001C56C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B088, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static ParagraphStyle.typeDisplayRepresentation, (uint64_t)sub_10001B1B4, a1);
}

uint64_t sub_10001C590(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001D310();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10001C5C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001D2B8();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_10001C600(_QWORD *a1@<X8>)
{
  *a1 = &off_100081C88;
}

uint64_t sub_10001C610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001C668, 0, 0);
}

uint64_t sub_10001C668()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100009F30(&qword_10008BF78);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x800000010006C320);
  v3 = sub_10000CC08(&qword_10008BF90, &qword_10008BF98, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v1, &unk_10008BF80, 0, &unk_10008BF88, 0, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C71C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10001CD7C();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_10001C784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001CD7C();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10001C7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10001CD7C();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

uint64_t sub_10001C858(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001CEE4();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_10001C8C4()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_1000993F0);
  sub_100010130(v0, (uint64_t)qword_1000993F0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x800000010006C2F0);
}

uint64_t sub_10001C924(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10001DB00();
  v5 = sub_10001DB88();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_10001C978()
{
  uint64_t v0;

  v0 = qword_10008BDB0;
  swift_bridgeObjectRetain(off_10008BDB8);
  return v0;
}

uint64_t sub_10001C9AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B098, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000993F0, (uint64_t)sub_10001C8C4, a1);
}

uint64_t sub_10001C9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001DB00();
  v7 = sub_10001DB44();
  v8 = sub_10001DB88();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10001CA5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10001D8F8();
  *a1 = result;
  return result;
}

uint64_t sub_10001CA80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001D674();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_10001CAA8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10001CAC0, 0, 0);
}

uint64_t sub_10001CAC0()
{
  uint64_t v0;
  unsigned int v1;
  char v2;

  v1 = objc_msgSend((id)objc_opt_self(ICTextStyle), "noteDefaultNamedStyle");
  v2 = 0;
  switch(v1)
  {
    case 0u:
      break;
    case 1u:
      v2 = 1;
      break;
    case 2u:
      v2 = 2;
      break;
    case 3u:
LABEL_5:
      v2 = 3;
      break;
    case 4u:
      v2 = 4;
      break;
    case 5u:
      v2 = 5;
      break;
    default:
      switch(v1)
      {
        case 'd':
          v2 = 6;
          break;
        case 'e':
          v2 = 7;
          break;
        case 'f':
          v2 = 8;
          break;
        case 'g':
          v2 = 9;
          break;
        default:
          goto LABEL_5;
      }
      break;
  }
  **(_BYTE **)(v0 + 16) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CB9C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10001CBB8, 0, 0);
}

uint64_t sub_10001CBB8()
{
  uint64_t v0;

  objc_msgSend((id)objc_opt_self(ICTextStyle), "setNoteDefaultNamedStyle:", dword_100068588[*(char *)(v0 + 16)]);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t _s37com_apple_mobilenotes_WidgetExtension14ParagraphStyleO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100081B78, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t sub_10001CC5C()
{
  unint64_t result;

  result = qword_10008BDC0;
  if (!qword_10008BDC0)
  {
    result = swift_getWitnessTable(&unk_100067B00, &type metadata for DefaultParagraphStyleEntity.ChangeDefaultParagraphStyleEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008BDC0);
  }
  return result;
}

unint64_t sub_10001CCA4()
{
  unint64_t result;

  result = qword_10008BDC8;
  if (!qword_10008BDC8)
  {
    result = swift_getWitnessTable(&unk_100067B1C, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BDC8);
  }
  return result;
}

unint64_t sub_10001CCEC()
{
  unint64_t result;

  result = qword_10008BDD8;
  if (!qword_10008BDD8)
  {
    result = swift_getWitnessTable(&unk_100067BF4, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BDD8);
  }
  return result;
}

unint64_t sub_10001CD34()
{
  unint64_t result;

  result = qword_10008BDE0;
  if (!qword_10008BDE0)
  {
    result = swift_getWitnessTable(&unk_100067AC0, &type metadata for DefaultParagraphStyleEntity.ChangeDefaultParagraphStyleEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008BDE0);
  }
  return result;
}

unint64_t sub_10001CD7C()
{
  unint64_t result;

  result = qword_10008BDE8;
  if (!qword_10008BDE8)
  {
    result = swift_getWitnessTable(&unk_1000680A4, &type metadata for DefaultParagraphStyleEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BDE8);
  }
  return result;
}

unint64_t sub_10001CDC4()
{
  unint64_t result;

  result = qword_10008BDF0;
  if (!qword_10008BDF0)
  {
    result = swift_getWitnessTable(&unk_100067C4C, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BDF0);
  }
  return result;
}

unint64_t sub_10001CE0C()
{
  unint64_t result;

  result = qword_10008BDF8;
  if (!qword_10008BDF8)
  {
    result = swift_getWitnessTable(&unk_100067C74, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BDF8);
  }
  return result;
}

unint64_t sub_10001CE54()
{
  unint64_t result;

  result = qword_10008BE00;
  if (!qword_10008BE00)
  {
    result = swift_getWitnessTable(&unk_100067CAC, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BE00);
  }
  return result;
}

unint64_t sub_10001CE9C()
{
  unint64_t result;

  result = qword_10008BE08;
  if (!qword_10008BE08)
  {
    result = swift_getWitnessTable(&unk_100067CDC, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BE08);
  }
  return result;
}

unint64_t sub_10001CEE4()
{
  unint64_t result;

  result = qword_10008BE10;
  if (!qword_10008BE10)
  {
    result = swift_getWitnessTable(&unk_10006811C, &type metadata for DefaultParagraphStyleEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BE10);
  }
  return result;
}

unint64_t sub_10001CF2C()
{
  unint64_t result;

  result = qword_10008BE20;
  if (!qword_10008BE20)
  {
    result = swift_getWitnessTable(&unk_100067D14, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BE20);
  }
  return result;
}

unint64_t sub_10001CF74()
{
  unint64_t result;

  result = qword_10008BE28;
  if (!qword_10008BE28)
  {
    result = swift_getWitnessTable(&unk_100067D3C, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BE28);
  }
  return result;
}

unint64_t sub_10001CFBC()
{
  unint64_t result;

  result = qword_10008BE30;
  if (!qword_10008BE30)
  {
    result = swift_getWitnessTable(&unk_100067D64, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BE30);
  }
  return result;
}

unint64_t sub_10001D004()
{
  unint64_t result;

  result = qword_10008BE38;
  if (!qword_10008BE38)
  {
    result = swift_getWitnessTable(&unk_100067DBC, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BE38);
  }
  return result;
}

uint64_t sub_10001D048()
{
  return sub_10000CC08(&qword_10008BE40, &qword_10008BE48, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_10001D078()
{
  unint64_t result;

  result = qword_10008BE50;
  if (!qword_10008BE50)
  {
    result = swift_getWitnessTable(&unk_100067DEC, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BE50);
  }
  return result;
}

unint64_t sub_10001D0C0()
{
  unint64_t result;

  result = qword_10008BE58;
  if (!qword_10008BE58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE58);
  }
  return result;
}

unint64_t sub_10001D108()
{
  unint64_t result;

  result = qword_10008BE60;
  if (!qword_10008BE60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE60);
  }
  return result;
}

unint64_t sub_10001D150()
{
  unint64_t result;

  result = qword_10008BE68;
  if (!qword_10008BE68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE68);
  }
  return result;
}

unint64_t sub_10001D198()
{
  unint64_t result;

  result = qword_10008BE70;
  if (!qword_10008BE70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE70);
  }
  return result;
}

unint64_t sub_10001D1E0()
{
  unint64_t result;

  result = qword_10008BE78;
  if (!qword_10008BE78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE78);
  }
  return result;
}

unint64_t sub_10001D228()
{
  unint64_t result;

  result = qword_10008BE80;
  if (!qword_10008BE80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE80);
  }
  return result;
}

unint64_t sub_10001D270()
{
  unint64_t result;

  result = qword_10008BE88;
  if (!qword_10008BE88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE88);
  }
  return result;
}

unint64_t sub_10001D2B8()
{
  unint64_t result;

  result = qword_10008BE90;
  if (!qword_10008BE90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE90);
  }
  return result;
}

uint64_t sub_10001D2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001469C(a1, a2, a3, (uint64_t (*)(void))sub_10001D310, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

unint64_t sub_10001D310()
{
  unint64_t result;

  result = qword_10008BE98;
  if (!qword_10008BE98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BE98);
  }
  return result;
}

unint64_t sub_10001D358()
{
  unint64_t result;

  result = qword_10008BEA0;
  if (!qword_10008BEA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BEA0);
  }
  return result;
}

unint64_t sub_10001D3A0()
{
  unint64_t result;

  result = qword_10008BEA8;
  if (!qword_10008BEA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BEA8);
  }
  return result;
}

unint64_t sub_10001D3E8()
{
  unint64_t result;

  result = qword_10008BEB0;
  if (!qword_10008BEB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_10008BEB0);
  }
  return result;
}

uint64_t sub_10001D42C()
{
  return sub_10000CC08(&qword_10008BEB8, &qword_10008BEC0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10001D45C()
{
  unint64_t result;

  result = qword_10008BEC8;
  if (!qword_10008BEC8)
  {
    result = swift_getWitnessTable(&unk_1000680E4, &type metadata for DefaultParagraphStyleEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BEC8);
  }
  return result;
}

unint64_t sub_10001D4A4()
{
  unint64_t result;

  result = qword_10008BED0[0];
  if (!qword_10008BED0[0])
  {
    result = swift_getWitnessTable(&unk_100067B5C, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, qword_10008BED0);
  }
  return result;
}

unint64_t sub_10001D4EC()
{
  unint64_t result;

  result = qword_10008BEE8;
  if (!qword_10008BEE8)
  {
    result = swift_getWitnessTable(&unk_100068174, &type metadata for DefaultParagraphStyleEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BEE8);
  }
  return result;
}

unint64_t sub_10001D534()
{
  unint64_t result;

  result = qword_10008BEF0[0];
  if (!qword_10008BEF0[0])
  {
    result = swift_getWitnessTable(&unk_1000681D4, &type metadata for DefaultParagraphStyleEntityQuery);
    atomic_store(result, qword_10008BEF0);
  }
  return result;
}

unint64_t sub_10001D57C()
{
  unint64_t result;

  result = qword_10008BF08;
  if (!qword_10008BF08)
  {
    result = swift_getWitnessTable(&unk_1000681FC, &type metadata for DefaultParagraphStyleEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008BF08);
  }
  return result;
}

unint64_t sub_10001D5C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008BF10;
  if (!qword_10008BF10)
  {
    v1 = sub_10000AE50(qword_10008BF18);
    sub_10001CFBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008BF10);
  }
  return result;
}

unint64_t sub_10001D62C()
{
  unint64_t result;

  result = qword_10008BF30;
  if (!qword_10008BF30)
  {
    result = swift_getWitnessTable(&unk_1000682E8, &type metadata for OpenDefaultParagraphStyleDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BF30);
  }
  return result;
}

unint64_t sub_10001D674()
{
  unint64_t result;

  result = qword_10008BF38;
  if (!qword_10008BF38)
  {
    result = swift_getWitnessTable(&unk_100068310, &type metadata for OpenDefaultParagraphStyleDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BF38);
  }
  return result;
}

unint64_t sub_10001D6BC()
{
  unint64_t result;

  result = qword_10008BF40;
  if (!qword_10008BF40)
  {
    result = swift_getWitnessTable(&unk_1000683A0, &type metadata for OpenDefaultParagraphStyleDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BF40);
  }
  return result;
}

unint64_t sub_10001D704()
{
  unint64_t result;

  result = qword_10008BF48;
  if (!qword_10008BF48)
  {
    result = swift_getWitnessTable(&unk_1000683C8, &type metadata for OpenDefaultParagraphStyleDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BF48);
  }
  return result;
}

uint64_t sub_10001D748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001469C(a1, a2, a3, (uint64_t (*)(void))sub_10001D674, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t getEnumTagSinglePayload for ParagraphStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParagraphStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10001D838 + 4 * byte_100067AB9[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10001D86C + 4 * byte_100067AB4[v4]))();
}

uint64_t sub_10001D86C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D874(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001D87CLL);
  return result;
}

uint64_t sub_10001D888(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001D890);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10001D894(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D89C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParagraphStyle()
{
  return &type metadata for ParagraphStyle;
}

ValueMetadata *type metadata accessor for OpenDefaultParagraphStyleDeepLink()
{
  return &type metadata for OpenDefaultParagraphStyleDeepLink;
}

ValueMetadata *type metadata accessor for DefaultParagraphStyleEntityQuery()
{
  return &type metadata for DefaultParagraphStyleEntityQuery;
}

ValueMetadata *type metadata accessor for DefaultParagraphStyleEntity()
{
  return &type metadata for DefaultParagraphStyleEntity;
}

ValueMetadata *type metadata accessor for DefaultParagraphStyleEntity.ChangeDefaultParagraphStyleEntityHandler()
{
  return &type metadata for DefaultParagraphStyleEntity.ChangeDefaultParagraphStyleEntityHandler;
}

uint64_t sub_10001D8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008BF58);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001CLL, 0x800000010006C2D0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_10001CCEC();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_10001DB00()
{
  unint64_t result;

  result = qword_10008BF60;
  if (!qword_10008BF60)
  {
    result = swift_getWitnessTable(&unk_100068218, &type metadata for OpenDefaultParagraphStyleDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BF60);
  }
  return result;
}

unint64_t sub_10001DB44()
{
  unint64_t result;

  result = qword_10008BF68;
  if (!qword_10008BF68)
  {
    result = swift_getWitnessTable(&unk_100068268, &type metadata for OpenDefaultParagraphStyleDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008BF68);
  }
  return result;
}

unint64_t sub_10001DB88()
{
  unint64_t result;

  result = qword_10008BF70;
  if (!qword_10008BF70)
  {
    result = swift_getWitnessTable(&unk_100067BBC, &type metadata for DefaultParagraphStyleEntity);
    atomic_store(result, (unint64_t *)&qword_10008BF70);
  }
  return result;
}

uint64_t sub_10001DBCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_10001DBF8()
{
  unint64_t result;

  result = qword_10008BFE8;
  if (!qword_10008BFE8)
  {
    result = swift_getWitnessTable(&unk_1000685F0, &type metadata for AutoSortCheckedItemsEntity.ChangeAutoSortCheckedItemsEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008BFE8);
  }
  return result;
}

unint64_t sub_10001DC40()
{
  unint64_t result;

  result = qword_10008BFF0;
  if (!qword_10008BFF0)
  {
    result = swift_getWitnessTable(&unk_10006860C, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008BFF0);
  }
  return result;
}

uint64_t sub_10001DC84()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, qword_100099408);
  sub_100010130(v16, (uint64_t)qword_100099408);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x800000010006C480);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Device Expert Type Display Representation", 41, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10001DE98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;

  v45 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v46 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v44 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v43 = (char *)&v41 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x800000010006C480);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v41 = v5;
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v22;
  v25 = v47;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
  v27 = (id)ICNotesAppBundleIdentifier(v26);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  v31 = v46;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v28, v30);
  v32 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 0, 1, v32);
  v33 = sub_100009F30(&qword_10008B878);
  v42 = swift_allocObject(v33, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ 3 * *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v42 + 16) = xmmword_100065600;
  v34 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x800000010006C4D0);
  static Locale.current.getter(v34);
  v35 = v41;
  v24(v8, v21, v41);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010006C4F0);
  static Locale.current.getter(v36);
  v24(v8, v21, v35);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v37 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000019, 0x800000010006C510);
  static Locale.current.getter(v37);
  v24(v8, v21, v35);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v38 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003ELL, 0x800000010006C020);
  static Locale.current.getter(v38);
  v24(v8, v21, v35);
  v39 = v44;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v43, v47, v46, v42, v39);
}

uint64_t sub_10001E3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008BA48);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001E438, 0, 0);
}

uint64_t sub_10001E438()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100068CE8);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008C160);
  v4 = sub_10000CC08(&qword_10008C148, &qword_10008C150, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_10001E4E4;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_10001E4E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_10001E540, 0, 0);
}

uint64_t sub_10001E540()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008C130);
    LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x800000010006C480);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008C138, 0, &unk_10008C140, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_100068CE8);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_10001E6D8;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001E6D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_10001E764;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001E764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_10001DC40();
  static _AppEntityUpdateResult.success.getter(&type metadata for AutoSortCheckedItemsEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008C15C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_10001E3B4(a1, v7, a3);
}

unint64_t sub_10001E828()
{
  unint64_t result;

  result = qword_10008C000;
  if (!qword_10008C000)
  {
    result = swift_getWitnessTable(&unk_1000686E4, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C000);
  }
  return result;
}

unint64_t sub_10001E870()
{
  unint64_t result;

  result = qword_10008C008;
  if (!qword_10008C008)
  {
    result = swift_getWitnessTable(&unk_1000685B0, &type metadata for AutoSortCheckedItemsEntity.ChangeAutoSortCheckedItemsEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008C008);
  }
  return result;
}

unint64_t sub_10001E8B8()
{
  unint64_t result;

  result = qword_10008C010;
  if (!qword_10008C010)
  {
    result = swift_getWitnessTable(&unk_100068904, &type metadata for AutoSortCheckedItemsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C010);
  }
  return result;
}

uint64_t sub_10001E8FC()
{
  uint64_t v0;

  v0 = qword_10008BFC8;
  swift_bridgeObjectRetain(off_10008BFD0);
  return v0;
}

unint64_t sub_10001E934()
{
  unint64_t result;

  result = qword_10008C018;
  if (!qword_10008C018)
  {
    result = swift_getWitnessTable(&unk_10006873C, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C018);
  }
  return result;
}

uint64_t sub_10001E978(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001E828();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD000000000000056, 0x800000010006C530, a1, v2);
}

unint64_t sub_10001E9C4()
{
  unint64_t result;

  result = qword_10008C020;
  if (!qword_10008C020)
  {
    result = swift_getWitnessTable(&unk_100068764, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C020);
  }
  return result;
}

unint64_t sub_10001EA0C()
{
  unint64_t result;

  result = qword_10008C028;
  if (!qword_10008C028)
  {
    result = swift_getWitnessTable(&unk_10006879C, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C028);
  }
  return result;
}

unint64_t sub_10001EA54()
{
  unint64_t result;

  result = qword_10008C030;
  if (!qword_10008C030)
  {
    result = swift_getWitnessTable(&unk_1000687CC, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C030);
  }
  return result;
}

unint64_t sub_10001EA9C()
{
  unint64_t result;

  result = qword_10008C038;
  if (!qword_10008C038)
  {
    result = swift_getWitnessTable(&unk_10006897C, &type metadata for AutoSortCheckedItemsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C038);
  }
  return result;
}

uint64_t sub_10001EAE0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10001F968();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_10001EB2C()
{
  unint64_t result;

  result = qword_10008C048;
  if (!qword_10008C048)
  {
    result = swift_getWitnessTable(&unk_100068804, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C048);
  }
  return result;
}

unint64_t sub_10001EB74()
{
  unint64_t result;

  result = qword_10008C050;
  if (!qword_10008C050)
  {
    result = swift_getWitnessTable(&unk_10006882C, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C050);
  }
  return result;
}

unint64_t sub_10001EBBC()
{
  unint64_t result;

  result = qword_10008C058;
  if (!qword_10008C058)
  {
    result = swift_getWitnessTable(&unk_100068854, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C058);
  }
  return result;
}

unint64_t sub_10001EC04()
{
  unint64_t result;

  result = qword_10008C060;
  if (!qword_10008C060)
  {
    result = swift_getWitnessTable(&unk_1000688AC, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C060);
  }
  return result;
}

uint64_t sub_10001EC48@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_10001EDDC();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_10001EC84@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0A0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100099408, (uint64_t)sub_10001DC84, a1);
}

uint64_t sub_10001ECA8()
{
  return sub_10000CC08(&qword_10008C068, &qword_10008C070, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_10001ECD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001E828();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10001ED10()
{
  unint64_t result;

  result = qword_10008C078;
  if (!qword_10008C078)
  {
    result = swift_getWitnessTable(&unk_1000688DC, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C078);
  }
  return result;
}

uint64_t sub_10001ED58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001EC04();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10001ED94()
{
  unint64_t result;

  result = qword_10008C080;
  if (!qword_10008C080)
  {
    result = swift_getWitnessTable(&unk_100068944, &type metadata for AutoSortCheckedItemsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C080);
  }
  return result;
}

unint64_t sub_10001EDDC()
{
  unint64_t result;

  result = qword_10008C088[0];
  if (!qword_10008C088[0])
  {
    result = swift_getWitnessTable(&unk_10006864C, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, qword_10008C088);
  }
  return result;
}

uint64_t sub_10001EE20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001EE78, 0, 0);
}

uint64_t sub_10001EE78()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100009F30(&qword_10008C130);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x800000010006C480);
  v3 = sub_10000CC08(&qword_10008C148, &qword_10008C150, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v1, &unk_10008C138, 0, &unk_10008C140, 0, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10001E8B8();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_10001EF98()
{
  unint64_t result;

  result = qword_10008C0A0;
  if (!qword_10008C0A0)
  {
    result = swift_getWitnessTable(&unk_1000689D4, &type metadata for AutoSortCheckedItemsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C0A0);
  }
  return result;
}

unint64_t sub_10001EFE0()
{
  unint64_t result;

  result = qword_10008C0A8[0];
  if (!qword_10008C0A8[0])
  {
    result = swift_getWitnessTable(&unk_100068A34, &type metadata for AutoSortCheckedItemsEntityQuery);
    atomic_store(result, qword_10008C0A8);
  }
  return result;
}

uint64_t sub_10001F024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001E8B8();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10001F090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_10001E8B8();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10001F0FC()
{
  unint64_t result;

  result = qword_10008C0C0;
  if (!qword_10008C0C0)
  {
    result = swift_getWitnessTable(&unk_100068A5C, &type metadata for AutoSortCheckedItemsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C0C0);
  }
  return result;
}

unint64_t sub_10001F144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C0C8;
  if (!qword_10008C0C8)
  {
    v1 = sub_10000AE50(qword_10008C0D0);
    sub_10001EBBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008C0C8);
  }
  return result;
}

uint64_t sub_10001F1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001EA9C();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_10001F218()
{
  unint64_t result;

  result = qword_10008C0E8;
  if (!qword_10008C0E8)
  {
    result = swift_getWitnessTable(&unk_100068B48, &type metadata for OpenAutoSortCheckedItemsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C0E8);
  }
  return result;
}

uint64_t sub_10001F25C()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_100099420);
  sub_100010130(v0, (uint64_t)qword_100099420);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000024, 0x800000010006C450);
}

unint64_t sub_10001F2C0()
{
  unint64_t result;

  result = qword_10008C0F0;
  if (!qword_10008C0F0)
  {
    result = swift_getWitnessTable(&unk_100068B70, &type metadata for OpenAutoSortCheckedItemsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C0F0);
  }
  return result;
}

uint64_t sub_10001F304(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10001F8E0();
  v5 = sub_10001F968();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_10001F358()
{
  uint64_t v0;

  v0 = qword_10008BFD8;
  swift_bridgeObjectRetain(off_10008BFE0);
  return v0;
}

unint64_t sub_10001F390()
{
  unint64_t result;

  result = qword_10008C0F8;
  if (!qword_10008C0F8)
  {
    result = swift_getWitnessTable(&unk_100068C00, &type metadata for OpenAutoSortCheckedItemsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C0F8);
  }
  return result;
}

unint64_t sub_10001F3D8()
{
  unint64_t result;

  result = qword_10008C100;
  if (!qword_10008C100)
  {
    result = swift_getWitnessTable(&unk_100068C28, &type metadata for OpenAutoSortCheckedItemsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C100);
  }
  return result;
}

uint64_t sub_10001F41C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001F2C0();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10001F45C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0A8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100099420, (uint64_t)sub_10001F25C, a1);
}

uint64_t sub_10001F480(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001F8E0();
  v7 = sub_10001F924();
  v8 = sub_10001F968();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10001F50C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10001F6D8();
  *a1 = result;
  return result;
}

uint64_t sub_10001F530(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001F2C0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenAutoSortCheckedItemsDeepLink()
{
  return &type metadata for OpenAutoSortCheckedItemsDeepLink;
}

ValueMetadata *type metadata accessor for AutoSortCheckedItemsEntityQuery()
{
  return &type metadata for AutoSortCheckedItemsEntityQuery;
}

ValueMetadata *type metadata accessor for AutoSortCheckedItemsEntity()
{
  return &type metadata for AutoSortCheckedItemsEntity;
}

ValueMetadata *type metadata accessor for AutoSortCheckedItemsEntity.ChangeAutoSortCheckedItemsEntityHandler()
{
  return &type metadata for AutoSortCheckedItemsEntity.ChangeAutoSortCheckedItemsEntityHandler;
}

uint64_t sub_10001F598(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10001F5B0, 0, 0);
}

uint64_t sub_10001F5B0()
{
  uint64_t v0;
  _BYTE *v1;
  void *v2;
  NSString v3;

  v1 = *(_BYTE **)(v0 + 16);
  v2 = (void *)objc_opt_self(ICSettingsUtilities);
  v3 = String._bridgeToObjectiveC()();
  LOBYTE(v2) = objc_msgSend(v2, "BOOLForKey:", v3);

  *v1 = (_BYTE)v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001F638(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_10001F654, 0, 0);
}

uint64_t sub_10001F654()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = (void *)objc_opt_self(ICSettingsUtilities);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setBool:forKey:", v1, v3);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001F6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008C110);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001FLL, 0x800000010006C430);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_10001E828();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_10001F8E0()
{
  unint64_t result;

  result = qword_10008C118;
  if (!qword_10008C118)
  {
    result = swift_getWitnessTable(&unk_100068A78, &type metadata for OpenAutoSortCheckedItemsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C118);
  }
  return result;
}

unint64_t sub_10001F924()
{
  unint64_t result;

  result = qword_10008C120;
  if (!qword_10008C120)
  {
    result = swift_getWitnessTable(&unk_100068AC8, &type metadata for OpenAutoSortCheckedItemsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C120);
  }
  return result;
}

unint64_t sub_10001F968()
{
  unint64_t result;

  result = qword_10008C128;
  if (!qword_10008C128)
  {
    result = swift_getWitnessTable(&unk_1000686AC, &type metadata for AutoSortCheckedItemsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C128);
  }
  return result;
}

uint64_t sub_10001F9AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_10001F9D4(uint64_t a1)
{
  return sub_10001FA0C(a1, &qword_10008B8A8, &qword_10008C3A8, (uint64_t (*)(_QWORD))sub_100021848);
}

unint64_t sub_10001F9F0(uint64_t a1)
{
  return sub_10001FA0C(a1, &qword_10008BFC0, &qword_10008C3A0, (uint64_t (*)(_QWORD))sub_100021878);
}

unint64_t sub_10001FA0C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v31 = a4;
  v7 = sub_100009F30(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v29 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v29);
    return (unint64_t)v13;
  }
  sub_100009F30(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = &v10[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_10000CC94(v18, (uint64_t)v10, a2);
    v20 = *v10;
    result = v31(*v10);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v13[6] + result) = v20;
    v24 = v13[7];
    v25 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v23, v15, v25);
    v26 = v13[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_12;
    v13[2] = v28;
    v18 += v19;
    if (!--v14)
    {
      swift_release(v13);
      v29 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10001FBA4(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aNone_2[v2];
  v4 = *(_QWORD *)&aGridsmalgridme_0[v2 + 48];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aGridsmalgridme_0[v5 + 48];
  if (v3 == *(_QWORD *)&aNone_2[v5] && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v8 & 1;
}

uint64_t sub_10001FC28(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aModifiedcreate[v2];
  v4 = *(_QWORD *)&aDate_2[v2];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aDate_2[v5];
  if (v3 == *(_QWORD *)&aModifiedcreate[v5] && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v8 & 1;
}

Swift::Int sub_10001FCAC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aDate_2[v2];
  String.hash(into:)(v5, *(_QWORD *)&aModifiedcreate[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10001FD14(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aGridsmalgridme_0[v2 + 48];
  String.hash(into:)(a1, *(_QWORD *)&aNone_2[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10001FD54(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aDate_2[v2];
  String.hash(into:)(a1, *(_QWORD *)&aModifiedcreate[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10001FD94(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aDate_2[v3];
  String.hash(into:)(v6, *(_QWORD *)&aModifiedcreate[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_10001FDF8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aGridsmalgridme_0[v3 + 48];
  String.hash(into:)(v6, *(_QWORD *)&aNone_2[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10001FE5C(uint64_t a1)
{
  return sub_1000208D4(a1, qword_100099438, (uint64_t)"Device Expert Type Display Representation", 41);
}

uint64_t sub_10001FE74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;

  v40 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v42 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v39 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v38 = (char *)&v38 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0x746F4E2074726F53, 0xED00007942207365);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  v26 = (id)ICNotesAppBundleIdentifier(v25);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = v42;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v27, v29);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  v32 = sub_100009F30(&qword_10008B878);
  v33 = swift_allocObject(v32, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v33 + 16) = xmmword_1000659F0;
  v34 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x800000010006C5D0);
  static Locale.current.getter(v34);
  v22(v8, v21, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v35 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x800000010006C5F0);
  static Locale.current.getter(v35);
  v22(v8, v21, v5);
  v36 = v39;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v38, v41, v42, v33, v36);
}

uint64_t sub_1000202AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008C378);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100020330, 0, 0);
}

uint64_t sub_100020330()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000696F8);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008C380);
  v4 = sub_10000CC08(&qword_10008C360, &qword_10008C368, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_1000203DC;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_1000203DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_100020438, 0, 0);
}

uint64_t sub_100020438()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008C348);
    LocalizedStringResource.init(stringLiteral:)(0x746F4E2074726F53, 0xED00007942207365);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008C350, 0, &unk_10008C358, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_1000696F8);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_1000205D8;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000205D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_100020664;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100020664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_100021D2C();
  static _AppEntityUpdateResult.success.getter(&type metadata for NoteListSortTypeEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000206CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008C374);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_1000202AC(a1, v7, a3);
}

uint64_t sub_100020724()
{
  uint64_t v0;

  v0 = qword_10008C168;
  swift_bridgeObjectRetain(off_10008C170);
  return v0;
}

uint64_t sub_100020758(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100021D74();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD00000000000004DLL, 0x800000010006C610, a1, v2);
}

uint64_t sub_1000207A0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100022D24();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_1000207E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_10002252C();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100020824@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0B0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100099438, (uint64_t)sub_10001FE5C, a1);
}

uint64_t sub_100020848(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100021D74();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100020884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002208C();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000208BC(uint64_t a1)
{
  return sub_1000208D4(a1, static NoteListSortType.typeDisplayRepresentation, (uint64_t)"Title for entity representing note list sort types", 50);
}

uint64_t sub_1000208D4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a3;
  v26 = a4;
  v5 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v8 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizedStringResource(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v21, a2);
  sub_100010130(v21, (uint64_t)a2);
  v22 = String.LocalizationValue.init(stringLiteral:)(0x746F4E2074726F53, 0xED00007942207365);
  static Locale.current.getter(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v24);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, v13, v10, v25, v26, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v7, 1, 1, v17);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v20, v7);
}

uint64_t NoteListSortType.typeDisplayRepresentation.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10008B0B8 != -1)
    swift_once(&qword_10008B0B8, sub_1000208BC);
  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  return sub_100010130(v0, (uint64_t)static NoteListSortType.typeDisplayRepresentation);
}

uint64_t static NoteListSortType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10008B0B8 != -1)
    swift_once(&qword_10008B0B8, sub_1000208BC);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_100010130(v2, (uint64_t)static NoteListSortType.typeDisplayRepresentation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_100020BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t result;
  char *v51;
  _BYTE *v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(char *);
  unsigned int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v0 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v0);
  v61 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v2);
  v64 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  v65 = v13;
  v66 = v14;
  v15 = __chkstk_darwin(v13);
  v62 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v58 = (char *)&v51 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v51 - v19;
  v21 = sub_100009F30(&qword_10008C388);
  v22 = sub_100009F30(&qword_10008C390);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = v22;
  v57 = v22;
  v25 = *(_QWORD *)(v23 + 72);
  v26 = *(unsigned __int8 *)(v23 + 80);
  v27 = (v26 + 32) & ~v26;
  v59 = 2 * v25;
  v28 = swift_allocObject(v21, v27 + 3 * v25, v26 | 7);
  v60 = v28;
  *(_OWORD *)(v28 + 16) = xmmword_100065600;
  v29 = (_BYTE *)(v28 + v27);
  *v29 = 0;
  v54 = v28 + v27 + *(int *)(v24 + 48);
  v30 = v28 + v27;
  v52 = v29;
  v31 = String.LocalizationValue.init(stringLiteral:)(0x6964452065746144, 0xEB00000000646574);
  v32 = v9;
  static Locale.current.getter(v31);
  v56 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v55 = *(void (**)(char *))(v4 + 104);
  v63 = v6;
  v33 = v67;
  v55(v6);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v6, "Link enum value", 15, 2);
  v34 = v65;
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
  v35 = v64;
  v53(v64, 1, 1, v65);
  v66 = type metadata accessor for DisplayRepresentation.Image(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56);
  v37 = v61;
  v36(v61, 1, 1, v66);
  DisplayRepresentation.init(title:subtitle:image:)(v20, v35, v37);
  *(_BYTE *)(v30 + v25) = 1;
  v54 = v30 + v25 + *(int *)(v57 + 48);
  v38 = v12;
  v51 = v12;
  v39 = String.LocalizationValue.init(stringLiteral:)(0x6572432065746144, 0xEC00000064657461);
  static Locale.current.getter(v39);
  v40 = v63;
  v41 = v56;
  v42 = (void (*)(char *, uint64_t, uint64_t))v55;
  ((void (*)(char *, _QWORD, uint64_t))v55)(v63, v56, v33);
  v43 = v58;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v38, 0, 0, v32, v40, "Link enum value", 15, 2);
  v44 = v64;
  v45 = v53;
  v53(v64, 1, 1, v34);
  v36(v37, 1, 1, v66);
  DisplayRepresentation.init(title:subtitle:image:)(v43, v44, v37);
  v46 = v51;
  v52[v59] = 2;
  v47 = String.LocalizationValue.init(stringLiteral:)(0x656C746954, 0xE500000000000000);
  static Locale.current.getter(v47);
  v48 = v63;
  v42(v63, v41, v67);
  v49 = v62;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v46, 0, 0, v32, v48, "Link enum value", 15, 2);
  v45(v44, 1, 1, v65);
  v36(v37, 1, 1, v66);
  DisplayRepresentation.init(title:subtitle:image:)(v49, v44, v37);
  result = sub_10001FA0C(v60, &qword_10008C390, &qword_10008C398, (uint64_t (*)(_QWORD))sub_1000218EC);
  static NoteListSortType.caseDisplayRepresentations = result;
  return result;
}

uint64_t *NoteListSortType.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_10008B0C0 != -1)
    swift_once(&qword_10008B0C0, sub_100020BA0);
  return &static NoteListSortType.caseDisplayRepresentations;
}

uint64_t static NoteListSortType.caseDisplayRepresentations.getter()
{
  _BYTE v1[24];

  if (qword_10008B0C0 != -1)
    swift_once(&qword_10008B0C0, sub_100020BA0);
  swift_beginAccess(&static NoteListSortType.caseDisplayRepresentations, v1, 0, 0);
  return swift_bridgeObjectRetain(static NoteListSortType.caseDisplayRepresentations);
}

uint64_t static NoteListSortType.caseDisplayRepresentations.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  if (qword_10008B0C0 != -1)
    swift_once(&qword_10008B0C0, sub_100020BA0);
  swift_beginAccess(&static NoteListSortType.caseDisplayRepresentations, v4, 1, 0);
  v2 = static NoteListSortType.caseDisplayRepresentations;
  static NoteListSortType.caseDisplayRepresentations = a1;
  return swift_bridgeObjectRelease(v2);
}

void *static NoteListSortType.caseDisplayRepresentations.modify(uint64_t a1)
{
  if (qword_10008B0C0 != -1)
    swift_once(&qword_10008B0C0, sub_100020BA0);
  swift_beginAccess(&static NoteListSortType.caseDisplayRepresentations, a1, 33, 0);
  return &j__swift_endAccess;
}

_UNKNOWN **static NoteListSortType.allCases.getter()
{
  return &off_100081D20;
}

uint64_t NoteListSortType.rawValue.getter(char a1)
{
  return *(_QWORD *)&aModifiedcreate[8 * a1];
}

uint64_t sub_100021264(char *a1, char *a2)
{
  return sub_10001FC28(*a1, *a2);
}

unint64_t sub_100021270@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s37com_apple_mobilenotes_WidgetExtension16NoteListSortTypeO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002129C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = NoteListSortType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_1000212C4()
{
  char *v0;

  return sub_10001FCAC(*v0);
}

uint64_t sub_1000212CC(uint64_t a1)
{
  char *v1;

  return sub_10001FD54(a1, *v1);
}

Swift::Int sub_1000212D4(uint64_t a1)
{
  char *v1;

  return sub_10001FD94(a1, *v1);
}

uint64_t sub_1000212DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0B8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static NoteListSortType.typeDisplayRepresentation, (uint64_t)sub_1000208BC, a1);
}

uint64_t sub_100021300(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022398();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100021338(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022340();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_100021370(_QWORD *a1@<X8>)
{
  *a1 = &off_100081D48;
}

uint64_t sub_100021380(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_10008C340 + dword_10008C340);
  v2 = (_QWORD *)swift_task_alloc(unk_10008C344);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100014DC4;
  return v4();
}

uint64_t sub_1000213DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100021E04();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_100021444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100021E04();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_1000214B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100021E04();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

uint64_t sub_100021518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100021F6C();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100021584()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_100099470);
  sub_100010130(v0, (uint64_t)qword_100099470);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ALL, 0x800000010006C5B0);
}

uint64_t sub_1000215E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100022C9C();
  v5 = sub_100022D24();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100021638()
{
  uint64_t v0;

  v0 = qword_10008C178;
  swift_bridgeObjectRetain(off_10008C180);
  return v0;
}

uint64_t sub_10002166C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0C8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100099470, (uint64_t)sub_100021584, a1);
}

uint64_t sub_100021690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100022C9C();
  v7 = sub_100022CE0();
  v8 = sub_100022D24();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10002171C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100022A94();
  *a1 = result;
  return result;
}

uint64_t sub_100021740(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022704();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_100021768(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100021780, 0, 0);
}

uint64_t sub_100021780()
{
  uint64_t v0;
  char *v1;
  id v2;
  char v3;

  v1 = *(char **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(ICNoteListSortUtilities), "currentNoteListSortType");
  if (v2 == (id)2)
    v3 = 2;
  else
    v3 = v2 == (id)1;
  *v1 = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000217E0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_1000217FC, 0, 0);
}

uint64_t sub_1000217FC()
{
  uint64_t v0;

  objc_msgSend((id)objc_opt_self(ICNoteListSortUtilities), "setCurrentNoteListSortType:", *(unsigned __int8 *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100021848(char a1)
{
  uint64_t v1;
  Swift::Int v3;

  v3 = sub_10001FDF8(*(_QWORD *)(v1 + 40), a1);
  return sub_100021968(a1, v3);
}

unint64_t sub_100021878(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = ParagraphStyle.rawValue.getter(a1);
  v5 = v4;
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_100021A78(a1, v6);
}

unint64_t sub_1000218EC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = 8 * a1;
  v4 = *(_QWORD *)&aDate_2[v3];
  String.hash(into:)(v7, *(_QWORD *)&aModifiedcreate[v3], v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_100021B88(a1, v5);
}

unint64_t sub_100021968(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = 8 * a1;
    v7 = *(_QWORD *)&aNone_2[v6];
    v8 = *(_QWORD *)&aGridsmalgridme_0[v6 + 48];
    while (1)
    {
      v9 = 8 * *(char *)(*(_QWORD *)(v2 + 48) + v4);
      v10 = *(_QWORD *)&aGridsmalgridme_0[v9 + 48];
      if (*(_QWORD *)&aNone_2[v9] == v7 && v10 == v8)
        break;
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(*(_QWORD *)&aGridsmalgridme_0[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4) + 48]);
    swift_bridgeObjectRelease(v8);
  }
  return v4;
}

unint64_t sub_100021A78(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = 8 * a1;
    v7 = *(_QWORD *)&aTitle_6[v6];
    v8 = *(_QWORD *)&aListbulllistda_0[v6 + 32];
    while (1)
    {
      v9 = 8 * *(char *)(*(_QWORD *)(v2 + 48) + v4);
      v10 = *(_QWORD *)&aListbulllistda_0[v9 + 32];
      if (*(_QWORD *)&aTitle_6[v9] == v7 && v10 == v8)
        break;
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(*(_QWORD *)&aListbulllistda_0[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4) + 32]);
    swift_bridgeObjectRelease(v8);
  }
  return v4;
}

unint64_t sub_100021B88(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = 8 * a1;
    v7 = *(_QWORD *)&aModifiedcreate[v6];
    v8 = *(_QWORD *)&aDate_2[v6];
    while (1)
    {
      v9 = 8 * *(char *)(*(_QWORD *)(v2 + 48) + v4);
      v10 = *(_QWORD *)&aDate_2[v9];
      if (*(_QWORD *)&aModifiedcreate[v9] == v7 && v10 == v8)
        break;
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(*(_QWORD *)&aDate_2[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4)]);
    swift_bridgeObjectRelease(v8);
  }
  return v4;
}

unint64_t _s37com_apple_mobilenotes_WidgetExtension16NoteListSortTypeO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100081CB8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_100021CE4()
{
  unint64_t result;

  result = qword_10008C188;
  if (!qword_10008C188)
  {
    result = swift_getWitnessTable(&unk_100068D5C, &type metadata for NoteListSortTypeEntity.ChangeNoteListSortTypeEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008C188);
  }
  return result;
}

unint64_t sub_100021D2C()
{
  unint64_t result;

  result = qword_10008C190;
  if (!qword_10008C190)
  {
    result = swift_getWitnessTable(&unk_100068D78, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C190);
  }
  return result;
}

unint64_t sub_100021D74()
{
  unint64_t result;

  result = qword_10008C1A0;
  if (!qword_10008C1A0)
  {
    result = swift_getWitnessTable(&unk_100068E50, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C1A0);
  }
  return result;
}

unint64_t sub_100021DBC()
{
  unint64_t result;

  result = qword_10008C1A8;
  if (!qword_10008C1A8)
  {
    result = swift_getWitnessTable(&unk_100068D1C, &type metadata for NoteListSortTypeEntity.ChangeNoteListSortTypeEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008C1A8);
  }
  return result;
}

unint64_t sub_100021E04()
{
  unint64_t result;

  result = qword_10008C1B0;
  if (!qword_10008C1B0)
  {
    result = swift_getWitnessTable(&unk_100069300, &type metadata for NoteListSortTypeEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C1B0);
  }
  return result;
}

unint64_t sub_100021E4C()
{
  unint64_t result;

  result = qword_10008C1B8;
  if (!qword_10008C1B8)
  {
    result = swift_getWitnessTable(&unk_100068EA8, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C1B8);
  }
  return result;
}

unint64_t sub_100021E94()
{
  unint64_t result;

  result = qword_10008C1C0;
  if (!qword_10008C1C0)
  {
    result = swift_getWitnessTable(&unk_100068ED0, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C1C0);
  }
  return result;
}

unint64_t sub_100021EDC()
{
  unint64_t result;

  result = qword_10008C1C8;
  if (!qword_10008C1C8)
  {
    result = swift_getWitnessTable(&unk_100068F08, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C1C8);
  }
  return result;
}

unint64_t sub_100021F24()
{
  unint64_t result;

  result = qword_10008C1D0;
  if (!qword_10008C1D0)
  {
    result = swift_getWitnessTable(&unk_100068F38, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C1D0);
  }
  return result;
}

unint64_t sub_100021F6C()
{
  unint64_t result;

  result = qword_10008C1D8;
  if (!qword_10008C1D8)
  {
    result = swift_getWitnessTable(&unk_100069378, &type metadata for NoteListSortTypeEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C1D8);
  }
  return result;
}

unint64_t sub_100021FB4()
{
  unint64_t result;

  result = qword_10008C1E8;
  if (!qword_10008C1E8)
  {
    result = swift_getWitnessTable(&unk_100068F70, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C1E8);
  }
  return result;
}

unint64_t sub_100021FFC()
{
  unint64_t result;

  result = qword_10008C1F0;
  if (!qword_10008C1F0)
  {
    result = swift_getWitnessTable(&unk_100068F98, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C1F0);
  }
  return result;
}

unint64_t sub_100022044()
{
  unint64_t result;

  result = qword_10008C1F8;
  if (!qword_10008C1F8)
  {
    result = swift_getWitnessTable(&unk_100068FC0, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C1F8);
  }
  return result;
}

unint64_t sub_10002208C()
{
  unint64_t result;

  result = qword_10008C200;
  if (!qword_10008C200)
  {
    result = swift_getWitnessTable(&unk_100069018, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C200);
  }
  return result;
}

uint64_t sub_1000220D0()
{
  return sub_10000CC08(&qword_10008C208, &qword_10008C210, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

unint64_t sub_100022100()
{
  unint64_t result;

  result = qword_10008C218;
  if (!qword_10008C218)
  {
    result = swift_getWitnessTable(&unk_100069048, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C218);
  }
  return result;
}

unint64_t sub_100022148()
{
  unint64_t result;

  result = qword_10008C220;
  if (!qword_10008C220)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C220);
  }
  return result;
}

unint64_t sub_100022190()
{
  unint64_t result;

  result = qword_10008C228;
  if (!qword_10008C228)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C228);
  }
  return result;
}

unint64_t sub_1000221D8()
{
  unint64_t result;

  result = qword_10008C230;
  if (!qword_10008C230)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C230);
  }
  return result;
}

unint64_t sub_100022220()
{
  unint64_t result;

  result = qword_10008C238;
  if (!qword_10008C238)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C238);
  }
  return result;
}

unint64_t sub_100022268()
{
  unint64_t result;

  result = qword_10008C240;
  if (!qword_10008C240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C240);
  }
  return result;
}

unint64_t sub_1000222B0()
{
  unint64_t result;

  result = qword_10008C248;
  if (!qword_10008C248)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C248);
  }
  return result;
}

unint64_t sub_1000222F8()
{
  unint64_t result;

  result = qword_10008C250;
  if (!qword_10008C250)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C250);
  }
  return result;
}

unint64_t sub_100022340()
{
  unint64_t result;

  result = qword_10008C258;
  if (!qword_10008C258)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C258);
  }
  return result;
}

uint64_t sub_100022384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001469C(a1, a2, a3, (uint64_t (*)(void))sub_100022398, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

unint64_t sub_100022398()
{
  unint64_t result;

  result = qword_10008C260;
  if (!qword_10008C260)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C260);
  }
  return result;
}

unint64_t sub_1000223E0()
{
  unint64_t result;

  result = qword_10008C268;
  if (!qword_10008C268)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C268);
  }
  return result;
}

unint64_t sub_100022428()
{
  unint64_t result;

  result = qword_10008C270;
  if (!qword_10008C270)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C270);
  }
  return result;
}

unint64_t sub_100022470()
{
  unint64_t result;

  result = qword_10008C278;
  if (!qword_10008C278)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteListSortType, &type metadata for NoteListSortType);
    atomic_store(result, (unint64_t *)&qword_10008C278);
  }
  return result;
}

uint64_t sub_1000224B4()
{
  return sub_10000CC08(&qword_10008C280, &qword_10008C288, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1000224E4()
{
  unint64_t result;

  result = qword_10008C290;
  if (!qword_10008C290)
  {
    result = swift_getWitnessTable(&unk_100069340, &type metadata for NoteListSortTypeEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C290);
  }
  return result;
}

unint64_t sub_10002252C()
{
  unint64_t result;

  result = qword_10008C298[0];
  if (!qword_10008C298[0])
  {
    result = swift_getWitnessTable(&unk_100068DB8, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, qword_10008C298);
  }
  return result;
}

unint64_t sub_100022578()
{
  unint64_t result;

  result = qword_10008C2B0;
  if (!qword_10008C2B0)
  {
    result = swift_getWitnessTable(&unk_1000693D0, &type metadata for NoteListSortTypeEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C2B0);
  }
  return result;
}

unint64_t sub_1000225C0()
{
  unint64_t result;

  result = qword_10008C2B8[0];
  if (!qword_10008C2B8[0])
  {
    result = swift_getWitnessTable(&unk_100069430, &type metadata for NoteListSortTypeEntityQuery);
    atomic_store(result, qword_10008C2B8);
  }
  return result;
}

unint64_t sub_100022608()
{
  unint64_t result;

  result = qword_10008C2D0;
  if (!qword_10008C2D0)
  {
    result = swift_getWitnessTable(&unk_100069458, &type metadata for NoteListSortTypeEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C2D0);
  }
  return result;
}

unint64_t sub_100022650()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C2D8;
  if (!qword_10008C2D8)
  {
    v1 = sub_10000AE50(qword_10008C2E0);
    sub_100022044();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008C2D8);
  }
  return result;
}

unint64_t sub_1000226B8()
{
  unint64_t result;

  result = qword_10008C2F8;
  if (!qword_10008C2F8)
  {
    result = swift_getWitnessTable(&unk_100069544, &type metadata for OpenNoteListSortTypeDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C2F8);
  }
  return result;
}

unint64_t sub_100022704()
{
  unint64_t result;

  result = qword_10008C300;
  if (!qword_10008C300)
  {
    result = swift_getWitnessTable(&unk_10006956C, &type metadata for OpenNoteListSortTypeDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C300);
  }
  return result;
}

unint64_t sub_10002274C()
{
  unint64_t result;

  result = qword_10008C308;
  if (!qword_10008C308)
  {
    result = swift_getWitnessTable(&unk_1000695FC, &type metadata for OpenNoteListSortTypeDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C308);
  }
  return result;
}

unint64_t sub_100022794()
{
  unint64_t result;

  result = qword_10008C310;
  if (!qword_10008C310)
  {
    result = swift_getWitnessTable(&unk_100069624, &type metadata for OpenNoteListSortTypeDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C310);
  }
  return result;
}

uint64_t sub_1000227D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001469C(a1, a2, a3, (uint64_t (*)(void))sub_100022704, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t getEnumTagSinglePayload for NoteListSortType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NoteListSortType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000228C8 + 4 * byte_100068D15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000228FC + 4 * byte_100068D10[v4]))();
}

uint64_t sub_1000228FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022904(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002290CLL);
  return result;
}

uint64_t sub_100022918(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100022920);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100022924(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002292C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NoteListSortType()
{
  return &type metadata for NoteListSortType;
}

ValueMetadata *type metadata accessor for OpenNoteListSortTypeDeepLink()
{
  return &type metadata for OpenNoteListSortTypeDeepLink;
}

ValueMetadata *type metadata accessor for NoteListSortTypeEntityQuery()
{
  return &type metadata for NoteListSortTypeEntityQuery;
}

ValueMetadata *type metadata accessor for NoteListSortTypeEntity()
{
  return &type metadata for NoteListSortTypeEntity;
}

ValueMetadata *type metadata accessor for NoteListSortTypeEntity.ChangeNoteListSortTypeEntityHandler()
{
  return &type metadata for NoteListSortTypeEntity.ChangeNoteListSortTypeEntityHandler;
}

uint64_t sub_100022988()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v0 + 16) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000229DC, 0, 0);
}

uint64_t sub_1000229DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_100009F30(&qword_10008C348);
  LocalizedStringResource.init(stringLiteral:)(0x746F4E2074726F53, 0xED00007942207365);
  v2 = sub_10000CC08(&qword_10008C360, &qword_10008C368, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v3 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v1, &unk_10008C350, 0, &unk_10008C358, 0, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_100022A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008C320);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x800000010006C590);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100021D74();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_100022C9C()
{
  unint64_t result;

  result = qword_10008C328;
  if (!qword_10008C328)
  {
    result = swift_getWitnessTable(&unk_100069474, &type metadata for OpenNoteListSortTypeDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C328);
  }
  return result;
}

unint64_t sub_100022CE0()
{
  unint64_t result;

  result = qword_10008C330;
  if (!qword_10008C330)
  {
    result = swift_getWitnessTable(&unk_1000694C4, &type metadata for OpenNoteListSortTypeDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C330);
  }
  return result;
}

unint64_t sub_100022D24()
{
  unint64_t result;

  result = qword_10008C338;
  if (!qword_10008C338)
  {
    result = swift_getWitnessTable(&unk_100068E18, &type metadata for NoteListSortTypeEntity);
    atomic_store(result, (unint64_t *)&qword_10008C338);
  }
  return result;
}

uint64_t sub_100022D68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100022D94()
{
  unint64_t result;

  result = qword_10008C3D0;
  if (!qword_10008C3D0)
  {
    result = swift_getWitnessTable(&unk_1000698A0, &type metadata for SavePhotosEntity.ChangeSavePhotosEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008C3D0);
  }
  return result;
}

unint64_t sub_100022DDC()
{
  unint64_t result;

  result = qword_10008C3D8;
  if (!qword_10008C3D8)
  {
    result = swift_getWitnessTable(&unk_1000698BC, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C3D8);
  }
  return result;
}

uint64_t sub_100022E20()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, qword_100099488);
  sub_100010130(v16, (uint64_t)qword_100099488);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x206F742065766153, 0xEE00736F746F6850);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Device Expert Type Display Representation", 41, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10002303C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v42 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v40 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v41 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v39 = (char *)&v39 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0x206F742065766153, 0xEE00736F746F6850);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  v26 = (id)ICNotesAppBundleIdentifier(v25);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = v40;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v27, v29);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v32 = v30;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  v33 = sub_100009F30(&qword_10008B878);
  v34 = swift_allocObject(v33, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000659F0;
  v35 = String.LocalizationValue.init(stringLiteral:)(0x70206F7420646461, 0xED0000736F746F68);
  static Locale.current.getter(v35);
  v22(v8, v21, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x800000010006C710);
  static Locale.current.getter(v36);
  v22(v8, v21, v5);
  v37 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v39, v43, v32, v34, v37);
}

uint64_t sub_10002347C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008BA48);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100023500, 0, 0);
}

uint64_t sub_100023500()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100069F80);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008C550);
  v4 = sub_10000CC08(&qword_10008C538, &qword_10008C540, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_1000235AC;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_1000235AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_100023608, 0, 0);
}

uint64_t sub_100023608()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008C520);
    LocalizedStringResource.init(stringLiteral:)(0x206F742065766153, 0xEE00736F746F6850);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008C528, 0, &unk_10008C530, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_100069F80);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_1000237A8;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000237A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_100023834;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100023834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_100022DDC();
  static _AppEntityUpdateResult.success.getter(&type metadata for SavePhotosEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002389C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008C54C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_10002347C(a1, v7, a3);
}

unint64_t sub_1000238F8()
{
  unint64_t result;

  result = qword_10008C3E8;
  if (!qword_10008C3E8)
  {
    result = swift_getWitnessTable(&unk_100069994, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C3E8);
  }
  return result;
}

unint64_t sub_100023940()
{
  unint64_t result;

  result = qword_10008C3F0;
  if (!qword_10008C3F0)
  {
    result = swift_getWitnessTable(&unk_100069860, &type metadata for SavePhotosEntity.ChangeSavePhotosEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008C3F0);
  }
  return result;
}

unint64_t sub_100023988()
{
  unint64_t result;

  result = qword_10008C3F8;
  if (!qword_10008C3F8)
  {
    result = swift_getWitnessTable(&unk_100069BB4, &type metadata for SavePhotosEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C3F8);
  }
  return result;
}

uint64_t sub_1000239CC()
{
  uint64_t v0;

  v0 = qword_10008C3B0;
  swift_bridgeObjectRetain(off_10008C3B8);
  return v0;
}

unint64_t sub_100023A04()
{
  unint64_t result;

  result = qword_10008C400;
  if (!qword_10008C400)
  {
    result = swift_getWitnessTable(&unk_1000699EC, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C400);
  }
  return result;
}

uint64_t sub_100023A48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000238F8();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD000000000000050, 0x800000010006C750, a1, v2);
}

unint64_t sub_100023A94()
{
  unint64_t result;

  result = qword_10008C408;
  if (!qword_10008C408)
  {
    result = swift_getWitnessTable(&unk_100069A14, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C408);
  }
  return result;
}

unint64_t sub_100023ADC()
{
  unint64_t result;

  result = qword_10008C410;
  if (!qword_10008C410)
  {
    result = swift_getWitnessTable(&unk_100069A4C, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C410);
  }
  return result;
}

unint64_t sub_100023B24()
{
  unint64_t result;

  result = qword_10008C418;
  if (!qword_10008C418)
  {
    result = swift_getWitnessTable(&unk_100069A7C, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C418);
  }
  return result;
}

unint64_t sub_100023B6C()
{
  unint64_t result;

  result = qword_10008C420;
  if (!qword_10008C420)
  {
    result = swift_getWitnessTable(&unk_100069C2C, &type metadata for SavePhotosEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C420);
  }
  return result;
}

uint64_t sub_100023BB0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100024A94();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_100023BFC()
{
  unint64_t result;

  result = qword_10008C430;
  if (!qword_10008C430)
  {
    result = swift_getWitnessTable(&unk_100069AB4, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C430);
  }
  return result;
}

unint64_t sub_100023C44()
{
  unint64_t result;

  result = qword_10008C438;
  if (!qword_10008C438)
  {
    result = swift_getWitnessTable(&unk_100069ADC, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C438);
  }
  return result;
}

unint64_t sub_100023C8C()
{
  unint64_t result;

  result = qword_10008C440;
  if (!qword_10008C440)
  {
    result = swift_getWitnessTable(&unk_100069B04, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C440);
  }
  return result;
}

unint64_t sub_100023CD4()
{
  unint64_t result;

  result = qword_10008C448;
  if (!qword_10008C448)
  {
    result = swift_getWitnessTable(&unk_100069B5C, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C448);
  }
  return result;
}

uint64_t sub_100023D18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100023EAC();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100023D54@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0D0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100099488, (uint64_t)sub_100022E20, a1);
}

uint64_t sub_100023D78()
{
  return sub_10000CC08(&qword_10008C450, &qword_10008C458, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100023DA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000238F8();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100023DE0()
{
  unint64_t result;

  result = qword_10008C460;
  if (!qword_10008C460)
  {
    result = swift_getWitnessTable(&unk_100069B8C, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C460);
  }
  return result;
}

uint64_t sub_100023E28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100023CD4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100023E64()
{
  unint64_t result;

  result = qword_10008C468;
  if (!qword_10008C468)
  {
    result = swift_getWitnessTable(&unk_100069BF4, &type metadata for SavePhotosEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C468);
  }
  return result;
}

unint64_t sub_100023EAC()
{
  unint64_t result;

  result = qword_10008C470[0];
  if (!qword_10008C470[0])
  {
    result = swift_getWitnessTable(&unk_1000698FC, &type metadata for SavePhotosEntity);
    atomic_store(result, qword_10008C470);
  }
  return result;
}

uint64_t sub_100023EF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_10008C518 + dword_10008C518);
  v2 = (_QWORD *)swift_task_alloc(unk_10008C51C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100014DC4;
  return v4();
}

uint64_t sub_100023F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100023988();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100023FB8()
{
  unint64_t result;

  result = qword_10008C488;
  if (!qword_10008C488)
  {
    result = swift_getWitnessTable(&unk_100069C84, &type metadata for SavePhotosEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C488);
  }
  return result;
}

unint64_t sub_100024000()
{
  unint64_t result;

  result = qword_10008C490[0];
  if (!qword_10008C490[0])
  {
    result = swift_getWitnessTable(&unk_100069CE4, &type metadata for SavePhotosEntityQuery);
    atomic_store(result, qword_10008C490);
  }
  return result;
}

uint64_t sub_100024044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100023988();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_1000240B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100023988();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10002411C()
{
  unint64_t result;

  result = qword_10008C4A8;
  if (!qword_10008C4A8)
  {
    result = swift_getWitnessTable(&unk_100069D0C, &type metadata for SavePhotosEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C4A8);
  }
  return result;
}

unint64_t sub_100024164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C4B0;
  if (!qword_10008C4B0)
  {
    v1 = sub_10000AE50(qword_10008C4B8);
    sub_100023C8C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008C4B0);
  }
  return result;
}

uint64_t sub_1000241C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100023B6C();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_100024238()
{
  unint64_t result;

  result = qword_10008C4D0;
  if (!qword_10008C4D0)
  {
    result = swift_getWitnessTable(&unk_100069DF8, &type metadata for OpenSavePhotosDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C4D0);
  }
  return result;
}

uint64_t sub_10002427C()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_1000994A0);
  sub_100010130(v0, (uint64_t)qword_1000994A0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, 0x800000010006C6C0);
}

unint64_t sub_1000242E0()
{
  unint64_t result;

  result = qword_10008C4D8;
  if (!qword_10008C4D8)
  {
    result = swift_getWitnessTable(&unk_100069E20, &type metadata for OpenSavePhotosDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C4D8);
  }
  return result;
}

uint64_t sub_100024324(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100024A0C();
  v5 = sub_100024A94();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100024378()
{
  uint64_t v0;

  v0 = qword_10008C3C0;
  swift_bridgeObjectRetain(off_10008C3C8);
  return v0;
}

unint64_t sub_1000243B0()
{
  unint64_t result;

  result = qword_10008C4E0;
  if (!qword_10008C4E0)
  {
    result = swift_getWitnessTable(&unk_100069EB0, &type metadata for OpenSavePhotosDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C4E0);
  }
  return result;
}

unint64_t sub_1000243F8()
{
  unint64_t result;

  result = qword_10008C4E8;
  if (!qword_10008C4E8)
  {
    result = swift_getWitnessTable(&unk_100069ED8, &type metadata for OpenSavePhotosDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C4E8);
  }
  return result;
}

uint64_t sub_10002443C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000242E0();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10002447C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0D8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000994A0, (uint64_t)sub_10002427C, a1);
}

uint64_t sub_1000244A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100024A0C();
  v7 = sub_100024A50();
  v8 = sub_100024A94();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10002452C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100024804();
  *a1 = result;
  return result;
}

uint64_t sub_100024550(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000242E0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenSavePhotosDeepLink()
{
  return &type metadata for OpenSavePhotosDeepLink;
}

ValueMetadata *type metadata accessor for SavePhotosEntityQuery()
{
  return &type metadata for SavePhotosEntityQuery;
}

ValueMetadata *type metadata accessor for SavePhotosEntity()
{
  return &type metadata for SavePhotosEntity;
}

ValueMetadata *type metadata accessor for SavePhotosEntity.ChangeSavePhotosEntityHandler()
{
  return &type metadata for SavePhotosEntity.ChangeSavePhotosEntityHandler;
}

uint64_t sub_1000245B8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000245D0, 0, 0);
}

uint64_t sub_1000245D0()
{
  uint64_t v0;
  _BYTE *v1;
  void *v2;
  NSString v3;

  v1 = *(_BYTE **)(v0 + 16);
  v2 = (void *)objc_opt_self(ICSettingsUtilities);
  v3 = String._bridgeToObjectiveC()();
  LOBYTE(v2) = objc_msgSend(v2, "BOOLForKey:", v3);

  *v1 = (_BYTE)v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024658(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100024674, 0, 0);
}

uint64_t sub_100024674()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = (void *)objc_opt_self(ICSettingsUtilities);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setBool:forKey:", v1, v3);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000246F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v0 + 16) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002474C, 0, 0);
}

uint64_t sub_10002474C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_100009F30(&qword_10008C520);
  LocalizedStringResource.init(stringLiteral:)(0x206F742065766153, 0xEE00736F746F6850);
  v2 = sub_10000CC08(&qword_10008C538, &qword_10008C540, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v3 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v1, &unk_10008C528, 0, &unk_10008C530, 0, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_100024804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008C4F8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x800000010006C6A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_1000238F8();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_100024A0C()
{
  unint64_t result;

  result = qword_10008C500;
  if (!qword_10008C500)
  {
    result = swift_getWitnessTable(&unk_100069D28, &type metadata for OpenSavePhotosDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C500);
  }
  return result;
}

unint64_t sub_100024A50()
{
  unint64_t result;

  result = qword_10008C508;
  if (!qword_10008C508)
  {
    result = swift_getWitnessTable(&unk_100069D78, &type metadata for OpenSavePhotosDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C508);
  }
  return result;
}

unint64_t sub_100024A94()
{
  unint64_t result;

  result = qword_10008C510;
  if (!qword_10008C510)
  {
    result = swift_getWitnessTable(&unk_10006995C, &type metadata for SavePhotosEntity);
    atomic_store(result, (unint64_t *)&qword_10008C510);
  }
  return result;
}

uint64_t sub_100024AD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100024B04()
{
  unint64_t result;

  result = qword_10008C578;
  if (!qword_10008C578)
  {
    result = swift_getWitnessTable(&unk_100069FF0, &type metadata for MentionNotificationsEntity.ChangeMentionNotificationsEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008C578);
  }
  return result;
}

unint64_t sub_100024B4C()
{
  unint64_t result;

  result = qword_10008C580;
  if (!qword_10008C580)
  {
    result = swift_getWitnessTable(&unk_10006A00C, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C580);
  }
  return result;
}

uint64_t sub_100024B90()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100010B60(v16, qword_1000994B8);
  sub_100010130(v16, (uint64_t)qword_1000994B8);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x800000010006C800);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Device Expert Type Display Representation", 41, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_100024DA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v42 = a1;
  v1 = sub_100009F30(&qword_10008B870);
  __chkstk_darwin(v1);
  v40 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v41 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v39 = (char *)&v39 - v19;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x800000010006C800);
  static Locale.current.getter(v20);
  v21 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v22(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation title", 42, 2);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE007365746F4E20);
  static Locale.current.getter(v23);
  v22(v8, v21, v5);
  v24 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation subtitle", 45, 2);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  v26 = (id)ICNotesAppBundleIdentifier(v25);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = v40;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(v27, v29);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v32 = v30;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  v33 = sub_100009F30(&qword_10008B878);
  v34 = swift_allocObject(v33, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000659F0;
  v35 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x800000010006C820);
  static Locale.current.getter(v35);
  v22(v8, v21, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert synonym", 21, 2);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000039, 0x800000010006C840);
  static Locale.current.getter(v36);
  v22(v8, v21, v5);
  v37 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Device Expert display representation description", 48, 2);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v39, v43, v32, v34, v37);
}

uint64_t sub_1000251D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a1;
  v3[4] = a3;
  v4 = type metadata accessor for LocalizedStringResource(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008BA48);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100025258, 0, 0);
}

uint64_t sub_100025258()
{
  _QWORD *v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10006A6E8);
  v0[9] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to _AppEntityUpdate.value<A>(of:)[1]);
  v0[10] = v2;
  v3 = sub_100009F30(&qword_10008C6F8);
  v4 = sub_10000CC08(&qword_10008C6D8, &qword_10008C6E0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v0[11] = v4;
  *v2 = v0;
  v2[1] = sub_100025304;
  return _AppEntityUpdate.value<A>(of:)(v0[8], KeyPath, v3, v4);
}

uint64_t sub_100025304()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_100025360, 0, 0);
}

uint64_t sub_100025360()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 88))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48)) == enum case for _IntentValueState.set<A>(_:))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(char **)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 56) + 96))(v2, *(_QWORD *)(v0 + 48));
    v4 = *v2;
    sub_100009F30(&qword_10008C6C0);
    LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x800000010006C800);
    *(_QWORD *)(v0 + 16) = _UpdatableEntityProperty<>.init(title:_get:_set:)(v3, &unk_10008C6C8, 0, &unk_10008C6D0, 0, v1);
    *(_BYTE *)(v0 + 120) = v4;
    KeyPath = swift_getKeyPath(&unk_10006A6E8);
    *(_QWORD *)(v0 + 96) = KeyPath;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppEntity._setValue<A>(_:for:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_1000254F8;
    return AppEntity._setValue<A>(_:for:)(v0 + 120, KeyPath, *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v8 = type metadata accessor for _PrebuiltAppIntentError(0);
    v9 = sub_100014D78();
    swift_allocError(v8, v9, 0, 0);
    v10 = static _UnrecoverableError.unknownError.getter();
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000254F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100012060;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v6);
    v5 = sub_100025584;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100025584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_100024B4C();
  static _AppEntityUpdateResult.success.getter(&type metadata for MentionNotificationsEntity, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000255EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(dword_10008C6F4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000120F8;
  return sub_1000251D4(a1, v7, a3);
}

unint64_t sub_100025648()
{
  unint64_t result;

  result = qword_10008C590;
  if (!qword_10008C590)
  {
    result = swift_getWitnessTable(&unk_10006A0E4, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C590);
  }
  return result;
}

unint64_t sub_100025690()
{
  unint64_t result;

  result = qword_10008C598;
  if (!qword_10008C598)
  {
    result = swift_getWitnessTable(&unk_100069FB0, &type metadata for MentionNotificationsEntity.ChangeMentionNotificationsEntityHandler);
    atomic_store(result, (unint64_t *)&qword_10008C598);
  }
  return result;
}

unint64_t sub_1000256D8()
{
  unint64_t result;

  result = qword_10008C5A0;
  if (!qword_10008C5A0)
  {
    result = swift_getWitnessTable(&unk_10006A304, &type metadata for MentionNotificationsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C5A0);
  }
  return result;
}

uint64_t sub_10002571C()
{
  uint64_t v0;

  v0 = qword_10008C558;
  swift_bridgeObjectRetain(off_10008C560);
  return v0;
}

unint64_t sub_100025754()
{
  unint64_t result;

  result = qword_10008C5A8;
  if (!qword_10008C5A8)
  {
    result = swift_getWitnessTable(&unk_10006A13C, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C5A8);
  }
  return result;
}

uint64_t sub_100025798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100025648();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD000000000000059, 0x800000010006C880, a1, v2);
}

unint64_t sub_1000257E4()
{
  unint64_t result;

  result = qword_10008C5B0;
  if (!qword_10008C5B0)
  {
    result = swift_getWitnessTable(&unk_10006A164, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C5B0);
  }
  return result;
}

unint64_t sub_10002582C()
{
  unint64_t result;

  result = qword_10008C5B8;
  if (!qword_10008C5B8)
  {
    result = swift_getWitnessTable(&unk_10006A19C, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C5B8);
  }
  return result;
}

unint64_t sub_100025874()
{
  unint64_t result;

  result = qword_10008C5C0;
  if (!qword_10008C5C0)
  {
    result = swift_getWitnessTable(&unk_10006A1CC, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C5C0);
  }
  return result;
}

unint64_t sub_1000258BC()
{
  unint64_t result;

  result = qword_10008C5C8;
  if (!qword_10008C5C8)
  {
    result = swift_getWitnessTable(&unk_10006A37C, &type metadata for MentionNotificationsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C5C8);
  }
  return result;
}

uint64_t sub_100025900(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100026B8C();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_100014D3C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_10002594C()
{
  unint64_t result;

  result = qword_10008C5D8;
  if (!qword_10008C5D8)
  {
    result = swift_getWitnessTable(&unk_10006A204, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C5D8);
  }
  return result;
}

unint64_t sub_100025994()
{
  unint64_t result;

  result = qword_10008C5E0;
  if (!qword_10008C5E0)
  {
    result = swift_getWitnessTable(&unk_10006A22C, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C5E0);
  }
  return result;
}

unint64_t sub_1000259DC()
{
  unint64_t result;

  result = qword_10008C5E8;
  if (!qword_10008C5E8)
  {
    result = swift_getWitnessTable(&unk_10006A254, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C5E8);
  }
  return result;
}

unint64_t sub_100025A24()
{
  unint64_t result;

  result = qword_10008C5F0;
  if (!qword_10008C5F0)
  {
    result = swift_getWitnessTable(&unk_10006A2AC, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C5F0);
  }
  return result;
}

uint64_t sub_100025A68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100025BFC();
  result = _UniqueEntity.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100025AA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0E0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000994B8, (uint64_t)sub_100024B90, a1);
}

uint64_t sub_100025AC8()
{
  return sub_10000CC08(&qword_10008C5F8, &qword_10008C600, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100025AF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100025648();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100025B30()
{
  unint64_t result;

  result = qword_10008C608;
  if (!qword_10008C608)
  {
    result = swift_getWitnessTable(&unk_10006A2DC, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C608);
  }
  return result;
}

uint64_t sub_100025B78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100025A24();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100025BB4()
{
  unint64_t result;

  result = qword_10008C610;
  if (!qword_10008C610)
  {
    result = swift_getWitnessTable(&unk_10006A344, &type metadata for MentionNotificationsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C610);
  }
  return result;
}

unint64_t sub_100025BFC()
{
  unint64_t result;

  result = qword_10008C618[0];
  if (!qword_10008C618[0])
  {
    result = swift_getWitnessTable(&unk_10006A04C, &type metadata for MentionNotificationsEntity);
    atomic_store(result, qword_10008C618);
  }
  return result;
}

uint64_t sub_100025C40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100025C98, 0, 0);
}

uint64_t sub_100025C98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_100009F30(&qword_10008C6C0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x800000010006C800);
  v3 = sub_10000CC08(&qword_10008C6D8, &qword_10008C6E0, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v2 = _UpdatableEntityProperty<>.init(title:_get:_set:)(v1, &unk_10008C6C8, 0, &unk_10008C6D0, 0, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100025D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000256D8();
  *v4 = v2;
  v4[1] = sub_100013298;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_100025DB8()
{
  unint64_t result;

  result = qword_10008C630;
  if (!qword_10008C630)
  {
    result = swift_getWitnessTable(&unk_10006A3D4, &type metadata for MentionNotificationsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C630);
  }
  return result;
}

unint64_t sub_100025E00()
{
  unint64_t result;

  result = qword_10008C638[0];
  if (!qword_10008C638[0])
  {
    result = swift_getWitnessTable(&unk_10006A434, &type metadata for MentionNotificationsEntityQuery);
    atomic_store(result, qword_10008C638);
  }
  return result;
}

uint64_t sub_100025E44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000256D8();
  *v5 = v2;
  v5[1] = sub_100013364;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100025EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000256D8();
  *v4 = v2;
  v4[1] = sub_100014DC4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100025F1C()
{
  unint64_t result;

  result = qword_10008C650;
  if (!qword_10008C650)
  {
    result = swift_getWitnessTable(&unk_10006A45C, &type metadata for MentionNotificationsEntityQuery);
    atomic_store(result, (unint64_t *)&qword_10008C650);
  }
  return result;
}

unint64_t sub_100025F64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C658;
  if (!qword_10008C658)
  {
    v1 = sub_10000AE50(qword_10008C660);
    sub_1000259DC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008C658);
  }
  return result;
}

uint64_t sub_100025FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000258BC();
  *v5 = v2;
  v5[1] = sub_100014DC0;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_100026038()
{
  unint64_t result;

  result = qword_10008C678;
  if (!qword_10008C678)
  {
    result = swift_getWitnessTable(&unk_10006A548, &type metadata for OpenMentionNotificationsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C678);
  }
  return result;
}

uint64_t sub_10002607C()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v0, qword_1000994D0);
  sub_100010130(v0, (uint64_t)qword_1000994D0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000022, 0x800000010006C7D0);
}

unint64_t sub_1000260E0()
{
  unint64_t result;

  result = qword_10008C680;
  if (!qword_10008C680)
  {
    result = swift_getWitnessTable(&unk_10006A570, &type metadata for OpenMentionNotificationsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C680);
  }
  return result;
}

uint64_t sub_100026124(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100026B04();
  v5 = sub_100026B8C();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100026178()
{
  uint64_t v0;

  v0 = qword_10008C568;
  swift_bridgeObjectRetain(off_10008C570);
  return v0;
}

unint64_t sub_1000261B0()
{
  unint64_t result;

  result = qword_10008C688;
  if (!qword_10008C688)
  {
    result = swift_getWitnessTable(&unk_10006A600, &type metadata for OpenMentionNotificationsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C688);
  }
  return result;
}

unint64_t sub_1000261F8()
{
  unint64_t result;

  result = qword_10008C690;
  if (!qword_10008C690)
  {
    result = swift_getWitnessTable(&unk_10006A628, &type metadata for OpenMentionNotificationsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C690);
  }
  return result;
}

uint64_t sub_10002623C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000260E0();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10002627C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013704(&qword_10008B0E8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000994D0, (uint64_t)sub_10002607C, a1);
}

uint64_t sub_1000262A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100026B04();
  v7 = sub_100026B48();
  v8 = sub_100026B8C();
  *v5 = v2;
  v5[1] = sub_10001381C;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10002632C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000268FC();
  *a1 = result;
  return result;
}

uint64_t sub_100026350(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000260E0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenMentionNotificationsDeepLink()
{
  return &type metadata for OpenMentionNotificationsDeepLink;
}

ValueMetadata *type metadata accessor for MentionNotificationsEntityQuery()
{
  return &type metadata for MentionNotificationsEntityQuery;
}

ValueMetadata *type metadata accessor for MentionNotificationsEntity()
{
  return &type metadata for MentionNotificationsEntity;
}

ValueMetadata *type metadata accessor for MentionNotificationsEntity.ChangeMentionNotificationsEntityHandler()
{
  return &type metadata for MentionNotificationsEntity.ChangeMentionNotificationsEntityHandler;
}

uint64_t sub_1000263B8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  return swift_task_switch(sub_1000263D0, 0, 0);
}

uint64_t sub_1000263D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 56) = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100026438, v2, v3);
}

uint64_t sub_100026438()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(v0[7]);
  if (qword_10008B108 != -1)
    swift_once(&qword_10008B108, sub_100037600);
  v1 = sub_100009F30(&qword_10008C6E8);
  v2 = sub_100010130(v1, (uint64_t)qword_10008CE00);
  swift_beginAccess(v2, v0 + 2, 33, 0);
  RetryingLazy.wrappedValue.getter(v1);
  v0[8] = v0[5];
  swift_endAccess(v0 + 2);
  return swift_task_switch(sub_1000264FC, 0, 0);
}

uint64_t sub_1000264FC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  unsigned __int8 v6;

  v1 = *(void **)(v0 + 64);
  if (!v1)
    goto LABEL_5;
  v2 = (void *)objc_opt_self(ICAccount);
  v3 = objc_msgSend(v1, "managedObjectContext");
  v4 = objc_msgSend(v2, "defaultAccountInContext:", v3);

  if (!v4)
  {

LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5 = objc_msgSend((id)objc_opt_self(ICCloudNotificationsController), "sharedController");
  v6 = objc_msgSend(v5, "isSubscribedToMentionNotificationsForAccount:", v4);

LABEL_6:
  **(_BYTE **)(v0 + 48) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000265E4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 88) = *a2;
  return swift_task_switch(sub_100026600, 0, 0);
}

uint64_t sub_100026600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 72) = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100026668, v2, v3);
}

uint64_t sub_100026668()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(v0[9]);
  if (qword_10008B108 != -1)
    swift_once(&qword_10008B108, sub_100037600);
  v1 = sub_100009F30(&qword_10008C6E8);
  v2 = sub_100010130(v1, (uint64_t)qword_10008CE00);
  swift_beginAccess(v2, v0 + 2, 33, 0);
  RetryingLazy.wrappedValue.getter(v1);
  v0[10] = v0[8];
  swift_endAccess(v0 + 2);
  return swift_task_switch(sub_10002672C, 0, 0);
}

uint64_t sub_10002672C()
{
  uint64_t v0;
  void *v1;
  char v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(_BYTE *)(v0 + 88);
    v3 = objc_msgSend(*(id *)(v0 + 80), "managedObjectContext");
    v4 = swift_allocObject(&unk_1000846A0, 25, 7);
    *(_QWORD *)(v4 + 16) = v1;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_BYTE *)(v4 + 24) = v2;
    *(_QWORD *)(v0 + 48) = sub_100026BF4;
    *(_QWORD *)(v0 + 56) = v4;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_100037A7C;
    *(_QWORD *)(v0 + 40) = &unk_1000846B8;
    v5 = _Block_copy((const void *)(v0 + 16));
    v6 = *(_QWORD *)(v0 + 56);
    v7 = v1;
    swift_release(v6);
    objc_msgSend(v3, "performBlock:", v5);
    _Block_release(v5);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100026824(void *a1, char a2)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = (void *)objc_opt_self(ICAccount);
  v5 = objc_msgSend(a1, "managedObjectContext");
  v6 = objc_msgSend(v4, "defaultAccountInContext:", v5);

  if (v6)
  {
    v7 = objc_msgSend((id)objc_opt_self(ICCloudNotificationsController), "sharedController");
    objc_msgSend(v7, "updateSubscriptionPreferenceForMentionNotifications:forAccount:", a2 & 1, v6);

  }
}

uint64_t sub_1000268FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008B800);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_100009F30(&qword_10008B808);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F30(&qword_10008C6A0);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001DLL, 0x800000010006C7B0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100025648();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, &v22, v9, v7, v3, v19);
}

unint64_t sub_100026B04()
{
  unint64_t result;

  result = qword_10008C6A8;
  if (!qword_10008C6A8)
  {
    result = swift_getWitnessTable(&unk_10006A478, &type metadata for OpenMentionNotificationsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C6A8);
  }
  return result;
}

unint64_t sub_100026B48()
{
  unint64_t result;

  result = qword_10008C6B0;
  if (!qword_10008C6B0)
  {
    result = swift_getWitnessTable(&unk_10006A4C8, &type metadata for OpenMentionNotificationsDeepLink);
    atomic_store(result, (unint64_t *)&qword_10008C6B0);
  }
  return result;
}

unint64_t sub_100026B8C()
{
  unint64_t result;

  result = qword_10008C6B8;
  if (!qword_10008C6B8)
  {
    result = swift_getWitnessTable(&unk_10006A0AC, &type metadata for MentionNotificationsEntity);
    atomic_store(result, (unint64_t *)&qword_10008C6B8);
  }
  return result;
}

uint64_t sub_100026BD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_100026BF4()
{
  uint64_t v0;

  sub_100026824(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100026C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100026C10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100026C18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UpdatableEntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for TelephonyUtilitiesFeature(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for TelephonyUtilitiesFeature()
{
  return &type metadata for TelephonyUtilitiesFeature;
}

ValueMetadata *type metadata accessor for GreyParrotFeature()
{
  return &type metadata for GreyParrotFeature;
}

ValueMetadata *type metadata accessor for SiriSMARTFeature()
{
  return &type metadata for SiriSMARTFeature;
}

ValueMetadata *type metadata accessor for UniquelyiPadFeature()
{
  return &type metadata for UniquelyiPadFeature;
}

uint64_t getEnumTagSinglePayload for NotesFeature(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NotesFeature(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NotesFeature()
{
  return &type metadata for NotesFeature;
}

uint64_t sub_100026CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String v8;
  Swift::String v9;
  void *object;
  uint64_t v12;

  v12 = StaticString.description.getter(a4, a5, 2);
  v8._countAndFlagsBits = 47;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = StaticString.description.getter(a1, a2, a3);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  return v12;
}

const char *sub_100026D70()
{
  return "Notes";
}

uint64_t sub_100026D84()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_100026D90()
{
  uint64_t v0;

  return sub_100026CF0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16), (uint64_t)"Notes", 5);
}

uint64_t sub_100026DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027214(a1, a2, a3, (uint64_t (*)(void))sub_100026DCC, (uint64_t (*)(void))sub_100026E10);
}

unint64_t sub_100026DCC()
{
  unint64_t result;

  result = qword_10008C700;
  if (!qword_10008C700)
  {
    result = swift_getWitnessTable(&unk_10006A9C8, &type metadata for NotesFeature);
    atomic_store(result, (unint64_t *)&qword_10008C700);
  }
  return result;
}

unint64_t sub_100026E10()
{
  unint64_t result;

  result = qword_10008C708;
  if (!qword_10008C708)
  {
    result = swift_getWitnessTable(&unk_10006A7B4, &type metadata for NotesFeature);
    atomic_store(result, (unint64_t *)&qword_10008C708);
  }
  return result;
}

const char *sub_100026E54()
{
  return "PencilAndPaper";
}

uint64_t sub_100026E68()
{
  uint64_t v0;

  return sub_100026CF0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16), (uint64_t)"PencilAndPaper", 14);
}

const char *sub_100026E90()
{
  return "TelephonyUtilities";
}

uint64_t sub_100026EA4()
{
  uint64_t v0;

  return sub_100026CF0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16), (uint64_t)"TelephonyUtilities", 18);
}

const char *sub_100026ECC()
{
  return "GreyParrot";
}

uint64_t sub_100026EE0()
{
  uint64_t v0;

  return sub_100026CF0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16), (uint64_t)"GreyParrot", 10);
}

const char *sub_100026F08()
{
  return "ResponseFramework";
}

uint64_t sub_100026F1C()
{
  uint64_t v0;

  return sub_100026CF0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16), (uint64_t)"ResponseFramework", 17);
}

const char *sub_100026F44()
{
  return "UIKit";
}

uint64_t sub_100026F58()
{
  uint64_t v0;

  return sub_100026CF0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16), (uint64_t)"UIKit", 5);
}

uint64_t sub_100026F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027214(a1, a2, a3, (uint64_t (*)(void))sub_100026F94, (uint64_t (*)(void))sub_100026FD8);
}

unint64_t sub_100026F94()
{
  unint64_t result;

  result = qword_10008C710;
  if (!qword_10008C710)
  {
    result = swift_getWitnessTable(&unk_10006A998, &type metadata for UniquelyiPadFeature);
    atomic_store(result, (unint64_t *)&qword_10008C710);
  }
  return result;
}

unint64_t sub_100026FD8()
{
  unint64_t result;

  result = qword_10008C718;
  if (!qword_10008C718)
  {
    result = swift_getWitnessTable(&unk_10006A7F8, &type metadata for UniquelyiPadFeature);
    atomic_store(result, (unint64_t *)&qword_10008C718);
  }
  return result;
}

uint64_t sub_10002701C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027214(a1, a2, a3, (uint64_t (*)(void))sub_100027030, (uint64_t (*)(void))sub_100027074);
}

unint64_t sub_100027030()
{
  unint64_t result;

  result = qword_10008C720;
  if (!qword_10008C720)
  {
    result = swift_getWitnessTable(&unk_10006A968, &type metadata for SiriSMARTFeature);
    atomic_store(result, (unint64_t *)&qword_10008C720);
  }
  return result;
}

unint64_t sub_100027074()
{
  unint64_t result;

  result = qword_10008C728;
  if (!qword_10008C728)
  {
    result = swift_getWitnessTable(&unk_10006A83C, &type metadata for SiriSMARTFeature);
    atomic_store(result, (unint64_t *)&qword_10008C728);
  }
  return result;
}

uint64_t sub_1000270B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027214(a1, a2, a3, (uint64_t (*)(void))sub_1000270CC, (uint64_t (*)(void))sub_100027110);
}

unint64_t sub_1000270CC()
{
  unint64_t result;

  result = qword_10008C730;
  if (!qword_10008C730)
  {
    result = swift_getWitnessTable(&unk_10006A938, &type metadata for GreyParrotFeature);
    atomic_store(result, (unint64_t *)&qword_10008C730);
  }
  return result;
}

unint64_t sub_100027110()
{
  unint64_t result;

  result = qword_10008C738;
  if (!qword_10008C738)
  {
    result = swift_getWitnessTable(&unk_10006A880, &type metadata for GreyParrotFeature);
    atomic_store(result, (unint64_t *)&qword_10008C738);
  }
  return result;
}

uint64_t sub_100027154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027214(a1, a2, a3, (uint64_t (*)(void))sub_100027168, (uint64_t (*)(void))sub_1000271AC);
}

unint64_t sub_100027168()
{
  unint64_t result;

  result = qword_10008C740;
  if (!qword_10008C740)
  {
    result = swift_getWitnessTable(&unk_10006A908, &type metadata for TelephonyUtilitiesFeature);
    atomic_store(result, (unint64_t *)&qword_10008C740);
  }
  return result;
}

unint64_t sub_1000271AC()
{
  unint64_t result;

  result = qword_10008C748;
  if (!qword_10008C748)
  {
    result = swift_getWitnessTable(&unk_10006A8C4, &type metadata for TelephonyUtilitiesFeature);
    atomic_store(result, (unint64_t *)&qword_10008C748);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilAndPaperFeature()
{
  return &type metadata for PencilAndPaperFeature;
}

uint64_t sub_100027200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027214(a1, a2, a3, (uint64_t (*)(void))sub_10000AD68, (uint64_t (*)(void))sub_100027244);
}

uint64_t sub_100027214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100027244()
{
  unint64_t result;

  result = qword_10008C750;
  if (!qword_10008C750)
  {
    result = swift_getWitnessTable(&unk_10006AA18, &type metadata for PencilAndPaperFeature);
    atomic_store(result, (unint64_t *)&qword_10008C750);
  }
  return result;
}

ValueMetadata *type metadata accessor for NoteWidget()
{
  return &type metadata for NoteWidget;
}

uint64_t sub_1000272A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F560, 1);
}

uint64_t sub_1000272B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_10000C5FC(&qword_10008C7A8, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_100027314@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_10000C5FC(&qword_10008C7A8, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

uint64_t sub_100027388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v55 = a1;
  v1 = sub_100009F30(&qword_10008C758);
  v49 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008C760);
  v5 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v52 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008C768);
  v9 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  v54 = v9;
  __chkstk_darwin(v8);
  v50 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICWidgetKindNote);
  v13 = v12;
  v14 = sub_100027920();
  v15 = type metadata accessor for NoteTimelineProvider();
  v56 = swift_allocObject(v15, 16, 7);
  v16 = type metadata accessor for NoteWidgetView(0);
  v17 = sub_10000C5FC(&qword_10008C778, type metadata accessor for NoteWidgetView, (uint64_t)&unk_10006ADE0);
  v18 = sub_10000C5FC(&qword_10008C780, (uint64_t (*)(uint64_t))type metadata accessor for NoteTimelineProvider, (uint64_t)&unk_10006B208);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(v11, v13, v14, &v56, sub_100027784, 0, v14, v16, v15, v17, v18);
  v19 = sub_100009F30(&qword_10008C788);
  v20 = type metadata accessor for WidgetFamily(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v19, v23 + *(_QWORD *)(v21 + 72), v22 | 7);
  *(_OWORD *)(v24 + 16) = xmmword_1000659F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v24 + v23, enum case for WidgetFamily.systemSmall(_:), v20);
  v25 = sub_10002795C();
  WidgetConfiguration.supportedFamilies(_:)(v24, v1, v25);
  swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v3, v1);
  v26 = LocalizedStringKey.init(stringLiteral:)(1702129486, 0xE400000000000000);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v56 = v1;
  v57 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v36 = v50;
  v35 = v51;
  WidgetConfiguration.configurationDisplayName(_:)(v27, v29, v33, v31, v51, OpaqueTypeConformance2);
  sub_10000AFA4(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  v37 = v35;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v35);
  v38 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000026, 0x800000010006C960);
  v39 = Text.init(_:tableName:bundle:comment:)(v38);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  v56 = v37;
  v57 = OpaqueTypeConformance2;
  v46 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v47 = v53;
  WidgetConfiguration.description(_:)(v39, v41, v45, v43, v53, v46);
  sub_10000AFA4(v39, v41, v45);
  swift_bridgeObjectRelease(v43);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v36, v47);
}

uint64_t sub_100027784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  int *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_100009F30(&qword_10008C798);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s5EntryVMa_0(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000279A8(a1, (uint64_t)v12);
  sub_1000279EC((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v9);
  sub_100027A34((uint64_t)v12);
  *v6 = swift_getKeyPath(&unk_10006AAE8);
  v13 = sub_100009F30(&qword_10008C7A0);
  swift_storeEnumTagMultiPayload(v6, v13, 0);
  KeyPath = swift_getKeyPath(&unk_10006AB18);
  sub_10000CC50((uint64_t)v9, a2, &qword_10008B168);
  v15 = (int *)type metadata accessor for NoteWidgetView(0);
  result = sub_10000CC50((uint64_t)v6, a2 + v15[5], &qword_10008C798);
  v17 = a2 + v15[6];
  *(_QWORD *)v17 = KeyPath;
  *(_BYTE *)(v17 + 8) = 0;
  *(_QWORD *)(a2 + v15[7]) = 10;
  return result;
}

unint64_t sub_100027920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C770;
  if (!qword_10008C770)
  {
    v1 = objc_opt_self(ICNoteIntent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008C770);
  }
  return result;
}

unint64_t sub_10002795C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C790;
  if (!qword_10008C790)
  {
    v1 = sub_10000AE50(&qword_10008C758);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C790);
  }
  return result;
}

uint64_t sub_1000279A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s5EntryVMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000279EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008B168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027A34(uint64_t a1)
{
  uint64_t v2;

  v2 = _s5EntryVMa_0(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100027A70()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100027A90()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100027AB0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for WidgetRenderingMode(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.widgetRenderingMode.setter(v3);
}

uint64_t sub_100027B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_10000AE50(&qword_10008C768);
  v1 = sub_10000AE50(&qword_10008C760);
  v5 = sub_10000AE50(&qword_10008C758);
  v6 = sub_10002795C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

__n128 sub_100027BD8()
{
  __n128 result;

  __asm { FMOV            V0.2D, #20.0 }
  xmmword_1000994F0 = (__int128)result;
  return result;
}

ValueMetadata *type metadata accessor for AvatarStack()
{
  return &type metadata for AvatarStack;
}

uint64_t sub_100027BF8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F5C8, 1);
}

uint64_t sub_100027C08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v4 = sub_100009F30(&qword_10008C7B8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v28 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v28 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
    v15 = 0;
  else
    v15 = Image.init(systemName:)(0xD000000000000012, 0x800000010006C9B0);
  v16 = 3;
  if (v14 < 3)
    v16 = v14;
  v17 = (2 * v16) | 1;
  v18 = swift_bridgeObjectRetain(a1);
  v19 = sub_10004DE68(v18, a1 + 32, 0, v17);
  swift_bridgeObjectRelease(a1);
  v29 = v19;
  KeyPath = swift_getKeyPath(&unk_10006ABB8);
  v21 = sub_100009F30(&qword_10008C7C0);
  v22 = sub_10000CC08(&qword_10008C7C8, &qword_10008C7C0, (uint64_t)&protocol conformance descriptor for [A]);
  v23 = sub_100028700();
  ForEach<>.init(_:id:content:)(&v29, KeyPath, sub_100027E2C, 0, v21, &type metadata for AvatarStack.AvatarView, v22, &protocol witness table for Int, v23);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v11, v4);
  v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v24(v8, v13, v4);
  *a2 = v15;
  v25 = sub_100009F30(&qword_10008C7D8);
  v24((char *)a2 + *(int *)(v25 + 48), v8, v4);
  v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_retain(v15);
  v26(v13, v4);
  v26(v8, v4);
  return swift_release(v15);
}

uint64_t sub_100027E2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100027E38@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  *(_QWORD *)a1 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0xC028000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  v4 = sub_100009F30(&qword_10008C7B0);
  return sub_100027C08(v3, (uint64_t *)(a1 + *(int *)(v4 + 44)));
}

uint64_t sub_100027E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[5];

  v103 = a2;
  v3 = type metadata accessor for Font.TextStyle(0);
  v100 = *(_QWORD *)(v3 - 8);
  v101 = v3;
  __chkstk_darwin(v3);
  v98 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008C7F0);
  __chkstk_darwin(v5);
  v93 = (uint64_t *)((char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v89 = type metadata accessor for Image.Scale(0);
  v85 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Image.ResizingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100009F30(&qword_10008C7F8);
  __chkstk_darwin(v84);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100009F30(&qword_10008C800);
  __chkstk_darwin(v86);
  v90 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100009F30(&qword_10008C808);
  __chkstk_darwin(v87);
  v94 = (uint64_t)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100009F30(&qword_10008C810);
  __chkstk_darwin(v88);
  v96 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100009F30(&qword_10008C818);
  __chkstk_darwin(v91);
  v95 = (uint64_t)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100009F30(&qword_10008C820);
  __chkstk_darwin(v92);
  v99 = (uint64_t)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100009F30(&qword_10008C828);
  __chkstk_darwin(v97);
  v102 = (uint64_t)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v9);
  v21 = Image.resizable(capInsets:resizingMode:)(v12, a1, 0.0, 0.0, 0.0, 0.0);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (qword_10008B0F0 != -1)
    v22 = swift_once(&qword_10008B0F0, sub_100027BD8);
  v23 = xmmword_1000994F0;
  v24 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v104, v23, 0, *((_QWORD *)&v23 + 1), 0, v24, v25);
  v83 = v104;
  v82 = v105;
  v81 = v106;
  v26 = v107;
  v27 = v108;
  v28 = v109;
  v29 = v85;
  v30 = v89;
  (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v8, enum case for Image.Scale.large(_:), v89);
  KeyPath = swift_getKeyPath(&unk_10006AC30);
  v32 = *(int *)(v5 + 28);
  v33 = v93;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))((char *)v93 + v32, v8, v30);
  *v33 = KeyPath;
  sub_10000CC94((uint64_t)v33, (uint64_t)&v14[*(int *)(v84 + 36)], &qword_10008C7F0);
  *(_QWORD *)v14 = v21;
  *((_QWORD *)v14 + 1) = 0x3FF0000000000000;
  *((_WORD *)v14 + 8) = 0;
  *((_QWORD *)v14 + 3) = v83;
  v14[32] = v82;
  *((_QWORD *)v14 + 5) = v81;
  v14[48] = v26;
  *((_QWORD *)v14 + 7) = v27;
  *((_QWORD *)v14 + 8) = v28;
  swift_retain(v21);
  sub_10000CCD8((uint64_t)v33, &qword_10008C7F0);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
  swift_release(v21);
  v35 = v100;
  v34 = v101;
  v36 = v98;
  (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v98, enum case for Font.TextStyle.footnote(_:), v101);
  v37 = static Font.systemSingleLineA(_:)(v36);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
  v38 = swift_getKeyPath(&unk_10006AC60);
  v39 = v90;
  sub_10000CC94((uint64_t)v14, v90, &qword_10008C7F8);
  v40 = (uint64_t *)(v39 + *(int *)(v86 + 36));
  *v40 = v38;
  v40[1] = v37;
  v41 = sub_10000CCD8((uint64_t)v14, &qword_10008C7F8);
  v42 = static Color.gray.getter(v41);
  v43 = v94;
  sub_10000CC94(v39, v94, &qword_10008C800);
  *(_QWORD *)(v43 + *(int *)(v87 + 36)) = v42;
  v44 = sub_10000CCD8(v39, &qword_10008C800);
  v45 = static Color.white.getter(v44);
  LOBYTE(v38) = static Edge.Set.all.getter(v45);
  v46 = v96;
  sub_10000CC94(v43, v96, &qword_10008C808);
  v47 = v46 + *(int *)(v88 + 36);
  *(_QWORD *)v47 = v45;
  *(_BYTE *)(v47 + 8) = v38;
  v48 = sub_10000CCD8(v43, &qword_10008C808);
  v49 = static Edge.Set.all.getter(v48);
  LOBYTE(v45) = v49;
  v50.n128_u64[0] = 1.0;
  v51 = EdgeInsets.init(_all:)(v49, v50);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v58 = v95;
  sub_10000CC94(v46, v95, &qword_10008C810);
  v59 = v58 + *(int *)(v91 + 36);
  *(_BYTE *)v59 = v45;
  *(double *)(v59 + 8) = v51;
  *(_QWORD *)(v59 + 16) = v53;
  *(_QWORD *)(v59 + 24) = v55;
  *(_QWORD *)(v59 + 32) = v57;
  *(_BYTE *)(v59 + 40) = 0;
  sub_10000CCD8(v46, &qword_10008C810);
  v60 = v99;
  sub_10000CC94(v58, v99, &qword_10008C818);
  *(_WORD *)(v60 + *(int *)(v92 + 36)) = 256;
  v61 = sub_10000CCD8(v58, &qword_10008C818);
  v62 = static Color.white.getter(v61);
  v63 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v110, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v64 = *(double *)v110;
  v65 = v110[2];
  v66 = v110[3];
  v67 = v110[4];
  v68 = static Alignment.center.getter(v63);
  v70 = v69;
  v71 = static Alignment.center.getter(v68);
  v73 = v72;
  v74 = v102;
  sub_10000CC94(v60, v102, &qword_10008C820);
  v75 = v74 + *(int *)(v97 + 36);
  *(double *)v75 = v64 * 0.5;
  *(double *)(v75 + 8) = v64;
  *(_QWORD *)(v75 + 16) = v110[1];
  *(_QWORD *)(v75 + 24) = v65;
  *(_QWORD *)(v75 + 32) = v66;
  *(_QWORD *)(v75 + 40) = v67;
  *(_QWORD *)(v75 + 48) = v62;
  *(_WORD *)(v75 + 56) = 256;
  *(_QWORD *)(v75 + 64) = v68;
  *(_QWORD *)(v75 + 72) = v70;
  *(_QWORD *)(v75 + 80) = v71;
  *(_QWORD *)(v75 + 88) = v73;
  sub_10000CCD8(v60, &qword_10008C820);
  v76 = Color.init(_:bundle:)(0xD00000000000001BLL, 0x800000010006C9D0, 0);
  v77 = v103;
  sub_10000CC94(v74, v103, &qword_10008C828);
  v78 = v77 + *(int *)(sub_100009F30(&qword_10008C830) + 36);
  *(_QWORD *)v78 = v76;
  *(_OWORD *)(v78 + 8) = xmmword_10006AB40;
  *(_QWORD *)(v78 + 24) = 0x3FF0000000000000;
  return sub_10000CCD8(v74, &qword_10008C828);
}

uint64_t sub_10002867C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100027E84(*v1, a1);
}

uint64_t sub_100028684(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Image.Scale(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.imageScale.setter(v3);
}

unint64_t sub_100028700()
{
  unint64_t result;

  result = qword_10008C7D0;
  if (!qword_10008C7D0)
  {
    result = swift_getWitnessTable(&unk_10006ABE0, &type metadata for AvatarStack.AvatarView);
    atomic_store(result, (unint64_t *)&qword_10008C7D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AvatarStack.AvatarView()
{
  return &type metadata for AvatarStack.AvatarView;
}

uint64_t sub_100028754()
{
  return sub_10000CC08(&qword_10008C7E0, &qword_10008C7E8, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100028780(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F5F0, 1);
}

uint64_t sub_100028790()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000287BC()
{
  return sub_100028918(&qword_10008C838, &qword_10008C830, (void (*)(void))sub_1000287F0);
}

unint64_t sub_1000287F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C840;
  if (!qword_10008C840)
  {
    v1 = sub_10000AE50(&qword_10008C828);
    sub_100028874();
    sub_10000CC08(&qword_10008C8D0, &qword_10008C8D8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C840);
  }
  return result;
}

unint64_t sub_100028874()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C848;
  if (!qword_10008C848)
  {
    v1 = sub_10000AE50(&qword_10008C820);
    sub_100028918(&qword_10008C850, &qword_10008C818, (void (*)(void))sub_100028980);
    sub_10000CC08(&qword_10008C8C0, &qword_10008C8C8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C848);
  }
  return result;
}

uint64_t sub_100028918(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000AE50(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100028980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C858;
  if (!qword_10008C858)
  {
    v1 = sub_10000AE50(&qword_10008C810);
    sub_100028A04();
    sub_10000CC08(&qword_10008C8B0, &qword_10008C8B8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C858);
  }
  return result;
}

unint64_t sub_100028A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C860;
  if (!qword_10008C860)
  {
    v1 = sub_10000AE50(&qword_10008C808);
    sub_100028A88();
    sub_10000CC08(&qword_10008C8A0, &qword_10008C8A8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C860);
  }
  return result;
}

unint64_t sub_100028A88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C868;
  if (!qword_10008C868)
  {
    v1 = sub_10000AE50(&qword_10008C800);
    sub_100028B0C();
    sub_10000CC08(&qword_10008B3E0, &qword_10008B3E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C868);
  }
  return result;
}

unint64_t sub_100028B0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C870;
  if (!qword_10008C870)
  {
    v1 = sub_10000AE50(&qword_10008C7F8);
    sub_100028918(&qword_10008C878, &qword_10008C880, (void (*)(void))sub_100028BB0);
    sub_10000CC08(&qword_10008C898, &qword_10008C7F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C870);
  }
  return result;
}

unint64_t sub_100028BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008C888;
  if (!qword_10008C888)
  {
    v1 = sub_10000AE50(&qword_10008C890);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008C888);
  }
  return result;
}

uint64_t sub_100028C14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100028C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028D54(v2 + *(int *)(a1 + 20), (uint64_t)v7);
  v8 = sub_100009F30(&qword_10008C8E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 2, v8))
  {
    TimelineEntryRelevance.init(score:duration:)(0.0, 0.0);
    v9 = type metadata accessor for TimelineEntryRelevance(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 0, 1, v9);
  }
  else
  {
    v11 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
    return sub_10000CCD8((uint64_t)v7, &qword_10008C8E0);
  }
}

uint64_t sub_100028D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008C8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100028D9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *, _QWORD, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  int *v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = sub_100009F30(&qword_10008C8E8);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 2, v11))
    {
      v13 = sub_100009F30(&qword_10008C8E0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v34 = v12;
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v16 = v10[3];
      v9[2] = v10[2];
      v9[3] = v16;
      *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
      v17 = v10[6];
      v9[5] = v10[5];
      v9[6] = v17;
      v33 = (int *)type metadata accessor for NotesFolder(0);
      v18 = v33[8];
      __dst = (char *)v9 + v18;
      v19 = (char *)v10 + v18;
      v20 = type metadata accessor for URL(0);
      v21 = *(_QWORD *)(v20 - 8);
      v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      if (v32(v19, 1, v20))
      {
        v22 = sub_100009F30(&qword_10008B170);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
      }
      v23 = v33[9];
      v24 = *(_QWORD *)((char *)v10 + v23);
      *(_QWORD *)((char *)v9 + v23) = v24;
      v25 = v33[10];
      v26 = *(_QWORD *)((char *)v10 + v25);
      *(_QWORD *)((char *)v9 + v25) = v26;
      v27 = *(int *)(v11 + 48);
      v28 = *(_QWORD *)((char *)v10 + v27);
      *(_QWORD *)((char *)v9 + v27) = v28;
      v29 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56);
      swift_retain(v24);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v28);
      v29(v9, 0, 2, v11);
    }
  }
  return a1;
}

uint64_t sub_100028FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v6 = sub_100009F30(&qword_10008C8E8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 2, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v5[1]);
    swift_bridgeObjectRelease(v5[3]);
    swift_bridgeObjectRelease(v5[6]);
    v8 = (int *)type metadata accessor for NotesFolder(0);
    v9 = (char *)v5 + v8[8];
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    swift_release(*(_QWORD *)((char *)v5 + v8[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v5 + v8[10]));
    return swift_bridgeObjectRelease(*(_QWORD *)((char *)v5 + *(int *)(v6 + 48)));
  }
  return result;
}

uint64_t sub_1000290E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = sub_100009F30(&qword_10008C8E8);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 2, v10))
  {
    v12 = sub_100009F30(&qword_10008C8E0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v33 = v11;
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    v14 = v9[3];
    v8[2] = v9[2];
    v8[3] = v14;
    *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
    v15 = v9[6];
    v8[5] = v9[5];
    v8[6] = v15;
    v16 = type metadata accessor for NotesFolder(0);
    v17 = *(int *)(v16 + 32);
    __dst = (char *)v8 + v17;
    v32 = v16;
    v18 = (char *)v9 + v17;
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    if (v30(v18, 1, v19))
    {
      v21 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    v22 = *(int *)(v32 + 36);
    v23 = *(_QWORD *)((char *)v9 + v22);
    *(_QWORD *)((char *)v8 + v22) = v23;
    v24 = *(int *)(v32 + 40);
    v25 = *(_QWORD *)((char *)v9 + v24);
    *(_QWORD *)((char *)v8 + v24) = v25;
    v26 = *(int *)(v10 + 48);
    v27 = *(_QWORD *)((char *)v9 + v26);
    *(_QWORD *)((char *)v8 + v26) = v27;
    v28 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56);
    swift_retain(v23);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    v28(v8, 0, 2, v10);
  }
  return a1;
}

uint64_t sub_1000292DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v58)(const void *, uint64_t, uint64_t);
  void *__dst;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100009F30(&qword_10008C8E8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 2, v10);
  v14 = v12(v9, 2, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10000CCD8(v8, &qword_10008C8E8);
      goto LABEL_7;
    }
    v62 = a1;
    *(_QWORD *)v8 = *(_QWORD *)v9;
    v25 = *(_QWORD *)(v9 + 8);
    v26 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
    v27 = *(_QWORD *)(v9 + 24);
    v28 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v28);
    *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
    v29 = *(_QWORD *)(v9 + 48);
    v30 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)(v8 + 48) = v29;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v30);
    v31 = (int *)type metadata accessor for NotesFolder(0);
    v32 = v31[8];
    v33 = (void *)(v8 + v32);
    v34 = (void *)(v9 + v32);
    v35 = type metadata accessor for URL(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37(v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_16:
        v48 = v31[9];
        v49 = *(_QWORD *)(v9 + v48);
        v50 = *(_QWORD *)(v8 + v48);
        *(_QWORD *)(v8 + v48) = v49;
        swift_retain(v49);
        swift_release(v50);
        v51 = v31[10];
        v52 = *(_QWORD *)(v9 + v51);
        v53 = *(_QWORD *)(v8 + v51);
        *(_QWORD *)(v8 + v51) = v52;
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRelease(v53);
        v54 = *(int *)(v10 + 48);
        v55 = *(_QWORD *)(v9 + v54);
        v56 = *(_QWORD *)(v8 + v54);
        *(_QWORD *)(v8 + v54) = v55;
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRelease(v56);
        return v62;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 24))(v33, v34, v35);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
    }
    v47 = sub_100009F30(&qword_10008B170);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v24 = sub_100009F30(&qword_10008C8E0);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v61 = a1;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v15 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v15;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v16 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v8 + 24) = v16;
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  v17 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 48) = v17;
  v18 = type metadata accessor for NotesFolder(0);
  v19 = *(int *)(v18 + 32);
  __dst = (void *)(v8 + v19);
  v60 = v18;
  v20 = (const void *)(v9 + v19);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v58 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  if (v58(v20, 1, v21))
  {
    v23 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(__dst, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
  }
  a1 = v61;
  v40 = *(int *)(v60 + 36);
  v41 = *(_QWORD *)(v9 + v40);
  *(_QWORD *)(v8 + v40) = v41;
  v42 = *(int *)(v60 + 40);
  v43 = *(_QWORD *)(v9 + v42);
  *(_QWORD *)(v8 + v42) = v43;
  v44 = *(int *)(v10 + 48);
  v45 = *(_QWORD *)(v9 + v44);
  *(_QWORD *)(v8 + v44) = v45;
  v46 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56);
  swift_retain(v41);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v45);
  v46(v8, 0, 2, v10);
  return a1;
}

uint64_t sub_1000296B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = sub_100009F30(&qword_10008C8E8);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 2, v10))
  {
    v12 = sub_100009F30(&qword_10008C8E0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
    *(_OWORD *)((char *)v8 + 40) = *(_OWORD *)((char *)v9 + 40);
    v14 = (int *)type metadata accessor for NotesFolder(0);
    v15 = v14[8];
    v16 = (char *)v8 + v15;
    v17 = (char *)v9 + v15;
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_100009F30(&qword_10008B170);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    *(_QWORD *)((char *)v8 + v14[9]) = *(_QWORD *)((char *)v9 + v14[9]);
    *(_QWORD *)((char *)v8 + v14[10]) = *(_QWORD *)((char *)v9 + v14[10]);
    *(_QWORD *)((char *)v8 + *(int *)(v10 + 48)) = *(_QWORD *)((char *)v9 + *(int *)(v10 + 48));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 2, v10);
  }
  return a1;
}

uint64_t sub_10002985C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v46;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100009F30(&qword_10008C8E8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 2, v10);
  v14 = v12(v9, 2, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10000CCD8(v8, &qword_10008C8E8);
      goto LABEL_7;
    }
    v24 = *(_QWORD *)(v9 + 8);
    v25 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_QWORD *)(v8 + 8) = v24;
    swift_bridgeObjectRelease(v25);
    v26 = *(_QWORD *)(v9 + 24);
    v27 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v8 + 24) = v26;
    swift_bridgeObjectRelease(v27);
    *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
    v28 = *(_QWORD *)(v9 + 48);
    v29 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v8 + 48) = v28;
    swift_bridgeObjectRelease(v29);
    v46 = (int *)type metadata accessor for NotesFolder(0);
    v30 = v46[8];
    v31 = (void *)(v8 + v30);
    v32 = (void *)(v9 + v30);
    v33 = type metadata accessor for URL(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
    v36 = v35(v31, 1, v33);
    v37 = v35(v32, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_16:
        v39 = v46[9];
        v40 = *(_QWORD *)(v8 + v39);
        *(_QWORD *)(v8 + v39) = *(_QWORD *)(v9 + v39);
        swift_release(v40);
        v41 = v46[10];
        v42 = *(_QWORD *)(v8 + v41);
        *(_QWORD *)(v8 + v41) = *(_QWORD *)(v9 + v41);
        swift_bridgeObjectRelease(v42);
        v43 = *(int *)(v10 + 48);
        v44 = *(_QWORD *)(v8 + v43);
        *(_QWORD *)(v8 + v43) = *(_QWORD *)(v9 + v43);
        swift_bridgeObjectRelease(v44);
        return a1;
      }
    }
    else
    {
      if (!v37)
      {
        (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    }
    v38 = sub_100009F30(&qword_10008B170);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v23 = sub_100009F30(&qword_10008C8E0);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v15 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v15;
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  v16 = (int *)type metadata accessor for NotesFolder(0);
  v17 = v16[8];
  v18 = (void *)(v8 + v17);
  v19 = (const void *)(v9 + v17);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100009F30(&qword_10008B170);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(v8 + v16[9]) = *(_QWORD *)(v9 + v16[9]);
  *(_QWORD *)(v8 + v16[10]) = *(_QWORD *)(v9 + v16[10]);
  *(_QWORD *)(v8 + *(int *)(v10 + 48)) = *(_QWORD *)(v9 + *(int *)(v10 + 48));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 2, v10);
  return a1;
}

uint64_t sub_100029B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100029B94);
}

uint64_t sub_100029B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100009F30(&qword_10008C8E0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100029C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100029C18);
}

uint64_t sub_100029C18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100009F30(&qword_10008C8E0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t _s5EntryVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_10008C948;
  if (!qword_10008C948)
    return swift_getSingletonMetadata(a1, &_s5EntryVMn);
  return result;
}

void sub_100029CD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100029D58(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_100029D58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_10008C958)
  {
    v2 = sub_10000AE50(&qword_10008C8E8);
    v5 = type metadata accessor for ObjectStates(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_10008C958);
  }
}

uint64_t sub_100029DB0(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for Note(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100029E20()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100010B60(v0, qword_10008C988);
  sub_100010130(v0, (uint64_t)qword_10008C988);
  return static Logger.widget.getter();
}

id sub_100029E68(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  NSURL *v29;
  void *v30;
  void *v31;
  unsigned int v32;
  NSURL *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v54;
  void *v55;
  unsigned int v56;
  NSURL *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  unsigned int v64;
  NSURL *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  void *v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __n128 v99;
  void (*v100)(char *, uint64_t, __n128);
  char *v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  __n128 v113;
  void (*v114)(char *, uint64_t, __n128);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  void *v120;
  uint64_t v121;
  id v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  _QWORD *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v3 = type metadata accessor for Logger(0);
  v134 = *(_QWORD *)(v3 - 8);
  v135 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v6);
  v8 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v129 - v15;
  __chkstk_darwin(v14);
  v133 = (char *)&v129 - v17;
  v18 = objc_msgSend(a1, "identifier");
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_8;
  }
  v19 = v18;
  v130 = v16;
  v131 = v1;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v132 = v9;
  v21 = v20;
  v23 = v22;

  swift_bridgeObjectRetain(v23);
  v24 = v21;
  v25 = v132;
  URL.init(string:)(v24, v23);
  swift_bridgeObjectRelease_n(v23, 2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v25) == 1)
  {
LABEL_8:
    sub_10000CCD8((uint64_t)v8, &qword_10008B170);
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    v40 = v135;
    v41 = sub_100010130(v135, (uint64_t)qword_10008C988);
    v42 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v5, v41, v40);
    v43 = a1;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v136 = (id)v47;
      *(_DWORD *)v46 = 136315138;
      v48 = objc_msgSend(v43, "identifier");
      if (v48)
      {
        v49 = v48;
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        v52 = v51;

      }
      else
      {
        v52 = 0xA300000000000000;
        v50 = 9732322;
      }
      v138 = sub_10002D35C(v50, v52, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v46 + 4, v46 + 12);

      swift_bridgeObjectRelease(v52);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Cannot create notes folder URL from intent note folder identifier — returning nil {identifier: %s}", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      (*(void (**)(char *, uint64_t))(v134 + 8))(v5, v135);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v40);
    }
    return 0;
  }
  v26 = v10;
  v27 = v133;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v133, v8, v25);
  v28 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v29);
  v31 = v30;
  v32 = objc_msgSend(v28, "isShowFolderURL:", v30);

  if (v32)
  {
    v34 = v25;
    v35 = v26;
    v36 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
    if (v36)
    {
      v37 = v36;
      v38 = objc_msgSend(v36, "managedObjectContext");
      __chkstk_darwin(v38);
      *(&v129 - 4) = (uint64_t)v27;
      *(&v129 - 3) = (uint64_t)v37;
      *(&v129 - 2) = v131;
      sub_100009F30(&qword_10008CA88);
      NSManagedObjectContext.performAndWait<A>(_:)(sub_10002DAB8);

      v39 = v136;
      if (v136)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v34);
        return v39;
      }
    }
    v26 = v35;
    v25 = v34;
  }
  URL._bridgeToObjectiveC()(v33);
  v55 = v54;
  v56 = objc_msgSend(v28, "isShowVirtualSmartFolderURL:", v54);

  if (v56)
  {
    if (qword_10008B108 != -1)
      swift_once(&qword_10008B108, sub_100037600);
    v58 = sub_100009F30(&qword_10008C6E8);
    v59 = sub_100010130(v58, (uint64_t)qword_10008CE00);
    swift_beginAccess(v59, &v136, 33, 0);
    RetryingLazy.wrappedValue.getter(v58);
    v39 = (id)v138;
    swift_endAccess(&v136);
    if (!v39)
      goto LABEL_26;
    v60 = objc_msgSend(v39, "managedObjectContext");

    __chkstk_darwin(v61);
    *(&v129 - 2) = v131;
    *(&v129 - 1) = (uint64_t)v27;
    sub_100009F30(&qword_10008CA88);
    NSManagedObjectContext.performAndWait<A>(_:)(sub_10002DAA0);

    goto LABEL_25;
  }
  URL._bridgeToObjectiveC()(v57);
  v63 = v62;
  v64 = objc_msgSend(v28, "isShowHTMLFolderURL:", v62);

  if (v64)
  {
    if (qword_10008B110 != -1)
      swift_once(&qword_10008B110, sub_100037AA8);
    v66 = sub_100009F30(&qword_10008CA68);
    v67 = sub_100010130(v66, (uint64_t)qword_10008CE18);
    swift_beginAccess(v67, &v136, 33, 0);
    RetryingLazy.wrappedValue.getter(v66);
    v68 = (void *)v138;
    v69 = swift_endAccess(&v136);
    if (v68)
    {
      __chkstk_darwin(v69);
      *(&v129 - 4) = (uint64_t)v27;
      *(&v129 - 3) = (uint64_t)v68;
      *(&v129 - 2) = v131;
      v70 = sub_100010B28(0, &qword_10008B550, NoteContext_ptr);
      v71 = v68;
      v72 = sub_100009F30(&qword_10008CA88);
      ICLegacyContext.performAndWait<A>(_:)(sub_10002DA84, &v129 - 6, v70, v72);

      v39 = v136;
      if (v136)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v132);
        return v39;
      }
      v25 = v132;
    }
  }
  URL._bridgeToObjectiveC()(v65);
  v74 = v73;
  v75 = objc_msgSend(v28, "isShowDefaultFolderURL:", v73);

  if (!v75)
  {
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    sub_100010130(v135, (uint64_t)qword_10008C988);
    v89 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v13, v27, v25);
    v90 = Logger.logObject.getter(v89);
    v91 = v25;
    v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc(12, -1);
      v94 = swift_slowAlloc(32, -1);
      v136 = (id)v94;
      *(_DWORD *)v93 = 136315138;
      v95 = sub_10000C5FC(&qword_10008B540, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v96 = dispatch thunk of CustomStringConvertible.description.getter(v91, v95);
      v98 = v97;
      v138 = sub_10002D35C(v96, v97, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v93 + 4, v93 + 12);
      v99 = swift_bridgeObjectRelease(v98);
      v100 = *(void (**)(char *, uint64_t, __n128))(v26 + 8);
      v100(v13, v91, v99);
      _os_log_impl((void *)&_mh_execute_header, v90, v92, "Unknown notes folder URL type — returning nil {notesFolderURL: %s}", v93, 0xCu);
      swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1, -1);
      swift_slowDealloc(v93, -1, -1);
    }
    else
    {
      v100 = *(void (**)(char *, uint64_t, __n128))(v26 + 8);
      ((void (*)(char *, uint64_t))v100)(v13, v91);
    }

    ((void (*)(char *, uint64_t))v100)(v133, v91);
    return 0;
  }
  if (qword_10008B110 != -1)
    swift_once(&qword_10008B110, sub_100037AA8);
  v76 = sub_100009F30(&qword_10008CA68);
  v77 = sub_100010130(v76, (uint64_t)qword_10008CE18);
  swift_beginAccess(v77, &v136, 33, 0);
  RetryingLazy.wrappedValue.getter(v76);
  v78 = (void *)v138;
  swift_endAccess(&v136);
  v79 = objc_msgSend((id)objc_opt_self(ICDefaultAccountUtilities), "defaultFolderWithHTMLNoteContext:", v78);

  if (!v79)
  {
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    sub_100010130(v135, (uint64_t)qword_10008C988);
    v101 = v130;
    v102 = v133;
    v103 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v130, v133, v25);
    v104 = Logger.logObject.getter(v103);
    v105 = v25;
    v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v104, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(12, -1);
      v108 = swift_slowAlloc(32, -1);
      v136 = (id)v108;
      *(_DWORD *)v107 = 136315138;
      v109 = sub_10000C5FC(&qword_10008B540, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v110 = dispatch thunk of CustomStringConvertible.description.getter(v105, v109);
      v112 = v111;
      v138 = sub_10002D35C(v110, v111, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v107 + 4, v107 + 12);
      v113 = swift_bridgeObjectRelease(v112);
      v114 = *(void (**)(char *, uint64_t, __n128))(v26 + 8);
      v114(v101, v105, v113);
      _os_log_impl((void *)&_mh_execute_header, v104, v106, "Cannot find object for current default notes folder URL — returning nil {notesFolderURL: %s}", v107, 0xCu);
      swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
      v115 = v108;
      v102 = v133;
      swift_slowDealloc(v115, -1, -1);
      swift_slowDealloc(v107, -1, -1);
    }
    else
    {
      v114 = *(void (**)(char *, uint64_t, __n128))(v26 + 8);
      ((void (*)(char *, uint64_t))v114)(v101, v105);
    }

    ((void (*)(char *, uint64_t))v114)(v102, v105);
    return 0;
  }
  v80 = objc_opt_self(ICFolder);
  v81 = swift_dynamicCastObjCClass(v79, v80);
  if (v81)
  {
    v82 = v81;
    v83 = qword_10008B108;
    v84 = v79;
    if (v83 != -1)
      swift_once(&qword_10008B108, sub_100037600);
    v85 = sub_100009F30(&qword_10008C6E8);
    v86 = sub_100010130(v85, (uint64_t)qword_10008CE00);
    swift_beginAccess(v86, &v136, 33, 0);
    RetryingLazy.wrappedValue.getter(v85);
    v39 = (id)v138;
    swift_endAccess(&v136);
    v27 = v133;
    if (!v39)
    {

      goto LABEL_26;
    }
    v87 = objc_msgSend(v39, "managedObjectContext");

    __chkstk_darwin(v88);
    *(&v129 - 2) = v131;
    *(&v129 - 1) = v82;
    sub_100009F30(&qword_10008CA88);
    NSManagedObjectContext.performAndWait<A>(_:)(sub_10002DA54);

LABEL_25:
    v39 = v136;
LABEL_26:
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
    return v39;
  }
  v116 = objc_opt_self(NoteStoreObject);
  v117 = swift_dynamicCastObjCClass(v79, v116);
  if (!v117)
  {
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    sub_100010130(v135, (uint64_t)qword_10008C988);
    v122 = v79;
    v123 = Logger.logObject.getter(v122);
    v124 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v123, v124))
    {
      v125 = (uint8_t *)swift_slowAlloc(12, -1);
      v126 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v125 = 138412290;
      v127 = objc_msgSend(v122, "objectID");
      v136 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v125 + 4, v125 + 12);
      *v126 = v127;

      _os_log_impl((void *)&_mh_execute_header, v123, v124, "Unknown object type — returning nil {objectID: %@}", v125, 0xCu);
      v128 = sub_100009F30(&qword_10008B548);
      swift_arrayDestroy(v126, 1, v128);
      swift_slowDealloc(v126, -1, -1);
      swift_slowDealloc(v125, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v133, v132);
    return 0;
  }
  v118 = v117;
  swift_beginAccess(v77, &v136, 33, 0);
  v119 = v79;
  RetryingLazy.wrappedValue.getter(v76);
  v120 = (void *)v138;
  swift_endAccess(&v136);
  if (v120)
  {
    v39 = objc_msgSend(v120, "managedObjectContext");

    if (v39)
    {
      __chkstk_darwin(v121);
      *(&v129 - 2) = v131;
      *(&v129 - 1) = v118;
      sub_100009F30(&qword_10008CA88);
      NSManagedObjectContext.performAndWait<A>(_:)(sub_10002DA24);

      v39 = v136;
    }
    else
    {

    }
  }
  else
  {

    v39 = 0;
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v133, v25);
  return v39;
}

void sub_10002AD58(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  NSURL *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008B108 != -1)
    swift_once(&qword_10008B108, sub_100037600);
  v9 = sub_100009F30(&qword_10008C6E8);
  v10 = sub_100010130(v9, (uint64_t)qword_10008CE00);
  swift_beginAccess(v10, v34, 33, 0);
  RetryingLazy.wrappedValue.getter(v9);
  v11 = (void *)v35;
  swift_endAccess(v34);
  if (v11)
  {
    v12 = objc_msgSend(v11, "managedObjectContext");

    if (v12)
    {
      v33 = v6;
      v13 = (void *)objc_opt_self(ICAppURLUtilities);
      URL._bridgeToObjectiveC()(v14);
      v16 = v15;
      v17 = objc_msgSend(v13, "virtualSmartFolderMentionedInURL:context:", v15, v12);

      if (v17)
      {
        v18 = sub_10002E23C(v17, (uint64_t)v12);

        goto LABEL_14;
      }

      v6 = v33;
    }
  }
  if (qword_10008B0F8 != -1)
    swift_once(&qword_10008B0F8, sub_100029E20);
  v19 = type metadata accessor for Logger(0);
  sub_100010130(v19, (uint64_t)qword_10008C988);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v32[1] = v2;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v33 = v6;
    v34[0] = v25;
    v26 = v25;
    *(_DWORD *)v24 = 136315138;
    v32[0] = a2;
    v27 = sub_10000C5FC(&qword_10008B540, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v5, v27);
    v30 = v29;
    v35 = sub_10002D35C(v28, v29, v34);
    a2 = (uint64_t *)v32[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v24 + 4, v24 + 12);
    v31 = swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t, __n128))(v33 + 8))(v8, v5, v31);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cannot find notes object for notes folder URL — returning nil {notesFolderURL: %s}", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  v18 = 0;
LABEL_14:
  *a2 = v18;
}

void sub_10002B098(uint64_t a1@<X0>, void *a2@<X1>, NSObject *a3@<X8>)
{
  uint8_t *v3;
  uint8_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  void *v43;
  objc_class *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v56;
  uint64_t v57;
  os_log_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  os_log_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  v16 = objc_msgSend(v12, "objectIDForModernFolderMentionedInURL:noteContext:", v14, a2);

  if (!v16)
    goto LABEL_6;
  v17 = objc_msgSend(a2, "managedObjectContext");
  v65 = 0;
  v18 = objc_msgSend(v17, "existingObjectWithID:error:", v16, &v65);

  v19 = v65;
  if (!v18)
  {
    v26 = v9;
    v27 = v65;
    v28 = _convertNSErrorToError(_:)(v19);

    v9 = v26;
    swift_willThrow(v29);

    swift_errorRelease(v28);
    v4 = 0;
LABEL_6:
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    v30 = type metadata accessor for Logger(0);
    sub_100010130(v30, (uint64_t)qword_10008C988);
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(12, -1);
      v61 = v9;
      v35 = (uint8_t *)v34;
      v36 = (void *)swift_slowAlloc(32, -1);
      v63 = a3;
      v37 = v36;
      v65 = v36;
      *(_DWORD *)v35 = 136315138;
      v62 = v4;
      v38 = sub_10000C5FC(&qword_10008B540, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v8, v38);
      v41 = v40;
      v64 = sub_10002D35C(v39, v40, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v35 + 4, v35 + 12);
      v42 = swift_bridgeObjectRelease(v41);
      (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v11, v8, v42);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Cannot find notes object for notes folder URL — returning nil {notesFolderURL: %s}", v35, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      v43 = v37;
      a3 = v63;
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }

    goto LABEL_12;
  }
  v20 = objc_opt_self(ICAccount);
  v21 = swift_dynamicCastObjCClass(v18, v20);
  if (v21)
  {
    v22 = (void *)v21;
    v23 = v19;
    v24 = v18;
    v25 = (uint64_t)sub_10002EF28(v22);
LABEL_15:
    v44 = (objc_class *)v25;

    goto LABEL_16;
  }
  v45 = objc_opt_self(ICFolder);
  v46 = swift_dynamicCastObjCClass(v18, v45);
  if (v46)
  {
    v47 = (void *)v46;
    v48 = v19;
    v24 = v18;
    v25 = sub_10002E650(v47);
    goto LABEL_15;
  }
  v49 = qword_10008B0F8;
  v50 = v19;
  if (v49 != -1)
    swift_once(&qword_10008B0F8, sub_100029E20);
  v51 = type metadata accessor for Logger(0);
  sub_100010130(v51, (uint64_t)qword_10008C988);
  v52 = v16;
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v63 = v53;
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v61 = swift_slowAlloc(8, -1);
    v62 = v55;
    *(_DWORD *)v55 = 138412290;
    v65 = v52;
    v56 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v55 + 4, v55 + 12);
    v57 = v61;
    *(_QWORD *)v61 = v16;

    v59 = v62;
    v58 = v63;
    _os_log_impl((void *)&_mh_execute_header, v63, v54, "Unknown object type — returning nil {objectID: %@}", v62, 0xCu);
    v60 = sub_100009F30(&qword_10008B548);
    swift_arrayDestroy(v57, 1, v60);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {

  }
LABEL_12:
  v44 = 0;
LABEL_16:
  a3->isa = v44;
}

void sub_10002B5C8(uint64_t a1@<X0>, void *a2@<X1>, NSObject *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  objc_class *v25;
  objc_class *v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __n128 v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint8_t *v52;
  id v53;
  _QWORD *v54;
  os_log_t v55;
  uint64_t v56;
  _QWORD *v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  v16 = objc_msgSend(v12, "objectIDForHTMLFolderMentionedInURL:context:", v14, a2);

  if (!v16)
    goto LABEL_6;
  v61 = 0;
  v17 = objc_msgSend(a2, "existingObjectWithID:error:", v16, &v61);
  v18 = v61;
  if (!v17)
  {
    v27 = v61;
    v28 = a3;
    v29 = _convertNSErrorToError(_:)(v18);

    swift_willThrow(v30);
    v31 = v29;
    a3 = v28;
    swift_errorRelease(v31);
    v4 = 0;
LABEL_6:
    v59 = v4;
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    v32 = type metadata accessor for Logger(0);
    sub_100010130(v32, (uint64_t)qword_10008C988);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (void *)swift_slowAlloc(32, -1);
      v58 = a3;
      v38 = v37;
      v61 = v37;
      *(_DWORD *)v36 = 136315138;
      v57 = v36 + 4;
      v39 = sub_10000C5FC(&qword_10008B540, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v8, v39);
      v42 = v41;
      v60 = sub_10002D35C(v40, v41, (uint64_t *)&v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v57, v36 + 12);
      v43 = swift_bridgeObjectRelease(v42);
      (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v43);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Cannot find HTML object for notes folder URL — returning nil {notesFolderURL: %s}", v36, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      v44 = v38;
      a3 = v58;
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }

    goto LABEL_12;
  }
  v19 = v17;
  v20 = objc_opt_self(NoteCollectionObject);
  v21 = swift_dynamicCastObjCClass(v19, v20);
  if (!v21)
  {
    v59 = v3;
    v45 = qword_10008B0F8;
    v46 = v18;
    if (v45 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    v47 = type metadata accessor for Logger(0);
    sub_100010130(v47, (uint64_t)qword_10008C988);
    v48 = v16;
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc(12, -1);
      v58 = v49;
      v52 = (uint8_t *)v51;
      v57 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v52 = 138412290;
      v61 = v48;
      v53 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v52 + 4, v52 + 12);
      v54 = v57;
      *v57 = v16;

      v55 = v58;
      _os_log_impl((void *)&_mh_execute_header, v58, v50, "Unknown object type — returning nil {objectID: %@}", v52, 0xCu);
      v56 = sub_100009F30(&qword_10008B548);
      swift_arrayDestroy(v54, 1, v56);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {

    }
LABEL_12:
    v26 = 0;
    goto LABEL_13;
  }
  v22 = v21;
  v23 = v18;
  v24 = v19;
  sub_10002EA90(v22);
  v26 = v25;

LABEL_13:
  a3->isa = v26;
}

uint64_t sub_10002BA98(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = sub_100009F30(&qword_10008CAB8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = _s5EntryVMa(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100009F30(&qword_10008CA58);
  v11 = Timeline.entries.getter(v10);
  v12 = v11;
  if (*(_QWORD *)(v11 + 16))
  {
    sub_10000AF24(v11 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v5, _s5EntryVMa);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v13, 1, v6);
  v14 = swift_bridgeObjectRelease(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v7 + 48))(v5, 1, v6, v14) == 1)
  {
    v15 = &v9[*(int *)(v6 + 20)];
    v16 = sub_100009F30(&qword_10008C8E8);
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 2, 2, v16);
    Date.init()(v17);
    sub_10000CCD8((uint64_t)v5, &qword_10008CAB8);
  }
  else
  {
    sub_10000AEE0((uint64_t)v5, (uint64_t)v9, _s5EntryVMa);
  }
  a2(v9);
  return sub_10000AF68((uint64_t)v9, _s5EntryVMa);
}

uint64_t sub_10002BC44(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  void (*v71)(uint64_t, __n128);
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  id v77;
  NSObject *v78;
  int v79;
  uint8_t *v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  id v96;
  NSObject *v97;
  os_log_type_t v98;
  char *v99;
  uint8_t *v100;
  uint64_t v101;
  id v102;
  void *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  void (*v157)(uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164[4];

  v160 = a4;
  v157 = a3;
  v148 = a2;
  v5 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v5);
  v156 = (char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for Date(0);
  v152 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v153 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v8);
  v154 = (char *)&v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100009F30(&qword_10008CA58);
  v158 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v159 = (uint64_t)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for Logger(0);
  v151 = *(_QWORD *)(v161 - 8);
  v11 = __chkstk_darwin(v161);
  v13 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v147 = (char *)&v146 - v14;
  v15 = sub_100009F30(&qword_10008B538);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v146 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v146 - v19;
  v21 = type metadata accessor for NotesFolder(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v149 = (uint64_t)&v146 - v26;
  if (qword_10008B108 != -1)
    swift_once(&qword_10008B108, sub_100037600);
  v27 = sub_100009F30(&qword_10008C6E8);
  v28 = sub_100010130(v27, (uint64_t)qword_10008CE00);
  swift_beginAccess(v28, v164, 33, 0);
  RetryingLazy.wrappedValue.getter(v27);
  v29 = (void *)v163;
  swift_endAccess(v164);
  if (!v29)
    goto LABEL_11;
  if (qword_10008B110 != -1)
    swift_once(&qword_10008B110, sub_100037AA8);
  v30 = sub_100009F30(&qword_10008CA68);
  v31 = sub_100010130(v30, (uint64_t)qword_10008CE18);
  swift_beginAccess(v31, v164, 33, 0);
  RetryingLazy.wrappedValue.getter(v30);
  v32 = (void *)v163;
  swift_endAccess(v164);
  if (!v32)
  {

LABEL_11:
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    v42 = sub_100010130(v161, (uint64_t)qword_10008C988);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    v45 = os_log_type_enabled(v43, v44);
    v46 = v162;
    v47 = v157;
    if (v45)
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "No modern or HTML note context — returning placeholder timeline", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    v49 = sub_100009F30(&qword_10008CA60);
    v50 = _s5EntryVMa(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(_QWORD *)(v51 + 72);
    v53 = *(unsigned __int8 *)(v51 + 80);
    v54 = (v53 + 32) & ~v53;
    v55 = swift_allocObject(v49, v54 + v52, v53 | 7);
    *(_OWORD *)(v55 + 16) = xmmword_1000659F0;
    v56 = v55 + v54;
    v57 = sub_100009F30(&qword_10008C8E8);
    v58 = (uint64_t)v154;
    v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v154, 2, 2, v57);
    v60 = v153;
    Date.init()(v59);
    (*(void (**)(uint64_t, char *, uint64_t))(v152 + 32))(v56, v60, v155);
    v61 = sub_10002D314(v58, v56 + *(int *)(v50 + 20));
    v62 = v156;
    static TimelineReloadPolicy.never.getter(v61);
    v63 = sub_10000C5FC(qword_10008CA40, _s5EntryVMa, (uint64_t)&unk_10006AC90);
    v64 = v159;
    Timeline.init(entries:policy:)(v55, v62, v50, v63);
    v47(v64);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 8))(v64, v46);
  }
  v33 = objc_msgSend(a1, "folder");
  if (!v33)
  {
    v66 = (void *)objc_opt_self(ICIntentNotesFolder);
    v67 = objc_msgSend(v66, "currentDefaultNotesFolder");
    v68 = v29;
    v69 = v32;
    sub_10000DCB0(v67, v68, v69, (uint64_t)v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v18, 1, v21) == 1)
    {
      sub_10000CCD8((uint64_t)v18, &qword_10008B538);
      v70 = v162;
      v71 = (void (*)(uint64_t, __n128))v157;
    }
    else
    {
      sub_10000AEE0((uint64_t)v18, (uint64_t)v25, type metadata accessor for NotesFolder);
      v87 = objc_msgSend(v66, "currentDefaultNotesFolder");
      v88 = sub_100029E68(v87);

      v70 = v162;
      v71 = (void (*)(uint64_t, __n128))v157;
      if (v88)
      {
        if (qword_10008B0F8 != -1)
          swift_once(&qword_10008B0F8, sub_100029E20);
        v89 = sub_100010130(v161, (uint64_t)qword_10008C988);
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v90, v91))
        {
          v92 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v92 = 0;
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Returning timeline for default notes folder", v92, 2u);
          swift_slowDealloc(v92, -1, -1);
        }

        v93 = v159;
        sub_10002CB0C((uint64_t)v25, (uint64_t)v88, v159);
        v94 = swift_bridgeObjectRelease(v88);
        v71(v93, v94);

        (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v93, v70);
        return sub_10000AF68((uint64_t)v25, type metadata accessor for NotesFolder);
      }
      sub_10000AF68((uint64_t)v25, type metadata accessor for NotesFolder);
    }
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    v123 = sub_100010130(v161, (uint64_t)qword_10008C988);
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v124, v125))
    {
      v126 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v126 = 0;
      _os_log_impl((void *)&_mh_execute_header, v124, v125, "There is no intent notes folder and cannot get current default notes folder — returning placeholder timeline", v126, 2u);
      swift_slowDealloc(v126, -1, -1);
    }

    v127 = sub_100009F30(&qword_10008CA60);
    v128 = _s5EntryVMa(0);
    v129 = *(_QWORD *)(v128 - 8);
    v130 = *(_QWORD *)(v129 + 72);
    v131 = *(unsigned __int8 *)(v129 + 80);
    v132 = (v131 + 32) & ~v131;
    v133 = swift_allocObject(v127, v132 + v130, v131 | 7);
    *(_OWORD *)(v133 + 16) = xmmword_1000659F0;
    v134 = v133 + v132;
    v135 = sub_100009F30(&qword_10008C8E8);
    v136 = (uint64_t)v154;
    v137 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v154, 2, 2, v135);
    v138 = v153;
    Date.init()(v137);
    (*(void (**)(uint64_t, char *, uint64_t))(v152 + 32))(v134, v138, v155);
    v139 = sub_10002D314(v136, v134 + *(int *)(v128 + 20));
    v140 = v156;
    static TimelineReloadPolicy.never.getter(v139);
    v141 = sub_10000C5FC(qword_10008CA40, _s5EntryVMa, (uint64_t)&unk_10006AC90);
    v142 = v159;
    Timeline.init(entries:policy:)(v133, v140, v128, v141);
    ((void (*)(uint64_t))v71)(v142);

    return (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 8))(v142, v70);
  }
  v34 = v33;
  v35 = v29;
  v36 = v32;
  v37 = v35;
  v38 = v36;
  sub_10000DCB0(v34, v35, v36, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10000CCD8((uint64_t)v20, &qword_10008B538);
    v39 = v161;
    v40 = v162;
    v41 = v151;
LABEL_31:
    if (qword_10008B0F8 != -1)
      swift_once(&qword_10008B0F8, sub_100029E20);
    v95 = sub_100010130(v39, (uint64_t)qword_10008C988);
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v13, v95, v39);
    v96 = v34;
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v150 = v37;
      v99 = v38;
      v100 = (uint8_t *)swift_slowAlloc(12, -1);
      v101 = swift_slowAlloc(32, -1);
      v164[0] = v101;
      *(_DWORD *)v100 = 136315138;
      v102 = objc_msgSend(v96, "identifier");
      if (v102)
      {
        v103 = v102;
        v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
        v106 = v105;

      }
      else
      {
        v104 = 9732322;
        v106 = 0xA300000000000000;
      }
      v163 = sub_10002D35C(v104, v106, v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v100 + 4, v100 + 12);

      swift_bridgeObjectRelease(v106);
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Cannot fetch notes folder and notes — returning deleted timeline {identifier: %s}", v100, 0xCu);
      swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v100, -1, -1);

      (*(void (**)(char *, uint64_t))(v151 + 8))(v13, v161);
      v38 = v99;
      v37 = v150;
      v40 = v162;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v39);
    }
    v107 = sub_100009F30(&qword_10008CA60);
    v108 = _s5EntryVMa(0);
    v109 = *(_QWORD *)(v108 - 8);
    v110 = *(_QWORD *)(v109 + 72);
    v111 = *(unsigned __int8 *)(v109 + 80);
    v112 = (v111 + 32) & ~v111;
    v113 = swift_allocObject(v107, v112 + v110, v111 | 7);
    *(_OWORD *)(v113 + 16) = xmmword_1000659F0;
    v114 = v113 + v112;
    v115 = sub_100009F30(&qword_10008C8E8);
    v116 = (uint64_t)v154;
    v117 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 56))(v154, 1, 2, v115);
    v118 = v153;
    Date.init()(v117);
    (*(void (**)(uint64_t, char *, uint64_t))(v152 + 32))(v114, v118, v155);
    v119 = sub_10002D314(v116, v114 + *(int *)(v108 + 20));
    v120 = v156;
    static TimelineReloadPolicy.never.getter(v119);
    v121 = sub_10000C5FC(qword_10008CA40, _s5EntryVMa, (uint64_t)&unk_10006AC90);
    v122 = v159;
    Timeline.init(entries:policy:)(v113, v120, v108, v121);
    v157(v122);

    return (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 8))(v122, v40);
  }
  v72 = v149;
  sub_10000AEE0((uint64_t)v20, v149, type metadata accessor for NotesFolder);
  v73 = sub_100029E68(v34);
  v39 = v161;
  v40 = v162;
  v41 = v151;
  if (!v73)
  {
    sub_10000AF68(v72, type metadata accessor for NotesFolder);
    goto LABEL_31;
  }
  v74 = (uint64_t)v73;
  if (qword_10008B0F8 != -1)
    swift_once(&qword_10008B0F8, sub_100029E20);
  v75 = sub_100010130(v39, (uint64_t)qword_10008C988);
  v76 = v147;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v147, v75, v39);
  v77 = v34;
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v78, (os_log_type_t)v79))
  {
    LODWORD(v155) = v79;
    v156 = v38;
    v80 = (uint8_t *)swift_slowAlloc(12, -1);
    v81 = swift_slowAlloc(32, -1);
    v164[0] = v81;
    *(_DWORD *)v80 = 136315138;
    v82 = objc_msgSend(v77, "identifier");
    if (v82)
    {
      v83 = v82;
      v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      v86 = v85;

    }
    else
    {
      v84 = 9732322;
      v86 = 0xA300000000000000;
    }
    v163 = sub_10002D35C(v84, v86, v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v80 + 4, v80 + 12);

    swift_bridgeObjectRelease(v86);
    _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v155, "Returning timeline for notes folder {identifier: %s}", v80, 0xCu);
    swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v80, -1, -1);

    (*(void (**)(char *, uint64_t))(v151 + 8))(v147, v39);
    v38 = v156;
    v40 = v162;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v41 + 8))(v76, v39);
  }
  v143 = v159;
  v144 = v149;
  sub_10002CB0C(v149, v74, v159);
  v145 = swift_bridgeObjectRelease(v74);
  ((void (*)(uint64_t, __n128))v157)(v143, v145);

  (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v143, v40);
  return sub_10000AF68(v144, type metadata accessor for NotesFolder);
}

uint64_t sub_10002CB0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void (**v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;

  v75 = a2;
  v72 = a1;
  v79 = a3;
  v3 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v3);
  v77 = (uint64_t)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008CA78);
  __chkstk_darwin(v5);
  v70 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for TimelineReloadPolicy(0);
  v76 = *(_QWORD *)(v78 - 8);
  v7 = __chkstk_darwin(v78);
  v74 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v73 = (char *)&v67 - v9;
  v10 = type metadata accessor for Date(0);
  v82 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v67 - v14;
  v16 = type metadata accessor for Calendar.Component(0);
  v17 = *(_QWORD *)(v16 - 8);
  v68 = v16;
  v71 = (void (**)(char *, uint64_t))v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Calendar(0);
  v80 = *(char **)(v20 - 8);
  v81 = v20;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v67 - v24;
  v26 = sub_100009F30(&qword_10008CA80);
  v27 = __chkstk_darwin(v26);
  v69 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v31 = (void (**)(char *, uint64_t))((char *)&v67 - v30);
  static Calendar.current.getter(v29);
  v32 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for Calendar.Component.day(_:), v16);
  v33 = static Calendar.current.getter(v32);
  Date.init()(v33);
  Calendar.startOfDay(for:)(v13);
  v34 = v82;
  v35 = *(void (**)(char *, uint64_t))(v82 + 8);
  v35(v13, v10);
  v36 = v81;
  v37 = (void (*)(char *, uint64_t))*((_QWORD *)v80 + 1);
  v37(v23, v81);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v19, 1, v15, 0);
  v80 = v15;
  v35(v15, v10);
  v71[1](v19, v68);
  v38 = v25;
  v39 = (uint64_t)v69;
  v37(v38, v36);
  v71 = v31;
  sub_10002D9DC((uint64_t)v31, v39);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  v81 = v10;
  v41 = (uint64_t)v70;
  v42 = v40(v39, 1, v10);
  v43 = 1;
  if (v42 != 1)
  {
    v44 = v80;
    v45 = v39;
    v46 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v80, v45, v81);
    static TimelineReloadPolicy.after(_:)(v44);
    v35(v44, v46);
    v43 = 0;
  }
  v47 = v76;
  v48 = v78;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v41, v43, 1, v78);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v41, 1, v48) == 1)
  {
    v49 = v73;
    static TimelineReloadPolicy.never.getter();
    sub_10000CCD8(v41, &qword_10008CA78);
  }
  else
  {
    v49 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v73, v41, v48);
  }
  v50 = sub_100009F30(&qword_10008CA60);
  v51 = _s5EntryVMa(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(_QWORD *)(v52 + 72);
  v54 = *(unsigned __int8 *)(v52 + 80);
  v55 = (v54 + 32) & ~v54;
  v56 = swift_allocObject(v50, v55 + v53, v54 | 7);
  *(_OWORD *)(v56 + 16) = xmmword_1000659F0;
  v57 = v56 + v55;
  v58 = sub_100009F30(&qword_10008C8E8);
  v59 = *(int *)(v58 + 48);
  v60 = v77;
  sub_10000AF24(v72, v77, type metadata accessor for NotesFolder);
  v61 = v75;
  *(_QWORD *)(v60 + v59) = v75;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v60, 0, 2, v58);
  v62 = swift_bridgeObjectRetain(v61);
  v63 = v80;
  Date.init()(v62);
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v57, v63, v81);
  sub_10002D314(v60, v57 + *(int *)(v51 + 20));
  v64 = v74;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v74, v49, v48);
  v65 = sub_10000C5FC(qword_10008CA40, _s5EntryVMa, (uint64_t)&unk_10006AC90);
  Timeline.init(entries:policy:)(v56, v64, v51, v65);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
  return sub_10000CCD8((uint64_t)v71, &qword_10008CA80);
}

uint64_t sub_10002D058()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for NotesFolderTimelineProvider()
{
  return objc_opt_self(_TtC37com_apple_mobilenotes_WidgetExtension27NotesFolderTimelineProvider);
}

uint64_t sub_10002D088()
{
  return sub_10000C5FC(qword_10008CA40, _s5EntryVMa, (uint64_t)&unk_10006AC90);
}

uint64_t sub_10002D0B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 + *(int *)(_s5EntryVMa(0) + 20);
  v2 = sub_100009F30(&qword_10008C8E8);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 2, 2, v2);
  return Date.init()(v3);
}

uint64_t sub_10002D110(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v9 = type metadata accessor for TimelineProviderContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 40) & ~v14;
  v16 = (char *)swift_allocObject(&unk_100084FA0, v15 + v11, v14 | 7);
  *((_QWORD *)v16 + 2) = a3;
  *((_QWORD *)v16 + 3) = a4;
  *((_QWORD *)v16 + 4) = v13;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v16[v15], v12, v9);
  swift_retain(a4);
  swift_retain(v13);
  sub_10002BC44(a1, a2, (void (*)(uint64_t))sub_10002F4EC, (uint64_t)v16);
  return swift_release(v16);
}

uint64_t sub_10002D21C(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  return sub_10002BC44(a1, a2, a3, a4);
}

uint64_t sub_10002D23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000120F8;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10002D2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100014DC0;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_10002D314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008C8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D35C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  void *ObjectType;

  v6 = sub_10002D42C(v13, 0, 0, 1, a1, a2);
  v8 = v13[0];
  if (v6)
  {
    v9 = v6;
    ObjectType = (void *)swift_getObjectType(v6, v7);
    v13[0] = v9;
    v10 = *a3;
    if (*a3)
    {
      sub_10002D99C((uint64_t)v13, *a3);
      *a3 = v10 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    v11 = *a3;
    if (*a3)
    {
      sub_10002D99C((uint64_t)v13, *a3);
      *a3 = v11 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10000ADAC(v13);
  return v8;
}

uint64_t sub_10002D42C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10002D5E4(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_10002D5E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10002D678(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10002D850(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10002D850(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10002D678(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10002D7EC(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10002D7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100009F30(&qword_10008CA70);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10002D850(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100009F30(&qword_10008CA70);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002D99C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002D9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008CA80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10002DA24(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10002EA90(*(_QWORD *)(v1 + 24));
  *a1 = v3;
}

uint64_t sub_10002DA54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_10002E650(*(void **)(v1 + 24));
  *a1 = result;
  return result;
}

void sub_10002DA84(NSObject *a1@<X8>)
{
  uint64_t v1;

  sub_10002B5C8(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void sub_10002DAA0(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_10002AD58(*(_QWORD *)(v1 + 24), a1);
}

void sub_10002DAB8(NSObject *a1@<X8>)
{
  uint64_t v1;

  sub_10002B098(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_10002DAD4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10002DAF0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10002DAF0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100009F30(&qword_10008CAA8);
  v11 = *(_QWORD *)(type metadata accessor for Note(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for Note(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_10002DCD0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = a1;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v2 < 0)
    v14 = v2;
  else
    v14 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease(v2);
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    if (v2 < 0)
      v9 = v2;
    else
      v9 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v2);
    if (v10 < 0)
      goto LABEL_36;
    swift_bridgeObjectRetain(v2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    return;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_100010B28(0, &qword_10008CAB0, NoteObject_ptr);
    v11 = 0;
    do
    {
      v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      v11 = v12;
    }
    while (v7 != v12);
  }
  if (v4)
  {
    if (v2 < 0)
      v13 = v2;
    else
      v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    _CocoaArrayWrapper.subscript.getter(0, v7, v13);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    swift_bridgeObjectRetain(v2);
  }
}

uint64_t sub_10002DE78(uint64_t a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id *v22;

  v3 = v2;
  v6 = type metadata accessor for Note(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v11 = _swiftEmptyArrayStorage;
    if (!v10)
      return (uint64_t)v11;
    v22 = _swiftEmptyArrayStorage;
    result = sub_10002DAD4(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0)
      break;
    v13 = 0;
    v11 = v22;
    v20 = v3;
    v21 = a1 & 0xC000000000000001;
    v14 = a1;
    while (v10 != v13)
    {
      if (v21)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      else
        v15 = *(id *)(a1 + 8 * v13 + 32);
      v16 = v15;
      v17 = a2;
      sub_10005BF8C(v16, 0, 0, a2, 1, (uint64_t)v9);
      v22 = v11;
      v3 = (unint64_t)v11[2];
      v18 = (unint64_t)v11[3];
      if (v3 >= v18 >> 1)
      {
        sub_10002DAD4(v18 > 1, v3 + 1, 1);
        v11 = v22;
      }
      ++v13;
      v11[2] = (id)(v3 + 1);
      sub_10000AEE0((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v3, type metadata accessor for Note);
      a1 = v14;
      if (v10 == v13)
        return (uint64_t)v11;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002E048(uint64_t a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;

  v3 = v2;
  v6 = type metadata accessor for Note(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v11 = (unint64_t *)&_swiftEmptyArrayStorage;
    if (!v10)
      return (uint64_t)v11;
    v23 = (unint64_t *)&_swiftEmptyArrayStorage;
    result = sub_10002DAD4(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0)
      break;
    v13 = 0;
    v11 = v23;
    v21 = v3;
    v22 = a1 & 0xC000000000000001;
    v14 = a1;
    while (v10 != v13)
    {
      if (v22)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      else
        v15 = *(id *)(a1 + 8 * v13 + 32);
      v16 = v15;
      v17 = objc_msgSend(a2, "customNoteSortType");
      v18 = a2;
      sub_10005BF8C(v16, 0, v17, a2, 0, (uint64_t)v9);

      v23 = v11;
      v3 = v11[2];
      v19 = v11[3];
      if (v3 >= v19 >> 1)
      {
        sub_10002DAD4(v19 > 1, v3 + 1, 1);
        v11 = v23;
      }
      ++v13;
      v11[2] = v3 + 1;
      sub_10000AEE0((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v3, type metadata accessor for Note);
      a1 = v14;
      if (v10 == v13)
        return (uint64_t)v11;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002E23C(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t j;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  unsigned __int8 v34;
  id *v35;
  id v36;
  uint64_t v37;
  void *v38;

  v3 = a1;
  v4 = objc_msgSend(a1, "predicateForContext:", a2);
  v5 = (void *)objc_opt_self(ICNoteListSortUtilities);
  v6 = objc_msgSend(v3, "noteSortType");
  isa = (Class)objc_msgSend(v5, "sortDescriptorsForCurrentTypeIncludingPinnedNotes:folderNoteSortType:", 0, v6);

  if (!isa)
  {
    v8 = sub_100010B28(0, &qword_10008CA90, NSSortDescriptor_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v8);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
  }
  v10 = sub_100010B28(0, &qword_10008CA98, ICNote_ptr);
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "ic_objectsMatchingPredicate:sortDescriptors:relationshipKeyPathsForPrefetching:fetchLimit:context:", v4, isa, 0, 16, a2);

  v12 = sub_100010B28(0, &qword_10008CAA0, NSManagedObject_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v25 = v13;
    else
      v25 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    result = _CocoaArrayWrapper.endIndex.getter(v25);
    v14 = result;
    if (!result)
      goto LABEL_21;
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v13);
    if (!v14)
      goto LABEL_21;
  }
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_40;
  }
  for (i = 0; i != v14; ++i)
  {
    if ((v13 & 0xC000000000000001) != 0)
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
    else
      v17 = *(id *)(v13 + 8 * i + 32);
    v18 = v17;
    v19 = objc_opt_self(ICNote);
    v20 = swift_dynamicCastObjCClass(v18, v19);
    if (v20)
    {
      v21 = v20;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v23 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v23 >= v22 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized Array._endMutation()(v24);
    }
    else
    {

    }
  }
LABEL_21:
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v13);
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    v26 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v26)
      goto LABEL_23;
LABEL_37:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
LABEL_38:
    v36 = v3;
    v37 = sub_10002DE78((uint64_t)_swiftEmptyArrayStorage, v36);
    swift_release(_swiftEmptyArrayStorage);

    return v37;
  }
  if ((uint64_t)_swiftEmptyArrayStorage < 0)
    v35 = _swiftEmptyArrayStorage;
  else
    v35 = (id *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v26 = _CocoaArrayWrapper.endIndex.getter(v35);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if (!v26)
    goto LABEL_37;
LABEL_23:
  result = objc_opt_self(ICWidget);
  if (v26 >= 1)
  {
    v27 = (void *)result;
    v38 = v3;
    for (j = 0; j != v26; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, _swiftEmptyArrayStorage);
      else
        v31 = _swiftEmptyArrayStorage[j + 4];
      v32 = v31;
      v33 = objc_msgSend(v27, "sharedWidget", v38);
      v34 = objc_msgSend(v33, "hidesObject:", v32);

      if ((v34 & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v29 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
        v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v32);
        specialized ContiguousArray._endMutation()(v30);
      }
    }
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v3 = v38;
    goto LABEL_38;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10002E650(void *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t j;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  unsigned __int8 v35;
  id *v36;
  id v37;

  v2 = objc_msgSend(a1, "managedObjectContext");
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(a1, "predicateForVisibleNotes");
  v5 = (void *)objc_opt_self(ICNoteListSortUtilities);
  v6 = objc_msgSend(a1, "customNoteSortType");
  isa = (Class)objc_msgSend(v5, "sortDescriptorsForCurrentTypeIncludingPinnedNotes:folderNoteSortType:", 0, v6);

  if (!isa)
  {
    v8 = sub_100010B28(0, &qword_10008CA90, NSSortDescriptor_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v8);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
  }
  v10 = sub_100010B28(0, &qword_10008CA98, ICNote_ptr);
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "ic_objectsMatchingPredicate:sortDescriptors:relationshipKeyPathsForPrefetching:fetchLimit:context:", v4, isa, 0, 16, v3);

  v12 = sub_100010B28(0, &qword_10008CAA0, NSManagedObject_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v26 = v13;
    else
      v26 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    result = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = result;
    if (!result)
      goto LABEL_23;
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v13);
    if (!v14)
      goto LABEL_23;
  }
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_42;
  }
  for (i = 0; i != v14; ++i)
  {
    if ((v13 & 0xC000000000000001) != 0)
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
    else
      v17 = *(id *)(v13 + 8 * i + 32);
    v18 = v17;
    v19 = objc_opt_self(ICNote);
    v20 = swift_dynamicCastObjCClass(v18, v19);
    if (v20)
    {
      v21 = v20;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v23 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v23 >= v22 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized Array._endMutation()(v24);
    }
    else
    {

    }
  }
LABEL_23:
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v13);
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v27)
      goto LABEL_25;
LABEL_39:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v37 = a1;
    v25 = sub_10002E048((uint64_t)_swiftEmptyArrayStorage, v37);
    swift_release(_swiftEmptyArrayStorage);

    return v25;
  }
  if ((uint64_t)_swiftEmptyArrayStorage < 0)
    v36 = _swiftEmptyArrayStorage;
  else
    v36 = (id *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v27 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if (!v27)
    goto LABEL_39;
LABEL_25:
  result = objc_opt_self(ICWidget);
  if (v27 >= 1)
  {
    v28 = (void *)result;
    for (j = 0; j != v27; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, _swiftEmptyArrayStorage);
      else
        v32 = _swiftEmptyArrayStorage[j + 4];
      v33 = v32;
      v34 = objc_msgSend(v28, "sharedWidget");
      v35 = objc_msgSend(v34, "hidesObject:", v33);

      if ((v35 & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v30 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
        v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v33);
        specialized ContiguousArray._endMutation()(v31);
      }
    }
    goto LABEL_39;
  }
LABEL_42:
  __break(1u);
  return result;
}

void sub_10002EA90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  unsigned __int8 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD v51[4];
  uint64_t v52;
  _QWORD v53[4];
  uint64_t v54;

  v2 = type metadata accessor for Note(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008B110 != -1)
    swift_once(&qword_10008B110, sub_100037AA8);
  v6 = sub_100009F30(&qword_10008CA68);
  v7 = sub_100010130(v6, (uint64_t)qword_10008CE18);
  swift_beginAccess(v7, v53, 33, 0);
  RetryingLazy.wrappedValue.getter(v6);
  v8 = (void *)v51[0];
  swift_endAccess(v53);
  if (!v8)
    return;
  v9 = objc_msgSend(v8, "allVisibleNotesInCollection:sorted:", a1, 1);

  if (!v9)
  {
LABEL_51:
    __break(1u);
    return;
  }
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, (char *)&type metadata for Any + 8);

  v54 = (uint64_t)&_swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(v10 + 16);
  v50 = v5;
  if (v11)
  {
    v12 = v10 + 32;
    v49 = v10;
    swift_bridgeObjectRetain(v10);
    do
    {
      sub_10002D99C(v12, (uint64_t)v53);
      sub_10002D99C((uint64_t)v53, (uint64_t)v51);
      v14 = sub_100010B28(0, &qword_10008CAB0, NoteObject_ptr);
      if ((swift_dynamicCast(&v52, v51, (char *)&type metadata for Any + 8, v14, 6) & 1) == 0)
        v52 = 0;
      v15 = sub_10000ADAC(v53);
      v16 = v52;
      if (v52)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v18 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v17 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v18 >= v17 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
        specialized Array._endMutation()(v13);
        v5 = v50;
      }
      v12 += 32;
      --v11;
    }
    while (v11);
    v10 = v49;
    swift_bridgeObjectRelease(v49);
    v19 = v54;
  }
  else
  {
    v19 = (uint64_t)&_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v10);
  v53[0] = &_swiftEmptyArrayStorage;
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v31 = v19;
    else
      v31 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v19);
    if (v20)
      goto LABEL_18;
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
    {
LABEL_18:
      v21 = objc_opt_self(ICWidget);
      if (v20 < 1)
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v22 = (void *)v21;
      v49 = v3;
      for (i = 0; i != v20; ++i)
      {
        if ((v19 & 0xC000000000000001) != 0)
          v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v19);
        else
          v26 = *(id *)(v19 + 8 * i + 32);
        v27 = v26;
        v28 = objc_msgSend(v22, "sharedWidget", v49);
        v29 = objc_msgSend(v28, "hidesObject:", v27);

        if ((v29 & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v24 = *(_QWORD *)(v53[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
          v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v27);
          specialized ContiguousArray._endMutation()(v25);
        }
      }
      swift_bridgeObjectRelease(v19);
      v30 = (void *)v53[0];
      v3 = v49;
      v5 = v50;
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease(v19);
  v30 = &_swiftEmptyArrayStorage;
LABEL_33:
  sub_10002DCD0(16, (unint64_t)v30);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  swift_release(v30);
  v40 = v39 >> 1;
  v41 = __OFSUB__(v39 >> 1, v37);
  v42 = (v39 >> 1) - v37;
  if (v41)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v42)
  {
    v53[0] = &_swiftEmptyArrayStorage;
    sub_10002DAD4(0, v42 & ~(v42 >> 63), 0);
    if (v42 < 0)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v43 = v53[0];
    if (v37 <= v40)
      v44 = v40;
    else
      v44 = v37;
    v45 = v44 - v37;
    v46 = (id *)(v35 + 8 * v37);
    while (v45)
    {
      sub_10005C6C8(*v46, (uint64_t)v5);
      v53[0] = v43;
      v48 = *(_QWORD *)(v43 + 16);
      v47 = *(_QWORD *)(v43 + 24);
      if (v48 >= v47 >> 1)
      {
        sub_10002DAD4(v47 > 1, v48 + 1, 1);
        v43 = v53[0];
      }
      *(_QWORD *)(v43 + 16) = v48 + 1;
      sub_10000AEE0((uint64_t)v5, v43+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v48, type metadata accessor for Note);
      --v45;
      ++v46;
      if (!--v42)
      {
        swift_unknownObjectRelease(v33);
        return;
      }
    }
    __break(1u);
    goto LABEL_48;
  }
  swift_unknownObjectRelease(v33);
}

id *sub_10002EF28(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *ObjCClassFromMetadata;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id *result;
  uint64_t i;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  uint64_t j;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  unsigned __int8 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;

  v2 = type metadata accessor for Note(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, "managedObjectContext");
  if (!v6)
    return 0;
  v7 = v6;
  v8 = objc_msgSend(a1, "predicateForVisibleNotes");
  isa = (Class)objc_msgSend((id)objc_opt_self(ICNoteListSortUtilities), "sortDescriptorsForCurrentTypeIncludingPinnedNotes:", 0);
  if (!isa)
  {
    v10 = sub_100010B28(0, &qword_10008CA90, NSSortDescriptor_ptr);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v10);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v11);
  }
  v12 = sub_100010B28(0, &qword_10008CA98, ICNote_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v12);
  v51 = v7;
  v14 = objc_msgSend(ObjCClassFromMetadata, "ic_objectsMatchingPredicate:sortDescriptors:relationshipKeyPathsForPrefetching:fetchLimit:context:", v8, isa, 0, 16, v7);

  v15 = sub_100010B28(0, &qword_10008CAA0, NSManagedObject_ptr);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  v52 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v30 = v16;
    else
      v30 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    result = (id *)_CocoaArrayWrapper.endIndex.getter(v30);
    v17 = (uint64_t)result;
    if (result)
      goto LABEL_6;
LABEL_23:
    swift_bridgeObjectRelease(v16);
    v28 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (id *)swift_bridgeObjectRetain(v16);
  if (!v17)
    goto LABEL_23;
LABEL_6:
  if (v17 < 1)
  {
    __break(1u);
    goto LABEL_57;
  }
  for (i = 0; i != v17; ++i)
  {
    if ((v16 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v16);
    else
      v20 = *(id *)(v16 + 8 * i + 32);
    v21 = v20;
    v22 = objc_opt_self(ICNote);
    v23 = swift_dynamicCastObjCClass(v21, v22);
    if (v23)
    {
      v24 = v23;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      v26 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v25 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v26 >= v25 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
      v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
      specialized Array._endMutation()(v27);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(v16);
  v28 = v52;
LABEL_24:
  swift_bridgeObjectRelease(v16);
  v52 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v41 = v28;
    else
      v41 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v31 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v28);
    if (v31)
    {
LABEL_26:
      result = (id *)objc_opt_self(ICWidget);
      if (v31 >= 1)
      {
        v32 = result;
        v49 = v5;
        v50 = v3;
        for (j = 0; j != v31; ++j)
        {
          if ((v28 & 0xC000000000000001) != 0)
            v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v28);
          else
            v36 = *(id *)(v28 + 8 * j + 32);
          v37 = v36;
          v38 = objc_msgSend(v32, "sharedWidget", v49, v50);
          v39 = objc_msgSend(v38, "hidesObject:", v37);

          if ((v39 & 1) != 0)
          {

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v34 = *(id *)(v52 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
            v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v37);
            specialized ContiguousArray._endMutation()(v35);
          }
        }
        swift_bridgeObjectRelease(v28);
        v40 = v52;
        v5 = v49;
        v3 = v50;
        if (v52 < 0)
          goto LABEL_53;
        goto LABEL_42;
      }
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
  }
  else
  {
    v31 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v31)
      goto LABEL_26;
  }
  swift_bridgeObjectRelease(v28);
  v40 = (unint64_t)_swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_53;
LABEL_42:
  if ((v40 & 0x4000000000000000) == 0)
  {
    v42 = *(_QWORD *)(v40 + 16);
    if (!v42)
    {
LABEL_54:
      swift_release(v40);

      return _swiftEmptyArrayStorage;
    }
    goto LABEL_44;
  }
LABEL_53:
  v48 = swift_bridgeObjectRetain(v40);
  v42 = _CocoaArrayWrapper.endIndex.getter(v48);
  swift_release(v40);
  if (!v42)
    goto LABEL_54;
LABEL_44:
  v52 = (uint64_t)_swiftEmptyArrayStorage;
  result = (id *)sub_10002DAD4(0, v42 & ~(v42 >> 63), 0);
  if ((v42 & 0x8000000000000000) == 0)
  {
    v43 = 0;
    v29 = v52;
    do
    {
      if ((v40 & 0xC000000000000001) != 0)
        v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v40);
      else
        v44 = *(id *)(v40 + 8 * v43 + 32);
      sub_10005BF8C(v44, 0, 0, 0, 255, (uint64_t)v5);
      v52 = v29;
      v45 = (uint64_t)v5;
      v47 = *(_QWORD *)(v29 + 16);
      v46 = *(_QWORD *)(v29 + 24);
      if (v47 >= v46 >> 1)
      {
        sub_10002DAD4(v46 > 1, v47 + 1, 1);
        v29 = v52;
      }
      ++v43;
      *(_QWORD *)(v29 + 16) = v47 + 1;
      sub_10000AEE0(v45, v29+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v47, type metadata accessor for Note);
      v5 = (char *)v45;
    }
    while (v42 != v43);
    swift_release(v40);

    return (id *)v29;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_10002F470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002F4EC(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for TimelineProviderContext(0);
  return sub_10002BA98(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t *sub_10002F530(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  char *__dst;
  char *v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = (int *)type metadata accessor for Note(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 2, v7))
    {
      v9 = sub_100009F30(&qword_10008B168);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      v13 = a2[5];
      a1[4] = a2[4];
      a1[5] = v13;
      v47 = a2[7];
      v48 = v8;
      a1[6] = a2[6];
      a1[7] = v47;
      v14 = a2[9];
      a1[8] = a2[8];
      a1[9] = v14;
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      v15 = a2[12];
      a1[11] = a2[11];
      a1[12] = v15;
      v16 = v7[11];
      __dst = (char *)a1 + v16;
      v45 = (char *)a2 + v16;
      v17 = type metadata accessor for URL(0);
      v43 = *(_QWORD *)(v17 - 8);
      v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      if (v46(v45, 1, v17))
      {
        v18 = sub_100009F30(&qword_10008B170);
        memcpy(__dst, v45, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(__dst, v45, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v17);
      }
      v19 = v7[12];
      v20 = *(uint64_t *)((char *)a2 + v19);
      *(uint64_t *)((char *)a1 + v19) = v20;
      v21 = v7[13];
      v22 = *(uint64_t *)((char *)a2 + v21);
      *(uint64_t *)((char *)a1 + v21) = v22;
      v23 = v7[14];
      v24 = *(uint64_t *)((char *)a2 + v23);
      *(uint64_t *)((char *)a1 + v23) = v24;
      v25 = v7[15];
      v26 = *(uint64_t *)((char *)a2 + v25);
      *(uint64_t *)((char *)a1 + v25) = v26;
      *((_BYTE *)a1 + v7[16]) = *((_BYTE *)a2 + v7[16]);
      v27 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v48 + 56);
      swift_retain(v20);
      swift_bridgeObjectRetain(v22);
      swift_retain(v24);
      swift_retain(v26);
      v27(a1, 0, 2, v7);
    }
    v28 = a3[5];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = sub_100009F30(&qword_10008C7A0);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = v29;
      v34 = v31;
      v35 = 1;
    }
    else
    {
      v36 = *v30;
      *v29 = *v30;
      swift_retain(v36);
      v33 = v29;
      v34 = v31;
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v33, v34, v35);
    v37 = a3[6];
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    v40 = *(_QWORD *)v39;
    v41 = v39[8];
    sub_10000B2CC(*(_QWORD *)v39, v41);
    *(_QWORD *)v38 = v40;
    v38[8] = v41;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_10002F824(_QWORD *a1, uint64_t a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (int *)type metadata accessor for Note(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(a1, 2, v4))
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[3]);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[12]);
    v5 = (char *)a1 + v4[11];
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
      (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    swift_release(*(_QWORD *)((char *)a1 + v4[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[13]));
    swift_release(*(_QWORD *)((char *)a1 + v4[14]));
    swift_release(*(_QWORD *)((char *)a1 + v4[15]));
  }
  v8 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v9 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  return sub_10000B470(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)), *((_BYTE *)a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_10002F97C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  char *v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v46;
  int *v47;

  v6 = (int *)type metadata accessor for Note(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    v8 = sub_100009F30(&qword_10008B168);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v46 = v7;
    v47 = a3;
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    v11 = a2[5];
    a1[4] = a2[4];
    a1[5] = v11;
    v12 = a2[7];
    a1[6] = a2[6];
    a1[7] = v12;
    v13 = a2[9];
    a1[8] = a2[8];
    a1[9] = v13;
    *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    v14 = a2[12];
    a1[11] = a2[11];
    a1[12] = v14;
    v15 = v6[11];
    __dst = (char *)a1 + v15;
    v43 = (char *)a2 + v15;
    v16 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v16 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    if (v44(v43, 1, v16))
    {
      v17 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dst, v43, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v16);
    }
    v18 = v6[12];
    v19 = *(_QWORD *)((char *)a2 + v18);
    *(_QWORD *)((char *)a1 + v18) = v19;
    v20 = v6[13];
    v21 = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)a1 + v20) = v21;
    v22 = v6[14];
    v23 = *(_QWORD *)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v23;
    v24 = v6[15];
    v25 = *(_QWORD *)((char *)a2 + v24);
    *(_QWORD *)((char *)a1 + v24) = v25;
    *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
    v26 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v46 + 56);
    swift_retain(v19);
    swift_bridgeObjectRetain(v21);
    swift_retain(v23);
    swift_retain(v25);
    v26(a1, 0, 2, v6);
    a3 = v47;
  }
  v27 = a3[5];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
    v32 = v28;
    v33 = v30;
    v34 = 1;
  }
  else
  {
    v35 = *v29;
    *v28 = *v29;
    swift_retain(v35);
    v32 = v28;
    v33 = v30;
    v34 = 0;
  }
  swift_storeEnumTagMultiPayload(v32, v33, v34);
  v36 = a3[6];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v40 = v38[8];
  sub_10000B2CC(*(_QWORD *)v38, v40);
  *(_QWORD *)v37 = v39;
  v37[8] = v40;
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_10002FC50(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v79;
  char *v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  char *__dst;
  int *v84;

  v6 = (int *)type metadata accessor for Note(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_1000301BC((uint64_t)a1);
LABEL_7:
      v19 = sub_100009F30(&qword_10008B168);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      if (a1 == a2)
        goto LABEL_23;
      goto LABEL_19;
    }
    *a1 = *a2;
    v20 = a2[1];
    v21 = a1[1];
    a1[1] = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v21);
    a1[2] = a2[2];
    v22 = a2[3];
    v23 = a1[3];
    a1[3] = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease(v23);
    a1[4] = a2[4];
    v24 = a2[5];
    v25 = a1[5];
    a1[5] = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v25);
    a1[6] = a2[6];
    v26 = a2[7];
    v27 = a1[7];
    a1[7] = v26;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease(v27);
    a1[8] = a2[8];
    v28 = a2[9];
    v29 = a1[9];
    a1[9] = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
    *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    a1[11] = a2[11];
    v30 = a2[12];
    v31 = a1[12];
    a1[12] = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
    v32 = v6[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = type metadata accessor for URL(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37(v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        goto LABEL_18;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_18:
        v50 = v6[12];
        v51 = *(_QWORD *)((char *)a1 + v50);
        v52 = *(_QWORD *)((char *)a2 + v50);
        *(_QWORD *)((char *)a1 + v50) = v52;
        swift_retain(v52);
        swift_release(v51);
        v53 = v6[13];
        v54 = *(_QWORD *)((char *)a2 + v53);
        v55 = *(_QWORD *)((char *)a1 + v53);
        *(_QWORD *)((char *)a1 + v53) = v54;
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRelease(v55);
        v56 = v6[14];
        v57 = *(_QWORD *)((char *)a1 + v56);
        v58 = *(_QWORD *)((char *)a2 + v56);
        *(_QWORD *)((char *)a1 + v56) = v58;
        swift_retain(v58);
        swift_release(v57);
        v59 = v6[15];
        v60 = *(_QWORD *)((char *)a1 + v59);
        v61 = *(_QWORD *)((char *)a2 + v59);
        *(_QWORD *)((char *)a1 + v59) = v61;
        swift_retain(v61);
        swift_release(v60);
        *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
        if (a1 == a2)
          goto LABEL_23;
        goto LABEL_19;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    }
    v49 = sub_100009F30(&qword_10008B170);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
    goto LABEL_7;
  v84 = a3;
  *a1 = *a2;
  v11 = a2[1];
  a1[1] = v11;
  a1[2] = a2[2];
  v12 = a2[3];
  a1[3] = v12;
  a1[4] = a2[4];
  v13 = a2[5];
  a1[5] = v13;
  a1[6] = a2[6];
  v14 = a2[7];
  a1[7] = v14;
  a1[8] = a2[8];
  v82 = a2[9];
  a1[9] = v82;
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  a1[11] = a2[11];
  v15 = a2[12];
  a1[12] = v15;
  v16 = v6[11];
  __dst = (char *)a1 + v16;
  v80 = (char *)a2 + v16;
  v17 = type metadata accessor for URL(0);
  v79 = *(_QWORD *)(v17 - 8);
  v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v15);
  if (v81(v80, 1, v17))
  {
    v18 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v80, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v80, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v17);
  }
  v40 = v6[12];
  v41 = *(_QWORD *)((char *)a2 + v40);
  *(_QWORD *)((char *)a1 + v40) = v41;
  v42 = v6[13];
  v43 = *(_QWORD *)((char *)a2 + v42);
  *(_QWORD *)((char *)a1 + v42) = v43;
  v44 = v6[14];
  v45 = *(_QWORD *)((char *)a2 + v44);
  *(_QWORD *)((char *)a1 + v44) = v45;
  v46 = v6[15];
  v47 = *(_QWORD *)((char *)a2 + v46);
  *(_QWORD *)((char *)a1 + v46) = v47;
  *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
  v48 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56);
  swift_retain(v41);
  swift_bridgeObjectRetain(v43);
  swift_retain(v45);
  swift_retain(v47);
  v48(a1, 0, 2, v6);
  a3 = v84;
  if (a1 != a2)
  {
LABEL_19:
    v62 = a3[5];
    v63 = (_QWORD *)((char *)a1 + v62);
    v64 = (_QWORD *)((char *)a2 + v62);
    sub_10000CCD8((uint64_t)a1 + v62, &qword_10008C7A0);
    v65 = sub_100009F30(&qword_10008C7A0);
    if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
    {
      v66 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v63, v64, v66);
      v67 = v63;
      v68 = v65;
      v69 = 1;
    }
    else
    {
      v70 = *v64;
      *v63 = *v64;
      swift_retain(v70);
      v67 = v63;
      v68 = v65;
      v69 = 0;
    }
    swift_storeEnumTagMultiPayload(v67, v68, v69);
  }
LABEL_23:
  v71 = a3[6];
  v72 = (char *)a1 + v71;
  v73 = (char *)a2 + v71;
  v74 = *(_QWORD *)v73;
  v75 = v73[8];
  sub_10000B2CC(*(_QWORD *)v73, v75);
  v76 = *(_QWORD *)v72;
  v77 = v72[8];
  *(_QWORD *)v72 = v74;
  v72[8] = v75;
  sub_10000B470(v76, v77);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_1000301BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Note(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_1000301F8(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = (int *)type metadata accessor for Note(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    v8 = sub_100009F30(&qword_10008B168);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    a1[4] = a2[4];
    *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
    v11 = v6[11];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100009F30(&qword_10008B170);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    *(_QWORD *)((char *)a1 + v6[12]) = *(_QWORD *)((char *)a2 + v6[12]);
    *(_QWORD *)((char *)a1 + v6[13]) = *(_QWORD *)((char *)a2 + v6[13]);
    *(_QWORD *)((char *)a1 + v6[14]) = *(_QWORD *)((char *)a2 + v6[14]);
    *(_QWORD *)((char *)a1 + v6[15]) = *(_QWORD *)((char *)a2 + v6[15]);
    *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  v17 = a3[5];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
    swift_storeEnumTagMultiPayload(v18, v20, 1);
  }
  else
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  v22 = a3[6];
  v23 = a3[7];
  v24 = (char *)a1 + v22;
  v25 = (char *)a2 + v22;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
  return a1;
}

_QWORD *sub_100030428(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, int *);
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v6 = (int *)type metadata accessor for Note(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_1000301BC((uint64_t)a1);
LABEL_7:
      v19 = sub_100009F30(&qword_10008B168);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      if (a1 == a2)
        goto LABEL_22;
      goto LABEL_19;
    }
    v20 = a2[1];
    v21 = a1[1];
    *a1 = *a2;
    a1[1] = v20;
    swift_bridgeObjectRelease(v21);
    v22 = a2[3];
    v23 = a1[3];
    a1[2] = a2[2];
    a1[3] = v22;
    swift_bridgeObjectRelease(v23);
    v24 = a2[5];
    v25 = a1[5];
    a1[4] = a2[4];
    a1[5] = v24;
    swift_bridgeObjectRelease(v25);
    v26 = a2[7];
    v27 = a1[7];
    a1[6] = a2[6];
    a1[7] = v26;
    swift_bridgeObjectRelease(v27);
    v28 = a2[9];
    v29 = a1[9];
    a1[8] = a2[8];
    a1[9] = v28;
    swift_bridgeObjectRelease(v29);
    *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    v30 = a2[12];
    v31 = a1[12];
    a1[11] = a2[11];
    a1[12] = v30;
    swift_bridgeObjectRelease(v31);
    v32 = v6[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = type metadata accessor for URL(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37(v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        goto LABEL_18;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
LABEL_18:
        v41 = v6[12];
        v42 = *(_QWORD *)((char *)a1 + v41);
        *(_QWORD *)((char *)a1 + v41) = *(_QWORD *)((char *)a2 + v41);
        swift_release(v42);
        v43 = v6[13];
        v44 = *(_QWORD *)((char *)a1 + v43);
        *(_QWORD *)((char *)a1 + v43) = *(_QWORD *)((char *)a2 + v43);
        swift_bridgeObjectRelease(v44);
        v45 = v6[14];
        v46 = *(_QWORD *)((char *)a1 + v45);
        *(_QWORD *)((char *)a1 + v45) = *(_QWORD *)((char *)a2 + v45);
        swift_release(v46);
        v47 = v6[15];
        v48 = *(_QWORD *)((char *)a1 + v47);
        *(_QWORD *)((char *)a1 + v47) = *(_QWORD *)((char *)a2 + v47);
        swift_release(v48);
        *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
        if (a1 == a2)
          goto LABEL_22;
        goto LABEL_19;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    }
    v40 = sub_100009F30(&qword_10008B170);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
    goto LABEL_7;
  v11 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  v12 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v12;
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  v13 = v6[11];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100009F30(&qword_10008B170);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  *(_QWORD *)((char *)a1 + v6[12]) = *(_QWORD *)((char *)a2 + v6[12]);
  *(_QWORD *)((char *)a1 + v6[13]) = *(_QWORD *)((char *)a2 + v6[13]);
  *(_QWORD *)((char *)a1 + v6[14]) = *(_QWORD *)((char *)a2 + v6[14]);
  *(_QWORD *)((char *)a1 + v6[15]) = *(_QWORD *)((char *)a2 + v6[15]);
  *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  if (a1 != a2)
  {
LABEL_19:
    v49 = a3[5];
    v50 = (char *)a1 + v49;
    v51 = (char *)a2 + v49;
    sub_10000CCD8((uint64_t)a1 + v49, &qword_10008C7A0);
    v52 = sub_100009F30(&qword_10008C7A0);
    if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
    {
      v53 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v50, v51, v53);
      swift_storeEnumTagMultiPayload(v50, v52, 1);
    }
    else
    {
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
  }
LABEL_22:
  v54 = a3[6];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = *(_QWORD *)v56;
  LOBYTE(v56) = v56[8];
  v58 = *(_QWORD *)v55;
  v59 = v55[8];
  *(_QWORD *)v55 = v57;
  v55[8] = (char)v56;
  sub_10000B470(v58, v59);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_100030844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100030850);
}

uint64_t sub_100030850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = sub_100009F30(&qword_10008B168);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100009F30(&qword_10008C798);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 > 1)
    return (v14 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100030900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003090C);
}

uint64_t sub_10003090C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100009F30(&qword_10008B168);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100009F30(&qword_10008C798);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for NoteWidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_10008CB18;
  if (!qword_10008CB18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NoteWidgetView);
  return result;
}

void sub_1000309F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_10000C2F0(319, (unint64_t *)&qword_10008B1E0, type metadata accessor for Note, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ObjectStates);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000C2F0(319, (unint64_t *)&unk_10008CB28, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\t";
      v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_100030AC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F6A4, 1);
}

uint64_t sub_100030AD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  void *v146;

  v118 = a1;
  v2 = sub_100009F30(&qword_10008B170);
  v3 = __chkstk_darwin(v2);
  v116 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v117 = (char *)&v106 - v5;
  v6 = sub_100009F30(&qword_10008B168);
  v7 = __chkstk_darwin(v6);
  v115 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v135 = (uint64_t)&v106 - v10;
  __chkstk_darwin(v9);
  v133 = (char *)&v106 - v11;
  v142 = type metadata accessor for Note(0);
  v134 = *(_QWORD *)(v142 - 8);
  v12 = __chkstk_darwin(v142);
  v109 = (uint64_t)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v108 = (uint64_t)&v106 - v15;
  __chkstk_darwin(v14);
  v107 = (uint64_t)&v106 - v16;
  v139 = type metadata accessor for AccessibilityChildBehavior(0);
  v131 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v130 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for ContainerBackgroundPlacement(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for ContentSizeCategory(0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v20 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Font.TextStyle(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100009F30(&qword_10008CB60);
  __chkstk_darwin(v25);
  v27 = (char *)&v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100009F30(&qword_10008CB68);
  __chkstk_darwin(v28);
  v30 = (char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100009F30(&qword_10008CB70);
  v123 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v32 = (char *)&v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100009F30(&qword_10008CB78);
  v125 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v119 = (char *)&v106 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100009F30(&qword_10008CB80);
  v129 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v138 = (char *)&v106 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100009F30(&qword_10008CB88);
  v35 = __chkstk_darwin(v113);
  v140 = (char *)&v106 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v132 = (char *)&v106 - v37;
  v114 = sub_100009F30(&qword_10008CB90);
  v112 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v141 = (char *)&v106 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100009F30(&qword_10008CB98);
  v137 = *(_QWORD *)(v111 - 8);
  v39 = __chkstk_darwin(v111);
  v136 = (char *)&v106 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v27 = static HorizontalAlignment.leading.getter(v39);
  *((_QWORD *)v27 + 1) = 0;
  v27[16] = 0;
  v41 = sub_100009F30(&qword_10008CBA0);
  sub_1000315EC(v1, (uint64_t)&v27[*(int *)(v41 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for Font.TextStyle.footnote(_:), v21);
  v42 = static Font.systemSingleLineA(_:)(v24);
  v43 = v24;
  v44 = v1;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v43, v21);
  KeyPath = swift_getKeyPath(&unk_10006AE30);
  sub_10000CC94((uint64_t)v27, (uint64_t)v30, &qword_10008CB60);
  v46 = (uint64_t *)&v30[*(int *)(v28 + 36)];
  *v46 = KeyPath;
  v46[1] = v42;
  sub_10000CCD8((uint64_t)v27, &qword_10008CB60);
  v47 = v121;
  v48 = v122;
  (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v20, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v122);
  v49 = sub_100033CC8();
  View.maximumSizeCategory(_:)(v20, v28, v49);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v48);
  v50 = sub_10000CCD8((uint64_t)v30, &qword_10008CB68);
  v51 = v126;
  v52 = static ContainerBackgroundPlacement.widget.getter(v50);
  v53 = static Alignment.center.getter(v52);
  v55 = v54;
  v143 = v28;
  v144 = (void *)v49;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
  v57 = v119;
  v58 = v55;
  v59 = v120;
  View.containerBackground<A>(for:alignment:content:)(v51, v53, v58, sub_10003213C, 0, v120, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v51, v128);
  v60 = (*(uint64_t (**)(char *, uint64_t))(v123 + 8))(v32, v59);
  v61 = v130;
  static AccessibilityChildBehavior.ignore.getter(v60);
  v143 = v59;
  v144 = &type metadata for Color;
  v145 = OpaqueTypeConformance2;
  v146 = &protocol witness table for Color;
  v62 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v63 = v61;
  v64 = v124;
  View.accessibilityElement(children:)(v61, v124, v62);
  v65 = (uint64_t)v133;
  (*(void (**)(char *, uint64_t))(v131 + 8))(v63, v139);
  v66 = v64;
  (*(void (**)(char *, uint64_t))(v125 + 8))(v57, v64);
  v139 = v44;
  sub_10000CC94(v44, v65, &qword_10008B168);
  v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
  if (v67(v65, 2, v142))
  {
    v68 = 0;
    v69 = 0xE000000000000000;
  }
  else
  {
    v70 = v107;
    sub_10000AEE0(v65, v107, type metadata accessor for Note);
    v68 = sub_10005BC54();
    v69 = v71;
    sub_1000301BC(v70);
  }
  v72 = v117;
  v73 = v116;
  v74 = (uint64_t)v115;
  v75 = v113;
  v76 = v110;
  v143 = v66;
  v144 = (void *)v62;
  v77 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v78 = v68;
  v79 = v138;
  View.accessibility(label:)(v78, v69, 0, _swiftEmptyArrayStorage, v76, v77);
  v80 = swift_bridgeObjectRelease(v69);
  (*(void (**)(char *, uint64_t, __n128))(v129 + 8))(v79, v76, v80);
  v81 = v135;
  sub_10000CC94(v139, v135, &qword_10008B168);
  if (v67(v81, 2, v142))
  {
    v82 = 0;
    v83 = 0xE000000000000000;
  }
  else
  {
    v84 = v108;
    sub_10000AEE0(v81, v108, type metadata accessor for Note);
    v82 = *(_QWORD *)(v84 + 32);
    v83 = *(_QWORD *)(v84 + 40);
    swift_bridgeObjectRetain(v83);
    sub_1000301BC(v84);
  }
  v85 = (uint64_t)v73;
  v86 = (uint64_t)v72;
  v87 = (uint64_t)v132;
  v88 = v82;
  v89 = (uint64_t)v140;
  ModifiedContent<>.accessibility(value:)(v88, v83, 0, _swiftEmptyArrayStorage, v75);
  swift_bridgeObjectRelease(v83);
  sub_10000CCD8(v89, &qword_10008CB88);
  v90 = sub_100033D64();
  View.privacySensitive(_:)(1, v75, v90);
  sub_10000CCD8(v87, &qword_10008CB88);
  sub_10000CC94(v139, v74, &qword_10008B168);
  if (v67(v74, 2, v142))
  {
    v91 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v85, 1, 1, v91);
    v92 = v118;
    v93 = v114;
    v94 = v112;
    v95 = v111;
  }
  else
  {
    v96 = v109;
    sub_10000AEE0(v74, v109, type metadata accessor for Note);
    sub_10000CC94(v96 + *(int *)(v142 + 44), v85, &qword_10008B170);
    sub_1000301BC(v96);
    v97 = type metadata accessor for URL(0);
    v98 = *(_QWORD *)(v97 - 8);
    v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v85, 1, v97);
    v92 = v118;
    v93 = v114;
    v94 = v112;
    v95 = v111;
    if (v99 != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32))(v86, v85, v97);
      goto LABEL_12;
    }
  }
  v100 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForFolderList");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v100);

  sub_10000CCD8(v85, &qword_10008B170);
LABEL_12:
  v101 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v86, 0, 1, v101);
  v143 = v75;
  v144 = (void *)v90;
  v102 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v103 = v136;
  v104 = v141;
  View.widgetURL(_:)(v86, v93, v102);
  sub_10000CCD8(v86, &qword_10008B170);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v104, v93);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v137 + 32))(v92, v103, v95);
}

uint64_t sub_1000315EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  __n128 v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  __n128 v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  __n128 v57;
  unsigned __int8 v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _BYTE v80[4];
  int v81;
  double v82;
  double v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  unsigned __int8 v110;
  char v111;
  char v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  _QWORD v115[36];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  char v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  char v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;

  v95 = (_BYTE *)a2;
  v3 = sub_100009F30(&qword_10008C798);
  __chkstk_darwin(v3);
  v5 = &v80[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v6);
  v8 = &v80[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (int *)type metadata accessor for WidgetHeader(0);
  v107 = *((_QWORD *)v9 - 1);
  __chkstk_darwin(v9);
  v11 = &v80[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100009F30(&qword_10008CBC0);
  v13 = __chkstk_darwin(v12);
  v109 = &v80[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v16 = &v80[-v15];
  v17 = *(int *)(type metadata accessor for NoteWidgetView(0) + 24);
  v108 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_10000B2CC(*(_QWORD *)v18, v20);
  v21 = sub_1000337B0(v19, v20);
  sub_10000B470(v19, v20);
  if ((v21 & 1) != 0)
  {
    v22 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 1, 1, v22);
    KeyPath = swift_getKeyPath(&unk_10006AE60);
    *v5 = swift_getKeyPath(&unk_10006AE88);
    v24 = sub_100009F30(&qword_10008C7A0);
    swift_storeEnumTagMultiPayload(v5, v24, 0);
    *v11 = swift_getKeyPath(&unk_10006AEB8);
    v25 = sub_100009F30(&qword_10008CBD0);
    swift_storeEnumTagMultiPayload(v11, v25, 0);
    v26 = (_QWORD *)((char *)v11 + v9[5]);
    *v26 = swift_getKeyPath(&unk_10006AEE8);
    v27 = sub_100009F30(&qword_10008B260);
    swift_storeEnumTagMultiPayload(v26, v27, 0);
    v28 = (char *)v11 + v9[6];
    *(_QWORD *)v28 = KeyPath;
    v28[8] = 0;
    sub_10000CC50((uint64_t)v5, (uint64_t)v11 + v9[7], &qword_10008C798);
    sub_10000CC50((uint64_t)v8, (uint64_t)v11 + v9[8], &qword_10008B170);
    *(_QWORD *)((char *)v11 + v9[9]) = 0;
    *(_OWORD *)((char *)v11 + v9[10]) = xmmword_10006AD70;
    *(_QWORD *)((char *)v11 + v9[11]) = 0;
    sub_10000AEE0((uint64_t)v11, (uint64_t)v16, type metadata accessor for WidgetHeader);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  v30 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, int *))(v107 + 56))(v16, v29, 1, v9);
  v96 = static HorizontalAlignment.leading.getter(v30);
  v31 = sub_100031CA8(v108, (uint64_t)&v116);
  v32 = v116;
  v93 = v118;
  v94 = v117;
  v91 = v120;
  v92 = v119;
  v89 = v122;
  v90 = v121;
  v88 = v123;
  v107 = v125;
  v108 = v124;
  v105 = v127;
  v106 = v126;
  v103 = v129;
  v104 = v128;
  v33 = v130;
  v102 = static Edge.Set.horizontal.getter(v31);
  v34 = *(_QWORD *)v18;
  v35 = *(_BYTE *)(v18 + 8);
  sub_10000B2CC(*(_QWORD *)v18, v35);
  v36 = sub_1000337B0(v34, v35);
  v37 = sub_10000B470(v34, v35);
  if ((v36 & 1) != 0)
    v38.n128_f64[0] = 16.0;
  else
    v38.n128_f64[0] = 0.0;
  v39 = EdgeInsets.init(_all:)(v37, v38);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v101 = static Edge.Set.bottom.getter();
  sub_10000B2CC(v34, v35);
  v46 = sub_1000337B0(v34, v35);
  v47 = sub_10000B470(v34, v35);
  if ((v46 & 1) != 0)
    v48.n128_f64[0] = 16.0;
  else
    v48.n128_f64[0] = 0.0;
  v49 = EdgeInsets.init(_all:)(v47, v48);
  v83 = v49;
  v51 = v50;
  v86 = v53;
  v87 = v52;
  v100 = static Edge.Set.top.getter(v54);
  sub_10000B2CC(v34, v35);
  v55 = sub_1000337B0(v34, v35);
  v56 = sub_10000B470(v34, v35);
  v57.n128_u64[0] = 14.0;
  if ((v55 & 1) == 0)
    v57.n128_f64[0] = 0.0;
  v111 = 0;
  v110 = v33;
  v58 = v33;
  v84 = v33;
  v112 = 0;
  v113 = 0;
  v59 = EdgeInsets.init(_all:)(v56, v57);
  v82 = v59;
  v85 = v60;
  v98 = v62;
  v99 = v61;
  v97 = v113;
  v114 = 0;
  v63 = v109;
  sub_10000CC94((uint64_t)v16, (uint64_t)v109, &qword_10008CBC0);
  v81 = v114;
  v64 = (uint64_t)v95;
  sub_10000CC94((uint64_t)v63, (uint64_t)v95, &qword_10008CBC0);
  v65 = (void *)(v64 + *(int *)(sub_100009F30(&qword_10008CBC8) + 48));
  v115[0] = v96;
  v115[1] = 0;
  LOBYTE(v115[2]) = 0;
  v95 = v16;
  v66 = v32;
  v67 = v93;
  v68 = v94;
  v115[3] = v32;
  v115[4] = v94;
  v70 = v91;
  v69 = v92;
  v115[5] = v93;
  v115[6] = v92;
  v71 = v89;
  v72 = v90;
  v115[7] = v91;
  v115[8] = v90;
  v73 = v88;
  v115[9] = v89;
  v115[10] = v88;
  v115[11] = v108;
  v115[12] = v107;
  v115[13] = v106;
  v115[14] = v105;
  v115[15] = v104;
  v115[16] = v103;
  LOBYTE(v115[17]) = v58;
  LOBYTE(v115[18]) = v102;
  *(double *)&v115[19] = v39;
  v115[20] = v41;
  v115[21] = v43;
  v115[22] = v45;
  LOBYTE(v115[23]) = 0;
  LOBYTE(v115[24]) = v101;
  *(double *)&v115[25] = v49;
  v115[26] = v51;
  v74 = v51;
  v76 = v86;
  v75 = v87;
  v115[27] = v87;
  v115[28] = v86;
  LOBYTE(v115[29]) = v97;
  LOBYTE(v115[30]) = v100;
  *(double *)&v115[31] = v59;
  v77 = v85;
  v115[32] = v85;
  v115[33] = v99;
  v115[34] = v98;
  v78 = v81;
  LOBYTE(v115[35]) = v81;
  memcpy(v65, v115, 0x119uLL);
  sub_100033F4C((uint64_t)v115, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100033E7C);
  sub_10000CCD8((uint64_t)v95, &qword_10008CBC0);
  v116 = v96;
  v117 = 0;
  LOBYTE(v118) = 0;
  v119 = v66;
  v120 = v68;
  v121 = v67;
  v122 = v69;
  v123 = v70;
  v124 = v72;
  v125 = v71;
  v126 = v73;
  v127 = v108;
  v128 = v107;
  v129 = v106;
  v130 = v105;
  v131 = v104;
  v132 = v103;
  v133 = v84;
  v134 = v102;
  v135 = v39;
  v136 = v41;
  v137 = v43;
  v138 = v45;
  v139 = 0;
  v140 = v101;
  v141 = v83;
  v142 = v74;
  v143 = v75;
  v144 = v76;
  v145 = v97;
  v146 = v100;
  v147 = v82;
  v148 = v77;
  v149 = v99;
  v150 = v98;
  v151 = v78;
  sub_100033F4C((uint64_t)&v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100033FAC);
  return sub_10000CCD8((uint64_t)v109, &qword_10008CBC0);
}

double sub_100031CA8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  double result;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  __int128 v60;
  _BYTE v61[64];
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;

  v4 = type metadata accessor for NoteWidgetView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000CC94(a1, (uint64_t)v10, &qword_10008B168);
  v11 = type metadata accessor for Note(0);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 2, v11);
  if (!v12)
  {
    sub_10000CCD8((uint64_t)v10, &qword_10008B168);
    goto LABEL_6;
  }
  if (v12 != 1)
  {
LABEL_6:
    sub_10000AF24(a1, (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NoteWidgetView);
    v18 = *(unsigned __int8 *)(v5 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_100085018, v19 + v6, v18 | 7);
    v21 = sub_10000AEE0((uint64_t)v7, v20 + v19, type metadata accessor for NoteWidgetView);
    v57 = static VerticalAlignment.center.getter(v21);
    sub_100033484(a1, (uint64_t)&v63);
    v22 = v63;
    v23 = v64;
    v24 = BYTE8(v64);
    v58 = a2;
    v25 = *((_QWORD *)&v65 + 1);
    v26 = v65;
    v27 = v66;
    v28 = HIDWORD(v64);
    swift_retain(v63);
    swift_retain(*((_QWORD *)&v22 + 1));
    swift_bridgeObjectRetain(v27);
    swift_retain(v20);
    *(_QWORD *)&v59[0] = sub_100034328;
    *((_QWORD *)&v59[0] + 1) = v20;
    v59[1] = xmmword_10006AD90;
    v60 = (unint64_t)v57;
    *(_QWORD *)v61 = 0;
    *(_OWORD *)&v61[8] = v22;
    *(_QWORD *)&v61[24] = v23;
    *(_QWORD *)&v61[32] = v24 | (v28 << 32);
    *(_OWORD *)&v61[40] = __PAIR128__(v25, v26);
    a2 = v58;
    *(_QWORD *)&v61[56] = v27;
    v62 = 0;
    v29 = sub_100009F30(&qword_10008CC08);
    v30 = sub_100009F30(&qword_10008CC10);
    v31 = sub_10000CC08(&qword_10008CC18, &qword_10008CC08, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v32 = sub_100034108();
    _ConditionalContent<>.init(storage:)(v59, v29, v30, v31, v32);
    swift_release(v20);
    swift_bridgeObjectRelease(v27);
    swift_release(*((_QWORD *)&v22 + 1));
    swift_release(v22);
    goto LABEL_11;
  }
  v13 = a1 + *(int *)(v4 + 24);
  v14 = *(_QWORD *)v13;
  v15 = *(_BYTE *)(v13 + 8);
  sub_10000B2CC(*(_QWORD *)v13, v15);
  v16 = sub_1000337B0(v14, v15);
  v17 = sub_10000B470(v14, v15);
  if ((v16 & 1) != 0)
  {
    sub_100032160((uint64_t)&v63);
    v59[0] = v63;
    *(_QWORD *)&v59[1] = v64;
    *((_QWORD *)&v59[1] + 1) = *((_QWORD *)&v64 + 1);
    *(_QWORD *)&v60 = v65;
    *((_QWORD *)&v60 + 1) = BYTE8(v65);
    memset(v61, 0, 58);
  }
  else
  {
    v33 = static HorizontalAlignment.leading.getter(v17);
    v34 = static VerticalAlignment.center.getter(v33);
    sub_100032298(a1, (uint64_t)&v63);
    v35 = v63;
    v36 = v64;
    v38 = *((_QWORD *)&v64 + 1);
    v37 = v65;
    v39 = BYTE8(v65);
    sub_10000AFB4(v63, *((uint64_t *)&v63 + 1), v64);
    swift_bridgeObjectRetain(v38);
    sub_10000AFA4(v35, *((uint64_t *)&v35 + 1), v36);
    swift_bridgeObjectRelease(v38);
    *(_QWORD *)&v59[0] = v33;
    *(_OWORD *)((char *)v59 + 8) = xmmword_10006AD80;
    *((_QWORD *)&v59[1] + 1) = v34;
    v60 = xmmword_10006AD80;
    *(_OWORD *)v61 = v35;
    *(_QWORD *)&v61[16] = v36;
    *(_QWORD *)&v61[24] = v38;
    *(_QWORD *)&v61[32] = v37;
    *(_QWORD *)&v61[40] = v39;
    *(_QWORD *)&v61[48] = 0;
    *(_WORD *)&v61[56] = 257;
  }
  v40 = sub_100009F30(&qword_10008CBD8);
  v41 = sub_100009F30(&qword_10008CBE0);
  v42 = sub_10003408C();
  v43 = sub_10000CC08(&qword_10008CC00, &qword_10008CBE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  _ConditionalContent<>.init(storage:)(v59, v40, v41, v42, v43);
  v59[0] = v63;
  v59[1] = v64;
  v44 = 256;
  if (!BYTE9(v69))
    v44 = 0;
  v60 = v65;
  *(_OWORD *)v61 = v66;
  *(_OWORD *)&v61[16] = v67;
  *(_OWORD *)&v61[32] = v68;
  *(_QWORD *)&v61[48] = v69;
  *(_QWORD *)&v61[56] = v44 | BYTE8(v69);
  v62 = 1;
  v45 = sub_100009F30(&qword_10008CC08);
  v46 = sub_100009F30(&qword_10008CC10);
  v47 = sub_10000CC08(&qword_10008CC18, &qword_10008CC08, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v48 = sub_100034108();
  _ConditionalContent<>.init(storage:)(v59, v45, v46, v47, v48);
LABEL_11:
  result = *(double *)&v63;
  v50 = v64;
  v51 = v65;
  v52 = v66;
  v53 = v67;
  v54 = v68;
  v55 = v69;
  v56 = v70;
  *(_OWORD *)a2 = v63;
  *(_OWORD *)(a2 + 16) = v50;
  *(_OWORD *)(a2 + 32) = v51;
  *(_OWORD *)(a2 + 48) = v52;
  *(_OWORD *)(a2 + 64) = v53;
  *(_OWORD *)(a2 + 80) = v54;
  *(_OWORD *)(a2 + 96) = v55;
  *(_BYTE *)(a2 + 112) = v56;
  return result;
}

uint64_t sub_10003213C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Color.background.getter();
  *a1 = result;
  return result;
}

double sub_100032160@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  double result;
  int v18;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000018, 0x800000010006CC90);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v18 = static HierarchicalShapeStyle.secondary.getter(v3, v4);
  v10 = Text.foregroundStyle<A>(_:)(&v18, v3, v5, v9, v7, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  sub_10000AFA4(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  sub_10000AFB4(v10, v12, v16);
  swift_bridgeObjectRetain(v14);
  sub_10000AFA4(v10, v12, v16);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
  return result;
}

double sub_100032298@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  double result;
  uint64_t v28;

  v4 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000018, 0x800000010006CC90);
  v5 = Text.init(_:tableName:bundle:comment:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = a1 + *(int *)(type metadata accessor for NoteWidgetView(0) + 24);
  v13 = *(_QWORD *)v12;
  v14 = *(_BYTE *)(v12 + 8);
  sub_10000B2CC(*(_QWORD *)v12, v14);
  v15 = sub_1000337B0(v13, v14);
  v16 = sub_10000B470(v13, v14);
  if ((v15 & 1) != 0)
    v17 = static Color.primary.getter(v16);
  else
    v17 = static Color.white.getter(v16);
  v18 = v17;
  v19 = v9 & 1;
  v28 = v17;
  v20 = Text.foregroundStyle<A>(_:)(&v28, v5, v7, v19, v11, &type metadata for Color, &protocol witness table for Color);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  sub_10000AFA4(v5, v7, v19);
  swift_release(v18);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v22;
  *(_BYTE *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  sub_10000AFB4(v20, v22, v26);
  swift_bridgeObjectRetain(v24);
  sub_10000AFA4(v20, v22, v26);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v24).n128_u64[0];
  return result;
}

uint64_t sub_100032430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a3 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a3 + 8) = 0x4000000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  v6 = sub_100009F30(&qword_10008CC28);
  return sub_10003248C(a2, a1, a3 + *(int *)(v6 + 44));
}

uint64_t sub_10003248C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char v80;
  char v81;
  unsigned int *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (**v115)@<X0>(uint64_t@<X8>);
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (**v126)@<X0>(uint64_t@<X8>);
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (**v170)@<X0>(uint64_t@<X8>);
  uint64_t v171;
  uint64_t v172;
  char *v173;
  unsigned int (*v174)(char *, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  id *v180;

  v141 = a2;
  v176 = a1;
  v172 = a3;
  v163 = type metadata accessor for NoteWidgetView(0);
  v142 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v144 = v3;
  v147 = (uint64_t)&v135 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for GeometryProxy(0);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v140 = v4;
  v143 = (char *)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100009F30(&qword_10008CC30);
  __chkstk_darwin(v168);
  v170 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v151 = type metadata accessor for PlaceholderText(0);
  v150 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v149 = (char *)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100009F30(&qword_10008CC38);
  v7 = __chkstk_darwin(v169);
  v148 = (char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v152 = (uint64_t)&v135 - v9;
  v10 = sub_100009F30(&qword_10008CC40);
  v11 = __chkstk_darwin(v10);
  v171 = (uint64_t)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v157 = (char *)&v135 - v13;
  v14 = type metadata accessor for Font.TextStyle(0);
  v165 = *(_QWORD *)(v14 - 8);
  v166 = v14;
  __chkstk_darwin(v14);
  v164 = (char *)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100009F30(&qword_10008B168);
  v17 = __chkstk_darwin(v16);
  v156 = (char *)&v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v135 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v135 - v22;
  v24 = type metadata accessor for Note(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v138 = (uint64_t)&v135 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v139 = (uint64_t)&v135 - v29;
  v137 = v30;
  __chkstk_darwin(v28);
  v32 = (char *)&v135 - v31;
  v154 = sub_100009F30(&qword_10008CC48);
  v153 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v34 = (char *)&v135 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100009F30(&qword_10008CC50);
  __chkstk_darwin(v35);
  v37 = (char *)&v135 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100009F30(&qword_10008CC58);
  __chkstk_darwin(v155);
  v39 = (char *)&v135 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100009F30(&qword_10008CC60);
  v161 = *(_QWORD *)(v40 - 8);
  v162 = v40;
  __chkstk_darwin(v40);
  v160 = (char *)&v135 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100009F30(&qword_10008CC68);
  v42 = __chkstk_darwin(v159);
  v167 = (uint64_t)&v135 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v42);
  v158 = (char *)&v135 - v45;
  __chkstk_darwin(v44);
  v47 = (char *)&v135 - v46;
  sub_10000CC94(v176, (uint64_t)v23, &qword_10008B168);
  v136 = v25;
  v174 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v175 = v24;
  if (v174(v23, 2, v24))
  {
    v48 = static String.placeholder.getter();
    v50 = v49;
  }
  else
  {
    sub_10000AEE0((uint64_t)v23, (uint64_t)v32, type metadata accessor for Note);
    v48 = *((_QWORD *)v32 + 2);
    v50 = *((_QWORD *)v32 + 3);
    swift_bridgeObjectRetain(v50);
    sub_1000301BC((uint64_t)v32);
  }
  sub_10000CC94(v176, (uint64_t)v21, &qword_10008B168);
  v51 = v174(v21, 2, v175);
  v173 = v47;
  if (v51)
  {
    v177 = Text.placeholder(_:scale:)(1, v48, v50, 0, _swiftEmptyArrayStorage, 1.0);
    v52 = AnyView.init<A>(_:)(&v177, &type metadata for AnyView, &protocol witness table for AnyView);
  }
  else
  {
    v177 = v48;
    v178 = v50;
    LOBYTE(v179) = 0;
    v180 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v50);
    v52 = AnyView.init<A>(_:)(&v177, &type metadata for Text, &protocol witness table for Text);
    sub_10000CCD8((uint64_t)v21, &qword_10008B168);
  }
  swift_bridgeObjectRelease(v50);
  v53 = v163;
  v54 = v176;
  v55 = *(_QWORD *)(v176 + *(int *)(v163 + 28));
  KeyPath = swift_getKeyPath(&unk_10006AF18);
  v177 = v52;
  v178 = KeyPath;
  v179 = v55;
  LOBYTE(v180) = 0;
  v57 = sub_100009F30(&qword_10008CC70);
  v58 = sub_100034960((unint64_t *)&qword_10008CC78, &qword_10008CC70);
  View.hyphenationFactor(_:)(v57, v58, 0.1);
  swift_release(KeyPath);
  swift_release(v52);
  v59 = v54 + *(int *)(v53 + 24);
  v60 = *(_QWORD *)v59;
  LOBYTE(KeyPath) = *(_BYTE *)(v59 + 8);
  sub_10000B2CC(*(_QWORD *)v59, KeyPath);
  v61 = sub_1000337B0(v60, KeyPath);
  v62 = sub_10000B470(v60, KeyPath);
  v63 = v35;
  if ((v61 & 1) != 0)
  {
    v64 = static Color.primary.getter(v62);
  }
  else
  {
    v65 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
    v64 = Color.init(_:)(v65);
  }
  v66 = v64;
  v67 = (uint64_t)v173;
  v68 = v155;
  v69 = v154;
  v70 = v153;
  (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v37, v34, v154);
  *(_QWORD *)&v37[*(int *)(v63 + 36)] = v66;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v34, v69);
  sub_10000CC94((uint64_t)v37, (uint64_t)v39, &qword_10008CC50);
  *(_QWORD *)&v39[*(int *)(v68 + 36)] = 0x3FF0000000000000;
  sub_10000CCD8((uint64_t)v37, &qword_10008CC50);
  v71 = *(_QWORD *)v59;
  LOBYTE(v69) = *(_BYTE *)(v59 + 8);
  sub_10000B2CC(*(_QWORD *)v59, v69);
  LOBYTE(v70) = sub_1000337B0(v71, v69);
  v72 = sub_10000B470(v71, v69);
  if ((v70 & 1) != 0)
    static Font.Weight.regular.getter(v72);
  else
    v73 = static Font.Weight.semibold.getter(v72);
  v74 = v176;
  v75 = (uint64_t)v156;
  v76 = v73;
  v77 = sub_10003442C();
  v78 = v160;
  View.fontWeight(_:)(*(_QWORD *)&v76, 0, v68, v77);
  sub_10000CCD8((uint64_t)v39, &qword_10008CC58);
  v79 = *(_QWORD *)v59;
  v80 = *(_BYTE *)(v59 + 8);
  sub_10000B2CC(*(_QWORD *)v59, v80);
  v81 = sub_1000337B0(v79, v80);
  sub_10000B470(v79, v80);
  v82 = (unsigned int *)&enum case for Font.TextStyle.caption(_:);
  v83 = v164;
  v84 = v165;
  if ((v81 & 1) == 0)
    v82 = (unsigned int *)&enum case for Font.TextStyle.body(_:);
  v85 = v166;
  (*(void (**)(char *, _QWORD, uint64_t))(v165 + 104))(v164, *v82, v166);
  v86 = static Font.systemSingleLineA(_:)(v83);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v85);
  v87 = swift_getKeyPath(&unk_10006AE30);
  v89 = v161;
  v88 = v162;
  v90 = v158;
  (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v158, v78, v162);
  v91 = (uint64_t *)&v90[*(int *)(v159 + 36)];
  *v91 = v87;
  v91[1] = v86;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v78, v88);
  v92 = (uint64_t)v90;
  v93 = v67;
  sub_10000CC50(v92, v67, &qword_10008CC68);
  sub_10000CC94(v74, v75, &qword_10008B168);
  if (v174((char *)v75, 2, v175))
  {
    v94 = sub_10000CCD8(v75, &qword_10008B168);
    v95 = v149;
    PlaceholderText.init(scale:)(v94, 1.0);
    v96 = *(_QWORD *)v59;
    v97 = *(_BYTE *)(v59 + 8);
    sub_10000B2CC(*(_QWORD *)v59, v97);
    v98 = sub_1000337B0(v96, v97);
    v99 = sub_10000B470(v96, v97);
    if ((v98 & 1) != 0)
      v100 = static Color.primary.getter(v99);
    else
      v100 = static Color.white.getter(v99);
    v120 = v100;
    v119 = (uint64_t)v157;
    v121 = v150;
    v122 = (uint64_t)v148;
    v123 = v151;
    (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v148, v95, v151);
    v124 = v169;
    *(_QWORD *)(v122 + *(int *)(v169 + 36)) = v120;
    (*(void (**)(char *, uint64_t))(v121 + 8))(v95, v123);
    v125 = v152;
    sub_10000CC50(v122, v152, &qword_10008CC38);
    v126 = v170;
    sub_10000CC94(v125, (uint64_t)v170, &qword_10008CC38);
    swift_storeEnumTagMultiPayload(v126, v168, 1);
    v127 = sub_100009F30(&qword_10008CCB0);
    v128 = sub_10000CC08(&qword_10008CCB8, &qword_10008CCB0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v129 = sub_10003457C();
    _ConditionalContent<>.init(storage:)(v126, v127, v124, v128, v129);
    sub_10000CCD8(v125, &qword_10008CC38);
  }
  else
  {
    v101 = v139;
    sub_10000AEE0(v75, v139, type metadata accessor for Note);
    v102 = v145;
    v103 = v143;
    v104 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v143, v141, v146);
    v105 = v147;
    sub_10000AF24(v74, v147, type metadata accessor for NoteWidgetView);
    v106 = v138;
    sub_10000AF24(v101, v138, type metadata accessor for Note);
    v107 = *(unsigned __int8 *)(v102 + 80);
    v108 = (v107 + 16) & ~v107;
    v109 = *(unsigned __int8 *)(v142 + 80);
    v110 = (v140 + v109 + v108) & ~v109;
    v111 = *(unsigned __int8 *)(v136 + 80);
    v112 = (v144 + v111 + v110) & ~v111;
    v113 = swift_allocObject(&unk_100085040, v112 + v137, v107 | v109 | v111 | 7);
    v114 = v104;
    v93 = (uint64_t)v173;
    (*(void (**)(uint64_t, char *, uint64_t))(v102 + 32))(v113 + v108, v103, v114);
    sub_10000AEE0(v105, v113 + v110, type metadata accessor for NoteWidgetView);
    sub_10000AEE0(v106, v113 + v112, type metadata accessor for Note);
    v115 = v170;
    *v170 = sub_1000348C4;
    v115[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v113;
    swift_storeEnumTagMultiPayload(v115, v168, 0);
    v116 = sub_100009F30(&qword_10008CCB0);
    v117 = sub_10000CC08(&qword_10008CCB8, &qword_10008CCB0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v118 = sub_10003457C();
    v119 = (uint64_t)v157;
    _ConditionalContent<>.init(storage:)(v115, v116, v169, v117, v118);
    sub_1000301BC(v101);
  }
  v130 = v167;
  sub_10000CC94(v93, v167, &qword_10008CC68);
  v131 = v171;
  sub_10000CC94(v119, v171, &qword_10008CC40);
  v132 = v172;
  sub_10000CC94(v130, v172, &qword_10008CC68);
  v133 = sub_100009F30(&qword_10008CCD0);
  sub_10000CC94(v131, v132 + *(int *)(v133 + 48), &qword_10008CC40);
  sub_10000CCD8(v119, &qword_10008CC40);
  sub_10000CCD8(v93, &qword_10008CC68);
  sub_10000CCD8(v131, &qword_10008CC40);
  return sub_10000CCD8(v130, &qword_10008CC68);
}

uint64_t sub_100033184@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  id *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  v6 = sub_100009F30(&qword_10008CCD8);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F30(&qword_10008CCE0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v46 = (uint64_t)&v43 - v15;
  v16 = GeometryProxy.size.getter(v14);
  v18 = v17;
  GeometryProxy.size.getter(v16);
  v20 = v19;
  result = type metadata accessor for NoteWidgetView(0);
  v22 = *(_QWORD *)(a1 + *(int *)(result + 28));
  if (v20 / (double)v22 > v18)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, 1, 1, v9);
  v44 = v10;
  v45 = v6;
  v23 = v22 - 1;
  if (__OFSUB__(v22, 1))
  {
    __break(1u);
  }
  else
  {
    v24 = result;
    v43 = a3;
    v26 = *(_QWORD *)(a2 + 32);
    v25 = *(_QWORD *)(a2 + 40);
    KeyPath = swift_getKeyPath(&unk_10006AF18);
    v48 = v26;
    v49 = v25;
    v50 = 0;
    v51 = _swiftEmptyArrayStorage;
    v52 = KeyPath;
    v53 = v23;
    v54 = 0;
    v28 = sub_100009F30(&qword_10008CCE8);
    v29 = sub_100034960(&qword_10008CCF0, &qword_10008CCE8);
    View.hyphenationFactor(_:)(v28, v29, 0.1);
    swift_release(KeyPath);
    v30 = a1 + *(int *)(v24 + 24);
    v31 = *(_QWORD *)v30;
    v32 = *(_BYTE *)(v30 + 8);
    sub_10000B2CC(*(_QWORD *)v30, v32);
    LOBYTE(v28) = sub_1000337B0(v31, v32);
    v33 = sub_10000B470(v31, v32);
    if ((v28 & 1) != 0)
    {
      v34 = static Color.secondary.getter(v33);
      v35 = v43;
    }
    else
    {
      sub_10000B2CC(v31, v32);
      v36 = sub_1000337B0(v31, v32);
      v37 = sub_10000B470(v31, v32);
      v35 = v43;
      if ((v36 & 1) != 0)
        v38 = static Color.primary.getter(v37);
      else
        v38 = static Color.white.getter(v37);
      v34 = v38;
    }
    v40 = v44;
    v39 = v45;
    v41 = v47;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v13, v8, v45);
    *(_QWORD *)&v13[*(int *)(v9 + 36)] = v34;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v39);
    v42 = v46;
    sub_10000CC50((uint64_t)v13, v46, &qword_10008CCE0);
    sub_10000CC50(v42, v35, &qword_10008CCE0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v35, 0, 1, v9);
  }
  return result;
}

void sub_100033484(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  char v32;
  id *v33;

  v4 = sub_100009F30(&qword_10008B168);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v31[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v31[-1] - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v31[-1] - v11;
  v13 = type metadata accessor for Note(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v31[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v31[-1] - v18;
  sub_10000CC94(a1, (uint64_t)v12, &qword_10008B168);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v20(v12, 2, v13))
  {
    v21 = static String.placeholder.getter();
    v23 = v22;
  }
  else
  {
    sub_10000AEE0((uint64_t)v12, (uint64_t)v19, type metadata accessor for Note);
    v21 = *((_QWORD *)v19 + 6);
    v23 = *((_QWORD *)v19 + 7);
    swift_bridgeObjectRetain(v23);
    sub_1000301BC((uint64_t)v19);
  }
  sub_10000CC94(a1, (uint64_t)v10, &qword_10008B168);
  if (v20(v10, 2, v13))
  {
    v31[0] = Text.placeholder(_:scale:)(1, v21, v23, 0, _swiftEmptyArrayStorage, 0.5);
    v24 = AnyView.init<A>(_:)(v31, &type metadata for AnyView, &protocol witness table for AnyView);
  }
  else
  {
    v31[0] = v21;
    v31[1] = v23;
    v32 = 0;
    v33 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v23);
    v24 = AnyView.init<A>(_:)(v31, &type metadata for Text, &protocol witness table for Text);
    sub_10000CCD8((uint64_t)v10, &qword_10008B168);
  }
  swift_bridgeObjectRelease(v23);
  KeyPath = swift_getKeyPath(&unk_10006AF18);
  v27 = static HierarchicalShapeStyle.secondary.getter(KeyPath, v26);
  sub_10000CC94(a1, (uint64_t)v7, &qword_10008B168);
  if (v20(v7, 2, v13))
  {
    sub_10000CCD8((uint64_t)v7, &qword_10008B168);
LABEL_12:
    v29 = 0;
    v28 = 0;
    goto LABEL_13;
  }
  sub_10000AEE0((uint64_t)v7, (uint64_t)v17, type metadata accessor for Note);
  if (v17[80] != 1)
  {
    sub_1000301BC((uint64_t)v17);
    goto LABEL_12;
  }
  v28 = *(_QWORD *)&v17[*(int *)(v13 + 52)];
  swift_bridgeObjectRetain_n(v28, 2);
  sub_1000301BC((uint64_t)v17);
  swift_bridgeObjectRelease(v28);
  v29 = 0x4020000000000000;
LABEL_13:
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = KeyPath;
  *(_QWORD *)(a2 + 16) = 1;
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v27;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v28;
}

uint64_t sub_100033780@<X0>(uint64_t a1@<X8>)
{
  return sub_100033998(&qword_10008B258, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_1000337B0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10002D35C(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10000B470(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_100033968@<X0>(uint64_t a1@<X8>)
{
  return sub_100033998(&qword_10008B260, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_100033998@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100009F30(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000CC94(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_10002D35C(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100033BD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100033998(&qword_10008C7A0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010006CCF0, a1);
}

uint64_t sub_100033BFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100033998(&qword_10008CBD0, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010006CCD0, a1);
}

uint64_t sub_100033C28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100033C50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100033C78(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100033CA0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_100033CC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CBA8;
  if (!qword_10008CBA8)
  {
    v1 = sub_10000AE50(&qword_10008CB68);
    sub_10000CC08(&qword_10008CBB0, &qword_10008CB60, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10000CC08(&qword_10008B3E0, &qword_10008B3E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CBA8);
  }
  return result;
}

unint64_t sub_100033D64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  result = qword_10008CBB8;
  if (!qword_10008CBB8)
  {
    v1 = sub_10000AE50(&qword_10008CB88);
    v2 = sub_10000AE50(&qword_10008CB78);
    v3 = sub_10000AE50(&qword_10008CB70);
    v6 = sub_10000AE50(&qword_10008CB68);
    v7 = (void *)sub_100033CC8();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
    v6 = v3;
    v7 = &type metadata for Color;
    v8 = OpaqueTypeConformance2;
    v9 = &protocol witness table for Color;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v6 = v2;
    v7 = (void *)v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000C5FC(&qword_10008B398, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CBB8);
  }
  return result;
}

uint64_t sub_100033E7C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if ((a15 & 1) != 0)
    return sub_100033F08(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, BYTE1(a14) & 1);
  swift_bridgeObjectRetain(a14);
  swift_retain(a2);
  swift_retain(a8);
  return swift_retain(a9);
}

uint64_t sub_100033F08(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15)
{
  char v16;

  if ((a15 & 1) != 0)
  {
    v16 = a9 & 1;
    a1 = a7;
    a2 = a8;
  }
  else
  {
    a10 = a4;
    v16 = a3 & 1;
  }
  sub_10000AFB4(a1, a2, v16);
  return swift_bridgeObjectRetain(a10);
}

uint64_t sub_100033F4C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 136);
  a2(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v4);
  return a1;
}

double sub_100033FAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  double result;

  if ((a15 & 1) != 0)
    return sub_100034030(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, BYTE1(a14) & 1);
  swift_release(a2);
  swift_release(a8);
  swift_release(a9);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a14).n128_u64[0];
  return result;
}

double sub_100034030(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15)
{
  char v16;
  double result;

  if ((a15 & 1) != 0)
  {
    v16 = a9 & 1;
    a1 = a7;
    a2 = a8;
  }
  else
  {
    a10 = a4;
    v16 = a3 & 1;
  }
  sub_10000AFA4(a1, a2, v16);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a10).n128_u64[0];
  return result;
}

unint64_t sub_10003408C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CBE8;
  if (!qword_10008CBE8)
  {
    v1 = sub_10000AE50(&qword_10008CBD8);
    sub_10000CC08(&qword_10008CBF0, &qword_10008CBF8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CBE8);
  }
  return result;
}

unint64_t sub_100034108()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CC20;
  if (!qword_10008CC20)
  {
    v1 = sub_10000AE50(&qword_10008CC10);
    sub_10003408C();
    sub_10000CC08(&qword_10008CC00, &qword_10008CBE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CC20);
  }
  return result;
}

uint64_t sub_10003418C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for NoteWidgetView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = (int *)type metadata accessor for Note(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v0 + v4, 2, v7))
  {
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[3]);
    swift_bridgeObjectRelease(v6[5]);
    swift_bridgeObjectRelease(v6[7]);
    swift_bridgeObjectRelease(v6[9]);
    swift_bridgeObjectRelease(v6[12]);
    v8 = (char *)v6 + v7[11];
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    swift_release(*(_QWORD *)((char *)v6 + v7[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[13]));
    swift_release(*(_QWORD *)((char *)v6 + v7[14]));
    swift_release(*(_QWORD *)((char *)v6 + v7[15]));
  }
  v11 = (_QWORD *)((char *)v6 + *(int *)(v1 + 20));
  v12 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  sub_10000B470(*(_QWORD *)((char *)v6 + *(int *)(v1 + 24)), *((_BYTE *)v6 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100034328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NoteWidgetView(0) - 8) + 80);
  return sub_100032430(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100034374@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000343A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000343D4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100034400(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_10003442C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CC90;
  if (!qword_10008CC90)
  {
    v1 = sub_10000AE50(&qword_10008CC58);
    sub_1000344B0();
    sub_10000CC08(&qword_10008CCA0, &qword_10008CCA8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CC90);
  }
  return result;
}

unint64_t sub_1000344B0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008CC98;
  if (!qword_10008CC98)
  {
    v1 = sub_10000AE50(&qword_10008CC50);
    v2[0] = sub_10000AE50(&qword_10008CC70);
    v2[1] = sub_100034960((unint64_t *)&qword_10008CC78, &qword_10008CC70);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hyphenationFactor(_:)>>, 1);
    sub_10000CC08(&qword_10008C8A0, &qword_10008C8A8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CC98);
  }
  return result;
}

unint64_t sub_10003457C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CCC0;
  if (!qword_10008CCC0)
  {
    v1 = sub_10000AE50(&qword_10008CC38);
    sub_10000C5FC(&qword_10008CCC8, (uint64_t (*)(uint64_t))&type metadata accessor for PlaceholderText, (uint64_t)&protocol conformance descriptor for PlaceholderText);
    sub_10000CC08(&qword_10008C8A0, &qword_10008C8A8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CCC0);
  }
  return result;
}

uint64_t sub_100034618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = type metadata accessor for GeometryProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v28 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v28 + 16) & ~v28;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for NoteWidgetView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v27 = *(unsigned __int8 *)(v6 + 80);
  v7 = (v3 + v4 + v27) & ~v27;
  v8 = *(_QWORD *)(v6 + 64);
  v9 = (int *)type metadata accessor for Note(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v7 + v8 + v11;
  v26 = *(_QWORD *)(v10 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v13 = (_QWORD *)(v0 + v7);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v10 + 48))(v0 + v7, 2, v9))
  {
    swift_bridgeObjectRelease(v13[1]);
    swift_bridgeObjectRelease(v13[3]);
    swift_bridgeObjectRelease(v13[5]);
    swift_bridgeObjectRelease(v13[7]);
    swift_bridgeObjectRelease(v13[9]);
    swift_bridgeObjectRelease(v13[12]);
    v14 = (char *)v13 + v9[11];
    v15 = type metadata accessor for URL(0);
    v16 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    swift_release(*(_QWORD *)((char *)v13 + v9[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v13 + v9[13]));
    swift_release(*(_QWORD *)((char *)v13 + v9[14]));
    swift_release(*(_QWORD *)((char *)v13 + v9[15]));
  }
  v17 = v12 & ~v11;
  v18 = (_QWORD *)((char *)v13 + *(int *)(v5 + 20));
  v19 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  sub_10000B470(*(_QWORD *)((char *)v13 + *(int *)(v5 + 24)), *((_BYTE *)v13 + *(int *)(v5 + 24) + 8));
  v21 = v0 + v17;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v17 + 96));
  v22 = v0 + v17 + v9[11];
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  swift_release(*(_QWORD *)(v21 + v9[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + v9[13]));
  swift_release(*(_QWORD *)(v21 + v9[14]));
  swift_release(*(_QWORD *)(v21 + v9[15]));
  return swift_deallocObject(v0, v17 + v26, v28 | v27 | v11 | 7);
}

uint64_t sub_1000348C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for NoteWidgetView(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Note(0) - 8) + 80);
  return sub_100033184(v1 + v7, v1 + ((v7 + v8 + v9) & ~v9), a1);
}

uint64_t sub_100034960(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000AE50(a2);
    sub_10000CC08(&qword_10008CC80, &qword_10008CC88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000349DC()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  unint64_t v4;

  v0 = sub_10000AE50(&qword_10008CB90);
  v3 = sub_10000AE50(&qword_10008CB88);
  v4 = sub_100033D64();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
}

uint64_t sub_100034A50()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[4];
  unsigned int v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;

  v36 = sub_100009F30(&qword_10008CDD0);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v1 = &v28[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100009F30(&qword_10008CDD8);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100017F78();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(49, 1, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v10._countAndFlagsBits = 0xD000000000000031;
  v10._object = (void *)0x800000010006D580;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v35(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v13 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
  v14 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000022, 0x800000010006D5C0, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(38, 1, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v15._countAndFlagsBits = 0xD000000000000026;
  v15._object = (void *)0x800000010006D5F0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v30;
  v30(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v18 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000025, 0x800000010006D620, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(45, 1, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v19._countAndFlagsBits = 0xD00000000000002DLL;
  v19._object = (void *)0x800000010006D650;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAllowDarkBackgroundsDeepLink, v9);
  v13(v1, v36);
  v22 = sub_100009F30(&qword_10008CDE0);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v33;
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v31;
  *(_QWORD *)(v23 + 48) = v32;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_100034E84()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[4];
  unsigned int v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;

  v36 = sub_100009F30(&qword_10008CDB8);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v1 = &v28[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100009F30(&qword_10008CDC0);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1000163A8();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(52, 1, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v10._countAndFlagsBits = 0xD000000000000034;
  v10._object = (void *)0x800000010006D470;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v35(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v13 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
  v14 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000025, 0x800000010006D4B0, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(41, 1, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v15._countAndFlagsBits = 0xD000000000000029;
  v15._object = (void *)0x800000010006D4E0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v30;
  v30(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v18 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000028, 0x800000010006D510, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(48, 1, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v19._countAndFlagsBits = 0xD000000000000030;
  v19._object = (void *)0x800000010006D540;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoConvertToTagDeepLink, v9);
  v13(v1, v36);
  v22 = sub_100009F30(&qword_10008CDC8);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v33;
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v31;
  *(_QWORD *)(v23 + 48) = v32;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_1000352B8()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(char *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(char *, _QWORD, uint64_t);
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;

  v35 = sub_100009F30(&qword_10008CDA0);
  v32 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v1 = (char *)&v28 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008CDA8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001F2C0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(51, 1, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v10._countAndFlagsBits = 0xD000000000000033;
  v10._object = (void *)0x800000010006D370;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v28 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v28(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v34 = *(void (**)(char *, uint64_t))(v3 + 8);
  v34(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v13 = *(void (**)(char *, uint64_t))(v32 + 8);
  v14 = v35;
  v13(v1, v35);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000024, 0x800000010006D3B0, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(40, 1, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v15._countAndFlagsBits = 0xD000000000000028;
  v15._object = (void *)0x800000010006D3E0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v28;
  v28(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v34(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v18 = v35;
  v13(v1, v35);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000027, 0x800000010006D410, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v30 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(47, 1, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v19._countAndFlagsBits = 0xD00000000000002FLL;
  v19._object = (void *)0x800000010006D440;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v34(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenAutoSortCheckedItemsDeepLink, v9);
  v13(v1, v35);
  v22 = sub_100009F30(&qword_10008CDB0);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v32;
  *(_QWORD *)(v23 + 32) = v33;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v30;
  *(_QWORD *)(v23 + 48) = v31;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_1000356F0()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[4];
  unsigned int v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;

  v36 = sub_100009F30(&qword_10008CD88);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v1 = &v28[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100009F30(&qword_10008CD90);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100019EB8();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(52, 1, &type metadata for OpenDateHeadersDeepLink, v9);
  v10._countAndFlagsBits = 0xD000000000000034;
  v10._object = (void *)0x800000010006D260;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v35(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenDateHeadersDeepLink, v9);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDateHeadersDeepLink, v9);
  v13 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
  v14 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000025, 0x800000010006D2A0, &type metadata for OpenDateHeadersDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDateHeadersDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(41, 1, &type metadata for OpenDateHeadersDeepLink, v9);
  v15._countAndFlagsBits = 0xD000000000000029;
  v15._object = (void *)0x800000010006D2D0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v30;
  v30(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenDateHeadersDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDateHeadersDeepLink, v9);
  v18 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000028, 0x800000010006D300, &type metadata for OpenDateHeadersDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDateHeadersDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(48, 1, &type metadata for OpenDateHeadersDeepLink, v9);
  v19._countAndFlagsBits = 0xD000000000000030;
  v19._object = (void *)0x800000010006D330;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenDateHeadersDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDateHeadersDeepLink, v9);
  v13(v1, v36);
  v22 = sub_100009F30(&qword_10008CD98);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v33;
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v31;
  *(_QWORD *)(v23 + 48) = v32;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_100035B24()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[4];
  unsigned int v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;

  v36 = sub_100009F30(&qword_10008CD70);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v1 = &v28[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100009F30(&qword_10008CD78);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_10001D674();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(53, 1, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v10._countAndFlagsBits = 0xD000000000000035;
  v10._object = (void *)0x800000010006D150;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v35(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v13 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
  v14 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000026, 0x800000010006D190, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(42, 1, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v15._countAndFlagsBits = 0xD00000000000002ALL;
  v15._object = (void *)0x800000010006D1C0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v30;
  v30(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v18 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000029, 0x800000010006D1F0, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(49, 1, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v19._countAndFlagsBits = 0xD000000000000031;
  v19._object = (void *)0x800000010006D220;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenDefaultParagraphStyleDeepLink, v9);
  v13(v1, v36);
  v22 = sub_100009F30(&qword_10008CD80);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v33;
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v31;
  *(_QWORD *)(v23 + 48) = v32;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_100035F58()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[4];
  unsigned int v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;

  v36 = sub_100009F30(&qword_10008CD58);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v1 = &v28[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100009F30(&qword_10008CD60);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_10001456C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(46, 1, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v10._countAndFlagsBits = 0xD00000000000002ELL;
  v10._object = (void *)0x800000010006D070;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v35(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v13 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
  v14 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD00000000000001FLL, 0x800000010006D0A0, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(35, 1, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v15._countAndFlagsBits = 0xD000000000000023;
  v15._object = (void *)0x800000010006D0C0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v30;
  v30(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v18 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000022, 0x800000010006D0F0, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(42, 1, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v19._countAndFlagsBits = 0xD00000000000002ALL;
  v19._object = (void *)0x800000010006D120;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenLinesAndGridsDeepLink, v9);
  v13(v1, v36);
  v22 = sub_100009F30(&qword_10008CD68);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v33;
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v31;
  *(_QWORD *)(v23 + 48) = v32;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_10003638C()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[4];
  unsigned int v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;

  v36 = sub_100009F30(&qword_10008CD40);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v1 = &v28[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100009F30(&qword_10008CD48);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1000260E0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(54, 1, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v10._countAndFlagsBits = 0xD000000000000036;
  v10._object = (void *)0x800000010006CF60;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v35(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v13 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
  v14 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000027, 0x800000010006CFA0, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(43, 1, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v15._countAndFlagsBits = 0xD00000000000002BLL;
  v15._object = (void *)0x800000010006CFD0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v30;
  v30(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v18 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD00000000000002ALL, 0x800000010006D000, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(50, 1, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v19._countAndFlagsBits = 0xD000000000000032;
  v19._object = (void *)0x800000010006D030;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenMentionNotificationsDeepLink, v9);
  v13(v1, v36);
  v22 = sub_100009F30(&qword_10008CD50);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v33;
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v31;
  *(_QWORD *)(v23 + 48) = v32;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_1000367C0()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[4];
  unsigned int v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;

  v36 = sub_100009F30(&qword_10008CD28);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v1 = &v28[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100009F30(&qword_10008CD30);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100022704();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(46, 1, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v10._countAndFlagsBits = 0xD00000000000002ELL;
  v10._object = (void *)0x800000010006CE80;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v30(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v35(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v13 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
  v14 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD00000000000001FLL, 0x800000010006CEB0, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(35, 1, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v15._countAndFlagsBits = 0xD000000000000023;
  v15._object = (void *)0x800000010006CED0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v30;
  v30(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v18 = v36;
  v13(v1, v36);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000022, 0x800000010006CF00, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(42, 1, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v19._countAndFlagsBits = 0xD00000000000002ALL;
  v19._object = (void *)0x800000010006CF30;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v35(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenNoteListSortTypeDeepLink, v9);
  v13(v1, v36);
  v22 = sub_100009F30(&qword_10008CD38);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v33;
  *(_QWORD *)(v23 + 32) = v34;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v31;
  *(_QWORD *)(v23 + 48) = v32;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_100036BF4()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void (*v16)(char *, _QWORD, uint64_t);
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(char *, _QWORD, uint64_t);
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;

  v35 = sub_100009F30(&qword_10008CD10);
  v32 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v1 = (char *)&v28 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008CD18);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000242E0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(47, 1, &type metadata for OpenSavePhotosDeepLink, v9);
  v10._countAndFlagsBits = 0xD00000000000002FLL;
  v10._object = (void *)0x800000010006CD90;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v28 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v29 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v28(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v34 = *(void (**)(char *, uint64_t))(v3 + 8);
  v34(v5, v2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenSavePhotosDeepLink, v9);
  v33 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenSavePhotosDeepLink, v9);
  v13 = *(void (**)(char *, uint64_t))(v32 + 8);
  v14 = v35;
  v13(v1, v35);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000020, 0x800000010006CDC0, &type metadata for OpenSavePhotosDeepLink, v9);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenSavePhotosDeepLink, v9);
  v13(v1, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(36, 1, &type metadata for OpenSavePhotosDeepLink, v9);
  v15._countAndFlagsBits = 0xD000000000000024;
  v15._object = (void *)0x800000010006CDF0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v28;
  v28(v5, v11, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v34(v5, v2);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenSavePhotosDeepLink, v9);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenSavePhotosDeepLink, v9);
  v18 = v35;
  v13(v1, v35);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000023, 0x800000010006CE20, &type metadata for OpenSavePhotosDeepLink, v9);
  v30 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenSavePhotosDeepLink, v9);
  v13(v1, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(43, 1, &type metadata for OpenSavePhotosDeepLink, v9);
  v19._countAndFlagsBits = 0xD00000000000002BLL;
  v19._object = (void *)0x800000010006CE50;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v16(v5, v29, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v6);
  v34(v5, v2);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for OpenSavePhotosDeepLink, v9);
  v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v1, &type metadata for OpenSavePhotosDeepLink, v9);
  v13(v1, v35);
  v22 = sub_100009F30(&qword_10008CD20);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10006AF50;
  v24 = v32;
  *(_QWORD *)(v23 + 32) = v33;
  *(_QWORD *)(v23 + 40) = v24;
  v25 = v30;
  *(_QWORD *)(v23 + 48) = v31;
  *(_QWORD *)(v23 + 56) = v25;
  *(_QWORD *)(v23 + 64) = v21;
  v26 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t sub_100037030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000002ELL, 0x800000010006CD10);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000023, 0x800000010006CD40);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000001ELL, 0x800000010006CD70);
  v3 = sub_100009F30(&qword_10008CD00);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100065600;
  *(_QWORD *)(v4 + 32) = v0;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_1000370FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for _AssistantIntent.NegativeAssistantIntentPhrases(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100017F78();
  _AssistantIntent.NegativeAssistantIntentPhrases.init<A>(for:phrases:)(&type metadata for OpenAllowDarkBackgroundsDeepLink, sub_100037030, 0, &type metadata for OpenAllowDarkBackgroundsDeepLink, v4);
  v5 = static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v6 = sub_100009F30(&qword_10008CCF8);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000659F0;
  *(_QWORD *)(v7 + 32) = v5;
  v8 = static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

ValueMetadata *type metadata accessor for WidgetAssistantIntentsProvider()
{
  return &type metadata for WidgetAssistantIntentsProvider;
}

uint64_t sub_1000371EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  void (*v5)(char *, uint64_t);
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v0 = type metadata accessor for _AssistantIntent(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000185D4();
  v4 = sub_100017F78();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_100034A50, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenAllowDarkBackgroundsDeepLink, v4);
  v28 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5 = *(void (**)(char *, uint64_t))(v1 + 8);
  v5(v3, v0);
  v29 = sub_10001674C();
  v6 = sub_1000163A8();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_100034E84, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenAutoConvertToTagDeepLink, v6);
  v27 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5(v3, v0);
  v29 = sub_10001F6D8();
  v7 = sub_10001F2C0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_1000352B8, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenAutoSortCheckedItemsDeepLink, v7);
  v8 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5(v3, v0);
  v29 = sub_10001A26C();
  v9 = sub_100019EB8();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_1000356F0, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenDateHeadersDeepLink, v9);
  v10 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5(v3, v0);
  v29 = sub_10001D8F8();
  v11 = sub_10001D674();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_100035B24, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenDefaultParagraphStyleDeepLink, v11);
  v12 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5(v3, v0);
  v29 = sub_1000149A4();
  v13 = sub_10001456C();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_100035F58, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenLinesAndGridsDeepLink, v13);
  v14 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5(v3, v0);
  v29 = sub_1000268FC();
  v15 = sub_1000260E0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_10003638C, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenMentionNotificationsDeepLink, v15);
  v16 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5(v3, v0);
  v29 = sub_100022A94();
  v17 = sub_100022704();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_1000367C0, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenNoteListSortTypeDeepLink, v17);
  v18 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5(v3, v0);
  v29 = sub_100024804();
  v19 = sub_1000242E0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v29, sub_100036BF4, 0, &j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenSavePhotosDeepLink, v19);
  v20 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v5(v3, v0);
  v21 = sub_100009F30(&qword_10008CD08);
  v22 = swift_allocObject(v21, 104, 7);
  *(_OWORD *)(v22 + 16) = xmmword_10006AF60;
  v23 = v27;
  *(_QWORD *)(v22 + 32) = v28;
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = v8;
  *(_QWORD *)(v22 + 56) = v10;
  *(_QWORD *)(v22 + 64) = v12;
  *(_QWORD *)(v22 + 72) = v14;
  *(_QWORD *)(v22 + 80) = v16;
  *(_QWORD *)(v22 + 88) = v18;
  *(_QWORD *)(v22 + 96) = v20;
  v24 = static _AssistantIntent.Builder.buildBlock(_:)();
  swift_bridgeObjectRelease(v22);
  return v24;
}

uint64_t sub_1000375B8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100010B60(v0, qword_10008CDE8);
  sub_100010130(v0, (uint64_t)qword_10008CDE8);
  return static Logger.widget.getter();
}

uint64_t sub_100037600()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100009F30(&qword_10008C6E8);
  sub_100010B60(v0, qword_10008CE00);
  sub_100010130(v0, (uint64_t)qword_10008CE00);
  v1 = sub_100010B28(0, &qword_10008CE50, ICNoteContext_ptr);
  return RetryingLazy.init(wrappedValue:)(sub_100037678, 0, v1);
}

void *sub_100037678@<X0>(_QWORD *a1@<X8>)
{
  void *result;

  result = sub_10003769C();
  *a1 = result;
  return result;
}

void *sub_10003769C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchTime(0);
  v36 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v35 - v14;
  v16 = (void *)objc_opt_self(ICNoteContext);
  objc_msgSend(v16, "startSharedContextWithOptions:", 8389186);
  v17 = objc_msgSend(v16, "sharedContext");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "databaseOpenError");
    if (!v19)
      return v18;
    v20 = v19;

  }
  if (qword_10008B100 != -1)
    swift_once(&qword_10008B100, sub_1000375B8);
  v35 = v0;
  v21 = type metadata accessor for Logger(0);
  sub_100010130(v21, (uint64_t)qword_10008CDE8);
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Cannot create modern note context for Widget Extension — returning nil and exiting shortly", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  sub_100010B28(0, &qword_10008CE30, OS_dispatch_queue_ptr);
  v25 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  *v9 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchTimeInterval.seconds(_:), v6);
  + infix(_:_:)(v13, v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  v26 = *(void (**)(char *, uint64_t))(v36 + 8);
  v27 = v13;
  v28 = v37;
  v26(v27, v37);
  aBlock[4] = sub_100037A70;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100037A7C;
  aBlock[3] = &unk_100085120;
  v29 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  v30 = sub_100037FE0();
  v31 = sub_100009F30(&qword_10008CE40);
  v32 = sub_100038028();
  v33 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v31, v32, v35, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v5, v2, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v2, v33);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v39);
  v26(v15, v28);
  return 0;
}

void sub_100037A70()
{
  sub_100037F04("Exiting Widget Extension because modern note context couldn't be created");
}

uint64_t sub_100037A7C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100037AA8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100009F30(&qword_10008CA68);
  sub_100010B60(v0, qword_10008CE18);
  sub_100010130(v0, (uint64_t)qword_10008CE18);
  v1 = sub_100010B28(0, &qword_10008B550, NoteContext_ptr);
  return RetryingLazy.init(wrappedValue:)(sub_100037B20, 0, v1);
}

id sub_100037B20@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_100037B44();
  *a1 = result;
  return result;
}

id sub_100037B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id result;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  void *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v0 - 8);
  v52 = v0;
  __chkstk_darwin(v0);
  v50 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for DispatchQoS(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v41 - v15;
  result = objc_msgSend(objc_allocWithZone((Class)NoteContext), "initWithPrivateQueue:", 1);
  if (!result)
  {
    v43 = v14;
    v44 = v11;
    v45 = v9;
    v46 = v7;
    v47 = v16;
    v48 = v5;
    v49 = v2;
    if (qword_10008B100 != -1)
      swift_once(&qword_10008B100, sub_1000375B8);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100010130(v18, (uint64_t)qword_10008CDE8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    v22 = os_log_type_enabled(v20, v21);
    v42 = v3;
    v23 = v10;
    v25 = v45;
    v24 = v46;
    v27 = v43;
    v26 = v44;
    if (v22)
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Cannot create HTML note context for Widget Extension — returning nil and exiting shortly", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    sub_100010B28(0, &qword_10008CE30, OS_dispatch_queue_ptr);
    v29 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    *v25 = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v25, enum case for DispatchTimeInterval.seconds(_:), v6);
    v30 = v24;
    v31 = v47;
    + infix(_:_:)(v27, v25);
    (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v25, v6);
    v32 = *(void (**)(char *, uint64_t))(v26 + 8);
    v32(v27, v23);
    aBlock[4] = sub_100037EF8;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100037A7C;
    aBlock[3] = &unk_1000850F8;
    v33 = _Block_copy(aBlock);
    v34 = v48;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = &_swiftEmptyArrayStorage;
    v35 = sub_100037FE0();
    v36 = sub_100009F30(&qword_10008CE40);
    v37 = sub_100038028();
    v38 = v50;
    v39 = v23;
    v40 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v52, v35);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v31, v34, v38, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v38, v40);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v49);
    v32(v31, v39);
    return 0;
  }
  return result;
}

void sub_100037EF8()
{
  sub_100037F04("Exiting Widget Extension because HTML note context couldn't be created");
}

void sub_100037F04(const char *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_10008B100 != -1)
    swift_once(&qword_10008B100, sub_1000375B8);
  v2 = type metadata accessor for Logger(0);
  sub_100010130(v2, (uint64_t)qword_10008CDE8);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, a1, v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  exit(1);
}

uint64_t sub_100037FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100037FD8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100037FE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CE38;
  if (!qword_10008CE38)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10008CE38);
  }
  return result;
}

unint64_t sub_100038028()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CE48;
  if (!qword_10008CE48)
  {
    v1 = sub_10000AE50(&qword_10008CE40);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008CE48);
  }
  return result;
}

uint64_t sub_10003807C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100010B60(v0, qword_10008CE58);
  sub_100010130(v0, (uint64_t)qword_10008CE58);
  return static Logger.widget.getter();
}

void sub_1000380C4()
{
  NSString v0;
  NSString v1;
  id v2;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(RBSDomainAttribute), "attributeWithDomain:name:", v0, v1);

  qword_10008CE70 = (uint64_t)v2;
}

uint64_t sub_100038164()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v0 = sub_100009F30(&qword_10008CE98);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008CEA0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  v10 = sub_100039960();
  _ControlWidgetAdaptor.init(_:)(v10, &type metadata for QuickNoteControl, v10);
  v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v11(v7, v9, v3);
  *(_QWORD *)v2 = 0;
  v11(&v2[*(int *)(v0 + 96)], v7, v3);
  TupleWidget.init(_:)(v2, v0);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v9, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v7, v3);
}

uint64_t sub_1000382A0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  void *v30;

  v2 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1[13] = 0u;
  a1[14] = 0u;
  v24 = (uint64_t)a1 + 40;
  v25 = (uint64_t)a1 + 200;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[5] = 0u;
  v26 = a1 + 5;
  v27 = (uint64_t)a1 + 120;
  *a1 = 0u;
  a1[10] = 0u;
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  v7 = objc_msgSend(v6, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(ICPersistentContainerWillLockDatabaseNotification, 0);

  v8 = sub_1000399A4();
  v9 = Publisher<>.sink(receiveValue:)(sub_10003864C, 0, v2, v8);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  v11 = type metadata accessor for AnyCancellable(0);
  v29 = v11;
  v30 = &protocol witness table for AnyCancellable;
  v28[0] = v9;
  sub_1000399EC((uint64_t)v28, (uint64_t)a1);
  v12 = objc_msgSend(v6, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(ICPersistentContainerDidUnlockDatabaseNotification, 0);

  v13 = Publisher<>.sink(receiveValue:)(sub_1000388D4, 0, v2, v8);
  v10(v5, v2);
  v29 = v11;
  v30 = &protocol witness table for AnyCancellable;
  v28[0] = v13;
  sub_1000399EC((uint64_t)v28, v24);
  v14 = objc_msgSend(v6, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(NoteContextWillLockObjectCreationNotification, 0);

  v15 = Publisher<>.sink(receiveValue:)(sub_1000388E8, 0, v2, v8);
  v10(v5, v2);
  v29 = v11;
  v30 = &protocol witness table for AnyCancellable;
  v28[0] = v15;
  sub_1000399EC((uint64_t)v28, (uint64_t)(a1 + 10));
  v16 = objc_msgSend(v6, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(NoteContextDidUnlockObjectCreationNotification, 0);

  v17 = Publisher<>.sink(receiveValue:)(sub_100038AFC, 0, v2, v8);
  v10(v5, v2);
  v29 = v11;
  v30 = &protocol witness table for AnyCancellable;
  v28[0] = v17;
  sub_1000399EC((uint64_t)v28, v25);
  v18 = objc_msgSend(v6, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(NoteContextWillSetUpCoreDataStackNotification, 0);

  v19 = Publisher<>.sink(receiveValue:)(sub_100038B10, 0, v2, v8);
  v10(v5, v2);
  v29 = v11;
  v30 = &protocol witness table for AnyCancellable;
  v28[0] = v19;
  sub_1000399EC((uint64_t)v28, (uint64_t)v26);
  v20 = objc_msgSend(v6, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(NoteContextDidSetUpCoreDataStackNotification, 0);

  v21 = Publisher<>.sink(receiveValue:)(sub_100038F28, 0, v2, v8);
  v10(v5, v2);
  v29 = v11;
  v30 = &protocol witness table for AnyCancellable;
  v28[0] = v21;
  return sub_1000399EC((uint64_t)v28, v27);
}

void sub_10003864C()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  Class isa;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[6];

  v0 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v1 = sub_100009F30(&qword_10008B560);
  v2 = swift_allocObject(v1, 40, 7);
  v3 = v2;
  *(_OWORD *)(v2 + 16) = xmmword_100065910;
  if (qword_10008B120 != -1)
    v2 = swift_once(&qword_10008B120, sub_1000380C4);
  v4 = (void *)qword_10008CE70;
  *(_QWORD *)(v3 + 32) = qword_10008CE70;
  v14[0] = v3;
  specialized Array._endMutation()(v2);
  v5 = objc_allocWithZone((Class)RBSAssertion);
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  sub_100039A34();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v5, "initWithExplanation:target:attributes:", v7, v0, isa, swift_bridgeObjectRelease(v3).n128_f64[0]);

  v10 = (void *)qword_10008CE78;
  qword_10008CE78 = (uint64_t)v9;

  v11 = (void *)qword_10008CE78;
  if (qword_10008CE78)
  {
    v14[4] = sub_10003880C;
    v14[5] = 0;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_100038860;
    v14[3] = &unk_100085228;
    v12 = _Block_copy(v14);
    v13 = v11;
    objc_msgSend(v13, "acquireWithInvalidationHandler:", v12);
    _Block_release(v12);

  }
}

void sub_10003880C(uint64_t a1, uint64_t a2)
{
  sub_100038D24(a1, a2, "Invalidated Database-locking operation, error %@", (void **)&qword_10008CE78);
}

void sub_100038860(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

void sub_1000388D4(uint64_t a1)
{
  sub_100038F3C(a1, (void **)&qword_10008CE78, "Finishing Database-locking operation");
}

void sub_1000388E8()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  Class isa;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[6];

  v0 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v1 = sub_100009F30(&qword_10008B560);
  v2 = swift_allocObject(v1, 40, 7);
  v3 = v2;
  *(_OWORD *)(v2 + 16) = xmmword_100065910;
  if (qword_10008B120 != -1)
    v2 = swift_once(&qword_10008B120, sub_1000380C4);
  v4 = (void *)qword_10008CE70;
  *(_QWORD *)(v3 + 32) = qword_10008CE70;
  v14[0] = v3;
  specialized Array._endMutation()(v2);
  v5 = objc_allocWithZone((Class)RBSAssertion);
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  sub_100039A34();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v5, "initWithExplanation:target:attributes:", v7, v0, isa, swift_bridgeObjectRelease(v3).n128_f64[0]);

  v10 = (void *)qword_10008CE88;
  qword_10008CE88 = (uint64_t)v9;

  v11 = (void *)qword_10008CE88;
  if (qword_10008CE88)
  {
    v14[4] = sub_100038AA8;
    v14[5] = 0;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_100038860;
    v14[3] = &unk_100085200;
    v12 = _Block_copy(v14);
    v13 = v11;
    objc_msgSend(v13, "acquireWithInvalidationHandler:", v12);
    _Block_release(v12);

  }
}

void sub_100038AA8(uint64_t a1, uint64_t a2)
{
  sub_100038D24(a1, a2, "Invalidated object creation-locking operation, error %@", (void **)&qword_10008CE88);
}

void sub_100038AFC(uint64_t a1)
{
  sub_100038F3C(a1, (void **)&qword_10008CE88, "Finishing object creation-locking operation");
}

void sub_100038B10()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  Class isa;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[6];

  v0 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v1 = sub_100009F30(&qword_10008B560);
  v2 = swift_allocObject(v1, 40, 7);
  v3 = v2;
  *(_OWORD *)(v2 + 16) = xmmword_100065910;
  if (qword_10008B120 != -1)
    v2 = swift_once(&qword_10008B120, sub_1000380C4);
  v4 = (void *)qword_10008CE70;
  *(_QWORD *)(v3 + 32) = qword_10008CE70;
  v14[0] = v3;
  specialized Array._endMutation()(v2);
  v5 = objc_allocWithZone((Class)RBSAssertion);
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  sub_100039A34();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v5, "initWithExplanation:target:attributes:", v7, v0, isa, swift_bridgeObjectRelease(v3).n128_f64[0]);

  v10 = (void *)qword_10008CE80;
  qword_10008CE80 = (uint64_t)v9;

  v11 = (void *)qword_10008CE80;
  if (qword_10008CE80)
  {
    v14[4] = sub_100038CD0;
    v14[5] = 0;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_100038860;
    v14[3] = &unk_1000851D8;
    v12 = _Block_copy(v14);
    v13 = v11;
    objc_msgSend(v13, "acquireWithInvalidationHandler:", v12);
    _Block_release(v12);

  }
}

void sub_100038CD0(uint64_t a1, uint64_t a2)
{
  sub_100038D24(a1, a2, "Invalidated set up HTML CoreData stack operation, error %@", (void **)&qword_10008CE80);
}

void sub_100038D24(uint64_t a1, uint64_t a2, const char *a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_10008B118 != -1)
    swift_once(&qword_10008B118, sub_10003807C);
  v7 = type metadata accessor for Logger(0);
  sub_100010130(v7, (uint64_t)qword_10008CE58);
  swift_errorRetain(a2);
  v8 = swift_errorRetain(a2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    if (a2)
    {
      swift_errorRetain(a2);
      v13 = _swift_stdlib_bridgeErrorToNSError(a2);
      v16 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);
    }
    else
    {
      v16 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);
      v13 = 0;
    }
    *v12 = v13;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a3, v11, 0xCu);
    v14 = sub_100009F30(&qword_10008B548);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  v15 = *a4;
  *a4 = 0;

}

void sub_100038F28(uint64_t a1)
{
  sub_100038F3C(a1, (void **)&qword_10008CE80, "Finishing set up HTML CoreData stack operation");
}

void sub_100038F3C(uint64_t a1, void **a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;

  if (*a2)
  {
    if (qword_10008B118 != -1)
      swift_once(&qword_10008B118, sub_10003807C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100010130(v5, (uint64_t)qword_10008CE58);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, a3, v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = *a2;
    if (*a2)
    {
      objc_msgSend(v10, "invalidate");
      v10 = *a2;
    }
    *a2 = 0;

  }
}

uint64_t sub_100039050()
{
  return sub_100038164();
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100039098();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_100039098()
{
  unint64_t result;

  result = qword_10008CE90;
  if (!qword_10008CE90)
  {
    result = swift_getWitnessTable(&unk_10006AFE4, &type metadata for NotesWidgetBundle);
    atomic_store(result, (unint64_t *)&qword_10008CE90);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NotesWidgetBundle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

_QWORD *destroy for NotesWidgetBundle(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (result[3])
    result = (_QWORD *)sub_10000ADAC(result);
  if (v1[8])
    result = (_QWORD *)sub_10000ADAC(v1 + 5);
  if (v1[13])
    result = (_QWORD *)sub_10000ADAC(v1 + 10);
  if (v1[18])
    result = (_QWORD *)sub_10000ADAC(v1 + 15);
  if (v1[23])
    result = (_QWORD *)sub_10000ADAC(v1 + 20);
  if (v1[28])
    return (_QWORD *)sub_10000ADAC(v1 + 25);
  return result;
}

uint64_t initializeWithCopy for NotesWidgetBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = (_OWORD *)(a1 + 80);
  v13 = (_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 104);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = v15;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 96);
    *v12 = *v13;
    *(_OWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  v17 = (_OWORD *)(a1 + 120);
  v18 = (_OWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 144);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 136);
    *v17 = *v18;
    *(_OWORD *)(a1 + 136) = v21;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  }
  v22 = (_OWORD *)(a1 + 160);
  v23 = (_OWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a2 + 184);
  if (v24)
  {
    v25 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v24;
    *(_QWORD *)(a1 + 192) = v25;
    (**(void (***)(_OWORD *, _OWORD *))(v24 - 8))(v22, v23);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 176);
    *v22 = *v23;
    *(_OWORD *)(a1 + 176) = v26;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  }
  v27 = (_OWORD *)(a1 + 200);
  v28 = (_OWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a2 + 224);
  if (v29)
  {
    v30 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v29;
    *(_QWORD *)(a1 + 232) = v30;
    (**(void (***)(_OWORD *, _OWORD *))(v29 - 8))(v27, v28);
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 216);
    *v27 = *v28;
    *(_OWORD *)(a1 + 216) = v31;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  }
  return a1;
}

uint64_t assignWithCopy for NotesWidgetBundle(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      sub_100039594((_QWORD *)a1, a2);
      goto LABEL_8;
    }
    sub_10000ADAC((_QWORD *)a1);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
    goto LABEL_8;
  }
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_8:
  v7 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v7)
    {
      sub_100039594((_QWORD *)(a1 + 40), (_QWORD *)a2 + 5);
      goto LABEL_15;
    }
    sub_10000ADAC((_QWORD *)(a1 + 40));
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, (uint64_t)a2 + 40);
    goto LABEL_15;
  }
  v8 = *(__int128 *)((char *)a2 + 40);
  v9 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 56) = v9;
LABEL_15:
  v10 = *((_QWORD *)a2 + 13);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v10)
    {
      sub_100039594((_QWORD *)(a1 + 80), (_QWORD *)a2 + 10);
      goto LABEL_22;
    }
    sub_10000ADAC((_QWORD *)(a1 + 80));
  }
  else if (v10)
  {
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 80, (uint64_t)(a2 + 5));
    goto LABEL_22;
  }
  v11 = a2[5];
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 96) = v12;
LABEL_22:
  v13 = *((_QWORD *)a2 + 18);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v13)
    {
      sub_100039594((_QWORD *)(a1 + 120), (_QWORD *)a2 + 15);
      goto LABEL_29;
    }
    sub_10000ADAC((_QWORD *)(a1 + 120));
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 120, (uint64_t)a2 + 120);
    goto LABEL_29;
  }
  v14 = *(__int128 *)((char *)a2 + 120);
  v15 = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *(_OWORD *)(a1 + 120) = v14;
  *(_OWORD *)(a1 + 136) = v15;
LABEL_29:
  v16 = *((_QWORD *)a2 + 23);
  if (*(_QWORD *)(a1 + 184))
  {
    if (v16)
    {
      sub_100039594((_QWORD *)(a1 + 160), (_QWORD *)a2 + 20);
      goto LABEL_36;
    }
    sub_10000ADAC((_QWORD *)(a1 + 160));
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 184) = v16;
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 160, (uint64_t)(a2 + 10));
    goto LABEL_36;
  }
  v17 = a2[10];
  v18 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 176) = v18;
LABEL_36:
  v19 = *((_QWORD *)a2 + 28);
  if (!*(_QWORD *)(a1 + 224))
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 224) = v19;
      *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 200, (uint64_t)a2 + 200);
      return a1;
    }
LABEL_42:
    v20 = *(__int128 *)((char *)a2 + 200);
    v21 = *(__int128 *)((char *)a2 + 216);
    *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
    *(_OWORD *)(a1 + 200) = v20;
    *(_OWORD *)(a1 + 216) = v21;
    return a1;
  }
  if (!v19)
  {
    sub_10000ADAC((_QWORD *)(a1 + 200));
    goto LABEL_42;
  }
  sub_100039594((_QWORD *)(a1 + 200), (_QWORD *)a2 + 25);
  return a1;
}

_QWORD *sub_100039594(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for NotesWidgetBundle(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for NotesWidgetBundle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (*(_QWORD *)(a1 + 24))
    sub_10000ADAC((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    sub_10000ADAC((_QWORD *)(a1 + 40));
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 104))
    sub_10000ADAC((_QWORD *)(a1 + 80));
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 144))
    sub_10000ADAC((_QWORD *)(a1 + 120));
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 184))
    sub_10000ADAC((_QWORD *)(a1 + 160));
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 224))
    sub_10000ADAC((_QWORD *)(a1 + 200));
  v9 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v9;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotesWidgetBundle(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 240))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NotesWidgetBundle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 240) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotesWidgetBundle()
{
  return &type metadata for NotesWidgetBundle;
}

uint64_t sub_100039950(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F704, 1);
}

unint64_t sub_100039960()
{
  unint64_t result;

  result = qword_10008CEA8;
  if (!qword_10008CEA8)
  {
    result = swift_getWitnessTable(&unk_10006BBA4, &type metadata for QuickNoteControl);
    atomic_store(result, (unint64_t *)&qword_10008CEA8);
  }
  return result;
}

unint64_t sub_1000399A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CEB0;
  if (!qword_10008CEB0)
  {
    v1 = type metadata accessor for NSNotificationCenter.Publisher(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSNotificationCenter.Publisher, v1);
    atomic_store(result, (unint64_t *)&qword_10008CEB0);
  }
  return result;
}

uint64_t sub_1000399EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008CEB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100039A34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CEC0;
  if (!qword_10008CEC0)
  {
    v1 = objc_opt_self(RBSAttribute);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008CEC0);
  }
  return result;
}

uint64_t sub_100039A70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039A80(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100039A8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CEC8;
  if (!qword_10008CEC8)
  {
    v1 = sub_10000AE50(&qword_10008CED0);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleWidget<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CEC8);
  }
  return result;
}

uint64_t sub_100039AE8()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000011, 0x800000010006D7A0, 0);
  qword_100099500 = result;
  return result;
}

uint64_t sub_100039B20()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000015, 0x800000010006D780, 0);
  qword_100099508 = result;
  return result;
}

uint64_t *sub_100039B58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    sub_10000B2CC(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    v24[8] = v27;
    v28 = a3[7];
    v29 = (uint64_t *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = sub_100009F30(&qword_10008C7A0);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
    v35 = a3[8];
    v36 = (char *)v4 + v35;
    v37 = (char *)a2 + v35;
    v38 = type metadata accessor for URL(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = sub_100009F30(&qword_10008B170);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v41 = a3[9];
    v42 = a3[10];
    v43 = *(uint64_t *)((char *)a2 + v41);
    *(uint64_t *)((char *)v4 + v41) = v43;
    v44 = (uint64_t *)((char *)v4 + v42);
    v45 = (uint64_t *)((char *)a2 + v42);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = a3[11];
    v12 = *(uint64_t *)((char *)a2 + v47);
    *(uint64_t *)((char *)v4 + v47) = v12;
    swift_retain(v43);
    swift_bridgeObjectRetain(v46);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_100039E08(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_10000B470(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v9 = (_QWORD *)((char *)a1 + a2[7]);
  v10 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (char *)a1 + a2[8];
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
  swift_release(*(_QWORD *)((char *)a1 + a2[9]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10] + 8));
  return swift_release(*(_QWORD *)((char *)a1 + a2[11]));
}

uint64_t *sub_100039F98(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10000B2CC(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = (uint64_t *)((char *)a1 + v26);
  v28 = (uint64_t *)((char *)a2 + v26);
  v29 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    v32 = *v28;
    *v27 = *v28;
    swift_retain(v32);
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  v33 = a3[8];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for URL(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = sub_100009F30(&qword_10008B170);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v39 = a3[9];
  v40 = a3[10];
  v41 = *(uint64_t *)((char *)a2 + v39);
  *(uint64_t *)((char *)a1 + v39) = v41;
  v42 = (uint64_t *)((char *)a1 + v40);
  v43 = (uint64_t *)((char *)a2 + v40);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = a3[11];
  v46 = *(uint64_t *)((char *)a2 + v45);
  *(uint64_t *)((char *)a1 + v45) = v46;
  swift_retain(v41);
  swift_bridgeObjectRetain(v44);
  swift_retain(v46);
  return a1;
}

uint64_t *sub_10003A220(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (a1 != a2)
  {
    sub_10000CCD8((uint64_t)a1, &qword_10008CBD0);
    v6 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_10000CCD8((uint64_t)a1 + v12, &qword_10008B260);
    v15 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10000B2CC(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_10000B470(v26, v27);
  if (a1 != a2)
  {
    v28 = a3[7];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    sub_10000CCD8((uint64_t)a1 + v28, &qword_10008C7A0);
    v31 = sub_100009F30(&qword_10008C7A0);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
  }
  v35 = a3[8];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = type metadata accessor for URL(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 24))(v36, v37, v38);
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_19;
  }
  if (v42)
  {
LABEL_19:
    v43 = sub_100009F30(&qword_10008B170);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
LABEL_20:
  v44 = a3[9];
  v45 = *(uint64_t *)((char *)a1 + v44);
  v46 = *(uint64_t *)((char *)a2 + v44);
  *(uint64_t *)((char *)a1 + v44) = v46;
  swift_retain(v46);
  swift_release(v45);
  v47 = a3[10];
  v48 = (uint64_t *)((char *)a1 + v47);
  v49 = (uint64_t *)((char *)a2 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v52 = a3[11];
  v53 = *(uint64_t *)((char *)a1 + v52);
  v54 = *(uint64_t *)((char *)a2 + v52);
  *(uint64_t *)((char *)a1 + v52) = v54;
  swift_retain(v54);
  swift_release(v53);
  return a1;
}

char *sub_10003A568(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  v19 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100009F30(&qword_10008B170);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  return a1;
}

char *sub_10003A7C0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a1 != a2)
  {
    sub_10000CCD8((uint64_t)a1, &qword_10008CBD0);
    v6 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_10000CCD8((uint64_t)&a1[v8], &qword_10008B260);
    v11 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_10000B470(v17, v18);
  if (a1 != a2)
  {
    v19 = a3[7];
    v20 = &a1[v19];
    v21 = &a2[v19];
    sub_10000CCD8((uint64_t)&a1[v19], &qword_10008C7A0);
    v22 = sub_100009F30(&qword_10008C7A0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_17;
  }
  if (v31)
  {
LABEL_17:
    v32 = sub_100009F30(&qword_10008B170);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_18:
  v33 = a3[9];
  v34 = *(_QWORD *)&a1[v33];
  *(_QWORD *)&a1[v33] = *(_QWORD *)&a2[v33];
  swift_release(v34);
  v35 = a3[10];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v39 = *(_QWORD *)v37;
  v38 = *((_QWORD *)v37 + 1);
  v40 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease(v40);
  v41 = a3[11];
  v42 = *(_QWORD *)&a1[v41];
  *(_QWORD *)&a1[v41] = *(_QWORD *)&a2[v41];
  swift_release(v42);
  return a1;
}

uint64_t sub_10003AAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003AAE4);
}

uint64_t sub_10003AAE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = sub_100009F30(&qword_10008CED8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100009F30(&qword_10008B270);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100009F30(&qword_10008C798);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_9;
  }
  v15 = sub_100009F30(&qword_10008B170);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[9]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_10003ABF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003ABFC);
}

uint64_t sub_10003ABFC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_100009F30(&qword_10008CED8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100009F30(&qword_10008B270);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_100009F30(&qword_10008C798);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_9;
  }
  result = sub_100009F30(&qword_10008B170);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[8];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[9]) = a2;
  return result;
}

uint64_t type metadata accessor for WidgetHeader(uint64_t a1)
{
  uint64_t result;

  result = qword_10008CF38;
  if (!qword_10008CF38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetHeader);
  return result;
}

void sub_10003AD34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  sub_10000C2F0(319, (unint64_t *)&unk_10008CF48, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000C2F0(319, (unint64_t *)&unk_10008B2E8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      sub_10000C2F0(319, (unint64_t *)&unk_10008CB28, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_10000C2F0(319, (unint64_t *)&qword_10008B5D0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_10006B0B0;
          v10[6] = &unk_10006B0C8;
          v10[7] = &unk_10006B0B0;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10003AE6C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F754, 1);
}

uint64_t sub_10003AE7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[3];

  v31 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008CF90);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F30(&qword_10008CF98);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100009F30(&qword_10008CFA0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v13);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v16 = sub_100009F30(&qword_10008CFA8);
  sub_10003B0D8(v1, (uint64_t)&v8[*(int *)(v16 + 44)]);
  v17 = v1 + *(int *)(type metadata accessor for WidgetHeader(0) + 24);
  v18 = *(_QWORD *)v17;
  v19 = *(_BYTE *)(v17 + 8);
  sub_10000B2CC(*(_QWORD *)v17, v19);
  v20 = sub_1000337B0(v18, v19);
  v21 = sub_10000B470(v18, v19);
  if ((v20 & 1) != 0)
    v22 = 0x4046800000000000;
  else
    v22 = 0x403C000000000000;
  v23 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(v32, 0, 1, v22, 0, v23, v24);
  sub_10000CC94((uint64_t)v8, (uint64_t)v11, &qword_10008CF90);
  v25 = &v11[*(int *)(v9 + 36)];
  v26 = v32[1];
  *(_OWORD *)v25 = v32[0];
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v32[2];
  v27 = sub_10000CCD8((uint64_t)v8, &qword_10008CF90);
  static AccessibilityTraits.isHeader.getter(v27);
  v28 = sub_10003DF74();
  View.accessibility(addTraits:)(v5, v9, v28);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_10000CCD8((uint64_t)v11, &qword_10008CF98);
  return sub_10000CC50((uint64_t)v15, v31, &qword_10008CFA0);
}

uint64_t sub_10003B0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double (*v35)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  double (*v36)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  double (*v37)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  double (*v38)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  double (*v39)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  double (*v40)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  double (*v41)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double (*v46)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v47;
  double (**v48)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double (*v56)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  unsigned __int8 v57;
  double (*v58)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  unsigned __int8 v59;
  double (*v60)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  double (*v61)@<D0>(uint64_t@<X0>, uint64_t@<X8>);

  v55 = a2;
  v3 = type metadata accessor for WidgetHeader(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v7);
  v9 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100009F30(&qword_10008CFC0);
  v52 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100009F30(&qword_10008CFC8);
  v14 = __chkstk_darwin(v13);
  v54 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v50 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v50 - v19;
  sub_10000CC94(a1 + *(int *)(v3 + 32), v9, &qword_10008B170);
  sub_10000AF24(a1, (uint64_t)v6, type metadata accessor for WidgetHeader);
  v21 = *(unsigned __int8 *)(v4 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_100085290, v22 + v5, v21 | 7);
  sub_10003E1CC((uint64_t)v6, v23 + v22);
  v24 = sub_100009F30(&qword_10008CFD0);
  v25 = sub_100028918(&qword_10008CFD8, &qword_10008CFD0, (void (*)(void))sub_10003E24C);
  v26 = Link.init(destination:content:)(v9, sub_10003E210, v23, v24, v25);
  v27 = static Alignment.center.getter(v26);
  v29 = v28;
  v30 = (uint64_t)&v18[*(int *)(v13 + 36)];
  sub_10003B92C(a1, v30);
  v31 = (uint64_t *)(v30 + *(int *)(sub_100009F30(&qword_10008D020) + 36));
  *v31 = v27;
  v31[1] = v29;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v18, v12, v53);
  sub_10000CC50((uint64_t)v18, (uint64_t)v20, &qword_10008CFC8);
  v32 = a1 + *(int *)(v3 + 24);
  v33 = *(_QWORD *)v32;
  LOBYTE(v30) = *(_BYTE *)(v32 + 8);
  sub_10000B2CC(*(_QWORD *)v32, v30);
  LOBYTE(v9) = sub_1000337B0(v33, v30);
  v34 = sub_10000B470(v33, v30);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if ((v9 & 1) != 0)
  {
    v42 = static Alignment.center.getter(v34);
    _FrameLayout.init(width:height:alignment:)(&v56, 0, 1, 0x4014000000000000, 0, v42, v43);
    v36 = v56;
    v37 = (double (*)@<D0>(uint64_t@<X0>, uint64_t@<X8>))v57;
    v38 = v58;
    v39 = (double (*)@<D0>(uint64_t@<X0>, uint64_t@<X8>))v59;
    v35 = sub_10003DD74;
    v40 = v60;
    v41 = v61;
  }
  v44 = (uint64_t)v20;
  v51 = v20;
  v45 = v54;
  v46 = v41;
  sub_10000CC94(v44, v54, &qword_10008CFC8);
  v47 = v55;
  sub_10000CC94(v45, v55, &qword_10008CFC8);
  v48 = (double (**)@<D0>(uint64_t@<X0>, uint64_t@<X8>))(v47 + *(int *)(sub_100009F30(&qword_10008D028) + 48));
  *v48 = v35;
  v48[1] = 0;
  v48[2] = v36;
  v48[3] = v37;
  v48[4] = v38;
  v48[5] = v39;
  v48[6] = v40;
  v48[7] = v46;
  sub_10003E330((uint64_t)v35, 0);
  sub_10000CCD8((uint64_t)v51, &qword_10008CFC8);
  sub_10003E340((uint64_t)v35, 0);
  return sub_10000CCD8(v45, &qword_10008CFC8);
}

uint64_t sub_10003B4AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  double v15;
  uint64_t v17;

  v2 = type metadata accessor for WidgetRenderingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v17 - v7;
  v9 = sub_100009F30(&qword_10008CFE8);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B614((uint64_t)v11);
  type metadata accessor for WidgetHeader(0);
  v12 = sub_100033BD0((uint64_t)v8);
  static WidgetRenderingMode.accented.getter(v12);
  v13 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  v14(v8, v2);
  if ((v13 & 1) != 0)
    v15 = 0.0;
  else
    v15 = 1.0;
  sub_10000CC94((uint64_t)v11, a1, &qword_10008CFE8);
  *(double *)(a1 + *(int *)(sub_100009F30(&qword_10008CFD0) + 36)) = v15;
  return sub_10000CCD8((uint64_t)v11, &qword_10008CFE8);
}

uint64_t sub_10003B614@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __n128 v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  _OWORD v47[3];

  v2 = v1;
  v4 = sub_100009F30(&qword_10008D018);
  __chkstk_darwin(v4);
  v6 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100009F30(&qword_10008D008);
  __chkstk_darwin(v7);
  v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100009F30(&qword_10008CFF8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v11);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v14 = sub_100009F30(&qword_10008D160);
  sub_10003C3F0(v2, (uint64_t)&v6[*(int *)(v14 + 44)]);
  v15 = v2 + *(int *)(type metadata accessor for WidgetHeader(0) + 24);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  sub_10000B2CC(*(_QWORD *)v15, v17);
  v18 = sub_1000337B0(v16, v17);
  v19 = sub_10000B470(v16, v17);
  if ((v18 & 1) != 0)
  {
    v20 = static Color.white.getter(v19);
  }
  else
  {
    v21 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
    v20 = Color.init(_:)(v21);
  }
  v22 = v20;
  sub_10000CC94((uint64_t)v6, (uint64_t)v9, &qword_10008D018);
  *(_QWORD *)&v9[*(int *)(v7 + 36)] = v22;
  sub_10000CCD8((uint64_t)v6, &qword_10008D018);
  v24 = static Edge.Set.horizontal.getter(v23);
  v25 = *(_QWORD *)v15;
  LOBYTE(v22) = *(_BYTE *)(v15 + 8);
  sub_10000B2CC(*(_QWORD *)v15, v22);
  v26 = sub_1000337B0(v25, v22);
  v27 = sub_10000B470(v25, v22);
  v28.n128_u64[0] = 0;
  if ((v26 & 1) != 0)
    v28.n128_f64[0] = 16.0;
  v29 = EdgeInsets.init(_all:)(v27, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_10000CC94((uint64_t)v9, (uint64_t)v13, &qword_10008D008);
  v36 = &v13[*(int *)(v10 + 36)];
  *v36 = v24;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  sub_10000CCD8((uint64_t)v9, &qword_10008D008);
  v37 = *(_QWORD *)v15;
  v38 = *(_BYTE *)(v15 + 8);
  sub_10000B2CC(*(_QWORD *)v15, v38);
  v39 = sub_1000337B0(v37, v38);
  v40 = sub_10000B470(v37, v38);
  if ((v39 & 1) != 0)
    v41 = 0x4046800000000000;
  else
    v41 = 0x403C000000000000;
  v42 = static Alignment.center.getter(v40);
  _FrameLayout.init(width:height:alignment:)(v47, 0, 1, v41, 0, v42, v43);
  sub_10000CC94((uint64_t)v13, a1, &qword_10008CFF8);
  v44 = (_OWORD *)(a1 + *(int *)(sub_100009F30(&qword_10008CFE8) + 36));
  v45 = v47[1];
  *v44 = v47[0];
  v44[1] = v45;
  v44[2] = v47[2];
  return sub_10000CCD8((uint64_t)v13, &qword_10008CFF8);
}

uint64_t sub_10003B92C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t KeyPath;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v76 = a2;
  v79 = sub_100009F30(&qword_10008D038);
  __chkstk_darwin(v79);
  v73 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100009F30(&qword_10008B4A0);
  __chkstk_darwin(v65);
  v68 = (uint64_t *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = type metadata accessor for ColorScheme(0);
  v72 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v66 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100009F30(&qword_10008D040);
  v6 = __chkstk_darwin(v75);
  v64 = (uint64_t *)((char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v69 = (uint64_t)&v61 - v8;
  v9 = type metadata accessor for WidgetRenderingMode(0);
  v70 = *(_QWORD *)(v9 - 8);
  v71 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v61 - v13;
  v78 = sub_100009F30(&qword_10008D048);
  __chkstk_darwin(v78);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100009F30(&qword_10008D050);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v77 = sub_100009F30(&qword_10008D058);
  __chkstk_darwin(v77);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(int *)(type metadata accessor for WidgetHeader(0) + 24);
  v74 = a1;
  v23 = a1 + v22;
  v24 = *(_QWORD *)v23;
  LOBYTE(a1) = *(_BYTE *)(v23 + 8);
  sub_10000B2CC(*(_QWORD *)v23, a1);
  v25 = sub_1000337B0(v24, a1);
  v26 = sub_10000B470(v24, a1);
  if ((v25 & 1) != 0)
  {
    v61 = v17;
    v62 = v19;
    v28 = v72;
    v27 = (uint64_t)v73;
    v63 = v21;
    v29 = v75;
    v30 = sub_100033BD0((uint64_t)v14);
    static WidgetRenderingMode.vibrant.getter(v30);
    v31 = static WidgetRenderingMode.== infix(_:_:)(v14, v12);
    v32 = v71;
    v33 = *(void (**)(char *, uint64_t))(v70 + 8);
    v33(v12, v71);
    v34 = ((uint64_t (*)(char *, uint64_t))v33)(v14, v32);
    v35 = (uint64_t)v16;
    v36 = v77;
    v38 = v78;
    v37 = v79;
    if ((v31 & 1) != 0)
    {
      v39 = static Color.tertiary.getter(v34);
      v41 = v66;
      v40 = v67;
      (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v66, enum case for ColorScheme.dark(_:), v67);
      KeyPath = swift_getKeyPath(&unk_10006B130);
      v43 = v68;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))((char *)v68 + *(int *)(v65 + 28), v41, v40);
      *v43 = KeyPath;
      v44 = v29;
      v45 = v64;
      sub_10000CC94((uint64_t)v43, (uint64_t)v64 + *(int *)(v29 + 36), &qword_10008B4A0);
      *v45 = v39;
      swift_retain(v39);
      sub_10000CCD8((uint64_t)v43, &qword_10008B4A0);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v41, v40);
      swift_release(v39);
      v46 = &qword_10008D040;
      v47 = v69;
      sub_10000CC50((uint64_t)v45, v69, &qword_10008D040);
      v48 = (uint64_t)v62;
      sub_10000CC94(v47, (uint64_t)v62, &qword_10008D040);
      swift_storeEnumTagMultiPayload(v48, v61, 1);
      v49 = sub_10003E358();
      v50 = (uint64_t)v63;
      _ConditionalContent<>.init(storage:)(v48, &type metadata for Color, v44, &protocol witness table for Color, v49);
      sub_10000CC94(v50, v35, &qword_10008D058);
      swift_storeEnumTagMultiPayload(v35, v78, 0);
      v51 = sub_10003E3DC();
      v52 = sub_100028918(&qword_10008D070, &qword_10008D038, (void (*)(void))sub_10003E448);
      _ConditionalContent<>.init(storage:)(v35, v77, v79, v51, v52);
      sub_10000CCD8(v50, &qword_10008D058);
      v53 = v47;
    }
    else
    {
      sub_10003BF44(v27);
      v46 = &qword_10008D038;
      sub_10000CC94(v27, v35, &qword_10008D038);
      swift_storeEnumTagMultiPayload(v35, v38, 1);
      v59 = sub_10003E3DC();
      v60 = sub_100028918(&qword_10008D070, &qword_10008D038, (void (*)(void))sub_10003E448);
      _ConditionalContent<>.init(storage:)(v35, v36, v37, v59, v60);
      v53 = v27;
    }
    return sub_10000CCD8(v53, v46);
  }
  else
  {
    v54 = static Color.clear.getter(v26);
    *v19 = v54;
    swift_storeEnumTagMultiPayload(v19, v17, 0);
    v55 = sub_10003E358();
    swift_retain(v54);
    _ConditionalContent<>.init(storage:)(v19, &type metadata for Color, v75, &protocol witness table for Color, v55);
    sub_10000CC94((uint64_t)v21, (uint64_t)v16, &qword_10008D058);
    swift_storeEnumTagMultiPayload(v16, v78, 0);
    v56 = sub_10003E3DC();
    v57 = sub_100028918(&qword_10008D070, &qword_10008D038, (void (*)(void))sub_10003E448);
    _ConditionalContent<>.init(storage:)(v16, v77, v79, v56, v57);
    sub_10000CCD8((uint64_t)v21, &qword_10008D058);
    return swift_release(v54);
  }
}

uint64_t sub_10003BF44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _BYTE *v36;
  double v37;
  uint64_t v38;
  __n128 v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v50[4];
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;

  v61 = a1;
  v1 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v1);
  v60 = &v50[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for BlendMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = sub_100009F30(&qword_10008D100);
  __chkstk_darwin(v57);
  v8 = &v50[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100009F30(&qword_10008D0B0);
  __chkstk_darwin(v9);
  v11 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100009F30(&qword_10008D0A0);
  __chkstk_darwin(v12);
  v14 = &v50[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v56 = sub_100009F30(&qword_10008D090);
  __chkstk_darwin(v56);
  v55 = &v50[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = sub_100009F30(&qword_10008D080);
  __chkstk_darwin(v59);
  v58 = &v50[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10003D50C((uint64_t)v11);
  v17 = Color.init(_:bundle:)(0xD00000000000001CLL, 0x800000010006D7C0, 0);
  v54 = v14;
  sub_10000CC94((uint64_t)v11, (uint64_t)v14, &qword_10008D0B0);
  v18 = &v14[*(int *)(v12 + 36)];
  *(_QWORD *)v18 = v17;
  *(_OWORD *)(v18 + 8) = xmmword_10006B030;
  *((_QWORD *)v18 + 3) = 0x3FF0000000000000;
  v19 = sub_10000CCD8((uint64_t)v11, &qword_10008D0B0);
  v20 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(&v62, 0, 1, 0x3FF0000000000000, 0, v20, v21);
  LOBYTE(v11) = v63;
  v52 = v64;
  v53 = v62;
  v51 = v65;
  v23 = v66;
  v22 = v67;
  v24 = Color.init(_:bundle:)(0xD00000000000001DLL, 0x800000010006D7E0, 0);
  v25 = v4;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for BlendMode.plusDarker(_:), v3);
  v26 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16);
  v27 = (uint64_t)v60;
  v26(v60, v6, v3);
  sub_10000AF24(v27, (uint64_t)&v8[*(int *)(v57 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v8 = v53;
  v8[8] = (_BYTE)v11;
  *((_QWORD *)v8 + 2) = v52;
  v8[24] = v51;
  *((_QWORD *)v8 + 4) = v23;
  *((_QWORD *)v8 + 5) = v22;
  *((_OWORD *)v8 + 3) = xmmword_10006B040;
  *((_QWORD *)v8 + 8) = v24;
  *((_QWORD *)v8 + 9) = 0;
  *((_QWORD *)v8 + 10) = 0;
  *((_QWORD *)v8 + 11) = 0xBFF0000000000000;
  swift_retain(v24);
  sub_10003E6A4(v27);
  (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v6, v3);
  v28 = swift_release(v24);
  v29 = static Alignment.bottom.getter(v28);
  v31 = v30;
  v32 = (uint64_t)v55;
  v33 = (uint64_t)&v55[*(int *)(v56 + 36)];
  sub_10000CC94((uint64_t)v8, v33, &qword_10008D100);
  v34 = (uint64_t *)(v33 + *(int *)(sub_100009F30(&qword_10008D0E8) + 36));
  *v34 = v29;
  v34[1] = v31;
  v35 = (uint64_t)v54;
  sub_10000CC94((uint64_t)v54, v32, &qword_10008D0A0);
  sub_10000CCD8((uint64_t)v8, &qword_10008D100);
  sub_10000CCD8(v35, &qword_10008D0A0);
  v36 = v58;
  sub_10000CC94(v32, (uint64_t)v58, &qword_10008D090);
  *(_WORD *)&v36[*(int *)(v59 + 36)] = 0;
  sub_10000CCD8(v32, &qword_10008D090);
  v38 = static Edge.Set.horizontal.getter(v37);
  LOBYTE(v29) = v38;
  v39.n128_u64[0] = -1.0;
  v40 = EdgeInsets.init(_all:)(v38, v39);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v47 = v61;
  sub_10000CC94((uint64_t)v36, v61, &qword_10008D080);
  v48 = v47 + *(int *)(sub_100009F30(&qword_10008D038) + 36);
  *(_BYTE *)v48 = v29;
  *(double *)(v48 + 8) = v40;
  *(_QWORD *)(v48 + 16) = v42;
  *(_QWORD *)(v48 + 24) = v44;
  *(_QWORD *)(v48 + 32) = v46;
  *(_BYTE *)(v48 + 40) = 0;
  return sub_10000CCD8((uint64_t)v36, &qword_10008D080);
}

uint64_t sub_10003C3F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t OpaqueTypeConformance2;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;

  v158 = a2;
  v144 = sub_100009F30(&qword_10008D168);
  v143 = *(_QWORD *)(v144 - 8);
  v3 = __chkstk_darwin(v144);
  v142 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v141 = (char *)&v127 - v5;
  v6 = sub_100009F30(&qword_10008D170);
  v7 = __chkstk_darwin(v6);
  v151 = (uint64_t *)((char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v10 = (char *)&v127 - v9;
  v160 = sub_100009F30(&qword_10008D178);
  __chkstk_darwin(v160);
  v149 = (char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for BlendMode(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v129 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100009F30(&qword_10008D180);
  v147 = *(_QWORD *)(v13 - 8);
  v148 = v13;
  __chkstk_darwin(v13);
  v153 = (uint64_t)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100009F30(&qword_10008D188);
  v15 = __chkstk_darwin(v159);
  v128 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v132 = (uint64_t)&v127 - v17;
  v136 = type metadata accessor for WidgetRenderingMode(0);
  v135 = *(_QWORD *)(v136 - 8);
  v18 = __chkstk_darwin(v136);
  v134 = (char *)&v127 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v133 = (uint64_t)&v127 - v20;
  v21 = sub_100009F30(&qword_10008D190);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v163 = (uint64_t)&v127 - v25;
  v161 = type metadata accessor for ContentSizeCategory(0);
  v26 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v28 = (char *)&v127 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Font.TextStyle(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100009F30(&qword_10008D198);
  v138 = *(_QWORD *)(v139 - 8);
  v33 = __chkstk_darwin(v139);
  v35 = (char *)&v127 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v137 = (char *)&v127 - v36;
  v37 = sub_100009F30(&qword_10008D1A0);
  v38 = __chkstk_darwin(v37);
  v40 = (char *)&v127 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v162 = (uint64_t)&v127 - v41;
  v42 = type metadata accessor for WidgetHeader(0);
  v43 = *(int *)(v42 + 36);
  v145 = a1;
  v44 = *(_QWORD *)(a1 + v43);
  v156 = v26;
  v157 = v10;
  v150 = v24;
  v140 = v28;
  v154 = v30;
  v155 = v29;
  v152 = v32;
  v146 = v40;
  v164 = v42;
  if (v44)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, enum case for Font.TextStyle.body(_:), v29);
    swift_retain(v44);
    v45 = static Font.systemSingleLineA(_:)(v32);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
    KeyPath = swift_getKeyPath(&unk_10006B160);
    v165 = v44;
    v166 = KeyPath;
    v167 = v45;
    v47 = v161;
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, enum case for ContentSizeCategory.large(_:), v161);
    swift_retain(v44);
    v48 = sub_100009F30(&qword_10008D210);
    v49 = sub_10003E99C();
    View.maximumSizeCategory(_:)(v28, v48, v49);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v47);
    swift_release(v165);
    swift_release(v166);
    swift_release(v167);
    v50 = v138;
    v51 = v137;
    v52 = v139;
    (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v137, v35, v139);
    v53 = v145;
    v54 = v145 + *(int *)(v164 + 24);
    v55 = *(_QWORD *)v54;
    LOBYTE(v48) = *(_BYTE *)(v54 + 8);
    sub_10000B2CC(*(_QWORD *)v54, v48);
    v56 = sub_1000337B0(v55, v48);
    sub_10000B470(v55, v48);
    if ((v56 & 1) != 0)
      v57 = 0x4024000000000000;
    else
      v57 = 0x4010000000000000;
    v58 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    v58(v35, v51, v52);
    v58(v40, v35, v52);
    v59 = *(int *)(sub_100009F30(&qword_10008D220) + 48);
    swift_release(v44);
    v60 = &v40[v59];
    *(_QWORD *)v60 = v57;
    v60[8] = 0;
    v61 = *(void (**)(char *, uint64_t))(v50 + 8);
    v61(v51, v52);
    v61(v35, v52);
    v62 = sub_100009F30(&qword_10008D1A8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v40, 0, 1, v62);
    sub_10000CC50((uint64_t)v40, v162, &qword_10008D1A0);
    v63 = v164;
  }
  else
  {
    v63 = v42;
    v64 = sub_100009F30(&qword_10008D1A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v162, 1, 1, v64);
    v53 = v145;
  }
  v66 = v148;
  v65 = (uint64_t)v149;
  v67 = v159;
  v68 = v160;
  v69 = v147;
  if (*(_QWORD *)(v53 + *(int *)(v63 + 40) + 8))
    goto LABEL_10;
  v70 = v133;
  v71 = sub_100033BD0(v133);
  v72 = v134;
  static WidgetRenderingMode.fullColor.getter(v71);
  v73 = static WidgetRenderingMode.== infix(_:_:)(v70, v72);
  v74 = *(void (**)(char *, uint64_t))(v135 + 8);
  v75 = v72;
  v76 = v136;
  v74(v75, v136);
  v77 = v70;
  v78 = v76;
  v67 = v159;
  v68 = v160;
  v74((char *)v77, v78);
  if ((v73 & 1) == 0)
  {
LABEL_10:
    v90 = v153;
    sub_10003D008(v153);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v65, v90, v66);
    swift_storeEnumTagMultiPayload(v65, v68, 1);
    v91 = sub_10003E6E0();
    v92 = sub_10000AE50(&qword_10008D1B8);
    v93 = sub_10003E774();
    v165 = v92;
    v166 = v93;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v165, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v65, v67, v66, v91, OpaqueTypeConformance2);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v90, v66);
  }
  else
  {
    v79 = v153;
    sub_10003D008(v153);
    v80 = v130;
    v81 = v129;
    v82 = v131;
    (*(void (**)(char *, _QWORD, uint64_t))(v130 + 104))(v129, enum case for BlendMode.plusLighter(_:), v131);
    v83 = (uint64_t)v128;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(&v128[*(int *)(v67 + 36)], v81, v82);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v83, v79, v66);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v82);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v79, v66);
    v84 = v132;
    sub_10000CC50(v83, v132, &qword_10008D188);
    sub_10000CC94(v84, v65, &qword_10008D188);
    swift_storeEnumTagMultiPayload(v65, v160, 0);
    v85 = sub_10003E6E0();
    v86 = v67;
    v87 = sub_10000AE50(&qword_10008D1B8);
    v88 = sub_10003E774();
    v165 = v87;
    v166 = v88;
    v89 = swift_getOpaqueTypeConformance2(&v165, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v65, v86, v66, v85, v89);
    sub_10000CCD8(v84, &qword_10008D188);
  }
  v95 = v156;
  v96 = (uint64_t)v157;
  v97 = v161;
  v98 = v152;
  v99 = *(_QWORD *)(v53 + *(int *)(v164 + 44));
  v101 = v154;
  v100 = v155;
  v102 = v162;
  if (v99)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v154 + 104))(v152, enum case for Font.TextStyle.body(_:), v155);
    swift_retain(v99);
    v103 = static Font.systemSingleLineA(_:)(v98);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v98, v100);
    v104 = swift_getKeyPath(&unk_10006B160);
    v165 = v99;
    v166 = v104;
    v167 = v103;
    v105 = v140;
    (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v140, enum case for ContentSizeCategory.large(_:), v97);
    swift_retain(v99);
    v106 = v95;
    v107 = sub_100009F30(&qword_10008D1F8);
    v108 = sub_10003E918();
    v109 = v142;
    View.maximumSizeCategory(_:)(v105, v107, v108);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v97);
    swift_release(v165);
    swift_release(v166);
    swift_release(v167);
    v110 = v143;
    v111 = v141;
    v112 = v144;
    (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v141, v109, v144);
    v113 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
    v113(v109, v111, v112);
    v114 = (uint64_t)v151;
    *v151 = 0x4024000000000000;
    *(_BYTE *)(v114 + 8) = 0;
    v115 = sub_100009F30(&qword_10008D208);
    v113((char *)(v114 + *(int *)(v115 + 48)), v109, v112);
    swift_release(v99);
    v116 = *(void (**)(char *, uint64_t))(v110 + 8);
    v116(v111, v112);
    v116(v109, v112);
    v117 = sub_100009F30(&qword_10008D1E8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v114, 0, 1, v117);
    v118 = v96;
    sub_10000CC50(v114, v96, &qword_10008D170);
    v119 = (uint64_t)v150;
  }
  else
  {
    v120 = sub_100009F30(&qword_10008D1E8);
    v118 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v96, 1, 1, v120);
    v119 = (uint64_t)v150;
    v114 = (uint64_t)v151;
  }
  v121 = (uint64_t)v146;
  sub_10000CC94(v102, (uint64_t)v146, &qword_10008D1A0);
  v122 = v163;
  sub_10000CC94(v163, v119, &qword_10008D190);
  sub_10000CC94(v118, v114, &qword_10008D170);
  v123 = v158;
  sub_10000CC94(v121, v158, &qword_10008D1A0);
  v124 = v118;
  v125 = sub_100009F30(&qword_10008D1F0);
  sub_10000CC94(v119, v123 + *(int *)(v125 + 48), &qword_10008D190);
  sub_10000CC94(v114, v123 + *(int *)(v125 + 64), &qword_10008D170);
  sub_10000CCD8(v124, &qword_10008D170);
  sub_10000CCD8(v122, &qword_10008D190);
  sub_10000CCD8(v102, &qword_10008D1A0);
  sub_10000CCD8(v114, &qword_10008D170);
  sub_10000CCD8(v119, &qword_10008D190);
  return sub_10000CCD8(v121, &qword_10008D1A0);
}

uint64_t sub_10003D008@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  double v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[3];
  char v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80[4];

  v74 = a1;
  v75 = type metadata accessor for ContentSizeCategory(0);
  v73 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v72 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for WidgetFamily(0);
  v66 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v65 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v64 = (uint64_t)&v61 - v6;
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100009F30(&qword_10008D228);
  v68 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v67 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100009F30(&qword_10008D1B8);
  __chkstk_darwin(v69);
  v71 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for WidgetHeader(0);
  v13 = *(int *)(v62 + 40);
  v63 = v1;
  v14 = (uint64_t *)(v1 + v13);
  v15 = v14[1];
  if (v15)
  {
    v16 = *v14;
    v17 = v14[1];
  }
  else
  {
    v16 = static String.placeholder.getter();
    v17 = v18;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.subheadline(_:), v7);
  swift_bridgeObjectRetain(v15);
  v19 = static Font.systemSingleLineA(_:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v20 = Text.font(_:)(v19, v16, v17, 0, _swiftEmptyArrayStorage);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_bridgeObjectRelease(v17);
  v27 = swift_release(v19);
  v28 = v24 & 1;
  v29 = static Font.Weight.semibold.getter(v27);
  v30 = Text.fontWeight(_:)(*(_QWORD *)&v29, 0, v20, v22, v24 & 1, v26);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  sub_10000AFA4(v20, v22, v28);
  swift_bridgeObjectRelease(v26);
  v61 = v14[1];
  v37 = v64;
  sub_100033968(v64);
  v39 = v65;
  v38 = v66;
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, enum case for WidgetFamily.systemSmall(_:), v3);
  v40 = sub_10000C5FC(&qword_10008D230, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v76, v3, v40);
  dispatch thunk of RawRepresentable.rawValue.getter(v80, v3, v40);
  v41 = v76[0];
  v42 = v80[0];
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v39, v3);
  v43((char *)v37, v3);
  v44 = 0.5;
  if (v41 == v42)
    v44 = 0.75;
  v45 = Text.placeholder(_:scale:)(v61 == 0, v30, v32, v36, v34, v44);
  sub_10000AFA4(v30, v32, v36);
  swift_bridgeObjectRelease(v34);
  KeyPath = swift_getKeyPath(&unk_10006B190);
  v47 = swift_getKeyPath(&unk_10006B1C0);
  v76[0] = v45;
  v76[1] = KeyPath;
  v76[2] = 1;
  v77 = 0;
  v78 = v47;
  v79 = 0xC020000000000000;
  v48 = sub_100009F30(&qword_10008D1C8);
  v49 = sub_10003E808();
  v50 = v67;
  View.hyphenationFactor(_:)(v48, v49, 0.1);
  swift_release(v47);
  swift_release(KeyPath);
  v51 = swift_release(v45);
  v52 = static Alignment.leading.getter(v51);
  v53 = v71;
  v55 = sub_10005978C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v71, 0.0, 1, 0.0, 1, v52, v54);
  (*(void (**)(char *, uint64_t, double))(v68 + 8))(v50, v70, v55);
  v57 = v72;
  v56 = v73;
  v58 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for ContentSizeCategory.accessibilityMedium(_:), v75);
  v59 = sub_10003E774();
  View.maximumSizeCategory(_:)(v57, v69, v59);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
  return sub_10000CCD8(v53, &qword_10008D1B8);
}

uint64_t sub_10003D50C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;

  v37 = a1;
  v1 = sub_100009F30(&qword_10008D108);
  __chkstk_darwin(v1);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100009F30(&qword_10008D0D0);
  __chkstk_darwin(v36);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetRenderingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  type metadata accessor for WidgetHeader(0);
  v13 = sub_100033BD0((uint64_t)v12);
  static WidgetRenderingMode.accented.getter(v13);
  v14 = sub_10000C5FC(&qword_10008D110, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v12, v6, v14);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  v17 = ((uint64_t (*)(char *, uint64_t))v16)(v12, v6);
  if ((v15 & 1) != 0)
  {
    *(_QWORD *)v5 = static Alignment.center.getter(v17);
    *((_QWORD *)v5 + 1) = v18;
    v19 = sub_100009F30(&qword_10008D120);
    sub_10003D858(&v5[*(int *)(v19 + 44)]);
    sub_10000CC94((uint64_t)v5, (uint64_t)v3, &qword_10008D0D0);
    swift_storeEnumTagMultiPayload(v3, v1, 0);
    v20 = sub_10000CC08(&qword_10008D0C8, &qword_10008D0D0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v21 = sub_10003E658();
    _ConditionalContent<>.init(storage:)(v3, v36, &type metadata for LinearGradient, v20, v21);
    return sub_10000CCD8((uint64_t)v5, &qword_10008D0D0);
  }
  else
  {
    v23 = sub_100009F30(&qword_10008D118);
    v24 = swift_allocObject(v23, 48, 7);
    *(_OWORD *)(v24 + 16) = xmmword_10006B050;
    *(_QWORD *)(v24 + 32) = Color.init(_:bundle:)(0xD000000000000029, 0x800000010006D800, 0);
    v25 = Color.init(_:bundle:)(0xD000000000000028, 0x800000010006D830, 0);
    *(_QWORD *)(v24 + 40) = v25;
    *(_QWORD *)&v38[0] = v24;
    specialized Array._endMutation()(v25);
    v26 = Gradient.init(colors:)(*(_QWORD *)&v38[0]);
    v27 = static UnitPoint.top.getter(v26);
    v29 = v28;
    v30 = static UnitPoint.bottom.getter();
    LinearGradient.init(gradient:startPoint:endPoint:)(v38, v27, v29, v30, v31);
    v32 = v38[1];
    *(_OWORD *)v3 = v38[0];
    *((_OWORD *)v3 + 1) = v32;
    *((_QWORD *)v3 + 4) = v39;
    swift_storeEnumTagMultiPayload(v3, v1, 1);
    v33 = sub_10000CC08(&qword_10008D0C8, &qword_10008D0D0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v34 = sub_10003E658();
    return _ConditionalContent<>.init(storage:)(v3, v36, &type metadata for LinearGradient, v33, v34);
  }
}

uint64_t sub_10003D858@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  __n128 v38;
  __int128 v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a1;
  v1 = type metadata accessor for Color.RGBColorSpace(0);
  *(_QWORD *)&v40 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008D128);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100009F30(&qword_10008D130);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v40 - v13;
  *v6 = static Alignment.center.getter(v12);
  v6[1] = v15;
  v16 = sub_100009F30(&qword_10008D138);
  sub_10003DB4C((_QWORD *)((char *)v6 + *(int *)(v16 + 44)));
  v17 = sub_10000CC08(&qword_10008D140, &qword_10008D128, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.widgetAccentable(_:)(1, v4, v17);
  sub_10000CCD8((uint64_t)v6, &qword_10008D128);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v11, v7);
  v18 = sub_100009F30(&qword_10008D118);
  v19 = swift_allocObject(v18, 48, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10006B050;
  v20 = enum case for Color.RGBColorSpace.sRGB(_:);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 104);
  v21(v3, enum case for Color.RGBColorSpace.sRGB(_:), v1);
  *(_QWORD *)(v19 + 32) = Color.init(_:white:opacity:)(v3, 0.0, 0.0);
  v21(v3, v20, v1);
  v22 = Color.init(_:white:opacity:)(v3, 0.0, 0.31);
  *(_QWORD *)(v19 + 40) = v22;
  v42 = v19;
  v23 = specialized Array._endMutation()(v22);
  v24 = v42;
  v25 = static UnitPoint.top.getter(v23);
  v27 = v26;
  v28 = static UnitPoint.bottom.getter();
  v30 = v29;
  Gradient.init(colors:)(v24);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v42, v25, v27, v28, v30);
  v31 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v31(v11, v14, v7);
  v33 = v41;
  v32 = v42;
  v40 = v43;
  v34 = v44;
  v35 = v45;
  v31(v41, v11, v7);
  v36 = &v33[*(int *)(sub_100009F30(&qword_10008D148) + 48)];
  *(_QWORD *)v36 = v32;
  *(_OWORD *)(v36 + 8) = v40;
  *((_QWORD *)v36 + 3) = v34;
  *((_QWORD *)v36 + 4) = v35;
  v37 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain(v32);
  v37(v14, v7);
  v38 = swift_bridgeObjectRelease(v32);
  return ((uint64_t (*)(char *, uint64_t, __n128))v37)(v11, v7, v38);
}

uint64_t sub_10003DB4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for BlendMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008CFE8);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F30(&qword_10008D150);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v18 - v13;
  if (qword_10008B128 != -1)
    swift_once(&qword_10008B128, sub_100039AE8);
  v15 = qword_100099500;
  swift_retain(qword_100099500);
  sub_10003B614((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for BlendMode.destinationOut(_:), v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(&v12[*(int *)(v9 + 36)], v5, v2);
  sub_10000CC94((uint64_t)v8, (uint64_t)v12, &qword_10008CFE8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_10000CCD8((uint64_t)v8, &qword_10008CFE8);
  sub_10000CC50((uint64_t)v12, (uint64_t)v14, &qword_10008D150);
  sub_10000CC94((uint64_t)v14, (uint64_t)v12, &qword_10008D150);
  *a1 = v15;
  v16 = sub_100009F30(&qword_10008D158);
  sub_10000CC94((uint64_t)v12, (uint64_t)a1 + *(int *)(v16 + 48), &qword_10008D150);
  swift_retain(v15);
  sub_10000CCD8((uint64_t)v14, &qword_10008D150);
  sub_10000CCD8((uint64_t)v12, &qword_10008D150);
  return swift_release(v15);
}

double sub_10003DD74@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[16];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD v25[5];

  v20 = a1;
  v3 = Path.init(_:)(&v21, sub_10003E350, v19);
  v18 = v21;
  v4 = v22;
  v5 = v23;
  v6 = v24;
  v7 = static Color.quaternary.getter(v3);
  v8 = sub_100009F30(&qword_10008D030);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10006B050;
  *(_OWORD *)(v9 + 32) = xmmword_10006B060;
  v10 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v25, 1, 0, v9, 2.0, 10.0, 0.05);
  v11 = v25[0];
  v12 = v25[2];
  v13 = v25[3];
  v14 = v25[4];
  v15 = static Alignment.center.getter(v10);
  *(_OWORD *)a2 = v18;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v6;
  result = *(double *)&v25[1];
  *(_QWORD *)(a2 + 40) = v11;
  *(double *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 64) = v13;
  *(_QWORD *)(a2 + 72) = v14;
  *(_QWORD *)(a2 + 80) = v7;
  *(_WORD *)(a2 + 88) = 256;
  *(_QWORD *)(a2 + 96) = v15;
  *(_QWORD *)(a2 + 104) = v17;
  return result;
}

void sub_10003DE80()
{
  long double v0;
  long double v1;
  double v2;
  double v3;
  long double v4;
  long double v5;

  v0 = GeometryProxy.size.getter();
  v1 = remainder(v0, 4.0);
  Path.move(to:)((CGPoint)__PAIR128__(4.0, v1 * 0.5));
  v2 = GeometryProxy.size.getter() * 0.25;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v2 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((unint64_t)((uint64_t)v2 - 0x2000000000000000) >> 62 == 3)
  {
    v3 = (double)(4 * (uint64_t)v2);
    v4 = GeometryProxy.size.getter();
    v5 = remainder(v4, 4.0);
    Path.addLine(to:)((CGPoint)__PAIR128__(4.0, v3 + v5 * -0.5));
    return;
  }
LABEL_9:
  __break(1u);
}

unint64_t sub_10003DF74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CFB0;
  if (!qword_10008CFB0)
  {
    v1 = sub_10000AE50(&qword_10008CF98);
    sub_10000CC08(&qword_10008CFB8, &qword_10008CF90, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CFB0);
  }
  return result;
}

uint64_t sub_10003DFF8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for WidgetHeader(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  sub_10000B470(*(_QWORD *)((char *)v6 + v1[6]), *((_BYTE *)v6 + v1[6] + 8));
  v12 = (_QWORD *)((char *)v6 + v1[7]);
  v13 = sub_100009F30(&qword_10008C7A0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = (char *)v6 + v1[8];
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  swift_release(*(_QWORD *)((char *)v6 + v1[9]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[10] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[11]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10003E1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetHeader(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E210@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for WidgetHeader(0);
  return sub_10003B4AC(a1);
}

uint64_t sub_10003E24C()
{
  return sub_100028918(&qword_10008CFE0, &qword_10008CFE8, (void (*)(void))sub_10003E270);
}

uint64_t sub_10003E270()
{
  return sub_100028918(&qword_10008CFF0, &qword_10008CFF8, (void (*)(void))sub_10003E294);
}

unint64_t sub_10003E294()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D000;
  if (!qword_10008D000)
  {
    v1 = sub_10000AE50(&qword_10008D008);
    sub_10000CC08(&qword_10008D010, &qword_10008D018, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000CC08(&qword_10008C8A0, &qword_10008C8A8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D000);
  }
  return result;
}

uint64_t sub_10003E330(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10003E340(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_10003E350()
{
  sub_10003DE80();
}

unint64_t sub_10003E358()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D060;
  if (!qword_10008D060)
  {
    v1 = sub_10000AE50(&qword_10008D040);
    sub_10000CC08(&qword_10008B498, &qword_10008B4A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D060);
  }
  return result;
}

unint64_t sub_10003E3DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D068;
  if (!qword_10008D068)
  {
    v1 = sub_10000AE50(&qword_10008D058);
    sub_10003E358();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D068);
  }
  return result;
}

unint64_t sub_10003E448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D078;
  if (!qword_10008D078)
  {
    v1 = sub_10000AE50(&qword_10008D080);
    sub_10003E4CC();
    sub_10000CC08(&qword_10008D0F0, &qword_10008D0F8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D078);
  }
  return result;
}

unint64_t sub_10003E4CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D088;
  if (!qword_10008D088)
  {
    v1 = sub_10000AE50(&qword_10008D090);
    sub_100028918(&qword_10008D098, &qword_10008D0A0, (void (*)(void))sub_10003E570);
    sub_10000CC08(&qword_10008D0E0, &qword_10008D0E8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D088);
  }
  return result;
}

unint64_t sub_10003E570()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D0A8;
  if (!qword_10008D0A8)
  {
    v1 = sub_10000AE50(&qword_10008D0B0);
    sub_10003E5D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D0A8);
  }
  return result;
}

unint64_t sub_10003E5D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D0B8;
  if (!qword_10008D0B8)
  {
    v1 = sub_10000AE50(&qword_10008D0C0);
    sub_10000CC08(&qword_10008D0C8, &qword_10008D0D0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10003E658();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D0B8);
  }
  return result;
}

unint64_t sub_10003E658()
{
  unint64_t result;

  result = qword_10008D0D8;
  if (!qword_10008D0D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, (unint64_t *)&qword_10008D0D8);
  }
  return result;
}

uint64_t sub_10003E6A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10003E6E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008D1B0;
  if (!qword_10008D1B0)
  {
    v1 = sub_10000AE50(&qword_10008D188);
    v2[0] = sub_10000AE50(&qword_10008D1B8);
    v2[1] = sub_10003E774();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D1B0);
  }
  return result;
}

unint64_t sub_10003E774()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008D1C0;
  if (!qword_10008D1C0)
  {
    v1 = sub_10000AE50(&qword_10008D1B8);
    v2[0] = sub_10000AE50(&qword_10008D1C8);
    v2[1] = sub_10003E808();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hyphenationFactor(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D1C0);
  }
  return result;
}

unint64_t sub_10003E808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D1D0;
  if (!qword_10008D1D0)
  {
    v1 = sub_10000AE50(&qword_10008D1C8);
    sub_10003E88C();
    sub_10000CC08(&qword_10008D1D8, &qword_10008D1E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D1D0);
  }
  return result;
}

unint64_t sub_10003E88C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008CC78;
  if (!qword_10008CC78)
  {
    v1 = sub_10000AE50(&qword_10008CC70);
    sub_10000CC08(&qword_10008CC80, &qword_10008CC88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008CC78);
  }
  return result;
}

unint64_t sub_10003E918()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D200;
  if (!qword_10008D200)
  {
    v1 = sub_10000AE50(&qword_10008D1F8);
    sub_10000CC08(&qword_10008B3E0, &qword_10008B3E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D200);
  }
  return result;
}

unint64_t sub_10003E99C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D218;
  if (!qword_10008D218)
  {
    v1 = sub_10000AE50(&qword_10008D210);
    sub_10000CC08(&qword_10008B3E0, &qword_10008B3E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D218);
  }
  return result;
}

void sub_10003EA28(double *a1@<X8>)
{
  *a1 = EnvironmentValues.lineSpacing.getter();
}

uint64_t sub_10003EA50(double *a1)
{
  return EnvironmentValues.lineSpacing.setter(*a1);
}

unint64_t sub_10003EA78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D238;
  if (!qword_10008D238)
  {
    v1 = sub_10000AE50(&qword_10008CFA0);
    sub_10003DF74();
    sub_10000C5FC(&qword_10008B398, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D238);
  }
  return result;
}

uint64_t sub_10003EAFC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100010B60(v0, qword_10008D240);
  sub_100010130(v0, (uint64_t)qword_10008D240);
  return static Logger.widget.getter();
}

id sub_10003EB44()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void (*v10)(_QWORD *@<X8>);
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  uint64_t v33;

  if (qword_10008B108 != -1)
    swift_once(&qword_10008B108, sub_100037600);
  v0 = sub_100009F30(&qword_10008C6E8);
  v1 = sub_100010130(v0, (uint64_t)qword_10008CE00);
  swift_beginAccess(v1, &v32, 33, 0);
  RetryingLazy.wrappedValue.getter(v0);
  v2 = v31;
  swift_endAccess(&v32);
  if (v31)
  {
    if (qword_10008B110 != -1)
      swift_once(&qword_10008B110, sub_100037AA8);
    v3 = sub_100009F30(&qword_10008CA68);
    v4 = sub_100010130(v3, (uint64_t)qword_10008CE18);
    swift_beginAccess(v4, &v32, 33, 0);
    RetryingLazy.wrappedValue.getter(v3);
    swift_endAccess(&v32);
    v5 = objc_msgSend((id)objc_opt_self(ICDefaultAccountUtilities), "defaultAccountWithHTMLNoteContext:", v31);
    if (v5)
    {
      v6 = v5;
      v7 = objc_opt_self(ICAccount);
      if (swift_dynamicCastObjCClass(v6, v7))
      {
        v8 = v6;
        v9 = -[NSObject managedObjectContext](v31, "managedObjectContext");
        __chkstk_darwin(v9);
        sub_100009F30(&qword_10008D320);
        v10 = sub_10004096C;
LABEL_9:
        NSManagedObjectContext.performAndWait<A>(_:)(v10);

        return v32;
      }
      v21 = objc_opt_self(NoteAccountObject);
      if (swift_dynamicCastObjCClass(v6, v21))
      {
        v8 = v6;
        v22 = -[NSObject managedObjectContext](v31, "managedObjectContext");
        if (v22)
        {
          v9 = v22;
          __chkstk_darwin(v22);
          sub_100009F30(&qword_10008D320);
          v10 = sub_100040954;
          goto LABEL_9;
        }

      }
      else
      {
        if (qword_10008B138 != -1)
          swift_once(&qword_10008B138, sub_10003EAFC);
        v23 = type metadata accessor for Logger(0);
        sub_100010130(v23, (uint64_t)qword_10008D240);
        v24 = v6;
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc(12, -1);
          v28 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v27 = 138412290;
          v29 = objc_msgSend(v24, "objectID");
          v32 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v27 + 4, v27 + 12);
          *v28 = v29;

          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unknown default account type — returning nil default intent note {objectID: %@}", v27, 0xCu);
          v30 = sub_100009F30(&qword_10008B548);
          swift_arrayDestroy(v28, 1, v30);
          swift_slowDealloc(v28, -1, -1);
          swift_slowDealloc(v27, -1, -1);

        }
        else
        {

        }
      }
    }
    else
    {
      if (qword_10008B138 != -1)
        swift_once(&qword_10008B138, sub_10003EAFC);
      v16 = type metadata accessor for Logger(0);
      v17 = sub_100010130(v16, (uint64_t)qword_10008D240);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Cannot get default account — returning nil default intent note", v20, 2u);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    if (qword_10008B138 != -1)
      swift_once(&qword_10008B138, sub_10003EAFC);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100010130(v12, (uint64_t)qword_10008D240);
    v2 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v14, "No modern or HTML note context — returning nil default intent note", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
  }

  return 0;
}

void sub_10003F0D0(id a1@<X1>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend(a1, "defaultFolder");
  sub_100040984(v3);
  v5 = v4;

  *a2 = v5;
}

void sub_10003F128(id a1@<X1>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(a1, "defaultStore");
  if (v3)
  {
    v4 = v3;
    v5 = sub_100040F54(v3);

    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003F188(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = sub_100009F30(&qword_10008D328);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = _s5EntryVMa_0(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100009F30(&qword_10008D308);
  v11 = Timeline.entries.getter(v10);
  v12 = v11;
  if (*(_QWORD *)(v11 + 16))
  {
    sub_10000AF24(v11 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v5, _s5EntryVMa_0);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v13, 1, v6);
  v14 = swift_bridgeObjectRelease(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v7 + 48))(v5, 1, v6, v14) == 1)
  {
    v15 = &v9[*(int *)(v6 + 20)];
    v16 = type metadata accessor for Note(0);
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 2, 2, v16);
    Date.init()(v17);
    sub_10000CCD8((uint64_t)v5, &qword_10008D328);
  }
  else
  {
    sub_10000AEE0((uint64_t)v5, (uint64_t)v9, _s5EntryVMa_0);
  }
  a2(v9);
  return sub_10000AF68((uint64_t)v9, _s5EntryVMa_0);
}

uint64_t sub_10003F330(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  char *v38;
  id v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  id v74;
  uint64_t v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  id v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  id v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  os_log_type_t v119;
  uint8_t *v120;
  id v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  uint64_t v163[4];

  v147 = a2;
  v155 = a4;
  v157 = a3;
  v5 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v5);
  v153 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Date(0);
  v149 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v8);
  v151 = (char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100009F30(&qword_10008D308);
  v154 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (uint64_t)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for Logger(0);
  v148 = *(_QWORD *)(v159 - 8);
  v11 = __chkstk_darwin(v159);
  v146 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v144 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v144 - v16;
  v18 = sub_100009F30(&qword_10008D310);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v144 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v144 - v22;
  v24 = type metadata accessor for Note(0);
  v160 = *(_QWORD *)(v24 - 8);
  v161 = (id)v24;
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v144 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v144 - v28;
  if (qword_10008B108 != -1)
    swift_once(&qword_10008B108, sub_100037600);
  v30 = sub_100009F30(&qword_10008C6E8);
  v31 = sub_100010130(v30, (uint64_t)qword_10008CE00);
  swift_beginAccess(v31, v163, 33, 0);
  RetryingLazy.wrappedValue.getter(v30);
  v32 = (void *)v162;
  swift_endAccess(v163);
  if (!v32)
    goto LABEL_15;
  if (qword_10008B110 != -1)
    swift_once(&qword_10008B110, sub_100037AA8);
  v33 = sub_100009F30(&qword_10008CA68);
  v34 = sub_100010130(v33, (uint64_t)qword_10008CE18);
  swift_beginAccess(v34, v163, 33, 0);
  RetryingLazy.wrappedValue.getter(v33);
  v35 = (void *)v162;
  swift_endAccess(v163);
  if (!v35)
  {

LABEL_15:
    if (qword_10008B138 != -1)
      swift_once(&qword_10008B138, sub_10003EAFC);
    v54 = sub_100010130(v159, (uint64_t)qword_10008D240);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "No modern or HTML note context — returning placeholder timeline", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    v58 = sub_100009F30(&qword_10008D318);
    v59 = _s5EntryVMa_0(0);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = *(_QWORD *)(v60 + 72);
    v62 = *(unsigned __int8 *)(v60 + 80);
    v63 = (v62 + 32) & ~v62;
    v64 = swift_allocObject(v58, v63 + v61, v62 | 7);
    *(_OWORD *)(v64 + 16) = xmmword_1000659F0;
    v65 = v64 + v63;
    v66 = (uint64_t)v151;
    v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t, id))(v160 + 56))(v151, 2, 2, v161);
    v68 = v150;
    Date.init()(v67);
    (*(void (**)(uint64_t, char *, uint64_t))(v149 + 32))(v65, v68, v152);
    v69 = sub_10004090C(v66, v65 + *(int *)(v59 + 20));
    v70 = v153;
    static TimelineReloadPolicy.never.getter(v69);
    v71 = sub_100040744();
    v72 = v156;
    Timeline.init(entries:policy:)(v64, v70, v59, v71);
    v157(v72);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v154 + 8))(v72, v158);
  }
  v36 = objc_msgSend(a1, "note");
  if (v36)
  {
    v37 = v36;
    v38 = v32;
    v39 = v35;
    sub_10005CA70(v37, v38, v39, (uint64_t)v23);
    v40 = (*(uint64_t (**)(char *, uint64_t, id))(v160 + 48))(v23, 1, v161);
    v41 = v159;
    if (v40 == 1)
    {
      sub_10000CCD8((uint64_t)v23, &qword_10008D310);
      v42 = v148;
      if (qword_10008B138 != -1)
        swift_once(&qword_10008B138, sub_10003EAFC);
      v43 = sub_100010130(v41, (uint64_t)qword_10008D240);
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v15, v43, v41);
      v44 = v37;
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v146 = v38;
        v145 = v39;
        v47 = (uint8_t *)swift_slowAlloc(12, -1);
        v48 = swift_slowAlloc(32, -1);
        v163[0] = v48;
        *(_DWORD *)v47 = 136315138;
        v49 = objc_msgSend(v44, "identifier");
        if (v49)
        {
          v50 = v49;
          v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
          v53 = v52;

        }
        else
        {
          v51 = 9732322;
          v53 = 0xA300000000000000;
        }
        v162 = sub_10002D35C(v51, v53, v163);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v47 + 4, v47 + 12);

        swift_bridgeObjectRelease(v53);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Cannot fetch note — returning deleted timeline {identifier: %s}", v47, 0xCu);
        swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v47, -1, -1);

        (*(void (**)(char *, uint64_t))(v148 + 8))(v15, v159);
        v39 = v145;
        v38 = v146;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v41);
      }
      v126 = sub_100009F30(&qword_10008D318);
      v127 = _s5EntryVMa_0(0);
      v128 = *(_QWORD *)(v127 - 8);
      v129 = *(_QWORD *)(v128 + 72);
      v130 = *(unsigned __int8 *)(v128 + 80);
      v131 = (v130 + 32) & ~v130;
      v132 = swift_allocObject(v126, v131 + v129, v130 | 7);
      *(_OWORD *)(v132 + 16) = xmmword_1000659F0;
      v133 = v132 + v131;
      v134 = (uint64_t)v151;
      v135 = (*(uint64_t (**)(char *, uint64_t, uint64_t, id))(v160 + 56))(v151, 1, 2, v161);
      v136 = v150;
      Date.init()(v135);
      (*(void (**)(uint64_t, char *, uint64_t))(v149 + 32))(v133, v136, v152);
      v137 = sub_10004090C(v134, v133 + *(int *)(v127 + 20));
      v138 = v153;
      static TimelineReloadPolicy.never.getter(v137);
      v139 = sub_100040744();
      v140 = v156;
      Timeline.init(entries:policy:)(v132, v138, v127, v139);
      v157(v140);

      return (*(uint64_t (**)(uint64_t, uint64_t))(v154 + 8))(v140, v158);
    }
    else
    {
      v146 = v38;
      sub_10000AEE0((uint64_t)v23, (uint64_t)v29, type metadata accessor for Note);
      v98 = v148;
      if (qword_10008B138 != -1)
        swift_once(&qword_10008B138, sub_10003EAFC);
      v99 = sub_100010130(v41, (uint64_t)qword_10008D240);
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v17, v99, v41);
      v100 = v37;
      v101 = Logger.logObject.getter(v100);
      v104 = static os_log_type_t.debug.getter(v101, v102, v103);
      if (os_log_type_enabled(v101, v104))
      {
        v145 = v39;
        v105 = (uint8_t *)swift_slowAlloc(12, -1);
        v106 = swift_slowAlloc(32, -1);
        v163[0] = v106;
        *(_DWORD *)v105 = 136315138;
        v107 = objc_msgSend(v100, "identifier");
        if (v107)
        {
          v108 = v107;
          v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
          v111 = v110;

        }
        else
        {
          v109 = 9732322;
          v111 = 0xA300000000000000;
        }
        v162 = sub_10002D35C(v109, v111, v163);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v105 + 4, v105 + 12);

        swift_bridgeObjectRelease(v111);
        _os_log_impl((void *)&_mh_execute_header, v101, v104, "Returning timeline for note {identifier: %s}", v105, 0xCu);
        swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1, -1);
        swift_slowDealloc(v105, -1, -1);

        (*(void (**)(char *, uint64_t))(v148 + 8))(v17, v159);
        v39 = v145;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v98 + 8))(v17, v41);
      }
      v141 = v156;
      sub_1000401FC((uint64_t)v29, v156);
      v157(v141);

      (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v141, v158);
      return sub_10000AF68((uint64_t)v29, type metadata accessor for Note);
    }
  }
  v74 = sub_10003EB44();
  v75 = v159;
  if (!v74)
    goto LABEL_24;
  v76 = v74;
  v77 = v32;
  v78 = v35;
  v79 = v76;
  sub_10005CA70(v79, v77, v78, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, id))(v160 + 48))(v21, 1, v161) == 1)
  {

    sub_10000CCD8((uint64_t)v21, &qword_10008D310);
LABEL_24:
    if (qword_10008B138 != -1)
      swift_once(&qword_10008B138, sub_10003EAFC);
    v80 = sub_100010130(v75, (uint64_t)qword_10008D240);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "There is no intent note and cannot get default note — returning placeholder timeline", v83, 2u);
      swift_slowDealloc(v83, -1, -1);
    }

    v84 = sub_100009F30(&qword_10008D318);
    v85 = _s5EntryVMa_0(0);
    v86 = *(_QWORD *)(v85 - 8);
    v87 = *(_QWORD *)(v86 + 72);
    v88 = *(unsigned __int8 *)(v86 + 80);
    v89 = (v88 + 32) & ~v88;
    v90 = swift_allocObject(v84, v89 + v87, v88 | 7);
    *(_OWORD *)(v90 + 16) = xmmword_1000659F0;
    v91 = v90 + v89;
    v92 = (uint64_t)v151;
    v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t, id))(v160 + 56))(v151, 2, 2, v161);
    v94 = v150;
    Date.init()(v93);
    (*(void (**)(uint64_t, char *, uint64_t))(v149 + 32))(v91, v94, v152);
    v95 = sub_10004090C(v92, v91 + *(int *)(v85 + 20));
    v96 = v153;
    static TimelineReloadPolicy.never.getter(v95);
    v97 = sub_100040744();
    v72 = v156;
    Timeline.init(entries:policy:)(v90, v96, v85, v97);
    v157(v72);

    return (*(uint64_t (**)(uint64_t, uint64_t))(v154 + 8))(v72, v158);
  }
  sub_10000AEE0((uint64_t)v21, (uint64_t)v27, type metadata accessor for Note);
  if (qword_10008B138 != -1)
    swift_once(&qword_10008B138, sub_10003EAFC);
  v112 = sub_100010130(v75, (uint64_t)qword_10008D240);
  v113 = v148;
  v114 = v146;
  (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v146, v112, v75);
  v115 = v79;
  v116 = Logger.logObject.getter(v115);
  v119 = static os_log_type_t.debug.getter(v116, v117, v118);
  if (os_log_type_enabled(v116, v119))
  {
    v161 = v77;
    v120 = (uint8_t *)swift_slowAlloc(12, -1);
    v160 = swift_slowAlloc(32, -1);
    v163[0] = v160;
    *(_DWORD *)v120 = 136315138;
    v121 = objc_msgSend(v115, "identifier");
    if (v121)
    {
      v122 = v121;
      v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
      v125 = v124;

    }
    else
    {
      v123 = 9732322;
      v125 = 0xA300000000000000;
    }
    v162 = sub_10002D35C(v123, v125, v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v120 + 4, v120 + 12);

    swift_bridgeObjectRelease(v125);
    _os_log_impl((void *)&_mh_execute_header, v116, v119, "Returning timeline for default note {identifier: %s}", v120, 0xCu);
    v142 = v160;
    swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v142, -1, -1);
    swift_slowDealloc(v120, -1, -1);

    (*(void (**)(char *, uint64_t))(v148 + 8))(v146, v75);
    v77 = v161;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v75);
  }
  v143 = v156;
  sub_1000401FC((uint64_t)v27, v156);
  v157(v143);

  (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v143, v158);
  return sub_10000AF68((uint64_t)v27, type metadata accessor for Note);
}

uint64_t sub_1000401FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, char *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;

  v70 = a1;
  v76 = a2;
  v2 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v2);
  v75 = (uint64_t)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008CA78);
  __chkstk_darwin(v4);
  v68 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimelineReloadPolicy(0);
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  v7 = __chkstk_darwin(v6);
  v72 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v71 = (char *)&v63 - v9;
  v67 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v67 - 8);
  v10 = __chkstk_darwin(v67);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v63 - v13;
  v15 = type metadata accessor for Calendar.Component(0);
  v16 = *(_QWORD *)(v15 - 8);
  v64 = v15;
  v65 = v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = (char *)type metadata accessor for Calendar(0);
  v19 = *((_QWORD *)v69 - 1);
  v20 = __chkstk_darwin(v69);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v63 - v23;
  v25 = sub_100009F30(&qword_10008CA80);
  v26 = __chkstk_darwin(v25);
  v66 = (uint64_t)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v63 - v29;
  static Calendar.current.getter(v28);
  v31 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Calendar.Component.day(_:), v15);
  v32 = static Calendar.current.getter(v31);
  Date.init()(v32);
  Calendar.startOfDay(for:)(v12);
  v33 = *(void (**)(char *, uint64_t))(v78 + 8);
  v34 = v67;
  v33(v12, v67);
  v35 = *(void (**)(char *, char *))(v19 + 8);
  v36 = (uint64_t)v69;
  v35(v22, v69);
  v37 = 1;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v18, 1, v14, 0);
  v38 = (uint64_t)v68;
  v77 = v14;
  v63 = v33;
  v33(v14, v34);
  v39 = v78;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v18, v64);
  v35(v24, (char *)v36);
  v40 = v34;
  v41 = v66;
  v69 = v30;
  sub_10002D9DC((uint64_t)v30, v66);
  v42 = v39;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v41, 1, v40) != 1)
  {
    v43 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v77, v41, v40);
    static TimelineReloadPolicy.after(_:)(v43);
    v63(v43, v40);
    v37 = 0;
  }
  v45 = v73;
  v44 = v74;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v38, v37, 1, v74);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v38, 1, v44);
  v47 = v71;
  if ((_DWORD)v46 == 1)
  {
    static TimelineReloadPolicy.never.getter(v46);
    sub_10000CCD8(v38, &qword_10008CA78);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v71, v38, v44);
  }
  v48 = sub_100009F30(&qword_10008D318);
  v49 = _s5EntryVMa_0(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(_QWORD *)(v50 + 72);
  v52 = *(unsigned __int8 *)(v50 + 80);
  v53 = (v52 + 32) & ~v52;
  v54 = swift_allocObject(v48, v53 + v51, v52 | 7);
  *(_OWORD *)(v54 + 16) = xmmword_1000659F0;
  v55 = v54 + v53;
  v56 = v75;
  sub_10000AF24(v70, v75, type metadata accessor for Note);
  v57 = type metadata accessor for Note(0);
  v58 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 2, v57);
  v59 = v77;
  Date.init()(v58);
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v55, v59, v40);
  sub_10004090C(v56, v55 + *(int *)(v49 + 20));
  v60 = v72;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v72, v47, v44);
  v61 = sub_100040744();
  Timeline.init(entries:policy:)(v54, v60, v49, v61);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
  return sub_10000CCD8((uint64_t)v69, &qword_10008CA80);
}

uint64_t sub_100040710()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for NoteTimelineProvider()
{
  return objc_opt_self(_TtC37com_apple_mobilenotes_WidgetExtension20NoteTimelineProvider);
}

unint64_t sub_100040744()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D2F0[0];
  if (!qword_10008D2F0[0])
  {
    v1 = _s5EntryVMa_0(255);
    result = swift_getWitnessTable(&unk_10006B718, v1);
    atomic_store(result, qword_10008D2F0);
  }
  return result;
}

uint64_t sub_10004078C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 + *(int *)(_s5EntryVMa_0(0) + 20);
  v2 = type metadata accessor for Note(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 2, 2, v2);
  return Date.init()(v3);
}

uint64_t sub_1000407E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v9 = type metadata accessor for TimelineProviderContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 40) & ~v14;
  v16 = (char *)swift_allocObject(&unk_100085310, v15 + v11, v14 | 7);
  *((_QWORD *)v16 + 2) = a3;
  *((_QWORD *)v16 + 3) = a4;
  *((_QWORD *)v16 + 4) = v13;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v16[v15], v12, v9);
  swift_retain(a4);
  swift_retain(v13);
  sub_10003F330(a1, a2, (void (*)(uint64_t))sub_1000414B4, (uint64_t)v16);
  return swift_release(v16);
}

uint64_t sub_1000408EC(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  return sub_10003F330(a1, a2, a3, a4);
}

uint64_t sub_10004090C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009F30(&qword_10008B168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100040954(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10003F128(*(id *)(v1 + 24), a1);
}

void sub_10004096C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10003F0D0(*(id *)(v1 + 24), a1);
}

void sub_100040984(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *ObjCClassFromMetadata;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  NSString v43;
  NSString v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;

  v2 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v2);
  v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v57 - v10;
  v12 = objc_msgSend(a1, "managedObjectContext");
  if (!v12)
    return;
  v13 = v12;
  v57 = v11;
  v14 = (void *)objc_opt_self(ICNoteListSortUtilities);
  v15 = objc_msgSend(a1, "customNoteSortType");
  isa = (Class)objc_msgSend(v14, "sortDescriptorsForCurrentTypeIncludingPinnedNotes:folderNoteSortType:", 0, v15);

  if (!isa)
  {
    v17 = sub_100010B28(0, &qword_10008CA90, NSSortDescriptor_ptr);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v17);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
  }
  v19 = sub_100010B28(0, &qword_10008CA98, ICNote_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v19);
  v21 = objc_msgSend(a1, "predicateForVisibleNotes");
  v22 = v13;
  v23 = objc_msgSend(ObjCClassFromMetadata, "ic_objectsMatchingPredicate:sortDescriptors:context:", v21, isa, v13);

  v24 = sub_100010B28(0, &qword_10008CAA0, NSManagedObject_ptr);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  if (!((unint64_t)v25 >> 62))
  {
    v26 = v22;
    if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
LABEL_23:
    swift_bridgeObjectRelease(v25);
    goto LABEL_24;
  }
  if (v25 < 0)
    v45 = v25;
  else
    v45 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v25);
  v46 = _CocoaArrayWrapper.endIndex.getter(v45);
  swift_bridgeObjectRelease(v25);
  v26 = v22;
  if (!v46)
    goto LABEL_23;
LABEL_6:
  if ((v25 & 0xC000000000000001) != 0)
  {
    v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
  }
  else
  {
    if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v27 = *(id *)(v25 + 32);
  }
  v28 = v27;
  swift_bridgeObjectRelease(v25);
  v29 = objc_opt_self(ICNote);
  v30 = swift_dynamicCastObjCClass(v28, v29);
  if (v30)
  {
    v31 = (void *)v30;
    v32 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForNote:", v30);
    if (v32)
    {
      v33 = v32;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v32);

      v34 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v34(v4, v9, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v35 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v57, v4, v5);
        URL.absoluteString.getter(v35);
        v37 = v36;
        v38 = objc_msgSend(v31, "title");
        if (v38)
        {
          v39 = v38;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
          v41 = v40;

        }
        else
        {
          v41 = 0xE000000000000000;
        }
        v42 = objc_allocWithZone((Class)ICIntentNote);
        v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v37);
        v44 = String._bridgeToObjectiveC()();
        objc_msgSend(v42, "initWithIdentifier:displayString:", v43, v44, swift_bridgeObjectRelease(v41).n128_f64[0]);

        (*(void (**)(char *, uint64_t))(v6 + 8))(v57, v5);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    }

    sub_10000CCD8((uint64_t)v4, &qword_10008B170);
  }
  else
  {

  }
LABEL_24:
  if (qword_10008B138 != -1)
    swift_once(&qword_10008B138, sub_10003EAFC);
  v47 = type metadata accessor for Logger(0);
  sub_100010130(v47, (uint64_t)qword_10008D240);
  v48 = a1;
  v49 = Logger.logObject.getter(v48);
  v52 = static os_log_type_t.debug.getter(v49, v50, v51);
  if (os_log_type_enabled(v49, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v53 = 138412290;
    v55 = objc_msgSend(v48, "objectID");
    v58 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v53 + 4, v53 + 12);
    *v54 = v55;

    _os_log_impl((void *)&_mh_execute_header, v49, v52, "No note in folder — returning nil intent note {objectID: %@}", v53, 0xCu);
    v56 = sub_100009F30(&qword_10008B548);
    swift_arrayDestroy(v54, 1, v56);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {

  }
}

id sub_100040F54(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  id v41;
  id v43;
  NSString v44;
  NSString v45;
  __int128 v46;
  __int128 v47;
  void *v48;

  v2 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v2);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v46 - v10;
  if (qword_10008B110 != -1)
    swift_once(&qword_10008B110, sub_100037AA8);
  v12 = sub_100009F30(&qword_10008CA68);
  v13 = sub_100010130(v12, (uint64_t)qword_10008CE18);
  swift_beginAccess(v13, &v46, 33, 0);
  RetryingLazy.wrappedValue.getter(v12);
  v14 = v48;
  swift_endAccess(&v46);
  if (!v14)
    goto LABEL_18;
  v15 = objc_msgSend(v14, "allVisibleNotesInCollection:sorted:", a1, 1);

  if (!v15)
    goto LABEL_18;
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, (char *)&type metadata for Any + 8);

  if (*(_QWORD *)(v16 + 16))
  {
    sub_10002D99C(v16 + 32, (uint64_t)&v46);
  }
  else
  {
    v46 = 0u;
    v47 = 0u;
  }
  swift_bridgeObjectRelease(v16);
  if (!*((_QWORD *)&v47 + 1))
  {
    v29 = &qword_10008B860;
    v30 = (char *)&v46;
LABEL_17:
    sub_10000CCD8((uint64_t)v30, v29);
    goto LABEL_18;
  }
  v17 = sub_100010B28(0, &qword_10008CAB0, NoteObject_ptr);
  if ((swift_dynamicCast(&v48, &v46, (char *)&type metadata for Any + 8, v17, 6) & 1) != 0)
  {
    v18 = v48;
    v19 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForHTMLNote:", v48);
    if (v19)
    {
      v20 = v19;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v21(v4, v9, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v22 = ((uint64_t (*)(char *, char *, uint64_t))v21)(v11, v4, v5);
        URL.absoluteString.getter(v22);
        v24 = v23;
        v25 = objc_msgSend(v18, "title");
        if (v25)
        {
          v26 = v25;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE000000000000000;
        }
        v43 = objc_allocWithZone((Class)ICIntentNote);
        v44 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v24);
        v45 = String._bridgeToObjectiveC()();
        v41 = objc_msgSend(v43, "initWithIdentifier:displayString:", v44, v45, swift_bridgeObjectRelease(v28).n128_f64[0]);

        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        return v41;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    }

    v29 = &qword_10008B170;
    v30 = v4;
    goto LABEL_17;
  }
LABEL_18:
  if (qword_10008B138 != -1)
    swift_once(&qword_10008B138, sub_10003EAFC);
  v31 = type metadata accessor for Logger(0);
  sub_100010130(v31, (uint64_t)qword_10008D240);
  v32 = a1;
  v33 = Logger.logObject.getter(v32);
  v36 = static os_log_type_t.debug.getter(v33, v34, v35);
  if (os_log_type_enabled(v33, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v37 = 138412290;
    v39 = objc_msgSend(v32, "objectID");
    *(_QWORD *)&v46 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8, v37 + 4, v37 + 12);
    *v38 = v39;

    _os_log_impl((void *)&_mh_execute_header, v33, v36, "No note in HTML folder — returning nil intent note {objectID: %@}", v37, 0xCu);
    v40 = sub_100009F30(&qword_10008B548);
    swift_arrayDestroy(v38, 1, v40);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_100041438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000414B4(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for TimelineProviderContext(0);
  return sub_10003F188(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_1000414F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];

  v2 = v1;
  v35 = a1;
  v3 = type metadata accessor for ContainerBackgroundPlacement(0);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100009F30(&qword_10008D3C8);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100009F30(&qword_10008D3D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100009F30(&qword_10008D3D8);
  v32 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static HorizontalAlignment.leading.getter(v17);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 0;
  v20 = sub_100009F30(&qword_10008D3E0);
  sub_1000417CC(v2, (uint64_t)&v12[*(int *)(v20 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Font.TextStyle.footnote(_:), v6);
  v21 = static Font.systemSingleLineA(_:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  KeyPath = swift_getKeyPath(&unk_10006B2F0);
  sub_10000CC94((uint64_t)v12, (uint64_t)v15, &qword_10008D3C8);
  v23 = (uint64_t *)&v15[*(int *)(v13 + 36)];
  *v23 = KeyPath;
  v23[1] = v21;
  v24 = sub_10000CCD8((uint64_t)v12, &qword_10008D3C8);
  v25 = static ContainerBackgroundPlacement.widget.getter(v24);
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  v29 = sub_10004D928();
  View.containerBackground<A>(for:alignment:content:)(v5, v26, v28, sub_10003213C, 0, v13, &type metadata for Color, v29, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v34);
  sub_10000CCD8((uint64_t)v15, &qword_10008D3D0);
  v36[0] = v13;
  v36[1] = &type metadata for Color;
  v36[2] = v29;
  v36[3] = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  View.privacySensitive(_:)(1, v16, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v19, v16);
}

uint64_t sub_1000417CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _OWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _OWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  char v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  __int128 v102;
  char v103;

  v91 = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100009F30(&qword_10008D3F8);
  v7 = *(_QWORD *)(v87 - 8);
  v8 = __chkstk_darwin(v87);
  v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v84 - v11;
  v85 = sub_100009F30(&qword_10008D400);
  __chkstk_darwin(v85);
  v14 = (uint64_t *)((char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v90 = sub_100009F30(&qword_10008D408);
  __chkstk_darwin(v90);
  v86 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100009F30(&qword_10008D410);
  __chkstk_darwin(v88);
  v89 = (_OWORD *)((char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v17);
  v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for NotesFolderWidgetView(0);
  sub_10000CC94(a1 + *(int *)(v20 + 28), (uint64_t)v19, &qword_10008C8E0);
  v21 = sub_100009F30(&qword_10008C8E8);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v19, 2, v21);
  if (v22)
  {
    if (v22 == 1)
    {
      sub_10004204C((uint64_t *)&v98);
      v23 = v98;
      v24 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x800000010006D8B0);
      v25 = Text.init(_:tableName:bundle:comment:)(v24);
      v27 = v26;
      v29 = v28;
      v31 = v30 & 1;
      sub_100042CA0(v25, v26, v30 & 1, v28, (uint64_t *)&v98);
      sub_10000AFA4(v25, v27, v31);
      swift_bridgeObjectRelease(v29);
      v32 = v98;
      swift_retain(v23);
      *v14 = v23;
      v14[1] = v32;
      swift_retain(v32);
      swift_storeEnumTagMultiPayload(v14, v85, 0);
      v33 = sub_100009F30(&qword_10008D438);
      v34 = sub_10000CC08(&qword_10008D440, &qword_10008D438, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v35 = sub_10000AE50(&qword_10008D418);
      v36 = sub_10004D9C4();
      *(_QWORD *)&v98 = v35;
      *((_QWORD *)&v98 + 1) = v36;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v38 = (uint64_t)v86;
      _ConditionalContent<>.init(storage:)(v14, v33, v87, v34, OpaqueTypeConformance2);
      v39 = v89;
      sub_10000CC94(v38, (uint64_t)v89, &qword_10008D408);
      swift_storeEnumTagMultiPayload(v39, v88, 1);
      v40 = sub_100009F30(&qword_10008D448);
      v41 = sub_10004DA40();
      v42 = sub_10004DABC();
      _ConditionalContent<>.init(storage:)(v39, v40, v90, v41, v42);
      sub_10000CCD8(v38, &qword_10008D408);
      swift_release(v23);
      return swift_release(v32);
    }
    else
    {
      sub_1000435CC(a1, (uint64_t)&v98);
      v92 = v98;
      v93 = v99;
      v94 = v100;
      v95 = v101;
      v96 = v102;
      v97 = v103;
      static AccessibilityChildBehavior.ignore.getter(v54);
      v55 = sub_100009F30(&qword_10008D418);
      v56 = sub_10004D9C4();
      View.accessibilityElement(children:)(v6, v55, v56);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v57 = v92;
      swift_release(v93);
      swift_release(v57);
      v58 = v87;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v10, v87);
      (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 16))(v14, v12, v58);
      swift_storeEnumTagMultiPayload(v14, v85, 1);
      v59 = sub_100009F30(&qword_10008D438);
      v60 = sub_10000CC08(&qword_10008D440, &qword_10008D438, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      *(_QWORD *)&v98 = v55;
      *((_QWORD *)&v98 + 1) = v56;
      v61 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v62 = (uint64_t)v86;
      _ConditionalContent<>.init(storage:)(v14, v59, v58, v60, v61);
      v63 = v89;
      sub_10000CC94(v62, (uint64_t)v89, &qword_10008D408);
      swift_storeEnumTagMultiPayload(v63, v88, 1);
      v64 = sub_100009F30(&qword_10008D448);
      v65 = sub_10004DA40();
      v66 = sub_10004DABC();
      _ConditionalContent<>.init(storage:)(v63, v64, v90, v65, v66);
      sub_10000CCD8(v62, &qword_10008D408);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v58);
    }
  }
  else
  {
    v44 = *(int *)(v21 + 48);
    if (*(_QWORD *)(*(_QWORD *)&v19[v44] + 16))
    {
      sub_10004204C((uint64_t *)&v98);
      v45 = v98;
      sub_10004330C((uint64_t *)&v98);
      v46 = v98;
      swift_retain(v45);
      swift_retain(v46);
      *(_QWORD *)&v92 = v45;
      *((_QWORD *)&v92 + 1) = v46;
      LOBYTE(v93) = 1;
      v47 = sub_100009F30(&qword_10008D438);
      v48 = sub_10000CC08(&qword_10008D440, &qword_10008D438, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(&v92, v47, v47, v48, v48);
      v49 = v99;
      v50 = v89;
      *v89 = v98;
      *((_BYTE *)v50 + 16) = v49;
      swift_storeEnumTagMultiPayload(v50, v88, 0);
      v51 = sub_100009F30(&qword_10008D448);
      v52 = sub_10004DA40();
      v53 = sub_10004DABC();
      _ConditionalContent<>.init(storage:)(v50, v51, v90, v52, v53);
      swift_release(v45);
      swift_release(v46);
      return sub_10000CCD8((uint64_t)v19, &qword_10008C8E8);
    }
    else
    {
      sub_10004204C((uint64_t *)&v98);
      v67 = v98;
      v68 = LocalizedStringKey.init(stringLiteral:)(0x7365746F4E206F4ELL, 0xE800000000000000);
      v69 = Text.init(_:tableName:bundle:comment:)(v68);
      v71 = v70;
      v73 = v72;
      v75 = v74 & 1;
      sub_100042CA0(v69, v70, v74 & 1, v72, (uint64_t *)&v98);
      sub_10000AFA4(v69, v71, v75);
      swift_bridgeObjectRelease(v73);
      v76 = v98;
      swift_retain(v67);
      swift_retain(v76);
      *(_QWORD *)&v92 = v67;
      *((_QWORD *)&v92 + 1) = v76;
      LOBYTE(v93) = 0;
      v77 = sub_100009F30(&qword_10008D438);
      v78 = sub_10000CC08(&qword_10008D440, &qword_10008D438, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(&v92, v77, v77, v78, v78);
      v79 = v99;
      v80 = v89;
      *v89 = v98;
      *((_BYTE *)v80 + 16) = v79;
      swift_storeEnumTagMultiPayload(v80, v88, 0);
      v81 = sub_100009F30(&qword_10008D448);
      v82 = sub_10004DA40();
      v83 = sub_10004DABC();
      _ConditionalContent<>.init(storage:)(v80, v81, v90, v82, v83);
      swift_release(v67);
      swift_release(v76);
      swift_bridgeObjectRelease(*(_QWORD *)&v19[v44]);
      return sub_10000AF68((uint64_t)v19, type metadata accessor for NotesFolder);
    }
  }
}

uint64_t sub_10004204C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(char *, uint64_t, __n128);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  int v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void (*v81)(char *, uint64_t);
  int *v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  void (**v115)(char *, uint64_t, __n128);
  uint64_t OpaqueTypeConformance2;
  uint64_t result;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  int *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  __n128 v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  void (**v160)(char *, uint64_t, __n128);
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  uint64_t v170;

  v162 = a1;
  v2 = type metadata accessor for UUID(0);
  v157 = *(_QWORD *)(v2 - 8);
  v158 = (char *)v2;
  __chkstk_darwin(v2);
  v156 = (char *)&v145 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v167 = *(_QWORD *)(v4 - 8);
  v168 = v4;
  __chkstk_darwin(v4);
  v166 = (char *)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008C798);
  __chkstk_darwin(v6);
  v164 = (uint64_t *)((char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = type metadata accessor for WidgetFamily(0);
  v147 = *(_QWORD *)(v148 - 8);
  v8 = __chkstk_darwin(v148);
  v149 = (char *)&v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v151 = (char *)&v145 - v10;
  v11 = type metadata accessor for NotesFolderWidgetView(0);
  __chkstk_darwin(v11);
  v153 = (uint64_t)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100009F30(&qword_10008B170);
  v14 = __chkstk_darwin(v13);
  v159 = (char *)&v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v154 = (uint64_t)&v145 - v16;
  v161 = type metadata accessor for WidgetHeader(0);
  v17 = __chkstk_darwin(v161);
  v155 = (uint64_t *)((char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v150 = (char *)&v145 - v19;
  v165 = sub_100009F30(&qword_10008D6B8);
  v20 = *(void (***)(char *, uint64_t, __n128))(v165 - 8);
  v21 = __chkstk_darwin(v165);
  v160 = (void (**)(char *, uint64_t, __n128))((char *)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v24 = (char *)&v145 - v23;
  v25 = sub_100009F30(&qword_10008D6C0);
  __chkstk_darwin(v25);
  v27 = (char *)&v145 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for NotesFolder(0);
  v28 = __chkstk_darwin(v163);
  v30 = (char *)&v145 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v145 - v31;
  v33 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v33);
  v35 = (char *)&v145 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(int *)(v11 + 28);
  v152 = v1;
  sub_10000CC94(v1 + v36, (uint64_t)v35, &qword_10008C8E0);
  v37 = sub_100009F30(&qword_10008C8E8);
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v35, 2, v37);
  if (v38)
  {
    if (v38 == 1)
    {
      v39 = type metadata accessor for URL(0);
      v40 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
      v41 = (uint64_t)v159;
      v42 = v40(v159, 1, 1, v39);
      v43 = v156;
      v44 = UUID.init()(v42);
      v45 = UUID.uuidString.getter(v44);
      v47 = v46;
      (*(void (**)(char *, char *))(v157 + 8))(v43, v158);
      *(_QWORD *)v30 = v45;
      *((_QWORD *)v30 + 1) = v47;
      *((_QWORD *)v30 + 2) = 0;
      *((_QWORD *)v30 + 3) = 0xE000000000000000;
      v30[32] = 0;
      *((_QWORD *)v30 + 5) = 0;
      *((_QWORD *)v30 + 6) = 0;
      v48 = v163;
      v40(&v30[*(int *)(v163 + 32)], 1, 1, v39);
      v49 = *(int *)(v48 + 36);
      v50 = objc_msgSend((id)objc_opt_self(ICFolder), "defaultSystemImageName");
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v53 = v52;

      v54 = Image.init(systemName:)(v51, v53);
      *(_QWORD *)&v30[v49] = v54;
      *(_QWORD *)&v30[*(int *)(v48 + 40)] = _swiftEmptyArrayStorage;
      swift_retain(v54);
      sub_10000AF68((uint64_t)v30, type metadata accessor for NotesFolder);
      KeyPath = swift_getKeyPath(&unk_10006B340);
      v56 = swift_getKeyPath(&unk_10006B3F8);
      v57 = (uint64_t)v164;
      *v164 = v56;
      v58 = sub_100009F30(&qword_10008C7A0);
      swift_storeEnumTagMultiPayload(v57, v58, 0);
      v59 = swift_getKeyPath(&unk_10006B368);
      v60 = (uint64_t)v155;
      *v155 = v59;
      v61 = sub_100009F30(&qword_10008CBD0);
      swift_storeEnumTagMultiPayload(v60, v61, 0);
      v62 = (int *)v161;
      v63 = (_QWORD *)(v60 + *(int *)(v161 + 20));
      *v63 = swift_getKeyPath(&unk_10006B428);
      v64 = sub_100009F30(&qword_10008B260);
      swift_storeEnumTagMultiPayload(v63, v64, 0);
      v65 = v60 + v62[6];
      *(_QWORD *)v65 = KeyPath;
      *(_BYTE *)(v65 + 8) = 0;
      sub_10000CC50(v57, v60 + v62[7], &qword_10008C798);
      v66 = sub_10000CC50(v41, v60 + v62[8], &qword_10008B170);
      *(_QWORD *)(v60 + v62[9]) = v54;
      *(_OWORD *)(v60 + v62[10]) = xmmword_10006AD70;
    }
    else
    {
      v87 = type metadata accessor for URL(0);
      v88 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56);
      v89 = (uint64_t)v159;
      v90 = v88(v159, 1, 1, v87);
      v91 = v156;
      v92 = UUID.init()(v90);
      v93 = UUID.uuidString.getter(v92);
      v95 = v94;
      (*(void (**)(char *, char *))(v157 + 8))(v91, v158);
      *(_QWORD *)v30 = v93;
      *((_QWORD *)v30 + 1) = v95;
      *((_QWORD *)v30 + 2) = 0;
      *((_QWORD *)v30 + 3) = 0xE000000000000000;
      v30[32] = 0;
      *((_QWORD *)v30 + 5) = 0;
      *((_QWORD *)v30 + 6) = 0;
      v96 = v163;
      v88(&v30[*(int *)(v163 + 32)], 1, 1, v87);
      v97 = *(int *)(v96 + 36);
      v98 = objc_msgSend((id)objc_opt_self(ICFolder), "defaultSystemImageName");
      v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
      v101 = v100;

      v102 = Image.init(systemName:)(v99, v101);
      *(_QWORD *)&v30[v97] = v102;
      *(_QWORD *)&v30[*(int *)(v96 + 40)] = _swiftEmptyArrayStorage;
      swift_retain(v102);
      sub_10000AF68((uint64_t)v30, type metadata accessor for NotesFolder);
      v103 = swift_getKeyPath(&unk_10006B340);
      v104 = swift_getKeyPath(&unk_10006B3F8);
      v105 = (uint64_t)v164;
      *v164 = v104;
      v106 = sub_100009F30(&qword_10008C7A0);
      swift_storeEnumTagMultiPayload(v105, v106, 0);
      v107 = swift_getKeyPath(&unk_10006B368);
      v60 = (uint64_t)v155;
      *v155 = v107;
      v108 = sub_100009F30(&qword_10008CBD0);
      swift_storeEnumTagMultiPayload(v60, v108, 0);
      v62 = (int *)v161;
      v109 = (_QWORD *)(v60 + *(int *)(v161 + 20));
      *v109 = swift_getKeyPath(&unk_10006B428);
      v110 = sub_100009F30(&qword_10008B260);
      swift_storeEnumTagMultiPayload(v109, v110, 0);
      v111 = v60 + v62[6];
      *(_QWORD *)v111 = v103;
      *(_BYTE *)(v111 + 8) = 0;
      sub_10000CC50(v105, v60 + v62[7], &qword_10008C798);
      v66 = sub_10000CC50(v89, v60 + v62[8], &qword_10008B170);
      *(_QWORD *)(v60 + v62[9]) = v102;
      v112 = (_QWORD *)(v60 + v62[10]);
      *v112 = 0;
      v112[1] = 0;
    }
    *(_QWORD *)(v60 + v62[11]) = 0;
    v113 = v166;
    static AccessibilityChildBehavior.ignore.getter(v66);
    v114 = sub_10000C5FC(&qword_10008D6C8, type metadata accessor for WidgetHeader, (uint64_t)&unk_10006B0E0);
    v115 = v160;
    View.accessibilityElement(children:)(v113, v62, v114);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v113, v168);
    sub_10000AF68(v60, type metadata accessor for WidgetHeader);
    v169 = v62;
    v170 = v114;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v169, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    result = AnyView.init<A>(_:)(v115, v165, OpaqueTypeConformance2);
    v118 = result;
    v83 = v162;
  }
  else
  {
    v67 = (uint64_t)v151;
    v158 = v27;
    v159 = v24;
    v160 = v20;
    swift_bridgeObjectRelease(*(_QWORD *)&v35[*(int *)(v37 + 48)]);
    sub_10000AEE0((uint64_t)v35, (uint64_t)v32, type metadata accessor for NotesFolder);
    v68 = v163;
    sub_10000CC94((uint64_t)&v32[*(int *)(v163 + 32)], v154, &qword_10008B170);
    v69 = *(uint64_t **)&v32[*(int *)(v68 + 36)];
    v70 = (char *)*((_QWORD *)v32 + 3);
    v157 = *((_QWORD *)v32 + 2);
    v71 = v32[32];
    v72 = v153;
    sub_10000AF24(v152, v153, type metadata accessor for NotesFolderWidgetView);
    v146 = v32;
    v145 = v25;
    if (v71 == 1)
    {
      v73 = v32;
      v155 = v69;
      swift_retain(v69);
      v156 = v70;
      swift_bridgeObjectRetain(v70);
      v74 = v67;
      sub_100033968(v67);
      v75 = v147;
      v76 = v72;
      v77 = v149;
      v78 = v148;
      (*(void (**)(char *, _QWORD, uint64_t))(v147 + 104))(v149, enum case for WidgetFamily.systemSmall(_:), v148);
      v79 = sub_10000C5FC(&qword_10008D460, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v80 = dispatch thunk of static Equatable.== infix(_:_:)(v74, v77, v78, v79);
      v81 = *(void (**)(char *, uint64_t))(v75 + 8);
      v81(v77, v78);
      v81((char *)v74, v78);
      sub_10000AF68(v76, type metadata accessor for NotesFolderWidgetView);
      v82 = (int *)v161;
      v83 = v162;
      v84 = v150;
      v85 = v157;
      if ((v80 & 1) != 0)
      {
        v86 = 0;
      }
      else
      {
        v169 = *(int **)&v73[*(int *)(v68 + 40)];
        v121 = v169;
        v122 = sub_10004EEAC();
        swift_bridgeObjectRetain(v121);
        v86 = AnyView.init<A>(_:)(&v169, &type metadata for AvatarStack, v122);
      }
      v120 = v155;
      v119 = v156;
    }
    else
    {
      swift_retain(v69);
      swift_bridgeObjectRetain(v70);
      sub_10000AF68(v72, type metadata accessor for NotesFolderWidgetView);
      v86 = 0;
      v82 = (int *)v161;
      v83 = v162;
      v84 = v150;
      v85 = v157;
      v119 = v70;
      v120 = v69;
    }
    v123 = swift_getKeyPath(&unk_10006B340);
    v124 = swift_getKeyPath(&unk_10006B3F8);
    v125 = (uint64_t)v164;
    *v164 = v124;
    v126 = sub_100009F30(&qword_10008C7A0);
    swift_storeEnumTagMultiPayload(v125, v126, 0);
    *v84 = swift_getKeyPath(&unk_10006B368);
    v127 = sub_100009F30(&qword_10008CBD0);
    swift_storeEnumTagMultiPayload(v84, v127, 0);
    v128 = (_QWORD *)((char *)v84 + v82[5]);
    *v128 = swift_getKeyPath(&unk_10006B428);
    v129 = sub_100009F30(&qword_10008B260);
    swift_storeEnumTagMultiPayload(v128, v129, 0);
    v130 = (char *)v84 + v82[6];
    *(_QWORD *)v130 = v123;
    v130[8] = 0;
    sub_10000CC50(v125, (uint64_t)v84 + v82[7], &qword_10008C798);
    v131 = sub_10000CC50(v154, (uint64_t)v84 + v82[8], &qword_10008B170);
    *(_QWORD *)((char *)v84 + v82[9]) = v120;
    v132 = (_QWORD *)((char *)v84 + v82[10]);
    *v132 = v85;
    v132[1] = v119;
    *(_QWORD *)((char *)v84 + v82[11]) = v86;
    v133 = v166;
    static AccessibilityChildBehavior.ignore.getter(v131);
    v134 = sub_10000C5FC(&qword_10008D6C8, type metadata accessor for WidgetHeader, (uint64_t)&unk_10006B0E0);
    v135 = v159;
    View.accessibilityElement(children:)(v133, v82, v134);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v133, v168);
    sub_10000AF68((uint64_t)v84, type metadata accessor for WidgetHeader);
    v136 = (uint64_t)v146;
    v137 = sub_10000CE58();
    v139 = v138;
    v169 = v82;
    v170 = v134;
    v140 = swift_getOpaqueTypeConformance2(&v169, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v141 = v158;
    v142 = v165;
    View.accessibility(label:)(v137, v139, 0, _swiftEmptyArrayStorage, v165, v140);
    v143 = swift_bridgeObjectRelease(v139);
    v160[1](v135, v142, v143);
    v144 = sub_10004EDEC();
    v118 = AnyView.init<A>(_:)(v141, v145, v144);
    result = sub_10000AF68(v136, type metadata accessor for NotesFolder);
  }
  *v83 = v118;
  return result;
}

uint64_t sub_100042CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;

  v78 = a2;
  v79 = a4;
  v76 = a3;
  v77 = a1;
  v80 = a5;
  v6 = sub_100009F30(&qword_10008D5C8);
  __chkstk_darwin(v6);
  v65 = (uint64_t *)((char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = sub_100009F30(&qword_10008D5D0);
  __chkstk_darwin(v64);
  v66 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100009F30(&qword_10008D5D8);
  __chkstk_darwin(v70);
  v68 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100009F30(&qword_10008D5E0);
  __chkstk_darwin(v69);
  v67 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessibilityChildBehavior(0);
  v74 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100009F30(&qword_10008D5E8);
  __chkstk_darwin(v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100009F30(&qword_10008D5F0);
  __chkstk_darwin(v17);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100009F30(&qword_10008D5F8);
  __chkstk_darwin(v73);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100009F30(&qword_10008D600);
  __chkstk_darwin(v72);
  v71 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for WidgetFamily(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NotesFolderWidgetView(0);
  v27 = v5;
  sub_100033968((uint64_t)v26);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v23);
  if ((_DWORD)v28 == enum case for WidgetFamily.systemSmall(_:))
  {
    *(_QWORD *)v16 = static HorizontalAlignment.center.getter(v28);
    *((_QWORD *)v16 + 1) = 0;
    v16[16] = 0;
    v29 = sub_100009F30(&qword_10008D628);
    v30 = sub_1000459F4(v77, v78, v76 & 1, v79, v5, (uint64_t)&v16[*(int *)(v29 + 44)]);
    v31 = static Edge.Set.all.getter(v30);
    sub_10000CC94((uint64_t)v16, (uint64_t)v19, &qword_10008D5E8);
    v32 = &v19[*(int *)(v17 + 36)];
    *v32 = v31;
    *(_OWORD *)(v32 + 8) = 0u;
    *(_OWORD *)(v32 + 24) = 0u;
    v32[40] = 1;
    v33 = sub_10000CCD8((uint64_t)v16, &qword_10008D5E8);
    v34 = static Alignment.center.getter(v33);
    sub_1000597E4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v21, 0.0, 1, 0.0, 1, v34, v35);
    v36 = sub_10000CCD8((uint64_t)v19, &qword_10008D5F0);
    static AccessibilityChildBehavior.combine.getter(v36);
    v37 = sub_100028918(&qword_10008D630, &qword_10008D5F8, (void (*)(void))sub_10004ECE0);
    v38 = v71;
    v39 = v73;
    View.accessibilityElement(children:)(v13, v73, v37);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v75);
    sub_10000CCD8((uint64_t)v21, &qword_10008D5F8);
    v81 = v39;
    v82 = v37;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v81, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v41 = v38;
    v42 = v72;
  }
  else
  {
    v43 = v76;
    v45 = v77;
    v44 = v78;
    v46 = v79;
    if ((_DWORD)v28 != enum case for WidgetFamily.systemMedium(_:)
      && (_DWORD)v28 != enum case for WidgetFamily.systemLarge(_:)
      && (_DWORD)v28 != enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v47 = AnyView.init<A>(_:)(v28, &type metadata for EmptyView, &protocol witness table for EmptyView);
      *v80 = v47;
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    }
    v49 = static HorizontalAlignment.center.getter(v28);
    v50 = (uint64_t)v65;
    *v65 = v49;
    *(_QWORD *)(v50 + 8) = 0;
    *(_BYTE *)(v50 + 16) = 1;
    v51 = sub_100009F30(&qword_10008D608);
    v52 = sub_1000460D8(v45, v44, v43 & 1, v46, v27, v50 + *(int *)(v51 + 44));
    v53 = static Edge.Set.all.getter(v52);
    v54 = v66;
    sub_10000CC94(v50, v66, &qword_10008D5C8);
    v55 = v54 + *(int *)(v64 + 36);
    *(_BYTE *)v55 = v53;
    *(_OWORD *)(v55 + 8) = 0u;
    *(_OWORD *)(v55 + 24) = 0u;
    *(_BYTE *)(v55 + 40) = 1;
    v56 = sub_10000CCD8(v50, &qword_10008D5C8);
    v57 = static Alignment.center.getter(v56);
    v58 = v68;
    sub_10005983C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v68, 0.0, 1, 0.0, 1, v57, v59);
    v60 = sub_10000CCD8(v54, &qword_10008D5D0);
    static AccessibilityChildBehavior.combine.getter(v60);
    v61 = sub_100028918(&qword_10008D610, &qword_10008D5D8, (void (*)(void))sub_10004EC5C);
    v62 = v67;
    v63 = v70;
    View.accessibilityElement(children:)(v13, v70, v61);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v75);
    sub_10000CCD8(v58, &qword_10008D5D8);
    v81 = v63;
    v82 = v61;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v81, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v41 = v62;
    v42 = v69;
  }
  result = AnyView.init<A>(_:)(v41, v42, OpaqueTypeConformance2);
  *v80 = result;
  return result;
}

uint64_t sub_10004330C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  __n128 v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD v39[2];
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v38 = a1;
  v2 = type metadata accessor for WidgetFamily(0);
  v37 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v37 - v6;
  v8 = type metadata accessor for NotesFolderWidgetView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000CC94(v1 + *(int *)(v8 + 28), (uint64_t)v14, &qword_10008C8E0);
  v15 = sub_100009F30(&qword_10008C8E8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 2, v15);
  if ((_DWORD)v16)
  {
    result = AnyView.init<A>(_:)(v16, &type metadata for EmptyView, &protocol witness table for EmptyView);
    v18 = result;
  }
  else
  {
    v19 = *(_QWORD *)&v14[*(int *)(v15 + 48)];
    sub_10000AF24(v1, (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NotesFolderWidgetView);
    v20 = *(unsigned __int8 *)(v9 + 80);
    v21 = (v20 + 24) & ~v20;
    v22 = swift_allocObject(&unk_100085388, v21 + v10, v20 | 7);
    *(_QWORD *)(v22 + 16) = v19;
    v23 = sub_10000AEE0((uint64_t)v11, v22 + v21, type metadata accessor for NotesFolderWidgetView);
    v24 = static Edge.Set.bottom.getter(v23);
    sub_100033968((uint64_t)v7);
    v25 = v37;
    (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v5, enum case for WidgetFamily.systemSmall(_:), v2);
    v26 = sub_10000C5FC(&qword_10008D460, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v5, v2, v26);
    v28 = *(void (**)(char *, uint64_t))(v25 + 8);
    v28(v5, v2);
    v29 = ((uint64_t (*)(char *, uint64_t))v28)(v7, v2);
    v30.n128_u64[0] = 4.0;
    if ((v27 & 1) != 0)
      v30.n128_f64[0] = 0.0;
    v31 = EdgeInsets.init(_all:)(v29, v30);
    v39[0] = sub_10004DD48;
    v39[1] = v22;
    v40 = v24;
    v41 = v31;
    v42 = v32;
    v43 = v33;
    v44 = v34;
    v45 = 0;
    v35 = sub_100009F30(&qword_10008D468);
    v36 = sub_10004DD98();
    v18 = AnyView.init<A>(_:)(v39, v35, v36);
    result = sub_10000AF68((uint64_t)v14, type metadata accessor for NotesFolder);
  }
  *v38 = v18;
  return result;
}

void sub_1000435CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  __n128 v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for WidgetFamily(0);
  v29 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v10 = type metadata accessor for NotesFolderWidgetView(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004204C(&v31);
  v30 = v31;
  sub_10000AF24(a1, (uint64_t)v13, type metadata accessor for NotesFolderWidgetView);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_1000854A0, v15 + v12, v14 | 7);
  v17 = sub_10000AEE0((uint64_t)v13, v16 + v15, type metadata accessor for NotesFolderWidgetView);
  v18 = static Edge.Set.bottom.getter(v17);
  sub_100033968((uint64_t)v9);
  v19 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v7, enum case for WidgetFamily.systemSmall(_:), v4);
  v20 = sub_10000C5FC(&qword_10008D460, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v4, v20);
  v21 = *(void (**)(char *, uint64_t))(v19 + 8);
  v21(v7, v4);
  v22 = ((uint64_t (*)(char *, uint64_t))v21)(v9, v4);
  v23.n128_u64[0] = 4.0;
  if ((a1 & 1) != 0)
    v23.n128_f64[0] = 0.0;
  v24 = EdgeInsets.init(_all:)(v22, v23);
  *(_QWORD *)a2 = v30;
  *(_QWORD *)(a2 + 8) = sub_10004F0C0;
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = v18;
  *(double *)(a2 + 32) = v24;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v26;
  *(_QWORD *)(a2 + 56) = v27;
  *(_BYTE *)(a2 + 64) = 0;
}

uint64_t sub_1000437C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008D6E0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v9);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v12 = sub_100009F30(&qword_10008D6E8);
  sub_100043918(a2, a1, &v11[*(int *)(v12 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ContentSizeCategory.accessibilityMedium(_:), v4);
  v13 = sub_10000CC08(&qword_10008D6F0, &qword_10008D6E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.maximumSizeCategory(_:)(v7, v8, v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10000CCD8((uint64_t)v11, &qword_10008D6E0);
}

uint64_t sub_100043918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  v44 = a2;
  v45 = a3;
  v4 = type metadata accessor for WidgetFamily(0);
  v53 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v51 = (uint64_t)&v42 - v7;
  v8 = type metadata accessor for GeometryProxy(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v46 = type metadata accessor for NotesFolderWidgetView(0);
  v11 = *(_QWORD *)(v46 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v46);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100009F30(&qword_10008D6F8);
  v49 = *(_QWORD *)(v14 - 8);
  v50 = v14;
  v15 = __chkstk_darwin(v14);
  v48 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v47 = (char *)&v42 - v17;
  result = sub_100043C70();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v43 = result;
    sub_10000AF24(a1, (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NotesFolderWidgetView);
    v19 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v44, v8);
    v20 = *(unsigned __int8 *)(v11 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = *(unsigned __int8 *)(v9 + 80);
    v23 = (v12 + v22 + v21) & ~v22;
    v24 = swift_allocObject(&unk_1000854C8, v23 + v10, v20 | v22 | 7);
    sub_10000AEE0((uint64_t)v13, v24 + v21, type metadata accessor for NotesFolderWidgetView);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v23, (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
    v25 = sub_100009F30(&qword_10008D700);
    v26 = sub_10004F380();
    v27 = v47;
    ForEach<>.init(_:content:)(0, v43, sub_10004F308, v24, v25, v26);
    v28 = v51;
    sub_100033968(v51);
    v30 = v52;
    v29 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, enum case for WidgetFamily.systemSmall(_:), v4);
    v31 = sub_10000C5FC(&qword_10008D460, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    LOBYTE(v25) = dispatch thunk of static Equatable.== infix(_:_:)(v28, v30, v4, v31);
    v32 = *(void (**)(char *, uint64_t))(v29 + 8);
    v32(v30, v4);
    v32((char *)v28, v4);
    v33 = v25 & 1;
    if (v33)
      v34 = 0;
    else
      v34 = 0x4010000000000000;
    v36 = v48;
    v35 = v49;
    v37 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    v38 = v50;
    v37(v48, v27, v50);
    v39 = v45;
    v37(v45, v36, v38);
    v40 = &v39[*(int *)(sub_100009F30(&qword_10008D720) + 48)];
    *(_QWORD *)v40 = v34;
    v40[8] = 0;
    v40[9] = v33;
    v41 = *(void (**)(char *, uint64_t))(v35 + 8);
    v41(v27, v38);
    return ((uint64_t (*)(char *, uint64_t))v41)(v36, v38);
  }
  return result;
}

uint64_t sub_100043C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v66 = v1;
  v67 = v2;
  v3 = __chkstk_darwin(v1);
  v64 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v62 = (uint64_t)&v60 - v6;
  v7 = __chkstk_darwin(v5);
  v63 = (uint64_t)&v60 - v8;
  v9 = __chkstk_darwin(v7);
  v65 = (char *)&v60 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v60 - v11;
  v13 = sub_100009F30(&qword_10008C8E8);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v60 - v18;
  v20 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v20);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for NotesFolderWidgetView(0);
  sub_10000CC94(v0 + *(int *)(v23 + 28), (uint64_t)v22, &qword_10008C8E0);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v22, 2, v13);
  if (v24)
  {
    v26 = v66;
    v25 = v67;
    v27 = 0;
    if (v24 != 1)
    {
      v28 = (uint64_t)v64;
      sub_100033968((uint64_t)v64);
      v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v28, v26);
      if (v29 == enum case for WidgetFamily.systemSmall(_:))
      {
        return 1;
      }
      else if (v29 == enum case for WidgetFamily.systemMedium(_:))
      {
        return 3;
      }
      else if (v29 == enum case for WidgetFamily.systemLarge(_:))
      {
        return 6;
      }
      else if (v29 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        return 8;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v26);
        return 0;
      }
    }
  }
  else
  {
    v30 = (uint64_t)v65;
    v64 = v17;
    v31 = *(int *)(v13 + 48);
    sub_10000AEE0((uint64_t)v22, (uint64_t)v19, type metadata accessor for NotesFolder);
    v32 = *(_QWORD *)&v22[v31];
    *(_QWORD *)&v19[v31] = v32;
    swift_bridgeObjectRetain(v32);
    sub_100033968((uint64_t)v12);
    v33 = v67;
    v34 = *(uint64_t (**)(char *, uint64_t))(v67 + 88);
    v61 = v12;
    v35 = v12;
    v36 = v66;
    v37 = v34(v35, v66);
    v38 = v37;
    v39 = enum case for WidgetFamily.systemSmall(_:);
    v40 = v33;
    v41 = (uint64_t)v19;
    if (v37 == enum case for WidgetFamily.systemSmall(_:))
    {
      v42 = v40;
      swift_bridgeObjectRelease(v32);
      sub_100033968(v30);
      v43 = v34((char *)v30, v36);
      if (v43 == v38)
      {
        v27 = 1;
      }
      else if (v43 == enum case for WidgetFamily.systemMedium(_:))
      {
        v27 = 3;
      }
      else if (v43 == enum case for WidgetFamily.systemLarge(_:))
      {
        v27 = 6;
      }
      else if (v43 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        v27 = 8;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v30, v36);
        v27 = 0;
      }
      sub_10000CCD8(v41, &qword_10008C8E8);
    }
    else
    {
      v44 = enum case for WidgetFamily.systemMedium(_:);
      v45 = enum case for WidgetFamily.systemExtraLarge(_:);
      if (v37 == enum case for WidgetFamily.systemMedium(_:)
        || v37 == enum case for WidgetFamily.systemLarge(_:)
        || v37 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        LODWORD(v65) = enum case for WidgetFamily.systemLarge(_:);
        v53 = *(int *)(v13 + 48);
        v54 = (uint64_t)v64;
        sub_10000AF24(v41, (uint64_t)v64, type metadata accessor for NotesFolder);
        *(_QWORD *)(v54 + v53) = v32;
        v55 = *(_QWORD *)(v32 + 16);
        swift_bridgeObjectRelease(v32);
        v56 = v63;
        sub_100033968(v63);
        v57 = v34((char *)v56, v36);
        if (v57 == v39)
        {
          v27 = v55 != 0;
        }
        else if (v57 == v44)
        {
          if (v55 >= 3)
            v27 = 3;
          else
            v27 = v55;
        }
        else if (v57 == (_DWORD)v65)
        {
          if (v55 >= 6)
            v27 = 6;
          else
            v27 = v55;
        }
        else if (v57 == v45)
        {
          if (v55 >= 8)
            v27 = 8;
          else
            v27 = v55;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v56, v36);
          v27 = 0;
        }
        sub_10000CCD8(v41, &qword_10008C8E8);
        sub_10000AF68(v54, type metadata accessor for NotesFolder);
      }
      else
      {
        v46 = enum case for WidgetFamily.systemLarge(_:);
        LODWORD(v65) = enum case for WidgetFamily.systemExtraLarge(_:);
        v47 = v40;
        swift_bridgeObjectRelease(v32);
        v48 = v62;
        sub_100033968(v62);
        v49 = v34((char *)v48, v36);
        if (v49 == v39)
        {
          v50 = v47;
          v51 = v36;
          v27 = 1;
          v52 = v61;
        }
        else if (v49 == v44)
        {
          v50 = v47;
          v51 = v36;
          v27 = 3;
          v52 = v61;
        }
        else
        {
          v52 = v61;
          if (v49 == v46)
          {
            v50 = v47;
            v51 = v36;
            v27 = 6;
          }
          else
          {
            v50 = v47;
            if (v49 == (_DWORD)v65)
            {
              v51 = v36;
              v27 = 8;
            }
            else
            {
              v58 = v48;
              v51 = v36;
              (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v58, v36);
              v27 = 0;
            }
          }
        }
        sub_10000CCD8(v41, &qword_10008C8E8);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v51);
      }
    }
  }
  return v27;
}

uint64_t sub_100044224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  _OWORD v20[3];

  v8 = sub_100009F30(&qword_10008D718);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v9);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v12 = sub_100009F30(&qword_10008D728);
  sub_100044340(a2, a1, (uint64_t)&v11[*(int *)(v12 + 44)]);
  v13 = sub_1000456C8(a3);
  v15 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(v20, 0, 1, *(_QWORD *)&v13, 0, v15, v16);
  sub_10000CC94((uint64_t)v11, a4, &qword_10008D718);
  v17 = (_OWORD *)(a4 + *(int *)(sub_100009F30(&qword_10008D700) + 36));
  v18 = v20[1];
  *v17 = v20[0];
  v17[1] = v18;
  v17[2] = v20[2];
  return sub_10000CCD8((uint64_t)v11, &qword_10008D718);
}

uint64_t sub_100044340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t KeyPath;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;

  v150 = a2;
  v156 = a3;
  v4 = type metadata accessor for Divider(0);
  v138 = *(_QWORD *)(v4 - 8);
  v139 = v4;
  __chkstk_darwin(v4);
  v137 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008D508);
  v152 = *(_QWORD *)(v6 - 8);
  v153 = v6;
  __chkstk_darwin(v6);
  v136 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008D510);
  v9 = __chkstk_darwin(v8);
  v155 = (uint64_t)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v154 = (char *)&v124 - v11;
  v129 = sub_100009F30(&qword_10008D730);
  __chkstk_darwin(v129);
  v130 = (uint64_t)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100009F30(&qword_10008D738);
  __chkstk_darwin(v142);
  v131 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for NotesFolderWidgetView.LargeNoteRow(0);
  v14 = __chkstk_darwin(v128);
  v127 = (uint64_t *)((char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v132 = (uint64_t)&v124 - v16;
  v144 = type metadata accessor for NotesFolderWidgetView.MediumNoteRow(0);
  v17 = __chkstk_darwin(v144);
  v133 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v134 = (uint64_t)&v124 - v19;
  v145 = sub_100009F30(&qword_10008D740);
  __chkstk_darwin(v145);
  v146 = (uint64_t)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100009F30(&qword_10008D748);
  __chkstk_darwin(v140);
  v147 = (uint64_t)&v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100009F30(&qword_10008D750);
  __chkstk_darwin(v143);
  v23 = (char *)&v124 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100009F30(&qword_10008D758);
  __chkstk_darwin(v141);
  v25 = (char *)&v124 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100009F30(&qword_10008D760);
  __chkstk_darwin(v148);
  v27 = (char *)&v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v124 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v135 = (char *)&v124 - v32;
  v33 = type metadata accessor for WidgetFamily(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v124 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100009F30(&qword_10008D768);
  v38 = __chkstk_darwin(v37);
  v149 = (uint64_t)&v124 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v41 = (char *)&v124 - v40;
  type metadata accessor for NotesFolderWidgetView(0);
  v151 = a1;
  sub_100033968((uint64_t)v36);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v36, v33);
  if (v42 == enum case for WidgetFamily.systemSmall(_:))
  {
    *(_QWORD *)v31 = swift_getKeyPath(&unk_10006B340);
    v31[8] = 0;
    v43 = &v31[*(int *)(v28 + 20)];
    v44 = type metadata accessor for NotesFolder(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
    v45 = &v31[*(int *)(v28 + 24)];
    v46 = type metadata accessor for Note(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 1, 1, v46);
    v47 = (uint64_t)v135;
    sub_10000AEE0((uint64_t)v31, (uint64_t)v135, type metadata accessor for NotesFolderWidgetView.SmallNoteRow);
    sub_10000AF24(v47, (uint64_t)v23, type metadata accessor for NotesFolderWidgetView.SmallNoteRow);
    swift_storeEnumTagMultiPayload(v23, v143, 0);
    v48 = sub_10000C5FC(&qword_10008D5B8, type metadata accessor for NotesFolderWidgetView.SmallNoteRow, (uint64_t)&unk_10006B47C);
    v49 = sub_10000C5FC(&qword_10008D5B0, type metadata accessor for NotesFolderWidgetView.MediumNoteRow, (uint64_t)&unk_10006B4CC);
    _ConditionalContent<>.init(storage:)(v23, v28, v144, v48, v49);
    v50 = v147;
    sub_10000CC94((uint64_t)v25, v147, &qword_10008D758);
    swift_storeEnumTagMultiPayload(v50, v140, 0);
    v51 = sub_10004F470();
    v52 = sub_10004F50C();
    _ConditionalContent<>.init(storage:)(v50, v141, v142, v51, v52);
    sub_10000CCD8((uint64_t)v25, &qword_10008D758);
    v53 = v146;
    sub_10000CC94((uint64_t)v27, v146, &qword_10008D760);
    swift_storeEnumTagMultiPayload(v53, v145, 0);
    v54 = sub_10004F404();
    _ConditionalContent<>.init(storage:)(v53, v148, &type metadata for EmptyView, v54, &protocol witness table for EmptyView);
    sub_10000CCD8((uint64_t)v27, &qword_10008D760);
    sub_10000AF68(v47, type metadata accessor for NotesFolderWidgetView.SmallNoteRow);
    v55 = v153;
    v56 = (uint64_t)v154;
    v57 = (uint64_t)v41;
    goto LABEL_12;
  }
  v125 = v28;
  v58 = (uint64_t)v25;
  v60 = v143;
  v59 = v144;
  v126 = v27;
  v61 = v145;
  v135 = v41;
  if (v42 == enum case for WidgetFamily.systemMedium(_:))
  {
    v62 = type metadata accessor for Note(0);
    v63 = (uint64_t)v133;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v133, 1, 1, v62);
    v64 = v63 + *(int *)(v59 + 20);
    *(_QWORD *)v64 = swift_getKeyPath(&unk_10006B340);
    *(_BYTE *)(v64 + 8) = 0;
    v65 = v134;
    sub_10000AEE0(v63, v134, type metadata accessor for NotesFolderWidgetView.MediumNoteRow);
    sub_10000AF24(v65, (uint64_t)v23, type metadata accessor for NotesFolderWidgetView.MediumNoteRow);
    swift_storeEnumTagMultiPayload(v23, v60, 1);
    v66 = sub_10000C5FC(&qword_10008D5B8, type metadata accessor for NotesFolderWidgetView.SmallNoteRow, (uint64_t)&unk_10006B47C);
    v67 = sub_10000C5FC(&qword_10008D5B0, type metadata accessor for NotesFolderWidgetView.MediumNoteRow, (uint64_t)&unk_10006B4CC);
    _ConditionalContent<>.init(storage:)(v23, v125, v59, v66, v67);
    v68 = v147;
    sub_10000CC94(v58, v147, &qword_10008D758);
    swift_storeEnumTagMultiPayload(v68, v140, 0);
    v69 = sub_10004F470();
    v70 = sub_10004F50C();
    v71 = (uint64_t)v126;
    _ConditionalContent<>.init(storage:)(v68, v141, v142, v69, v70);
    sub_10000CCD8(v58, &qword_10008D758);
    v72 = v146;
    sub_10000CC94(v71, v146, &qword_10008D760);
    swift_storeEnumTagMultiPayload(v72, v61, 0);
    v73 = sub_10004F404();
    v57 = (uint64_t)v135;
    _ConditionalContent<>.init(storage:)(v72, v148, &type metadata for EmptyView, v73, &protocol witness table for EmptyView);
    sub_10000CCD8(v71, &qword_10008D760);
    sub_10000AF68(v65, type metadata accessor for NotesFolderWidgetView.MediumNoteRow);
    v56 = (uint64_t)v154;
  }
  else
  {
    v56 = (uint64_t)v154;
    v74 = v145;
    if (v42 == enum case for WidgetFamily.systemLarge(_:))
    {
      KeyPath = swift_getKeyPath(&unk_10006B368);
      v76 = (uint64_t)v127;
      *v127 = KeyPath;
      v77 = sub_100009F30(&qword_10008CBD0);
      swift_storeEnumTagMultiPayload(v76, v77, 0);
      v78 = v128;
      v79 = v76 + *(int *)(v128 + 20);
      v80 = type metadata accessor for Note(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v79, 1, 1, v80);
      v81 = v76 + *(int *)(v78 + 24);
      *(_QWORD *)v81 = swift_getKeyPath(&unk_10006B340);
      *(_BYTE *)(v81 + 8) = 0;
      v82 = v132;
      sub_10000AEE0(v76, v132, type metadata accessor for NotesFolderWidgetView.LargeNoteRow);
      v83 = v130;
      sub_10000AF24(v82, v130, type metadata accessor for NotesFolderWidgetView.LargeNoteRow);
      swift_storeEnumTagMultiPayload(v83, v129, 0);
      v84 = sub_10000C5FC(&qword_10008D5A8, type metadata accessor for NotesFolderWidgetView.LargeNoteRow, (uint64_t)&unk_10006B51C);
      v85 = (uint64_t)v131;
      _ConditionalContent<>.init(storage:)(v83, v78, v78, v84, v84);
      v86 = v147;
      sub_10000CC94(v85, v147, &qword_10008D738);
      swift_storeEnumTagMultiPayload(v86, v140, 1);
      v87 = sub_10004F470();
      v88 = sub_10004F50C();
      v89 = (uint64_t)v126;
      _ConditionalContent<>.init(storage:)(v86, v141, v142, v87, v88);
      sub_10000CCD8(v85, &qword_10008D738);
      v90 = v146;
      sub_10000CC94(v89, v146, &qword_10008D760);
      swift_storeEnumTagMultiPayload(v90, v61, 0);
      v91 = sub_10004F404();
      v57 = (uint64_t)v135;
      v92 = v90;
    }
    else
    {
      v94 = v146;
      v93 = v147;
      if (v42 != enum case for WidgetFamily.systemExtraLarge(_:))
      {
        swift_storeEnumTagMultiPayload(v146, v145, 1);
        v108 = sub_10004F404();
        v109 = (uint64_t)v135;
        _ConditionalContent<>.init(storage:)(v94, v148, &type metadata for EmptyView, v108, &protocol witness table for EmptyView);
        v110 = v33;
        v57 = v109;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v110);
        goto LABEL_11;
      }
      v95 = swift_getKeyPath(&unk_10006B368);
      v96 = (uint64_t)v127;
      *v127 = v95;
      v97 = sub_100009F30(&qword_10008CBD0);
      swift_storeEnumTagMultiPayload(v96, v97, 0);
      v98 = v128;
      v99 = v96 + *(int *)(v128 + 20);
      v100 = type metadata accessor for Note(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v99, 1, 1, v100);
      v101 = v96 + *(int *)(v98 + 24);
      *(_QWORD *)v101 = swift_getKeyPath(&unk_10006B340);
      *(_BYTE *)(v101 + 8) = 0;
      v82 = v132;
      sub_10000AEE0(v96, v132, type metadata accessor for NotesFolderWidgetView.LargeNoteRow);
      v102 = v130;
      sub_10000AF24(v82, v130, type metadata accessor for NotesFolderWidgetView.LargeNoteRow);
      swift_storeEnumTagMultiPayload(v102, v129, 1);
      v103 = sub_10000C5FC(&qword_10008D5A8, type metadata accessor for NotesFolderWidgetView.LargeNoteRow, (uint64_t)&unk_10006B51C);
      v104 = (uint64_t)v131;
      _ConditionalContent<>.init(storage:)(v102, v98, v98, v103, v103);
      sub_10000CC94(v104, v93, &qword_10008D738);
      swift_storeEnumTagMultiPayload(v93, v140, 1);
      v105 = v93;
      v106 = sub_10004F470();
      v107 = sub_10004F50C();
      v89 = (uint64_t)v126;
      _ConditionalContent<>.init(storage:)(v105, v141, v142, v106, v107);
      sub_10000CCD8(v104, &qword_10008D738);
      sub_10000CC94(v89, v94, &qword_10008D760);
      swift_storeEnumTagMultiPayload(v94, v74, 0);
      v91 = sub_10004F404();
      v57 = (uint64_t)v135;
      v92 = v94;
    }
    _ConditionalContent<>.init(storage:)(v92, v148, &type metadata for EmptyView, v91, &protocol witness table for EmptyView);
    sub_10000CCD8(v89, &qword_10008D760);
    sub_10000AF68(v82, type metadata accessor for NotesFolderWidgetView.LargeNoteRow);
  }
LABEL_11:
  v55 = v153;
LABEL_12:
  v111 = 1;
  if (!sub_10004515C(v150))
  {
    v112 = v137;
    v113 = Divider.init()();
    v114 = static Edge.Set.leading.getter(v113);
    v116 = v138;
    v115 = v139;
    v117 = (uint64_t)v136;
    (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v136, v112, v139);
    v118 = v117 + *(int *)(v55 + 36);
    *(_BYTE *)v118 = v114;
    *(_OWORD *)(v118 + 8) = 0u;
    *(_OWORD *)(v118 + 24) = 0u;
    *(_BYTE *)(v118 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v116 + 8))(v112, v115);
    sub_10000CC50(v117, v56, &qword_10008D508);
    v111 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v152 + 56))(v56, v111, 1, v55);
  v119 = v149;
  sub_10000CC94(v57, v149, &qword_10008D768);
  v120 = v155;
  sub_10000CC94(v56, v155, &qword_10008D510);
  v121 = v156;
  sub_10000CC94(v119, v156, &qword_10008D768);
  v122 = sub_100009F30(&qword_10008D788);
  sub_10000CC94(v120, v121 + *(int *)(v122 + 48), &qword_10008D510);
  sub_10000CCD8(v56, &qword_10008D510);
  sub_10000CCD8(v57, &qword_10008D768);
  sub_10000CCD8(v120, &qword_10008D510);
  return sub_10000CCD8(v119, &qword_10008D768);
}

BOOL sub_10004515C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  int v26;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v63 = a1;
  v2 = type metadata accessor for NotesFolderWidgetView(0);
  __chkstk_darwin(v2);
  v62 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v64 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v56 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v56 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v56 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v56 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v56 - v20;
  v65 = v2;
  v22 = *(int *)(v2 + 20);
  v23 = v1;
  v24 = v1 + v22;
  sub_100033968((uint64_t)&v56 - v20);
  v25 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v26 = v25(v21, v4);
  if (v26 == enum case for WidgetFamily.systemSmall(_:))
    return 1;
  v60 = v16;
  v61 = v24;
  v58 = v13;
  v59 = v5;
  v28 = enum case for WidgetFamily.systemMedium(_:);
  if (v26 == enum case for WidgetFamily.systemMedium(_:))
  {
    v29 = v23;
    LODWORD(v64) = v26;
    v30 = enum case for WidgetFamily.systemSmall(_:);
    sub_100033968((uint64_t)v19);
    v57 = (uint64_t (*)(uint64_t, uint64_t))v25;
    v31 = v25(v19, v4);
    if (v31 == v30)
    {
      v32 = 0;
    }
    else if (v31 == (_DWORD)v64)
    {
      v32 = 2;
    }
    else if (v31 == enum case for WidgetFamily.systemLarge(_:))
    {
      v32 = 5;
    }
    else if (v31 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v32 = 7;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v4);
      v32 = -1;
    }
    v46 = v63;
    v47 = (uint64_t)v60;
    if (v32 <= v63)
      return 1;
    v48 = sub_100043C70();
    sub_100033968(v47);
    v49 = v57(v47, v4);
    if (v49 == v30)
    {
      v50 = 1;
      v51 = v59;
    }
    else if (v49 == (_DWORD)v64)
    {
      v50 = 3;
      v51 = v59;
    }
    else if (v49 == enum case for WidgetFamily.systemLarge(_:))
    {
      v50 = 6;
      v51 = v59;
    }
    else if (v49 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v50 = 8;
      v51 = v59;
    }
    else
    {
      v51 = v59;
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v47, v4);
      v50 = 0;
    }
    v52 = v62;
    sub_10000AF24(v29, v62, type metadata accessor for NotesFolderWidgetView);
    if (v48 >= v50)
    {
      sub_10000AF68(v52, type metadata accessor for NotesFolderWidgetView);
    }
    else
    {
      v53 = (uint64_t)v58;
      sub_100033968((uint64_t)v58);
      v54 = v57(v53, v4);
      if (v54 == v30)
      {
        v55 = -1;
      }
      else if (v54 == (_DWORD)v64)
      {
        v55 = 1;
      }
      else if (v54 == enum case for WidgetFamily.systemLarge(_:))
      {
        v55 = 4;
      }
      else if (v54 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        v55 = 6;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v4);
        v55 = -2;
      }
      sub_10000AF68(v52, type metadata accessor for NotesFolderWidgetView);
      if (v55 <= v46)
        return 1;
    }
    return 0;
  }
  v33 = (uint64_t)v10;
  v34 = enum case for WidgetFamily.systemLarge(_:);
  if (v26 == enum case for WidgetFamily.systemLarge(_:))
  {
    v35 = v26;
    v36 = v33;
    v37 = enum case for WidgetFamily.systemSmall(_:);
    sub_100033968(v33);
    v38 = v25((char *)v36, v4);
    if (v38 == v37)
    {
      v39 = 0;
    }
    else if (v38 == v28)
    {
      v39 = 2;
    }
    else if (v38 == v35)
    {
      v39 = 5;
    }
    else if (v38 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v39 = 7;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v36, v4);
      v39 = -1;
    }
    return v39 <= v63;
  }
  if (v26 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v40 = v26;
    v41 = v64;
    v42 = enum case for WidgetFamily.systemSmall(_:);
    sub_100033968(v64);
    v43 = v25((char *)v41, v4);
    if (v43 == v42)
    {
      v44 = 0;
      v45 = v63;
    }
    else if (v43 == v28)
    {
      v44 = 2;
      v45 = v63;
    }
    else if (v43 == v34)
    {
      v44 = 5;
      v45 = v63;
    }
    else
    {
      v45 = v63;
      if (v43 == v40)
      {
        v44 = 7;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v41, v4);
        v44 = -1;
      }
    }
    return v44 <= v45;
  }
  (*(void (**)(char *, uint64_t))(v59 + 8))(v21, v4);
  return 1;
}

double sub_1000456C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t);
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  double v19;
  double v20;
  uint64_t v21;
  int v22;
  double v23;
  BOOL v24;
  double v25;
  uint64_t v26;
  int v27;
  double v28;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a1;
  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v33 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v30 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v30 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v30 - v11;
  type metadata accessor for NotesFolderWidgetView(0);
  sub_100033968((uint64_t)v12);
  v13 = v2;
  v14 = *(uint64_t (**)(char *, uint64_t))(v2 + 88);
  v15 = v14(v12, v1);
  v32 = enum case for WidgetFamily.systemMedium(_:);
  if ((_DWORD)v15 != enum case for WidgetFamily.systemMedium(_:))
  {
    v18 = enum case for WidgetFamily.systemSmall(_:);
LABEL_5:
    GeometryProxy.size.getter(v15);
    v20 = v19;
    v21 = v33;
    sub_100033968(v33);
    v22 = v14((char *)v21, v1);
    v23 = 1.0;
    if (v22 != v18)
    {
      v23 = 3.0;
      if (v22 != v32)
      {
        v23 = 6.0;
        if (v22 != enum case for WidgetFamily.systemLarge(_:))
        {
          v23 = 8.0;
          if (v22 != enum case for WidgetFamily.systemExtraLarge(_:))
          {
            (*(void (**)(uint64_t, uint64_t, double))(v13 + 8))(v21, v1, 8.0);
            v23 = 0.0;
          }
        }
      }
    }
    goto LABEL_23;
  }
  v16 = v15;
  v30 = v7;
  v17 = sub_100043C70();
  sub_100033968((uint64_t)v10);
  v15 = v14(v10, v1);
  v18 = v15;
  v31 = enum case for WidgetFamily.systemSmall(_:);
  if ((_DWORD)v15 != enum case for WidgetFamily.systemSmall(_:))
  {
    if ((_DWORD)v15 == v16)
    {
      v18 = v31;
      v24 = v17 < 3;
    }
    else if ((_DWORD)v15 == enum case for WidgetFamily.systemLarge(_:))
    {
      v18 = v31;
      v24 = v17 < 6;
    }
    else
    {
      if ((_DWORD)v15 != enum case for WidgetFamily.systemExtraLarge(_:))
      {
        v15 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, v1);
        v18 = v31;
        if ((v17 & 0x8000000000000000) == 0)
          goto LABEL_5;
        goto LABEL_18;
      }
      v18 = v31;
      v24 = v17 < 8;
    }
    if (!v24)
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v17 > 0)
    goto LABEL_5;
LABEL_18:
  GeometryProxy.size.getter(v15);
  v20 = v25;
  v26 = (uint64_t)v30;
  sub_100033968((uint64_t)v30);
  v27 = v14((char *)v26, v1);
  v23 = 0.0;
  if (v27 != v31)
  {
    v23 = 2.0;
    if (v27 != v16)
    {
      v23 = 5.0;
      if (v27 != enum case for WidgetFamily.systemLarge(_:))
      {
        v23 = 7.0;
        if (v27 != enum case for WidgetFamily.systemExtraLarge(_:))
        {
          (*(void (**)(uint64_t, uint64_t, double))(v13 + 8))(v26, v1, 7.0);
          v23 = -1.0;
        }
      }
    }
  }
LABEL_23:
  v28 = v20 / v23;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v1);
  return v28;
}

uint64_t sub_1000459F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[24];
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;

  v57 = a6;
  v11 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NotesFolder(0);
  __chkstk_darwin(v14);
  v52 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100009F30(&qword_10008D648);
  v17 = __chkstk_darwin(v16);
  v56 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v52 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v52 - v23;
  *(_QWORD *)v21 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v21 + 1) = 0;
  v21[16] = 0;
  v25 = sub_100009F30(&qword_10008D650);
  sub_100045E6C(a1, a2, a3 & 1, a4, a5, (uint64_t)&v21[*(int *)(v25 + 44)]);
  v26 = (uint64_t)v21;
  v27 = (uint64_t)v24;
  sub_10000CC50(v26, (uint64_t)v24, &qword_10008D648);
  v28 = type metadata accessor for NotesFolderWidgetView(0);
  sub_10000CC94(a5 + *(int *)(v28 + 28), (uint64_t)v13, &qword_10008C8E0);
  v29 = sub_100009F30(&qword_10008C8E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v13, 2, v29))
  {
    sub_10000CCD8((uint64_t)v13, &qword_10008C8E0);
LABEL_6:
    *(_QWORD *)v58 = 0x4030000000000000;
    *(_OWORD *)&v58[8] = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    v62 = 1;
    v44 = sub_100009F30(&qword_10008D658);
    v45 = sub_10000CC08(&qword_10008D660, &qword_10008D658, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v58, v44, &type metadata for Spacer, v45, &protocol witness table for Spacer);
    v37 = v64;
    v55 = v63;
    v38 = v65;
    v39 = v66;
    v41 = v67;
    v40 = v68;
    v42 = v69;
    v43 = v70;
    v54 = v71;
    goto LABEL_7;
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v13[*(int *)(v29 + 48)]);
  v30 = (uint64_t)v13;
  v31 = v52;
  v32 = sub_10000AEE0(v30, v52, type metadata accessor for NotesFolder);
  if (*(_BYTE *)(v31 + 32) != 1)
  {
    sub_10000AF68(v31, type metadata accessor for NotesFolder);
    goto LABEL_6;
  }
  v33 = static VerticalAlignment.center.getter(v32);
  v34 = swift_bridgeObjectRetain(*(_QWORD *)(v31 + *(int *)(v14 + 40)));
  *(_OWORD *)v58 = xmmword_10006AD80;
  *(_QWORD *)&v58[16] = v33;
  v59 = 0uLL;
  *(_QWORD *)&v60 = 0;
  *((_QWORD *)&v60 + 1) = 1;
  v61 = v34;
  v62 = 0;
  v35 = sub_100009F30(&qword_10008D658);
  v36 = sub_10000CC08(&qword_10008D660, &qword_10008D658, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v58, v35, &type metadata for Spacer, v36, &protocol witness table for Spacer);
  v37 = v64;
  v55 = v63;
  v38 = v65;
  v39 = v66;
  v41 = v67;
  v40 = v68;
  v42 = v69;
  v43 = v70;
  v54 = v71;
  sub_10000AF68(v31, type metadata accessor for NotesFolder);
LABEL_7:
  v53 = v27;
  v46 = v56;
  sub_10000CC94(v27, v56, &qword_10008D648);
  v47 = v57;
  sub_10000CC94(v46, v57, &qword_10008D648);
  v48 = v47 + *(int *)(sub_100009F30(&qword_10008D668) + 48);
  v49 = v55;
  *(_QWORD *)v48 = v55;
  *(_QWORD *)(v48 + 8) = v37;
  *(_QWORD *)(v48 + 16) = v38;
  *(_QWORD *)(v48 + 24) = v39;
  *(_QWORD *)(v48 + 32) = v41;
  *(_QWORD *)(v48 + 40) = v40;
  *(_QWORD *)(v48 + 48) = v42;
  *(_QWORD *)(v48 + 56) = v43;
  v50 = v54;
  *(_BYTE *)(v48 + 64) = v54;
  sub_10004ED64(v49, v37, v38, v39, v41, v40, v42, v43, v50);
  sub_10000CCD8(v53, &qword_10008D648);
  sub_10004ED78(v49, v37, v38, v39, v41, v40, v42, v43, v50);
  return sub_10000CCD8(v46, &qword_10008D648);
}

uint64_t sub_100045E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v34 = a5;
  v36 = a6;
  v10 = sub_100009F30(&qword_10008D670);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100009F30(&qword_10008D678);
  v14 = __chkstk_darwin(v35);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v33 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v33 - v20;
  v37 = a1;
  v38 = a2;
  v39 = a3 & 1;
  v40 = a4;
  View.hyphenationFactor(_:)(&type metadata for Text, &protocol witness table for Text, 0.1);
  v22 = v34 + *(int *)(type metadata accessor for NotesFolderWidgetView(0) + 24);
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_10000B2CC(*(_QWORD *)v22, v24);
  LOBYTE(a1) = sub_1000337B0(v23, v24);
  v25 = sub_10000B470(v23, v24);
  if ((a1 & 1) != 0)
  {
    v26 = static Color.secondary.getter(v25);
  }
  else
  {
    sub_10000B2CC(v23, v24);
    v27 = sub_1000337B0(v23, v24);
    v28 = sub_10000B470(v23, v24);
    if ((v27 & 1) != 0)
      v26 = static Color.primary.getter(v28);
    else
      v26 = static Color.white.getter(v28);
  }
  v29 = v26;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v19, v13, v10);
  *(_QWORD *)&v19[*(int *)(v35 + 36)] = v29;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_10000CC50((uint64_t)v19, (uint64_t)v21, &qword_10008D678);
  sub_10000CC94((uint64_t)v21, (uint64_t)v16, &qword_10008D678);
  v30 = v36;
  sub_10000CC94((uint64_t)v16, v36, &qword_10008D678);
  v31 = v30 + *(int *)(sub_100009F30(&qword_10008D680) + 48);
  *(_QWORD *)v31 = 0;
  *(_BYTE *)(v31 + 8) = 1;
  sub_10000CCD8((uint64_t)v21, &qword_10008D678);
  return sub_10000CCD8((uint64_t)v16, &qword_10008D678);
}

uint64_t sub_1000460D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v62 = a5;
  v56 = a4;
  v55 = a3;
  v54 = a2;
  v66 = a6;
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100009F30(&qword_10008D670);
  v11 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100009F30(&qword_10008D688);
  __chkstk_darwin(v57);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100009F30(&qword_10008D690);
  __chkstk_darwin(v58);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100009F30(&qword_10008D698);
  __chkstk_darwin(v60);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100009F30(&qword_10008D6A0);
  __chkstk_darwin(v61);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100009F30(&qword_10008D6A8);
  v23 = __chkstk_darwin(v22);
  v65 = (uint64_t)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v63 = (uint64_t)&v53 - v26;
  __chkstk_darwin(v25);
  v64 = (uint64_t)&v53 - v27;
  v67 = a1;
  v68 = v54;
  v69 = v55 & 1;
  v70 = v56;
  View.hyphenationFactor(_:)(&type metadata for Text, &protocol witness table for Text, 0.1);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.body(_:), v7);
  v28 = static Font.systemSingleLineA(_:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  KeyPath = swift_getKeyPath(&unk_10006B2F0);
  v30 = v59;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v13, v59);
  v31 = (uint64_t *)&v15[*(int *)(v57 + 36)];
  *v31 = KeyPath;
  v31[1] = v28;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v30);
  v32 = swift_getKeyPath(&unk_10006B398);
  sub_10000CC94((uint64_t)v15, (uint64_t)v17, &qword_10008D688);
  v33 = &v17[*(int *)(v58 + 36)];
  *(_QWORD *)v33 = v32;
  v33[8] = 1;
  sub_10000CCD8((uint64_t)v15, &qword_10008D688);
  v34 = v62 + *(int *)(type metadata accessor for NotesFolderWidgetView(0) + 24);
  v35 = *(_QWORD *)v34;
  v36 = *(_BYTE *)(v34 + 8);
  sub_10000B2CC(*(_QWORD *)v34, v36);
  LOBYTE(v30) = sub_1000337B0(v35, v36);
  v37 = sub_10000B470(v35, v36);
  if ((v30 & 1) != 0)
  {
    v38 = static Color.secondary.getter(v37);
  }
  else
  {
    sub_10000B2CC(v35, v36);
    v39 = sub_1000337B0(v35, v36);
    v40 = sub_10000B470(v35, v36);
    if ((v39 & 1) != 0)
      v38 = static Color.primary.getter(v40);
    else
      v38 = static Color.white.getter(v40);
  }
  v41 = v38;
  sub_10000CC94((uint64_t)v17, (uint64_t)v19, &qword_10008D690);
  *(_QWORD *)&v19[*(int *)(v60 + 36)] = v41;
  sub_10000CCD8((uint64_t)v17, &qword_10008D690);
  v42 = swift_getKeyPath(&unk_10006B3C8);
  sub_10000CC94((uint64_t)v19, (uint64_t)v21, &qword_10008D698);
  v43 = &v21[*(int *)(v61 + 36)];
  *(_QWORD *)v43 = v42;
  *((_QWORD *)v43 + 1) = 2;
  v43[16] = 0;
  v44 = sub_10000CCD8((uint64_t)v19, &qword_10008D698);
  v45 = static Alignment.center.getter(v44);
  v46 = v63;
  sub_100059894(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v63, 0.0, 1, INFINITY, 0, v45, v47);
  sub_10000CCD8((uint64_t)v21, &qword_10008D6A0);
  v48 = v64;
  sub_10000CC50(v46, v64, &qword_10008D6A8);
  v49 = v65;
  sub_10000CC94(v48, v65, &qword_10008D6A8);
  v50 = v66;
  sub_10000CC94(v49, v66, &qword_10008D6A8);
  v51 = v50 + *(int *)(sub_100009F30(&qword_10008D6B0) + 48);
  *(_QWORD *)v51 = 0x4030000000000000;
  *(_BYTE *)(v51 + 8) = 0;
  sub_10000CCD8(v48, &qword_10008D6A8);
  return sub_10000CCD8(v49, &qword_10008D6A8);
}

uint64_t sub_100046608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v42 = a1;
  v48 = a4;
  v6 = type metadata accessor for ContentSizeCategory(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v45 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for GeometryProxy(0);
  v8 = *(_QWORD *)(v41 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v41);
  v10 = type metadata accessor for NotesFolderWidgetView(0);
  v39 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v39 + 64);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100009F30(&qword_10008D488);
  v13 = __chkstk_darwin(v44);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v13);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 0;
  v43 = &v15[*(int *)(sub_100009F30(&qword_10008D490) + 44)];
  swift_bridgeObjectRetain(a2);
  v16 = sub_100043C70();
  v17 = sub_100029DB0(v16, a2);
  v21 = sub_10004E028(v17, v18, v19, v20);
  swift_unknownObjectRelease(v17);
  v49 = v21;
  KeyPath = swift_getKeyPath(&unk_10006B320);
  sub_10000AF24(a3, (uint64_t)v12, type metadata accessor for NotesFolderWidgetView);
  v22 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v42, v41);
  v23 = *(unsigned __int8 *)(v39 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = *(unsigned __int8 *)(v8 + 80);
  v26 = (v11 + v25 + v24) & ~v25;
  v27 = swift_allocObject(&unk_1000853B0, v26 + v9, v23 | v25 | 7);
  sub_10000AEE0((uint64_t)v12, v27 + v24, type metadata accessor for NotesFolderWidgetView);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v27 + v26, (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
  v28 = swift_allocObject(&unk_1000853D8, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10004E34C;
  *(_QWORD *)(v28 + 24) = v27;
  v29 = sub_100009F30(&qword_10008D498);
  v30 = sub_100009F30(&qword_10008D4A0);
  v31 = sub_10000CC08(&qword_10008D4A8, &qword_10008D498, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = sub_10004E450();
  ForEach<>.init(_:id:content:)(&v49, KeyPath, sub_10004E3F8, v28, v29, v30, v31, &protocol witness table for Int, v32);
  v34 = v45;
  v33 = v46;
  v35 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v45, enum case for ContentSizeCategory.accessibilityMedium(_:), v47);
  v36 = sub_10000CC08(&qword_10008D4E8, &qword_10008D488, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.maximumSizeCategory(_:)(v34, v44, v36);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  return sub_10000CCD8((uint64_t)v15, &qword_10008D488);
}

uint64_t sub_100046944@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD v70[2];
  _OWORD v71[3];

  v58 = a3;
  v56 = a2;
  v68 = a4;
  v69 = a1;
  v5 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v5);
  v65 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100009F30(&qword_10008C8E8);
  v67 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v54 = (uint64_t)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessibilityChildBehavior(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for AccessibilityTraits(0);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100009F30(&qword_10008D4E0);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100009F30(&qword_10008D4D0);
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100009F30(&qword_10008D4B8);
  __chkstk_darwin(v19);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100009F30(&qword_10008D4F8);
  v64 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100009F30(&qword_10008D4A0);
  v24 = __chkstk_darwin(v63);
  v26 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v24);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 0;
  v27 = (uint64_t)&v15[*(int *)(sub_100009F30(&qword_10008D500) + 44)];
  v55 = v4;
  sub_100046E58(v4, (uint64_t)v69, v56, v27);
  v28 = sub_1000456C8(v58);
  v30 = static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(v71, 0, 1, *(_QWORD *)&v28, 0, v30, v31);
  sub_10000CC94((uint64_t)v15, (uint64_t)v18, &qword_10008D4E0);
  v32 = &v18[*(int *)(v16 + 36)];
  v33 = v71[1];
  *(_OWORD *)v32 = v71[0];
  *((_OWORD *)v32 + 1) = v33;
  *((_OWORD *)v32 + 2) = v71[2];
  v34 = sub_10000CCD8((uint64_t)v15, &qword_10008D4E0);
  static AccessibilityTraits.isLink.getter(v34);
  v35 = sub_10004E580();
  View.accessibility(addTraits:)(v12, v16, v35);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v59);
  v36 = sub_10000CCD8((uint64_t)v18, &qword_10008D4D0);
  static AccessibilityChildBehavior.ignore.getter(v36);
  v37 = sub_10004E4FC();
  View.accessibilityElement(children:)(v10, v19, v37);
  v38 = (uint64_t)v65;
  v39 = v10;
  v40 = v62;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v61);
  sub_10000CCD8((uint64_t)v21, &qword_10008D4B8);
  v41 = type metadata accessor for NotesFolderWidgetView(0);
  sub_10000CC94(v55 + *(int *)(v41 + 28), v38, &qword_10008C8E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v38, 2, v40))
  {
    v42 = 0;
    v43 = 0xE000000000000000;
    v44 = v69;
  }
  else
  {
    v45 = v54;
    sub_10000CC50(v38, v54, &qword_10008C8E8);
    swift_bridgeObjectRelease(*(_QWORD *)(v45 + *(int *)(v40 + 48)));
    v44 = v69;
    v42 = sub_10000D0A4(v69);
    v43 = v46;
    sub_10000AF68(v45, type metadata accessor for NotesFolder);
  }
  v70[0] = v19;
  v70[1] = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v70, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v48 = v66;
  View.accessibility(label:)(v42, v43, 0, _swiftEmptyArrayStorage, v66, OpaqueTypeConformance2);
  v49 = swift_bridgeObjectRelease(v43);
  (*(void (**)(char *, uint64_t, __n128))(v64 + 8))(v23, v48, v49);
  v50 = v44[4];
  v51 = v44[5];
  swift_bridgeObjectRetain(v51);
  ModifiedContent<>.accessibility(value:)(v50, v51, 0, _swiftEmptyArrayStorage, v63);
  swift_bridgeObjectRelease(v51);
  return sub_10000CCD8((uint64_t)v26, &qword_10008D4A0);
}

uint64_t sub_100046E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(uint64_t, char *);
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;

  v205 = a3;
  v213 = a2;
  v208 = a4;
  v190 = type metadata accessor for Divider(0);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v188 = (char *)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_100009F30(&qword_10008D508);
  v215 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v187 = (char *)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100009F30(&qword_10008D510);
  v8 = __chkstk_darwin(v7);
  v207 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v206 = (char *)&v168 - v10;
  v171 = sub_100009F30(&qword_10008D518);
  __chkstk_darwin(v171);
  v172 = (char *)&v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100009F30(&qword_10008D520);
  __chkstk_darwin(v203);
  v173 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100009F30(&qword_10008D528);
  v175 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v174 = (char *)&v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100009F30(&qword_10008D530);
  v177 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v176 = (char *)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v15);
  v184 = (uint64_t)&v168 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100009F30(&qword_10008C8E8);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v170 = (uint64_t)&v168 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_100009F30(&qword_10008D538);
  __chkstk_darwin(v211);
  v209 = (uint64_t)&v168 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100009F30(&qword_10008D540);
  __chkstk_darwin(v200);
  v199 = (uint64_t)&v168 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_100009F30(&qword_10008D548);
  __chkstk_darwin(v191);
  v193 = (char *)&v168 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100009F30(&qword_10008D550);
  __chkstk_darwin(v201);
  v194 = (char *)&v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_100009F30(&qword_10008D558);
  __chkstk_darwin(v210);
  v202 = (char *)&v168 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = type metadata accessor for Note(0);
  v195 = *(_QWORD *)(v198 - 8);
  v23 = *(_QWORD *)(v195 + 64);
  __chkstk_darwin(v198);
  v196 = (uint64_t)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for NotesFolderWidgetView(0);
  v180 = *(char **)(v24 - 8);
  __chkstk_darwin(v24);
  v179 = v25;
  v181 = (uint64_t)&v168 - (((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v26);
  v197 = (uint64_t)&v168 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100009F30(&qword_10008D560);
  v186 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v185 = (char *)&v168 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for WidgetFamily(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v168 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v168 - v34;
  v36 = sub_100009F30(&qword_10008D568);
  v37 = __chkstk_darwin(v36);
  v214 = (uint64_t)&v168 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v216 = (char *)&v168 - v39;
  sub_100033968((uint64_t)v35);
  v40 = *(uint64_t (**)(char *, uint64_t))(v30 + 88);
  v41 = v40(v35, v29);
  if (v41 == enum case for WidgetFamily.systemSmall(_:))
  {
    v42 = v197;
    v43 = v213;
    sub_10000CC94(v213 + *(int *)(v198 + 44), v197, &qword_10008B170);
    v44 = v181;
    sub_10000AF24(a1, v181, type metadata accessor for NotesFolderWidgetView);
    v45 = v196;
    sub_10000AF24(v43, v196, type metadata accessor for Note);
    v46 = v180[80];
    v47 = (v46 + 16) & ~v46;
    v48 = *(unsigned __int8 *)(v195 + 80);
    v49 = ((unint64_t)v179 + v48 + v47) & ~v48;
    v50 = swift_allocObject(&unk_100085478, v49 + v23, v46 | v48 | 7);
    sub_10000AEE0(v44, v50 + v47, type metadata accessor for NotesFolderWidgetView);
    sub_10000AEE0(v45, v50 + v49, type metadata accessor for Note);
    v51 = type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0);
    v52 = sub_10000C5FC(&qword_10008D5B8, type metadata accessor for NotesFolderWidgetView.SmallNoteRow, (uint64_t)&unk_10006B47C);
    v53 = v185;
    Link.init(destination:content:)(v42, sub_10004EBD4, v50, v51, v52);
    v54 = v186;
    v55 = v193;
    v56 = v192;
    (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v193, v53, v192);
    swift_storeEnumTagMultiPayload(v55, v191, 0);
    v57 = sub_10000CC08(&qword_10008D580, &qword_10008D560, (uint64_t)&protocol conformance descriptor for Link<A>);
    v58 = sub_10000CC08(&qword_10008D588, &qword_10008D530, (uint64_t)&protocol conformance descriptor for Link<A>);
    v59 = (uint64_t)v194;
    _ConditionalContent<>.init(storage:)(v55, v56, v204, v57, v58);
    v60 = v199;
    sub_10000CC94(v59, v199, &qword_10008D550);
    swift_storeEnumTagMultiPayload(v60, v200, 0);
    v61 = sub_10004E6B0(&qword_10008D578, &qword_10008D550, &qword_10008D580, &qword_10008D560);
    v62 = sub_10004E6B0(&qword_10008D590, &qword_10008D520, &qword_10008D598, &qword_10008D528);
    v63 = (uint64_t)v202;
    _ConditionalContent<>.init(storage:)(v60, v201, v203, v61, v62);
    sub_10000CCD8(v59, &qword_10008D550);
    v64 = v209;
    sub_10000CC94(v63, v209, &qword_10008D558);
    swift_storeEnumTagMultiPayload(v64, v211, 0);
    v65 = sub_10004E604();
    v66 = (uint64_t)v216;
    _ConditionalContent<>.init(storage:)(v64, v210, &type metadata for EmptyView, v65, &protocol witness table for EmptyView);
    sub_10000CCD8(v63, &qword_10008D558);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v56);
    v68 = (uint64_t)v207;
    v67 = v208;
    v70 = v205;
    v69 = (uint64_t)v206;
    v71 = v212;
    goto LABEL_27;
  }
  v72 = v41;
  v73 = v24;
  v179 = (uint64_t (*)(uint64_t, char *))v40;
  v180 = v33;
  v169 = v30;
  v185 = (char *)v29;
  v74 = v182;
  v75 = v183;
  v76 = v184;
  v181 = v23;
  v77 = v213;
  v186 = a1;
  if (v41 == enum case for WidgetFamily.systemMedium(_:))
  {
    v78 = enum case for WidgetFamily.systemSmall(_:);
    sub_10000CC94(v186 + *(int *)(v73 + 28), v184, &qword_10008C8E0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 2, v75))
    {
      v79 = 0;
    }
    else
    {
      v102 = v170;
      sub_10000CC50(v76, v170, &qword_10008C8E8);
      v103 = *(_QWORD *)(v102 + *(int *)(v75 + 48));
      v79 = *(_QWORD *)(v103 + 16);
      swift_bridgeObjectRelease(v103);
      sub_10000AF68(v102, type metadata accessor for NotesFolder);
    }
    v104 = v185;
    v105 = (uint64_t)v180;
    sub_100033968((uint64_t)v180);
    v106 = v179(v105, v104);
    if (v106 == v78)
    {
      v68 = (uint64_t)v207;
      v67 = v208;
      v70 = v205;
      v69 = (uint64_t)v206;
      v107 = v77;
      v109 = v196;
      v108 = v197;
      v110 = v195;
      v111 = v198;
      if (!v79)
        goto LABEL_20;
LABEL_25:
      sub_10000CC94(v107 + *(int *)(v111 + 44), v108, &qword_10008B170);
      sub_10000AF24(v107, v109, type metadata accessor for Note);
      v132 = *(unsigned __int8 *)(v110 + 80);
      v133 = v108;
      v134 = (v132 + 16) & ~v132;
      v135 = swift_allocObject(&unk_100085428, v134 + v181, v132 | 7);
      sub_10000AEE0(v109, v135 + v134, type metadata accessor for Note);
      v136 = type metadata accessor for NotesFolderWidgetView.MediumNoteRow(0);
      v137 = sub_10000C5FC(&qword_10008D5B0, type metadata accessor for NotesFolderWidgetView.MediumNoteRow, (uint64_t)&unk_10006B4CC);
      v138 = v174;
      Link.init(destination:content:)(v133, sub_10004E770, v135, v136, v137);
      v139 = v172;
      v140 = v178;
      (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v172, v138, v178);
      swift_storeEnumTagMultiPayload(v139, v171, 0);
      v141 = sub_10000CC08(&qword_10008D598, &qword_10008D528, (uint64_t)&protocol conformance descriptor for Link<A>);
      v142 = sub_10000CC08(&qword_10008D588, &qword_10008D530, (uint64_t)&protocol conformance descriptor for Link<A>);
      v143 = v140;
      v144 = (uint64_t)v173;
      _ConditionalContent<>.init(storage:)(v139, v143, v204, v141, v142);
      v145 = v199;
      sub_10000CC94(v144, v199, &qword_10008D520);
      swift_storeEnumTagMultiPayload(v145, v200, 1);
      v146 = sub_10004E6B0(&qword_10008D578, &qword_10008D550, &qword_10008D580, &qword_10008D560);
      v147 = sub_10004E6B0(&qword_10008D590, &qword_10008D520, &qword_10008D598, &qword_10008D528);
      v148 = (uint64_t)v202;
      _ConditionalContent<>.init(storage:)(v145, v201, v203, v146, v147);
      sub_10000CCD8(v144, &qword_10008D520);
      v149 = v209;
      sub_10000CC94(v148, v209, &qword_10008D558);
      swift_storeEnumTagMultiPayload(v149, v211, 0);
      v150 = sub_10004E604();
      v66 = (uint64_t)v216;
      _ConditionalContent<>.init(storage:)(v149, v210, &type metadata for EmptyView, v150, &protocol witness table for EmptyView);
      sub_10000CCD8(v148, &qword_10008D558);
      (*(void (**)(char *, uint64_t))(v175 + 8))(v174, v178);
      goto LABEL_26;
    }
    if (v106 == v72)
    {
      v112 = v79 >= 3;
    }
    else
    {
      if (v106 != enum case for WidgetFamily.systemLarge(_:))
      {
        v68 = (uint64_t)v207;
        v67 = v208;
        v70 = v205;
        v69 = (uint64_t)v206;
        v107 = v77;
        v109 = v196;
        v108 = v197;
        v110 = v195;
        if (v106 != enum case for WidgetFamily.systemExtraLarge(_:))
        {
          (*(void (**)(char *, char *))(v169 + 8))(v180, v185);
          v111 = v198;
          goto LABEL_25;
        }
        v111 = v198;
        if (v79 >= 8)
          goto LABEL_25;
        goto LABEL_20;
      }
      v112 = v79 >= 6;
    }
    v68 = (uint64_t)v207;
    v67 = v208;
    v70 = v205;
    v69 = (uint64_t)v206;
    v107 = v77;
    v109 = v196;
    v108 = v197;
    v110 = v195;
    v111 = v198;
    if (v112)
      goto LABEL_25;
LABEL_20:
    sub_10000CC94(v107 + *(int *)(v111 + 44), v108, &qword_10008B170);
    sub_10000AF24(v107, v109, type metadata accessor for Note);
    v113 = *(unsigned __int8 *)(v110 + 80);
    v114 = v109;
    v115 = v108;
    v116 = (v113 + 16) & ~v113;
    v117 = swift_allocObject(&unk_100085450, v116 + v181, v113 | 7);
    sub_10000AEE0(v114, v117 + v116, type metadata accessor for Note);
    v118 = type metadata accessor for NotesFolderWidgetView.LargeNoteRow(0);
    v119 = sub_10000C5FC(&qword_10008D5A8, type metadata accessor for NotesFolderWidgetView.LargeNoteRow, (uint64_t)&unk_10006B51C);
    v120 = v176;
    Link.init(destination:content:)(v115, sub_10004E754, v117, v118, v119);
    v121 = v193;
    v122 = v199;
    v123 = v204;
    (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v193, v120, v204);
    swift_storeEnumTagMultiPayload(v121, v191, 1);
    v124 = sub_10000CC08(&qword_10008D580, &qword_10008D560, (uint64_t)&protocol conformance descriptor for Link<A>);
    v125 = sub_10000CC08(&qword_10008D588, &qword_10008D530, (uint64_t)&protocol conformance descriptor for Link<A>);
    v126 = (uint64_t)v194;
    _ConditionalContent<>.init(storage:)(v121, v192, v123, v124, v125);
    sub_10000CC94(v126, v122, &qword_10008D550);
    swift_storeEnumTagMultiPayload(v122, v200, 0);
    v127 = sub_10004E6B0(&qword_10008D578, &qword_10008D550, &qword_10008D580, &qword_10008D560);
    v128 = sub_10004E6B0(&qword_10008D590, &qword_10008D520, &qword_10008D598, &qword_10008D528);
    v129 = (uint64_t)v202;
    _ConditionalContent<>.init(storage:)(v122, v201, v203, v127, v128);
    sub_10000CCD8(v126, &qword_10008D550);
    v130 = v209;
    sub_10000CC94(v129, v209, &qword_10008D558);
    swift_storeEnumTagMultiPayload(v130, v211, 0);
    v131 = sub_10004E604();
    v66 = (uint64_t)v216;
    _ConditionalContent<>.init(storage:)(v130, v210, &type metadata for EmptyView, v131, &protocol witness table for EmptyView);
    sub_10000CCD8(v129, &qword_10008D558);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v176, v204);
LABEL_26:
    v71 = v212;
    goto LABEL_27;
  }
  if (v41 == enum case for WidgetFamily.systemLarge(_:) || v41 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v82 = v197;
    sub_10000CC94(v213 + *(int *)(v198 + 44), v197, &qword_10008B170);
    v83 = v196;
    sub_10000AF24(v77, v196, type metadata accessor for Note);
    v84 = *(unsigned __int8 *)(v195 + 80);
    v85 = (v84 + 16) & ~v84;
    v86 = swift_allocObject(&unk_100085400, v85 + v181, v84 | 7);
    sub_10000AEE0(v83, v86 + v85, type metadata accessor for Note);
    v87 = type metadata accessor for NotesFolderWidgetView.LargeNoteRow(0);
    v88 = sub_10000C5FC(&qword_10008D5A8, type metadata accessor for NotesFolderWidgetView.LargeNoteRow, (uint64_t)&unk_10006B51C);
    v89 = v176;
    Link.init(destination:content:)(v82, sub_10004E754, v86, v87, v88);
    v90 = v177;
    v91 = v172;
    v92 = v204;
    (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v172, v89, v204);
    swift_storeEnumTagMultiPayload(v91, v171, 1);
    v93 = sub_10000CC08(&qword_10008D598, &qword_10008D528, (uint64_t)&protocol conformance descriptor for Link<A>);
    v94 = sub_10000CC08(&qword_10008D588, &qword_10008D530, (uint64_t)&protocol conformance descriptor for Link<A>);
    v95 = (uint64_t)v173;
    _ConditionalContent<>.init(storage:)(v91, v178, v92, v93, v94);
    v96 = v199;
    sub_10000CC94(v95, v199, &qword_10008D520);
    swift_storeEnumTagMultiPayload(v96, v200, 1);
    v97 = sub_10004E6B0(&qword_10008D578, &qword_10008D550, &qword_10008D580, &qword_10008D560);
    v98 = sub_10004E6B0(&qword_10008D590, &qword_10008D520, &qword_10008D598, &qword_10008D528);
    v99 = (uint64_t)v202;
    _ConditionalContent<>.init(storage:)(v96, v201, v203, v97, v98);
    sub_10000CCD8(v95, &qword_10008D520);
    v100 = v209;
    sub_10000CC94(v99, v209, &qword_10008D558);
    swift_storeEnumTagMultiPayload(v100, v211, 0);
    v101 = sub_10004E604();
    v66 = (uint64_t)v216;
    _ConditionalContent<>.init(storage:)(v100, v210, &type metadata for EmptyView, v101, &protocol witness table for EmptyView);
    sub_10000CCD8(v99, &qword_10008D558);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v92);
  }
  else
  {
    v80 = v209;
    swift_storeEnumTagMultiPayload(v209, v211, 1);
    v81 = sub_10004E604();
    v66 = (uint64_t)v216;
    _ConditionalContent<>.init(storage:)(v80, v210, &type metadata for EmptyView, v81, &protocol witness table for EmptyView);
    (*(void (**)(char *, char *))(v169 + 8))(v35, v185);
  }
  v68 = (uint64_t)v207;
  v67 = v208;
  v70 = v205;
  v69 = (uint64_t)v206;
  v71 = v212;
LABEL_27:
  v151 = 1;
  if (!sub_10004515C(v70))
  {
    v152 = v188;
    v153 = Divider.init()();
    v154 = static Edge.Set.leading.getter(v153);
    v155 = v189;
    v156 = (uint64_t)v187;
    v157 = v69;
    v158 = v68;
    v159 = v67;
    v160 = v71;
    v161 = v190;
    (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v187, v152, v190);
    v162 = v156 + *(int *)(v160 + 36);
    *(_BYTE *)v162 = v154;
    *(_OWORD *)(v162 + 8) = 0u;
    *(_OWORD *)(v162 + 24) = 0u;
    *(_BYTE *)(v162 + 40) = 1;
    v163 = *(void (**)(char *, uint64_t))(v155 + 8);
    v66 = (uint64_t)v216;
    v164 = v161;
    v71 = v160;
    v67 = v159;
    v68 = v158;
    v69 = v157;
    v163(v152, v164);
    sub_10000CC50(v156, v157, &qword_10008D508);
    v151 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v215 + 56))(v69, v151, 1, v71);
  v165 = v214;
  sub_10000CC94(v66, v214, &qword_10008D568);
  sub_10000CC94(v69, v68, &qword_10008D510);
  sub_10000CC94(v165, v67, &qword_10008D568);
  v166 = sub_100009F30(&qword_10008D5A0);
  sub_10000CC94(v68, v67 + *(int *)(v166 + 48), &qword_10008D510);
  sub_10000CCD8(v69, &qword_10008D510);
  sub_10000CCD8(v66, &qword_10008D568);
  sub_10000CCD8(v68, &qword_10008D510);
  return sub_10000CCD8(v165, &qword_10008D568);
}

uint64_t sub_100048314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v6 = sub_100009F30(&qword_10008D310);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100009F30(&qword_10008C8E8);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100009F30(&qword_10008B538);
  __chkstk_darwin(v16);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for NotesFolderWidgetView(0);
  sub_10000CC94(a1 + *(int *)(v19 + 28), (uint64_t)v11, &qword_10008C8E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 2, v12))
  {
    v20 = type metadata accessor for NotesFolder(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
  }
  else
  {
    sub_10000CC50((uint64_t)v11, (uint64_t)v15, &qword_10008C8E8);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[*(int *)(v12 + 48)]);
    sub_10000AEE0((uint64_t)v15, (uint64_t)v18, type metadata accessor for NotesFolder);
    v21 = type metadata accessor for NotesFolder(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v18, 0, 1, v21);
  }
  sub_10000AF24(a2, (uint64_t)v8, type metadata accessor for Note);
  v22 = type metadata accessor for Note(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
  *(_QWORD *)a3 = swift_getKeyPath(&unk_10006B340);
  *(_BYTE *)(a3 + 8) = 0;
  v23 = type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0);
  sub_10000CC50((uint64_t)v18, a3 + *(int *)(v23 + 20), &qword_10008B538);
  return sub_10000CC50((uint64_t)v8, a3 + *(int *)(v23 + 24), &qword_10008D310);
}

uint64_t sub_100048578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_100009F30(&qword_10008D310);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AF24(a1, (uint64_t)v6, type metadata accessor for Note);
  v7 = type metadata accessor for Note(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  KeyPath = swift_getKeyPath(&unk_10006B340);
  sub_10000CC50((uint64_t)v6, a2, &qword_10008D310);
  result = type metadata accessor for NotesFolderWidgetView.MediumNoteRow(0);
  v10 = a2 + *(int *)(result + 20);
  *(_QWORD *)v10 = KeyPath;
  *(_BYTE *)(v10 + 8) = 0;
  return result;
}

uint64_t sub_100048650@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char *v12;
  uint64_t v13;

  v4 = sub_100009F30(&qword_10008D310);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AF24(a1, (uint64_t)v6, type metadata accessor for Note);
  v7 = type metadata accessor for Note(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  KeyPath = swift_getKeyPath(&unk_10006B340);
  *a2 = swift_getKeyPath(&unk_10006B368);
  v9 = sub_100009F30(&qword_10008CBD0);
  swift_storeEnumTagMultiPayload(a2, v9, 0);
  v10 = type metadata accessor for NotesFolderWidgetView.LargeNoteRow(0);
  result = sub_10000CC50((uint64_t)v6, (uint64_t)a2 + *(int *)(v10 + 20), &qword_10008D310);
  v12 = (char *)a2 + *(int *)(v10 + 24);
  *(_QWORD *)v12 = KeyPath;
  v12[8] = 0;
  return result;
}

int64x2_t sub_100048768()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4040000000000000uLL);
  xmmword_100099510 = (__int128)result;
  return result;
}

uint64_t *sub_10004877C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  int *v52;
  uint64_t v53;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    sub_10000B2CC(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    v24[8] = v27;
    v28 = a3[7];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = sub_100009F30(&qword_10008C8E8);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 2, v31))
    {
      v33 = sub_100009F30(&qword_10008C8E0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v53 = v32;
      v34 = v30[1];
      *v29 = *v30;
      v29[1] = v34;
      v35 = v30[3];
      v29[2] = v30[2];
      v29[3] = v35;
      *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
      v36 = v30[6];
      v29[5] = v30[5];
      v29[6] = v36;
      v52 = (int *)type metadata accessor for NotesFolder(0);
      v37 = v52[8];
      __dst = (char *)v29 + v37;
      v38 = (char *)v30 + v37;
      v39 = type metadata accessor for URL(0);
      v40 = *(_QWORD *)(v39 - 8);
      v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v36);
      if (v51(v38, 1, v39))
      {
        v41 = sub_100009F30(&qword_10008B170);
        memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(__dst, v38, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
      }
      v42 = v52[9];
      v43 = *(_QWORD *)((char *)v30 + v42);
      *(_QWORD *)((char *)v29 + v42) = v43;
      v44 = v52[10];
      v45 = *(_QWORD *)((char *)v30 + v44);
      *(_QWORD *)((char *)v29 + v44) = v45;
      v46 = *(int *)(v31 + 48);
      v47 = *(_QWORD *)((char *)v30 + v46);
      *(_QWORD *)((char *)v29 + v46) = v47;
      v48 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56);
      swift_retain(v43);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v47);
      v48(v29, 0, 2, v31);
    }
  }
  return a1;
}

double sub_100048A9C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double result;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_10000B470(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v9 = (_QWORD *)((char *)a1 + a2[7]);
  v10 = sub_100009F30(&qword_10008C8E8);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 2, v10))
  {
    swift_bridgeObjectRelease(v9[1]);
    swift_bridgeObjectRelease(v9[3]);
    swift_bridgeObjectRelease(v9[6]);
    v12 = (int *)type metadata accessor for NotesFolder(0);
    v13 = (char *)v9 + v12[8];
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    swift_release(*(_QWORD *)((char *)v9 + v12[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + v12[10]));
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + *(int *)(v10 + 48))).n128_u64[0];
  }
  return result;
}

uint64_t *sub_100048C44(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v51;
  uint64_t v52;

  v6 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10000B2CC(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = (uint64_t *)((char *)a1 + v26);
  v28 = (uint64_t *)((char *)a2 + v26);
  v29 = sub_100009F30(&qword_10008C8E8);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 2, v29))
  {
    v31 = sub_100009F30(&qword_10008C8E0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v52 = v30;
    v32 = v28[1];
    *v27 = *v28;
    v27[1] = v32;
    v33 = v28[3];
    v27[2] = v28[2];
    v27[3] = v33;
    *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
    v34 = v28[6];
    v27[5] = v28[5];
    v27[6] = v34;
    v35 = type metadata accessor for NotesFolder(0);
    v36 = *(int *)(v35 + 32);
    __dst = (char *)v27 + v36;
    v51 = v35;
    v37 = (char *)v28 + v36;
    v38 = type metadata accessor for URL(0);
    v39 = *(_QWORD *)(v38 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    if (v49(v37, 1, v38))
    {
      v40 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(__dst, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
    }
    v41 = *(int *)(v51 + 36);
    v42 = *(_QWORD *)((char *)v28 + v41);
    *(_QWORD *)((char *)v27 + v41) = v42;
    v43 = *(int *)(v51 + 40);
    v44 = *(_QWORD *)((char *)v28 + v43);
    *(_QWORD *)((char *)v27 + v43) = v44;
    v45 = *(int *)(v29 + 48);
    v46 = *(_QWORD *)((char *)v28 + v45);
    *(_QWORD *)((char *)v27 + v45) = v46;
    v47 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56);
    swift_retain(v42);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v46);
    v47(v27, 0, 2, v29);
  }
  return a1;
}

uint64_t *sub_100048F34(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  void *__dst;
  uint64_t v80;
  int *v81;

  if (a1 != a2)
  {
    sub_10000CCD8((uint64_t)a1, &qword_10008CBD0);
    v6 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_10000CCD8((uint64_t)a1 + v12, &qword_10008B260);
    v15 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_10000B2CC(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_10000B470(v26, v27);
  v28 = a3[7];
  v29 = (uint64_t)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = sub_100009F30(&qword_10008C8E8);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 2, v31);
  v35 = v33((uint64_t)v30, 2, v31);
  if (!v34)
  {
    if (v35)
    {
      sub_10000CCD8(v29, &qword_10008C8E8);
      goto LABEL_15;
    }
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v45 = *((_QWORD *)v30 + 1);
    v46 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v29 + 8) = v45;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRelease(v46);
    *(_QWORD *)(v29 + 16) = *((_QWORD *)v30 + 2);
    v47 = *((_QWORD *)v30 + 3);
    v48 = *(_QWORD *)(v29 + 24);
    *(_QWORD *)(v29 + 24) = v47;
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRelease(v48);
    *(_BYTE *)(v29 + 32) = v30[32];
    *(_QWORD *)(v29 + 40) = *((_QWORD *)v30 + 5);
    v49 = *((_QWORD *)v30 + 6);
    v50 = *(_QWORD *)(v29 + 48);
    *(_QWORD *)(v29 + 48) = v49;
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRelease(v50);
    v81 = (int *)type metadata accessor for NotesFolder(0);
    v51 = v81[8];
    v52 = (void *)(v29 + v51);
    v53 = &v30[v51];
    v54 = type metadata accessor for URL(0);
    v55 = *(_QWORD *)(v54 - 8);
    v56 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v55 + 48);
    v57 = v56(v52, 1, v54);
    v58 = v56(v53, 1, v54);
    if (v57)
    {
      if (!v58)
      {
        (*(void (**)(void *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_24:
        v67 = v81[9];
        v68 = *(_QWORD *)&v30[v67];
        v69 = *(_QWORD *)(v29 + v67);
        *(_QWORD *)(v29 + v67) = v68;
        swift_retain(v68);
        swift_release(v69);
        v70 = v81[10];
        v71 = *(_QWORD *)&v30[v70];
        v72 = *(_QWORD *)(v29 + v70);
        *(_QWORD *)(v29 + v70) = v71;
        swift_bridgeObjectRetain(v71);
        swift_bridgeObjectRelease(v72);
        v73 = *(int *)(v31 + 48);
        v74 = *(_QWORD *)&v30[v73];
        v75 = *(_QWORD *)(v29 + v73);
        *(_QWORD *)(v29 + v73) = v74;
        swift_bridgeObjectRetain(v74);
        swift_bridgeObjectRelease(v75);
        return a1;
      }
    }
    else
    {
      if (!v58)
      {
        (*(void (**)(void *, char *, uint64_t))(v55 + 24))(v52, v53, v54);
        goto LABEL_24;
      }
      (*(void (**)(void *, uint64_t))(v55 + 8))(v52, v54);
    }
    v66 = sub_100009F30(&qword_10008B170);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_24;
  }
  if (v35)
  {
LABEL_15:
    v44 = sub_100009F30(&qword_10008C8E0);
    memcpy((void *)v29, v30, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v36 = *((_QWORD *)v30 + 1);
  *(_QWORD *)(v29 + 8) = v36;
  *(_QWORD *)(v29 + 16) = *((_QWORD *)v30 + 2);
  v37 = *((_QWORD *)v30 + 3);
  *(_QWORD *)(v29 + 24) = v37;
  *(_BYTE *)(v29 + 32) = v30[32];
  *(_QWORD *)(v29 + 40) = *((_QWORD *)v30 + 5);
  v38 = *((_QWORD *)v30 + 6);
  *(_QWORD *)(v29 + 48) = v38;
  v39 = type metadata accessor for NotesFolder(0);
  v40 = *(int *)(v39 + 32);
  __dst = (void *)(v29 + v40);
  v80 = v39;
  v41 = &v30[v40];
  v42 = type metadata accessor for URL(0);
  v77 = *(_QWORD *)(v42 - 8);
  v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  if (v78(v41, 1, v42))
  {
    v43 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v77 + 16))(__dst, v41, v42);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(__dst, 0, 1, v42);
  }
  v59 = *(int *)(v80 + 36);
  v60 = *(_QWORD *)&v30[v59];
  *(_QWORD *)(v29 + v59) = v60;
  v61 = *(int *)(v80 + 40);
  v62 = *(_QWORD *)&v30[v61];
  *(_QWORD *)(v29 + v61) = v62;
  v63 = *(int *)(v31 + 48);
  v64 = *(_QWORD *)&v30[v63];
  *(_QWORD *)(v29 + v63) = v64;
  v65 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56);
  swift_retain(v60);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v64);
  v65(v29, 0, 2, v31);
  return a1;
}

char *sub_100049434(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  v19 = sub_100009F30(&qword_10008C8E8);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 2, v19))
  {
    v21 = sub_100009F30(&qword_10008C8E0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v22;
    v17[32] = v18[32];
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
    v23 = (int *)type metadata accessor for NotesFolder(0);
    v24 = v23[8];
    v25 = &v17[v24];
    v26 = &v18[v24];
    v27 = type metadata accessor for URL(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = sub_100009F30(&qword_10008B170);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    *(_QWORD *)&v17[v23[9]] = *(_QWORD *)&v18[v23[9]];
    *(_QWORD *)&v17[v23[10]] = *(_QWORD *)&v18[v23[10]];
    *(_QWORD *)&v17[*(int *)(v19 + 48)] = *(_QWORD *)&v18[*(int *)(v19 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 2, v19);
  }
  return a1;
}

char *sub_1000496B8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  int v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v58;

  if (a1 != a2)
  {
    sub_10000CCD8((uint64_t)a1, &qword_10008CBD0);
    v6 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_10000CCD8((uint64_t)&a1[v8], &qword_10008B260);
    v11 = sub_100009F30(&qword_10008B260);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_10000B470(v17, v18);
  v19 = a3[7];
  v20 = (uint64_t)&a1[v19];
  v21 = &a2[v19];
  v22 = sub_100009F30(&qword_10008C8E8);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 2, v22);
  v26 = v24((uint64_t)v21, 2, v22);
  if (!v25)
  {
    if (v26)
    {
      sub_10000CCD8(v20, &qword_10008C8E8);
      goto LABEL_14;
    }
    v36 = *((_QWORD *)v21 + 1);
    v37 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = v36;
    swift_bridgeObjectRelease(v37);
    v38 = *((_QWORD *)v21 + 3);
    v39 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
    *(_QWORD *)(v20 + 24) = v38;
    swift_bridgeObjectRelease(v39);
    *(_BYTE *)(v20 + 32) = v21[32];
    v40 = *((_QWORD *)v21 + 6);
    v41 = *(_QWORD *)(v20 + 48);
    *(_QWORD *)(v20 + 40) = *((_QWORD *)v21 + 5);
    *(_QWORD *)(v20 + 48) = v40;
    swift_bridgeObjectRelease(v41);
    v58 = (int *)type metadata accessor for NotesFolder(0);
    v42 = v58[8];
    v43 = (void *)(v20 + v42);
    v44 = &v21[v42];
    v45 = type metadata accessor for URL(0);
    v46 = *(_QWORD *)(v45 - 8);
    v47 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v46 + 48);
    v48 = v47(v43, 1, v45);
    v49 = v47(v44, 1, v45);
    if (v48)
    {
      if (!v49)
      {
        (*(void (**)(void *, char *, uint64_t))(v46 + 32))(v43, v44, v45);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_23:
        v51 = v58[9];
        v52 = *(_QWORD *)(v20 + v51);
        *(_QWORD *)(v20 + v51) = *(_QWORD *)&v21[v51];
        swift_release(v52);
        v53 = v58[10];
        v54 = *(_QWORD *)(v20 + v53);
        *(_QWORD *)(v20 + v53) = *(_QWORD *)&v21[v53];
        swift_bridgeObjectRelease(v54);
        v55 = *(int *)(v22 + 48);
        v56 = *(_QWORD *)(v20 + v55);
        *(_QWORD *)(v20 + v55) = *(_QWORD *)&v21[v55];
        swift_bridgeObjectRelease(v56);
        return a1;
      }
    }
    else
    {
      if (!v49)
      {
        (*(void (**)(void *, char *, uint64_t))(v46 + 40))(v43, v44, v45);
        goto LABEL_23;
      }
      (*(void (**)(void *, uint64_t))(v46 + 8))(v43, v45);
    }
    v50 = sub_100009F30(&qword_10008B170);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_23;
  }
  if (v26)
  {
LABEL_14:
    v35 = sub_100009F30(&qword_10008C8E0);
    memcpy((void *)v20, v21, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  v27 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v27;
  *(_BYTE *)(v20 + 32) = v21[32];
  *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
  v28 = (int *)type metadata accessor for NotesFolder(0);
  v29 = v28[8];
  v30 = (void *)(v20 + v29);
  v31 = &v21[v29];
  v32 = type metadata accessor for URL(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_100009F30(&qword_10008B170);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  *(_QWORD *)(v20 + v28[9]) = *(_QWORD *)&v21[v28[9]];
  *(_QWORD *)(v20 + v28[10]) = *(_QWORD *)&v21[v28[10]];
  *(_QWORD *)(v20 + *(int *)(v22 + 48)) = *(_QWORD *)&v21[*(int *)(v22 + 48)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, v22);
  return a1;
}

uint64_t sub_100049AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100049B04);
}

uint64_t sub_100049B04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = sub_100009F30(&qword_10008CED8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_100009F30(&qword_10008B270);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v11 = sub_100009F30(&qword_10008C8E0);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[6] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100049BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049BE4);
}

uint64_t sub_100049BE4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100009F30(&qword_10008CED8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_100009F30(&qword_10008B270);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        return result;
      }
      v10 = sub_100009F30(&qword_10008C8E0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NotesFolderWidgetView(uint64_t a1)
{
  return sub_10000AD34(a1, qword_10008D388, (uint64_t)&nominal type descriptor for NotesFolderWidgetView);
}

void sub_100049CCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_10000C2F0(319, (unint64_t *)&unk_10008CF48, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000C2F0(319, (unint64_t *)&unk_10008B2E8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      sub_100029D58(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100049DA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F870, 1);
}

uint64_t sub_100049DB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[2];
  uint64_t v92;

  v90 = a1;
  v87 = type metadata accessor for ColorScheme(0);
  v84 = *(_QWORD *)(v87 - 8);
  v2 = __chkstk_darwin(v87);
  v83 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v81 = (uint64_t)&v73 - v4;
  v5 = type metadata accessor for BlendMode(0);
  v88 = *(_QWORD *)(v5 - 8);
  v89 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100009F30(&qword_10008DB90);
  __chkstk_darwin(v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100009F30(&qword_10008DB98);
  __chkstk_darwin(v80);
  v86 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v76);
  v12 = (_OWORD *)((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Image.ResizingMode(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v75 = sub_100009F30(&qword_10008DBA0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100009F30(&qword_10008DBA8);
  __chkstk_darwin(v19);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100009F30(&qword_10008DBB0);
  __chkstk_darwin(v22);
  v79 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100009F30(&qword_10008DBB8);
  __chkstk_darwin(v77);
  v78 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(int *)(type metadata accessor for NotesFolderWidgetView.Thumbnail(0) + 20);
  v82 = v1;
  v26 = *(_QWORD *)(v1 + v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for Image.ResizingMode.stretch(_:), v13);
  v27 = Image.resizable(capInsets:resizingMode:)(v16, v26, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  Image.squareCrop()(v27);
  v28 = swift_release(v27);
  if (qword_10008B140 != -1)
    v28 = swift_once(&qword_10008B140, sub_100048768);
  v29 = *((double *)&xmmword_100099510 + 1);
  v30 = static Alignment.center.getter(v28);
  v32 = sub_1000598EC(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v21, 0.0, 1, v29, 0, v30, v31);
  (*(void (**)(char *, _QWORD, double))(v74 + 8))(v18, v75, v32);
  v33 = v76;
  v34 = (char *)v12 + *(int *)(v76 + 20);
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104);
  v37(v34, v35, v36);
  __asm { FMOV            V0.2D, #5.0 }
  v75 = _Q0;
  *v12 = _Q0;
  v43 = *(int *)(v22 + 36);
  v44 = (uint64_t)v79;
  v45 = &v79[v43];
  sub_10000AF24((uint64_t)v12, (uint64_t)&v79[v43], (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v45[*(int *)(sub_100009F30(&qword_10008DBC0) + 36)] = 256;
  sub_10000CC94((uint64_t)v21, v44, &qword_10008DBA8);
  sub_10000AF68((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_10000CCD8((uint64_t)v21, &qword_10008DBA8);
  v46 = ((uint64_t (*)(char *, uint64_t, uint64_t))v37)((char *)v12 + *(int *)(v33 + 20), v35, v36);
  *v12 = v75;
  v47 = static Color.quaternary.getter(v46);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v91, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  sub_10000AF24((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v48 = &v9[*(int *)(sub_100009F30(&qword_10008DBC8) + 36)];
  v49 = v91[1];
  *(_OWORD *)v48 = v91[0];
  *((_OWORD *)v48 + 1) = v49;
  *((_QWORD *)v48 + 4) = v92;
  v50 = sub_100009F30(&qword_10008DBD0);
  *(_QWORD *)&v9[*(int *)(v50 + 52)] = v47;
  *(_WORD *)&v9[*(int *)(v50 + 56)] = 256;
  v51 = static Alignment.center.getter(v50);
  v53 = v52;
  v54 = (uint64_t *)&v9[*(int *)(sub_100009F30(&qword_10008DBD8) + 36)];
  *v54 = v51;
  v54[1] = v53;
  sub_10000AF68((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v55 = v81;
  sub_100033780(v81);
  v57 = v83;
  v56 = v84;
  v58 = v87;
  (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v83, enum case for ColorScheme.light(_:), v87);
  LOBYTE(v34) = static ColorScheme.== infix(_:_:)(v55, v57);
  v59 = *(void (**)(char *, uint64_t))(v56 + 8);
  v59(v57, v58);
  v59((char *)v55, v58);
  v60 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
  v62 = v88;
  v61 = v89;
  if ((v34 & 1) == 0)
    v60 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
  v63 = v85;
  (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v85, *v60, v89);
  v64 = (uint64_t)v86;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(&v86[*(int *)(v80 + 36)], v63, v61);
  sub_10000CC94((uint64_t)v9, v64, &qword_10008DB90);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v61);
  v65 = sub_10000CCD8((uint64_t)v9, &qword_10008DB90);
  v66 = static Alignment.center.getter(v65);
  v68 = v67;
  v69 = (uint64_t)v78;
  v70 = (uint64_t)&v78[*(int *)(v77 + 36)];
  sub_10000CC94(v64, v70, &qword_10008DB98);
  v71 = (uint64_t *)(v70 + *(int *)(sub_100009F30(&qword_10008DBE0) + 36));
  *v71 = v66;
  v71[1] = v68;
  sub_10000CC94(v44, v69, &qword_10008DBB0);
  sub_10000CCD8(v64, &qword_10008DB98);
  sub_10000CCD8(v44, &qword_10008DBB0);
  return sub_10000CC50(v69, v90, &qword_10008DBB8);
}

uint64_t sub_10004A488@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  __n128 v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  __n128 v38;
  char v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v49;
  int v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[18];
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _OWORD v75[19];

  v66 = a1;
  v2 = type metadata accessor for ContentSizeCategory(0);
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008DA78);
  v64 = *(_QWORD *)(v5 - 8);
  v65 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = static HorizontalAlignment.leading.getter(v6);
  sub_10004A824(v1, (uint64_t)v75);
  v50 = BYTE8(v75[1]);
  v55 = *(_QWORD *)&v75[2];
  v56 = *(_QWORD *)&v75[1];
  v54 = *((_QWORD *)&v75[2] + 1);
  v9 = v75[3];
  v60 = *((_QWORD *)&v75[4] + 1);
  v10 = v75[5];
  v59 = *(_OWORD *)((char *)&v75[5] + 8);
  v57 = *(_QWORD *)&v75[7];
  v58 = *((_QWORD *)&v75[6] + 1);
  v51 = v75[0];
  v52 = *(_OWORD *)((char *)&v75[3] + 8);
  v53 = static Edge.Set.horizontal.getter(*((double *)&v75[3] + 1));
  v11 = *(_QWORD *)v1;
  v12 = *(_BYTE *)(v1 + 8);
  sub_10000B2CC(*(_QWORD *)v1, v12);
  v13 = sub_1000337B0(v11, v12);
  v14 = sub_10000B470(v11, v12);
  if ((v13 & 1) != 0)
    v15.n128_f64[0] = 16.0;
  else
    v15.n128_f64[0] = 0.0;
  v49 = EdgeInsets.init(_all:)(v14, v15);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = static Edge.Set.bottom.getter(v22);
  sub_10000B2CC(v11, v12);
  v24 = sub_1000337B0(v11, v12);
  v25 = sub_10000B470(v11, v12);
  if ((v24 & 1) != 0)
    v26.n128_f64[0] = 16.0;
  else
    v26.n128_f64[0] = 0.0;
  v27 = EdgeInsets.init(_all:)(v25, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = static Edge.Set.top.getter(v34);
  sub_10000B2CC(v11, v12);
  v36 = sub_1000337B0(v11, v12);
  v37 = sub_10000B470(v11, v12);
  v38.n128_u64[0] = 14.0;
  if ((v36 & 1) == 0)
    v38.n128_f64[0] = 0.0;
  v71 = 0;
  v70 = v50;
  v69 = v9;
  v68 = v10;
  v39 = v50;
  v72 = 0;
  v73 = 0;
  v40 = EdgeInsets.init(_all:)(v37, v38);
  v74 = 0;
  v67[0] = (unint64_t)v61;
  LOBYTE(v67[1]) = 0;
  *(_OWORD *)((char *)&v67[1] + 8) = v51;
  *((_QWORD *)&v67[2] + 1) = v56;
  LOBYTE(v67[3]) = v39;
  *((_QWORD *)&v67[3] + 1) = v55;
  *(_QWORD *)&v67[4] = v54;
  BYTE8(v67[4]) = v9;
  v67[5] = v52;
  *(_QWORD *)&v67[6] = v60;
  BYTE8(v67[6]) = v10;
  v67[7] = v59;
  *(_QWORD *)&v67[8] = v58;
  *((_QWORD *)&v67[8] + 1) = v57;
  LOBYTE(v67[9]) = v53;
  *((double *)&v67[9] + 1) = v49;
  *(_QWORD *)&v67[10] = v17;
  *((_QWORD *)&v67[10] + 1) = v19;
  *(_QWORD *)&v67[11] = v21;
  BYTE8(v67[11]) = 0;
  LOBYTE(v67[12]) = v23;
  *((double *)&v67[12] + 1) = v27;
  *(_QWORD *)&v67[13] = v29;
  *((_QWORD *)&v67[13] + 1) = v31;
  *(_QWORD *)&v67[14] = v33;
  BYTE8(v67[14]) = v73;
  LOBYTE(v67[15]) = v35;
  *((double *)&v67[15] + 1) = v40;
  *(_QWORD *)&v67[16] = v41;
  *((_QWORD *)&v67[16] + 1) = v42;
  *(_QWORD *)&v67[17] = v43;
  BYTE8(v67[17]) = 0;
  v45 = v62;
  v44 = v63;
  (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v4, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v63);
  v46 = sub_100009F30(&qword_10008DA80);
  v47 = sub_100028918(&qword_10008DA88, &qword_10008DA80, (void (*)(void))sub_100053E4C);
  View.maximumSizeCategory(_:)(v4, v46, v47);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v4, v44);
  memcpy(v75, v67, 0x119uLL);
  sub_100053EF4(v75);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v64 + 32))(v66, v8, v65);
}

__n128 sub_10004A824@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;

  v4 = type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AF24(a1, (uint64_t)v7, type metadata accessor for NotesFolderWidgetView.SmallNoteRow);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1000854F0, v9 + v6, v8 | 7);
  v11 = sub_10000AEE0((uint64_t)v7, v10 + v9, type metadata accessor for NotesFolderWidgetView.SmallNoteRow);
  v12 = static VerticalAlignment.center.getter(v11);
  sub_10004B7B0(a1, (uint64_t)&v19);
  v13 = v20;
  v14 = v21;
  v15 = v22;
  v16 = v24;
  result = v23;
  v18 = v19;
  *(_QWORD *)a2 = sub_10005414C;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = 0x4000000000000000;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 56) = v18;
  *(_QWORD *)(a2 + 72) = v13;
  *(_BYTE *)(a2 + 80) = v14;
  *(_QWORD *)(a2 + 88) = v15;
  *(__n128 *)(a2 + 96) = result;
  *(_QWORD *)(a2 + 112) = v16;
  return result;
}

uint64_t sub_10004A940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a3 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a3 + 8) = 0x4000000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  v6 = sub_100009F30(&qword_10008DAC0);
  return sub_10004A99C(a2, a1, (char *)(a3 + *(int *)(v6 + 44)));
}

uint64_t sub_10004A99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)@<X0>(uint64_t@<X8>);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t KeyPath;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (**v98)@<X0>(uint64_t@<X8>);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (**v109)@<X0>(uint64_t@<X8>);
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t (**v149)@<X0>(uint64_t@<X8>);
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(char *, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;

  v128 = a2;
  v150 = a3;
  v155 = type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0);
  v130 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v132 = v4;
  v135 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for GeometryProxy(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v127 = v5;
  v131 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100009F30(&qword_10008DAC8);
  __chkstk_darwin(v145);
  v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v126 = type metadata accessor for PlaceholderText(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v141 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100009F30(&qword_10008CC38);
  v9 = __chkstk_darwin(v147);
  v124 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v129 = (uint64_t)&v120 - v11;
  v12 = type metadata accessor for Note(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v123 = (uint64_t)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = v15;
  __chkstk_darwin(v14);
  v142 = (uint64_t)&v120 - v16;
  v17 = sub_100009F30(&qword_10008DAD0);
  v18 = __chkstk_darwin(v17);
  v148 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v146 = (char *)&v120 - v20;
  v21 = sub_100009F30(&qword_10008D310);
  v22 = __chkstk_darwin(v21);
  v140 = (char *)&v120 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v120 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v120 - v27;
  v137 = sub_100009F30(&qword_10008CC48);
  v29 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v31 = (char *)&v120 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100009F30(&qword_10008CC50);
  __chkstk_darwin(v136);
  v33 = (char *)&v120 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100009F30(&qword_10008CC58);
  __chkstk_darwin(v139);
  v35 = (char *)&v120 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100009F30(&qword_10008CC60);
  v152 = *(_QWORD *)(v144 - 8);
  v36 = __chkstk_darwin(v144);
  v143 = (char *)&v120 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v138 = (char *)&v120 - v39;
  __chkstk_darwin(v38);
  v151 = (char *)&v120 - v40;
  v153 = a1 + *(int *)(v155 + 24);
  sub_10000CC94(v153, (uint64_t)v28, &qword_10008D310);
  v121 = v13;
  v154 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v155 = v12;
  v41 = v154(v28, 1, v12);
  v149 = v7;
  if (v41 == 1)
  {
    v42 = sub_10000CCD8((uint64_t)v28, &qword_10008D310);
    v43 = static String.placeholder.getter(v42);
    v45 = v44;
  }
  else
  {
    v43 = *((_QWORD *)v28 + 2);
    v45 = *((_QWORD *)v28 + 3);
    swift_bridgeObjectRetain(v45);
    sub_10000AF68((uint64_t)v28, type metadata accessor for Note);
  }
  sub_10000CC94(v153, (uint64_t)v26, &qword_10008D310);
  v46 = v154(v26, 1, v155) == 1;
  sub_10000CCD8((uint64_t)v26, &qword_10008D310);
  v47 = Text.placeholder(_:scale:)(v46, v43, v45, 0, _swiftEmptyArrayStorage, 1.0);
  swift_bridgeObjectRelease(v45);
  v48 = *(_QWORD *)a1;
  v49 = *(_BYTE *)(a1 + 8);
  sub_10000B2CC(*(_QWORD *)a1, v49);
  v50 = sub_1000337B0(v48, v49);
  sub_10000B470(v48, v49);
  if ((v50 & 1) != 0)
    v51 = 3;
  else
    v51 = 10;
  KeyPath = swift_getKeyPath(&unk_10006B3C8);
  v156 = v47;
  v157 = KeyPath;
  v158 = v51;
  v159 = 0;
  v53 = sub_100009F30(&qword_10008CC70);
  v54 = sub_100034960((unint64_t *)&qword_10008CC78, &qword_10008CC70);
  View.hyphenationFactor(_:)(v53, v54, 0.1);
  swift_release(KeyPath);
  swift_release(v47);
  v55 = *(_QWORD *)a1;
  v56 = *(_BYTE *)(a1 + 8);
  sub_10000B2CC(*(_QWORD *)a1, v56);
  LOBYTE(KeyPath) = sub_1000337B0(v55, v56);
  v57 = sub_10000B470(v55, v56);
  if ((KeyPath & 1) != 0)
    v58 = static Color.primary.getter(v57);
  else
    v58 = static Color.white.getter(v57);
  v59 = v58;
  v60 = v151;
  v61 = v139;
  v62 = v137;
  v63 = v136;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v33, v31, v137);
  *(_QWORD *)&v33[*(int *)(v63 + 36)] = v59;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v62);
  sub_10000CC94((uint64_t)v33, (uint64_t)v35, &qword_10008CC50);
  *(_QWORD *)&v35[*(int *)(v61 + 36)] = 0x3FF0000000000000;
  sub_10000CCD8((uint64_t)v33, &qword_10008CC50);
  v64 = *(_QWORD *)a1;
  LOBYTE(v62) = *(_BYTE *)(a1 + 8);
  sub_10000B2CC(*(_QWORD *)a1, v62);
  v65 = sub_1000337B0(v64, v62);
  v66 = sub_10000B470(v64, v62);
  if ((v65 & 1) != 0)
    static Font.Weight.regular.getter(v66);
  else
    v67 = static Font.Weight.semibold.getter(v66);
  v68 = v144;
  v69 = v152;
  v70 = (uint64_t)v140;
  v71 = v138;
  v72 = v67;
  v73 = sub_10003442C();
  View.fontWeight(_:)(*(_QWORD *)&v72, 0, v61, v73);
  sub_10000CCD8((uint64_t)v35, &qword_10008CC58);
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v60, v71, v68);
  sub_10000CC94(v153, v70, &qword_10008D310);
  if (v154((char *)v70, 1, v155) == 1)
  {
    v74 = sub_10000CCD8(v70, &qword_10008D310);
    PlaceholderText.init(scale:)(v74, 1.0);
    v75 = *(_QWORD *)a1;
    v76 = *(_BYTE *)(a1 + 8);
    sub_10000B2CC(v75, v76);
    v77 = sub_1000337B0(v75, v76);
    v78 = sub_10000B470(v75, v76);
    v79 = v150;
    v80 = (uint64_t)v146;
    if ((v77 & 1) != 0)
      v81 = static Color.primary.getter(v78);
    else
      v81 = static Color.white.getter(v78);
    v102 = v81;
    v103 = v125;
    v104 = (uint64_t)v124;
    v105 = v141;
    v106 = v126;
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v124, v141, v126);
    v107 = v147;
    *(_QWORD *)(v104 + *(int *)(v147 + 36)) = v102;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v106);
    v108 = v129;
    sub_10000CC50(v104, v129, &qword_10008CC38);
    v109 = v149;
    sub_10000CC94(v108, (uint64_t)v149, &qword_10008CC38);
    swift_storeEnumTagMultiPayload(v109, v145, 1);
    v110 = sub_100009F30(&qword_10008DAD8);
    v111 = sub_10000CC08(&qword_10008DAE0, &qword_10008DAD8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v112 = sub_10003457C();
    _ConditionalContent<>.init(storage:)(v109, v110, v107, v111, v112);
    v113 = v108;
    v96 = v152;
    sub_10000CCD8(v113, &qword_10008CC38);
  }
  else
  {
    v82 = v142;
    sub_10000AEE0(v70, v142, type metadata accessor for Note);
    v83 = v133;
    v84 = v131;
    v85 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v131, v128, v134);
    v86 = v135;
    sub_10000AF24(a1, v135, type metadata accessor for NotesFolderWidgetView.SmallNoteRow);
    v87 = v123;
    sub_10000AF24(v82, v123, type metadata accessor for Note);
    v88 = *(unsigned __int8 *)(v83 + 80);
    v89 = (v88 + 16) & ~v88;
    v90 = *(unsigned __int8 *)(v130 + 80);
    v91 = (v127 + v90 + v89) & ~v90;
    v92 = *(unsigned __int8 *)(v121 + 80);
    v93 = (v132 + v92 + v91) & ~v92;
    v94 = swift_allocObject(&unk_100085518, v93 + v122, v88 | v90 | v92 | 7);
    v95 = v84;
    v96 = v152;
    (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v94 + v89, v95, v85);
    v97 = v86;
    v60 = v151;
    sub_10000AEE0(v97, v94 + v91, type metadata accessor for NotesFolderWidgetView.SmallNoteRow);
    sub_10000AEE0(v87, v94 + v93, type metadata accessor for Note);
    v98 = v149;
    *v149 = sub_1000544CC;
    v98[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v94;
    swift_storeEnumTagMultiPayload(v98, v145, 0);
    v99 = sub_100009F30(&qword_10008DAD8);
    v100 = sub_10000CC08(&qword_10008DAE0, &qword_10008DAD8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    v101 = sub_10003457C();
    v80 = (uint64_t)v146;
    _ConditionalContent<>.init(storage:)(v98, v99, v147, v100, v101);
    sub_10000AF68(v142, type metadata accessor for Note);
    v79 = v150;
  }
  v114 = (uint64_t)v148;
  v115 = v143;
  v116 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v116(v143, v60, v68);
  sub_10000CC94(v80, v114, &qword_10008DAD0);
  v116(v79, v115, v68);
  v117 = sub_100009F30(&qword_10008DAE8);
  sub_10000CC94(v114, (uint64_t)&v79[*(int *)(v117 + 48)], &qword_10008DAD0);
  sub_10000CCD8(v80, &qword_10008DAD0);
  v118 = *(void (**)(char *, uint64_t))(v96 + 8);
  v118(v60, v68);
  sub_10000CCD8(v114, &qword_10008DAD0);
  return ((uint64_t (*)(char *, uint64_t))v118)(v115, v68);
}

uint64_t sub_10004B4D4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;
  char v23;
  double v24;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  id *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v39 = sub_100009F30(&qword_10008CCD8);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F30(&qword_10008DAF0);
  v40 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v38 - v14;
  v16 = GeometryProxy.size.getter(v13);
  v18 = v17;
  GeometryProxy.size.getter(v16);
  v20 = v19;
  v21 = *(_QWORD *)a1;
  v22 = *(_BYTE *)(a1 + 8);
  sub_10000B2CC(v21, v22);
  v23 = sub_1000337B0(v21, v22);
  sub_10000B470(v21, v22);
  v24 = 10.0;
  if ((v23 & 1) != 0)
    v24 = 3.0;
  if (v20 / v24 > v18)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(a3, 1, 1, v9);
  v38 = a3;
  v26 = *(_QWORD *)(a2 + 32);
  v27 = *(_QWORD *)(a2 + 40);
  sub_10000B2CC(v21, v22);
  swift_bridgeObjectRetain(v27);
  v28 = sub_1000337B0(v21, v22);
  sub_10000B470(v21, v22);
  if ((v28 & 1) != 0)
    v29 = 2;
  else
    v29 = 9;
  KeyPath = swift_getKeyPath(&unk_10006B3C8);
  v41 = v26;
  v42 = v27;
  v43 = 0;
  v44 = _swiftEmptyArrayStorage;
  v45 = KeyPath;
  v46 = v29;
  v47 = 0;
  v31 = sub_100009F30(&qword_10008CCE8);
  v32 = sub_100034960(&qword_10008CCF0, &qword_10008CCE8);
  View.hyphenationFactor(_:)(v31, v32, 0.1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v27);
  v35 = static HierarchicalShapeStyle.secondary.getter(v33, v34);
  v36 = v39;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v8, v39);
  *(_DWORD *)&v12[*(int *)(v9 + 36)] = v35;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v36);
  sub_10000CC50((uint64_t)v12, (uint64_t)v15, &qword_10008DAF0);
  v37 = v38;
  sub_10000CC50((uint64_t)v15, v38, &qword_10008DAF0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v9);
}

void sub_10004B7B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD v55[2];

  v4 = sub_100009F30(&qword_10008B538);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for NotesFolder(0);
  v50 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v54 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008D310);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v48 - v12;
  v49 = type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0);
  v14 = *(int *)(v49 + 24);
  v51 = a1;
  v15 = a1 + v14;
  sub_10000CC94(a1 + v14, (uint64_t)v13, &qword_10008D310);
  v16 = type metadata accessor for Note(0);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48);
  v18 = v17(v13, 1, v16);
  v53 = v6;
  if (v18 == 1)
  {
    v19 = sub_10000CCD8((uint64_t)v13, &qword_10008D310);
    v20 = static String.placeholder.getter(v19);
    v22 = v21;
  }
  else
  {
    v20 = *((_QWORD *)v13 + 6);
    v22 = *((_QWORD *)v13 + 7);
    swift_bridgeObjectRetain(v22);
    sub_10000AF68((uint64_t)v13, type metadata accessor for Note);
  }
  v55[0] = v20;
  v55[1] = v22;
  v23 = sub_100053D80();
  v24 = Text.init<A>(_:)(v55, &type metadata for String, v23);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  sub_10000CC94(v15, (uint64_t)v11, &qword_10008D310);
  v31 = v17(v11, 1, v16) == 1;
  sub_10000CCD8((uint64_t)v11, &qword_10008D310);
  v32 = Text.placeholder(_:scale:)(v31, v24, v26, v30, v28, 0.5);
  sub_10000AFA4(v24, v26, v30);
  swift_bridgeObjectRelease(v28);
  KeyPath = swift_getKeyPath(&unk_10006B3C8);
  v34 = v51;
  v35 = *(_QWORD *)v51;
  v36 = *(_BYTE *)(v51 + 8);
  sub_10000B2CC(*(_QWORD *)v51, v36);
  LOBYTE(v24) = sub_1000337B0(v35, v36);
  v37 = sub_10000B470(v35, v36);
  if ((v24 & 1) != 0)
  {
    v38 = static Color.secondary.getter(v37);
    v40 = v52;
    v39 = (uint64_t)v53;
  }
  else
  {
    sub_10000B2CC(v35, v36);
    v41 = sub_1000337B0(v35, v36);
    v42 = sub_10000B470(v35, v36);
    v40 = v52;
    v39 = (uint64_t)v53;
    if ((v41 & 1) != 0)
      v43 = static Color.primary.getter(v42);
    else
      v43 = static Color.white.getter(v42);
    v38 = v43;
  }
  sub_10000CC94(v34 + *(int *)(v49 + 20), v39, &qword_10008B538);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v39, 1, v40);
  v45 = v54;
  if (v44 == 1)
  {
    sub_10000CCD8(v39, &qword_10008B538);
LABEL_15:
    v47 = 0;
    v46 = 0;
    goto LABEL_16;
  }
  sub_10000AEE0(v39, v54, type metadata accessor for NotesFolder);
  if (*(_BYTE *)(v45 + 32) != 1)
  {
    sub_10000AF68(v45, type metadata accessor for NotesFolder);
    goto LABEL_15;
  }
  v46 = *(_QWORD *)(v45 + *(int *)(v40 + 40));
  swift_bridgeObjectRetain_n(v46, 2);
  sub_10000AF68(v45, type metadata accessor for NotesFolder);
  swift_bridgeObjectRelease(v46);
  v47 = 0x4020000000000000;
LABEL_16:
  *(_QWORD *)a2 = v32;
  *(_QWORD *)(a2 + 8) = KeyPath;
  *(_QWORD *)(a2 + 16) = 1;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v38;
  *(_QWORD *)(a2 + 40) = v47;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v46;
}

uint64_t sub_10004BB70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __n128 v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v39 = a1;
  v38 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008DA38);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F30(&qword_10008DA40);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100009F30(&qword_10008DA48);
  v36 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v13);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v16 = sub_100009F30(&qword_10008DA50);
  sub_10004BDEC(v2, (uint64_t)&v8[*(int *)(v16 + 44)]);
  v18 = static Edge.Set.horizontal.getter(v17);
  v19 = v2 + *(int *)(type metadata accessor for NotesFolderWidgetView.MediumNoteRow(0) + 20);
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 8);
  sub_10000B2CC(*(_QWORD *)v19, v21);
  v22 = sub_1000337B0(v20, v21);
  v23 = sub_10000B470(v20, v21);
  v24.n128_u64[0] = 0;
  if ((v22 & 1) != 0)
    v24.n128_f64[0] = 16.0;
  v25 = EdgeInsets.init(_all:)(v23, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_10000CC94((uint64_t)v8, (uint64_t)v11, &qword_10008DA38);
  v32 = &v11[*(int *)(v9 + 36)];
  *v32 = v18;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  sub_10000CCD8((uint64_t)v8, &qword_10008DA38);
  v33 = v38;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ContentSizeCategory.accessibilityMedium(_:), v38);
  v34 = sub_100053CFC();
  View.maximumSizeCategory(_:)(v5, v9, v34);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v33);
  sub_10000CCD8((uint64_t)v11, &qword_10008DA40);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v39, v15, v37);
}

uint64_t *sub_10004BDEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __n128 v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  _OWORD v95[9];
  uint64_t v96;
  _OWORD v97[9];
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;

  v84 = type metadata accessor for NotesFolderWidgetView.Thumbnail(0);
  __chkstk_darwin(v84);
  v86 = (uint64_t *)((char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100009F30(&qword_10008D990);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v87 = (uint64_t)&v83 - v9;
  v10 = sub_100009F30(&qword_10008D998);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v83 - v14;
  v16 = sub_100009F30(&qword_10008D310);
  v17 = __chkstk_darwin(v16);
  v89 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v83 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v83 - v22;
  v94 = a1;
  sub_10000CC94(a1, (uint64_t)&v83 - v22, &qword_10008D310);
  v24 = type metadata accessor for Note(0);
  v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48);
  v25 = v93(v23, 1, v24);
  v91 = v15;
  v92 = v13;
  v88 = v8;
  v85 = v5;
  v90 = a2;
  if (v25 == 1)
  {
    v26 = sub_10000CCD8((uint64_t)v23, &qword_10008D310);
    v27 = static String.placeholder.getter(v26);
    v29 = v28;
  }
  else
  {
    v27 = *((_QWORD *)v23 + 2);
    v29 = *((_QWORD *)v23 + 3);
    swift_bridgeObjectRetain(v29);
    sub_10000AF68((uint64_t)v23, type metadata accessor for Note);
  }
  *(_QWORD *)&v99 = v27;
  *((_QWORD *)&v99 + 1) = v29;
  v30 = sub_100053D80();
  v31 = Text.init<A>(_:)(&v99, &type metadata for String, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = v94;
  sub_10000CC94(v94, (uint64_t)v21, &qword_10008D310);
  v39 = v93(v21, 1, v24) == 1;
  sub_10000CCD8((uint64_t)v21, &qword_10008D310);
  v40 = Text.placeholder(_:scale:)(v39, v31, v33, v37, v35, 1.0);
  sub_10000AFA4(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  v41 = v38 + *(int *)(type metadata accessor for NotesFolderWidgetView.MediumNoteRow(0) + 20);
  v42 = *(_QWORD *)v41;
  LOBYTE(v35) = *(_BYTE *)(v41 + 8);
  sub_10000B2CC(*(_QWORD *)v41, v35);
  LOBYTE(v31) = sub_1000337B0(v42, v35);
  v43 = sub_10000B470(v42, v35);
  if ((v31 & 1) != 0)
    v44 = static Color.primary.getter(v43);
  else
    v44 = static Color.white.getter(v43);
  v45 = v44;
  v47 = (uint64_t)v89;
  v46 = v90;
  KeyPath = swift_getKeyPath(&unk_10006B3C8);
  v109 = v40;
  v110 = v45;
  v111 = KeyPath;
  v112 = 1;
  v113 = 0;
  v49 = static Alignment.leading.getter(KeyPath);
  sub_100059B20(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v99, 0.0, 1, INFINITY, 0, v49, v50);
  swift_release(KeyPath);
  swift_release(v45);
  swift_release(v40);
  sub_10000CC94(v94, v47, &qword_10008D310);
  if (v93((char *)v47, 1, v24) == 1)
  {
    sub_10000CCD8(v47, &qword_10008D310);
    v52 = (uint64_t)v91;
    v51 = (uint64_t)v92;
LABEL_11:
    v73 = sub_100009F30(&qword_10008D9B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v52, 1, 1, v73);
    goto LABEL_12;
  }
  v53 = *(_QWORD *)(v47 + *(int *)(v24 + 48));
  swift_retain(v53);
  sub_10000AF68(v47, type metadata accessor for Note);
  v52 = (uint64_t)v91;
  v51 = (uint64_t)v92;
  if (!v53)
    goto LABEL_11;
  v54 = swift_getKeyPath(&unk_10006B570);
  v55 = (uint64_t)v86;
  *v86 = v54;
  v56 = sub_100009F30(&qword_10008B258);
  swift_storeEnumTagMultiPayload(v55, v56, 0);
  *(_QWORD *)(v55 + *(int *)(v84 + 20)) = v53;
  v57 = swift_retain(v53);
  v58 = static Edge.Set.vertical.getter(v57);
  v59 = v58;
  v60.n128_u64[0] = 6.0;
  v61 = EdgeInsets.init(_all:)(v58, v60);
  v63 = v62;
  v65 = v64;
  v67 = v66;
  v68 = (uint64_t)v88;
  sub_10000AF24(v55, (uint64_t)v88, type metadata accessor for NotesFolderWidgetView.Thumbnail);
  v69 = v68 + *(int *)(v85 + 36);
  *(_BYTE *)v69 = v59;
  *(double *)(v69 + 8) = v61;
  *(_QWORD *)(v69 + 16) = v63;
  *(_QWORD *)(v69 + 24) = v65;
  *(_QWORD *)(v69 + 32) = v67;
  *(_BYTE *)(v69 + 40) = 0;
  sub_10000AF68(v55, type metadata accessor for NotesFolderWidgetView.Thumbnail);
  v70 = v87;
  sub_10000CC50(v68, v87, &qword_10008D990);
  sub_10000CC94(v70, v68, &qword_10008D990);
  *(_QWORD *)v51 = 0x4024000000000000;
  *(_BYTE *)(v51 + 8) = 0;
  v71 = sub_100009F30(&qword_10008D9C0);
  sub_10000CC94(v68, v51 + *(int *)(v71 + 48), &qword_10008D990);
  swift_release(v53);
  sub_10000CCD8(v70, &qword_10008D990);
  sub_10000CCD8(v68, &qword_10008D990);
  v72 = sub_100009F30(&qword_10008D9B0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v51, 0, 1, v72);
  sub_10000CC50(v51, v52, &qword_10008D998);
LABEL_12:
  sub_10000CC94(v52, v51, &qword_10008D998);
  v74 = v104;
  v95[6] = v105;
  v95[7] = v106;
  v75 = v106;
  v95[8] = v107;
  v77 = v100;
  v95[2] = v101;
  v76 = v101;
  v95[3] = v102;
  v78 = v102;
  v95[4] = v103;
  v79 = v103;
  v95[5] = v104;
  v95[0] = v99;
  v80 = v99;
  v95[1] = v100;
  *(_OWORD *)(v46 + 96) = v105;
  *(_OWORD *)(v46 + 112) = v75;
  *(_OWORD *)(v46 + 128) = v107;
  *(_OWORD *)(v46 + 32) = v76;
  *(_OWORD *)(v46 + 48) = v78;
  *(_OWORD *)(v46 + 64) = v79;
  *(_OWORD *)(v46 + 80) = v74;
  v96 = v108;
  *(_QWORD *)(v46 + 144) = v108;
  *(_OWORD *)v46 = v80;
  *(_OWORD *)(v46 + 16) = v77;
  v81 = sub_100009F30(&qword_10008DA70);
  sub_10000CC94(v51, v46 + *(int *)(v81 + 48), &qword_10008D998);
  sub_100053DC4(v95);
  sub_10000CCD8(v52, &qword_10008D998);
  sub_10000CCD8(v51, &qword_10008D998);
  v97[6] = v105;
  v97[7] = v106;
  v97[8] = v107;
  v98 = v108;
  v97[2] = v101;
  v97[3] = v102;
  v97[4] = v103;
  v97[5] = v104;
  v97[0] = v99;
  v97[1] = v100;
  return sub_100053E08((uint64_t *)v97);
}

uint64_t sub_10004C4B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __n128 v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v39 = a1;
  v38 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008D960);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F30(&qword_10008D968);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100009F30(&qword_10008D970);
  v36 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v13);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v16 = sub_100009F30(&qword_10008D978);
  sub_10004C730(v2, (uint64_t)&v8[*(int *)(v16 + 44)]);
  v18 = static Edge.Set.horizontal.getter(v17);
  v19 = v2 + *(int *)(type metadata accessor for NotesFolderWidgetView.LargeNoteRow(0) + 24);
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 8);
  sub_10000B2CC(*(_QWORD *)v19, v21);
  v22 = sub_1000337B0(v20, v21);
  v23 = sub_10000B470(v20, v21);
  v24.n128_u64[0] = 0;
  if ((v22 & 1) != 0)
    v24.n128_f64[0] = 16.0;
  v25 = EdgeInsets.init(_all:)(v23, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_10000CC94((uint64_t)v8, (uint64_t)v11, &qword_10008D960);
  v32 = &v11[*(int *)(v9 + 36)];
  *v32 = v18;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  sub_10000CCD8((uint64_t)v8, &qword_10008D960);
  v33 = v38;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ContentSizeCategory.accessibilityMedium(_:), v38);
  v34 = sub_1000538D4();
  View.maximumSizeCategory(_:)(v5, v9, v34);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v33);
  sub_10000CCD8((uint64_t)v11, &qword_10008D968);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v39, v15, v37);
}

uint64_t sub_10004C730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __n128 v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;

  v60 = a2;
  v57 = type metadata accessor for NotesFolderWidgetView.Thumbnail(0);
  __chkstk_darwin(v57);
  v59 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100009F30(&qword_10008D990);
  v4 = __chkstk_darwin(v58);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v55 - v7;
  v9 = sub_100009F30(&qword_10008D310);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100009F30(&qword_10008D998);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v55 - v16;
  v18 = sub_100009F30(&qword_10008D9A0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v55 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v55 - v26;
  *(_QWORD *)v24 = static HorizontalAlignment.center.getter(v25);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 0;
  v28 = sub_100009F30(&qword_10008D9A8);
  sub_10004CC00(a1, (uint64_t)&v24[*(int *)(v28 + 44)]);
  sub_10000CC50((uint64_t)v24, (uint64_t)v27, &qword_10008D9A0);
  v29 = type metadata accessor for NotesFolderWidgetView.LargeNoteRow(0);
  sub_10000CC94(a1 + *(int *)(v29 + 20), (uint64_t)v11, &qword_10008D310);
  v30 = type metadata accessor for Note(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v11, 1, v30) == 1)
  {
    sub_10000CCD8((uint64_t)v11, &qword_10008D310);
    v31 = v60;
LABEL_5:
    v52 = sub_100009F30(&qword_10008D9B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v17, 1, 1, v52);
    goto LABEL_6;
  }
  v32 = v59;
  v55 = v6;
  v56 = v8;
  v33 = *(_QWORD *)&v11[*(int *)(v30 + 48)];
  swift_retain(v33);
  sub_10000AF68((uint64_t)v11, type metadata accessor for Note);
  v31 = v60;
  if (!v33)
    goto LABEL_5;
  v34 = (uint64_t)v32;
  *v32 = swift_getKeyPath(&unk_10006B570);
  v35 = sub_100009F30(&qword_10008B258);
  swift_storeEnumTagMultiPayload(v32, v35, 0);
  *(_QWORD *)((char *)v32 + *(int *)(v57 + 20)) = v33;
  v36 = swift_retain(v33);
  v37 = static Edge.Set.vertical.getter(v36);
  v38 = v37;
  v39.n128_u64[0] = 6.0;
  v40 = EdgeInsets.init(_all:)(v37, v39);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v47 = (uint64_t)v55;
  sub_10000AF24(v34, (uint64_t)v55, type metadata accessor for NotesFolderWidgetView.Thumbnail);
  v48 = v47 + *(int *)(v58 + 36);
  *(_BYTE *)v48 = v38;
  *(double *)(v48 + 8) = v40;
  *(_QWORD *)(v48 + 16) = v42;
  *(_QWORD *)(v48 + 24) = v44;
  *(_QWORD *)(v48 + 32) = v46;
  *(_BYTE *)(v48 + 40) = 0;
  sub_10000AF68(v34, type metadata accessor for NotesFolderWidgetView.Thumbnail);
  v49 = (uint64_t)v56;
  sub_10000CC50(v47, (uint64_t)v56, &qword_10008D990);
  sub_10000CC94(v49, v47, &qword_10008D990);
  *(_QWORD *)v15 = 0x4024000000000000;
  v15[8] = 0;
  v50 = sub_100009F30(&qword_10008D9C0);
  sub_10000CC94(v47, (uint64_t)&v15[*(int *)(v50 + 48)], &qword_10008D990);
  swift_release(v33);
  sub_10000CCD8(v49, &qword_10008D990);
  sub_10000CCD8(v47, &qword_10008D990);
  v51 = sub_100009F30(&qword_10008D9B0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v15, 0, 1, v51);
  sub_10000CC50((uint64_t)v15, (uint64_t)v17, &qword_10008D998);
LABEL_6:
  sub_10000CC94((uint64_t)v27, (uint64_t)v21, &qword_10008D9A0);
  sub_10000CC94((uint64_t)v17, (uint64_t)v15, &qword_10008D998);
  sub_10000CC94((uint64_t)v21, v31, &qword_10008D9A0);
  v53 = sub_100009F30(&qword_10008D9B8);
  sub_10000CC94((uint64_t)v15, v31 + *(int *)(v53 + 48), &qword_10008D998);
  sub_10000CCD8((uint64_t)v17, &qword_10008D998);
  sub_10000CCD8((uint64_t)v27, &qword_10008D9A0);
  sub_10000CCD8((uint64_t)v15, &qword_10008D998);
  return sub_10000CCD8((uint64_t)v21, &qword_10008D9A0);
}

uint64_t sub_10004CC00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = sub_100009F30(&qword_10008D9C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100009F30(&qword_10008D9D0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v20 - v12;
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v11);
  *((_QWORD *)v6 + 1) = 0x4000000000000000;
  v6[16] = 0;
  v14 = sub_100009F30(&qword_10008D9D8);
  sub_10004CDB4(a1, (uint64_t)&v6[*(int *)(v14 + 44)]);
  KeyPath = swift_getKeyPath(&unk_10006B3C8);
  sub_10000CC94((uint64_t)v6, (uint64_t)v10, &qword_10008D9C8);
  v16 = &v10[*(int *)(v7 + 36)];
  *(_QWORD *)v16 = KeyPath;
  *((_QWORD *)v16 + 1) = 1;
  v16[16] = 0;
  sub_10000CCD8((uint64_t)v6, &qword_10008D9C8);
  sub_10000CC50((uint64_t)v10, (uint64_t)v13, &qword_10008D9D0);
  sub_10000CC94((uint64_t)v13, (uint64_t)v10, &qword_10008D9D0);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  v17 = sub_100009F30(&qword_10008D9E0);
  sub_10000CC94((uint64_t)v10, a2 + *(int *)(v17 + 48), &qword_10008D9D0);
  v18 = a2 + *(int *)(v17 + 64);
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  sub_10000CCD8((uint64_t)v13, &qword_10008D9D0);
  return sub_10000CCD8((uint64_t)v10, &qword_10008D9D0);
}

uint64_t sub_10004CDB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a2;
  v3 = sub_100009F30(&qword_10008D9E8);
  __chkstk_darwin(v3);
  v88 = (uint64_t *)((char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100009F30(&qword_10008D9F0);
  v102 = *(_QWORD *)(v5 - 8);
  v103 = v5;
  v6 = __chkstk_darwin(v5);
  v87 = (uint64_t)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v86 = (uint64_t)&v86 - v8;
  v9 = type metadata accessor for ContentSizeCategory(0);
  v95 = *(_QWORD *)(v9 - 8);
  v96 = v9;
  v10 = __chkstk_darwin(v9);
  v94 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v93 = (uint64_t)&v86 - v12;
  v13 = sub_100009F30(&qword_10008D9F8);
  v14 = __chkstk_darwin(v13);
  v101 = (uint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v100 = (char *)&v86 - v16;
  v17 = sub_100009F30(&qword_10008D310);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v86 - v21;
  v23 = sub_100009F30(&qword_10008DA00);
  v91 = *(_QWORD *)(v23 - 8);
  v92 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100009F30(&qword_10008DA08);
  __chkstk_darwin(v89);
  v27 = (char *)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100009F30(&qword_10008DA10);
  v29 = __chkstk_darwin(v28);
  v98 = (uint64_t)&v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v90 = (uint64_t)&v86 - v32;
  __chkstk_darwin(v31);
  v97 = (uint64_t)&v86 - v33;
  v34 = type metadata accessor for NotesFolderWidgetView.LargeNoteRow(0);
  v35 = *(int *)(v34 + 20);
  v99 = a1;
  v36 = a1 + v35;
  sub_10000CC94(a1 + v35, (uint64_t)v22, &qword_10008D310);
  v37 = type metadata accessor for Note(0);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48);
  if (v38(v22, 1, v37) == 1)
  {
    v39 = sub_10000CCD8((uint64_t)v22, &qword_10008D310);
    v40 = static String.placeholder.getter(v39);
    v42 = v41;
  }
  else
  {
    v40 = *((_QWORD *)v22 + 2);
    v42 = *((_QWORD *)v22 + 3);
    swift_bridgeObjectRetain(v42);
    sub_10000AF68((uint64_t)v22, type metadata accessor for Note);
  }
  sub_10000CC94(v36, (uint64_t)v20, &qword_10008D310);
  v43 = v38(v20, 1, v37) == 1;
  sub_10000CCD8((uint64_t)v20, &qword_10008D310);
  v44 = Text.placeholder(_:scale:)(v43, v40, v42, 0, _swiftEmptyArrayStorage, 0.5);
  swift_bridgeObjectRelease(v42);
  v105 = v44;
  View.hyphenationFactor(_:)(&type metadata for AnyView, &protocol witness table for AnyView, 0.1);
  swift_release(v44);
  v45 = v99;
  v46 = v99 + *(int *)(v34 + 24);
  v47 = *(_QWORD *)v46;
  v48 = *(_BYTE *)(v46 + 8);
  sub_10000B2CC(*(_QWORD *)v46, v48);
  LOBYTE(v44) = sub_1000337B0(v47, v48);
  v49 = sub_10000B470(v47, v48);
  if ((v44 & 1) != 0)
    v50 = static Color.primary.getter(v49);
  else
    v50 = static Color.white.getter(v49);
  v51 = v50;
  v52 = (uint64_t)v100;
  v54 = v91;
  v53 = v92;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v27, v25, v92);
  *(_QWORD *)&v27[*(int *)(v89 + 36)] = v51;
  v55 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v25, v53);
  v56 = static Alignment.leading.getter(v55);
  v57 = 1;
  v58 = v90;
  sub_100059CE8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v90, 0.0, 1, 0.0, 1, v56, v59);
  sub_10000CCD8((uint64_t)v27, &qword_10008DA08);
  v60 = v97;
  sub_10000CC50(v58, v97, &qword_10008DA10);
  v61 = v93;
  sub_100033BFC(v93);
  v63 = (uint64_t)v94;
  v62 = v95;
  v64 = v96;
  (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v94, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v96);
  LOBYTE(v53) = sub_100053974(v61, v63);
  v65 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
  v65(v63, v64);
  v66 = ((uint64_t (*)(uint64_t, uint64_t))v65)(v61, v64);
  v67 = v103;
  if ((v53 & 1) != 0)
  {
    v68 = static VerticalAlignment.center.getter(v66);
    v69 = (uint64_t)v88;
    *v88 = v68;
    *(_QWORD *)(v69 + 8) = 0;
    *(_BYTE *)(v69 + 16) = 1;
    v70 = sub_100009F30(&qword_10008DA20);
    sub_10004D4EC(v45, (uint64_t *)(v69 + *(int *)(v70 + 44)));
    v71 = *(_QWORD *)v46;
    v72 = *(_BYTE *)(v46 + 8);
    sub_10000B2CC(*(_QWORD *)v46, v72);
    v73 = sub_1000337B0(v71, v72);
    v74 = sub_10000B470(v71, v72);
    if ((v73 & 1) != 0)
    {
      v75 = static Color.secondary.getter(v74);
    }
    else
    {
      sub_10000B2CC(v71, v72);
      v76 = sub_1000337B0(v71, v72);
      v77 = sub_10000B470(v71, v72);
      if ((v76 & 1) != 0)
        v75 = static Color.primary.getter(v77);
      else
        v75 = static Color.white.getter(v77);
    }
    v78 = v75;
    v79 = v87;
    sub_10000CC94(v69, v87, &qword_10008D9E8);
    *(_QWORD *)(v79 + *(int *)(v67 + 36)) = v78;
    sub_10000CCD8(v69, &qword_10008D9E8);
    v80 = v86;
    sub_10000CC50(v79, v86, &qword_10008D9F0);
    sub_10000CC50(v80, v52, &qword_10008D9F0);
    v57 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 56))(v52, v57, 1, v67);
  v81 = v98;
  sub_10000CC94(v60, v98, &qword_10008DA10);
  v82 = v101;
  sub_10000CC94(v52, v101, &qword_10008D9F8);
  v83 = v104;
  sub_10000CC94(v81, v104, &qword_10008DA10);
  v84 = sub_100009F30(&qword_10008DA18);
  sub_10000CC94(v82, v83 + *(int *)(v84 + 48), &qword_10008D9F8);
  sub_10000CCD8(v52, &qword_10008D9F8);
  sub_10000CCD8(v60, &qword_10008DA10);
  sub_10000CCD8(v82, &qword_10008D9F8);
  return sub_10000CCD8(v81, &qword_10008DA10);
}

uint64_t sub_10004D4EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  id *v63;

  v59 = a2;
  v3 = sub_100009F30(&qword_10008D670);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v54 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v53 = (char *)&v51 - v7;
  v8 = sub_100009F30(&qword_10008DA28);
  v9 = __chkstk_darwin(v8);
  v58 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v55 = (char *)&v51 - v11;
  v12 = sub_100009F30(&qword_10008D310);
  v13 = __chkstk_darwin(v12);
  v52 = (uint64_t)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v51 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v51 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v51 - v21;
  v23 = a1 + *(int *)(type metadata accessor for NotesFolderWidgetView.LargeNoteRow(0) + 20);
  sub_10000CC94(v23, (uint64_t)v22, &qword_10008D310);
  v24 = type metadata accessor for Note(0);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48);
  v26 = v25(v22, 1, v24);
  v56 = v4;
  v57 = v3;
  if (v26 == 1)
  {
    v27 = sub_10000CCD8((uint64_t)v22, &qword_10008D310);
    v28 = static String.placeholder.getter(v27);
    v30 = v29;
  }
  else
  {
    v28 = *((_QWORD *)v22 + 6);
    v30 = *((_QWORD *)v22 + 7);
    swift_bridgeObjectRetain(v30);
    sub_10000AF68((uint64_t)v22, type metadata accessor for Note);
  }
  sub_10000CC94(v23, (uint64_t)v20, &qword_10008D310);
  v31 = 1;
  v32 = v25(v20, 1, v24) == 1;
  sub_10000CCD8((uint64_t)v20, &qword_10008D310);
  v33 = Text.placeholder(_:scale:)(v32, v28, v30, 0, _swiftEmptyArrayStorage, 1.0);
  swift_bridgeObjectRelease(v30);
  sub_10000CC94(v23, (uint64_t)v17, &qword_10008D310);
  v34 = v25(v17, 1, v24);
  sub_10000CCD8((uint64_t)v17, &qword_10008D310);
  v36 = v56;
  v35 = v57;
  v37 = (uint64_t)v55;
  if (v34 != 1)
  {
    v38 = v52;
    sub_10000CC94(v23, v52, &qword_10008D310);
    if (v25((char *)v38, 1, v24) == 1)
    {
      v39 = sub_10000CCD8(v38, &qword_10008D310);
      v40 = static String.placeholder.getter(v39);
      v42 = v41;
    }
    else
    {
      v40 = *(_QWORD *)(v38 + 32);
      v42 = *(_QWORD *)(v38 + 40);
      swift_bridgeObjectRetain(v42);
      sub_10000AF68(v38, type metadata accessor for Note);
    }
    v60 = v40;
    v61 = v42;
    v62 = 0;
    v63 = _swiftEmptyArrayStorage;
    v43 = v54;
    View.hyphenationFactor(_:)(&type metadata for Text, &protocol witness table for Text, 0.1);
    v44 = swift_bridgeObjectRelease(v42);
    v45 = *(void (**)(char *, char *, uint64_t, __n128))(v36 + 32);
    v46 = v53;
    v45(v53, v43, v35, v44);
    ((void (*)(uint64_t, char *, uint64_t))v45)(v37, v46, v35);
    v31 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, v31, 1, v35);
  v47 = v58;
  sub_10000CC94(v37, v58, &qword_10008DA28);
  v48 = v59;
  *v59 = v33;
  v49 = sub_100009F30(&qword_10008DA30);
  sub_10000CC94(v47, (uint64_t)v48 + *(int *)(v49 + 48), &qword_10008DA28);
  swift_retain(v33);
  sub_10000CCD8(v37, &qword_10008DA28);
  sub_10000CCD8(v47, &qword_10008DA28);
  return swift_release(v33);
}

unint64_t sub_10004D928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D3E8;
  if (!qword_10008D3E8)
  {
    v1 = sub_10000AE50(&qword_10008D3D0);
    sub_10000CC08(&qword_10008D3F0, &qword_10008D3C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10000CC08(&qword_10008B3E0, &qword_10008B3E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D3E8);
  }
  return result;
}

unint64_t sub_10004D9C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D420;
  if (!qword_10008D420)
  {
    v1 = sub_10000AE50(&qword_10008D418);
    sub_10000CC08(&qword_10008D428, &qword_10008D430, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D420);
  }
  return result;
}

unint64_t sub_10004DA40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D450;
  if (!qword_10008D450)
  {
    v1 = sub_10000AE50(&qword_10008D448);
    sub_10000CC08(&qword_10008D440, &qword_10008D438, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D450);
  }
  return result;
}

unint64_t sub_10004DABC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008D458;
  if (!qword_10008D458)
  {
    v1 = sub_10000AE50(&qword_10008D408);
    sub_10000CC08(&qword_10008D440, &qword_10008D438, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v2[0] = sub_10000AE50(&qword_10008D418);
    v2[1] = sub_10004D9C4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D458);
  }
  return result;
}

uint64_t sub_10004DB70()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for NotesFolderWidgetView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  sub_10000B470(*(_QWORD *)((char *)v6 + v1[6]), *((_BYTE *)v6 + v1[6] + 8));
  v12 = (_QWORD *)((char *)v6 + v1[7]);
  v13 = sub_100009F30(&qword_10008C8E8);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 2, v13))
  {
    swift_bridgeObjectRelease(v12[1]);
    swift_bridgeObjectRelease(v12[3]);
    swift_bridgeObjectRelease(v12[6]);
    v14 = (int *)type metadata accessor for NotesFolder(0);
    v15 = (char *)v12 + v14[8];
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    swift_release(*(_QWORD *)((char *)v12 + v14[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v12 + v14[10]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v12 + *(int *)(v13 + 48)));
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10004DD48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NotesFolderWidgetView(0) - 8) + 80);
  return sub_100046608(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

unint64_t sub_10004DD98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D470;
  if (!qword_10008D470)
  {
    v1 = sub_10000AE50(&qword_10008D468);
    sub_10000CC08(&qword_10008D478, &qword_10008D480, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D470);
  }
  return result;
}

uint64_t sub_10004DE1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004DE44(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_10004DE68(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a4 >> 1;
  v5 = &_swiftEmptyArrayStorage;
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)(a4 >> 1) <= a3)
      goto LABEL_36;
    v30 = result;
    result = swift_unknownObjectRetain(result, a2);
    v9 = 0;
    v6 = 0;
    v10 = a2 + 8 * a3;
    v11 = ~a3 + v4;
    v12 = (_QWORD *)((char *)&_swiftEmptyArrayStorage + 32);
    while (1)
    {
      v13 = *(_QWORD *)(v10 + 8 * v9);
      if (v6)
      {
        result = swift_retain(*(_QWORD *)(v10 + 8 * v9));
        v14 = __OFSUB__(v6--, 1);
        if (v14)
          goto LABEL_34;
      }
      else
      {
        v15 = v5[3];
        if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_35;
        v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v16 <= 1)
          v17 = 1;
        else
          v17 = v16;
        v18 = sub_100009F30(&qword_10008DAF8);
        v19 = (_QWORD *)swift_allocObject(v18, 16 * v17 + 32, 7);
        v20 = j__malloc_size(v19);
        v21 = v20 - 32;
        if (v20 < 32)
          v21 = v20 - 17;
        v22 = v21 >> 4;
        v19[2] = v17;
        v19[3] = 2 * (v21 >> 4);
        v23 = v19 + 4;
        v24 = v5[3] >> 1;
        v12 = &v19[2 * v24 + 4];
        v25 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
        if (v5[2])
        {
          if (v19 != v5 || v23 >= &v5[2 * v24 + 4])
            memmove(v23, v5 + 4, 16 * v24);
          swift_retain(v13);
          v5[2] = 0;
        }
        else
        {
          swift_retain(v13);
        }
        result = swift_release(v5);
        v5 = v19;
        v14 = __OFSUB__(v25, 1);
        v6 = v25 - 1;
        if (v14)
        {
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
      }
      *v12 = v9;
      v12[1] = v13;
      if (v11 == v9)
        goto LABEL_29;
      v12 += 2;
      if (__OFADD__(++v9, 1))
      {
        __break(1u);
LABEL_29:
        result = swift_unknownObjectRelease(v30);
        goto LABEL_30;
      }
    }
  }
  v6 = 0;
LABEL_30:
  v27 = v5[3];
  if (v27 >= 2)
  {
    v28 = v27 >> 1;
    v14 = __OFSUB__(v28, v6);
    v29 = v28 - v6;
    if (v14)
      goto LABEL_37;
    v5[2] = v29;
  }
  return (uint64_t)v5;
}

uint64_t sub_10004E028(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  id *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  id *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;

  v8 = sub_100009F30(&qword_10008D4F0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v56 = (uint64_t *)((char *)&v49 - v13);
  __chkstk_darwin(v12);
  v57 = v15;
  v58 = (uint64_t)&v49 - v14;
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = a4 >> 1;
  v50 = a1;
  result = swift_unknownObjectRetain(a1, v18);
  v20 = _swiftEmptyArrayStorage;
  if (v17 == a3)
  {
    v21 = 0;
LABEL_28:
    result = swift_unknownObjectRelease(v50);
    v46 = (unint64_t)v20[3];
    if (v46 < 2)
      return (uint64_t)v20;
    v47 = v46 >> 1;
    v29 = __OFSUB__(v47, v21);
    v48 = (void *)(v47 - v21);
    if (!v29)
    {
      v20[2] = v48;
      return (uint64_t)v20;
    }
  }
  else
  {
    v22 = 0;
    v21 = 0;
    v53 = (v16 + 32) & ~v16;
    v23 = (char *)_swiftEmptyArrayStorage + v53;
    v51 = v11;
    v52 = v16 | 7;
    v54 = a3 - v17;
    v55 = v17;
    v24 = _swiftEmptyArrayStorage;
    while (a3 + v22 < v55)
    {
      v25 = type metadata accessor for Note(0);
      v26 = (uint64_t)&v11[*(int *)(v8 + 48)];
      result = sub_10000AF24(a2 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * (a3 + v22), v26, type metadata accessor for Note);
      if (__OFADD__(v22, 1))
        goto LABEL_33;
      v27 = (uint64_t)v56;
      v28 = (uint64_t)v56 + *(int *)(v8 + 48);
      *v56 = v22;
      sub_10000AEE0(v26, v28, type metadata accessor for Note);
      result = sub_10000CC50(v27, v58, &qword_10008D4F0);
      if (v21)
      {
        v20 = v24;
        v29 = __OFSUB__(v21--, 1);
        if (v29)
          goto LABEL_34;
      }
      else
      {
        v30 = (unint64_t)v24[3];
        if ((uint64_t)((v30 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_35;
        v31 = a2;
        v32 = a3;
        v33 = v30 & 0xFFFFFFFFFFFFFFFELL;
        if (v33 <= 1)
          v34 = 1;
        else
          v34 = v33;
        v35 = sub_100009F30(&qword_10008D5C0);
        v36 = *(_QWORD *)(v57 + 72);
        v37 = v53;
        v20 = (id *)swift_allocObject(v35, v53 + v36 * v34, v52);
        result = j__malloc_size(v20);
        if (!v36)
          goto LABEL_36;
        v38 = result - v37;
        if (result - v37 == 0x8000000000000000 && v36 == -1)
          goto LABEL_37;
        v40 = v38 / v36;
        v20[2] = (id)v34;
        v20[3] = (id)(2 * (v38 / v36));
        v41 = (char *)v20 + v37;
        v42 = (unint64_t)v24[3] >> 1;
        v43 = v42 * v36;
        if (v24[2])
        {
          v44 = (char *)v24 + v53;
          if (v20 < v24 || v41 >= &v44[v43])
          {
            swift_arrayInitWithTakeFrontToBack(v41, v44, v42, v8);
          }
          else if (v20 != v24)
          {
            swift_arrayInitWithTakeBackToFront(v41);
          }
          v24[2] = 0;
        }
        v23 = &v41[v43];
        v45 = (v40 & 0x7FFFFFFFFFFFFFFFLL) - v42;
        result = swift_release(v24);
        a3 = v32;
        a2 = v31;
        v11 = v51;
        v29 = __OFSUB__(v45, 1);
        v21 = v45 - 1;
        if (v29)
          goto LABEL_34;
      }
      result = sub_10000CC50(v58, (uint64_t)v23, &qword_10008D4F0);
      v23 += *(_QWORD *)(v57 + 72);
      ++v22;
      v24 = v20;
      if (!(v54 + v22))
        goto LABEL_28;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004E34C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(type metadata accessor for NotesFolderWidgetView(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  return sub_100046944(a2, a1, v3 + ((v8 + v9 + v10) & ~v10), a3);
}

uint64_t sub_10004E3D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004E3F8(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = sub_100009F30(&qword_10008D4F0);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

unint64_t sub_10004E450()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008D4B0;
  if (!qword_10008D4B0)
  {
    v1 = sub_10000AE50(&qword_10008D4A0);
    v2[0] = sub_10000AE50(&qword_10008D4B8);
    v2[1] = sub_10004E4FC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000C5FC(&qword_10008B398, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D4B0);
  }
  return result;
}

unint64_t sub_10004E4FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D4C0;
  if (!qword_10008D4C0)
  {
    v1 = sub_10000AE50(&qword_10008D4B8);
    sub_10004E580();
    sub_10000C5FC(&qword_10008B398, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D4C0);
  }
  return result;
}

unint64_t sub_10004E580()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D4C8;
  if (!qword_10008D4C8)
  {
    v1 = sub_10000AE50(&qword_10008D4D0);
    sub_10000CC08(&qword_10008D4D8, &qword_10008D4E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D4C8);
  }
  return result;
}

unint64_t sub_10004E604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D570;
  if (!qword_10008D570)
  {
    v1 = sub_10000AE50(&qword_10008D558);
    sub_10004E6B0(&qword_10008D578, &qword_10008D550, &qword_10008D580, &qword_10008D560);
    sub_10004E6B0(&qword_10008D590, &qword_10008D520, &qword_10008D598, &qword_10008D528);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D570);
  }
  return result;
}

uint64_t sub_10004E6B0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000AE50(a2);
    sub_10000CC08(a3, a4, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_10000CC08(&qword_10008D588, &qword_10008D530, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for NotesFolderWidgetView.LargeNoteRow(uint64_t a1)
{
  return sub_10000AD34(a1, (uint64_t *)&unk_10008D7E8, (uint64_t)&nominal type descriptor for NotesFolderWidgetView.LargeNoteRow);
}

uint64_t sub_10004E770@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Note(0) - 8) + 80);
  return sub_100048578(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t type metadata accessor for NotesFolderWidgetView.MediumNoteRow(uint64_t a1)
{
  return sub_10000AD34(a1, qword_10008D888, (uint64_t)&nominal type descriptor for NotesFolderWidgetView.MediumNoteRow);
}

uint64_t sub_10004E7C4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (int *)type metadata accessor for Note(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 96));
  v7 = v0 + v4 + v1[11];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_release(*(_QWORD *)(v6 + v1[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13]));
  swift_release(*(_QWORD *)(v6 + v1[14]));
  swift_release(*(_QWORD *)(v6 + v1[15]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10004E8D4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Note(0) - 8) + 80);
  return sub_100048650(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_10004E914()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = (int *)type metadata accessor for NotesFolderWidgetView(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (int *)type metadata accessor for Note(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v30 = *(_QWORD *)(v8 + 64);
  v10 = (_QWORD *)(v1 + v5);
  v11 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(v1 + v5, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v1 + v5, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = v5 + v6 + v9;
  v14 = (_QWORD *)((char *)v10 + v2[5]);
  v15 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = v13 & ~v9;
  sub_10000B470(*(_QWORD *)((char *)v10 + v2[6]), *((_BYTE *)v10 + v2[6] + 8));
  v18 = (_QWORD *)((char *)v10 + v2[7]);
  v19 = sub_100009F30(&qword_10008C8E8);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 2, v19))
  {
    v29 = v1;
    swift_bridgeObjectRelease(v18[1]);
    swift_bridgeObjectRelease(v18[3]);
    swift_bridgeObjectRelease(v18[6]);
    v20 = (int *)type metadata accessor for NotesFolder(0);
    v21 = (char *)v18 + v20[8];
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
    swift_release(*(_QWORD *)((char *)v18 + v20[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v20[10]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + *(int *)(v19 + 48)));
    v1 = v29;
  }
  v24 = v1 + v17;
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v17 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v17 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v17 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v17 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v17 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v17 + 96));
  v25 = v1 + v17 + v7[11];
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  swift_release(*(_QWORD *)(v24 + v7[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(v24 + v7[13]));
  swift_release(*(_QWORD *)(v24 + v7[14]));
  swift_release(*(_QWORD *)(v24 + v7[15]));
  return swift_deallocObject(v1, v17 + v30, v4 | v9 | 7);
}

uint64_t sub_10004EBD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for NotesFolderWidgetView(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Note(0) - 8) + 80);
  return sub_100048314(v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t type metadata accessor for NotesFolderWidgetView.SmallNoteRow(uint64_t a1)
{
  return sub_10000AD34(a1, (uint64_t *)&unk_10008D918, (uint64_t)&nominal type descriptor for NotesFolderWidgetView.SmallNoteRow);
}

unint64_t sub_10004EC5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D618;
  if (!qword_10008D618)
  {
    v1 = sub_10000AE50(&qword_10008D5D0);
    sub_10000CC08(&qword_10008D620, &qword_10008D5C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D618);
  }
  return result;
}

unint64_t sub_10004ECE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D638;
  if (!qword_10008D638)
  {
    v1 = sub_10000AE50(&qword_10008D5F0);
    sub_10000CC08(&qword_10008D640, &qword_10008D5E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D638);
  }
  return result;
}

uint64_t sub_10004ED64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if ((a9 & 1) == 0)
    return swift_bridgeObjectRetain(a8);
  return result;
}

uint64_t sub_10004ED78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if ((a9 & 1) == 0)
    return swift_bridgeObjectRelease(a8);
  return result;
}

uint64_t sub_10004ED8C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004EDB4(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_10004EDEC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10008D6D0;
  if (!qword_10008D6D0)
  {
    v1 = sub_10000AE50(&qword_10008D6C0);
    v2[0] = type metadata accessor for WidgetHeader(255);
    v2[1] = sub_10000C5FC(&qword_10008D6C8, type metadata accessor for WidgetHeader, (uint64_t)&unk_10006B0E0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000C5FC(&qword_10008B398, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D6D0);
  }
  return result;
}

unint64_t sub_10004EEAC()
{
  unint64_t result;

  result = qword_10008D6D8;
  if (!qword_10008D6D8)
  {
    result = swift_getWitnessTable(&unk_10006AB64, &type metadata for AvatarStack);
    atomic_store(result, (unint64_t *)&qword_10008D6D8);
  }
  return result;
}

uint64_t sub_10004EEF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for NotesFolderWidgetView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  sub_10000B470(*(_QWORD *)((char *)v6 + v1[6]), *((_BYTE *)v6 + v1[6] + 8));
  v12 = (_QWORD *)((char *)v6 + v1[7]);
  v13 = sub_100009F30(&qword_10008C8E8);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 2, v13))
  {
    swift_bridgeObjectRelease(v12[1]);
    swift_bridgeObjectRelease(v12[3]);
    swift_bridgeObjectRelease(v12[6]);
    v14 = (int *)type metadata accessor for NotesFolder(0);
    v15 = (char *)v12 + v14[8];
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    swift_release(*(_QWORD *)((char *)v12 + v14[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v12 + v14[10]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v12 + *(int *)(v13 + 48)));
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10004F0C0(uint64_t a1)
{
  return sub_100054160(a1, type metadata accessor for NotesFolderWidgetView, sub_1000437C4);
}

uint64_t sub_10004F0D8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int *)type metadata accessor for NotesFolderWidgetView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v26 = *(_QWORD *)(v7 + 64);
  v9 = (_QWORD *)(v0 + v4);
  v10 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v10) == 1)
  {
    v11 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + v4, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)v9 + v1[5]);
  v13 = sub_100009F30(&qword_10008B260);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  sub_10000B470(*(_QWORD *)((char *)v9 + v1[6]), *((_BYTE *)v9 + v1[6] + 8));
  v15 = (_QWORD *)((char *)v9 + v1[7]);
  v16 = sub_100009F30(&qword_10008C8E8);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 2, v16))
  {
    v24 = v5;
    v25 = v6;
    swift_bridgeObjectRelease(v15[1]);
    swift_bridgeObjectRelease(v15[3]);
    swift_bridgeObjectRelease(v15[6]);
    v17 = (int *)type metadata accessor for NotesFolder(0);
    v18 = (char *)v15 + v17[8];
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
    swift_release(*(_QWORD *)((char *)v15 + v17[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v17[10]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + *(int *)(v16 + 48)));
    v4 = (v3 + 16) & ~v3;
    v6 = v25;
    v5 = v24;
  }
  v21 = (v4 + v5 + v8) & ~v8;
  v22 = v21 + v26;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v21, v6);
  return swift_deallocObject(v0, v22, v3 | v8 | 7);
}

uint64_t sub_10004F308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for NotesFolderWidgetView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  return sub_100044224(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

unint64_t sub_10004F380()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D708;
  if (!qword_10008D708)
  {
    v1 = sub_10000AE50(&qword_10008D700);
    sub_10000CC08(&qword_10008D710, &qword_10008D718, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D708);
  }
  return result;
}

unint64_t sub_10004F404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D770;
  if (!qword_10008D770)
  {
    v1 = sub_10000AE50(&qword_10008D760);
    sub_10004F470();
    sub_10004F50C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D770);
  }
  return result;
}

unint64_t sub_10004F470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D778;
  if (!qword_10008D778)
  {
    v1 = sub_10000AE50(&qword_10008D758);
    sub_10000C5FC(&qword_10008D5B8, type metadata accessor for NotesFolderWidgetView.SmallNoteRow, (uint64_t)&unk_10006B47C);
    sub_10000C5FC(&qword_10008D5B0, type metadata accessor for NotesFolderWidgetView.MediumNoteRow, (uint64_t)&unk_10006B4CC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D778);
  }
  return result;
}

unint64_t sub_10004F50C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D780;
  if (!qword_10008D780)
  {
    v1 = sub_10000AE50(&qword_10008D738);
    sub_10000C5FC(&qword_10008D5A8, type metadata accessor for NotesFolderWidgetView.LargeNoteRow, (uint64_t)&unk_10006B51C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D780);
  }
  return result;
}

uint64_t *sub_10004F588(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v41;
  char *__dst;
  char *v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = (int *)type metadata accessor for Note(0);
    v18 = *((_QWORD *)v17 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_100009F30(&qword_10008D310);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = v16[1];
      *v15 = *v16;
      v15[1] = v20;
      v47 = v16[3];
      v48 = v18;
      v15[2] = v16[2];
      v15[3] = v47;
      v21 = v16[5];
      v15[4] = v16[4];
      v15[5] = v21;
      v46 = v16[7];
      v15[6] = v16[6];
      v15[7] = v46;
      v45 = v16[9];
      v15[8] = v16[8];
      v15[9] = v45;
      *((_BYTE *)v15 + 80) = *((_BYTE *)v16 + 80);
      v22 = v16[12];
      v15[11] = v16[11];
      v15[12] = v22;
      v23 = v17[11];
      __dst = (char *)v15 + v23;
      v43 = (char *)v16 + v23;
      v24 = type metadata accessor for URL(0);
      v41 = *(_QWORD *)(v24 - 8);
      v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v22);
      if (v44(v43, 1, v24))
      {
        v25 = sub_100009F30(&qword_10008B170);
        memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(__dst, v43, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v24);
      }
      v26 = v17[12];
      v27 = *(_QWORD *)((char *)v16 + v26);
      *(_QWORD *)((char *)v15 + v26) = v27;
      v28 = v17[13];
      v29 = *(_QWORD *)((char *)v16 + v28);
      *(_QWORD *)((char *)v15 + v28) = v29;
      v30 = v17[14];
      v31 = *(_QWORD *)((char *)v16 + v30);
      *(_QWORD *)((char *)v15 + v30) = v31;
      v32 = v17[15];
      v33 = *(_QWORD *)((char *)v16 + v32);
      *(_QWORD *)((char *)v15 + v32) = v33;
      *((_BYTE *)v15 + v17[16]) = *((_BYTE *)v16 + v17[16]);
      v34 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v48 + 56);
      swift_retain(v27);
      swift_bridgeObjectRetain(v29);
      swift_retain(v31);
      swift_retain(v33);
      v34(v15, 0, 1, v17);
    }
    v35 = *(int *)(a3 + 24);
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    v38 = *(_QWORD *)v37;
    v39 = v37[8];
    sub_10000B2CC(*(_QWORD *)v37, v39);
    *(_QWORD *)v36 = v38;
    v36[8] = v39;
  }
  return a1;
}

uint64_t sub_10004F878(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = (int *)type metadata accessor for Note(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[3]);
    swift_bridgeObjectRelease(v6[5]);
    swift_bridgeObjectRelease(v6[7]);
    swift_bridgeObjectRelease(v6[9]);
    swift_bridgeObjectRelease(v6[12]);
    v8 = (char *)v6 + v7[11];
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    swift_release(*(_QWORD *)((char *)v6 + v7[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[13]));
    swift_release(*(_QWORD *)((char *)v6 + v7[14]));
    swift_release(*(_QWORD *)((char *)v6 + v7[15]));
  }
  return sub_10000B470(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)), *((_BYTE *)a1 + *(int *)(a2 + 24) + 8));
}

uint64_t *sub_10004F9D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *__dst;
  uint64_t v46;
  uint64_t v47;

  v6 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for Note(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100009F30(&qword_10008D310);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v46 = v16;
    v47 = a3;
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v44 = v14[3];
    v13[2] = v14[2];
    v13[3] = v44;
    v43 = v14[5];
    v13[4] = v14[4];
    v13[5] = v43;
    v42 = v14[7];
    v13[6] = v14[6];
    v13[7] = v42;
    v19 = v14[9];
    v13[8] = v14[8];
    v13[9] = v19;
    *((_BYTE *)v13 + 80) = *((_BYTE *)v14 + 80);
    v20 = v14[12];
    v13[11] = v14[11];
    v13[12] = v20;
    v21 = v15[11];
    __dst = (char *)v13 + v21;
    v22 = (char *)v14 + v21;
    v23 = type metadata accessor for URL(0);
    v40 = *(_QWORD *)(v23 - 8);
    v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    if (v41(v22, 1, v23))
    {
      v24 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(__dst, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v23);
    }
    v25 = v15[12];
    v26 = *(_QWORD *)((char *)v14 + v25);
    *(_QWORD *)((char *)v13 + v25) = v26;
    v27 = v15[13];
    v28 = *(_QWORD *)((char *)v14 + v27);
    *(_QWORD *)((char *)v13 + v27) = v28;
    v29 = v15[14];
    v30 = *(_QWORD *)((char *)v14 + v29);
    *(_QWORD *)((char *)v13 + v29) = v30;
    v31 = v15[15];
    v32 = *(_QWORD *)((char *)v14 + v31);
    *(_QWORD *)((char *)v13 + v31) = v32;
    *((_BYTE *)v13 + v15[16]) = *((_BYTE *)v14 + v15[16]);
    v33 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v46 + 56);
    swift_retain(v26);
    swift_bridgeObjectRetain(v28);
    swift_retain(v30);
    swift_retain(v32);
    v33(v13, 0, 1, v15);
    a3 = v47;
  }
  v34 = *(int *)(a3 + 24);
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = *(_QWORD *)v36;
  v38 = v36[8];
  sub_10000B2CC(*(_QWORD *)v36, v38);
  *(_QWORD *)v35 = v37;
  v35[8] = v38;
  return a1;
}

_QWORD *sub_10004FCA4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *__dst;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;

  v4 = a2;
  if (a1 != a2)
  {
    sub_10000CCD8((uint64_t)a1, &qword_10008CBD0);
    v6 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(v4, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v4, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *v4;
      *a1 = *v4;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)v4 + v12;
  v15 = (int *)type metadata accessor for Note(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_10000AF68(v13, type metadata accessor for Note);
      goto LABEL_12;
    }
    v85 = v4;
    v87 = a3;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v28 = *((_QWORD *)v14 + 1);
    v29 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
    v30 = *((_QWORD *)v14 + 3);
    v31 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
    *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
    v32 = *((_QWORD *)v14 + 5);
    v33 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v32;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRelease(v33);
    *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
    v34 = *((_QWORD *)v14 + 7);
    v35 = *(_QWORD *)(v13 + 56);
    *(_QWORD *)(v13 + 56) = v34;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v35);
    *(_QWORD *)(v13 + 64) = *((_QWORD *)v14 + 8);
    v36 = *((_QWORD *)v14 + 9);
    v37 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)(v13 + 72) = v36;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease(v37);
    *(_BYTE *)(v13 + 80) = v14[80];
    *(_QWORD *)(v13 + 88) = *((_QWORD *)v14 + 11);
    v38 = *((_QWORD *)v14 + 12);
    v39 = *(_QWORD *)(v13 + 96);
    *(_QWORD *)(v13 + 96) = v38;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRelease(v39);
    v40 = v15[11];
    v41 = (void *)(v13 + v40);
    v42 = &v14[v40];
    v43 = type metadata accessor for URL(0);
    v44 = *(_QWORD *)(v43 - 8);
    v45 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
    v46 = v45(v41, 1, v43);
    v47 = v45(v42, 1, v43);
    if (v46)
    {
      if (!v47)
      {
        (*(void (**)(void *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
LABEL_21:
        v4 = v85;
        v58 = v15[12];
        v59 = *(_QWORD *)(v13 + v58);
        v60 = *(_QWORD *)&v14[v58];
        *(_QWORD *)(v13 + v58) = v60;
        swift_retain(v60);
        swift_release(v59);
        v61 = v15[13];
        v62 = *(_QWORD *)&v14[v61];
        v63 = *(_QWORD *)(v13 + v61);
        *(_QWORD *)(v13 + v61) = v62;
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRelease(v63);
        v64 = v15[14];
        v65 = *(_QWORD *)(v13 + v64);
        v66 = *(_QWORD *)&v14[v64];
        *(_QWORD *)(v13 + v64) = v66;
        swift_retain(v66);
        swift_release(v65);
        v67 = v15[15];
        v68 = *(_QWORD *)(v13 + v67);
        v69 = *(_QWORD *)&v14[v67];
        *(_QWORD *)(v13 + v67) = v69;
        swift_retain(v69);
        swift_release(v68);
        *(_BYTE *)(v13 + v15[16]) = v14[v15[16]];
        a3 = v87;
        goto LABEL_22;
      }
    }
    else
    {
      if (!v47)
      {
        (*(void (**)(void *, char *, uint64_t))(v44 + 24))(v41, v42, v43);
        goto LABEL_21;
      }
      (*(void (**)(void *, uint64_t))(v44 + 8))(v41, v43);
    }
    v57 = sub_100009F30(&qword_10008B170);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_21;
  }
  if (v19)
  {
LABEL_12:
    v27 = sub_100009F30(&qword_10008D310);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_22;
  }
  v84 = v4;
  v86 = a3;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v20 = *((_QWORD *)v14 + 1);
  *(_QWORD *)(v13 + 8) = v20;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  v82 = *((_QWORD *)v14 + 3);
  *(_QWORD *)(v13 + 24) = v82;
  *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
  v81 = *((_QWORD *)v14 + 5);
  *(_QWORD *)(v13 + 40) = v81;
  *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
  v80 = *((_QWORD *)v14 + 7);
  *(_QWORD *)(v13 + 56) = v80;
  *(_QWORD *)(v13 + 64) = *((_QWORD *)v14 + 8);
  v21 = *((_QWORD *)v14 + 9);
  *(_QWORD *)(v13 + 72) = v21;
  *(_BYTE *)(v13 + 80) = v14[80];
  *(_QWORD *)(v13 + 88) = *((_QWORD *)v14 + 11);
  v22 = *((_QWORD *)v14 + 12);
  *(_QWORD *)(v13 + 96) = v22;
  v23 = v15[11];
  __dst = (void *)(v13 + v23);
  v24 = &v14[v23];
  v25 = type metadata accessor for URL(0);
  v78 = *(_QWORD *)(v25 - 8);
  v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  if (v79(v24, 1, v25))
  {
    v26 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v78 + 16))(__dst, v24, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v25);
  }
  a3 = v86;
  v48 = v15[12];
  v49 = *(_QWORD *)&v14[v48];
  *(_QWORD *)(v13 + v48) = v49;
  v50 = v15[13];
  v51 = *(_QWORD *)&v14[v50];
  *(_QWORD *)(v13 + v50) = v51;
  v52 = v15[14];
  v53 = *(_QWORD *)&v14[v52];
  *(_QWORD *)(v13 + v52) = v53;
  v54 = v15[15];
  v55 = *(_QWORD *)&v14[v54];
  *(_QWORD *)(v13 + v54) = v55;
  *(_BYTE *)(v13 + v15[16]) = v14[v15[16]];
  v56 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v16 + 56);
  swift_retain(v49);
  swift_bridgeObjectRetain(v51);
  swift_retain(v53);
  swift_retain(v55);
  v56(v13, 0, 1, v15);
  v4 = v84;
LABEL_22:
  v70 = *(int *)(a3 + 24);
  v71 = (char *)a1 + v70;
  v72 = (char *)v4 + v70;
  v73 = *(_QWORD *)v72;
  v74 = v72[8];
  sub_10000B2CC(*(_QWORD *)v72, v74);
  v75 = *(_QWORD *)v71;
  v76 = v71[8];
  *(_QWORD *)v71 = v73;
  v71[8] = v74;
  sub_10000B470(v75, v76);
  return a1;
}

char *sub_10005020C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *__dst;

  v6 = sub_100009F30(&qword_10008CBD0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = (int *)type metadata accessor for Note(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100009F30(&qword_10008D310);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v14;
    v15 = *((_OWORD *)v10 + 3);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 3) = v15;
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    v9[80] = v10[80];
    *(_OWORD *)(v9 + 88) = *(_OWORD *)(v10 + 88);
    v16 = v11[11];
    __dst = &v9[v16];
    v17 = &v10[v16];
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    *(_QWORD *)&v9[v11[12]] = *(_QWORD *)&v10[v11[12]];
    *(_QWORD *)&v9[v11[13]] = *(_QWORD *)&v10[v11[13]];
    *(_QWORD *)&v9[v11[14]] = *(_QWORD *)&v10[v11[14]];
    *(_QWORD *)&v9[v11[15]] = *(_QWORD *)&v10[v11[15]];
    v9[v11[16]] = v10[v11[16]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v21 = *(int *)(a3 + 24);
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  return a1;
}

char *sub_100050440(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  size_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char *v61;
  uint64_t v62;

  if (a1 != a2)
  {
    sub_10000CCD8((uint64_t)a1, &qword_10008CBD0);
    v6 = sub_100009F30(&qword_10008CBD0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = (int *)type metadata accessor for Note(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_10000AF68((uint64_t)v9, type metadata accessor for Note);
      goto LABEL_11;
    }
    v62 = a3;
    v25 = *((_QWORD *)v10 + 1);
    v26 = *((_QWORD *)v9 + 1);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *((_QWORD *)v9 + 1) = v25;
    swift_bridgeObjectRelease(v26);
    v27 = *((_QWORD *)v10 + 3);
    v28 = *((_QWORD *)v9 + 3);
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    *((_QWORD *)v9 + 3) = v27;
    swift_bridgeObjectRelease(v28);
    v29 = *((_QWORD *)v10 + 5);
    v30 = *((_QWORD *)v9 + 5);
    *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
    *((_QWORD *)v9 + 5) = v29;
    swift_bridgeObjectRelease(v30);
    v31 = *((_QWORD *)v10 + 7);
    v32 = *((_QWORD *)v9 + 7);
    *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
    *((_QWORD *)v9 + 7) = v31;
    swift_bridgeObjectRelease(v32);
    v33 = *((_QWORD *)v10 + 9);
    v34 = *((_QWORD *)v9 + 9);
    *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
    *((_QWORD *)v9 + 9) = v33;
    swift_bridgeObjectRelease(v34);
    v9[80] = v10[80];
    v35 = *((_QWORD *)v10 + 12);
    v36 = *((_QWORD *)v9 + 12);
    *((_QWORD *)v9 + 11) = *((_QWORD *)v10 + 11);
    *((_QWORD *)v9 + 12) = v35;
    swift_bridgeObjectRelease(v36);
    v37 = v11[11];
    v38 = &v9[v37];
    v39 = &v10[v37];
    v40 = type metadata accessor for URL(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
    v61 = v38;
    LODWORD(v38) = v42(v38, 1, v40);
    v43 = v42(v39, 1, v40);
    if ((_DWORD)v38)
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v61, v39, v40);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v61, 0, 1, v40);
        goto LABEL_22;
      }
      v44 = *(_QWORD *)(*(_QWORD *)(sub_100009F30(&qword_10008B170) - 8) + 64);
      v45 = v61;
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v61, v39, v40);
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v61, v40);
      v44 = *(_QWORD *)(*(_QWORD *)(sub_100009F30(&qword_10008B170) - 8) + 64);
      v45 = v61;
    }
    memcpy(v45, v39, v44);
LABEL_22:
    v46 = v11[12];
    v47 = *(_QWORD *)&v9[v46];
    *(_QWORD *)&v9[v46] = *(_QWORD *)&v10[v46];
    swift_release(v47);
    v48 = v11[13];
    v49 = *(_QWORD *)&v9[v48];
    *(_QWORD *)&v9[v48] = *(_QWORD *)&v10[v48];
    swift_bridgeObjectRelease(v49);
    v50 = v11[14];
    v51 = *(_QWORD *)&v9[v50];
    *(_QWORD *)&v9[v50] = *(_QWORD *)&v10[v50];
    swift_release(v51);
    v52 = v11[15];
    v53 = *(_QWORD *)&v9[v52];
    *(_QWORD *)&v9[v52] = *(_QWORD *)&v10[v52];
    swift_release(v53);
    v9[v11[16]] = v10[v11[16]];
LABEL_23:
    a3 = v62;
    goto LABEL_24;
  }
  if (!v15)
  {
    v62 = a3;
    v16 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v16;
    v17 = *((_OWORD *)v10 + 3);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 3) = v17;
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    v9[80] = v10[80];
    *(_OWORD *)(v9 + 88) = *(_OWORD *)(v10 + 88);
    v18 = v11[11];
    v19 = &v9[v18];
    v20 = &v10[v18];
    v21 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_100009F30(&qword_10008B170);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *(_QWORD *)&v9[v11[12]] = *(_QWORD *)&v10[v11[12]];
    *(_QWORD *)&v9[v11[13]] = *(_QWORD *)&v10[v11[13]];
    *(_QWORD *)&v9[v11[14]] = *(_QWORD *)&v10[v11[14]];
    *(_QWORD *)&v9[v11[15]] = *(_QWORD *)&v10[v11[15]];
    v9[v11[16]] = v10[v11[16]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
    goto LABEL_23;
  }
LABEL_11:
  v24 = sub_100009F30(&qword_10008D310);
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_24:
  v54 = *(int *)(a3 + 24);
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = *(_QWORD *)v56;
  LOBYTE(v56) = v56[8];
  v58 = *(_QWORD *)v55;
  v59 = v55[8];
  *(_QWORD *)v55 = v57;
  v55[8] = (char)v56;
  sub_10000B470(v58, v59);
  return a1;
}

uint64_t sub_100050880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005088C);
}

uint64_t sub_10005088C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = sub_100009F30(&qword_10008CED8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100009F30(&qword_10008D310);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 > 1)
    return (v14 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10005093C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050948);
}

uint64_t sub_100050948(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100009F30(&qword_10008CED8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100009F30(&qword_10008D310);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
  return result;
}

void sub_1000509F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10000C2F0(319, (unint64_t *)&unk_10008CF48, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000C2F0(319, (unint64_t *)&unk_10008D7F8, type metadata accessor for Note, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\t";
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t *sub_100050AB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v34;
  char *__dst;
  char *v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = (int *)type metadata accessor for Note(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100009F30(&qword_10008D310);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      v13 = a2[5];
      a1[4] = a2[4];
      a1[5] = v13;
      v38 = a2[7];
      v39 = v8;
      a1[6] = a2[6];
      a1[7] = v38;
      v14 = a2[9];
      a1[8] = a2[8];
      a1[9] = v14;
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      v15 = a2[12];
      a1[11] = a2[11];
      a1[12] = v15;
      v16 = v7[11];
      __dst = (char *)a1 + v16;
      v36 = (char *)a2 + v16;
      v17 = type metadata accessor for URL(0);
      v34 = *(_QWORD *)(v17 - 8);
      v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      if (v37(v36, 1, v17))
      {
        v18 = sub_100009F30(&qword_10008B170);
        memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v36, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v17);
      }
      v19 = v7[12];
      v20 = *(uint64_t *)((char *)a2 + v19);
      *(uint64_t *)((char *)a1 + v19) = v20;
      v21 = v7[13];
      v22 = *(uint64_t *)((char *)a2 + v21);
      *(uint64_t *)((char *)a1 + v21) = v22;
      v23 = v7[14];
      v24 = *(uint64_t *)((char *)a2 + v23);
      *(uint64_t *)((char *)a1 + v23) = v24;
      v25 = v7[15];
      v26 = *(uint64_t *)((char *)a2 + v25);
      *(uint64_t *)((char *)a1 + v25) = v26;
      *((_BYTE *)a1 + v7[16]) = *((_BYTE *)a2 + v7[16]);
      v27 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v39 + 56);
      swift_retain(v20);
      swift_bridgeObjectRetain(v22);
      swift_retain(v24);
      swift_retain(v26);
      v27(a1, 0, 1, v7);
    }
    v28 = *(int *)(a3 + 20);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *(_QWORD *)v30;
    v32 = v30[8];
    sub_10000B2CC(*(_QWORD *)v30, v32);
    *(_QWORD *)v29 = v31;
    v29[8] = v32;
  }
  return a1;
}

uint64_t sub_100050D20(_QWORD *a1, uint64_t a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (int *)type metadata accessor for Note(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[3]);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[12]);
    v5 = (char *)a1 + v4[11];
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
      (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    swift_release(*(_QWORD *)((char *)a1 + v4[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[13]));
    swift_release(*(_QWORD *)((char *)a1 + v4[14]));
    swift_release(*(_QWORD *)((char *)a1 + v4[15]));
  }
  return sub_10000B470(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)), *((_BYTE *)a1 + *(int *)(a2 + 20) + 8));
}

_QWORD *sub_100050E28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v33;
  char *v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v37;
  uint64_t v38;

  v6 = (int *)type metadata accessor for Note(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100009F30(&qword_10008D310);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v37 = v7;
    v38 = a3;
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    v11 = a2[5];
    a1[4] = a2[4];
    a1[5] = v11;
    v12 = a2[7];
    a1[6] = a2[6];
    a1[7] = v12;
    v13 = a2[9];
    a1[8] = a2[8];
    a1[9] = v13;
    *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    v14 = a2[12];
    a1[11] = a2[11];
    a1[12] = v14;
    v15 = v6[11];
    __dst = (char *)a1 + v15;
    v34 = (char *)a2 + v15;
    v16 = type metadata accessor for URL(0);
    v33 = *(_QWORD *)(v16 - 8);
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    if (v35(v34, 1, v16))
    {
      v17 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v34, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v16);
    }
    v18 = v6[12];
    v19 = *(_QWORD *)((char *)a2 + v18);
    *(_QWORD *)((char *)a1 + v18) = v19;
    v20 = v6[13];
    v21 = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)a1 + v20) = v21;
    v22 = v6[14];
    v23 = *(_QWORD *)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v23;
    v24 = v6[15];
    v25 = *(_QWORD *)((char *)a2 + v24);
    *(_QWORD *)((char *)a1 + v24) = v25;
    *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
    v26 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v37 + 56);
    swift_retain(v19);
    swift_bridgeObjectRetain(v21);
    swift_retain(v23);
    swift_retain(v25);
    v26(a1, 0, 1, v6);
    a3 = v38;
  }
  v27 = *(int *)(a3 + 20);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)v29;
  v31 = v29[8];
  sub_10000B2CC(*(_QWORD *)v29, v31);
  *(_QWORD *)v28 = v30;
  v28[8] = v31;
  return a1;
}

uint64_t sub_100051074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v70;
  const void *v71;
  unsigned int (*v72)(const void *, uint64_t, uint64_t);
  uint64_t v73;
  void *__dst;
  uint64_t v75;

  v6 = (int *)type metadata accessor for Note(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_10000AF68(a1, type metadata accessor for Note);
      goto LABEL_7;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v20 = *(_QWORD *)(a2 + 8);
    v21 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v21);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v22 = *(_QWORD *)(a2 + 24);
    v23 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease(v23);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v24 = *(_QWORD *)(a2 + 40);
    v25 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v25);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v26 = *(_QWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v26;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v28 = *(_QWORD *)(a2 + 72);
    v29 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v30 = *(_QWORD *)(a2 + 96);
    v31 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
    v32 = v6[11];
    v33 = (void *)(a1 + v32);
    v34 = (void *)(a2 + v32);
    v35 = type metadata accessor for URL(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37(v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_16:
        v50 = v6[12];
        v51 = *(_QWORD *)(a1 + v50);
        v52 = *(_QWORD *)(a2 + v50);
        *(_QWORD *)(a1 + v50) = v52;
        swift_retain(v52);
        swift_release(v51);
        v53 = v6[13];
        v54 = *(_QWORD *)(a2 + v53);
        v55 = *(_QWORD *)(a1 + v53);
        *(_QWORD *)(a1 + v53) = v54;
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRelease(v55);
        v56 = v6[14];
        v57 = *(_QWORD *)(a1 + v56);
        v58 = *(_QWORD *)(a2 + v56);
        *(_QWORD *)(a1 + v56) = v58;
        swift_retain(v58);
        swift_release(v57);
        v59 = v6[15];
        v60 = *(_QWORD *)(a1 + v59);
        v61 = *(_QWORD *)(a2 + v59);
        *(_QWORD *)(a1 + v59) = v61;
        swift_retain(v61);
        swift_release(v60);
        *(_BYTE *)(a1 + v6[16]) = *(_BYTE *)(a2 + v6[16]);
        goto LABEL_17;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 24))(v33, v34, v35);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
    }
    v49 = sub_100009F30(&qword_10008B170);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    v19 = sub_100009F30(&qword_10008D310);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_17;
  }
  v75 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v73 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v73;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v15;
  v16 = v6[11];
  __dst = (void *)(a1 + v16);
  v71 = (const void *)(a2 + v16);
  v17 = type metadata accessor for URL(0);
  v70 = *(_QWORD *)(v17 - 8);
  v72 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v70 + 48);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  if (v72(v71, 1, v17))
  {
    v18 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v71, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v70 + 16))(__dst, v71, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__dst, 0, 1, v17);
  }
  a3 = v75;
  v40 = v6[12];
  v41 = *(_QWORD *)(a2 + v40);
  *(_QWORD *)(a1 + v40) = v41;
  v42 = v6[13];
  v43 = *(_QWORD *)(a2 + v42);
  *(_QWORD *)(a1 + v42) = v43;
  v44 = v6[14];
  v45 = *(_QWORD *)(a2 + v44);
  *(_QWORD *)(a1 + v44) = v45;
  v46 = v6[15];
  v47 = *(_QWORD *)(a2 + v46);
  *(_QWORD *)(a1 + v46) = v47;
  *(_BYTE *)(a1 + v6[16]) = *(_BYTE *)(a2 + v6[16]);
  v48 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56);
  swift_retain(v41);
  swift_bridgeObjectRetain(v43);
  swift_retain(v45);
  swift_retain(v47);
  v48(a1, 0, 1, v6);
LABEL_17:
  v62 = *(int *)(a3 + 20);
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = *(_QWORD *)v64;
  v66 = *(_BYTE *)(v64 + 8);
  sub_10000B2CC(*(_QWORD *)v64, v66);
  v67 = *(_QWORD *)v63;
  v68 = *(_BYTE *)(v63 + 8);
  *(_QWORD *)v63 = v65;
  *(_BYTE *)(v63 + 8) = v66;
  sub_10000B470(v67, v68);
  return a1;
}

_OWORD *sub_100051538(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = (int *)type metadata accessor for Note(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100009F30(&qword_10008D310);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    a1[4] = a2[4];
    *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
    v11 = v6[11];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100009F30(&qword_10008B170);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    *(_QWORD *)((char *)a1 + v6[12]) = *(_QWORD *)((char *)a2 + v6[12]);
    *(_QWORD *)((char *)a1 + v6[13]) = *(_QWORD *)((char *)a2 + v6[13]);
    *(_QWORD *)((char *)a1 + v6[14]) = *(_QWORD *)((char *)a2 + v6[14]);
    *(_QWORD *)((char *)a1 + v6[15]) = *(_QWORD *)((char *)a2 + v6[15]);
    *((_BYTE *)a1 + v6[16]) = *((_BYTE *)a2 + v6[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v17 = *(int *)(a3 + 20);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  return a1;
}

uint64_t sub_1000516E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  v6 = (int *)type metadata accessor for Note(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_10000AF68(a1, type metadata accessor for Note);
      goto LABEL_7;
    }
    v20 = *(_QWORD *)(a2 + 8);
    v21 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v20;
    swift_bridgeObjectRelease(v21);
    v22 = *(_QWORD *)(a2 + 24);
    v23 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v22;
    swift_bridgeObjectRelease(v23);
    v24 = *(_QWORD *)(a2 + 40);
    v25 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v24;
    swift_bridgeObjectRelease(v25);
    v26 = *(_QWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v26;
    swift_bridgeObjectRelease(v27);
    v28 = *(_QWORD *)(a2 + 72);
    v29 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v28;
    swift_bridgeObjectRelease(v29);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v30 = *(_QWORD *)(a2 + 96);
    v31 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v30;
    swift_bridgeObjectRelease(v31);
    v32 = v6[11];
    v33 = (void *)(a1 + v32);
    v34 = (void *)(a2 + v32);
    v35 = type metadata accessor for URL(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37(v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_16:
        v41 = v6[12];
        v42 = *(_QWORD *)(a1 + v41);
        *(_QWORD *)(a1 + v41) = *(_QWORD *)(a2 + v41);
        swift_release(v42);
        v43 = v6[13];
        v44 = *(_QWORD *)(a1 + v43);
        *(_QWORD *)(a1 + v43) = *(_QWORD *)(a2 + v43);
        swift_bridgeObjectRelease(v44);
        v45 = v6[14];
        v46 = *(_QWORD *)(a1 + v45);
        *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
        swift_release(v46);
        v47 = v6[15];
        v48 = *(_QWORD *)(a1 + v47);
        *(_QWORD *)(a1 + v47) = *(_QWORD *)(a2 + v47);
        swift_release(v48);
        *(_BYTE *)(a1 + v6[16]) = *(_BYTE *)(a2 + v6[16]);
        goto LABEL_17;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 40))(v33, v34, v35);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
    }
    v40 = sub_100009F30(&qword_10008B170);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    v19 = sub_100009F30(&qword_10008D310);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_17;
  }
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v13 = v6[11];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100009F30(&qword_10008B170);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  *(_QWORD *)(a1 + v6[12]) = *(_QWORD *)(a2 + v6[12]);
  *(_QWORD *)(a1 + v6[13]) = *(_QWORD *)(a2 + v6[13]);
  *(_QWORD *)(a1 + v6[14]) = *(_QWORD *)(a2 + v6[14]);
  *(_QWORD *)(a1 + v6[15]) = *(_QWORD *)(a2 + v6[15]);
  *(_BYTE *)(a1 + v6[16]) = *(_BYTE *)(a2 + v6[16]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
LABEL_17:
  v49 = *(int *)(a3 + 20);
  v50 = a1 + v49;
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  LOBYTE(v51) = *((_BYTE *)v51 + 8);
  v53 = *(_QWORD *)v50;
  v54 = *(_BYTE *)(v50 + 8);
  *(_QWORD *)v50 = v52;
  *(_BYTE *)(v50 + 8) = (_BYTE)v51;
  sub_10000B470(v53, v54);
  return a1;
}

uint64_t sub_100051A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051A6C);
}

uint64_t sub_100051A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100009F30(&qword_10008D310);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100051AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100051AF8);
}

uint64_t sub_100051AF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100009F30(&qword_10008D310);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

void sub_100051B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100054AE0(a1, a2, a3, (unint64_t *)&unk_10008D7F8, type metadata accessor for Note, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional, (uint64_t)"\t");
}

unint64_t sub_100051B9C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *__dst;
  char *__dsta;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10000B2CC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (_QWORD *)(a1 + v9);
    v11 = (_QWORD *)(a2 + v9);
    v12 = (int *)type metadata accessor for NotesFolder(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_100009F30(&qword_10008B538);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v56 = v13;
      v16 = v11[1];
      *v10 = *v11;
      v10[1] = v16;
      v17 = v11[3];
      v10[2] = v11[2];
      v10[3] = v17;
      *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
      v18 = v11[6];
      v10[5] = v11[5];
      v10[6] = v18;
      v19 = v12[8];
      __dst = (char *)v10 + v19;
      v60 = (char *)v11 + v19;
      v20 = type metadata accessor for URL(0);
      v52 = *(_QWORD **)(v20 - 8);
      v58 = (unsigned int (*)(char *, uint64_t, uint64_t))v52[6];
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      if (v58(v60, 1, v20))
      {
        v21 = sub_100009F30(&qword_10008B170);
        memcpy(__dst, v60, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v52[2])(__dst, v60, v20);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v52[7])(__dst, 0, 1, v20);
      }
      v22 = v12[9];
      v23 = *(_QWORD *)((char *)v11 + v22);
      *(_QWORD *)((char *)v10 + v22) = v23;
      v24 = v12[10];
      v25 = *(_QWORD *)((char *)v11 + v24);
      *(_QWORD *)((char *)v10 + v24) = v25;
      v26 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v56 + 56);
      swift_retain(v23);
      swift_bridgeObjectRetain(v25);
      v26(v10, 0, 1, v12);
    }
    v27 = *(int *)(a3 + 24);
    v28 = (_QWORD *)(a1 + v27);
    v29 = (_QWORD *)(a2 + v27);
    v30 = (int *)type metadata accessor for Note(0);
    v31 = *((_QWORD *)v30 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_100009F30(&qword_10008D310);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v33 = v29[1];
      *v28 = *v29;
      v28[1] = v33;
      v34 = v29[3];
      v28[2] = v29[2];
      v28[3] = v34;
      v35 = v29[5];
      v28[4] = v29[4];
      v28[5] = v35;
      v59 = v29[7];
      v61 = v31;
      v28[6] = v29[6];
      v28[7] = v59;
      v36 = v29[9];
      v28[8] = v29[8];
      v28[9] = v36;
      *((_BYTE *)v28 + 80) = *((_BYTE *)v29 + 80);
      v37 = v29[12];
      v28[11] = v29[11];
      v28[12] = v37;
      v38 = v30[11];
      v53 = (char *)v28 + v38;
      __dsta = (char *)v29 + v38;
      v39 = type metadata accessor for URL(0);
      v51 = *(_QWORD *)(v39 - 8);
      v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      if (v57(__dsta, 1, v39))
      {
        v40 = sub_100009F30(&qword_10008B170);
        memcpy(v53, __dsta, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v53, __dsta, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v53, 0, 1, v39);
      }
      v41 = v30[12];
      v42 = *(_QWORD *)((char *)v29 + v41);
      *(_QWORD *)((char *)v28 + v41) = v42;
      v43 = v30[13];
      v44 = *(_QWORD *)((char *)v29 + v43);
      *(_QWORD *)((char *)v28 + v43) = v44;
      v45 = v30[14];
      v46 = *(_QWORD *)((char *)v29 + v45);
      *(_QWORD *)((char *)v28 + v45) = v46;
      v47 = v30[15];
      v48 = *(_QWORD *)((char *)v29 + v47);
      *(_QWORD *)((char *)v28 + v47) = v48;
      *((_BYTE *)v28 + v30[16]) = *((_BYTE *)v29 + v30[16]);
      v49 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v61 + 56);
      swift_retain(v42);
      swift_bridgeObjectRetain(v44);
      swift_retain(v46);
      swift_retain(v48);
      v49(v28, 0, 1, v30);
    }
  }
  return a1;
}

uint64_t sub_100051F7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t result;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  sub_10000B470(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = (int *)type metadata accessor for NotesFolder(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease(v4[1]);
    swift_bridgeObjectRelease(v4[3]);
    swift_bridgeObjectRelease(v4[6]);
    v6 = (char *)v4 + v5[8];
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    swift_release(*(_QWORD *)((char *)v4 + v5[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v5[10]));
  }
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v10 = (int *)type metadata accessor for Note(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v9[1]);
    swift_bridgeObjectRelease(v9[3]);
    swift_bridgeObjectRelease(v9[5]);
    swift_bridgeObjectRelease(v9[7]);
    swift_bridgeObjectRelease(v9[9]);
    swift_bridgeObjectRelease(v9[12]);
    v12 = (char *)v9 + v10[11];
    v13 = type metadata accessor for URL(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    swift_release(*(_QWORD *)((char *)v9 + v10[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + v10[13]));
    swift_release(*(_QWORD *)((char *)v9 + v10[14]));
    return swift_release(*(_QWORD *)((char *)v9 + v10[15]));
  }
  return result;
}

uint64_t sub_100052144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  char *v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  char *__dst;
  char *__dsta;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10000B2CC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = (int *)type metadata accessor for NotesFolder(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100009F30(&qword_10008B538);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v58 = a3;
    v60 = a1;
    v14 = v10[1];
    *v9 = *v10;
    v9[1] = v14;
    v15 = v10[3];
    v9[2] = v10[2];
    v9[3] = v15;
    *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
    v16 = v10[6];
    v9[5] = v10[5];
    v9[6] = v16;
    v17 = v11[8];
    v54 = (char *)v10 + v17;
    __dst = (char *)v9 + v17;
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    if (v52(v54, 1, v18))
    {
      v20 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v54, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v54, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    v21 = v11[9];
    v22 = *(_QWORD *)((char *)v10 + v21);
    *(_QWORD *)((char *)v9 + v21) = v22;
    v23 = v11[10];
    v24 = *(_QWORD *)((char *)v10 + v23);
    *(_QWORD *)((char *)v9 + v23) = v24;
    v25 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v12 + 56);
    swift_retain(v22);
    swift_bridgeObjectRetain(v24);
    v25(v9, 0, 1, v11);
    a3 = v58;
    a1 = v60;
  }
  v26 = *(int *)(a3 + 24);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = (int *)type metadata accessor for Note(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_100009F30(&qword_10008D310);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v59 = v30;
    v61 = a1;
    v32 = v28[1];
    *v27 = *v28;
    v27[1] = v32;
    v33 = v28[3];
    v27[2] = v28[2];
    v27[3] = v33;
    v34 = v28[5];
    v27[4] = v28[4];
    v27[5] = v34;
    v35 = v28[7];
    v27[6] = v28[6];
    v27[7] = v35;
    v36 = v28[9];
    v27[8] = v28[8];
    v27[9] = v36;
    *((_BYTE *)v27 + 80) = *((_BYTE *)v28 + 80);
    v37 = v28[12];
    v27[11] = v28[11];
    v27[12] = v37;
    v38 = v29[11];
    __dsta = (char *)v27 + v38;
    v53 = (char *)v28 + v38;
    v39 = type metadata accessor for URL(0);
    v51 = *(_QWORD *)(v39 - 8);
    v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    if (v55(v53, 1, v39))
    {
      v40 = sub_100009F30(&qword_10008B170);
      memcpy(__dsta, v53, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(__dsta, v53, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(__dsta, 0, 1, v39);
    }
    v41 = v29[12];
    v42 = *(_QWORD *)((char *)v28 + v41);
    *(_QWORD *)((char *)v27 + v41) = v42;
    v43 = v29[13];
    v44 = *(_QWORD *)((char *)v28 + v43);
    *(_QWORD *)((char *)v27 + v43) = v44;
    v45 = v29[14];
    v46 = *(_QWORD *)((char *)v28 + v45);
    *(_QWORD *)((char *)v27 + v45) = v46;
    v47 = v29[15];
    v48 = *(_QWORD *)((char *)v28 + v47);
    *(_QWORD *)((char *)v27 + v47) = v48;
    *((_BYTE *)v27 + v29[16]) = *((_BYTE *)v28 + v29[16]);
    v49 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v59 + 56);
    swift_retain(v42);
    swift_bridgeObjectRetain(v44);
    swift_retain(v46);
    swift_retain(v48);
    v49(v27, 0, 1, v29);
    return v61;
  }
  return a1;
}

uint64_t sub_1000524FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, int *);
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(void *, uint64_t, uint64_t);
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  const void *v114;
  unsigned int (*v115)(const void *, uint64_t, uint64_t);
  unsigned int (*v116)(const void *, uint64_t, uint64_t);
  void *__dst;
  void *__dsta;
  int *v119;
  int *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10000B2CC(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10000B470(v8, v9);
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = (int *)type metadata accessor for NotesFolder(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      sub_10000AF68(v11, type metadata accessor for NotesFolder);
      goto LABEL_7;
    }
    v120 = a3;
    v123 = a1;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v26 = *(_QWORD *)(v12 + 8);
    v27 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v26;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
    v28 = *(_QWORD *)(v12 + 24);
    v29 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
    *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
    *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
    v30 = *(_QWORD *)(v12 + 48);
    v31 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)(v11 + 48) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
    v32 = v13[8];
    v33 = (void *)(v11 + v32);
    v34 = (void *)(v12 + v32);
    v35 = type metadata accessor for URL(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37(v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_16:
        a1 = v123;
        v46 = v13[9];
        v47 = *(_QWORD *)(v12 + v46);
        v48 = *(_QWORD *)(v11 + v46);
        *(_QWORD *)(v11 + v46) = v47;
        swift_retain(v47);
        swift_release(v48);
        v49 = v13[10];
        v50 = *(_QWORD *)(v12 + v49);
        v51 = *(_QWORD *)(v11 + v49);
        *(_QWORD *)(v11 + v49) = v50;
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRelease(v51);
        a3 = v120;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 24))(v33, v34, v35);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
    }
    v45 = sub_100009F30(&qword_10008B170);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_16;
  }
  if (v17)
  {
LABEL_7:
    v25 = sub_100009F30(&qword_10008B538);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_17;
  }
  v119 = a3;
  v122 = a1;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v18 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v11 + 8) = v18;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  v19 = *(_QWORD *)(v12 + 24);
  *(_QWORD *)(v11 + 24) = v19;
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  v20 = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v11 + 48) = v20;
  v21 = v13[8];
  __dst = (void *)(v11 + v21);
  v22 = (const void *)(v12 + v21);
  v23 = type metadata accessor for URL(0);
  v113 = *(_QWORD *)(v23 - 8);
  v115 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v113 + 48);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  if (v115(v22, 1, v23))
  {
    v24 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v113 + 16))(__dst, v22, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v113 + 56))(__dst, 0, 1, v23);
  }
  a3 = v119;
  a1 = v122;
  v40 = v13[9];
  v41 = *(_QWORD *)(v12 + v40);
  *(_QWORD *)(v11 + v40) = v41;
  v42 = v13[10];
  v43 = *(_QWORD *)(v12 + v42);
  *(_QWORD *)(v11 + v42) = v43;
  v44 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56);
  swift_retain(v41);
  swift_bridgeObjectRetain(v43);
  v44(v11, 0, 1, v13);
LABEL_17:
  v52 = a3[6];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = (int *)type metadata accessor for Note(0);
  v56 = *((_QWORD *)v55 - 1);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (v59)
    {
      sub_10000AF68(v53, type metadata accessor for Note);
      goto LABEL_23;
    }
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v69 = *(_QWORD *)(v54 + 8);
    v70 = *(_QWORD *)(v53 + 8);
    *(_QWORD *)(v53 + 8) = v69;
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRelease(v70);
    *(_QWORD *)(v53 + 16) = *(_QWORD *)(v54 + 16);
    v71 = *(_QWORD *)(v54 + 24);
    v72 = *(_QWORD *)(v53 + 24);
    *(_QWORD *)(v53 + 24) = v71;
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRelease(v72);
    *(_QWORD *)(v53 + 32) = *(_QWORD *)(v54 + 32);
    v73 = *(_QWORD *)(v54 + 40);
    v74 = *(_QWORD *)(v53 + 40);
    *(_QWORD *)(v53 + 40) = v73;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRelease(v74);
    *(_QWORD *)(v53 + 48) = *(_QWORD *)(v54 + 48);
    v75 = *(_QWORD *)(v54 + 56);
    v76 = *(_QWORD *)(v53 + 56);
    *(_QWORD *)(v53 + 56) = v75;
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRelease(v76);
    *(_QWORD *)(v53 + 64) = *(_QWORD *)(v54 + 64);
    v77 = *(_QWORD *)(v54 + 72);
    v78 = *(_QWORD *)(v53 + 72);
    *(_QWORD *)(v53 + 72) = v77;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRelease(v78);
    *(_BYTE *)(v53 + 80) = *(_BYTE *)(v54 + 80);
    *(_QWORD *)(v53 + 88) = *(_QWORD *)(v54 + 88);
    v79 = *(_QWORD *)(v54 + 96);
    v80 = *(_QWORD *)(v53 + 96);
    *(_QWORD *)(v53 + 96) = v79;
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRelease(v80);
    v81 = v55[11];
    v82 = (void *)(v53 + v81);
    v83 = (void *)(v54 + v81);
    v84 = type metadata accessor for URL(0);
    v85 = *(_QWORD *)(v84 - 8);
    v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v85 + 48);
    v87 = v86(v82, 1, v84);
    v88 = v86(v83, 1, v84);
    if (v87)
    {
      if (!v88)
      {
        (*(void (**)(void *, void *, uint64_t))(v85 + 16))(v82, v83, v84);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
LABEL_32:
        v99 = v55[12];
        v100 = *(_QWORD *)(v53 + v99);
        v101 = *(_QWORD *)(v54 + v99);
        *(_QWORD *)(v53 + v99) = v101;
        swift_retain(v101);
        swift_release(v100);
        v102 = v55[13];
        v103 = *(_QWORD *)(v54 + v102);
        v104 = *(_QWORD *)(v53 + v102);
        *(_QWORD *)(v53 + v102) = v103;
        swift_bridgeObjectRetain(v103);
        swift_bridgeObjectRelease(v104);
        v105 = v55[14];
        v106 = *(_QWORD *)(v53 + v105);
        v107 = *(_QWORD *)(v54 + v105);
        *(_QWORD *)(v53 + v105) = v107;
        swift_retain(v107);
        swift_release(v106);
        v108 = v55[15];
        v109 = *(_QWORD *)(v53 + v108);
        v110 = *(_QWORD *)(v54 + v108);
        *(_QWORD *)(v53 + v108) = v110;
        swift_retain(v110);
        swift_release(v109);
        *(_BYTE *)(v53 + v55[16]) = *(_BYTE *)(v54 + v55[16]);
        return a1;
      }
    }
    else
    {
      if (!v88)
      {
        (*(void (**)(void *, void *, uint64_t))(v85 + 24))(v82, v83, v84);
        goto LABEL_32;
      }
      (*(void (**)(void *, uint64_t))(v85 + 8))(v82, v84);
    }
    v98 = sub_100009F30(&qword_10008B170);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_32;
  }
  if (v59)
  {
LABEL_23:
    v68 = sub_100009F30(&qword_10008D310);
    memcpy((void *)v53, (const void *)v54, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    return a1;
  }
  v124 = a1;
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v60 = *(_QWORD *)(v54 + 8);
  *(_QWORD *)(v53 + 8) = v60;
  *(_QWORD *)(v53 + 16) = *(_QWORD *)(v54 + 16);
  v61 = *(_QWORD *)(v54 + 24);
  *(_QWORD *)(v53 + 24) = v61;
  *(_QWORD *)(v53 + 32) = *(_QWORD *)(v54 + 32);
  v62 = *(_QWORD *)(v54 + 40);
  *(_QWORD *)(v53 + 40) = v62;
  *(_QWORD *)(v53 + 48) = *(_QWORD *)(v54 + 48);
  v63 = *(_QWORD *)(v54 + 56);
  *(_QWORD *)(v53 + 56) = v63;
  *(_QWORD *)(v53 + 64) = *(_QWORD *)(v54 + 64);
  __dsta = *(void **)(v54 + 72);
  *(_QWORD *)(v53 + 72) = __dsta;
  *(_BYTE *)(v53 + 80) = *(_BYTE *)(v54 + 80);
  *(_QWORD *)(v53 + 88) = *(_QWORD *)(v54 + 88);
  v64 = *(_QWORD *)(v54 + 96);
  *(_QWORD *)(v53 + 96) = v64;
  v65 = v55[11];
  v121 = (void *)(v53 + v65);
  v114 = (const void *)(v54 + v65);
  v66 = type metadata accessor for URL(0);
  v112 = *(_QWORD *)(v66 - 8);
  v116 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v112 + 48);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(__dsta);
  swift_bridgeObjectRetain(v64);
  if (v116(v114, 1, v66))
  {
    v67 = sub_100009F30(&qword_10008B170);
    memcpy(v121, v114, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v112 + 16))(v121, v114, v66);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v121, 0, 1, v66);
  }
  a1 = v124;
  v89 = v55[12];
  v90 = *(_QWORD *)(v54 + v89);
  *(_QWORD *)(v53 + v89) = v90;
  v91 = v55[13];
  v92 = *(_QWORD *)(v54 + v91);
  *(_QWORD *)(v53 + v91) = v92;
  v93 = v55[14];
  v94 = *(_QWORD *)(v54 + v93);
  *(_QWORD *)(v53 + v93) = v94;
  v95 = v55[15];
  v96 = *(_QWORD *)(v54 + v95);
  *(_QWORD *)(v53 + v95) = v96;
  *(_BYTE *)(v53 + v55[16]) = *(_BYTE *)(v54 + v55[16]);
  v97 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v56 + 56);
  swift_retain(v90);
  swift_bridgeObjectRetain(v92);
  swift_retain(v94);
  swift_retain(v96);
  v97(v53, 0, 1, v55);
  return a1;
}

uint64_t sub_100052CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *__dst;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for NotesFolder(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100009F30(&qword_10008B538);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
    *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
    v13 = v9[8];
    __dst = (char *)v7 + v13;
    v14 = (char *)v8 + v13;
    v15 = type metadata accessor for URL(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_QWORD *)((char *)v7 + v9[9]) = *(_QWORD *)((char *)v8 + v9[9]);
    *(_QWORD *)((char *)v7 + v9[10]) = *(_QWORD *)((char *)v8 + v9[10]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v18 = *(int *)(a3 + 24);
  v19 = (_OWORD *)(a1 + v18);
  v20 = (_OWORD *)(a2 + v18);
  v21 = (int *)type metadata accessor for Note(0);
  v22 = *((_QWORD *)v21 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_100009F30(&qword_10008D310);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = v20[1];
    *v19 = *v20;
    v19[1] = v24;
    v25 = v20[3];
    v19[2] = v20[2];
    v19[3] = v25;
    v19[4] = v20[4];
    *((_BYTE *)v19 + 80) = *((_BYTE *)v20 + 80);
    *(_OWORD *)((char *)v19 + 88) = *(_OWORD *)((char *)v20 + 88);
    v26 = v21[11];
    v27 = (char *)v19 + v26;
    v28 = (char *)v20 + v26;
    v29 = type metadata accessor for URL(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_100009F30(&qword_10008B170);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    *(_QWORD *)((char *)v19 + v21[12]) = *(_QWORD *)((char *)v20 + v21[12]);
    *(_QWORD *)((char *)v19 + v21[13]) = *(_QWORD *)((char *)v20 + v21[13]);
    *(_QWORD *)((char *)v19 + v21[14]) = *(_QWORD *)((char *)v20 + v21[14]);
    *(_QWORD *)((char *)v19 + v21[15]) = *(_QWORD *)((char *)v20 + v21[15]);
    *((_BYTE *)v19 + v21[16]) = *((_BYTE *)v20 + v21[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_100052FD0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, int *);
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void *, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  void *__dst;
  void *__dsta;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10000B470(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = (int *)type metadata accessor for NotesFolder(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      sub_10000AF68(v11, type metadata accessor for NotesFolder);
      goto LABEL_7;
    }
    v25 = *(_QWORD *)(v12 + 8);
    v26 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_QWORD *)(v11 + 8) = v25;
    swift_bridgeObjectRelease(v26);
    v27 = *(_QWORD *)(v12 + 24);
    v28 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(v11 + 24) = v27;
    swift_bridgeObjectRelease(v28);
    *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
    *(_QWORD *)(v11 + 48) = v29;
    swift_bridgeObjectRelease(v30);
    v31 = v13[8];
    v32 = (void *)(v11 + v31);
    v33 = (void *)(v12 + v31);
    v34 = type metadata accessor for URL(0);
    v90 = *(_QWORD *)(v34 - 8);
    v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v90 + 48);
    __dsta = v32;
    LODWORD(v32) = v35(v32, 1, v34);
    v36 = v35(v33, 1, v34);
    if ((_DWORD)v32)
    {
      if (!v36)
      {
        (*(void (**)(void *, void *, uint64_t))(v90 + 32))(__dsta, v33, v34);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v90 + 56))(__dsta, 0, 1, v34);
        goto LABEL_18;
      }
      v37 = *(_QWORD *)(*(_QWORD *)(sub_100009F30(&qword_10008B170) - 8) + 64);
      v38 = __dsta;
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(void *, void *, uint64_t))(v90 + 40))(__dsta, v33, v34);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v90 + 8))(__dsta, v34);
      v37 = *(_QWORD *)(*(_QWORD *)(sub_100009F30(&qword_10008B170) - 8) + 64);
      v38 = __dsta;
    }
    memcpy(v38, v33, v37);
LABEL_18:
    v39 = v13[9];
    v40 = *(_QWORD *)(v11 + v39);
    *(_QWORD *)(v11 + v39) = *(_QWORD *)(v12 + v39);
    swift_release(v40);
    v41 = v13[10];
    v42 = *(_QWORD *)(v11 + v41);
    *(_QWORD *)(v11 + v41) = *(_QWORD *)(v12 + v41);
    swift_bridgeObjectRelease(v42);
    goto LABEL_19;
  }
  if (v17)
  {
LABEL_7:
    v24 = sub_100009F30(&qword_10008B538);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  v18 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v18;
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
  v19 = v13[8];
  __dst = (void *)(v11 + v19);
  v20 = (const void *)(v12 + v19);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(__dst, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
  }
  *(_QWORD *)(v11 + v13[9]) = *(_QWORD *)(v12 + v13[9]);
  *(_QWORD *)(v11 + v13[10]) = *(_QWORD *)(v12 + v13[10]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_19:
  v43 = *(int *)(a3 + 24);
  v44 = a1 + v43;
  v45 = (uint64_t)a2 + v43;
  v46 = (int *)type metadata accessor for Note(0);
  v47 = *((_QWORD *)v46 - 1);
  v48 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (v50)
    {
      sub_10000AF68(v44, type metadata accessor for Note);
      goto LABEL_25;
    }
    v60 = *(_QWORD *)(v45 + 8);
    v61 = *(_QWORD *)(v44 + 8);
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_QWORD *)(v44 + 8) = v60;
    swift_bridgeObjectRelease(v61);
    v62 = *(_QWORD *)(v45 + 24);
    v63 = *(_QWORD *)(v44 + 24);
    *(_QWORD *)(v44 + 16) = *(_QWORD *)(v45 + 16);
    *(_QWORD *)(v44 + 24) = v62;
    swift_bridgeObjectRelease(v63);
    v64 = *(_QWORD *)(v45 + 40);
    v65 = *(_QWORD *)(v44 + 40);
    *(_QWORD *)(v44 + 32) = *(_QWORD *)(v45 + 32);
    *(_QWORD *)(v44 + 40) = v64;
    swift_bridgeObjectRelease(v65);
    v66 = *(_QWORD *)(v45 + 56);
    v67 = *(_QWORD *)(v44 + 56);
    *(_QWORD *)(v44 + 48) = *(_QWORD *)(v45 + 48);
    *(_QWORD *)(v44 + 56) = v66;
    swift_bridgeObjectRelease(v67);
    v68 = *(_QWORD *)(v45 + 72);
    v69 = *(_QWORD *)(v44 + 72);
    *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
    *(_QWORD *)(v44 + 72) = v68;
    swift_bridgeObjectRelease(v69);
    *(_BYTE *)(v44 + 80) = *(_BYTE *)(v45 + 80);
    v70 = *(_QWORD *)(v45 + 96);
    v71 = *(_QWORD *)(v44 + 96);
    *(_QWORD *)(v44 + 88) = *(_QWORD *)(v45 + 88);
    *(_QWORD *)(v44 + 96) = v70;
    swift_bridgeObjectRelease(v71);
    v72 = v46[11];
    v73 = (void *)(v44 + v72);
    v74 = (void *)(v45 + v72);
    v75 = type metadata accessor for URL(0);
    v76 = *(_QWORD *)(v75 - 8);
    v77 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
    v78 = v77(v73, 1, v75);
    v79 = v77(v74, 1, v75);
    if (v78)
    {
      if (!v79)
      {
        (*(void (**)(void *, void *, uint64_t))(v76 + 32))(v73, v74, v75);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_34:
        v81 = v46[12];
        v82 = *(_QWORD *)(v44 + v81);
        *(_QWORD *)(v44 + v81) = *(_QWORD *)(v45 + v81);
        swift_release(v82);
        v83 = v46[13];
        v84 = *(_QWORD *)(v44 + v83);
        *(_QWORD *)(v44 + v83) = *(_QWORD *)(v45 + v83);
        swift_bridgeObjectRelease(v84);
        v85 = v46[14];
        v86 = *(_QWORD *)(v44 + v85);
        *(_QWORD *)(v44 + v85) = *(_QWORD *)(v45 + v85);
        swift_release(v86);
        v87 = v46[15];
        v88 = *(_QWORD *)(v44 + v87);
        *(_QWORD *)(v44 + v87) = *(_QWORD *)(v45 + v87);
        swift_release(v88);
        *(_BYTE *)(v44 + v46[16]) = *(_BYTE *)(v45 + v46[16]);
        return a1;
      }
    }
    else
    {
      if (!v79)
      {
        (*(void (**)(void *, void *, uint64_t))(v76 + 40))(v73, v74, v75);
        goto LABEL_34;
      }
      (*(void (**)(void *, uint64_t))(v76 + 8))(v73, v75);
    }
    v80 = sub_100009F30(&qword_10008B170);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_34;
  }
  if (v50)
  {
LABEL_25:
    v59 = sub_100009F30(&qword_10008D310);
    memcpy((void *)v44, (const void *)v45, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    return a1;
  }
  v51 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v51;
  v52 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v44 + 48) = v52;
  *(_OWORD *)(v44 + 64) = *(_OWORD *)(v45 + 64);
  *(_BYTE *)(v44 + 80) = *(_BYTE *)(v45 + 80);
  *(_OWORD *)(v44 + 88) = *(_OWORD *)(v45 + 88);
  v53 = v46[11];
  v54 = (void *)(v44 + v53);
  v55 = (const void *)(v45 + v53);
  v56 = type metadata accessor for URL(0);
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = sub_100009F30(&qword_10008B170);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v57 + 32))(v54, v55, v56);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  *(_QWORD *)(v44 + v46[12]) = *(_QWORD *)(v45 + v46[12]);
  *(_QWORD *)(v44 + v46[13]) = *(_QWORD *)(v45 + v46[13]);
  *(_QWORD *)(v44 + v46[14]) = *(_QWORD *)(v45 + v46[14]);
  *(_QWORD *)(v44 + v46[15]) = *(_QWORD *)(v45 + v46[15]);
  *(_BYTE *)(v44 + v46[16]) = *(_BYTE *)(v45 + v46[16]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v47 + 56))(v44, 0, 1, v46);
  return a1;
}

uint64_t sub_100053604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100053610);
}

uint64_t sub_100053610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100009F30(&qword_10008B538);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_100009F30(&qword_10008D310);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000536B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000536BC);
}

uint64_t sub_1000536BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_100009F30(&qword_10008B538);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100009F30(&qword_10008D310);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10005375C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = "\t";
  sub_10000C2F0(319, (unint64_t *)&unk_10008D928, type metadata accessor for NotesFolder, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000C2F0(319, (unint64_t *)&unk_10008D7F8, type metadata accessor for Note, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_10005381C()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;

  v0 = sub_10000AE50(&qword_10008D3D8);
  v3 = sub_10000AE50(&qword_10008D3D0);
  v4 = &type metadata for Color;
  v5 = sub_10004D928();
  v6 = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v3 = v0;
  v4 = (void *)OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.privacySensitive(_:)>>, 1);
}

uint64_t sub_1000538A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F918, 1);
}

uint64_t sub_1000538B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F8F0, 1);
}

uint64_t sub_1000538C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F8C8, 1);
}

unint64_t sub_1000538D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008D980;
  if (!qword_10008D980)
  {
    v1 = sub_10000AE50(&qword_10008D968);
    sub_10000CC08(&qword_10008D988, &qword_10008D960, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008D980);
  }
  return result;
}

uint64_t type metadata accessor for NotesFolderWidgetView.Thumbnail(uint64_t a1)
{
  return sub_10000AD34(a1, qword_10008DB58, (uint64_t)&nominal type descriptor for NotesFolderWidgetView.Thumbnail);
}

BOOL sub_100053974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a1, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a2, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 < v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 < v17;
}

unint64_t sub_100053CFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DA58;
  if (!qword_10008DA58)
  {
    v1 = sub_10000AE50(&qword_10008DA40);
    sub_10000CC08(&qword_10008DA60, &qword_10008DA38, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DA58);
  }
  return result;
}

unint64_t sub_100053D80()
{
  unint64_t result;

  result = qword_10008DA68;
  if (!qword_10008DA68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10008DA68);
  }
  return result;
}

_QWORD *sub_100053DC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  swift_retain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t *sub_100053E08(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  swift_release(a1[2]);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t sub_100053E4C()
{
  return sub_100028918(&qword_10008DA90, &qword_10008DA98, (void (*)(void))sub_100053E70);
}

unint64_t sub_100053E70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DAA0;
  if (!qword_10008DAA0)
  {
    v1 = sub_10000AE50(&qword_10008DAA8);
    sub_10000CC08(&qword_10008DAB0, &qword_10008DAB8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DAA0);
  }
  return result;
}

_QWORD *sub_100053EF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = a1[10];
  v4 = a1[11];
  v5 = a1[17];
  swift_release(a1[14]);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_100053F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10000B470(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = (int *)type metadata accessor for NotesFolder(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
  {
    v17 = v5;
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[3]);
    swift_bridgeObjectRelease(v6[6]);
    v8 = (char *)v6 + v7[8];
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    swift_release(*(_QWORD *)((char *)v6 + v7[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v7[10]));
    v5 = v17;
  }
  v11 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v12 = (int *)type metadata accessor for Note(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease(v11[1]);
    swift_bridgeObjectRelease(v11[3]);
    swift_bridgeObjectRelease(v11[5]);
    swift_bridgeObjectRelease(v11[7]);
    swift_bridgeObjectRelease(v11[9]);
    swift_bridgeObjectRelease(v11[12]);
    v13 = (char *)v11 + v12[11];
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    swift_release(*(_QWORD *)((char *)v11 + v12[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + v12[13]));
    swift_release(*(_QWORD *)((char *)v11 + v12[14]));
    swift_release(*(_QWORD *)((char *)v11 + v12[15]));
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10005414C(uint64_t a1)
{
  return sub_100054160(a1, type metadata accessor for NotesFolderWidgetView.SmallNoteRow, (uint64_t (*)(uint64_t, uint64_t))sub_10004A940);
}

uint64_t sub_100054160(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t sub_1000541BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = type metadata accessor for GeometryProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v35 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v35 + 16) & ~v35;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0);
  v6 = *(_QWORD *)(v5 - 8);
  v34 = *(unsigned __int8 *)(v6 + 80);
  v7 = (v3 + v4 + v34) & ~v34;
  v8 = *(_QWORD *)(v6 + 64);
  v9 = (int *)type metadata accessor for Note(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = v0;
  v14 = v7 + v12;
  v33 = *(_QWORD *)(v10 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13 + v3, v1);
  v15 = v13 + v7;
  sub_10000B470(*(_QWORD *)(v13 + v7), *(_BYTE *)(v13 + v7 + 8));
  v16 = (_QWORD *)(v13 + v7 + *(int *)(v5 + 20));
  v17 = (int *)type metadata accessor for NotesFolder(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v17 - 1) + 48))(v16, 1, v17))
  {
    v31 = v14;
    v32 = v13;
    swift_bridgeObjectRelease(v16[1]);
    swift_bridgeObjectRelease(v16[3]);
    swift_bridgeObjectRelease(v16[6]);
    v18 = (char *)v16 + v17[8];
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
    swift_release(*(_QWORD *)((char *)v16 + v17[9]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[10]));
    v13 = v32;
    v14 = v31;
  }
  v21 = v14 & ~v11;
  v22 = (_QWORD *)(v15 + *(int *)(v5 + 24));
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(v10 + 48))(v22, 1, v9))
  {
    swift_bridgeObjectRelease(v22[1]);
    swift_bridgeObjectRelease(v22[3]);
    swift_bridgeObjectRelease(v22[5]);
    swift_bridgeObjectRelease(v22[7]);
    swift_bridgeObjectRelease(v22[9]);
    swift_bridgeObjectRelease(v22[12]);
    v23 = (char *)v22 + v9[11];
    v24 = type metadata accessor for URL(0);
    v25 = *(_QWORD *)(v24 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
    swift_release(*(_QWORD *)((char *)v22 + v9[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v22 + v9[13]));
    swift_release(*(_QWORD *)((char *)v22 + v9[14]));
    swift_release(*(_QWORD *)((char *)v22 + v9[15]));
  }
  v26 = v13 + v21;
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v21 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v21 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v21 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v21 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v21 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v21 + 96));
  v27 = v13 + v21 + v9[11];
  v28 = type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v28 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  swift_release(*(_QWORD *)(v26 + v9[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(v26 + v9[13]));
  swift_release(*(_QWORD *)(v26 + v9[14]));
  swift_release(*(_QWORD *)(v26 + v9[15]));
  return swift_deallocObject(v13, v21 + v33, v35 | v34 | v11 | 7);
}

uint64_t sub_1000544CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for NotesFolderWidgetView.SmallNoteRow(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Note(0) - 8) + 80);
  return sub_10004B4D4(v1 + v7, v1 + ((v7 + v8 + v9) & ~v9), a1);
}

uint64_t *sub_100054568(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100009F30(&qword_10008B258);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v12 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v12;
  }
  swift_retain(v12);
  return a1;
}

uint64_t sub_100054640(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100009F30(&qword_10008B258);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
}

uint64_t *sub_1000546B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100009F30(&qword_10008B258);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_retain(v13);
  return a1;
}

uint64_t *sub_100054760(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_10000CCD8((uint64_t)a1, &qword_10008B258);
    v6 = sub_100009F30(&qword_10008B258);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(uint64_t *)((char *)a2 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

char *sub_100054834(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100009F30(&qword_10008B258);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000548DC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_10000CCD8((uint64_t)a1, &qword_10008B258);
    v6 = sub_100009F30(&qword_10008B258);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v9);
  return a1;
}

uint64_t sub_1000549A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000549B0);
}

uint64_t sub_1000549B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100009F30(&qword_10008B268);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100054A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054A3C);
}

uint64_t sub_100054A3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100009F30(&qword_10008B268);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void sub_100054AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100054AE0(a1, a2, a3, &qword_10008B2E0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content, (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

void sub_100054AE0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];

  sub_10000C2F0(319, a4, a5, a6);
  if (v10 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(v9 - 8) + 64;
    v11[1] = a7;
    swift_initStructMetadata(a1, 256, 2, v11, a1 + 16);
  }
}

uint64_t sub_100054B58(uint64_t a1)
{
  return sub_100054B80(a1, &qword_10008D968, (uint64_t (*)(void))sub_1000538D4);
}

uint64_t sub_100054B6C(uint64_t a1)
{
  return sub_100054B80(a1, &qword_10008DA40, (uint64_t (*)(void))sub_100053CFC);
}

uint64_t sub_100054B80(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  _QWORD v5[2];

  v5[0] = sub_10000AE50(a2);
  v5[1] = a3();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
}

uint64_t sub_100054BCC()
{
  _QWORD v1[2];

  v1[0] = sub_10000AE50(&qword_10008DA80);
  v1[1] = sub_100028918(&qword_10008DA88, &qword_10008DA80, (void (*)(void))sub_100053E4C);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.maximumSizeCategory(_:)>>, 1);
}

uint64_t sub_100054C38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F940, 1);
}

unint64_t sub_100054C4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DBE8;
  if (!qword_10008DBE8)
  {
    v1 = sub_10000AE50(&qword_10008DBB8);
    sub_100054CD0();
    sub_10000CC08(&qword_10008DC08, &qword_10008DBE0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DBE8);
  }
  return result;
}

unint64_t sub_100054CD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DBF0;
  if (!qword_10008DBF0)
  {
    v1 = sub_10000AE50(&qword_10008DBB0);
    sub_100054D54();
    sub_10000CC08(&qword_10008DC00, &qword_10008DBC0, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DBF0);
  }
  return result;
}

unint64_t sub_100054D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DBF8;
  if (!qword_10008DBF8)
  {
    v1 = sub_10000AE50(&qword_10008DBA8);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.squareCrop()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DBF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for NotesFolderWidget()
{
  return &type metadata for NotesFolderWidget;
}

uint64_t sub_100054DDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006F984, 1);
}

uint64_t sub_100054DEC()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100054E0C()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_100054E2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.sizeCategory.setter(v4);
}

uint64_t sub_100054EA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v62 = a1;
  v1 = sub_100009F30(&qword_10008DC10);
  v56 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008DC18);
  v5 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  v59 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008DC20);
  v9 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  v61 = v9;
  __chkstk_darwin(v8);
  v57 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICWidgetKindNotesFolder);
  v13 = v12;
  v14 = sub_100055454();
  v15 = type metadata accessor for NotesFolderTimelineProvider();
  v16 = swift_allocObject(v15, 24, 7);
  *(_QWORD *)(v16 + 16) = 16;
  v63 = v16;
  v17 = type metadata accessor for NotesFolderWidgetView(0);
  v18 = sub_10000C5FC(&qword_10008DC30, type metadata accessor for NotesFolderWidgetView, (uint64_t)&unk_10006B2A0);
  v19 = sub_10000C5FC(&qword_10008DC38, (uint64_t (*)(uint64_t))type metadata accessor for NotesFolderTimelineProvider, (uint64_t)&unk_10006ACFC);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(v11, v13, v14, &v63, sub_1000552EC, 0, v14, v17, v15, v18, v19);
  v20 = sub_100009F30(&qword_10008C788);
  v21 = type metadata accessor for WidgetFamily(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 72);
  v24 = *(unsigned __int8 *)(v22 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = swift_allocObject(v20, v25 + 3 * v23, v24 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_100065600;
  v27 = v26 + v25;
  v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104);
  v28(v27, enum case for WidgetFamily.systemSmall(_:), v21);
  v28(v27 + v23, enum case for WidgetFamily.systemMedium(_:), v21);
  v28(v27 + 2 * v23, enum case for WidgetFamily.systemLarge(_:), v21);
  v29 = sub_100055490();
  WidgetConfiguration.supportedFamilies(_:)(v26, v1, v29);
  v30 = swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t, __n128))(v56 + 8))(v3, v1, v30);
  v31 = LocalizedStringKey.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  v32 = Text.init(_:tableName:bundle:comment:)(v31);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v63 = v1;
  v64 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v63, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v41 = v57;
  v40 = v58;
  WidgetConfiguration.configurationDisplayName(_:)(v32, v34, v38, v36, v58, OpaqueTypeConformance2);
  sub_10000AFA4(v32, v34, v38);
  v42 = swift_bridgeObjectRelease(v36);
  v43 = v40;
  (*(void (**)(char *, uint64_t, __n128))(v59 + 8))(v7, v40, v42);
  v44 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x800000010006D940);
  v45 = Text.init(_:tableName:bundle:comment:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  v63 = v43;
  v64 = OpaqueTypeConformance2;
  v52 = swift_getOpaqueTypeConformance2(&v63, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v53 = v60;
  WidgetConfiguration.description(_:)(v45, v47, v51, v49, v60, v52);
  sub_10000AFA4(v45, v47, v51);
  v54 = swift_bridgeObjectRelease(v49);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v61 + 8))(v41, v53, v54);
}

uint64_t sub_1000552EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t KeyPath;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v4 = sub_100009F30(&qword_10008C8E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s5EntryVMa(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000554DC(a1, (uint64_t)v9);
  sub_100028D54((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v6);
  sub_100055520((uint64_t)v9);
  KeyPath = swift_getKeyPath(&unk_10006B658);
  *a2 = swift_getKeyPath(&unk_10006B680);
  v11 = sub_100009F30(&qword_10008CBD0);
  swift_storeEnumTagMultiPayload(a2, v11, 0);
  v12 = (int *)type metadata accessor for NotesFolderWidgetView(0);
  v13 = (_QWORD *)((char *)a2 + v12[5]);
  *v13 = swift_getKeyPath(&unk_10006B6B0);
  v14 = sub_100009F30(&qword_10008B260);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = (char *)a2 + v12[6];
  *(_QWORD *)v15 = KeyPath;
  v15[8] = 0;
  return sub_10002D314((uint64_t)v6, (uint64_t)a2 + v12[7]);
}

unint64_t sub_100055454()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DC28;
  if (!qword_10008DC28)
  {
    v1 = objc_opt_self(ICNotesFolderIntent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10008DC28);
  }
  return result;
}

unint64_t sub_100055490()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DC40[0];
  if (!qword_10008DC40[0])
  {
    v1 = sub_10000AE50(&qword_10008DC10);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v1);
    atomic_store(result, qword_10008DC40);
  }
  return result;
}

uint64_t sub_1000554DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s5EntryVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055520(uint64_t a1)
{
  uint64_t v2;

  v2 = _s5EntryVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100055560()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_100055584()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_1000555A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_10000AE50(&qword_10008DC20);
  v1 = sub_10000AE50(&qword_10008DC18);
  v5 = sub_10000AE50(&qword_10008DC10);
  v6 = sub_100055490();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

uint64_t sub_100055648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_100055650(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

uint64_t *sub_1000556A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 = v10 + v8;
  }
  v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 2, *(_QWORD *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            v18 = 4;
          }
          else
          {
            v20 = v19 != 0;
            v13 = v19 >= 0xFF;
            v18 = 2;
            if (!v13)
              v18 = v20;
          }
        }
        else
        {
          v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain(v17);
  }
  return a1;
}

uint64_t sub_100055840(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_10005589C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_10005598C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_100055ADC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_100055BCC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_100055D1C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 1)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  v12 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_29;
  v13 = 8 * v7;
  if (v7 <= 3)
  {
    v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v7);
      if (!v14)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_29;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v7 > 3)
    v16 = 0;
  if ((_DWORD)v7)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  return v6 + v16 + 1;
}

void sub_100055EB0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  v13 = a3 >= v8;
  v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        v15 = &dword_100000004;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v15 = 0;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1000560CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t sub_1000560E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t type metadata accessor for ObjectStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100056100(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectStates);
}

uint64_t sub_100056100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10005612C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000279EC(v2 + *(int *)(a1 + 20), (uint64_t)v7);
  v8 = type metadata accessor for Note(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 2, v8))
  {
    TimelineEntryRelevance.init(score:duration:)(0.0, 0.0);
    v9 = type metadata accessor for TimelineEntryRelevance(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 0, 1, v9);
  }
  else
  {
    v11 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
    return sub_100056228((uint64_t)v7);
  }
}

uint64_t sub_100056228(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100009F30(&qword_10008B168);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100056268(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v33;
  char *__dst;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for Note(0);
    v12 = *((_QWORD *)v11 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 2, v11))
    {
      v13 = sub_100009F30(&qword_10008B168);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v16 = v10[3];
      v9[2] = v10[2];
      v9[3] = v16;
      v17 = v10[5];
      v9[4] = v10[4];
      v9[5] = v17;
      v37 = v10[7];
      v38 = v12;
      v9[6] = v10[6];
      v9[7] = v37;
      v18 = v10[9];
      v9[8] = v10[8];
      v9[9] = v18;
      *((_BYTE *)v9 + 80) = *((_BYTE *)v10 + 80);
      v19 = v10[12];
      v9[11] = v10[11];
      v9[12] = v19;
      v20 = v11[11];
      __dst = (char *)v9 + v20;
      v35 = (char *)v10 + v20;
      v21 = type metadata accessor for URL(0);
      v33 = *(_QWORD *)(v21 - 8);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      if (v36(v35, 1, v21))
      {
        v22 = sub_100009F30(&qword_10008B170);
        memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v35, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v21);
      }
      v23 = v11[12];
      v24 = *(_QWORD *)((char *)v10 + v23);
      *(_QWORD *)((char *)v9 + v23) = v24;
      v25 = v11[13];
      v26 = *(_QWORD *)((char *)v10 + v25);
      *(_QWORD *)((char *)v9 + v25) = v26;
      v27 = v11[14];
      v28 = *(_QWORD *)((char *)v10 + v27);
      *(_QWORD *)((char *)v9 + v27) = v28;
      v29 = v11[15];
      v30 = *(_QWORD *)((char *)v10 + v29);
      *(_QWORD *)((char *)v9 + v29) = v30;
      *((_BYTE *)v9 + v11[16]) = *((_BYTE *)v10 + v11[16]);
      v31 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v38 + 56);
      swift_retain(v24);
      swift_bridgeObjectRetain(v26);
      swift_retain(v28);
      swift_retain(v30);
      v31(v9, 0, 2, v11);
    }
  }
  return a1;
}

uint64_t sub_1000564D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  uint64_t result;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v6 = (int *)type metadata accessor for Note(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v5, 2, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v5[1]);
    swift_bridgeObjectRelease(v5[3]);
    swift_bridgeObjectRelease(v5[5]);
    swift_bridgeObjectRelease(v5[7]);
    swift_bridgeObjectRelease(v5[9]);
    swift_bridgeObjectRelease(v5[12]);
    v8 = (char *)v5 + v6[11];
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    swift_release(*(_QWORD *)((char *)v5 + v6[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v5 + v6[13]));
    swift_release(*(_QWORD *)((char *)v5 + v6[14]));
    return swift_release(*(_QWORD *)((char *)v5 + v6[15]));
  }
  return result;
}

uint64_t sub_100056604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for Note(0);
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v11 + 48))(v9, 2, v10))
  {
    v12 = sub_100009F30(&qword_10008B168);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v36 = v11;
    v37 = a1;
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    v14 = v9[3];
    v8[2] = v9[2];
    v8[3] = v14;
    v15 = v9[5];
    v8[4] = v9[4];
    v8[5] = v15;
    v16 = v9[7];
    v8[6] = v9[6];
    v8[7] = v16;
    v17 = v9[9];
    v8[8] = v9[8];
    v8[9] = v17;
    *((_BYTE *)v8 + 80) = *((_BYTE *)v9 + 80);
    v18 = v9[12];
    v8[11] = v9[11];
    v8[12] = v18;
    v19 = v10[11];
    __dst = (char *)v8 + v19;
    v33 = (char *)v9 + v19;
    v20 = type metadata accessor for URL(0);
    v32 = *(_QWORD *)(v20 - 8);
    v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    if (v34(v33, 1, v20))
    {
      v21 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(__dst, v33, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v20);
    }
    v22 = v10[12];
    v23 = *(_QWORD *)((char *)v9 + v22);
    *(_QWORD *)((char *)v8 + v22) = v23;
    v24 = v10[13];
    v25 = *(_QWORD *)((char *)v9 + v24);
    *(_QWORD *)((char *)v8 + v24) = v25;
    v26 = v10[14];
    v27 = *(_QWORD *)((char *)v9 + v26);
    *(_QWORD *)((char *)v8 + v26) = v27;
    v28 = v10[15];
    v29 = *(_QWORD *)((char *)v9 + v28);
    *(_QWORD *)((char *)v8 + v28) = v29;
    *((_BYTE *)v8 + v10[16]) = *((_BYTE *)v9 + v10[16]);
    v30 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v36 + 56);
    swift_retain(v23);
    swift_bridgeObjectRetain(v25);
    swift_retain(v27);
    swift_retain(v29);
    v30(v8, 0, 2, v10);
    return v37;
  }
  return a1;
}

uint64_t sub_100056854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  const void *v68;
  unsigned int (*v69)(const void *, uint64_t, uint64_t);
  uint64_t v70;
  void *__dst;
  uint64_t v72;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = (int *)type metadata accessor for Note(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 2, v10);
  v14 = v12(v9, 2, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_1000301BC(v8);
      goto LABEL_7;
    }
    *(_QWORD *)v8 = *(_QWORD *)v9;
    v24 = *(_QWORD *)(v9 + 8);
    v25 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v25);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
    v26 = *(_QWORD *)(v9 + 24);
    v27 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v26;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
    v28 = *(_QWORD *)(v9 + 40);
    v29 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
    v30 = *(_QWORD *)(v9 + 56);
    v31 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 56) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
    v32 = *(_QWORD *)(v9 + 72);
    v33 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(v8 + 72) = v32;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRelease(v33);
    *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
    *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
    v34 = *(_QWORD *)(v9 + 96);
    v35 = *(_QWORD *)(v8 + 96);
    *(_QWORD *)(v8 + 96) = v34;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v35);
    v36 = v10[11];
    v37 = (void *)(v8 + v36);
    v38 = (void *)(v9 + v36);
    v39 = type metadata accessor for URL(0);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
    v42 = v41(v37, 1, v39);
    v43 = v41(v38, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
LABEL_16:
        v54 = v10[12];
        v55 = *(_QWORD *)(v8 + v54);
        v56 = *(_QWORD *)(v9 + v54);
        *(_QWORD *)(v8 + v54) = v56;
        swift_retain(v56);
        swift_release(v55);
        v57 = v10[13];
        v58 = *(_QWORD *)(v9 + v57);
        v59 = *(_QWORD *)(v8 + v57);
        *(_QWORD *)(v8 + v57) = v58;
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRelease(v59);
        v60 = v10[14];
        v61 = *(_QWORD *)(v8 + v60);
        v62 = *(_QWORD *)(v9 + v60);
        *(_QWORD *)(v8 + v60) = v62;
        swift_retain(v62);
        swift_release(v61);
        v63 = v10[15];
        v64 = *(_QWORD *)(v8 + v63);
        v65 = *(_QWORD *)(v9 + v63);
        *(_QWORD *)(v8 + v63) = v65;
        swift_retain(v65);
        swift_release(v64);
        *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
        return a1;
      }
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 24))(v37, v38, v39);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v40 + 8))(v37, v39);
    }
    v53 = sub_100009F30(&qword_10008B170);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v23 = sub_100009F30(&qword_10008B168);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v72 = a1;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v15 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v15;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v16 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v8 + 24) = v16;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v17 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v8 + 40) = v17;
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  v18 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 56) = v18;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  v70 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v8 + 72) = v70;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
  v19 = *(_QWORD *)(v9 + 96);
  *(_QWORD *)(v8 + 96) = v19;
  v20 = v10[11];
  __dst = (void *)(v8 + v20);
  v68 = (const void *)(v9 + v20);
  v21 = type metadata accessor for URL(0);
  v67 = *(_QWORD *)(v21 - 8);
  v69 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v19);
  if (v69(v68, 1, v21))
  {
    v22 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v67 + 16))(__dst, v68, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dst, 0, 1, v21);
  }
  a1 = v72;
  v44 = v10[12];
  v45 = *(_QWORD *)(v9 + v44);
  *(_QWORD *)(v8 + v44) = v45;
  v46 = v10[13];
  v47 = *(_QWORD *)(v9 + v46);
  *(_QWORD *)(v8 + v46) = v47;
  v48 = v10[14];
  v49 = *(_QWORD *)(v9 + v48);
  *(_QWORD *)(v8 + v48) = v49;
  v50 = v10[15];
  v51 = *(_QWORD *)(v9 + v50);
  *(_QWORD *)(v8 + v50) = v51;
  *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56);
  swift_retain(v45);
  swift_bridgeObjectRetain(v47);
  swift_retain(v49);
  swift_retain(v51);
  v52(v8, 0, 2, v10);
  return a1;
}

uint64_t sub_100056D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for Note(0);
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v9, 2, v10))
  {
    v12 = sub_100009F30(&qword_10008B168);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    v14 = v9[3];
    v8[2] = v9[2];
    v8[3] = v14;
    v8[4] = v9[4];
    *((_BYTE *)v8 + 80) = *((_BYTE *)v9 + 80);
    *(_OWORD *)((char *)v8 + 88) = *(_OWORD *)((char *)v9 + 88);
    v15 = v10[11];
    v16 = (char *)v8 + v15;
    v17 = (char *)v9 + v15;
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_100009F30(&qword_10008B170);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    *(_QWORD *)((char *)v8 + v10[12]) = *(_QWORD *)((char *)v9 + v10[12]);
    *(_QWORD *)((char *)v8 + v10[13]) = *(_QWORD *)((char *)v9 + v10[13]);
    *(_QWORD *)((char *)v8 + v10[14]) = *(_QWORD *)((char *)v9 + v10[14]);
    *(_QWORD *)((char *)v8 + v10[15]) = *(_QWORD *)((char *)v9 + v10[15]);
    *((_BYTE *)v8 + v10[16]) = *((_BYTE *)v9 + v10[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 2, v10);
  }
  return a1;
}

uint64_t sub_100056EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = (int *)type metadata accessor for Note(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 2, v10);
  v14 = v12(v9, 2, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_1000301BC(v8);
      goto LABEL_7;
    }
    v24 = *(_QWORD *)(v9 + 8);
    v25 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_QWORD *)(v8 + 8) = v24;
    swift_bridgeObjectRelease(v25);
    v26 = *(_QWORD *)(v9 + 24);
    v27 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v8 + 24) = v26;
    swift_bridgeObjectRelease(v27);
    v28 = *(_QWORD *)(v9 + 40);
    v29 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
    *(_QWORD *)(v8 + 40) = v28;
    swift_bridgeObjectRelease(v29);
    v30 = *(_QWORD *)(v9 + 56);
    v31 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
    *(_QWORD *)(v8 + 56) = v30;
    swift_bridgeObjectRelease(v31);
    v32 = *(_QWORD *)(v9 + 72);
    v33 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v8 + 72) = v32;
    swift_bridgeObjectRelease(v33);
    *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
    v34 = *(_QWORD *)(v9 + 96);
    v35 = *(_QWORD *)(v8 + 96);
    *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
    *(_QWORD *)(v8 + 96) = v34;
    swift_bridgeObjectRelease(v35);
    v36 = v10[11];
    v37 = (void *)(v8 + v36);
    v38 = (void *)(v9 + v36);
    v39 = type metadata accessor for URL(0);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
    v42 = v41(v37, 1, v39);
    v43 = v41(v38, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 32))(v37, v38, v39);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
LABEL_16:
        v45 = v10[12];
        v46 = *(_QWORD *)(v8 + v45);
        *(_QWORD *)(v8 + v45) = *(_QWORD *)(v9 + v45);
        swift_release(v46);
        v47 = v10[13];
        v48 = *(_QWORD *)(v8 + v47);
        *(_QWORD *)(v8 + v47) = *(_QWORD *)(v9 + v47);
        swift_bridgeObjectRelease(v48);
        v49 = v10[14];
        v50 = *(_QWORD *)(v8 + v49);
        *(_QWORD *)(v8 + v49) = *(_QWORD *)(v9 + v49);
        swift_release(v50);
        v51 = v10[15];
        v52 = *(_QWORD *)(v8 + v51);
        *(_QWORD *)(v8 + v51) = *(_QWORD *)(v9 + v51);
        swift_release(v52);
        *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
        return a1;
      }
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 40))(v37, v38, v39);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v40 + 8))(v37, v39);
    }
    v44 = sub_100009F30(&qword_10008B170);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v23 = sub_100009F30(&qword_10008B168);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v15 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v15;
  v16 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v16;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
  v17 = v10[11];
  v18 = (void *)(v8 + v17);
  v19 = (const void *)(v9 + v17);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100009F30(&qword_10008B170);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(v8 + v10[12]) = *(_QWORD *)(v9 + v10[12]);
  *(_QWORD *)(v8 + v10[13]) = *(_QWORD *)(v9 + v10[13]);
  *(_QWORD *)(v8 + v10[14]) = *(_QWORD *)(v9 + v10[14]);
  *(_QWORD *)(v8 + v10[15]) = *(_QWORD *)(v9 + v10[15]);
  *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 2, v10);
  return a1;
}

uint64_t sub_10005723C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100057248);
}

uint64_t sub_100057248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100009F30(&qword_10008B168);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000572C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000572CC);
}

uint64_t sub_1000572CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100009F30(&qword_10008B168);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t _s5EntryVMa_0(uint64_t a1)
{
  uint64_t result;

  result = qword_10008DD20;
  if (!qword_10008DD20)
    return swift_getSingletonMetadata(a1, &_s5EntryVMn_0);
  return result;
}

void sub_100057388(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10005740C(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10005740C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_10008B1E0)
  {
    v2 = type metadata accessor for Note(255);
    v5 = type metadata accessor for ObjectStates(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_10008B1E0);
  }
}

uint64_t sub_100057460()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100010B60(v0, qword_10008DD58);
  sub_100010130(v0, (uint64_t)qword_10008DD58);
  return static Logger.widget.getter();
}

uint64_t sub_1000574A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t);
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  char *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  v58 = a1;
  v1 = sub_100009F30(&qword_10008DEC8);
  v53 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008DED0);
  v55 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100009F30(&qword_10008DED8);
  v8 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  v57 = v8;
  __chkstk_darwin(v7);
  v54 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICWidgetKindQuickNote);
  v12 = v11;
  v13 = type metadata accessor for QuickNoteTimelineProvider();
  v59 = swift_allocObject(v13, 16, 7);
  v14 = type metadata accessor for QuickNoteWidgetView(0);
  v15 = sub_1000593C0(&qword_10008DEE0, 255, type metadata accessor for QuickNoteWidgetView, (uint64_t)&unk_100065684);
  v17 = sub_1000593C0(&qword_10008DEE8, v16, (uint64_t (*)(uint64_t))type metadata accessor for QuickNoteTimelineProvider, (uint64_t)&unk_10006B76C);
  StaticConfiguration.init<A>(kind:provider:content:)(v10, v12, &v59, sub_1000578BC, 0, v14, v13, v15, v17);
  v18 = sub_100009F30(&qword_10008C788);
  v19 = type metadata accessor for WidgetFamily(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 72);
  v22 = *(unsigned __int8 *)(v20 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v18, v23 + 2 * v21, v22 | 7);
  *(_OWORD *)(v24 + 16) = xmmword_10006B050;
  v25 = v24 + v23;
  v26 = *(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104);
  v26(v25, enum case for WidgetFamily.systemSmall(_:), v19);
  v26(v25 + v21, enum case for WidgetFamily.systemLarge(_:), v19);
  v27 = sub_100059400();
  WidgetConfiguration.supportedFamilies(_:)(v24, v1, v27);
  v28 = swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t, __n128))(v53 + 8))(v3, v1, v28);
  v29 = LocalizedStringKey.init(stringLiteral:)(0x6F4E206B63697551, 0xEA00000000006574);
  v30 = Text.init(_:tableName:bundle:comment:)(v29);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v59 = v1;
  v60 = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v38 = v54;
  WidgetConfiguration.configurationDisplayName(_:)(v30, v32, v36, v34, v4, OpaqueTypeConformance2);
  sub_10000AFA4(v30, v32, v36);
  v39 = swift_bridgeObjectRelease(v34);
  (*(void (**)(char *, uint64_t, __n128))(v55 + 8))(v6, v4, v39);
  v40 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000030, 0x800000010006D9E0);
  v41 = Text.init(_:tableName:bundle:comment:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v59 = v4;
  v60 = OpaqueTypeConformance2;
  v48 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v49 = v56;
  WidgetConfiguration.description(_:)(v41, v43, v47, v45, v56, v48);
  sub_10000AFA4(v41, v43, v47);
  v50 = swift_bridgeObjectRelease(v45);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v57 + 8))(v38, v49, v50);
}

uint64_t sub_1000578BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v4 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for QuickNoteTimelineProvider.Entry(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AF24(a1, (uint64_t)v9, type metadata accessor for QuickNoteTimelineProvider.Entry);
  sub_10000CC94((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v6, &qword_10008B168);
  sub_10000AF68((uint64_t)v9, type metadata accessor for QuickNoteTimelineProvider.Entry);
  return sub_10004090C((uint64_t)v6, a2);
}

uint64_t sub_1000579B8(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = sub_100009F30(&qword_10008DE30);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for QuickNoteTimelineProvider.Entry(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100009F30(&qword_10008DE20);
  v11 = Timeline.entries.getter(v10);
  v12 = v11;
  if (*(_QWORD *)(v11 + 16))
  {
    sub_10000AF24(v11 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v5, type metadata accessor for QuickNoteTimelineProvider.Entry);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v13, 1, v6);
  v14 = swift_bridgeObjectRelease(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v7 + 48))(v5, 1, v6, v14) == 1)
  {
    v15 = &v9[*(int *)(v6 + 20)];
    v16 = type metadata accessor for Note(0);
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 2, 2, v16);
    Date.init()(v17);
    sub_10000CCD8((uint64_t)v5, &qword_10008DE30);
  }
  else
  {
    sub_100058A14((uint64_t)v5, (uint64_t)v9);
  }
  a2(v9);
  return sub_10000AF68((uint64_t)v9, type metadata accessor for QuickNoteTimelineProvider.Entry);
}

uint64_t sub_100057B58(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  void (*v64)(char *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _BYTE v73[24];

  v71 = a3;
  v65 = a1;
  v4 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v4);
  v68 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Note(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100009F30(&qword_10008DE20);
  v69 = *(_QWORD *)(v16 - 8);
  v70 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008B108 != -1)
    swift_once(&qword_10008B108, sub_100037600);
  v19 = sub_100009F30(&qword_10008C6E8);
  v20 = sub_100010130(v19, (uint64_t)qword_10008CE00);
  swift_beginAccess(v20, v73, 33, 0);
  RetryingLazy.wrappedValue.getter(v19);
  v21 = v72;
  swift_endAccess(v73);
  if (v21)
  {
    v63 = v18;
    v64 = a2;
    v22 = (void *)objc_opt_self(ICAccount);
    v23 = objc_msgSend(v21, "managedObjectContext");
    v24 = objc_msgSend(v22, "mostRecentSystemPaperNoteInManagedObjectContext:", v23);

    if (v24)
    {
      v25 = v24;
      sub_10005BF8C(v25, 0, 0, objc_msgSend(v22, "globalVirtualSystemPaperFolder"), 1, (uint64_t)v15);
      v18 = v63;
      sub_100058160((uint64_t)v15, (uint64_t)v63);
      sub_10000AF68((uint64_t)v15, type metadata accessor for Note);
      v64(v18);

    }
    else
    {
      if (qword_10008B148 != -1)
        swift_once(&qword_10008B148, sub_100057460);
      v43 = type metadata accessor for Logger(0);
      v44 = sub_100010130(v43, (uint64_t)qword_10008DD58);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.info.getter();
      v47 = os_log_type_enabled(v45, v46);
      v18 = v63;
      if (v47)
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "No recent System Paper note - returning placeholder timeline", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      v49 = sub_100009F30(&qword_10008DE28);
      v50 = type metadata accessor for QuickNoteTimelineProvider.Entry(0);
      v51 = *(_QWORD *)(v50 - 8);
      v52 = *(_QWORD *)(v51 + 72);
      v53 = *(unsigned __int8 *)(v51 + 80);
      v54 = (v53 + 32) & ~v53;
      v55 = swift_allocObject(v49, v54 + v52, v53 | 7);
      *(_OWORD *)(v55 + 16) = xmmword_1000659F0;
      v56 = v55 + v54;
      v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 2, 2, v12);
      Date.init()(v57);
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v56, v8, v67);
      v58 = sub_10004090C((uint64_t)v11, v56 + *(int *)(v50 + 20));
      v59 = v68;
      static TimelineReloadPolicy.never.getter(v58);
      v60 = sub_1000593C0(qword_10008DE08, 255, type metadata accessor for QuickNoteTimelineProvider.Entry, (uint64_t)&unk_10006B7C4);
      Timeline.init(entries:policy:)(v55, v59, v50, v60);
      v64(v18);
    }

  }
  else
  {
    if (qword_10008B148 != -1)
      swift_once(&qword_10008B148, sub_100057460);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100010130(v26, (uint64_t)qword_10008DD58);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "No modern note context - returning placeholder timeline", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    v31 = sub_100009F30(&qword_10008DE28);
    v32 = type metadata accessor for QuickNoteTimelineProvider.Entry(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(_QWORD *)(v33 + 72);
    v35 = *(unsigned __int8 *)(v33 + 80);
    v36 = (v35 + 32) & ~v35;
    v37 = swift_allocObject(v31, v36 + v34, v35 | 7);
    *(_OWORD *)(v37 + 16) = xmmword_1000659F0;
    v38 = v37 + v36;
    v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 2, 2, v12);
    Date.init()(v39);
    (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v38, v8, v67);
    v40 = sub_10004090C((uint64_t)v11, v38 + *(int *)(v32 + 20));
    v41 = v68;
    static TimelineReloadPolicy.never.getter(v40);
    v42 = sub_1000593C0(qword_10008DE08, 255, type metadata accessor for QuickNoteTimelineProvider.Entry, (uint64_t)&unk_10006B7C4);
    Timeline.init(entries:policy:)(v37, v41, v32, v42);
    a2(v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v18, v70);
}

uint64_t sub_100058160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, char *);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v72 = a1;
  v78 = a2;
  v2 = sub_100009F30(&qword_10008B168);
  __chkstk_darwin(v2);
  v75 = (uint64_t)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008CA78);
  __chkstk_darwin(v4);
  v70 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimelineReloadPolicy(0);
  v76 = *(_QWORD *)(v6 - 8);
  v77 = v6;
  v7 = __chkstk_darwin(v6);
  v74 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v73 = (char *)&v65 - v9;
  v10 = type metadata accessor for Date(0);
  v68 = *(_QWORD *)(v10 - 8);
  v69 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v65 - v14;
  v16 = type metadata accessor for Calendar.Component(0);
  v17 = *(_QWORD *)(v16 - 8);
  v65 = v16;
  v66 = v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = (char *)type metadata accessor for Calendar(0);
  v20 = *((_QWORD *)v71 - 1);
  v21 = __chkstk_darwin(v71);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v65 - v24;
  v26 = sub_100009F30(&qword_10008CA80);
  v27 = __chkstk_darwin(v26);
  v67 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v65 - v30;
  static Calendar.current.getter(v29);
  v32 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for Calendar.Component.day(_:), v16);
  v33 = static Calendar.current.getter(v32);
  Date.init()(v33);
  Calendar.startOfDay(for:)(v13);
  v35 = v68;
  v34 = v69;
  v36 = *(void (**)(char *, uint64_t))(v68 + 8);
  v36(v13, v69);
  v37 = *(void (**)(char *, char *))(v20 + 8);
  v38 = (uint64_t)v71;
  v37(v23, v71);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v19, 1, v15, 0);
  v39 = v15;
  v40 = v15;
  v41 = (uint64_t)v67;
  v36(v40, v34);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v19, v65);
  v42 = v25;
  v43 = (uint64_t)v70;
  v37(v42, (char *)v38);
  v44 = v34;
  v71 = v31;
  sub_10000CC94((uint64_t)v31, v41, &qword_10008CA80);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v41, 1, v34);
  v46 = 1;
  if (v45 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v39, v41, v34);
    static TimelineReloadPolicy.after(_:)(v39);
    v36(v39, v34);
    v46 = 0;
  }
  v48 = v76;
  v47 = v77;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v43, v46, 1, v77);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v43, 1, v47);
  v50 = v73;
  if ((_DWORD)v49 == 1)
  {
    static TimelineReloadPolicy.never.getter(v49);
    sub_10000CCD8(v43, &qword_10008CA78);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v73, v43, v47);
  }
  v51 = sub_100009F30(&qword_10008DE28);
  v52 = type metadata accessor for QuickNoteTimelineProvider.Entry(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(_QWORD *)(v53 + 72);
  v55 = *(unsigned __int8 *)(v53 + 80);
  v56 = (v55 + 32) & ~v55;
  v57 = swift_allocObject(v51, v56 + v54, v55 | 7);
  *(_OWORD *)(v57 + 16) = xmmword_1000659F0;
  v58 = v57 + v56;
  v59 = v75;
  sub_10000AF24(v72, v75, type metadata accessor for Note);
  v60 = type metadata accessor for Note(0);
  v61 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 2, v60);
  Date.init()(v61);
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v58, v39, v44);
  sub_10004090C(v59, v58 + *(int *)(v52 + 20));
  v62 = v74;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v74, v50, v47);
  v63 = sub_1000593C0(qword_10008DE08, 255, type metadata accessor for QuickNoteTimelineProvider.Entry, (uint64_t)&unk_10006B7C4);
  Timeline.init(entries:policy:)(v57, v62, v52, v63);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
  return sub_10000CCD8((uint64_t)v71, &qword_10008CA80);
}

uint64_t type metadata accessor for QuickNoteTimelineProvider()
{
  return objc_opt_self(_TtC37com_apple_mobilenotes_WidgetExtension25QuickNoteTimelineProvider);
}

uint64_t sub_100058698()
{
  return sub_1000593C0(qword_10008DE08, 255, type metadata accessor for QuickNoteTimelineProvider.Entry, (uint64_t)&unk_10006B7C4);
}

uint64_t type metadata accessor for QuickNoteTimelineProvider.Entry(uint64_t a1)
{
  uint64_t result;

  result = qword_10008DE90;
  if (!qword_10008DE90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for QuickNoteTimelineProvider.Entry);
  return result;
}

uint64_t sub_100058704@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 + *(int *)(type metadata accessor for QuickNoteTimelineProvider.Entry(0) + 20);
  v2 = type metadata accessor for Note(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 2, 2, v2);
  return Date.init()(v3);
}

uint64_t sub_100058758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v7 = type metadata accessor for TimelineProviderContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (char *)swift_allocObject(&unk_1000856A0, v13 + v9, v12 | 7);
  *((_QWORD *)v14 + 2) = a2;
  *((_QWORD *)v14 + 3) = a3;
  *((_QWORD *)v14 + 4) = v11;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v14[v13], v10, v7);
  swift_retain(a3);
  swift_retain(v11);
  sub_100057B58(a1, (void (*)(char *))sub_1000589D0, (uint64_t)v14);
  return swift_release(v14);
}

uint64_t sub_10005885C(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  return sub_100057B58(a1, a2, a3);
}

uint64_t sub_10005887C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000120F8;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_1000588E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100014DC0;
  return TimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100058954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000589D0(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for TimelineProviderContext(0);
  return sub_1000579B8(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_100058A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for QuickNoteTimelineProvider.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for QuickNoteWidget()
{
  return &type metadata for QuickNoteWidget;
}

uint64_t sub_100058A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  const void *v68;
  unsigned int (*v69)(const void *, uint64_t, uint64_t);
  uint64_t v70;
  void *__dst;
  uint64_t v72;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = (int *)type metadata accessor for Note(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 2, v10);
  v14 = v12(v9, 2, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10000AF68(v8, type metadata accessor for Note);
      goto LABEL_7;
    }
    *(_QWORD *)v8 = *(_QWORD *)v9;
    v24 = *(_QWORD *)(v9 + 8);
    v25 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v25);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
    v26 = *(_QWORD *)(v9 + 24);
    v27 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v26;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
    v28 = *(_QWORD *)(v9 + 40);
    v29 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
    v30 = *(_QWORD *)(v9 + 56);
    v31 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 56) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
    v32 = *(_QWORD *)(v9 + 72);
    v33 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(v8 + 72) = v32;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRelease(v33);
    *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
    *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
    v34 = *(_QWORD *)(v9 + 96);
    v35 = *(_QWORD *)(v8 + 96);
    *(_QWORD *)(v8 + 96) = v34;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v35);
    v36 = v10[11];
    v37 = (void *)(v8 + v36);
    v38 = (void *)(v9 + v36);
    v39 = type metadata accessor for URL(0);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
    v42 = v41(v37, 1, v39);
    v43 = v41(v38, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
LABEL_16:
        v54 = v10[12];
        v55 = *(_QWORD *)(v8 + v54);
        v56 = *(_QWORD *)(v9 + v54);
        *(_QWORD *)(v8 + v54) = v56;
        swift_retain(v56);
        swift_release(v55);
        v57 = v10[13];
        v58 = *(_QWORD *)(v9 + v57);
        v59 = *(_QWORD *)(v8 + v57);
        *(_QWORD *)(v8 + v57) = v58;
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRelease(v59);
        v60 = v10[14];
        v61 = *(_QWORD *)(v8 + v60);
        v62 = *(_QWORD *)(v9 + v60);
        *(_QWORD *)(v8 + v60) = v62;
        swift_retain(v62);
        swift_release(v61);
        v63 = v10[15];
        v64 = *(_QWORD *)(v8 + v63);
        v65 = *(_QWORD *)(v9 + v63);
        *(_QWORD *)(v8 + v63) = v65;
        swift_retain(v65);
        swift_release(v64);
        *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
        return a1;
      }
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 24))(v37, v38, v39);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v40 + 8))(v37, v39);
    }
    v53 = sub_100009F30(&qword_10008B170);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v23 = sub_100009F30(&qword_10008B168);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v72 = a1;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v15 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v15;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v16 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v8 + 24) = v16;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v17 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v8 + 40) = v17;
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  v18 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 56) = v18;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  v70 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v8 + 72) = v70;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
  v19 = *(_QWORD *)(v9 + 96);
  *(_QWORD *)(v8 + 96) = v19;
  v20 = v10[11];
  __dst = (void *)(v8 + v20);
  v68 = (const void *)(v9 + v20);
  v21 = type metadata accessor for URL(0);
  v67 = *(_QWORD *)(v21 - 8);
  v69 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v19);
  if (v69(v68, 1, v21))
  {
    v22 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v67 + 16))(__dst, v68, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dst, 0, 1, v21);
  }
  a1 = v72;
  v44 = v10[12];
  v45 = *(_QWORD *)(v9 + v44);
  *(_QWORD *)(v8 + v44) = v45;
  v46 = v10[13];
  v47 = *(_QWORD *)(v9 + v46);
  *(_QWORD *)(v8 + v46) = v47;
  v48 = v10[14];
  v49 = *(_QWORD *)(v9 + v48);
  *(_QWORD *)(v8 + v48) = v49;
  v50 = v10[15];
  v51 = *(_QWORD *)(v9 + v50);
  *(_QWORD *)(v8 + v50) = v51;
  *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
  v52 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56);
  swift_retain(v45);
  swift_bridgeObjectRetain(v47);
  swift_retain(v49);
  swift_retain(v51);
  v52(v8, 0, 2, v10);
  return a1;
}

uint64_t sub_100058F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = (int *)type metadata accessor for Note(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 2, v10);
  v14 = v12(v9, 2, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10000AF68(v8, type metadata accessor for Note);
      goto LABEL_7;
    }
    v24 = *(_QWORD *)(v9 + 8);
    v25 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_QWORD *)(v8 + 8) = v24;
    swift_bridgeObjectRelease(v25);
    v26 = *(_QWORD *)(v9 + 24);
    v27 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v8 + 24) = v26;
    swift_bridgeObjectRelease(v27);
    v28 = *(_QWORD *)(v9 + 40);
    v29 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
    *(_QWORD *)(v8 + 40) = v28;
    swift_bridgeObjectRelease(v29);
    v30 = *(_QWORD *)(v9 + 56);
    v31 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
    *(_QWORD *)(v8 + 56) = v30;
    swift_bridgeObjectRelease(v31);
    v32 = *(_QWORD *)(v9 + 72);
    v33 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v8 + 72) = v32;
    swift_bridgeObjectRelease(v33);
    *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
    v34 = *(_QWORD *)(v9 + 96);
    v35 = *(_QWORD *)(v8 + 96);
    *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 + 88);
    *(_QWORD *)(v8 + 96) = v34;
    swift_bridgeObjectRelease(v35);
    v36 = v10[11];
    v37 = (void *)(v8 + v36);
    v38 = (void *)(v9 + v36);
    v39 = type metadata accessor for URL(0);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
    v42 = v41(v37, 1, v39);
    v43 = v41(v38, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 32))(v37, v38, v39);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
LABEL_16:
        v45 = v10[12];
        v46 = *(_QWORD *)(v8 + v45);
        *(_QWORD *)(v8 + v45) = *(_QWORD *)(v9 + v45);
        swift_release(v46);
        v47 = v10[13];
        v48 = *(_QWORD *)(v8 + v47);
        *(_QWORD *)(v8 + v47) = *(_QWORD *)(v9 + v47);
        swift_bridgeObjectRelease(v48);
        v49 = v10[14];
        v50 = *(_QWORD *)(v8 + v49);
        *(_QWORD *)(v8 + v49) = *(_QWORD *)(v9 + v49);
        swift_release(v50);
        v51 = v10[15];
        v52 = *(_QWORD *)(v8 + v51);
        *(_QWORD *)(v8 + v51) = *(_QWORD *)(v9 + v51);
        swift_release(v52);
        *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
        return a1;
      }
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 40))(v37, v38, v39);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v40 + 8))(v37, v39);
    }
    v44 = sub_100009F30(&qword_10008B170);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v23 = sub_100009F30(&qword_10008B168);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v15 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v15;
  v16 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v16;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
  v17 = v10[11];
  v18 = (void *)(v8 + v17);
  v19 = (const void *)(v9 + v17);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100009F30(&qword_10008B170);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(v8 + v10[12]) = *(_QWORD *)(v9 + v10[12]);
  *(_QWORD *)(v8 + v10[13]) = *(_QWORD *)(v9 + v10[13]);
  *(_QWORD *)(v8 + v10[14]) = *(_QWORD *)(v9 + v10[14]);
  *(_QWORD *)(v8 + v10[15]) = *(_QWORD *)(v9 + v10[15]);
  *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 2, v10);
  return a1;
}

uint64_t sub_1000592A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000592AC);
}

uint64_t sub_1000592AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100009F30(&qword_10008B168);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100059324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059330);
}

uint64_t sub_100059330(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100009F30(&qword_10008B168);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000593B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006FA84, 1);
}

uint64_t sub_1000593C0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100059400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DEF0;
  if (!qword_10008DEF0)
  {
    v1 = sub_10000AE50(&qword_10008DEC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DEF0);
  }
  return result;
}

uint64_t sub_10005944C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v0 = sub_10000AE50(&qword_10008DED8);
  v1 = sub_10000AE50(&qword_10008DED0);
  v5 = sub_10000AE50(&qword_10008DEC8);
  v6 = sub_100059400();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

ValueMetadata *type metadata accessor for RecordingLiveActivityWidget()
{
  return &type metadata for RecordingLiveActivityWidget;
}

uint64_t sub_100059500(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006FB00, 1);
}

double sub_100059510@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000595C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10008B490, &qword_10008B480).n128_u64[0];
  return result;
}

double sub_100059568@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000595C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10008B330, &qword_10008B338).n128_u64[0];
  return result;
}

__n128 sub_1000595C0@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10000CC94(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100009F30(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

double sub_10005978C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100059944(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10008D228, &qword_10008D1B8).n128_u64[0];
  return result;
}

double sub_1000597E4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000595C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10008D5F0, &qword_10008D5F8).n128_u64[0];
  return result;
}

double sub_10005983C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000595C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10008D5D0, &qword_10008D5D8).n128_u64[0];
  return result;
}

double sub_100059894@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000595C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10008D6A0, &qword_10008D6A8).n128_u64[0];
  return result;
}

double sub_1000598EC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100059944(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10008DBA0, &qword_10008DBA8).n128_u64[0];
  return result;
}

__n128 sub_100059944@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = a9;
  v19 = a16;
  v21 = a14;
  v20 = a15;
  v22 = a12;
  v23 = a10;
  v24 = a2 & 1;
  v25 = a1;
  if ((_DWORD)v24)
    v25 = -INFINITY;
  v26 = a4 & 1;
  v27 = a3;
  if ((_DWORD)v26)
    v27 = v25;
  v28 = a6 & 1;
  v29 = a8 & 1;
  v30 = a5;
  if ((a6 & 1) != 0)
    v30 = v27;
  if (v25 > v27 || v27 > v30)
    goto LABEL_22;
  v32 = a7;
  if ((a8 & 1) != 0)
    v32 = -INFINITY;
  v33 = a10;
  if ((a11 & 1) != 0)
    v33 = v32;
  v34 = a12;
  if ((a13 & 1) != 0)
    v34 = v33;
  if (v32 > v33 || v33 > v34)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a1;
    v48 = a3;
    v46 = v24;
    v36 = v26;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v18 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v26 = v36;
    v21 = a14;
    v20 = a15;
    v24 = v46;
    v23 = a10;
    v22 = a12;
    a1 = v47;
    a3 = v48;
    a7 = v49;
    a5 = v50;
    v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v24, *(_QWORD *)&a3, v26, *(_QWORD *)&a5, v28, *(_QWORD *)&a7, v29, *(_QWORD *)&v23, a11 & 1, *(_QWORD *)&v22, a13 & 1, v21, v20);
  v41 = sub_100009F30(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v18, v17, v41);
  v42 = v18 + *(int *)(sub_100009F30(a17) + 36);
  v43 = v51[5];
  *(_OWORD *)(v42 + 64) = v51[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v51[6];
  v44 = v51[1];
  *(_OWORD *)v42 = v51[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v51[3];
  *(_OWORD *)(v42 + 32) = v51[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

_QWORD *sub_100059B20@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];
  __int128 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v43 = a3;
    v42 = a1;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    a1 = v42;
    a3 = v43;
    v18 = a12;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v35 = *v15;
  v47 = v15[1];
  v34 = v47;
  *(_OWORD *)a9 = v35;
  *(_OWORD *)(a9 + 16) = v34;
  *(_OWORD *)(a9 + 136) = v46[6];
  v36 = v46[4];
  *(_OWORD *)(a9 + 120) = v46[5];
  *(_OWORD *)(a9 + 104) = v36;
  v37 = v46[2];
  *(_OWORD *)(a9 + 88) = v46[3];
  v38 = v46[1];
  *(_OWORD *)(a9 + 40) = v46[0];
  v39 = *(_QWORD *)v15;
  v49 = *((_QWORD *)v15 + 1);
  v50 = v39;
  v48 = *((_BYTE *)v15 + 32);
  *(_BYTE *)(a9 + 32) = v48;
  *(_OWORD *)(a9 + 56) = v38;
  *(_OWORD *)(a9 + 72) = v37;
  sub_10005BC2C(&v50);
  sub_10005BC2C(&v49);
  return sub_10005BC2C(&v47);
}

double sub_100059CE8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000595C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10008DA08, &qword_10008DA10).n128_u64[0];
  return result;
}

uint64_t sub_100059D40@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v40;
    v19 = a10;
    a1 = v41;
    a3 = v42;
    v18 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[3];
  a9[2] = v15[2];
  a9[3] = v34;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v15 + 57);
  v35 = v15[1];
  *a9 = *v15;
  a9[1] = v35;
  v36 = v45[5];
  a9[9] = v45[4];
  a9[10] = v36;
  a9[11] = v45[6];
  v37 = v45[1];
  a9[5] = v45[0];
  a9[6] = v37;
  v38 = v45[3];
  a9[7] = v45[2];
  a9[8] = v38;
  return sub_10005B9DC((uint64_t)v15);
}

uint64_t sub_100059EF0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a18;
  v22 = a17;
  v24 = a14;
  v23 = a15;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a13 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (v28 > v30 || v30 > v34)
    goto LABEL_22;
  v36 = a7;
  if ((a8 & 1) != 0)
    v36 = -INFINITY;
  v37 = a10;
  if ((a11 & 1) != 0)
    v37 = v36;
  v38 = a12;
  if ((a13 & 1) != 0)
    v38 = v37;
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    v50 = a7;
    v51 = a5;
    v48 = a1;
    v49 = a3;
    v47 = v27;
    v46 = v29;
    v40 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v33 = a13 & 1;
    v29 = v46;
    v24 = a14;
    v23 = a15;
    v27 = v47;
    v26 = a10;
    v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, v33, v24, v23);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  sub_10000AFB4(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain(v20);
}

uint64_t sub_10005A0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  v0 = type metadata accessor for RecordingActivityAttributes.ContentState(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008DF10);
  v5 = ActivityViewContext.state.getter(v4);
  v6 = RecordingActivityAttributes.ContentState.currentTime.getter(v5);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v12[1] = v6;
  v8 = static Color.black.getter(v7);
  v9 = Color.opacity(_:)(0.8);
  swift_release(v8);
  v10 = sub_10005AB80();
  View.activityBackgroundTint(_:)(v9, &type metadata for RecordingActivityLockScreenView, v10);
  return swift_release(v9);
}

uint64_t sub_10005A1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v27[2];

  v27[1] = a2;
  v3 = sub_100009F30(&qword_10008DF10);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v7 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)v27 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v27 - v8, a1, v3);
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = v12 + v5;
  v14 = v11 | 7;
  v15 = swift_allocObject(&unk_100085798, v12 + v5, v11 | 7);
  v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  v17 = swift_allocObject(&unk_1000857C0, v13, v14);
  v16(v17 + v12, v7, v3);
  v18 = sub_100009F30(&qword_10008DF18);
  v19 = sub_100009F30(&qword_10008DF20);
  v20 = sub_100009F30(&qword_10008DF28);
  v21 = sub_100009F30(&qword_10008DF30);
  v22 = sub_10000CC08(&qword_10008DF38, &qword_10008DF18, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v23 = sub_100028918(&qword_10008DF40, &qword_10008DF20, (void (*)(void))sub_10005ACB0);
  v24 = sub_100028918(&qword_10008DF58, &qword_10008DF28, (void (*)(void))sub_10005AD14);
  v25 = sub_10005AD58();
  return DynamicIsland.init<A, B, C, D>(expanded:compactLeading:compactTrailing:minimal:)(sub_10005ABC8, v15, sub_10005A744, 0, sub_10005AC70, v17, sub_10005AA24, 0, v18, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_10005A3EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for RecordingActivityAttributes.ContentState(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008DF10);
  ActivityViewContext.state.getter(v6);
  sub_10005A488((uint64_t)v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10005A488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32[16];
  char *v33;
  char *v34;
  char v35[16];
  char *v36;
  char v37[16];
  uint64_t v38;
  _QWORD v39[3];

  v30 = a2;
  v31 = sub_100009F30(&qword_10008DF80);
  v29 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100009F30(&qword_10008DF88);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DynamicIslandExpandedRegionPosition(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100009F30(&qword_10008DF90);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DynamicIslandExpandedRegionPosition.leading.getter(v13);
  v16 = sub_100009F30(&qword_10008DF98);
  v17 = sub_100028918(&qword_10008DFA0, &qword_10008DF98, (void (*)(void))sub_10005AD58);
  v18 = DynamicIslandExpandedRegion.init(_:priority:content:)(v10, sub_10005AF70, 0, v16, v17, 0.0);
  static DynamicIslandExpandedRegionPosition.center.getter(v18);
  v38 = a1;
  v19 = sub_100009F30(&qword_10008DFA8);
  v20 = sub_10000CC08(&qword_10008DFB0, &qword_10008DFA8, (uint64_t)&protocol conformance descriptor for HStack<A>);
  DynamicIslandExpandedRegion.init(_:priority:content:)(v10, sub_10005B92C, v37, v19, v20, 0.0);
  v36 = v15;
  v21 = sub_100009F30(&qword_10008DFB8);
  v39[0] = v16;
  v39[1] = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v39, &opaque type descriptor for <<opaque return type of DynamicIslandExpandedRegion._viewRepresentation>>, 1);
  DynamicIslandExpandedContent.init(content:)(sub_10005B934, v35, v21, OpaqueTypeConformance2);
  v33 = v4;
  v34 = v7;
  v23 = sub_100009F30(&qword_10008DF18);
  v24 = sub_10000CC08(&qword_10008DF38, &qword_10008DF18, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  DynamicIslandExpandedContent.init(content:)(sub_10005B968, v32, v23, v24);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v31);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

double sub_10005A744@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double result;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  char v56;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x7365746F4ELL, 0xE500000000000000);
  LOWORD(v37) = 256;
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Font.Weight.bold.getter(v3, v4);
  v11 = Text.fontWeight(_:)(*(_QWORD *)&v10, 0, v3, v5, v9, v7);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  sub_10000AFA4(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v18 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor", 0, v37);
  v19 = Color.init(_:)(v18);
  *(_QWORD *)&v38[0] = v19;
  v20 = Text.foregroundStyle<A>(_:)(v38, v11, v13, v17, v15, &type metadata for Color, &protocol witness table for Color);
  v22 = v21;
  v24 = v23;
  LOBYTE(v9) = v25 & 1;
  sub_10000AFA4(v11, v13, v17);
  swift_release(v19);
  swift_bridgeObjectRelease(v15);
  v27 = static Edge.Set.all.getter(v26);
  v49 = v20;
  v50 = v22;
  v51 = v9;
  v52 = v24;
  v53 = v27;
  v54 = 0u;
  v55 = 0u;
  v56 = 1;
  v28 = static Alignment.center.getter(v27);
  sub_100059D40(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v38, 0.0, 1, 0.0, 1, v28, v29);
  sub_10000AFA4(v20, v22, v9);
  swift_bridgeObjectRelease(v24);
  v30 = v46;
  a1[8] = v45;
  a1[9] = v30;
  v31 = v48;
  a1[10] = v47;
  a1[11] = v31;
  v32 = v42;
  a1[4] = v41;
  a1[5] = v32;
  v33 = v44;
  a1[6] = v43;
  a1[7] = v33;
  v34 = v38[1];
  *a1 = v38[0];
  a1[1] = v34;
  result = *(double *)&v39;
  v36 = v40;
  a1[2] = v39;
  a1[3] = v36;
  return result;
}

double sub_10005A96C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double result;
  uint64_t v12;

  v2 = type metadata accessor for RecordingActivityAttributes.ContentState(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008DF10);
  v7 = ActivityViewContext.state.getter(v6);
  v8 = RecordingActivityAttributes.ContentState.currentTime.getter(v7);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10 = static Edge.Set.all.getter(v9);
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 8) = v10;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t sub_10005AA24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = Image.init(systemName:)(0x662E656C63726963, 0xEB000000006C6C69);
  v3 = static Color.red.getter();
  result = swift_getKeyPath(&unk_10006B8C0);
  *a1 = v2;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

void sub_10005AA88(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10005AA90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t OpaqueTypeConformance2;
  _QWORD v5[2];

  v0 = type metadata accessor for RecordingActivityAttributes(0);
  v1 = sub_100009F30(&qword_10008DEF8);
  v2 = sub_10005AB38();
  v5[0] = &type metadata for RecordingActivityLockScreenView;
  v5[1] = sub_10005AB80();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.activityBackgroundTint(_:)>>, 1);
  return ActivityConfiguration.init<A>(for:content:dynamicIsland:)(v0, sub_10005A0D0, 0, sub_10005A1BC, 0, v0, v1, v2, OpaqueTypeConformance2);
}

unint64_t sub_10005AB38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DF00;
  if (!qword_10008DF00)
  {
    v1 = type metadata accessor for RecordingActivityAttributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for RecordingActivityAttributes, v1);
    atomic_store(result, (unint64_t *)&qword_10008DF00);
  }
  return result;
}

unint64_t sub_10005AB80()
{
  unint64_t result;

  result = qword_10008DF08;
  if (!qword_10008DF08)
  {
    result = swift_getWitnessTable(&unk_10006B970, &type metadata for RecordingActivityLockScreenView);
    atomic_store(result, (unint64_t *)&qword_10008DF08);
  }
  return result;
}

uint64_t sub_10005ABC8@<X0>(uint64_t a1@<X8>)
{
  sub_100009F30(&qword_10008DF10);
  return sub_10005A3EC(a1);
}

uint64_t sub_10005AC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100009F30(&qword_10008DF10);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_10005AC70@<D0>(uint64_t a1@<X8>)
{
  sub_100009F30(&qword_10008DF10);
  return sub_10005A96C(a1);
}

unint64_t sub_10005ACB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DF48;
  if (!qword_10008DF48)
  {
    v1 = sub_10000AE50(&qword_10008DF50);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DF48);
  }
  return result;
}

unint64_t sub_10005AD14()
{
  unint64_t result;

  result = qword_10008DF60;
  if (!qword_10008DF60)
  {
    result = swift_getWitnessTable(&unk_10006B920, &type metadata for TimeView);
    atomic_store(result, (unint64_t *)&qword_10008DF60);
  }
  return result;
}

unint64_t sub_10005AD58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DF68;
  if (!qword_10008DF68)
  {
    v1 = sub_10000AE50(&qword_10008DF30);
    sub_10000CC08(&qword_10008DF70, &qword_10008DF78, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DF68);
  }
  return result;
}

void sub_10005ADDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v36[0] = sub_10005BA54(a1);
  v36[1] = v3;
  v4 = sub_100053D80();
  v5 = Text.init<A>(_:)(v36, &type metadata for String, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Font.Weight.bold.getter(v5, v6);
  v13 = Text.fontWeight(_:)(*(_QWORD *)&v12, 0, v5, v7, v11, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  sub_10000AFA4(v5, v7, v11);
  swift_bridgeObjectRelease(v9);
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v21 = Color.init(_:)(v20);
  v36[0] = v21;
  v22 = Text.foregroundStyle<A>(_:)(v36, v13, v15, v19, v17, &type metadata for Color, &protocol witness table for Color);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  sub_10000AFA4(v13, v15, v19);
  swift_release(v21);
  v29 = swift_bridgeObjectRelease(v17);
  v30 = Text.monospacedDigit()(v22, v24, v28, v26, v29);
  v32 = v31;
  LOBYTE(v15) = v33;
  v35 = v34;
  sub_10000AFA4(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)a2 = v30;
  *(_QWORD *)(a2 + 8) = v32;
  *(_BYTE *)(a2 + 16) = v15 & 1;
  *(_QWORD *)(a2 + 24) = v35;
}

void sub_10005AF68(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_10005ADDC(*v1, a1);
}

double sub_10005AF70@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  double result;

  v2 = Image.init(systemName:)(0x7865742E65746F6ELL, 0xE900000000000074);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v4 = Color.init(_:)(v3);
  KeyPath = swift_getKeyPath(&unk_10006B8C0);
  v6 = static Edge.Set.all.getter();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v6;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

__n128 sub_10005B00C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = static VerticalAlignment.center.getter(a1);
  sub_10005B074((uint64_t)&v8);
  v4 = v9;
  v5 = v10;
  v6 = v11;
  result = v8;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v6;
  return result;
}

double sub_10005B074@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x6E6964726F636552, 0xE900000000000067);
  LOWORD(v22) = 256;
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor", 0, v22);
  v11 = Color.init(_:)(v10);
  v23 = v11;
  v12 = Text.foregroundStyle<A>(_:)(&v23, v3, v5, v9, v7, &type metadata for Color, &protocol witness table for Color);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  sub_10000AFA4(v3, v5, v9);
  swift_release(v11);
  swift_bridgeObjectRelease(v7);
  v20 = RecordingActivityAttributes.ContentState.currentTime.getter(v19);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v14;
  *(_BYTE *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v20;
  sub_10000AFB4(v12, v14, v18);
  swift_bridgeObjectRetain(v16);
  sub_10000AFA4(v12, v14, v18);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v16).n128_u64[0];
  return result;
}

uint64_t sub_10005B1D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  _BYTE v47[7];
  _OWORD v48[9];
  _BYTE v49[41];
  char v50;
  _BYTE v51[7];
  _BYTE v52[7];
  _OWORD v53[12];
  char v54;
  _BYTE v55[7];
  _OWORD v56[9];
  char v57;
  _BYTE v58[7];
  __int128 v59;
  __int128 v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v45 = Image.init(systemName:)(0x7865742E65746F6ELL, 0xE900000000000074);
  v3 = (void *)objc_opt_self(UIColor);
  v44 = Color.init(_:)(objc_msgSend(v3, "ICTintColor"));
  KeyPath = swift_getKeyPath(&unk_10006B8C0);
  v42 = static Edge.Set.all.getter(KeyPath);
  v4 = LocalizedStringKey.init(stringLiteral:)(0x6E6964726F636552, 0xE900000000000067);
  LOWORD(v40) = 256;
  v5 = Text.init(_:tableName:bundle:comment:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = Color.init(_:)(objc_msgSend(v3, "ICTintColor", 0, v40));
  *(_QWORD *)&v53[0] = v12;
  v13 = Text.foregroundStyle<A>(_:)(v53, v5, v7, v11, v9, &type metadata for Color, &protocol witness table for Color);
  v41 = v14;
  v16 = v15;
  v18 = v17 & 1;
  sub_10000AFA4(v5, v7, v11);
  swift_release(v12);
  swift_bridgeObjectRelease(v9);
  v20 = static Alignment.center.getter(v19);
  sub_100059EF0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v62, 0.0, 1, 0.0, 1, v20, v21, v13, v41, v18, v16);
  sub_10000AFA4(v13, v41, v18);
  swift_bridgeObjectRelease(v16);
  v23 = static Edge.Set.all.getter(v22);
  LOBYTE(v12) = v23;
  v24 = static Edge.Set.all.getter(v23);
  v25 = v67;
  v48[6] = v68;
  v26 = v68;
  v48[7] = v69;
  v27 = v69;
  v48[8] = v70;
  v28 = v63;
  v48[2] = v64;
  v29 = v64;
  v48[3] = v65;
  v30 = v65;
  v48[4] = v66;
  v31 = v66;
  v48[5] = v67;
  v48[0] = v62;
  v32 = v62;
  v48[1] = v63;
  v49[0] = v12;
  *(_DWORD *)&v49[1] = *(_DWORD *)v47;
  *(_DWORD *)&v49[4] = *(_DWORD *)&v47[3];
  memset(&v49[8], 0, 32);
  v49[40] = 1;
  *(_OWORD *)((char *)&v53[8] + 7) = v70;
  *(_OWORD *)((char *)&v53[4] + 7) = v66;
  *(_OWORD *)((char *)&v53[5] + 7) = v67;
  *(_OWORD *)((char *)&v53[6] + 7) = v68;
  *(_OWORD *)((char *)&v53[7] + 7) = v69;
  *(_OWORD *)((char *)v53 + 7) = v62;
  *(_OWORD *)((char *)&v53[1] + 7) = v63;
  *(_OWORD *)((char *)&v53[2] + 7) = v64;
  *(_OWORD *)((char *)&v53[3] + 7) = v65;
  *(_OWORD *)((char *)&v53[10] + 7) = *(_OWORD *)&v49[16];
  v53[11] = *(_OWORD *)&v49[25];
  *(_OWORD *)((char *)&v53[9] + 7) = *(_OWORD *)v49;
  v33 = v53[10];
  *(_OWORD *)(a2 + 241) = *(_OWORD *)&v49[25];
  v34 = v53[9];
  *(_OWORD *)(a2 + 193) = v53[8];
  *(_OWORD *)(a2 + 209) = v34;
  *(_OWORD *)(a2 + 225) = v33;
  v35 = v53[1];
  *(_OWORD *)(a2 + 65) = v53[0];
  *(_OWORD *)(a2 + 81) = v35;
  v36 = v53[3];
  *(_OWORD *)(a2 + 97) = v53[2];
  v37 = v53[6];
  *(_OWORD *)(a2 + 177) = v53[7];
  *(_OWORD *)(a2 + 161) = v37;
  v38 = v53[4];
  *(_OWORD *)(a2 + 145) = v53[5];
  *(_OWORD *)(a2 + 129) = v38;
  *(_OWORD *)(a2 + 113) = v36;
  v56[6] = v26;
  v56[7] = v27;
  v56[8] = v70;
  v56[2] = v29;
  v56[3] = v30;
  v56[4] = v31;
  v56[5] = v25;
  *(_DWORD *)v58 = *(_DWORD *)v47;
  *(_DWORD *)&v58[3] = *(_DWORD *)&v47[3];
  v54 = 1;
  v50 = 1;
  *(_DWORD *)(a2 + 25) = *(_DWORD *)v55;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)&v55[3];
  *(_DWORD *)(a2 + 257) = *(_DWORD *)v52;
  *(_DWORD *)(a2 + 260) = *(_DWORD *)&v52[3];
  *(_DWORD *)(a2 + 273) = *(_DWORD *)v51;
  *(_DWORD *)(a2 + 276) = *(_DWORD *)&v51[3];
  *(_QWORD *)a2 = v45;
  *(_QWORD *)(a2 + 8) = KeyPath;
  *(_QWORD *)(a2 + 16) = v44;
  *(_BYTE *)(a2 + 24) = v42;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_BYTE *)(a2 + 64) = 1;
  *(_QWORD *)(a2 + 264) = a1;
  *(_BYTE *)(a2 + 272) = v24;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_BYTE *)(a2 + 312) = 1;
  v56[0] = v32;
  v56[1] = v28;
  v57 = v12;
  v59 = 0u;
  v60 = 0u;
  v61 = 1;
  swift_retain(v45);
  swift_retain(KeyPath);
  swift_retain(v44);
  sub_10005B9DC((uint64_t)v48);
  sub_10005BA18((uint64_t)v56);
  swift_release(v44);
  swift_release(KeyPath);
  return swift_release(v45);
}

double sub_10005B618@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double result;
  _BYTE v8[320];
  _BYTE __src[328];
  char v10;

  v4 = *v2;
  v5 = static VerticalAlignment.center.getter(a1);
  sub_10005B1D4(v4, (uint64_t)v8);
  __src[320] = 1;
  v6 = memcpy(&__src[7], v8, 0x139uLL);
  LOBYTE(v4) = static Edge.Set.all.getter(v6);
  v10 = 1;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  memcpy((void *)(a2 + 17), __src, 0x140uLL);
  *(_BYTE *)(a2 + 344) = v4;
  result = 0.0;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_BYTE *)(a2 + 384) = v10;
  return result;
}

uint64_t sub_10005B6BC@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  char *v26;

  v26 = a1;
  v1 = sub_100009F30(&qword_10008DFC0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v25 - v6;
  v8 = sub_100009F30(&qword_10008DFB8);
  v25 = *(_QWORD *)(v8 - 8);
  v9 = v25;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v25 - v13;
  v15 = sub_100009F30(&qword_10008DF80);
  DynamicIslandExpandedContent.content.getter(v15);
  v16 = sub_100009F30(&qword_10008DF88);
  DynamicIslandExpandedRegion._viewRepresentation.getter(v16);
  v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v17(v12, v14, v8);
  v18 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v19 = v2;
  v18(v5, v7, v1);
  v20 = v26;
  v17(v26, v12, v8);
  v21 = sub_100009F30(&qword_10008DFC8);
  v18(&v20[*(int *)(v21 + 48)], v5, v1);
  v22 = *(void (**)(char *, uint64_t))(v19 + 8);
  v22(v7, v1);
  v23 = *(void (**)(char *, uint64_t))(v25 + 8);
  v23(v14, v8);
  v22(v5, v1);
  return ((uint64_t (*)(char *, uint64_t))v23)(v12, v8);
}

uint64_t sub_10005B88C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10005B8B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10005B8DC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10005B904(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

double sub_10005B92C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_10005B00C(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_10005B934()
{
  uint64_t v0;

  v0 = sub_100009F30(&qword_10008DF90);
  return DynamicIslandExpandedRegion._viewRepresentation.getter(v0);
}

uint64_t sub_10005B968@<X0>(char *a1@<X8>)
{
  return sub_10005B6BC(a1);
}

ValueMetadata *type metadata accessor for TimeView()
{
  return &type metadata for TimeView;
}

ValueMetadata *type metadata accessor for RecordingActivityLockScreenView()
{
  return &type metadata for RecordingActivityLockScreenView;
}

uint64_t sub_10005B990()
{
  return sub_10000CC08(&qword_10008DFD0, &qword_10008DFD8, (uint64_t)&protocol conformance descriptor for ActivityConfiguration<A>);
}

uint64_t sub_10005B9BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006FB50, 1);
}

uint64_t sub_10005B9CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006FB28, 1);
}

uint64_t sub_10005B9DC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10000AFB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10005BA18(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10000AFA4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10005BA54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a1 / 60 % 60;
  v3 = a1 % 60;
  v4 = sub_100009F30(&qword_10008DFE0);
  if (a1 < 3600)
  {
    v5 = swift_allocObject(v4, 112, 7);
    *(_OWORD *)(v5 + 16) = xmmword_10006B050;
    *(_QWORD *)(v5 + 56) = &type metadata for Int;
    *(_QWORD *)(v5 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v5 + 32) = v2;
    *(_QWORD *)(v5 + 96) = &type metadata for Int;
    *(_QWORD *)(v5 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v5 + 72) = v3;
    v6 = 0xE900000000000069;
  }
  else
  {
    v5 = swift_allocObject(v4, 152, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100065600;
    *(_QWORD *)(v5 + 56) = &type metadata for Int;
    *(_QWORD *)(v5 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v5 + 32) = a1 / 3600;
    *(_QWORD *)(v5 + 96) = &type metadata for Int;
    *(_QWORD *)(v5 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v5 + 72) = v2;
    *(_QWORD *)(v5 + 136) = &type metadata for Int;
    *(_QWORD *)(v5 + 144) = &protocol witness table for Int;
    *(_QWORD *)(v5 + 112) = v3;
    v6 = 0xEE00693230253A69;
  }
  return String.init(format:_:)(0x3230253A69323025, v6, v5);
}

unint64_t sub_10005BB9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008DFE8;
  if (!qword_10008DFE8)
  {
    v1 = sub_10000AE50(&qword_10008DFF0);
    sub_10000CC08(&qword_10008DFF8, &qword_10008E000, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10008DFE8);
  }
  return result;
}

void *sub_10005BC20()
{
  return &protocol witness table for Text;
}

_QWORD *sub_10005BC2C(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_10005BC54()
{
  _QWORD *v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, 0, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v8 = v0[2];
  v7 = v0[3];
  v32[0] = v8;
  v32[1] = v7;
  v32[2] = v4;
  v32[3] = v6;
  v10 = v0[11];
  v9 = v0[12];
  v33 = v10;
  v34 = v9;
  v11 = v0[9];
  v35 = v0[8];
  v36 = v11;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  if (!v7)
  {
    v12 = (char *)&_swiftEmptyArrayStorage;
    if (!v6)
      goto LABEL_12;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain_n(v7, 2);
  v12 = sub_10005E6F0(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v14 = *((_QWORD *)v12 + 2);
  v13 = *((_QWORD *)v12 + 3);
  if (v14 >= v13 >> 1)
    v12 = sub_10005E6F0((char *)(v13 > 1), v14 + 1, 1, v12);
  *((_QWORD *)v12 + 2) = v14 + 1;
  v15 = &v12[16 * v14];
  *((_QWORD *)v15 + 4) = v8;
  *((_QWORD *)v15 + 5) = v7;
  if (v6)
  {
LABEL_7:
    swift_bridgeObjectRetain(v6);
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_10005E6F0(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v17 = *((_QWORD *)v12 + 2);
    v16 = *((_QWORD *)v12 + 3);
    if (v17 >= v16 >> 1)
      v12 = sub_10005E6F0((char *)(v16 > 1), v17 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v17 + 1;
    v18 = &v12[16 * v17];
    *((_QWORD *)v18 + 4) = v4;
    *((_QWORD *)v18 + 5) = v6;
    v10 = v33;
    v9 = v34;
  }
LABEL_12:
  if (v9)
  {
    swift_bridgeObjectRetain(v9);
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_10005E6F0(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v20 = *((_QWORD *)v12 + 2);
    v19 = *((_QWORD *)v12 + 3);
    if (v20 >= v19 >> 1)
      v12 = sub_10005E6F0((char *)(v19 > 1), v20 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v20 + 1;
    v21 = &v12[16 * v20];
    *((_QWORD *)v21 + 4) = v10;
    *((_QWORD *)v21 + 5) = v9;
  }
  v22 = v36;
  if (v36)
  {
    v23 = v35;
    swift_bridgeObjectRetain(v36);
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_10005E6F0(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v25 = *((_QWORD *)v12 + 2);
    v24 = *((_QWORD *)v12 + 3);
    if (v25 >= v24 >> 1)
      v12 = sub_10005E6F0((char *)(v24 > 1), v25 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v25 + 1;
    v26 = &v12[16 * v25];
    *((_QWORD *)v26 + 4) = v23;
    *((_QWORD *)v26 + 5) = v22;
  }
  v27 = sub_100009F30(&qword_10008E0E8);
  swift_arrayDestroy(v32, 4, v27);
  v28 = sub_100009F30(&qword_10008B628);
  v29 = sub_10001157C();
  v30 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v28, v29);
  swift_bridgeObjectRelease(v12);
  return v30;
}

void sub_10005BF8C(void *a1@<X0>, int a2@<W1>, void *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  id v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  id v106;
  int v107;

  v107 = a5;
  v106 = a4;
  v99 = a2;
  v9 = sub_100009F30(&qword_10008B170);
  v10 = __chkstk_darwin(v9);
  v92 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v91 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v91 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v91 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v91 - v21;
  v23 = sub_100009F30(&qword_10008CA80);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v91 - v27;
  v29 = objc_msgSend(a1, "identifier");
  if (v29)
  {
    v30 = v29;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v97 = v32;
    v98 = v31;

  }
  else
  {
    v97 = 0xE000000000000000;
    v98 = 0;
  }
  v33 = objc_msgSend(a1, "title");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v95 = v36;
    v96 = v35;

  }
  else
  {
    v95 = 0xE000000000000000;
    v96 = 0;
  }
  v37 = objc_msgSend(a1, "widgetInfoText");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v103 = v39;
  v104 = v38;

  v40 = (void *)objc_opt_self(ICNoteListSortUtilities);
  v105 = a3;
  v41 = objc_msgSend(v40, "dateForCurrentSortTypeForNote:folderNoteSortType:", a1, a3);
  if (v41)
  {
    v42 = v41;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v43 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v26, 0, 1, v43);
  }
  else
  {
    v43 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v26, 1, 1, v43);
  }
  sub_10000CC50((uint64_t)v26, (uint64_t)v28, &qword_10008CA80);
  type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v28, 1, v43) == 1)
  {
    sub_10000CCD8((uint64_t)v28, &qword_10008CA80);
    v101 = 0xE000000000000000;
    v102 = 0;
  }
  else
  {
    v45 = Date.briefFormattedDate.getter();
    v101 = v46;
    v102 = v45;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v43);
  }
  v47 = objc_msgSend(v40, "dateForCurrentSortTypeAccessibilityStringForNote:folderNoteSortType:", a1, v105);
  if (v47)
  {
    v48 = v47;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v93 = v50;
    v94 = v49;

  }
  else
  {
    v93 = 0xE000000000000000;
    v94 = 0;
  }
  v51 = objc_msgSend(a1, "isSharedViaICloud");
  v52 = objc_msgSend(a1, "shareDescription");
  v100 = v51;
  if (v52)
  {
    v53 = v52;
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v56 = v55;

  }
  else
  {
    v54 = 0;
    v56 = 0;
  }
  v57 = v107;
  if ((_BYTE)v107 == 0xFF)
  {
    v63 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v20, 1, 1, v63);
  }
  else
  {
    v58 = (void *)objc_opt_self(ICAppURLUtilities);
    v59 = v106;
    if ((v57 & 1) != 0)
    {
      v64 = objc_msgSend(v58, "appURLForNote:inVirtualSmartFolder:", a1, v59);
      if (v64)
      {
        v65 = v64;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v64);

        v66 = v106;
        v67 = v107;
        sub_10005F7FC(v106, v107);
        v68 = type metadata accessor for URL(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v14, 0, 1, v68);
      }
      else
      {
        v66 = v106;
        v67 = v107;
        sub_10005F7FC(v106, v107);
        v71 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v14, 1, 1, v71);
      }
      v17 = v14;
      v70 = v66;
    }
    else
    {
      v60 = objc_msgSend(v58, "appURLForNote:inFolder:", a1, v59);
      if (v60)
      {
        v61 = v60;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v60);

        v62 = type metadata accessor for URL(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v17, 0, 1, v62);
      }
      else
      {
        v69 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v17, 1, 1, v69);
      }
      v67 = v107;
      v70 = v106;
    }
    sub_10000CC50((uint64_t)v17, (uint64_t)v20, &qword_10008B170);
    sub_10005F7FC(v70, v67);
    v72 = type metadata accessor for URL(0);
    v73 = *(_QWORD *)(v72 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v20, 1, v72) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v22, v20, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v22, 0, 1, v72);
      v78 = v99;
      goto LABEL_36;
    }
  }
  v74 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForNote:", a1);
  if (v74)
  {
    v75 = v74;
    v76 = (uint64_t)v92;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v74);

    v77 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v76, 0, 1, v77);
  }
  else
  {
    v79 = type metadata accessor for URL(0);
    v76 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v92, 1, 1, v79);
  }
  v78 = v99;
  sub_10000CC50(v76, (uint64_t)v22, &qword_10008B170);
  sub_10000CCD8((uint64_t)v20, &qword_10008B170);
LABEL_36:
  v80 = sub_10005EE0C(a1);
  if ((v78 & 1) != 0)
    v81 = sub_10001063C(a1);
  else
    v81 = &_swiftEmptyArrayStorage;
  v82 = sub_10005F460(a1, 10);
  v83 = sub_10005F460(a1, 11);
  v84 = objc_msgSend(a1, "ic_hasLightBackground");
  v85 = v97;
  *(_QWORD *)a6 = v98;
  *(_QWORD *)(a6 + 8) = v85;
  v86 = v95;
  *(_QWORD *)(a6 + 16) = v96;
  *(_QWORD *)(a6 + 24) = v86;
  v87 = v103;
  *(_QWORD *)(a6 + 32) = v104;
  *(_QWORD *)(a6 + 40) = v87;
  v88 = v101;
  *(_QWORD *)(a6 + 48) = v102;
  *(_QWORD *)(a6 + 56) = v88;
  v89 = v93;
  *(_QWORD *)(a6 + 64) = v94;
  *(_QWORD *)(a6 + 72) = v89;
  *(_BYTE *)(a6 + 80) = v100;
  *(_QWORD *)(a6 + 88) = v54;
  *(_QWORD *)(a6 + 96) = v56;
  v90 = (int *)type metadata accessor for Note(0);
  sub_10000CC50((uint64_t)v22, a6 + v90[11], &qword_10008B170);
  *(_QWORD *)(a6 + v90[12]) = v80;
  *(_QWORD *)(a6 + v90[13]) = v81;
  *(_QWORD *)(a6 + v90[14]) = v82;
  *(_QWORD *)(a6 + v90[15]) = v83;
  *(_BYTE *)(a6 + v90[16]) = v84;
  objc_msgSend(a1, "turnAttachmentsIntoFaults");
  sub_10005F7FC(v106, v107);

}

id sub_10005C6C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v4 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v4);
  v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008CA80);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v45 - v10;
  v12 = objc_msgSend(a1, "identifier");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0xE000000000000000;
  }
  result = objc_msgSend(a1, "title");
  if (result)
  {
    v18 = result;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v48 = v20;
    v49 = v19;

    v21 = objc_msgSend(a1, "widgetInfoText");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v46 = v23;
    v47 = v22;

    v24 = (void *)objc_opt_self(ICNoteListSortUtilities);
    v25 = objc_msgSend(v24, "dateForCurrentSortTypeForNote:folderNoteSortType:", a1, 0);
    if (v25)
    {
      v26 = v25;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v27 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 0, 1, v27);
    }
    else
    {
      v27 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 1, 1, v27);
    }
    sub_10000CC50((uint64_t)v9, (uint64_t)v11, &qword_10008CA80);
    type metadata accessor for Date(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v11, 1, v27) == 1)
    {
      sub_10000CCD8((uint64_t)v11, &qword_10008CA80);
      v29 = 0;
      v30 = 0xE000000000000000;
    }
    else
    {
      v29 = Date.briefFormattedDate.getter();
      v30 = v31;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v27);
    }
    v32 = (uint64_t)v50;
    v33 = objc_msgSend(v24, "dateForCurrentSortTypeAccessibilityStringForNote:folderNoteSortType:", a1, 0);
    if (v33)
    {
      v34 = v33;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v37 = v36;

    }
    else
    {
      v35 = 0;
      v37 = 0xE000000000000000;
    }
    v38 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForHTMLNote:", a1);
    if (v38)
    {
      v39 = v38;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v38);

      v40 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v32, 0, 1, v40);
    }
    else
    {
      v41 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v32, 1, 1, v41);
    }

    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v16;
    v42 = v48;
    *(_QWORD *)(a2 + 16) = v49;
    *(_QWORD *)(a2 + 24) = v42;
    v43 = v46;
    *(_QWORD *)(a2 + 32) = v47;
    *(_QWORD *)(a2 + 40) = v43;
    *(_QWORD *)(a2 + 48) = v29;
    *(_QWORD *)(a2 + 56) = v30;
    *(_QWORD *)(a2 + 64) = v35;
    *(_QWORD *)(a2 + 72) = v37;
    *(_BYTE *)(a2 + 80) = 0;
    v44 = (int *)type metadata accessor for Note(0);
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    result = (id)sub_10000CC50(v32, a2 + v44[11], &qword_10008B170);
    *(_QWORD *)(a2 + v44[12]) = 0;
    *(_QWORD *)(a2 + v44[13]) = &_swiftEmptyArrayStorage;
    *(_QWORD *)(a2 + v44[14]) = 0;
    *(_QWORD *)(a2 + v44[15]) = 0;
    *(_BYTE *)(a2 + v44[16]) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005CA70@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  id v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  NSURL *v45;
  void (**v46)(char *, uint64_t);
  void *v47;
  void *v48;
  unsigned int v49;
  NSURL *v50;
  char *v51;
  char *v52;
  id v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  void *v73;
  unsigned int v74;
  char *v75;
  id v76;
  void *v77;
  char *v78;
  char *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  __n128 v91;
  void (*v92)(char *, uint64_t, __n128);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char **v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  id v106;
  id v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115[2];

  v106 = a2;
  v107 = a3;
  v113 = a1;
  v108 = a4;
  v102 = sub_100009F30(&qword_10008D310);
  v4 = __chkstk_darwin(v102);
  v103 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v99 = (char *)&v98 - v7;
  v8 = __chkstk_darwin(v6);
  v100 = (char **)((char *)&v98 - v9);
  __chkstk_darwin(v8);
  v105 = (uint64_t)&v98 - v10;
  v112 = type metadata accessor for Logger(0);
  v110 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v109 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v12);
  v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(char **)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v98 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v104 = (char *)&v98 - v19;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (int *)type metadata accessor for Note(0);
  v111 = *((_QWORD *)v24 - 1);
  v25 = __chkstk_darwin(v24);
  v101 = (uint64_t)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v98 - v28;
  v30 = UUID.init()(v27);
  v31 = UUID.uuidString.getter(v30);
  v33 = v32;
  v34 = *(void (**)(char *, uint64_t))(v21 + 8);
  v35 = v113;
  v34(v23, v20);
  *(_QWORD *)v29 = v31;
  *((_QWORD *)v29 + 1) = v33;
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 3) = 0xE000000000000000;
  *((_QWORD *)v29 + 4) = 0;
  *((_QWORD *)v29 + 5) = 0xE000000000000000;
  *((_QWORD *)v29 + 6) = 0;
  *((_QWORD *)v29 + 7) = 0xE000000000000000;
  *((_QWORD *)v29 + 8) = 0;
  *((_QWORD *)v29 + 9) = 0xE000000000000000;
  v29[80] = 0;
  *((_QWORD *)v29 + 11) = 0;
  *((_QWORD *)v29 + 12) = 0;
  v36 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v16 + 7);
  v36(&v29[v24[11]], 1, 1, v15);
  *(_QWORD *)&v29[v24[12]] = 0;
  *(_QWORD *)&v29[v24[13]] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v29[v24[14]] = 0;
  *(_QWORD *)&v29[v24[15]] = 0;
  v29[v24[16]] = 0;
  v37 = objc_msgSend(v35, "identifier");
  if (!v37)
  {
    v36(v14, 1, 1, v15);
    goto LABEL_6;
  }
  v38 = v37;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v41 = v40;

  swift_bridgeObjectRetain(v41);
  URL.init(string:)(v39, v41);
  swift_bridgeObjectRelease_n(v41, 2);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v16 + 6))(v14, 1, v15) == 1)
  {
LABEL_6:
    sub_10000CCD8((uint64_t)v14, &qword_10008B170);
    if (qword_10008B150 != -1)
      swift_once(&qword_10008B150, sub_10005D520);
    v58 = v112;
    v59 = sub_100010130(v112, (uint64_t)qword_10008E008);
    v61 = v109;
    v60 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v109, v59, v58);
    v62 = v35;
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v115[0] = v66;
      *(_DWORD *)v65 = 136315138;
      v67 = objc_msgSend(v62, "identifier");
      if (v67)
      {
        v68 = v67;
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        v71 = v70;

      }
      else
      {
        v71 = 0xA300000000000000;
        v69 = 9732322;
      }
      v114 = sub_10002D35C(v69, v71, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v65 + 4, v65 + 12);

      swift_bridgeObjectRelease(v71);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Cannot create note URL from intent note identifier — returning nil {identifier: %s}", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

      (*(void (**)(char *, uint64_t))(v110 + 8))(v109, v112);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v58);
    }
    sub_1000301BC((uint64_t)v29);
    v43 = v111;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v43 + 56))(v108, 1, 1, v24);
  }
  v42 = v104;
  (*((void (**)(char *, char *, uint64_t))v16 + 4))(v104, v14, v15);
  v43 = v111;
  v110 = *(_QWORD *)(v111 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, int *))v110)(v105, 1, 1, v24);
  v44 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v45);
  v46 = (void (**)(char *, uint64_t))v16;
  v48 = v47;
  v49 = objc_msgSend(v44, "isShowNoteURL:", v47);

  if (v49)
  {
    v51 = v42;
    v112 = v15;
    v52 = (char *)v106;
    v53 = objc_msgSend(v106, "managedObjectContext");
    __chkstk_darwin(v53);
    *(&v98 - 2) = v51;
    *(&v98 - 1) = v52;
    v54 = v100;
    NSManagedObjectContext.performAndWait<A>(_:)(sub_10005F86C);

    v55 = v105;
    sub_10000CCD8(v105, &qword_10008D310);
    sub_1000301BC((uint64_t)v29);

    v46[1](v51, v112);
    v56 = (uint64_t)v54;
    v57 = v55;
LABEL_27:
    sub_10000CC50(v56, v57, &qword_10008D310);
    v94 = (uint64_t)v103;
    goto LABEL_28;
  }
  v109 = (char *)v46;
  URL._bridgeToObjectiveC()(v50);
  v73 = v72;
  v74 = objc_msgSend(v44, "isShowHTMLNoteURL:", v72);

  if (v74)
  {
    v75 = (char *)v107;
    v76 = objc_msgSend(v107, "managedObjectContext");
    if (v76)
    {
      v77 = v76;
      v112 = v15;
      v100 = &v98;
      __chkstk_darwin(v76);
      *(&v98 - 2) = v42;
      *(&v98 - 1) = v75;
      v78 = v99;
      NSManagedObjectContext.performAndWait<A>(_:)(sub_10005F854);

      v55 = v105;
      sub_10000CCD8(v105, &qword_10008D310);
      sub_1000301BC((uint64_t)v29);
      (*((void (**)(char *, uint64_t))v109 + 1))(v42, v112);
    }
    else
    {

      v55 = v105;
      sub_10000CCD8(v105, &qword_10008D310);
      sub_1000301BC((uint64_t)v29);
      (*((void (**)(char *, uint64_t))v109 + 1))(v42, v15);
      v78 = v99;
      ((void (*)(char *, uint64_t, uint64_t, int *))v110)(v99, 1, 1, v24);
    }
    v56 = (uint64_t)v78;
    v57 = v55;
    goto LABEL_27;
  }
  if (qword_10008B150 != -1)
    swift_once(&qword_10008B150, sub_10005D520);
  sub_100010130(v112, (uint64_t)qword_10008E008);
  v80 = v98;
  v81 = (*((uint64_t (**)(char *, char *, uint64_t))v109 + 2))(v98, v42, v15);
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v82, v83))
  {
    v84 = swift_slowAlloc(12, -1);
    v112 = v15;
    v85 = (uint8_t *)v84;
    v86 = swift_slowAlloc(32, -1);
    v115[0] = v86;
    *(_DWORD *)v85 = 136315138;
    v87 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
    v88 = dispatch thunk of CustomStringConvertible.description.getter(v112, v87);
    v90 = v89;
    v114 = sub_10002D35C(v88, v89, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v85 + 4, v85 + 12);
    v91 = swift_bridgeObjectRelease(v90);
    v92 = (void (*)(char *, uint64_t, __n128))*((_QWORD *)v109 + 1);
    v92(v80, v112, v91);
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Unknown note URL type — returning nil {noteURL: %s}", v85, 0xCu);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    v93 = v86;
    v43 = v111;
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v85, -1, -1);

    v15 = v112;
  }
  else
  {

    v92 = (void (*)(char *, uint64_t, __n128))*((_QWORD *)v109 + 1);
    ((void (*)(char *, uint64_t))v92)(v80, v15);
  }
  sub_1000301BC((uint64_t)v29);
  ((void (*)(char *, uint64_t))v92)(v104, v15);
  v94 = (uint64_t)v103;
  v55 = v105;
LABEL_28:
  sub_10000CC50(v55, v94, &qword_10008D310);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v43 + 48))(v94, 1, v24) == 1)
  {
    sub_10000CCD8(v94, &qword_10008D310);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v43 + 56))(v108, 1, 1, v24);
  }
  v95 = v94;
  v96 = v101;
  sub_10005F810(v95, v101);
  sub_10005F810(v96, (uint64_t)v29);
  v97 = v108;
  sub_10005F810((uint64_t)v29, v108);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, int *))v110)(v97, 0, 1, v24);
}

uint64_t sub_10005D520()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100010B60(v0, qword_10008E008);
  sub_100010130(v0, (uint64_t)qword_10008E008);
  return static Logger.widget.getter();
}

uint64_t sub_10005D56C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *ObjCClassFromMetadata;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v72 = a3;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v69 - v10;
  v12 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  v16 = objc_msgSend(v12, "predicateForNotesMentionedInURL:", v14);

  v17 = sub_100010B28(0, &qword_10008CA98, ICNote_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v17);
  v19 = objc_msgSend(a2, "managedObjectContext");
  v71 = v16;
  v20 = objc_msgSend(ObjCClassFromMetadata, "ic_objectsMatchingPredicate:context:", v16, v19);

  v21 = sub_100010B28(0, &qword_10008CAA0, NSManagedObject_ptr);
  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

  if (!((unint64_t)v22 >> 62))
  {
    if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_23:
    swift_bridgeObjectRelease(v22);
    if (qword_10008B150 == -1)
    {
LABEL_24:
      v56 = type metadata accessor for Logger(0);
      sub_100010130(v56, (uint64_t)qword_10008E008);
      v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v70 = v6;
        v62 = v61;
        v75 = v61;
        *(_DWORD *)v60 = 136315138;
        v63 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
        v64 = dispatch thunk of CustomStringConvertible.description.getter(v5, v63);
        v66 = v65;
        v73 = sub_10002D35C(v64, v65, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v60 + 4, v60 + 12);
        v67 = swift_bridgeObjectRelease(v66);
        (*(void (**)(char *, uint64_t, __n128))(v70 + 8))(v11, v5, v67);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Cannot find object for note URL — returning nil {noteURL: %s}", v60, 0xCu);
        swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      }

      goto LABEL_28;
    }
LABEL_32:
    swift_once(&qword_10008B150, sub_10005D520);
    goto LABEL_24;
  }
  if (v22 < 0)
    v54 = v22;
  else
    v54 = v22 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v22);
  v55 = _CocoaArrayWrapper.endIndex.getter(v54);
  swift_bridgeObjectRelease(v22);
  if (!v55)
    goto LABEL_23;
LABEL_3:
  if ((v22 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v23 = *(id *)(v22 + 32);
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_32;
  }
  v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
LABEL_6:
  v24 = v23;
  swift_bridgeObjectRelease(v22);
  v25 = objc_msgSend((id)objc_opt_self(ICWidget), "sharedWidget");
  v26 = objc_msgSend(v25, "hidesObject:", v24);

  if ((v26 & 1) == 0)
  {
    v39 = objc_opt_self(ICNote);
    v40 = swift_dynamicCastObjCClass(v24, v39);
    if (v40)
    {
      v41 = (void *)v40;
      v42 = v24;
      v43 = v72;
      sub_10005BF8C(v41, 1, 0, 0, 255, v72);

      v44 = type metadata accessor for Note(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
    }
    if (qword_10008B150 != -1)
      swift_once(&qword_10008B150, sub_10005D520);
    v46 = type metadata accessor for Logger(0);
    sub_100010130(v46, (uint64_t)qword_10008E008);
    v47 = v24;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v50 = 138412290;
      v52 = objc_msgSend(v47, "objectID");
      v75 = (uint64_t)v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v50 + 4, v50 + 12);
      *v51 = v52;

      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unknown note object type — returning nil {objectID: %@}", v50, 0xCu);
      v53 = sub_100009F30(&qword_10008B548);
      swift_arrayDestroy(v51, 1, v53);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {

    }
    goto LABEL_28;
  }
  if (qword_10008B150 != -1)
    swift_once(&qword_10008B150, sub_10005D520);
  v27 = type metadata accessor for Logger(0);
  sub_100010130(v27, (uint64_t)qword_10008E008);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v70 = v6;
    v33 = v32;
    v75 = v32;
    *(_DWORD *)v31 = 136315138;
    v69 = v31 + 4;
    v34 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v5, v34);
    v37 = v36;
    v73 = sub_10002D35C(v35, v36, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v69, v31 + 12);
    v38 = swift_bridgeObjectRelease(v37);
    (*(void (**)(char *, uint64_t, __n128))(v70 + 8))(v9, v5, v38);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Widget hides object for note URL — returning nil {noteURL: %s}", v31, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v31, -1, -1);

LABEL_28:
    goto LABEL_29;
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
LABEL_29:
  v68 = type metadata accessor for Note(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v72, 1, 1, v68);
}

uint64_t sub_10005DCF4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (**v9)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  NSURL *v19;
  void *v20;
  void *v21;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  char *v24;
  id v25;
  void *v26;
  id v27;
  NSURL *v28;
  void *v29;
  void *v30;
  void (**v31)(char *, uint64_t, __n128);
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __n128 v50;
  void (*v51)(char *, uint64_t, __n128);
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  id v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  _QWORD *v82;
  char *v83;
  id v84;
  uint64_t v85;
  void *v86;
  id v87;
  char *v88;
  char *v89;
  void (**v90)(char *, uint64_t, __n128);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;

  v91 = a3;
  v5 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v5);
  v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v90 = (void (**)(char *, uint64_t, __n128))((char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v10);
  v88 = (char *)&v86 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v86 - v15;
  __chkstk_darwin(v14);
  v89 = (char *)&v86 - v17;
  v18 = (void *)objc_opt_self(ICAppURLUtilities);
  URL._bridgeToObjectiveC()(v19);
  v21 = v20;
  v22 = objc_msgSend(v18, "objectIDURIRepresentationForHTMLNoteMentionedInURL:", v20);

  if (!v22)
  {
    v9[7](v7, 1, 1, v8);
    v24 = (char *)v9;
    goto LABEL_14;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

  v23 = v9[4];
  ((void (*)(char *, char *, uint64_t))v23)(v7, v16, v8);
  v9[7](v7, 0, 1, v8);
  v24 = (char *)v9;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v9[6])(v7, 1, v8) == 1)
  {
LABEL_14:
    sub_10000CCD8((uint64_t)v7, &qword_10008B170);
LABEL_18:
    v56 = (char *)v90;
    if (qword_10008B150 != -1)
      swift_once(&qword_10008B150, sub_10005D520);
    v57 = type metadata accessor for Logger(0);
    sub_100010130(v57, (uint64_t)qword_10008E008);
    v58 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v24 + 2))(v56, a1, v8);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = (void *)swift_slowAlloc(32, -1);
      v94 = v62;
      *(_DWORD *)v61 = 136315138;
      v90 = (void (**)(char *, uint64_t, __n128))v24;
      v63 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v8, v63);
      v66 = v65;
      v93 = sub_10002D35C(v64, v65, (uint64_t *)&v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v61 + 4, v61 + 12);
      v67 = swift_bridgeObjectRelease(v66);
      v90[1](v56, v8, v67);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Cannot find HTML object for note URL — returning nil {noteURL: %s}", v61, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v24 + 1))(v56, v8);
    }

    goto LABEL_24;
  }
  ((void (*)(char *, char *, uint64_t))v23)(v89, v7, v8);
  v25 = objc_msgSend(a2, "managedObjectContext");
  if (!v25)
    goto LABEL_17;
  v26 = v25;
  v27 = objc_msgSend(v25, "persistentStoreCoordinator");

  if (!v27)
    goto LABEL_17;
  URL._bridgeToObjectiveC()(v28);
  v30 = v29;
  v31 = (void (**)(char *, uint64_t, __n128))objc_msgSend(v27, "managedObjectIDForURIRepresentation:", v29);

  if (!v31)
    goto LABEL_17;
  v32 = objc_msgSend(a2, "managedObjectContext");
  if (!v32)
  {

LABEL_17:
    (*((void (**)(char *, uint64_t))v24 + 1))(v89, v8);
    goto LABEL_18;
  }
  v33 = v32;
  v94 = 0;
  v34 = objc_msgSend(v32, "existingObjectWithID:error:", v31, &v94);

  v35 = v94;
  if (!v34)
  {
    v53 = v94;
    v54 = _convertNSErrorToError(_:)(v35);

    swift_willThrow(v55);
    swift_errorRelease(v54);
    v92 = 0;
    goto LABEL_17;
  }
  v36 = objc_opt_self(ICWidget);
  v37 = v35;
  v38 = objc_msgSend((id)v36, "sharedWidget");
  LOBYTE(v36) = objc_msgSend(v38, "hidesObject:", v34);

  if ((v36 & 1) != 0)
  {
    if (qword_10008B150 != -1)
      swift_once(&qword_10008B150, sub_10005D520);
    v39 = type metadata accessor for Logger(0);
    sub_100010130(v39, (uint64_t)qword_10008E008);
    v40 = v88;
    v41 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v24 + 2))(v88, a1, v8);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(12, -1);
      v87 = v34;
      v45 = (uint8_t *)v44;
      v86 = (void *)swift_slowAlloc(32, -1);
      v94 = v86;
      *(_DWORD *)v45 = 136315138;
      v90 = v31;
      v46 = sub_10001153C(&qword_10008B540, (uint64_t)&protocol conformance descriptor for URL);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v8, v46);
      v49 = v48;
      v93 = sub_10002D35C(v47, v48, (uint64_t *)&v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v45 + 4, v45 + 12);
      v50 = swift_bridgeObjectRelease(v49);
      v51 = (void (*)(char *, uint64_t, __n128))*((_QWORD *)v24 + 1);
      v51(v40, v8, v50);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Widget hides HTML object for note URL — returning nil {noteURL: %s}", v45, 0xCu);
      v52 = v86;
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      ((void (*)(char *, uint64_t))v51)(v89, v8);
    }
    else
    {

      v76 = (void (*)(char *, uint64_t))*((_QWORD *)v24 + 1);
      v76(v40, v8);

      v76(v89, v8);
    }
LABEL_24:
    v68 = type metadata accessor for Note(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v91, 1, 1, v68);
  }
  v70 = objc_opt_self(NoteObject);
  v71 = swift_dynamicCastObjCClass(v34, v70);
  if (!v71)
  {
    if (qword_10008B150 != -1)
      swift_once(&qword_10008B150, sub_10005D520);
    v77 = type metadata accessor for Logger(0);
    sub_100010130(v77, (uint64_t)qword_10008E008);
    v78 = v34;
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v90 = v31;
      v81 = (uint8_t *)swift_slowAlloc(12, -1);
      v82 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v81 = 138412290;
      v88 = (char *)(v81 + 4);
      v83 = v24;
      v84 = objc_msgSend(v78, "objectID");
      v94 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v88, v81 + 12);
      *v82 = v84;
      v24 = v83;
      v31 = v90;

      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Unknown HTML note object type — returning nil {objectID: %@}", v81, 0xCu);
      v85 = sub_100009F30(&qword_10008B548);
      swift_arrayDestroy(v82, 1, v85);
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v81, -1, -1);
    }
    else
    {

    }
    (*((void (**)(char *, uint64_t))v24 + 1))(v89, v8);
    goto LABEL_24;
  }
  v72 = (void *)v71;
  v73 = v34;
  v74 = v91;
  sub_10005C6C8(v72, v91);

  (*((void (**)(char *, uint64_t))v24 + 1))(v89, v8);
  v75 = type metadata accessor for Note(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 0, 1, v75);
}

uint64_t sub_10005E5F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;

  v2 = a1[2];
  if (v2 != a2[2])
    goto LABEL_7;
  if (!v2 || a1 == a2)
    goto LABEL_6;
  v5 = a1[4];
  v6 = a2[4];
  swift_retain(v5);
  swift_retain(v6);
  v7 = static Image.== infix(_:_:)(v5, v6);
  swift_release(v5);
  swift_release(v6);
  if ((v7 & 1) == 0)
  {
LABEL_7:
    v8 = 0;
    return v8 & 1;
  }
  if (v2 == 1)
  {
LABEL_6:
    v8 = 1;
    return v8 & 1;
  }
  v10 = v2 - 2;
  v11 = a1 + 5;
  v12 = a2 + 5;
  do
  {
    v14 = *v11++;
    v13 = v14;
    v15 = *v12++;
    swift_retain(v13);
    swift_retain(v15);
    v8 = static Image.== infix(_:_:)(v13, v15);
    swift_release(v13);
    swift_release(v15);
    v17 = v10-- != 0;
  }
  while ((v8 & 1) != 0 && v17);
  return v8 & 1;
}

char *sub_10005E6F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100009F30(&qword_10008E0F0);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10005E7FC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005E7FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10005E8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  char v57;
  void (*v58)(char *, uint64_t);
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100009F30(&qword_10008B618);
  __chkstk_darwin(v8);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100009F30(&qword_10008B170);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v75 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v75 - v18;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v20 == v21
    || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)a1, v20, *(_QWORD *)a2, v21, 0),
        v23 = 0,
        (v22 & 1) != 0))
  {
    if ((v24 = *(_QWORD *)(a1 + 16),
          v25 = *(_QWORD *)(a1 + 24),
          v26 = *(_QWORD *)(a2 + 16),
          v27 = *(_QWORD *)(a2 + 24),
          v24 == v26)
      && v25 == v27
      || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0), v23 = 0, (v28 & 1) != 0))
    {
      if ((v29 = *(_QWORD *)(a1 + 32),
            v30 = *(_QWORD *)(a1 + 40),
            v31 = *(_QWORD *)(a2 + 32),
            v32 = *(_QWORD *)(a2 + 40),
            v29 == v31)
        && v30 == v32
        || (v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0), v23 = 0, (v33 & 1) != 0))
      {
        if ((v34 = *(_QWORD *)(a1 + 48),
              v35 = *(_QWORD *)(a1 + 56),
              v36 = *(_QWORD *)(a2 + 48),
              v37 = *(_QWORD *)(a2 + 56),
              v34 == v36)
          && v35 == v37
          || (v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v36, v37, 0), v23 = 0, (v38 & 1) != 0))
        {
          if ((v39 = *(_QWORD *)(a1 + 64),
                v40 = *(_QWORD *)(a1 + 72),
                v41 = *(_QWORD *)(a2 + 64),
                v42 = *(_QWORD *)(a2 + 72),
                v39 == v41)
            && v40 == v42
            || (v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v41, v42, 0), v23 = 0, (v43 & 1) != 0))
          {
            if (*(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
              goto LABEL_17;
            v45 = *(_QWORD *)(a1 + 96);
            v46 = *(_QWORD *)(a2 + 96);
            if (!v45)
            {
              if (v46)
                goto LABEL_17;
              goto LABEL_26;
            }
            if (!v46)
              goto LABEL_17;
            v47 = *(_QWORD *)(a1 + 88);
            v48 = *(_QWORD *)(a2 + 88);
            if (v47 == v48 && v45 == v46
              || (v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v45, v48, v46, 0), v23 = 0, (v49 & 1) != 0))
            {
LABEL_26:
              v50 = type metadata accessor for Note(0);
              v77 = v4;
              v51 = v50;
              sub_1000114F4(a1 + *(int *)(v50 + 44), (uint64_t)v19);
              v76 = (int *)v51;
              v52 = *(int *)(v51 + 44);
              v53 = v77;
              sub_1000114F4(a2 + v52, (uint64_t)v17);
              v54 = (uint64_t)&v10[*(int *)(v8 + 48)];
              sub_1000114F4((uint64_t)v19, (uint64_t)v10);
              v78 = v54;
              sub_1000114F4((uint64_t)v17, v54);
              v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
              if (v55((uint64_t)v10, 1, v53) == 1)
              {
                sub_10000CCD8((uint64_t)v17, &qword_10008B170);
                sub_10000CCD8((uint64_t)v19, &qword_10008B170);
                if (v55(v78, 1, v53) == 1)
                {
                  sub_10000CCD8((uint64_t)v10, &qword_10008B170);
LABEL_33:
                  v59 = v76;
                  v60 = v76[12];
                  v61 = *(_QWORD *)(a1 + v60);
                  v62 = *(_QWORD *)(a2 + v60);
                  if (v61)
                  {
                    if (!v62)
                      goto LABEL_17;
                    swift_retain(*(_QWORD *)(a2 + v60));
                    v63 = swift_retain(v61);
                    v64 = static Image.== infix(_:_:)(v63, v62);
                    swift_release(v61);
                    swift_release(v62);
                    if ((v64 & 1) == 0)
                      goto LABEL_17;
                  }
                  else if (v62)
                  {
                    goto LABEL_17;
                  }
                  if ((sub_10005E5F8(*(_QWORD **)(a1 + v59[13]), *(_QWORD **)(a2 + v59[13])) & 1) != 0)
                  {
                    v65 = v59[14];
                    v66 = *(_QWORD *)(a1 + v65);
                    v67 = *(_QWORD *)(a2 + v65);
                    if (v66)
                    {
                      if (!v67)
                        goto LABEL_17;
                      swift_retain(*(_QWORD *)(a2 + v65));
                      v68 = swift_retain(v66);
                      v69 = static Image.== infix(_:_:)(v68, v67);
                      swift_release(v66);
                      swift_release(v67);
                      if ((v69 & 1) == 0)
                        goto LABEL_17;
                    }
                    else if (v67)
                    {
                      goto LABEL_17;
                    }
                    v70 = v59[15];
                    v71 = *(_QWORD *)(a1 + v70);
                    v72 = *(_QWORD *)(a2 + v70);
                    if (v71)
                    {
                      if (!v72)
                        goto LABEL_17;
                      swift_retain(*(_QWORD *)(a2 + v70));
                      v73 = swift_retain(v71);
                      v74 = static Image.== infix(_:_:)(v73, v72);
                      swift_release(v71);
                      swift_release(v72);
                      if ((v74 & 1) == 0)
                        goto LABEL_17;
                    }
                    else if (v72)
                    {
                      goto LABEL_17;
                    }
                    v23 = *(_BYTE *)(a1 + v59[16]) ^ *(_BYTE *)(a2 + v59[16]) ^ 1;
                    return v23 & 1;
                  }
LABEL_17:
                  v23 = 0;
                  return v23 & 1;
                }
              }
              else
              {
                sub_1000114F4((uint64_t)v10, (uint64_t)v14);
                if (v55(v78, 1, v53) != 1)
                {
                  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v78, v53);
                  v56 = sub_10001153C(&qword_10008B620, (uint64_t)&protocol conformance descriptor for URL);
                  v57 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v53, v56);
                  v58 = *(void (**)(char *, uint64_t))(v5 + 8);
                  v58(v7, v53);
                  sub_10000CCD8((uint64_t)v17, &qword_10008B170);
                  sub_10000CCD8((uint64_t)v19, &qword_10008B170);
                  v58(v14, v53);
                  sub_10000CCD8((uint64_t)v10, &qword_10008B170);
                  if ((v57 & 1) == 0)
                    goto LABEL_17;
                  goto LABEL_33;
                }
                sub_10000CCD8((uint64_t)v17, &qword_10008B170);
                sub_10000CCD8((uint64_t)v19, &qword_10008B170);
                (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v53);
              }
              sub_10000CCD8((uint64_t)v10, &qword_10008B618);
              goto LABEL_17;
            }
          }
        }
      }
    }
  }
  return v23 & 1;
}

uint64_t sub_10005EE0C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  void *v19;
  double v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  id v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  id v49;
  uint64_t v50;
  id v52;
  id v53;
  uint64_t v54;

  v2 = sub_100009F30(&qword_10008B170);
  __chkstk_darwin(v2);
  v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v52 - v10;
  objc_msgSend(a1, "updateThumbnailAttachmentIdentifier");
  v12 = objc_msgSend(a1, "managedObjectContext");
  if (!v12)
    return 0;
  v13 = v12;
  v14 = objc_msgSend(a1, "thumbnailAttachmentIdentifier");
  if (!v14)
    goto LABEL_23;
  v15 = v14;
  v16 = sub_100010B28(0, &qword_10008E020, ICAttachment_ptr);
  v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "cloudObjectWithIdentifier:context:", v15, v13);

  if (!v17)
    goto LABEL_23;
  if (qword_10008B140 != -1)
    swift_once(&qword_10008B140, sub_100048768);
  v18 = xmmword_100099510;
  v19 = (void *)objc_opt_self(UIScreen);
  objc_msgSend(v19, "ic_scale");
  v21 = objc_msgSend(v17, "attachmentPreviewImageWithMinSize:scale:", v18, v20);
  if (!v21)
  {
    if (qword_10008B150 != -1)
      swift_once(&qword_10008B150, sub_10005D520);
    v35 = type metadata accessor for Logger(0);
    sub_100010130(v35, (uint64_t)qword_10008E008);
    v36 = v17;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v38))
    {

      goto LABEL_22;
    }
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v39 = 138412290;
    v41 = objc_msgSend(v36, "objectID");
    v53 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 4, v39 + 12);
    *v40 = v41;

    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Cannot create preview image for attachment — returning nil preview image {objectID: %@}", v39, 0xCu);
    v42 = sub_100009F30(&qword_10008B548);
    swift_arrayDestroy(v40, 1, v42);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

LABEL_23:
    return 0;
  }
  v22 = v21;
  v23 = objc_msgSend(v21, "previewImageURL");
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_16;
  }
  v24 = v23;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

  v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v25(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_16:
    sub_10000CCD8((uint64_t)v4, &qword_10008B170);
    if (qword_10008B150 != -1)
      swift_once(&qword_10008B150, sub_10005D520);
    v43 = type metadata accessor for Logger(0);
    sub_100010130(v43, (uint64_t)qword_10008E008);
    v44 = v17;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v47 = 138412290;
      v36 = v22;
      v49 = objc_msgSend(v44, "objectID");
      v53 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v47 + 4, v47 + 12);
      *v48 = v49;

      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Cannot get previewImageURL for preview image - returning nil preview image {objectID: %@}", v47, 0xCu);
      v50 = sub_100009F30(&qword_10008B548);
      swift_arrayDestroy(v48, 1, v50);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

LABEL_22:
      goto LABEL_23;
    }

    goto LABEL_23;
  }
  v52 = v22;
  v26 = ((uint64_t (*)(char *, char *, uint64_t))v25)(v11, v4, v5);
  URL.path.getter(v26);
  v28 = v27;
  v29 = objc_allocWithZone((Class)UIImage);
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "initWithContentsOfFile:", v30, swift_bridgeObjectRelease(v28).n128_f64[0]);

  if (!v31)
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return 0;
  }
  v32 = *((double *)&xmmword_100099510 + 1);
  objc_msgSend(v19, "ic_scale");
  v34 = Image.init(uiImage:)(objc_msgSend(v31, "ic_scaledImageMinDimension:scale:", v32, v33));

  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v34;
}

uint64_t sub_10005F460(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v23;

  v4 = type metadata accessor for NotePreview(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  if (!objc_msgSend(a1, "isSystemPaper"))
    return v8;
  type metadata accessor for WidgetNotePreviewProvider(0);
  v9 = static WidgetNotePreviewProvider.shared.getter();
  v10 = objc_msgSend(a1, "account");
  v11 = v10;
  if (!v10)
    goto LABEL_6;
  v12 = objc_msgSend(v10, "identifier");

  if (!v12)
  {
    v11 = 0;
LABEL_6:
    v14 = 0;
    goto LABEL_7;
  }
  v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14 = v13;

LABEL_7:
  v15 = objc_msgSend(a1, "identifier");
  if (v15)
  {
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  WidgetNotePreviewProvider.preview(accountId:noteId:type:)(v11, v14, v17, v19, a2);
  swift_bridgeObjectRelease(v19);
  v20 = swift_bridgeObjectRelease(v14);
  v21 = NotePreview.preview.getter(v20);
  v8 = Image.init(uiImage:)(v21);
  swift_release(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t type metadata accessor for Note(uint64_t a1)
{
  uint64_t result;

  result = qword_10008E080;
  if (!qword_10008E080)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Note);
  return result;
}

void sub_10005F7FC(id a1, char a2)
{
  if (a2 != -1)

}

uint64_t sub_10005F810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Note(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F854@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005DCF4(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_10005F86C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005D56C(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_10005F884(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int (*v26)(const void *, uint64_t, uint64_t);
  char *v27;
  void *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v10;
    v11 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v11;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v12 = a2[12];
    v13 = a3[11];
    v27 = (char *)a2 + v13;
    __dst = (void *)(a1 + v13);
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v12;
    v14 = type metadata accessor for URL(0);
    v25 = *(_QWORD *)(v14 - 8);
    v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v26(v27, 1, v14))
    {
      v15 = sub_100009F30(&qword_10008B170);
      memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(__dst, v27, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v14);
    }
    v17 = a3[12];
    v18 = a3[13];
    v19 = *(uint64_t *)((char *)a2 + v17);
    *(_QWORD *)(v4 + v17) = v19;
    v20 = *(uint64_t *)((char *)a2 + v18);
    *(_QWORD *)(v4 + v18) = v20;
    v21 = a3[14];
    v22 = a3[15];
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(_QWORD *)(v4 + v21) = v23;
    v16 = *(uint64_t *)((char *)a2 + v22);
    *(_QWORD *)(v4 + v22) = v16;
    *(_BYTE *)(v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    swift_retain(v19);
    swift_bridgeObjectRetain(v20);
    swift_retain(v23);
  }
  swift_retain(v16);
  return v4;
}

uint64_t sub_10005FA54(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[12]);
  v4 = (char *)a1 + a2[11];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_release(*(_QWORD *)((char *)a1 + a2[12]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[13]));
  swift_release(*(_QWORD *)((char *)a1 + a2[14]));
  return swift_release(*(_QWORD *)((char *)a1 + a2[15]));
}

uint64_t sub_10005FB20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);
  const void *v26;
  void *__dst;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = a3[11];
  v26 = (const void *)(a2 + v12);
  __dst = (void *)(a1 + v12);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  v13 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v13 - 8);
  v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  if (v25(v26, 1, v13))
  {
    v14 = sub_100009F30(&qword_10008B170);
    memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(__dst, v26, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v13);
  }
  v15 = a3[12];
  v16 = a3[13];
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  v19 = a3[14];
  v20 = a3[15];
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  v22 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  swift_retain(v17);
  swift_bridgeObjectRetain(v18);
  swift_retain(v21);
  swift_retain(v22);
  return a1;
}

uint64_t sub_10005FCC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[11];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = sub_100009F30(&qword_10008B170);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  v27 = a3[12];
  v28 = *(_QWORD *)(a1 + v27);
  v29 = *(_QWORD *)(a2 + v27);
  *(_QWORD *)(a1 + v27) = v29;
  swift_retain(v29);
  swift_release(v28);
  v30 = a3[13];
  v31 = *(_QWORD *)(a2 + v30);
  v32 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = a3[14];
  v34 = *(_QWORD *)(a1 + v33);
  v35 = *(_QWORD *)(a2 + v33);
  *(_QWORD *)(a1 + v33) = v35;
  swift_retain(v35);
  swift_release(v34);
  v36 = a3[15];
  v37 = *(_QWORD *)(a1 + v36);
  v38 = *(_QWORD *)(a2 + v36);
  *(_QWORD *)(a1 + v36) = v38;
  swift_retain(v38);
  swift_release(v37);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_10005FF1C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = a3[11];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100009F30(&qword_10008B170);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_10006003C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = a3[11];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v19, v20, v21);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = sub_100009F30(&qword_10008B170);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  v27 = a3[12];
  v28 = *(_QWORD *)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  swift_release(v28);
  v29 = a3[13];
  v30 = *(_QWORD *)(a1 + v29);
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[14];
  v32 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  swift_release(v32);
  v33 = a3[15];
  v34 = *(_QWORD *)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_release(v34);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100060210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006021C);
}

uint64_t sub_10006021C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100009F30(&qword_10008B170);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_10006029C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000602A8);
}

uint64_t sub_1000602A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100009F30(&qword_10008B170);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

void sub_100060320(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_10006B9D0;
  v4[1] = &unk_10006B9D0;
  v4[2] = &unk_10006B9D0;
  v4[3] = &unk_10006B9D0;
  v4[4] = &unk_10006B9D0;
  v4[5] = &unk_10006B9E8;
  v4[6] = &unk_10006BA00;
  sub_100011494(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_10006BA18;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = &unk_10006BA18;
    v4[11] = &unk_10006BA18;
    v4[12] = &unk_10006B9E8;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
  }
}

unint64_t sub_1000603D0()
{
  unint64_t result;

  result = qword_10008E108;
  if (!qword_10008E108)
  {
    result = swift_getWitnessTable(&unk_10006BB20, &type metadata for QuickNoteIntent);
    atomic_store(result, (unint64_t *)&qword_10008E108);
  }
  return result;
}

unint64_t sub_100060418()
{
  unint64_t result;

  result = qword_10008E110;
  if (!qword_10008E110)
  {
    result = swift_getWitnessTable(&unk_10006BB48, &type metadata for QuickNoteIntent);
    atomic_store(result, (unint64_t *)&qword_10008E110);
  }
  return result;
}

uint64_t sub_10006045C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006FBBC, 1);
}

uint64_t sub_10006046C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000604AC();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

unint64_t sub_1000604AC()
{
  unint64_t result;

  result = qword_10008E118;
  if (!qword_10008E118)
  {
    result = swift_getWitnessTable(&unk_10006BA90, &type metadata for QuickNoteIntent);
    atomic_store(result, (unint64_t *)&qword_10008E118);
  }
  return result;
}

uint64_t sub_1000604F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a1;
  v25 = type metadata accessor for LocalizedStringResource(0);
  v23 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100009F30(&qword_10008E138);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100009F30(&qword_10008E140);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = qword_10008E0F8;
  v10 = off_10008E100;
  swift_bridgeObjectRetain(off_10008E100);
  v11 = sub_100009F30(&qword_10008E148);
  v12 = sub_10000AE50(&qword_10008E150);
  v13 = sub_10000CC08(&qword_10008E158, &qword_10008E150, (uint64_t)&protocol conformance descriptor for ControlWidgetButton<A, B, C>);
  v26 = v12;
  v27 = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v26, &opaque type descriptor for <<opaque return type of ControlWidgetTemplate.tint(_:)>>, 1);
  StaticControlConfiguration.init(kind:content:)(v9, v10, sub_10006077C, 0, v11, OpaqueTypeConformance2);
  if (qword_10008B158 != -1)
    swift_once(&qword_10008B158, sub_1000609E0);
  v15 = v25;
  v16 = sub_100010130(v25, (uint64_t)qword_100099520);
  v17 = sub_10000CC08(&qword_10008E160, &qword_10008E138, (uint64_t)&protocol conformance descriptor for StaticControlConfiguration<A>);
  ControlWidgetConfiguration.displayName(_:)(v16, v3, v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, 0x800000010006DB10);
  v26 = v3;
  v27 = v17;
  v18 = swift_getOpaqueTypeConformance2(&v26, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.displayName(_:)>>, 1);
  ControlWidgetConfiguration.description(_:)(v2, v6, v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v2, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v8, v6);
}

uint64_t sub_10006077C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = sub_100009F30(&qword_10008E150);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100009F30(&qword_10008E168);
  v5 = sub_10000CC08(&qword_10008E170, &qword_10008E168, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v6 = sub_1000604AC();
  v7 = ControlWidgetButton.init<>(action:label:)(v6, sub_1000608A0, 0, v4, &type metadata for QuickNoteIntent, v5, v6);
  v8 = static Color.yellow.getter(v7);
  v9 = sub_10000CC08(&qword_10008E158, &qword_10008E150, (uint64_t)&protocol conformance descriptor for ControlWidgetButton<A, B, C>);
  ControlWidgetTemplate.tint(_:)(v8, v0, v9);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000608A0()
{
  return Label.init(title:icon:)(sub_1000608DC, 0, sub_1000609A0, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_1000608DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008B158 != -1)
    swift_once(&qword_10008B158, sub_1000609E0);
  v6 = sub_100010130(v2, (uint64_t)qword_100099520);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  result = Text.init(_:)(v5);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v9 & 1;
  *(_QWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t sub_1000609A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0x746F6E6B63697571, 0xE900000000000065);
  *a1 = result;
  return result;
}

uint64_t sub_1000609E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_100010B60(v10, qword_100099520);
  sub_100010130(v10, (uint64_t)qword_100099520);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x6F4E206B63697551, 0xEA00000000006574);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t sub_100060B54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10008B158 != -1)
    swift_once(&qword_10008B158, sub_1000609E0);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_100010130(v2, (uint64_t)qword_100099520);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100060BC8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100060BE0, 0, 0);
}

uint64_t sub_100060BE0()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(QuickNoteAlertManager), "sharedInstance");
  objc_msgSend(v1, "activateRemoteAlert");

  static IntentResult.result<>()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060C4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000604AC();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for QuickNoteIntent()
{
  return &type metadata for QuickNoteIntent;
}

uint64_t sub_100060C84()
{
  return sub_10000CC08(&qword_10008E128, &qword_10008E130, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

ValueMetadata *type metadata accessor for QuickNoteControl()
{
  return &type metadata for QuickNoteControl;
}

uint64_t sub_100060CC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006FC00, 1);
}

uint64_t sub_100060CD0()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_10000AE50(&qword_10008E140);
  v3 = sub_10000AE50(&qword_10008E138);
  v4 = sub_10000CC08(&qword_10008E160, &qword_10008E138, (uint64_t)&protocol conformance descriptor for StaticControlConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.displayName(_:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.description(_:)>>, 1);
}

uint64_t sub_100061030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6)
{
  _QWORD v9[2];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a3;
  v12 = a4();
  v9[0] = a5;
  v9[1] = a6;
  v10 = 2;
  LOBYTE(a6) = isFeatureEnabled(_:)(v9);
  sub_10000ADAC(v9);
  return a6 & 1;
}

id sub_1000610C4(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)swift_getObjectType(v2, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for ICFeatureFlags()
{
  return objc_opt_self(_TtC37com_apple_mobilenotes_WidgetExtension14ICFeatureFlags);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC37com_apple_mobilenotes_WidgetExtensionP33_AF5F957D7AF3469368880EFFB88739D619ResourceBundleClass);
}

void sub_100061138(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005DF0((void *)&_mh_execute_header, a1, a3, "-[ICSystemPaperControlCenterModule remoteAlertHandleDidActivate:]", a5, a6, a7, a8, 0);
}

void sub_10006116C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005DF0((void *)&_mh_execute_header, a1, a3, "-[ICSystemPaperControlCenterModule remoteAlertHandleDidDeactivate:]", a5, a6, a7, a8, 0);
}

void sub_1000611A0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "-[ICSystemPaperControlCenterModule remoteAlertHandle:didInvalidateWithError:] - error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100061214(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "-[ICSystemPaperControlCenterModule remoteAlertHandle:didInvalidateWithError:] - error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100061288(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unknown object type — returning nil {objectID: %@}", buf, 0xCu);

}

id objc_msgSend_ICTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTintColor");
}

id objc_msgSend__cleanupRemoteAlertHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupRemoteAlertHandle:");
}

id objc_msgSend__systemImageNamed_withConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemImageNamed:withConfiguration:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account");
}

id objc_msgSend_activateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithContext:");
}

id objc_msgSend_allItemsFolderLocalizedTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allItemsFolderLocalizedTitle");
}

id objc_msgSend_appURLForDefaultFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForDefaultFolder");
}

id objc_msgSend_appURLForFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForFolder:");
}

id objc_msgSend_appURLForHTMLFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForHTMLFolder:");
}

id objc_msgSend_appURLForHTMLNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForHTMLNote:");
}

id objc_msgSend_appURLForNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForNote:");
}

id objc_msgSend_appURLForVirtualSmartFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForVirtualSmartFolder:");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_configurationWithScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithScale:");
}

id objc_msgSend_contentInfoText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentInfoText");
}

id objc_msgSend_dateForCurrentSortTypeForNote_folderNoteSortType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForCurrentSortTypeForNote:folderNoteSortType:");
}

id objc_msgSend_defaultSystemImageName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSystemImageName");
}

id objc_msgSend_depth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "depth");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_hasUnreadChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUnreadChanges");
}

id objc_msgSend_hidesObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hidesObject:");
}

id objc_msgSend_ic_briefFormattedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_briefFormattedDate");
}

id objc_msgSend_ic_isLegacyAccountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isLegacyAccountType");
}

id objc_msgSend_ic_isLegacyFolderType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isLegacyFolderType");
}

id objc_msgSend_ic_isLegacyNoteType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isLegacyNoteType");
}

id objc_msgSend_ic_isModernAccountProxyType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isModernAccountProxyType");
}

id objc_msgSend_ic_isModernAccountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isModernAccountType");
}

id objc_msgSend_ic_isModernFolderType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isModernFolderType");
}

id objc_msgSend_ic_isModernNoteType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isModernNoteType");
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:");
}

id objc_msgSend_imageWithImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithImageData:");
}

id objc_msgSend_imageWithTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithTintColor:");
}

id objc_msgSend_imageWithUIImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithUIImage:");
}

id objc_msgSend_initWithIdentifier_displayString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:displayString:");
}

id objc_msgSend_initWithIdentifier_title_date_contentInfo_isLocked_isShared_isUnread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:title:date:contentInfo:isLocked:isShared:isUnread:");
}

id objc_msgSend_initWithIdentifier_title_depth_shareDescription_systemImageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:title:depth:shareDescription:systemImageName:");
}

id objc_msgSend_initWithServiceName_viewControllerClassName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:viewControllerClassName:");
}

id objc_msgSend_insertString_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertString:atIndex:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isPasswordProtected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPasswordProtected");
}

id objc_msgSend_isSharedViaICloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedViaICloud");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_localizedTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedTitle");
}

id objc_msgSend_localizedTitleForDefaultFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedTitleForDefaultFolder");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectContext");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_newHandleWithDefinition_configurationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newHandleWithDefinition:configurationContext:");
}

id objc_msgSend_objectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectID");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_secondaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelColor");
}

id objc_msgSend_setDisplayImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayImage:");
}

id objc_msgSend_setSubtitleString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitleString:");
}

id objc_msgSend_setUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserActivity:");
}

id objc_msgSend_shareDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareDescription");
}

id objc_msgSend_sharedWidget(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedWidget");
}

id objc_msgSend_systemImageName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageName");
}

id objc_msgSend_systemImageNamed_withConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageNamed:withConfiguration:");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_unregisterObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterObserver:");
}
