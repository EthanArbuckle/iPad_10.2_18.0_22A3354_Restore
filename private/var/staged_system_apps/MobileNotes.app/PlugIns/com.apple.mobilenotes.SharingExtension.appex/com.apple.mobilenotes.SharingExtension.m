double sub_1000062FC()
{
  if (qword_1000ED6C8 != -1)
    dispatch_once(&qword_1000ED6C8, &stru_1000D5BC0);
  return *(double *)&qword_1000ED6C0;
}

void sub_10000633C(id a1)
{
  unsigned int v1;
  double v2;

  v1 = +[UIDevice ic_isVision](UIDevice, "ic_isVision");
  v2 = 44.0;
  if (v1)
    v2 = 60.0;
  qword_1000ED6C0 = *(_QWORD *)&v2;
}

id sub_10000748C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCollapsed:", *(unsigned __int8 *)(a1 + 40));
}

void sub_100008CE4(id a1)
{
  ICAnalyticsObserver *v1;
  void *v2;

  v1 = objc_alloc_init(ICAnalyticsObserver);
  v2 = (void *)qword_1000ED6D0;
  qword_1000ED6D0 = (uint64_t)v1;

}

id sub_1000093CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hideUI");
}

void sub_1000093D4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v2 = objc_alloc_init((Class)NSURLComponents);
  v3 = ICNotesAppURLScheme();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "setScheme:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "URL"));
  objc_msgSend(v6, "openURL:configuration:completionHandler:", v5, 0, 0);

  objc_msgSend(*(id *)(a1 + 32), "hideUI");
}

void sub_100009478(uint64_t a1)
{
  ICImportSEProgressViewController *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];

  v2 = objc_alloc_init(ICImportSEProgressViewController);
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[ICImportSEProgressViewController view](v2, "view"));
  objc_msgSend(v3, "setBackgroundColor:", 0);

  objc_msgSend(*(id *)(a1 + 32), "setProgressViewController:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", 0, 0, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "progressViewController"));
  objc_msgSend(v4, "setContentViewController:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Stop"), &stru_1000DAF38, 0));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10000960C;
  v11[3] = &unk_1000D5C30;
  v11[4] = *(_QWORD *)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v7, 1, v11));

  objc_msgSend(v4, "addAction:", v8);
  objc_msgSend(*(id *)(a1 + 32), "setProgressAlertController:", v4);
  objc_msgSend(*(id *)(a1 + 32), "importNotes");
  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "progressAlertController"));
  objc_msgSend(v9, "presentViewController:animated:completion:", v10, 1, 0);

}

void sub_10000960C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "importNoteProcessor"));
  objc_msgSend(v1, "cancelProcess");

}

id sub_10000963C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hideUI");
}

void sub_1000097C8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "progressViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "statusLabel"));
  objc_msgSend(v4, "setText:", v2);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "progressViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "statusActivityIndicator"));
  objc_msgSend(v6, "setActivityIndicatorViewStyle:", 100);

  if (objc_msgSend(*(id *)(a1 + 48), "totalNoteFound"))
  {
    v7 = 100 * (_QWORD)objc_msgSend(*(id *)(a1 + 48), "totalNoteImported");
    v8 = v7 / (unint64_t)objc_msgSend(*(id *)(a1 + 48), "totalNoteFound");
  }
  else
  {
    v8 = 0;
  }
  v17 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastAccessibilityAnnouncementDate"));
  if (v9)
  {
    v10 = (void *)v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastAccessibilityAnnouncementDate"));
    objc_msgSend(v17, "timeIntervalSinceDate:", v11);
    v13 = v12;

    if (v13 > 3.0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("Import progress %lu%%"), &stru_1000DAF38, 0));

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v15, v8));
      ICAccessibilityPostHighPriorityAnnouncementNotification(0, v16);
      objc_msgSend(*(id *)(a1 + 32), "setLastAccessibilityAnnouncementDate:", v17);

    }
  }

}

void sub_100009A1C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  dispatch_time_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  id v9;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errorFileURLs"));
  if (objc_msgSend(v2, "count"))
  {
    objc_initWeak(&location, *(id *)(a1 + 40));
    v3 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100009B88;
    v8[3] = &unk_1000D5CA8;
    objc_copyWeak(&v9, &location);
    v8[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 1, v8);
    objc_destroyWeak(&v9);
    objc_destroyWeak(&location);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICBackgroundTaskScheduler sharedScheduler](ICBackgroundTaskScheduler, "sharedScheduler"));
    objc_msgSend(v4, "scheduleTask:completion:", objc_opt_class(ICCloudSyncBackgroundTask, v5), &stru_1000D5CE8);

    v6 = dispatch_time(0, 1000000000);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100009DD4;
    v7[3] = &unk_1000D5D10;
    v7[4] = *(_QWORD *)(a1 + 40);
    dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, v7);
  }

}

void sub_100009B6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100009B88(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("File Not Imported"), &stru_1000DAF38, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("This file has an issue and couldnâ€™t be imported into Notes."), &stru_1000DAF38, 0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, v5, 1));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1000DAF38, 0));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100009D3C;
  v10[3] = &unk_1000D5C80;
  objc_copyWeak(&v11, (id *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v8, 0, v10));
  objc_msgSend(v6, "addAction:", v9);

  objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v6, 1, 0);
  objc_destroyWeak(&v11);

}

void sub_100009D24(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100009D3C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "hideUI");

}

void sub_100009D68(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  NSObject *v5;

  v4 = a3;
  v5 = os_log_create("com.apple.notes", "SharingExtension");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_10009DEA4(a2, (uint64_t)v4, v5);

}

id sub_100009DD4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hideUI");
}

void sub_100009E7C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100009EA0(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "rootViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "extensionContext"));
  objc_msgSend(v2, "completeRequestReturningItems:completionHandler:", &__NSArray0__struct, 0);

}

void sub_10000A1F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;

  v5 = a3;
  v6 = a2;
  v8 = objc_opt_class(NSURL, v7);
  v9 = ICDynamicCast(v8, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (v5)
  {
    v11 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10009DF40(v5, v11);

  }
  else if (v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "ic_addNonNilObject:", v10);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_10000A2C0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectContext"));

  objc_msgSend(v5, "ic_save");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount defaultAccountInContext:](ICAccount, "defaultAccountInContext:", v5));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "importNoteProcessor"));
  objc_msgSend(v4, "processURLs:shouldPreserveFolders:account:", *(_QWORD *)(a1 + 40), 0, v3);

}

void sub_10000A668(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v1, "ic_save");

}

void sub_10000B044(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v1, "ic_save");

}

uint64_t sub_10000BE78(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2) ^ 1;
}

void sub_10000D3B4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;

  v6 = a2;
  v7 = a4;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount accountUtilities](ICAccount, "accountUtilities"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountId"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "temporaryDirectoryURLForAccountIdentifier:", v9));

    if (!v10)
      +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "((tempDirectoryURL) != nil)", "-[ICSharingExtensionItemExtractor extractMediaFileURLWithProvider:contentType:completion:]_block_invoke_2", 1, 0, CFSTR("Expected non-nil value for '%s'"), "tempDirectoryURL");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUIDString"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URLByAppendingPathComponent:isDirectory:", v12, 1));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    objc_msgSend(v14, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v13, 1, 0, 0);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastPathComponent"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "URLByAppendingPathComponent:", v15));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    LOBYTE(v12) = objc_msgSend(v17, "linkItemAtURL:toURL:error:", v6, v16, 0);

    if ((v12 & 1) == 0)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v28 = 0;
      v19 = objc_msgSend(v18, "copyItemAtURL:toURL:error:", v6, v16, &v28);
      v20 = v28;

      if ((v19 & 1) == 0)
        +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "[[NSFileManager defaultManager] copyItemAtURL:url toURL:tempFileURL error:&copyError]", "-[ICSharingExtensionItemExtractor extractMediaFileURLWithProvider:contentType:completion:]_block_invoke_2", 1, 0, CFSTR("Extracting media file: Failed to create temporary file copy: %@"), v20);

    }
    v21 = objc_msgSend(objc_alloc((Class)ICAddAttachmentsManagerAttachmentInfo), "initWithFileURL:", v16);
    objc_msgSend(v21, "setUsesTemporaryFile:", 1);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10000D6D8;
    v25[3] = &unk_1000D5E00;
    v22 = *(id *)(a1 + 48);
    v26 = v21;
    v27 = v22;
    v23 = v21;
    performBlockOnMainThread(v25);

  }
  else
  {
    v24 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      sub_10009E18C(a1, (uint64_t)v7, v24);

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10000D6C8;
    v29[3] = &unk_1000D5DD8;
    v30 = *(id *)(a1 + 48);
    performBlockOnMainThread(v29);
    v13 = v30;
  }

}

uint64_t sub_10000D6C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10000D6D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10000D80C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10000D8C0;
  v7[3] = &unk_1000D5E50;
  v8 = a2;
  v9 = a3;
  v10 = *(id *)(a1 + 32);
  v5 = v9;
  v6 = v8;
  performBlockOnMainThreadAndWait(v7);

}

void sub_10000D8C0(uint64_t a1)
{
  NSObject *v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = objc_msgSend(objc_alloc((Class)ICAddAttachmentsManagerAttachmentInfo), "initWithFileURL:", *(_QWORD *)(a1 + 32));
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  }
  else
  {
    v2 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10009E208(a1, v2);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_10000DA74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  char v17;

  v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10000DB5C;
  v10[3] = &unk_1000D5EA0;
  v11 = a3;
  v16 = *(id *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v12 = v5;
  v13 = v6;
  v17 = *(_BYTE *)(a1 + 64);
  v14 = v7;
  v15 = *(id *)(a1 + 48);
  v8 = v5;
  v9 = v11;
  performBlockOnMainThreadAndWait(v10);

}

void sub_10000DB5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];

  v3 = (uint64_t *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    v4 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10009E38C(v3, v4, v5);

LABEL_5:
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    return;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v14 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_10009E2BC(v14);

    goto LABEL_5;
  }
  v7 = objc_opt_class(NSURL, a2);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0 && objc_msgSend(*(id *)(a1 + 40), "isFileURL"))
  {
    v29 = objc_msgSend(objc_alloc((Class)ICAddAttachmentsManagerAttachmentInfo), "initWithFileURL:", *(_QWORD *)(a1 + 40));
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
LABEL_12:

    return;
  }
  v9 = *(_QWORD *)(a1 + 40);
  v10 = objc_opt_class(UIImage, v8);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
  {
    v11 = *(void **)(a1 + 48);
    v12 = *(unsigned __int8 *)(a1 + 80);
    v13 = *(id *)(a1 + 40);
    v29 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "getAttachmentInfoWithImage:useTempFile:", v13, v12));
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

    goto LABEL_12;
  }
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "registeredTypeIdentifiers"));
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v31;
LABEL_18:
    v19 = 0;
    while (1)
    {
      if (*(_QWORD *)v31 != v18)
        objc_enumerationMutation(v15);
      v20 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[ICUTType typeWithIdentifier:](ICUTType, "typeWithIdentifier:", v20));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[ICUTType typeWithIdentifier:](ICUTType, "typeWithIdentifier:", *(_QWORD *)(a1 + 64)));
      v23 = objc_msgSend(v21, "conformsToType:", v22);

      if ((v23 & 1) != 0)
        break;
      if (v17 == (id)++v19)
      {
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        if (v17)
          goto LABEL_18;
        goto LABEL_24;
      }
    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[ICUTType typeWithIdentifier:](ICUTType, "typeWithIdentifier:", v20));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "preferredFilenameExtension"));

    v24 = v20;
    if (!v26)
      goto LABEL_27;
    v27 = (void *)objc_opt_new(ICAddAttachmentsManagerAttachmentInfo);
    objc_msgSend(v27, "setMediaUTI:", v24);
    objc_msgSend(v27, "setMediaData:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v27, "setMediaFilenameExtension:", v26);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
  else
  {
LABEL_24:

    v24 = 0;
LABEL_27:
    v28 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      sub_10009E2FC((id *)(a1 + 56), v28);

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }

}

void sub_10000E1BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10000E1D0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

int64_t sub_10000E784(id a1, ICSEFolderListItem *a2, ICSEFolderListItem *a3)
{
  ICSEFolderListItem *v4;
  unint64_t v5;
  unint64_t v6;

  v4 = a3;
  v5 = -[ICSEFolderListItem folderListItemAccountType](a2, "folderListItemAccountType");
  v6 = -[ICSEFolderListItem folderListItemAccountType](v4, "folderListItemAccountType");

  return v5 > v6;
}

void sub_10000ECA0(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained(v2);
    objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, *(_QWORD *)(a1 + 32));

  }
}

void sub_10000F030(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;

  v5 = a3;
  v6 = a2;
  v8 = objc_opt_class(NSURL, v7);
  v9 = ICDynamicCast(v8, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (v5)
  {
    v11 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10009DF40(v5, v11);

  }
  else if (v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "ic_addNonNilObject:", v10);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_10000F0FC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  ICImportSERootViewController *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;

  +[ICNoteContext startSharedContextWithOptions:](ICNoteContext, "startSharedContextWithOptions:", 562);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v2, "addOrDeleteLocalAccountIfNecessary");

  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(*(id *)(a1 + 40), "copy");
  LODWORD(v3) = objc_msgSend(v3, "shouldImportNotesWithURLs:", v4);

  if ((_DWORD)v3)
  {
    v5 = objc_alloc_init(ICImportSERootViewController);
    objc_msgSend(*(id *)(a1 + 32), "setImportRootViewController:", v5);

    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "importRootViewController"));
    objc_msgSend(v7, "setRootViewController:", v6);

    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "importRootViewController"));
    objc_msgSend(v8, "addChildViewController:", v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "importRootViewController"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "view"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v12, "bounds");
    objc_msgSend(v11, "setFrame:");

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "importRootViewController"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "view"));
    objc_msgSend(v13, "addSubview:", v15);

    v38 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "importRootViewController"));
    objc_msgSend(v38, "didMoveToParentViewController:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));

    if (!v16)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIStoryboard storyboardWithName:bundle:](UIStoryboard, "storyboardWithName:bundle:", CFSTR("ICSEStoryboard"), 0));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "instantiateInitialViewController"));
      objc_msgSend(*(id *)(a1 + 32), "setContainerViewController:", v18);

      v19 = *(void **)(a1 + 32);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "containerViewController"));
      objc_msgSend(v20, "setRootViewController:", v19);

      v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor ICBackgroundColor](UIColor, "ICBackgroundColor"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "view"));
      objc_msgSend(v23, "setBackgroundColor:", v21);

      v24 = objc_alloc((Class)UINavigationController);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
      v26 = objc_msgSend(v24, "initWithRootViewController:", v25);
      objc_msgSend(*(id *)(a1 + 32), "setNavigationController:", v26);

      v27 = *(void **)(a1 + 32);
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "navigationController"));
      objc_msgSend(v27, "setUpNavigationController:", v28);

    }
    v29 = *(void **)(a1 + 32);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "navigationController"));
    objc_msgSend(v29, "addChildViewController:", v30);

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "view"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v33, "bounds");
    objc_msgSend(v32, "setFrame:");

    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "view"));
    objc_msgSend(v34, "addSubview:", v36);

    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
    objc_msgSend(v37, "didMoveToParentViewController:", *(_QWORD *)(a1 + 32));

    v38 = (id)objc_claimAutoreleasedReturnValue(+[ICReachability sharedReachabilityForInternetConnection](ICReachability, "sharedReachabilityForInternetConnection"));
    objc_msgSend(v38, "performSelector:withObject:afterDelay:", "startNotifier", 0, 0.0);
  }

}

id sub_10000F840(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setIsShowingSearchResults:", *(unsigned __int8 *)(a1 + 40));
}

void sub_10000F934(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_presentationController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "containerView"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_10000FFD4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "allowedContentTypes"));
  objc_msgSend(v2, "addObjectsFromArray:", v3);

}

void sub_1000103A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000103BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000103CC(uint64_t a1)
{

}

void sub_1000103D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectID"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  v3 = objc_claimAutoreleasedReturnValue(+[ICAccount ic_existingObjectWithID:context:](ICAccount, "ic_existingObjectWithID:context:", v6, v2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100010458(uint64_t a1)
{
  id WeakRetained;
  ICImportFolder *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  ICImportFolder *v9;
  _QWORD v10[4];
  id v11;
  ICImportFolder *v12;
  id v13;
  __int128 v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v3 = objc_alloc_init(ICImportFolder);
    objc_msgSend(WeakRetained, "addURLs:toImportFolder:shouldPreserveFolders:", *(_QWORD *)(a1 + 32), v3, *(unsigned __int8 *)(a1 + 64));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Imported Notes"), &stru_1000DAF38, 0));

    v6 = objc_msgSend(*(id *)(a1 + 40), "newFolderWithTitle:parentFolder:forAccount:", v5, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
    -[ICImportFolder setFolder:](v3, "setFolder:", v6);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000105C8;
    v10[3] = &unk_1000D5FA8;
    v11 = WeakRetained;
    v12 = v3;
    v13 = v6;
    v14 = *(_OWORD *)(a1 + 40);
    v8 = v6;
    v9 = v3;
    objc_msgSend(v11, "traverseImportFolder:forAccount:shouldImportNotes:completionBlock:", v9, v7, 0, v10);

  }
}

void sub_1000105C8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  objc_msgSend(*(id *)(a1 + 32), "setState:", 2);
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100010680;
  v7[3] = &unk_1000D5C58;
  v8 = v2;
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v9 = v5;
  v10 = v6;
  objc_msgSend(v8, "traverseImportFolder:forAccount:shouldImportNotes:completionBlock:", v3, v4, 1, v7);

}

void sub_100010680(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000107A8;
  v12[3] = &unk_1000D5D10;
  v13 = *(id *)(a1 + 40);
  objc_msgSend(v2, "performBlockAndWait:", v12);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_10001082C;
  v10 = &unk_1000D5D10;
  v11 = *(id *)(a1 + 32);
  objc_msgSend(v3, "performBlockAndWait:", &v7);

  objc_msgSend(*(id *)(a1 + 32), "setState:", 0, v7, v8, v9, v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v5 = objc_opt_respondsToSelector(v4, "importCompletedForNoteProcessor:destinationFolder:");

  if ((v5 & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v6, "importCompletedForNoteProcessor:destinationFolder:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

  }
}

void sub_1000107A8(uint64_t a1)
{
  id v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "visibleSubFolders"));
  if (objc_msgSend(v3, "count"))
  {

  }
  else
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "visibleNotesCount");

    if (!v2)
      +[ICFolder deleteFolder:](ICFolder, "deleteFolder:", *(_QWORD *)(a1 + 32));
  }
}

void sub_10001082C(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v4 = 0;
  objc_msgSend(v1, "save:", &v4);
  v2 = v4;

  if (v2)
  {
    v3 = os_log_create("com.apple.notes", "Import");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10009E5E0(v2);

  }
}

void sub_100010BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010BD0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "canHandleFileURL:", *(_QWORD *)(a1 + 32)))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_100011B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id *a21,id *a22,id *a23,id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

intptr_t sub_100011BE4(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setTotalNoteFound:", (char *)objc_msgSend(WeakRetained, "totalNoteFound") + a2);

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100011C30(id *a1)
{
  void *v2;
  void *v3;
  id WeakRetained;
  void *v5;
  id v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD *v17;
  _QWORD v18[5];
  id v19;

  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3032000000;
  v18[3] = sub_1000103BC;
  v18[4] = sub_1000103CC;
  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "folder"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "folder"));

  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "managedObjectContext"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100011DF8;
    v15[3] = &unk_1000D6048;
    v17 = v18;
    v16 = a1[5];
    objc_msgSend(v3, "performBlockAndWait:", v15);

  }
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = sub_1000103BC;
  v13 = sub_1000103CC;
  v14 = 0;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "managedObjectContext"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100011E30;
  v8[3] = &unk_1000D6070;
  v8[4] = &v9;
  v8[5] = v18;
  objc_msgSend(v5, "performBlockAndWait:", v8);

  v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  _Block_object_dispose(v18, 8);
  return v6;
}

void sub_100011DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100011DF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultFolder"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100011E30(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = +[ICNote newEmptyNoteInFolder:](ICNote, "newEmptyNoteInFolder:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setNeedsInitialFetchFromCloud:", 1);
}

void sub_100011E88(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100011FF4;
  v14[3] = &unk_1000D5D10;
  v9 = v3;
  v15 = v9;
  objc_msgSend(v4, "performBlockAndWait:", v14);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "setTotalNoteImported:", (char *)objc_msgSend(WeakRetained, "totalNoteImported") + 1);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (objc_msgSend(WeakRetained, "totalNoteImported")
    && 0xCCCCCCCCCCCCCCCDLL * (unint64_t)objc_msgSend(WeakRetained, "totalNoteImported") <= 0x3333333333333333)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "managedObjectContext"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100012038;
    v10[3] = &unk_1000D60C0;
    v7 = WeakRetained;
    v8 = *(_QWORD *)(a1 + 32);
    v11 = v7;
    v12 = v8;
    v13 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v6, "performBlockAndWait:", v10);

  }
  objc_msgSend(WeakRetained, "updateImportProgress");

}

id sub_100011FF4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setNeedsInitialFetchFromCloud:", 0);
  objc_msgSend(*(id *)(a1 + 32), "regenerateTitle:snippet:", 1, 1);
  return objc_msgSend(*(id *)(a1 + 32), "updateChangeCountWithReason:", CFSTR("Imported note"));
}

void sub_100012038(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v5 = 0;
  objc_msgSend(v2, "save:", &v5);
  v3 = v5;

  if (v3)
  {
    v4 = os_log_create("com.apple.notes", "Import");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10009E5E0(v3);

    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }

}

void sub_1000120F4(uint64_t a1)
{
  id WeakRetained;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "currentErrorFileURLs"));
  objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 32));

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
}

intptr_t sub_10001215C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000122A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000122BC(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  if (a1[4])
  {
    v2 = +[ICFolder newFolderInParentFolder:](ICFolder, "newFolderInParentFolder:");
LABEL_5:
    v3 = *(_QWORD *)(a1[7] + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

    goto LABEL_6;
  }
  if (a1[5])
  {
    v2 = +[ICFolder newFolderInAccount:](ICFolder, "newFolderInAccount:");
    goto LABEL_5;
  }
LABEL_6:
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setDateForLastTitleModification:", v5);

  v6 = (void *)a1[6];
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringByTrimmingCharactersInSet:", v7));
  v10 = (id)objc_claimAutoreleasedReturnValue(+[ICFolder stringByScrubbingStringForFolderName:](ICFolder, "stringByScrubbingStringForFolderName:", v8));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder deduplicatingTitle:forFolder:ofAccount:](ICFolder, "deduplicatingTitle:forFolder:ofAccount:", v10, *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40), a1[5]));
  objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setTitle:", v9);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "updateChangeCountWithReason:", CFSTR("Imported folder"));

}

void sub_10001258C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void sub_1000125A0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000125B4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_1000125D0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100013328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  char *v12;

  v12 = &a9;
  if (!a1)
    return 1;
  v9 = a1;
  result = 1;
  do
  {
    result = v9 - result + 32 * result;
    v11 = (uint64_t *)v12;
    v12 += 8;
    v9 = *v11;
  }
  while (v9);
  return result;
}

id sub_1000140CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", *(double *)(a1 + 40));
}

void sub_100015420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_100015458(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  os_log_t v4;
  void *v5;
  void *v6;
  void *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "representedItem"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "folder"));

  if (v3)
  {
    v4 = (os_log_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "folder"));
    objc_msgSend(WeakRetained, "selectNote:orFolder:prefersSystemPaper:", 0, v4, 0);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "representedItem"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));

    if (v6)
    {
      v4 = (os_log_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "account"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject defaultFolder](v4, "defaultFolder"));
      objc_msgSend(WeakRetained, "selectNote:orFolder:prefersSystemPaper:", 0, v7, objc_msgSend(v2, "isSystemPaperFolder"));

    }
    else
    {
      v4 = os_log_create("com.apple.notes", "SharingExtension");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_10009E778(WeakRetained, v4);

    }
  }

}

NSDictionary *__cdecl sub_10001557C(id a1, NSDictionary *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = -[NSDictionary mutableCopy](a2, "mutableCopy");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleHeadline));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, NSFontAttributeName);

  v4 = objc_msgSend(v2, "copy");
  return (NSDictionary *)v4;
}

BOOL sub_100016FE0(id a1, ICNote *a2, unint64_t a3, BOOL *a4)
{
  return -[ICNote isSystemPaper](a2, "isSystemPaper", a3, a4);
}

id sub_10001770C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_1000190E4(uint64_t a1)
{
  void *v2;
  double v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

  if (*(_BYTE *)(a1 + 40))
    v3 = 1.0;
  else
    v3 = 0.0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchCancelButton"));
  objc_msgSend(v4, "setAlpha:", v3);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  objc_msgSend(v5, "setNavigationBarHidden:animated:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));

}

void sub_10001947C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,id a21)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_1000194B4(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25[2];
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];

  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v3 = objc_msgSend(WeakRetained, "requestIndex");
  if ((objc_msgSend(WeakRetained, "isCancelled") & 1) == 0
    && v3 == objc_msgSend(a1[4], "queryRequestIndex"))
  {
    v21 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "results"));
    v5 = objc_alloc_init((Class)NSMutableArray);
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "attributeSet"));
          v12 = objc_msgSend(v11, "ic_searchResultType") == 0;

          if (v12)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "uniqueIdentifier"));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "persistentStoreCoordinator"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ic_managedObjectIDForURIString:", v13));

            if (v15)
            {
              v16 = a1[5];
              v26[0] = _NSConcreteStackBlock;
              v26[1] = 3221225472;
              v26[2] = sub_1000197A0;
              v26[3] = &unk_1000D5C58;
              v17 = v16;
              v27 = v17;
              v28 = v15;
              v29 = v5;
              objc_msgSend(v17, "performBlockAndWait:", v26);

            }
          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      }
      while (v7);
    }

    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10001980C;
    v22[3] = &unk_1000D6258;
    v18 = a1[4];
    v19 = a1[5];
    v25[1] = v21;
    v22[4] = v18;
    objc_copyWeak(v25, a1 + 8);
    v23 = a1[6];
    v20 = v5;
    v24 = v20;
    objc_msgSend(v19, "performBlock:", v22);

    objc_destroyWeak(v25);
  }

}

void sub_100019784(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000197A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingObjectWithID:error:", *(_QWORD *)(a1 + 40), 0));
  v3 = objc_opt_class(ICNote, v2);
  v4 = ICDynamicCast(v3, v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(*(id *)(a1 + 48), "ic_addNonNilObject:", v5);

}

void sub_10001980C(uint64_t a1)
{
  id v2;
  id WeakRetained;

  v2 = *(id *)(a1 + 64);
  if (v2 == objc_msgSend(*(id *)(a1 + 32), "queryRequestIndex"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "setupSearchResultsWithSearchString:notes:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

BOOL sub_100019B70(id a1, ICFolder *a2, unint64_t a3, BOOL *a4)
{
  ICFolder *v4;
  unsigned int v5;

  v4 = a2;
  if (-[ICFolder isVisible](v4, "isVisible"))
    v5 = -[ICFolder isTrashFolder](v4, "isTrashFolder") ^ 1;
  else
    LOBYTE(v5) = 0;

  return v5;
}

id sub_100019C9C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedTitle"));
  v4 = objc_msgSend(v3, "localizedCaseInsensitiveContainsString:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t sub_10001AA78(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setIsParsing:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setShouldCancelParsingProcess:", 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_10001AC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001ACB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD block[5];
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = *(_QWORD *)(a1 + 40);
      if (v8)
        (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);
    }
    v19 = v6;
    v20 = v5;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    v29 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v30;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v30 != v12)
            objc_enumerationMutation(v9);
          v14 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v13);
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contentParseQueue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10001AF08;
          block[3] = &unk_1000D63B0;
          block[4] = v14;
          v16 = WeakRetained;
          v17 = *(_QWORD *)(a1 + 32);
          v25 = v16;
          v26 = v17;
          v27 = *(id *)(a1 + 48);
          v28 = *(id *)(a1 + 56);
          dispatch_async(v15, block);

          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v11);
    }

    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contentParseQueue"));
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10001B8E4;
    v21[3] = &unk_1000D63D8;
    v22 = WeakRetained;
    v23 = *(id *)(a1 + 64);
    dispatch_async(v18, v21);

    v6 = v19;
    v5 = v20;
  }

}

void sub_10001AF08(uint64_t a1)
{
  void *v2;
  dispatch_semaphore_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  dispatch_semaphore_t v7;
  void *v8;
  void *v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  dispatch_semaphore_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *context;
  void *v26;
  id obj;
  void *v28;
  _QWORD v29[4];
  os_log_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD v33[4];
  NSObject *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[4];
  id v47;
  NSObject *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  _QWORD v57[4];
  NSObject *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t);
  id v65;
  _BYTE v66[128];

  context = objc_autoreleasePoolPush();
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("archiveId")));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("noteId")));
  if (objc_msgSend(*(id *)(a1 + 40), "shouldCancelParsingProcess"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "notesImporterClient"));
    objc_msgSend(v2, "cleanupArchiveId:completionBlock:", v28, 0);

  }
  else
  {
    v60 = 0;
    v61 = &v60;
    v62 = 0x3032000000;
    v63 = sub_10001B4F0;
    v64 = sub_10001B500;
    v65 = 0;
    v3 = dispatch_semaphore_create(0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "notesImporterClient"));
    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3221225472;
    v57[2] = sub_10001B508;
    v57[3] = &unk_1000D6338;
    v59 = &v60;
    v5 = v3;
    v58 = v5;
    objc_msgSend(v4, "unarchiveEvernoteNoteFromArchiveId:noteArchiveId:completionBlock:", v28, v26, v57);

    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    if (objc_msgSend(*(id *)(a1 + 40), "shouldCancelParsingProcess"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "notesImporterClient"));
      objc_msgSend(v6, "cleanupArchiveId:completionBlock:", v28, 0);

    }
    else
    {
      v51 = 0;
      v52 = &v51;
      v53 = 0x3032000000;
      v54 = sub_10001B4F0;
      v55 = sub_10001B500;
      v56 = 0;
      v7 = dispatch_semaphore_create(0);

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "notesImporterClient"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v61[5], "content"));
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      v46[2] = sub_10001B554;
      v46[3] = &unk_1000D6360;
      v49 = &v51;
      v47 = *(id *)(a1 + 40);
      v50 = &v60;
      v5 = v7;
      v48 = v5;
      objc_msgSend(v8, "parseHTMLStringFromEvernoteContentString:completionBlock:", v9, v46);

      dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      if (objc_msgSend(*(id *)(a1 + 40), "shouldCancelParsingProcess"))
      {
        v10 = (os_log_t)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "notesImporterClient"));
        -[NSObject cleanupArchiveId:completionBlock:](v10, "cleanupArchiveId:completionBlock:", v28, 0);
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 56);
        if (v11
          && (v12 = (*(uint64_t (**)(void))(v11 + 16))(), (v13 = (void *)objc_claimAutoreleasedReturnValue(v12)) != 0))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("resourceIds")));
          if (v23 && v52[5])
          {
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            obj = v23;
            v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v66, 16);
            if (v14)
            {
              v15 = *(_QWORD *)v43;
              do
              {
                v16 = 0;
                do
                {
                  if (*(_QWORD *)v43 != v15)
                    objc_enumerationMutation(obj);
                  v17 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v16);
                  v36 = 0;
                  v37 = &v36;
                  v38 = 0x3032000000;
                  v39 = sub_10001B4F0;
                  v40 = sub_10001B500;
                  v41 = 0;
                  v18 = dispatch_semaphore_create(0);

                  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "notesImporterClient"));
                  v33[0] = _NSConcreteStackBlock;
                  v33[1] = 3221225472;
                  v33[2] = sub_10001B5E8;
                  v33[3] = &unk_1000D6388;
                  v35 = &v36;
                  v5 = v18;
                  v34 = v5;
                  objc_msgSend(v19, "unarchiveEvernoteResourceFromArchiveId:resourceArchiveId:completionBlock:", v28, v17, v33);

                  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
                  objc_msgSend(*(id *)(a1 + 48), "addAttachmentsInContent:forEvernoteResource:forNote:", v52[5], v37[5], v13);

                  _Block_object_dispose(&v36, 8);
                  v16 = (char *)v16 + 1;
                }
                while (v14 != v16);
                v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v66, 16);
              }
              while (v14);
            }

          }
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "managedObjectContext", v23));
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472;
          v29[2] = sub_10001B634;
          v29[3] = &unk_1000D60C0;
          v10 = v13;
          v30 = v10;
          v31 = &v60;
          v32 = &v51;
          objc_msgSend(v20, "performBlockAndWait:", v29);

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "notesImporterClient"));
          objc_msgSend(v21, "cleanupArchiveId:completionBlock:", v28, 0);

          v22 = *(_QWORD *)(a1 + 64);
          if (v22)
            (*(void (**)(uint64_t, os_log_t))(v22 + 16))(v22, v10);

        }
        else
        {
          v10 = os_log_create("com.apple.notes", "Import");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            sub_10009E878();
        }
      }

      _Block_object_dispose(&v51, 8);
    }

    _Block_object_dispose(&v60, 8);
  }

  objc_autoreleasePoolPop(context);
}

void sub_10001B494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a62, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B4F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001B500(uint64_t a1)
{

}

void sub_10001B508(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

intptr_t sub_10001B554(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote attributedStringFromHTMLString:](ICNote, "attributedStringFromHTMLString:", a2));
  v4 = objc_msgSend(v3, "mutableCopy");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "addTodoListsIfNeededInContent:forEvernoteNote:", v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    objc_msgSend(*(id *)(a1 + 32), "addTitleInContent:forEvernoteNote:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10001B5E8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10001B634(uint64_t a1)
{
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "created"));
  if (v2)
  {
    v3 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 32), "setCreationDate:", v2);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v3 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 32), "setCreationDate:", v4);

  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "updated"));
  if (v5)
  {
    objc_msgSend(*v3, "setModificationDate:", v5);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(*v3, "setModificationDate:", v6);

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textStorage"));
    v8 = objc_alloc_init((Class)ICTextController);
    objc_msgSend(v7, "setStyler:", v8);

    objc_msgSend(v7, "setConvertAttributes:", 1);
    objc_msgSend(v7, "setWantsUndoCommands:", 0);
    objc_msgSend(v7, "replaceCharactersInRange:withAttributedString:", 0, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
    objc_msgSend(v7, "fixupAfterEditing");
    objc_msgSend(v7, "setConvertAttributes:", 0);
    objc_msgSend(v7, "setStyler:", 0);

  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "tags", 0));
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "account"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[ICHashtag hashtagWithDisplayText:account:createIfNecessary:](ICHashtag, "hashtagWithDisplayText:account:createIfNecessary:", v14, v15, 1));

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "addHashtagToNoteBodyIfMissing:", v16));
        objc_msgSend(v17, "updateChangeCountWithReason:", CFSTR("Imported tag"));

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v11);
  }

}

uint64_t sub_10001B8E4(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setIsParsing:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setShouldCancelParsingProcess:", 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10001BF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001BFA0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "data"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "addAttachmentWithUTI:data:filename:", v3, v4, *(_QWORD *)(a1 + 56)));

  objc_msgSend(v8, "setTitle:", *(_QWORD *)(a1 + 56));
  v5 = objc_claimAutoreleasedReturnValue(+[ICTextAttachment textAttachmentWithAttachment:](ICTextAttachment, "textAttachmentWithAttachment:", v8));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend(v8, "updateChangeCountWithReason:", CFSTR("Imported attachment"));
}

void sub_10001C564(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_10001C574(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_10001CFA4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x20u);
}

void sub_10001D928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D948(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001D958(uint64_t a1)
{

}

void sub_10001D960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[ICNote ic_objectsFromObjectIDs:context:](ICNote, "ic_objectsFromObjectIDs:context:", a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

uint64_t sub_10001DBCC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  if (v4 == *(void **)(a1 + 32))
    v5 = (uint64_t)objc_msgSend(v3, "isDeletedOrInTrash");
  else
    v5 = 1;

  return v5;
}

void sub_10001DC30(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "type"));
  objc_msgSend(v2, "undoablyMoveNotes:toVirtualSmartFolderType:completionHandler:", v3, v4, *(_QWORD *)(a1 + 56));

}

void sub_10001E6CC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "markAsSystemPaperIfNeeded:", *(unsigned __int8 *)(a1 + 48), (_QWORD)v8);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  objc_msgSend(v7, "ic_save");

}

void sub_10001E8AC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "markAsMathNoteIfNeeded:", *(unsigned __int8 *)(a1 + 48), (_QWORD)v8);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  objc_msgSend(v7, "ic_save");

}

void sub_10001EA8C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "markAsCallNoteIfNeeded:", *(unsigned __int8 *)(a1 + 48), (_QWORD)v8);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  objc_msgSend(v7, "ic_save");

}

void sub_10001F238(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v1, "ic_save");

}

void sub_10001F5C4(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  id v6;

  if (objc_msgSend(*(id *)(a1 + 32), "isSmartFolder"))
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "smartFolderQuery"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "tagSelectionWithManagedObjectContext:", *(_QWORD *)(a1 + 40)));
    if (objc_msgSend(v3, "isNonEmpty"))
      v4 = v6 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tagIdentifiers"));
      objc_msgSend(v6, "deleteUnusedHashtagsWithStandardizedContent:", v5);

    }
  }
}

void sub_10001F754(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (objc_msgSend(*(id *)(a1 + 32), "isSmartFolder"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "smartFolderQuery"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "tagSelectionWithManagedObjectContext:", *(_QWORD *)(a1 + 40)));
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tagIdentifiers", 0));
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v8);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICHashtag hashtagWithStandardizedContent:onlyVisible:account:](ICHashtag, "hashtagWithStandardizedContent:onlyVisible:account:", v9, 0, v10));
          objc_msgSend(v11, "unmarkForDeletion");

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

  }
}

void sub_100020288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000202A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  objc_msgSend(v3, "setTotalUnitCount:", objc_msgSend(*(id *)(a1 + 32), "count"));
  objc_msgSend(v3, "setCompletedUnitCount:", 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100020380;
  v8[3] = &unk_1000D64F0;
  v4 = *(void **)(a1 + 40);
  v9 = *(id *)(a1 + 32);
  v10 = v3;
  v11 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v12 = v5;
  v13 = v6;
  v7 = v3;
  objc_msgSend(v4, "performBlockAndWait:", v8);

}

void sub_100020380(uint64_t a1)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  unsigned __int8 v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  uint64_t v29;
  _BYTE v30[128];

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v3)
  {
    v5 = v3;
    v6 = 0;
    v7 = *(_QWORD *)v25;
    *(_QWORD *)&v4 = 138412290;
    v21 = v4;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v7)
          objc_enumerationMutation(v2);
        v9 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v10 = objc_autoreleasePoolPush();
        if (objc_msgSend(*(id *)(a1 + 40), "isCancelled"))
        {
          objc_autoreleasePoolPop(v10);
          goto LABEL_16;
        }
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote ic_existingObjectWithID:context:](ICNote, "ic_existingObjectWithID:context:", v9, *(_QWORD *)(a1 + 48)));
        if (v11)
        {
          v12 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (v13)
            objc_msgSend(v22, "addObject:", v13);
        }
        else
        {
          v13 = os_log_create("com.apple.notes", "Move");
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v21;
            v29 = v9;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Cannot retrieve note to be processed â€” skipping {objectID: %@}", buf, 0xCu);
          }
        }

        objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", (char *)i + v6 + 1);
        objc_autoreleasePoolPop(v10);
      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
      v6 += (uint64_t)i;
      if (v5)
        continue;
      break;
    }
  }
LABEL_16:

  if ((objc_msgSend(*(id *)(a1 + 48), "ic_isMainThreadContext") & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v15 = *(void **)(a1 + 48);
    v23 = 0;
    v16 = objc_msgSend(v15, "save:", &v23);
    v14 = v23;
    if ((v16 & 1) == 0)
    {
      v17 = os_log_create("com.apple.notes", "CoreData");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_10009EE08();

    }
  }
  v18 = objc_claimAutoreleasedReturnValue(+[NSManagedObject ic_permanentObjectIDsFromObjects:](NSManagedObject, "ic_permanentObjectIDsFromObjects:", v22, v21));
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

}

uint64_t sub_100020624(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

NSString *__cdecl sub_1000207A4(id a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Moving note %lu of %luâ€¦"), &stru_1000DAF38, 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v6, a2, a3));
  return (NSString *)v7;
}

id sub_100020830(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  id v21;
  void *v22;
  NSObject *v23;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder ic_existingObjectWithID:context:](ICFolder, "ic_existingObjectWithID:context:", v9, v10));

  }
  else
  {
    v11 = 0;
  }
  if (objc_msgSend(v11, "isSmartFolder"))
  {
    v12 = os_log_create("com.apple.notes", "CoreData");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      sub_10009EED8();

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "account"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultFolder"));

    v11 = (void *)v14;
  }
  if (v11)
  {
    if (objc_msgSend(v3, "markedForDeletion"))
    {
      v15 = *(void **)(a1 + 40);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote ic_existingObjectWithID:context:](ICNote, "ic_existingObjectWithID:context:", v17, v18));

      objc_msgSend(*(id *)(a1 + 48), "unmarkNoteAndAttachmentsForDeletion:", v3);
      if (v19)
      {
        objc_msgSend(*(id *)(a1 + 48), "markNoteAndAttachmentsForDeletion:", v19);
      }
      else
      {
        v23 = os_log_create("com.apple.notes", "CoreData");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          sub_10009EEAC();

      }
      v21 = v3;

    }
    else
    {
      objc_msgSend(v3, "setFolder:", v11);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v3, "setFolderModificationDate:", v22);

      objc_msgSend(v3, "updateChangeCountWithReason:", CFSTR("Unmoved note"));
      v21 = v3;
    }
  }
  else
  {
    v20 = os_log_create("com.apple.notes", "CoreData");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      sub_10009EE34(v3);

    v21 = 0;
  }

  return v21;
}

NSString *__cdecl sub_100020D28(id a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Moving note %lu of %luâ€¦"), &stru_1000DAF38, 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v6, a2, a3));
  return (NSString *)v7;
}

id sub_100020DB4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  unsigned __int8 v31;
  ICCloudSyncingObjectMoveAction *v32;
  void *v33;
  void *v34;
  id v35;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "folder"));
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
  if (v7)
  {
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder ic_existingObjectWithID:context:](ICFolder, "ic_existingObjectWithID:context:", v10, v11));

  }
  else
  {
    v12 = 0;
  }

  if (objc_msgSend(v12, "isSmartFolder"))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultFolder"));

    v12 = (void *)v14;
  }
  if (v12)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "folder"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectID"));
    v17 = *(void **)(a1 + 40);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, v18);

    if ((+[ICMoveDecision shouldCopyThenDeleteWhenMovingObject:toNoteContainer:](ICMoveDecision, "shouldCopyThenDeleteWhenMovingObject:toNoteContainer:", v3, v12) & 1) != 0)
    {
      if (objc_msgSend(v3, "isPasswordProtected"))
      {
        if (objc_msgSend(v3, "isAuthenticated"))
        {
          v19 = (id)objc_claimAutoreleasedReturnValue(+[ICNote duplicateNote:intoFolder:isPasswordProtected:removeOriginalNote:](ICNote, "duplicateNote:intoFolder:isPasswordProtected:removeOriginalNote:", v3, v12, 1, 1));
          objc_msgSend(v19, "setIsPinned:", objc_msgSend(v3, "isPinned"));
          objc_msgSend(v19, "setPreferredBackgroundType:", objc_msgSend(v3, "preferredBackgroundType"));
          objc_msgSend(v19, "updateChangeCountWithReason:", CFSTR("Moved note"));
        }
        else
        {
          v19 = 0;
        }
        v21 = 0;
        goto LABEL_19;
      }
      v19 = +[ICNote newEmptyNoteInFolder:](ICNote, "newEmptyNoteInFolder:", v12);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "ic_permanentObjectID"));
      v25 = *(void **)(a1 + 48);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
      objc_msgSend(v25, "setObject:forKeyedSubscript:", v24, v26);

      objc_msgSend(v3, "copyValuesToNote:", v19);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
      objc_msgSend(v19, "setAccount:", v27);

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "account"));
      objc_msgSend(v19, "setAccount:", v28);

      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v19, "setFolderModificationDate:", v29);

      objc_msgSend(v19, "updateChangeCountWithReason:", CFSTR("Moved note"));
      objc_msgSend(*(id *)(a1 + 56), "markNoteAndAttachmentsForDeletion:", v3);
      v23 = v3;
    }
    else
    {
      objc_msgSend(v3, "setFolder:", v12);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v3, "setFolderModificationDate:", v22);

      objc_msgSend(v3, "updateChangeCountWithReason:", CFSTR("Moved note"));
      v23 = v3;
      v19 = v23;
    }
    v21 = v23;
LABEL_19:
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSUndoManager shared](NSUndoManager, "shared"));
    v31 = objc_msgSend(v30, "isUndoing");

    if ((v31 & 1) == 0)
    {
      v32 = -[ICCloudSyncingObjectMoveAction initWithObject:fromParentObject:toParentObject:isCopy:]([ICCloudSyncingObjectMoveAction alloc], "initWithObject:fromParentObject:toParentObject:isCopy:", v3, v4, v12, 0);
      if (v32)
        +[ICCloudSyncingObject undoablyPersistActivityEventsForMoveAction:oldObject:newObject:](ICCloudSyncingObject, "undoablyPersistActivityEventsForMoveAction:oldObject:newObject:", v32, v3, v19);

    }
    v33 = *(void **)(a1 + 64);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectID"));
    objc_msgSend(v33, "ic_addNonNilObject:", v34);

    goto LABEL_24;
  }
  v20 = os_log_create("com.apple.notes", "CoreData");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    sub_10009EF10(v3);

  v19 = 0;
  v21 = 0;
LABEL_24:
  v35 = v21;

  return v35;
}

void sub_1000211F0(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  if (objc_msgSend(v8, "count"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUndoManager shared](NSUndoManager, "shared"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "prepareWithInvocationTarget:", a1[4]));
    objc_msgSend(v4, "undoablyUnmoveNoteIDs:toFolderIDs:originalToCopyNoteIDs:actionName:noteToFolderIDsForRedo:workerContext:", v8, a1[5], a1[6], a1[7], a1[8], a1[9]);

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUndoManager shared](NSUndoManager, "shared"));
    objc_msgSend(v5, "setActionName:", a1[7]);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUndoManager shared](NSUndoManager, "shared"));
  objc_msgSend(v6, "endUndoGrouping");

  v7 = a1[11];
  if (v7)
    (*(void (**)(uint64_t, _QWORD))(v7 + 16))(v7, a1[10]);

}

void sub_1000215C0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100022A58(uint64_t a1)
{
  double v2;
  void *v3;
  double v4;
  id v5;

  v2 = *(double *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainContainerView"));
  objc_msgSend(v3, "setAlpha:", v2);

  v4 = *(double *)(a1 + 48);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableViewContainerView"));
  objc_msgSend(v5, "setAlpha:", v4);

}

void sub_100022AC4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainContainerView"));
  objc_msgSend(v3, "setHidden:", v2);

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainContainerView"));
  objc_msgSend(v5, "setAccessibilityElementsHidden:", v4);

  v6 = *(unsigned __int8 *)(a1 + 41);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableViewContainerView"));
  objc_msgSend(v7, "setHidden:", v6);

  v8 = *(unsigned __int8 *)(a1 + 41);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableViewContainerView"));
  objc_msgSend(v9, "setAccessibilityElementsHidden:", v8);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v10, "setUserInteractionEnabled:", 1);

  if (*(_BYTE *)(a1 + 41))
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableViewController", 0));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "navigationController"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "viewControllers"));

    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i), "didDisppearInContainer:", *(_QWORD *)(a1 + 32));
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v15);
    }

  }
  v18 = *(void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "tableViewContainerView"));
  else
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "mainContainerView"));
  v20 = (void *)v19;
  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
  UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, v20);

}

void sub_100023C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100023C70(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICSharingExtensionAttachmentsManager sharedManager](ICSharingExtensionAttachmentsManager, "sharedManager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "rootViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "extensionContext"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "temporaryNewNote"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "attachmentsFromExtensionContext:note:", v5, v6));
  objc_msgSend(WeakRetained, "setAttachments:", v7);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100023D78;
  v9[3] = &unk_1000D5D10;
  v10 = WeakRetained;
  v8 = WeakRetained;
  dispatchMainAfterDelay(v9, 0.0);

}

id sub_100023D78(uint64_t a1)
{
  void *v2;
  _BOOL8 v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accounts"));
  v3 = objc_msgSend(v2, "count") != 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "saveToNoteBarButtonItem"));
  objc_msgSend(v4, "setEnabled:", v3);

  return _objc_msgSend(*(id *)(a1 + 32), "attachmentsAvailable");
}

id sub_10002410C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissRootViewController");
}

void sub_100024114(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v2 = objc_alloc_init((Class)NSURLComponents);
  v3 = ICNotesAppURLScheme();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "setScheme:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "URL"));
  objc_msgSend(v6, "openURL:configuration:completionHandler:", v5, 0, 0);

  objc_msgSend(*(id *)(a1 + 32), "dismissRootViewController");
}

id sub_100024510(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "deleteFromLocalDatabase");
}

void sub_1000262AC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  id v13;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "extensionContext"));

  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "managedObjectContext"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10002645C;
  v9[3] = &unk_1000D6690;
  objc_copyWeak(&v13, &location);
  v6 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = *(id *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  objc_msgSend(v5, "performBlockAndWait:", v9);

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100026560;
  v7[3] = &unk_1000D66B8;
  objc_copyWeak(&v8, &location);
  objc_msgSend(v3, "completeRequestReturningItems:completionHandler:", &__NSArray0__struct, v7);
  objc_destroyWeak(&v8);

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);

}

void sub_100026428(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10002645C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNote"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICSharingExtensionAttachmentsManager sharedManager](ICSharingExtensionAttachmentsManager, "sharedManager"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "attachments"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selectedNote"));
    objc_msgSend(v3, "saveAttachments:toNote:textBefore:textAfter:", v4, v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

LABEL_5:
    goto LABEL_6;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICSharingExtensionAttachmentsManager sharedManager](ICSharingExtensionAttachmentsManager, "sharedManager"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "attachments"));
    v6 = objc_msgSend(v3, "saveAttachmentsToNewNote:inFolder:isSystemPaper:textBefore:textAfter:", v4, *(_QWORD *)(a1 + 56), objc_msgSend(WeakRetained, "prefersSystemPaper"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    goto LABEL_5;
  }
LABEL_6:

}

void sub_100026560(uint64_t a1, uint64_t a2)
{
  id *v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;

  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "cleanupTemporaryNewNoteIfNecesary");

  v5 = objc_loadWeakRetained(v3);
  objc_msgSend(v5, "cleanupTemporaryImageFilesIfNecessary");

  v6 = objc_loadWeakRetained(v3);
  objc_msgSend(v6, "setIsSaving:", 0);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[ICSharingExtensionAttachmentsManager sharedManager](ICSharingExtensionAttachmentsManager, "sharedManager"));
  objc_msgSend(v7, "completeExtensionRequest:", a2);

}

uint64_t sub_1000265F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000265FC(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  NSObject *v5;

  v4 = a3;
  v5 = os_log_create("com.apple.notes", "SharingExtension");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_10009DEA4(a2, (uint64_t)v4, v5);

}

void sub_100026938(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSCocoaErrorDomain, 3072, 0));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "extensionContext"));
  objc_msgSend(v3, "cancelRequestWithError:", v4);

}

void sub_100026AD4(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topTextView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "text"));
  v4 = objc_msgSend(v3, "isEqualToString:", &stru_1000DAF38);

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "showPlaceholderText:", 1);
}

void sub_1000270F0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  _QWORD v4[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachmentModel"));
  v3 = objc_msgSend(v2, "generatePreviewsInOperation:", 0);

  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10002717C;
    v4[3] = &unk_1000D5D10;
    v4[4] = *(_QWORD *)(a1 + 40);
    performBlockOnMainThread(v4);
  }
}

void sub_10002717C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachmentBrickView"));
  objc_msgSend(v1, "reloadData");

}

void sub_100027B50(uint64_t a1)
{
  ICSEMediaPreviewGenerator *v2;
  void *v3;
  void *v4;
  void *v5;
  ICSEMediaPreviewGenerator *v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v2 = [ICSEMediaPreviewGenerator alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "screen"));
  objc_msgSend(v5, "scale");
  v6 = -[ICSEMediaPreviewGenerator initWithScreenScale:](v2, "initWithScreenScale:");

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[ICSEMediaPreviewGenerator generatePreviewWithAttachments:](v6, "generatePreviewWithAttachments:", *(_QWORD *)(a1 + 40)));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100027C3C;
  v10[3] = &unk_1000D5D38;
  v8 = *(_QWORD *)(a1 + 32);
  v11 = v7;
  v12 = v8;
  v9 = v7;
  performBlockOnMainThread(v10);

}

void sub_100027C3C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(*(id *)(a1 + 32), "copy", 0);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v2);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "imagesView"));
        objc_msgSend(v9, "setMediaPreview:atIndex:", v8, (char *)v7 + v5);

        v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v5 += (uint64_t)v7;
    }
    while (v4);
  }

}

void sub_10002882C(id a1)
{
  ICSharingExtensionAttachmentsManager *v1;
  void *v2;

  v1 = objc_alloc_init(ICSharingExtensionAttachmentsManager);
  v2 = (void *)qword_1000ED6E8;
  qword_1000ED6E8 = (uint64_t)v1;

}

void sub_100028CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100028CF4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "attachment"));
  if (v4)
  {

LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    goto LABEL_5;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mediaURL"));

  if (v5)
    goto LABEL_4;
LABEL_5:
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "attributedContentText"));

  v7 = objc_msgSend(v6, "length") != 0;
  return v7;
}

uint64_t sub_100028D88(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mediaURL"));
  if (v4
    && (v5 = (void *)v4,
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mediaUTI")),
        v6,
        v5,
        v6))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mediaUTI"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", v7));

    v9 = objc_msgSend(v8, "conformsToType:", UTTypePDF);
    if (v9)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;

    v10 = v9 ^ 1;
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

void sub_10002956C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10009F05C((uint64_t)v6, v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appendLock"));
    objc_msgSend(v8, "unlock");

  }
  else if (v5)
  {
    if (objc_msgSend(v5, "isFileURL"))
    {
      v9 = objc_msgSend(objc_alloc((Class)ICAddAttachmentsManagerAttachmentInfo), "initWithFileURL:", v5);
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appendLock"));
      objc_msgSend(v10, "unlock");

    }
    else
    {
      v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "managedObjectContext"));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1000296F0;
      v14[3] = &unk_1000D6798;
      v15 = *(id *)(a1 + 48);
      v11 = v5;
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(void **)(a1 + 40);
      v16 = v11;
      v17 = v12;
      v18 = *(_QWORD *)(a1 + 56);
      v19 = v13;
      objc_msgSend(v9, "performBlockAndWait:", v14);

    }
  }

}

void sub_1000296F0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addURLAttachmentWithURL:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "titleFromExtensionItem:", *(_QWORD *)(a1 + 56)));
  objc_msgSend(v6, "setTitle:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v6, "setCreationDate:", v3);
  objc_msgSend(v6, "setModificationDate:", v3);
  v4 = (void *)objc_opt_new(ICAddAttachmentsManagerAttachmentInfo);
  objc_msgSend(v4, "setAttachment:", v6);
  objc_msgSend(*(id *)(a1 + 64), "addObject:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "appendLock"));
  objc_msgSend(v5, "unlock");

}

void sub_1000297C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10009F0F0((uint64_t)v6, v7);

    goto LABEL_7;
  }
  if (v5)
  {
    v7 = objc_alloc_init((Class)ICAddAttachmentsManagerAttachmentInfo);
    -[NSObject setAttributedContentText:](v7, "setAttributedContentText:", v5);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);
LABEL_7:

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appendLock"));
  objc_msgSend(v8, "unlock");

}

void sub_10002988C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  _QWORD v18[5];
  id v19;
  uint64_t v20;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypePlainText, "identifier"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000299FC;
    v18[3] = &unk_1000D6810;
    v9 = *(void **)(a1 + 48);
    v18[4] = *(_QWORD *)(a1 + 40);
    v10 = v9;
    v11 = *(_QWORD *)(a1 + 56);
    v19 = v10;
    v20 = v11;
    objc_msgSend(v7, "loadItemForTypeIdentifier:options:completionHandler:", v8, 0, v18);

  }
  else if (v5)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "attributedContentText"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "string"));
    v15 = objc_msgSend(v5, "isEqualToString:", v14);

    if ((v15 & 1) == 0)
    {
      v16 = objc_alloc_init((Class)ICAddAttachmentsManagerAttachmentInfo);
      v17 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", v5);
      objc_msgSend(v16, "setAttributedContentText:", v17);

      objc_msgSend(*(id *)(a1 + 48), "addObject:", v16);
    }
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "appendLock"));
  objc_msgSend(v12, "unlock");

}

void sub_1000299FC(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10009F184((uint64_t)v6, v7);

  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v5, 4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "attributedContentText"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "string"));
    v11 = -[NSObject isEqualToString:](v7, "isEqualToString:", v10);

    if ((v11 & 1) == 0)
    {
      v12 = objc_alloc_init((Class)ICAddAttachmentsManagerAttachmentInfo);
      v13 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", v7);
      objc_msgSend(v12, "setAttributedContentText:", v13);

      objc_msgSend(a1[5], "addObject:", v12);
    }
  }

LABEL_6:
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "appendLock"));
  objc_msgSend(v8, "unlock");

}

void sub_100029B4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  NSObject *v11;
  id v12;
  void *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  id v17;
  void *v18;
  id v19;

  v5 = a2;
  v7 = a3;
  if (v7)
  {
    v8 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10009F278();
LABEL_12:

    goto LABEL_13;
  }
  if (v5)
  {
    v19 = 0;
    v9 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(NSDictionary, v6), v5, &v19);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v8 = v19;
    if (v8)
    {
      v11 = os_log_create("com.apple.notes", "SharingExtension");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_10009F218();

    }
    v12 = objc_alloc_init((Class)ICAddAttachmentsManagerAttachmentInfo);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("article-title")));
    objc_msgSend(v12, "setTitle:", v13);

    v14 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("article-summary")));
    v15 = v14;
    if (!v14)
    {
      +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "((summary) != nil)", "-[ICSharingExtensionAttachmentsManager extractAttachmentsFromInputItems:note:]_block_invoke", 1, 0, CFSTR("Expected non-nil value for '%s'"), "summary");
      v15 = &stru_1000DAF38;
    }
    v16 = v15;

    v17 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", v16);
    objc_msgSend(v12, "setAttributedContentText:", v17);

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
    goto LABEL_12;
  }
LABEL_13:
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appendLock"));
  objc_msgSend(v18, "unlock");

}

void sub_100029D5C(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSSet *v15;
  void *v16;
  id v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  NSObject *v38;
  id v39;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10009F348();
    goto LABEL_19;
  }
  if (v5)
  {
    v7 = objc_alloc_init((Class)ICAddAttachmentsManagerAttachmentInfo);
    v9 = objc_opt_class(NSDictionary, v8);
    v11 = objc_opt_class(NSString, v10);
    v13 = objc_opt_class(NSURL, v12);
    v15 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v9, v11, v13, objc_opt_class(NSNumber, v14), 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v39 = 0;
    v17 = (id)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v16, v5, &v39));
    v18 = v39;

    if (v18)
    {
      v19 = os_log_create("com.apple.notes", "SharingExtension");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        sub_10009F218();

    }
    -[NSObject setMetadata:](v7, "setMetadata:", v17);
    v20 = ICAttachmentMetadataURLKey;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", ICAttachmentMetadataURLKey));
    if (!v22)
      goto LABEL_18;
    v23 = objc_opt_class(NSString, v21);
    if ((objc_opt_isKindOfClass(v22, v23) & 1) != 0)
    {
      v25 = v22;
    }
    else
    {
      v26 = objc_opt_class(NSURL, v24);
      if ((objc_opt_isKindOfClass(v22, v26) & 1) == 0)
      {
        v31 = os_log_create("com.apple.notes", "SharingExtension");
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          sub_10009F2E8();
        goto LABEL_17;
      }
      v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "absoluteString"));
      if (!v25)
      {
LABEL_18:
        objc_msgSend(a1[5], "addObject:", v7);

LABEL_19:
        goto LABEL_20;
      }
    }
    v27 = objc_msgSend(v17, "mutableCopy");
    objc_msgSend(v27, "removeObjectForKey:", v20);
    v28 = v18;
    v29 = objc_msgSend(v27, "copy");

    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "managedObjectContext"));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10002A09C;
    v34[3] = &unk_1000D66E0;
    v35 = a1[4];
    v36 = v25;
    v30 = v29;
    v18 = v28;
    v17 = v30;
    v37 = v30;
    v38 = v7;
    v31 = v25;
    objc_msgSend(v33, "performBlockAndWait:", v34);

LABEL_17:
    goto LABEL_18;
  }
LABEL_20:
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "appendLock"));
  objc_msgSend(v32, "unlock");

}

void sub_10002A09C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(a1 + 40)));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "addURLAttachmentWithURL:", v3));

  objc_msgSend(v5, "setMetadata:", *(_QWORD *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v5, "setCreationDate:", v4);
  objc_msgSend(v5, "setModificationDate:", v4);
  objc_msgSend(*(id *)(a1 + 56), "setAttachment:", v5);
  objc_msgSend(*(id *)(a1 + 56), "setMetadata:", 0);

}

void sub_10002A150(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10009F348();
    goto LABEL_6;
  }
  if (v5)
  {
    v7 = objc_alloc_init((Class)ICAddAttachmentsManagerAttachmentInfo);
    v11 = ICAttachmentMetadataMapItemDataKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "base64EncodedStringWithOptions:", 0));
    v12 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
    -[NSObject setMetadata:](v7, "setMetadata:", v9);

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);
LABEL_6:

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appendLock"));
  objc_msgSend(v10, "unlock");

}

void sub_10002A3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002A40C(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double x;
  double y;
  double width;
  double height;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unsigned int v57;
  void *v58;
  uint64_t v59;
  BOOL v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  unsigned __int8 v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  _QWORD v77[4];
  id v78;
  CGRect v79;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
  if (objc_msgSend(v2, "isURL"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    if ((objc_msgSend(v3, "isiTunes") & 1) != 0)
    {
      v4 = 0;
    }
    else
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
      if ((objc_msgSend(v5, "isAppStore") & 1) != 0)
      {
        v4 = 0;
      }
      else
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
        if ((objc_msgSend(v6, "isNews") & 1) != 0)
        {
          v4 = 0;
        }
        else
        {
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
          if ((objc_msgSend(v7, "isMap") & 1) != 0)
          {
            v4 = 0;
          }
          else
          {
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
            v4 = objc_msgSend(v8, "isPodcasts") ^ 1;

          }
        }

      }
    }

  }
  else
  {
    v4 = 0;
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
  if ((objc_msgSend(v9, "isiTunes") & 1) == 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    if ((objc_msgSend(v10, "isAppStore") & 1) == 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
      if ((objc_msgSend(v11, "isNews") & 1) == 0)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
        if ((objc_msgSend(v12, "isMap") & 1) == 0)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
          if ((objc_msgSend(v13, "isURL") & 1) == 0)
          {
            v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
            v68 = objc_msgSend(v67, "isPodcasts");

            if ((v68 & 1) == 0)
              return;
            goto LABEL_26;
          }

        }
      }

    }
  }

LABEL_26:
  if (!objc_msgSend(*(id *)(a1 + 40), "count"))
    return;
  v14 = 0;
  v15 = 0;
  while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == v14)
  {
LABEL_61:
    if (++v14 >= (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count"))
      goto LABEL_82;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v14));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "image"));
  if (v17)
    v18 = v4;
  else
    v18 = 1;

  if ((v18 & 1) == 0)
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "image"));
    objc_msgSend(v32, "size");
    v34 = v33;
    v36 = v35;
    objc_msgSend(v32, "scale");
    v38 = v37;
    if (v34 * v37 <= 800.0 && v36 * v37 <= 800.0)
    {
      objc_msgSend(v32, "ic_cropRectZeroAlpha");
      x = v79.origin.x;
      y = v79.origin.y;
      width = v79.size.width;
      height = v79.size.height;
      if (!CGRectIsEmpty(v79))
      {
        objc_msgSend(v32, "size");
        if (width < v44 || (objc_msgSend(v32, "size"), height < v45))
        {
          v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "ic_imageFromRect:", x, y, width, height));

          v32 = (void *)v46;
        }
      }
    }
    objc_msgSend(v32, "size");
    v49 = v38 * v48;
    if (v38 * v47 > 384.0 && v49 > 384.0)
    {
      v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "ic_scaledImageMinDimension:scale:", 384.0, v38));

      v32 = (void *)v51;
    }
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    v15 = 1;
    v53 = objc_msgSend(v52, "updateAttachmentPreviewImageWithImage:scale:scaleWhenDrawing:metadata:sendNotification:", v32, 1, 0, 1, 0.0);
    goto LABEL_56;
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "metadata"));
  if (v19)
    v20 = v4;
  else
    v20 = 1;

  if ((v20 & 1) == 0)
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "metadata"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    objc_msgSend(v52, "setMetadata:", v32);
    goto LABEL_56;
  }
  v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
  if (!v21
    || (v22 = (void *)v21,
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "attachment")),
        v23,
        v22,
        !v23))
  {
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    v57 = objc_msgSend(v56, "isNews");

    if (!v57)
      goto LABEL_60;
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    v59 = objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "title"));
    v60 = v59 == 0;
    if (v59)
    {
      v61 = (void *)v59;
    }
    else
    {
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "title"));

      if (!v62)
      {
        v60 = 0;
        goto LABEL_69;
      }
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "title"));
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
      objc_msgSend(v61, "setTitle:", v58);
    }

LABEL_69:
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "summary"));
    if (v64)
    {

      if (!v60)
        goto LABEL_60;
      goto LABEL_71;
    }
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "attributedContentText"));

    if (!v65)
    {
      if (!v60)
        goto LABEL_60;
LABEL_71:
      v15 = 1;
      goto LABEL_57;
    }
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "attributedContentText"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "string"));
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    objc_msgSend(v66, "setSummary:", v52);

    v15 = 1;
LABEL_56:

LABEL_57:
    objc_msgSend(*(id *)(a1 + 40), "removeObjectAtIndex:", v14);
    v54 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v55 = *(_QWORD *)(v54 + 24);
    if (v55 >= v14)
      *(_QWORD *)(v54 + 24) = v55 - 1;
    --v14;
    goto LABEL_60;
  }
  v24 = *(void **)(a1 + 48);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "URL"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "getURLWithoutQueryAndFragmentFromURL:", v26));

  v28 = *(void **)(a1 + 48);
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "attachment"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "URL"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "getURLWithoutQueryAndFragmentFromURL:", v30));

  if (((objc_msgSend(v27, "isEqual:", v31) | v4) & 1) == 0)
  {

LABEL_60:
    goto LABEL_61;
  }
  v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
  v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "title"));

  if (!v70)
  {
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "attachment"));
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "title"));
    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    objc_msgSend(v73, "setTitle:", v72);

  }
  v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "attachment"));
  +[ICAttachment deleteAttachment:](ICAttachment, "deleteAttachment:", v74);

  objc_msgSend(*(id *)(a1 + 40), "removeObjectAtIndex:", v14);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "count");

LABEL_82:
  if ((v15 & 1) != 0)
  {
    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "managedObjectContext"));
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472;
    v77[2] = sub_10002AB60;
    v77[3] = &unk_1000D5D10;
    v78 = *(id *)(a1 + 32);
    objc_msgSend(v76, "performBlockAndWait:", v77);

  }
}

void sub_10002AB60(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
  objc_msgSend(v3, "setPreviewUpdateDate:", v2);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachment"));
  objc_msgSend(v4, "updateChangeCountWithReason:", CFSTR("Consolidated duplicate attachment"));

}

void sub_10002AD48(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metadata"));
  if (v2)
  {
    v11 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));

    if (!v3)
    {
      v4 = ICAttachmentMetadataTitleKey;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", ICAttachmentMetadataTitleKey));

      if (v5)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v4));
        objc_msgSend(*(id *)(a1 + 32), "setTitle:", v6);

      }
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "summary"));

    v2 = v11;
    if (!v7)
    {
      v8 = ICAttachmentMetadataDescriptionKey;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", ICAttachmentMetadataDescriptionKey));

      v2 = v11;
      if (v9)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v8));
        objc_msgSend(*(id *)(a1 + 32), "setSummary:", v10);

        v2 = v11;
      }
    }
  }

}

intptr_t sub_10002B520(intptr_t result)
{
  if (*(_BYTE *)(result + 40))
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(result + 32));
  return result;
}

intptr_t sub_10002B534(intptr_t result)
{
  if (*(_BYTE *)(result + 40))
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(result + 32));
  return result;
}

void sub_10002B7D0(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[3];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeImage, "identifier"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypePDF, "identifier", v1));
  v6[1] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeAudiovisualContent, "identifier"));
  v6[2] = v3;
  v4 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v6, 3));
  v5 = (void *)qword_1000ED6F0;
  qword_1000ED6F0 = v4;

}

id sub_10002BC2C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_10002BC38(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appendLock"));
  objc_msgSend(v3, "unlock");

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10002BC80(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appendLock"));
  objc_msgSend(v3, "unlock");

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10002BCC8(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appendLock"));
  objc_msgSend(v3, "unlock");

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10002C018(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  uint64_t v22;
  _BYTE v23[128];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v14 = a1;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          v10 = os_log_create("com.apple.notes", "SharingExtension");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v22 = v9;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error pushing cloud objects, but trying again: %@", buf, 0xCu);
          }

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
      }
      while (v6);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10002C22C;
    v15[3] = &unk_1000D6948;
    v16 = *(id *)(v14 + 32);
    objc_msgSend(v11, "processAllCloudObjectsWithCompletionHandler:", v15);

  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
    objc_msgSend(v12, "save");

    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
      (*(void (**)(void))(v13 + 16))();
  }

}

uint64_t sub_10002C22C(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v2, "save");

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10002C67C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10002D89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002D8B4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  id v7;
  void *v8;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICUTType typeWithIdentifier:](ICUTType, "typeWithIdentifier:", v6));
  LOBYTE(v6) = objc_msgSend(v8, "conformsToType:", v7);

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v6;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a4 = 1;
}

void sub_10002DFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 232), 8);
  _Unwind_Resume(a1);
}

void sub_10002DFF4(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  void *v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  _BYTE *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  if (a2)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "fileWrapper"));
    if (objc_msgSend(v7, "isRegularFile"))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "regularFileContents"));
      v9 = (char *)objc_msgSend(v8, "length");
    }
    else
    {
      if (!objc_msgSend(v7, "isDirectory"))
      {
LABEL_19:

        return;
      }
      v10 = (void *)a1[4];
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "filename"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URLByAppendingPathComponent:isDirectory:", v11, 1));

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", NSURLFileSizeKey));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v8, v13, 4, 0));

      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v15 = v14;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      if (v16)
      {
        v17 = v16;
        v24 = v12;
        v25 = v8;
        v26 = a1;
        v27 = a5;
        v18 = 0;
        v9 = 0;
        v19 = *(_QWORD *)v30;
        do
        {
          v20 = 0;
          v21 = v18;
          do
          {
            if (*(_QWORD *)v30 != v19)
              objc_enumerationMutation(v15);
            v22 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v20);
            v28 = 0;
            v23 = objc_msgSend(v22, "getResourceValue:forKey:error:", &v28, NSURLFileSizeKey, 0);
            v18 = v28;

            if (v23)
              v9 = &v9[(_QWORD)objc_msgSend(v18, "unsignedIntegerValue")];
            v20 = (char *)v20 + 1;
            v21 = v18;
          }
          while (v17 != v20);
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        }
        while (v17);

        a1 = v26;
        a5 = v27;
        v12 = v24;
        v8 = v25;
      }
      else
      {
        v9 = 0;
      }

    }
    if ((unint64_t)v9 > a1[7])
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
      *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v9;
      *a5 = 1;
    }
    goto LABEL_19;
  }
}

void sub_10002E25C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textStorage"));
  v2 = objc_alloc_init((Class)ICTextController);
  objc_msgSend(v5, "setStyler:", v2);

  objc_msgSend(v5, "setConvertAttributes:", 1);
  objc_msgSend(v5, "setWantsUndoCommands:", 0);
  objc_msgSend(v5, "replaceCharactersInRange:withAttributedString:", 0, 0, *(_QWORD *)(a1 + 40));
  objc_msgSend(v5, "fixupAfterEditing");
  objc_msgSend(v5, "setConvertAttributes:", 0);
  objc_msgSend(v5, "setStyler:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textStorage"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v3, "ic_enumerateAttachmentsInContext:usingBlock:", v4, &stru_1000D69E0);

}

void sub_10002E33C(id a1, ICAttachment *a2, _NSRange a3, BOOL *a4)
{
  -[ICAttachment updateChangeCountWithReason:](a2, "updateChangeCountWithReason:", CFSTR("Imported note"), a3.length, a4);
}

void sub_10002E34C(uint64_t a1)
{
  id *v2;
  void *v3;
  id v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 32), "setCreationDate:");
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v2 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 32), "setCreationDate:", v3);

  }
  if (*(_QWORD *)(a1 + 48))
  {
    objc_msgSend(*v2, "setModificationDate:");
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(*v2, "setModificationDate:", v4);

  }
}

void sub_10002E738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002E758(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002E768(uint64_t a1)
{

}

void sub_10002E770(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_10002EA3C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_10002F208(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dimmingView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_10002F308(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;

  objc_msgSend(*(id *)(a1 + 32), "frameOfPresentedViewInContainerView");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedView"));
  objc_msgSend(v10, "setFrame:", v3, v5, v7, v9);

}

void sub_10002F424(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dimmingView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_10002F50C()
{
  strcpy((char *)&static ICArchive.packageExtension, "notesarchive");
  algn_1000F6918[5] = 0;
  *(_WORD *)&algn_1000F6918[6] = -5120;
}

uint64_t *ICArchive.packageExtension.unsafeMutableAddressor()
{
  if (qword_1000EB630 != -1)
    swift_once(&qword_1000EB630, sub_10002F50C);
  return &static ICArchive.packageExtension;
}

uint64_t static ICArchive.packageExtension.getter()
{
  uint64_t v0;

  if (qword_1000EB630 != -1)
    swift_once(&qword_1000EB630, sub_10002F50C);
  v0 = static ICArchive.packageExtension;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1000F6918);
  return v0;
}

uint64_t static ICArchive.archiveTitle<A>(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  _QWORD v22[2];

  v2 = type metadata accessor for ICObjectReferences(255);
  v3 = type metadata accessor for Optional(0, v2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)v22 - v5;
  if (Array.count.getter(a1, v2) != 1)
    goto LABEL_9;
  v22[1] = a1;
  v7 = type metadata accessor for Array(0, v2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  Collection.first.getter(v7, WitnessTable);
  v9 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_9:
    v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, 0, 0);

    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    return v14;
  }
  ICObjectReferences.title.getter(v2);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v2);
  if (!v11)
    goto LABEL_9;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend(v12, "ic_sanitizedFilenameString");

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = v14 & 0xFFFFFFFFFFFFLL;
  if (!v17)
  {
    swift_bridgeObjectRelease(v16);
    goto LABEL_9;
  }
  return v14;
}

void sub_10002F85C()
{
  qword_1000F6920 = 0x6F736A2E6F666E69;
  *(_QWORD *)algn_1000F6928 = 0xE90000000000006ELL;
}

void sub_10002F884()
{
  qword_1000F6930 = 0x2E77656976657250;
  *(_QWORD *)algn_1000F6938 = 0xEB00000000676E70;
}

void sub_10002F8B0()
{
  qword_1000F6940 = 0x2E77656976657250;
  *(_QWORD *)algn_1000F6948 = 0xEB00000000666470;
}

uint64_t sub_10002F8DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002F9A0(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0)
    return a2;
  __break(1u);
  return result;
}

uint64_t sub_10002F9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONEncoder.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for JSONEncoder.DateEncodingStrategy.iso8601(_:), v0);
  result = dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v3);
  qword_1000F6950 = v5;
  return result;
}

uint64_t sub_10002FA88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONDecoder.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for JSONDecoder.DateDecodingStrategy.iso8601(_:), v0);
  result = dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v3);
  qword_1000F6958 = v5;
  return result;
}

uint64_t variable initialization expression of ICArchiveExporterConfiguration.exportsAttributions()
{
  return ICInternalSettingsIsAlexandriaDemoModeEnabled();
}

double variable initialization expression of ICArchiveImporter.Configuration.timestampOffset()
{
  return 0.0;
}

uint64_t variable initialization expression of ICArchiveImporter.Configuration.rootContainer()
{
  return 0;
}

uint64_t variable initialization expression of ICArchiveExporterConfiguration.exportsInternalProperties()
{
  return 0;
}

unint64_t variable initialization expression of ICArchiveImporter.errors()
{
  return sub_10002FB80((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of ICArchiveImporter.saveBatchSize()
{
  return 32;
}

double variable initialization expression of ICArchiveImporter.didReceiveMemoryWarningObserver@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t sub_10002FB80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100030EE4(&qword_1000EB748);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100030EE4(&qword_1000EB750);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100031044(v13, (uint64_t)v5, &qword_1000EB748);
    result = sub_10005F76C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8, v20);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002FD14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100030EE4(&qword_1000EB718);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100030EE4(&qword_1000EB720);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100031044(v13, (uint64_t)v5, &qword_1000EB718);
    result = sub_10005F804((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_100030EE4(&qword_1000EC320);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v21 = v8[7] + 24 * v17;
    v22 = v10[16];
    *(_OWORD *)v21 = *(_OWORD *)v10;
    *(_BYTE *)(v21 + 16) = v22;
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8, v20);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002FEC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100030EE4(&qword_1000EB738);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100030EE4(&qword_1000EB740);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100031044(v13, (uint64_t)v5, &qword_1000EB738);
    result = sub_10005F908((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v21 = (_QWORD *)(v8[7] + 16 * v17);
    v22 = *((_QWORD *)v10 + 1);
    *v21 = *(_QWORD *)v10;
    v21[1] = v22;
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8, v20);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100030060(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100030EE4(&qword_1000EB728);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100031044(v7, (uint64_t)&v15, &qword_1000EB730);
    v8 = v15;
    result = sub_10005F9A0(v15);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100031034(&v16, (_OWORD *)(v4[7] + 32 * result));
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4, v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003018C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100030EE4((uint64_t *)&unk_1000EC390);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10005F8A4(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4, v12);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000302A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = sub_100030EE4(&qword_1000EB710);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v8;
  }
  sub_100030EE4(&qword_1000EC2F0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v29 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100031044(v13, (uint64_t)v5, &qword_1000EB710);
    result = sub_10005F76C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v21 = v8[7] + 32 * v17;
    v22 = *((_QWORD *)v10 + 1);
    v23 = *((_OWORD *)v10 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v10;
    *(_QWORD *)(v21 + 8) = v22;
    *(_OWORD *)(v21 + 16) = v23;
    v24 = v8[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_12;
    v8[2] = v26;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8, v20);
      v27 = v29;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of ICArchivePreviewer.objects()
{
  return sub_10002FD14((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of ICArchiveExporterConfiguration.creator@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_1000EB6B8 != -1)
    swift_once(&qword_1000EB6B8, sub_10007E8F0);
  v2 = *((_QWORD *)&xmmword_1000F6980 + 1);
  *(_QWORD *)a1 = static ICArchiveCreator.default;
  v3 = *((_QWORD *)&static ICArchiveCreator.default + 1);
  *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)&static ICArchiveCreator.default + 8);
  v4 = v3;
  v5 = unk_1000F6978;
  *(_OWORD *)(a1 + 24) = unk_1000F6978;
  v6 = v5;
  *(_QWORD *)(a1 + 40) = v2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  return swift_bridgeObjectRetain(v2);
}

uint64_t variable initialization expression of ICArchiveCreator.softwareIdentifier()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "bundleIdentifier");

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t variable initialization expression of ICArchiveCreator.softwareVersionName()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "infoDictionary");

  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
    goto LABEL_11;
  }
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_10005F8A4(0xD00000000000001ALL, 0x80000001000B00A0), (v4 & 1) == 0))
  {
    v7 = 0u;
    v8 = 0u;
    swift_bridgeObjectRelease(v2);
    goto LABEL_11;
  }
  sub_100030F24(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_11:
    sub_100030EA4((uint64_t)&v7);
    return 0;
  }
  if (swift_dynamicCast(&v6, &v7, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v6;
  else
    return 0;
}

CFStringRef variable initialization expression of ICArchiveCreator.softwareVersion()
{
  id v0;
  id v1;
  uint64_t v2;
  CFStringRef result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "infoDictionary");

  if (!v1)
  {
    v10 = 0u;
    v11 = 0u;
    goto LABEL_12;
  }
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  result = kCFBundleVersionKey;
  if (!kCFBundleVersionKey)
  {
    __break(1u);
    return result;
  }
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleVersionKey);
  v6 = v5;
  if (!*(_QWORD *)(v2 + 16) || (v7 = sub_10005F8A4(v4, v5), (v8 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v2);
    goto LABEL_12;
  }
  sub_100030F24(*(_QWORD *)(v2 + 56) + 32 * v7, (uint64_t)&v10);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_12:
    sub_100030EA4((uint64_t)&v10);
    return 0;
  }
  if (swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return (CFStringRef)v9;
  else
    return 0;
}

uint64_t sub_1000307FC(uint64_t a1, uint64_t a2)
{
  return sub_1000308C4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100030808(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100030848(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1000308B8(uint64_t a1, uint64_t a2)
{
  return sub_1000308C4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000308C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100030900(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100030974(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000309F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_100030A30(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100030AB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100030AFC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100030B24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10003111C(&qword_1000EB788, (uint64_t)&unk_1000B39D0);
  v3 = sub_10003111C(&qword_1000EB790, (uint64_t)&unk_1000B3924);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100030B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v26;
  _QWORD v27[2];
  _BYTE v28[64];

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v6 = v5;
  if (v5)
  {
    v7 = sub_100030EE4(&qword_1000EB6F0);
    inited = swift_initStackObject(v7, v28);
    *(_OWORD *)(inited + 16) = xmmword_1000B3840;
    if (qword_1000EB638 != -1)
      swift_once(&qword_1000EB638, sub_10002F85C);
    v9 = *(_QWORD *)algn_1000F6928;
    *(_QWORD *)(inited + 32) = qword_1000F6920;
    *(_QWORD *)(inited + 40) = v9;
    v10 = qword_1000EB640;
    swift_bridgeObjectRetain(v9);
    if (v10 != -1)
      swift_once(&qword_1000EB640, sub_10002F884);
    v11 = *(_QWORD *)algn_1000F6938;
    *(_QWORD *)(inited + 48) = qword_1000F6930;
    *(_QWORD *)(inited + 56) = v11;
    v12 = sub_10002F8DC(v4, v6, (_QWORD *)inited);
    swift_setDeallocating(inited);
    swift_bridgeObjectRetain(v11);
    swift_arrayDestroy(inited + 32, 2, &type metadata for String);
    if ((v12 & 1) != 0)
    {
      v27[0] = 46;
      v27[1] = 0xE100000000000000;
      v13 = sub_100030F60();
      v14 = StringProtocol.components<A>(separatedBy:)(v27, &type metadata for String, &type metadata for String, v13, v13);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRetain(v14);
      v15 = sub_100030EE4(&qword_1000EB700);
      v16 = sub_100030FA4();
      v17 = BidirectionalCollection<>.joined(separator:)(46, 0xE100000000000000, v15, v16);
      swift_unknownObjectRelease(v14);
      v18 = *(_QWORD *)(v14 + 16);
      if (v18)
      {
        v19 = v14 + 32 + 16 * v18;
        v20 = *(_QWORD *)(v19 - 16);
        v21 = *(void **)(v19 - 8);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRelease(v14);
        v26 = v17;
        v22._countAndFlagsBits = 3027488;
        v22._object = (void *)0xE300000000000000;
        String.append(_:)(v22);
        v23._countAndFlagsBits = v20;
        v23._object = v21;
        String.append(_:)(v23);
        swift_bridgeObjectRelease(v21);
      }
      else
      {
        swift_bridgeObjectRelease(v14);
        v26 = v17;
        v24._countAndFlagsBits = 12832;
        v24._object = (void *)0xE200000000000000;
        String.append(_:)(v24);
      }
      return v26;
    }
  }
  return v4;
}

uint64_t _sSo9ICArchiveC38com_apple_mobilenotes_SharingExtensionE15archiveFilename8forTitleS2S_tFZ_0()
{
  NSString v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  uint64_t v8;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend(v0, "ic_sanitizedFilenameString");

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v8 = v2;
  v3._countAndFlagsBits = 46;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  if (qword_1000EB630 != -1)
    swift_once(&qword_1000EB630, sub_10002F50C);
  v4 = static ICArchive.packageExtension;
  v5 = *(void **)algn_1000F6918;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1000F6918);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  return v8;
}

uint64_t sub_100030EA4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100030EE4(&qword_1000EB6E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100030EE4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100030F24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100030F60()
{
  unint64_t result;

  result = qword_1000EB6F8;
  if (!qword_1000EB6F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000EB6F8);
  }
  return result;
}

unint64_t sub_100030FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EB708;
  if (!qword_1000EB708)
  {
    v1 = sub_100030FF0(&qword_1000EB700);
    result = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EB708);
  }
  return result;
}

uint64_t sub_100030FF0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_OWORD *sub_100031034(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100031044(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100030EE4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1000312A0(a1, &qword_1000EB758, (uint64_t)&unk_1000D74C0);
}

__n128 _s14descr1000DA611V16AttributedStringV14AttributeRangeVwCP(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1000312A0(a1, &qword_1000EB760, (uint64_t)&unk_1000D7548);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000312A0(a1, &qword_1000EB768, (uint64_t)&unk_1000D7570);
}

uint64_t sub_1000310D4()
{
  return sub_10003111C(&qword_1000EB770, (uint64_t)&unk_1000B38E8);
}

uint64_t sub_1000310F8()
{
  return sub_10003111C(&qword_1000EB778, (uint64_t)&unk_1000B38BC);
}

uint64_t sub_10003111C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003115C()
{
  return sub_10003111C(&qword_1000EB780, (uint64_t)&unk_1000B3958);
}

void type metadata accessor for NotesVersion(uint64_t a1)
{
  sub_1000312A0(a1, &qword_1000EB798, (uint64_t)&unk_1000D7598);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000312A0(a1, &qword_1000EB7A0, (uint64_t)&unk_1000D7610);
}

uint64_t initializeBufferWithCopyOfBuffer for ICArchiveImporter.Configuration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for ICArchiveImporter.Configuration(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000311E4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100031204(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000312A0(a1, &qword_1000EB7A8, (uint64_t)&unk_1000D7690);
}

uint64_t _s14descr1000DA611V16AttributedStringV14AttributeRangeVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s14descr1000DA611V16AttributedStringV14AttributeRangeVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000312A0(a1, &qword_1000EB7B0, (uint64_t)&unk_1000D7710);
}

void sub_1000312A0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_1000312F0()
{
  unint64_t result;

  result = qword_1000EB7B8;
  if (!qword_1000EB7B8)
  {
    result = swift_getWitnessTable(&unk_1000B3AB0, &type metadata for ICArchiveModels);
    atomic_store(result, (unint64_t *)&qword_1000EB7B8);
  }
  return result;
}

uint64_t sub_100031334(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10003136C + 4 * byte_1000B3A60[a1]))(0xD000000000000017, 0x80000001000AFE00);
}

void sub_1000313B0(char *a1)
{
  sub_100036654(*a1);
}

void sub_1000313BC()
{
  char *v0;

  sub_100053BE0(*v0);
}

void sub_1000313C4(uint64_t a1)
{
  char *v1;

  sub_100054460(a1, *v1);
}

void sub_1000313CC(uint64_t a1)
{
  char *v1;

  sub_100054808(a1, *v1);
}

unint64_t sub_1000313D4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100031554(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100031400@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100031334(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100031428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100031510();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100031484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100031510();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000314D0(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D6AE8;
}

void sub_1000314E0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_1000314E8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100031554(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100031510()
{
  unint64_t result;

  result = qword_1000EB7C0;
  if (!qword_1000EB7C0)
  {
    result = swift_getWitnessTable(&unk_1000B3BE0, &type metadata for ICArchiveModels);
    atomic_store(result, (unint64_t *)&qword_1000EB7C0);
  }
  return result;
}

unint64_t sub_100031554(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D6A50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

_BYTE *initializeBufferWithCopyOfBuffer for ICArchiveModels(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ICArchiveModels(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveModels(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100031684 + 4 * byte_1000B3A6A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000316B8 + 4 * byte_1000B3A65[v4]))();
}

uint64_t sub_1000316B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000316C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000316C8);
  return result;
}

uint64_t sub_1000316D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000316DCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000316E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000316E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000316F4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100031700(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveModels()
{
  return &type metadata for ICArchiveModels;
}

unint64_t sub_10003171C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EB7C8;
  if (!qword_1000EB7C8)
  {
    v1 = sub_100030FF0(&qword_1000EB7D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000EB7C8);
  }
  return result;
}

unint64_t sub_10003176C()
{
  unint64_t result;

  result = qword_1000EB7D8;
  if (!qword_1000EB7D8)
  {
    result = swift_getWitnessTable(&unk_1000B3B90, &type metadata for ICArchiveModels);
    atomic_store(result, (unint64_t *)&qword_1000EB7D8);
  }
  return result;
}

uint64_t sub_1000317B0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000EB7E0);
  sub_10003609C(v0, (uint64_t)qword_1000EB7E0);
  return static Logger.archiving.getter();
}

char *ICArchiveNotesPreviewer.__allocating_init(forArchiveAt:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ICArchiveNotesPreviewer.init(forArchiveAt:)(a1);
}

char *ICArchiveNotesPreviewer.init(forArchiveAt:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  objc_class *v66;
  _QWORD *v67;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ObjectType;
  uint64_t v76;
  char *v77;
  int v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  objc_super v91;
  char v92[32];
  _QWORD *v93;

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  v4 = sub_100030EE4(&qword_1000EB7F8);
  __chkstk_darwin(v4);
  v77 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ICArchiveNotesPreviewer.Note(0);
  v7 = *(_QWORD *)(v6 - 8);
  v85 = v6;
  v86 = v7;
  v8 = __chkstk_darwin(v6);
  v84 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v89 = (uint64_t)&v69 - v11;
  __chkstk_darwin(v10);
  v76 = (uint64_t)&v69 - v12;
  v13 = sub_100030EE4(&qword_1000EC320);
  v87 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v83 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v69 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v69 - v19;
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a1, v21);
  v26 = type metadata accessor for ICArchivePreviewer();
  swift_allocObject(v26, 32, 7);
  v27 = v2;
  v28 = v90;
  v29 = ICArchivePreviewer.init(forArchiveAt:)(v24);
  if (v28)
  {

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, v21);
    swift_deallocPartialClassInstance(v27, ObjectType, 24, 7);
  }
  else
  {
    v30 = v29;
    v74 = v25;
    v90 = v20;
    v81 = v18;
    v73 = v22;
    v82 = v21;
    *(_QWORD *)&v27[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewer_archivePreviewer] = v29;
    swift_beginAccess(v29 + 24, v92, 0, 0);
    v31 = *(_QWORD *)(v30 + 24);
    swift_bridgeObjectRetain_n(v31, 2);
    v32 = sub_100033970(v31);
    swift_bridgeObjectRelease(v31);
    v93 = v32;
    sub_1000338EC(&v93);
    swift_bridgeObjectRelease(v31);
    v34 = v93[2];
    v35 = v81;
    v36 = v82;
    v37 = v87;
    if (v34)
    {
      v71 = v27;
      v72 = 0;
      v38 = (char *)v93 + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
      v39 = *(_QWORD *)(v87 + 72);
      v79 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
      v80 = v39;
      v78 = enum case for ICObjectReferences.note<A>(_:);
      v70 = v93;
      swift_retain(v93);
      v88 = _swiftEmptyArrayStorage;
      v40 = (uint64_t)v77;
      v41 = v86;
      v42 = v90;
      do
      {
        v43 = v42;
        v44 = v79;
        v79(v42, v38, v13);
        v44(v35, v43, v13);
        v45 = v83;
        v44(v83, v35, v13);
        v46 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v45, v13);
        if (v46 == v78)
        {
          (*(void (**)(char *, uint64_t))(v37 + 96))(v45, v13);
          v47 = *(_QWORD *)v45;
          ICObjectReferences.identifier.getter(v13);
          v48 = ICObjectReferences.title.getter(v13);
          v50 = v49;
          v51 = *(void (**)(char *, uint64_t))(v37 + 8);
          v51(v35, v13);
          v52 = v47;
          v40 = (uint64_t)v77;
          swift_release(v52, v53);
          v54 = v85;
          v55 = (uint64_t *)(v89 + *(int *)(v85 + 20));
          *v55 = v48;
          v55[1] = v50;
          v41 = v86;
          sub_100033AA8(v89, v40);
          v56 = 0;
        }
        else
        {
          v57 = v45;
          v51 = *(void (**)(char *, uint64_t))(v37 + 8);
          v51(v81, v13);
          v58 = v57;
          v35 = v81;
          v51(v58, v13);
          v56 = 1;
          v54 = v85;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v40, v56, 1, v54);
        v51(v90, v13);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v40, 1, v54) == 1)
        {
          sub_100036060(v40, &qword_1000EB7F8);
          v36 = v82;
          v37 = v87;
        }
        else
        {
          v59 = v76;
          sub_100033AA8(v40, v76);
          sub_100033AA8(v59, v84);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v88);
          v36 = v82;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            v61 = (unint64_t)v88;
          else
            v61 = sub_100033368(0, v88[2] + 1, 1, (unint64_t)v88, &qword_1000EB9A8, type metadata accessor for ICArchiveNotesPreviewer.Note);
          v63 = *(_QWORD *)(v61 + 16);
          v62 = *(_QWORD *)(v61 + 24);
          v37 = v87;
          if (v63 >= v62 >> 1)
            v61 = sub_100033368(v62 > 1, v63 + 1, 1, v61, &qword_1000EB9A8, type metadata accessor for ICArchiveNotesPreviewer.Note);
          *(_QWORD *)(v61 + 16) = v63 + 1;
          v41 = v86;
          v64 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
          v88 = (_QWORD *)v61;
          sub_100033AA8(v84, v61 + v64 + *(_QWORD *)(v86 + 72) * v63);
        }
        v38 += v80;
        --v34;
        v42 = v90;
      }
      while (v34);
      swift_release_n(v70, 2);
      v65 = v74;
      v66 = (objc_class *)ObjectType;
      v27 = v71;
      v67 = v88;
    }
    else
    {
      swift_release(v93, v33);
      v67 = _swiftEmptyArrayStorage;
      v65 = v74;
      v66 = (objc_class *)ObjectType;
    }
    *(_QWORD *)&v27[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewer_notes] = v67;

    v91.receiver = v27;
    v91.super_class = v66;
    v20 = (char *)objc_msgSendSuper2(&v91, "init");
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v65, v36);
  }
  return v20;
}

uint64_t type metadata accessor for ICArchiveNotesPreviewer.Note(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EB8A0;
  if (!qword_1000EB8A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ICArchiveNotesPreviewer.Note);
  return result;
}

uint64_t ICArchiveNotesPreviewer.notes.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0
                                            + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewer_notes));
}

id ICArchiveNotesPreviewer.startPreviewing(_:completion:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v7 = sub_100030EE4(&qword_1000EC320);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewer_archivePreviewer);
  sub_100032078(a1, (uint64_t)v10);
  swift_retain(a3);
  v12 = sub_100061D48((uint64_t)v10, v11, a2, a3);
  swift_release(a3, v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v12;
}

uint64_t sub_100032078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _BYTE v20[16];
  uint64_t v21;
  _BYTE v22[24];

  v5 = sub_100030EE4(&qword_1000EB998);
  __chkstk_darwin(v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewer_archivePreviewer);
  swift_beginAccess(v8 + 24, v22, 0, 0);
  v9 = *(_QWORD *)(v8 + 24);
  v21 = a1;
  swift_bridgeObjectRetain(v9);
  sub_100032A9C((uint64_t (*)(char *))sub_100036044, v9, v7);
  swift_bridgeObjectRelease(v9);
  v10 = sub_100030EE4(&qword_1000EC320);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v7, v10);
  sub_100036060((uint64_t)v7, &qword_1000EB998);
  if (qword_1000EB660 != -1)
    swift_once(&qword_1000EB660, sub_1000317B0);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10003609C(v12, (uint64_t)qword_1000EB7E0);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Object to be previewed does not exist", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = sub_1000360B4();
  swift_allocError(&type metadata for ICArchiveImporter.Errors, v17, 0, 0);
  *v18 = 4;
  return swift_willThrow();
}

void sub_10003227C(void *a1, char a2, void (*a3)(void *, uint64_t))
{
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];

  v4 = a1;
  v5 = a2 & 1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
  }
  else
  {
    v7[3] = sub_100036000(0, (unint64_t *)&qword_1000EB810, ICCloudSyncingObject_ptr);
    v7[0] = v4;
    v6 = v4;
    v4 = (void *)sub_10003255C((uint64_t)v7, &qword_1000EB970, ICNote_ptr, &qword_1000EB978);
    sub_100035424(v7);
  }
  a3(v4, v5);
  sub_100036038(v4, v5);
}

uint64_t sub_10003232C(uint64_t a1)
{
  return sub_10003255C(a1, &qword_1000EB970, ICNote_ptr, &qword_1000EB978);
}

uint64_t sub_100032348(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  void *object;
  void (*v10)(char *, uint64_t);
  Swift::String v11;
  Swift::String v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _BYTE v18[32];

  v2 = type metadata accessor for Mirror(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030F24(a1, (uint64_t)v18);
  v6 = sub_100030EE4(&qword_1000EB958);
  if (swift_dynamicCast(&v14, v18, (char *)&type metadata for Any + 8, v6, 6))
    return v14;
  sub_100030F24(a1, (uint64_t)v18);
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v15);
  strcpy((char *)v17, "Cannot cast ");
  BYTE5(v17[1]) = 0;
  HIWORD(v17[1]) = -5120;
  sub_100030F24((uint64_t)v18, (uint64_t)&v14);
  Mirror.init(reflecting:)(&v14);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, &protocol witness table for Mirror);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  v11._countAndFlagsBits = 544432416;
  v11._object = (void *)0xE400000000000000;
  String.append(_:)(v11);
  v16 = sub_100030EE4(&qword_1000EB960);
  v14 = v6;
  Mirror.init(reflecting:)(&v14);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, &protocol witness table for Mirror);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v10(v5, v2);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v17[0], v17[1], "NotesShared/Casting.swift", 25, 2, 12, 0);
  __break(1u);
  return result;
}

uint64_t sub_100032540(uint64_t a1)
{
  return sub_10003255C(a1, (unint64_t *)&qword_1000EB810, ICCloudSyncingObject_ptr, &qword_1000EB990);
}

uint64_t sub_10003255C(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  Swift::String v14;
  uint64_t v15;
  void *object;
  void (*v17)(char *, uint64_t);
  Swift::String v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _BYTE v25[32];

  v8 = type metadata accessor for Mirror(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030F24(a1, (uint64_t)v25);
  v12 = sub_100036000(0, a2, a3);
  if (swift_dynamicCast(&v21, v25, (char *)&type metadata for Any + 8, v12, 6))
    return v21;
  sub_100030F24(a1, (uint64_t)v25);
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v22);
  strcpy((char *)v24, "Cannot cast ");
  BYTE5(v24[1]) = 0;
  HIWORD(v24[1]) = -5120;
  sub_100030F24((uint64_t)v25, (uint64_t)&v21);
  Mirror.init(reflecting:)(&v21);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, &protocol witness table for Mirror);
  v15 = v9;
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v17 = *(void (**)(char *, uint64_t))(v15 + 8);
  v17(v11, v8);
  v18._countAndFlagsBits = 544432416;
  v18._object = (void *)0xE400000000000000;
  String.append(_:)(v18);
  v23 = sub_100030EE4(a4);
  v21 = v12;
  Mirror.init(reflecting:)(&v21);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, &protocol witness table for Mirror);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v17(v11, v8);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v24[0], v24[1], "NotesShared/Casting.swift", 25, 2, 12, 0);
  __break(1u);
  return result;
}

uint64_t ICArchiveNotesPreviewer.stopPreviewing(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_100030EE4(&qword_1000EC320);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032078(a1, (uint64_t)v5);
  ICArchivePreviewer.stopPreviewing(_:)((uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ICArchiveNotesPreviewer.state(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v3 = sub_100030EE4(&qword_1000EC320);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  v7 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewer_archivePreviewer);
  swift_beginAccess(v7 + 24, v15, 0, 0);
  v8 = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain(v8);
  sub_100032078(a1, (uint64_t)v6);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = sub_10005F804((uint64_t)v6);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(v8 + 56) + 24 * v9;
      v12 = *(unsigned __int8 *)(v11 + 16);
      sub_1000353DC(*(id *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
      swift_bridgeObjectRelease(v8);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      __asm { BR              X9 }
    }
  }
  swift_bridgeObjectRelease(v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return 0;
}

void sub_100032990()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = sub_100036000(0, (unint64_t *)&qword_1000EB810, ICCloudSyncingObject_ptr);
  *(_QWORD *)(v1 - 128) = v0;
  sub_10003255C(v1 - 128, &qword_1000EB970, ICNote_ptr, &qword_1000EB978);
  sub_100035424((_QWORD *)(v1 - 128));
  JUMPOUT(0x10003296CLL);
}

void sub_1000329E4()
{
  JUMPOUT(0x10003296CLL);
}

uint64_t sub_1000329F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000EC320);
  ICObjectReferences.identifier.getter(v7);
  v8 = static URL.== infix(_:_:)(v6, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v8 & 1;
}

uint64_t sub_100032A9C@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  unint64_t v22;
  int64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;

  v33 = a1;
  v30 = a3;
  v5 = sub_100030EE4(&qword_1000EC320);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 + 64);
  v31 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v32 = (unint64_t)(v13 + 63) >> 6;
  v34 = a2;
  result = swift_bridgeObjectRetain(a2);
  v18 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(_QWORD *)(v34 + 48) + *(_QWORD *)(v6 + 72) * i, v5);
    v24 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v24(v9, v11, v5);
    v25 = v33(v9);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return swift_release(v34, v27);
    }
    if ((v25 & 1) != 0)
    {
      swift_release(v34, v26);
      v28 = v30;
      v24(v30, v9, v5);
      v29 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v28, v29, 1, v5);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v18++, 1))
      break;
    if (v18 >= v32)
      goto LABEL_28;
    v22 = *(_QWORD *)(v31 + 8 * v18);
    if (!v22)
    {
      v23 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_28;
      v22 = *(_QWORD *)(v31 + 8 * v23);
      if (v22)
        goto LABEL_16;
      v23 = v18 + 2;
      if (v18 + 2 >= v32)
        goto LABEL_28;
      v22 = *(_QWORD *)(v31 + 8 * v23);
      if (v22)
        goto LABEL_16;
      v23 = v18 + 3;
      if (v18 + 3 >= v32)
        goto LABEL_28;
      v22 = *(_QWORD *)(v31 + 8 * v23);
      if (v22)
      {
LABEL_16:
        v18 = v23;
        goto LABEL_17;
      }
      v23 = v18 + 4;
      if (v18 + 4 < v32)
      {
        v22 = *(_QWORD *)(v31 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v18 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_31;
            if (v18 >= v32)
              goto LABEL_28;
            v22 = *(_QWORD *)(v31 + 8 * v18);
            ++v23;
            if (v22)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v28 = v30;
      swift_release(v34, v17);
      v29 = 1;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v28, v29, 1, v5);
    }
LABEL_17:
    v15 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

id ICCloudSyncingObject.MoveAction.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void ICArchiveNotesPreviewer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("com_apple_mobilenotes_SharingExtension.ICArchiveNotesPreviewer", 62, "init()", 6, 0);
  __break(1u);
}

id ICCloudSyncingObject.MoveAction.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t ICArchiveNotesPreviewer.Note.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ICArchiveNotesPreviewer.Note(0) + 20));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

Swift::Int ICArchiveNotesPreviewer.Note.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  _s38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewerC4NoteV4hash4intoys6HasherVz_tF_0();
  return Hasher._finalize()();
}

Swift::Int sub_100032EB8(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  _s38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewerC4NoteV4hash4intoys6HasherVz_tF_0();
  return Hasher._finalize()();
}

uint64_t sub_100032EF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100033148(a1, a2, a3, a4, &qword_1000EB968, &qword_1000EC320);
}

_QWORD *sub_100032F04(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100030EE4(&qword_1000EB980);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000352D4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100033010(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100030EE4(&qword_1000EB948);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100035AD0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100033134(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100033148(a1, a2, a3, a4, &qword_1000EB920, &qword_1000EB738);
}

uint64_t sub_100033148(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100030EE4(a5);
  v14 = *(_QWORD *)(sub_100030EE4(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_100030EE4(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000351BC(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100033354(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100033368(a1, a2, a3, a4, &qword_1000EB8E8, _s14descr1000DA8A1V3TagVMa);
}

uint64_t sub_100033368(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100030EE4(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100035EE8(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_100033574(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100030EE4(&qword_1000EB900);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100035BDC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100033680(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100030EE4(&qword_1000EB910);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100035CE4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000337A4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100030EE4(&qword_1000EB8D8);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100035DD8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000338C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100033148(a1, a2, a3, a4, &qword_1000EB8F0, &qword_1000EB8F8);
}

uint64_t sub_1000338D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100033368(a1, a2, a3, a4, &qword_1000EB918, _s14descr1000DA611V16AttributedStringV9AttributeVMa);
}

Swift::Int sub_1000338EC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  Swift::Int result;
  char *v6[2];

  v2 = *(_QWORD *)(sub_100030EE4(&qword_1000EC320) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_100040544(v3);
  v4 = (char *)v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_100033BE0(v6);
  *a1 = v3;
  return result;
}

_QWORD *sub_100033970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100030EE4(&qword_1000EB968);
  v4 = *(_QWORD *)(sub_100030EE4(&qword_1000EC320) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_100030EE4(&qword_1000EC320) - 8) + 80);
      v12 = sub_100061600(v15, (uint64_t)v8 + ((v11 + 32) & ~v11), v1, a1);
      v13 = v15[0];
      v14 = v15[1];
      swift_bridgeObjectRetain(a1);
      sub_100036138(v13, v14);
      if (v12 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100033AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ICArchiveNotesPreviewer.Note(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100033AEC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100030EE4(&qword_1000EB928);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_100034F24((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

Swift::Int sub_100033BE0(char **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  char *v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char **v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  Swift::Int v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  char *v141;
  char *v142;
  uint64_t v143;
  char **v144;
  char *v145;
  Swift::Int v146;
  uint64_t v147;
  uint64_t v148;

  v3 = sub_100030EE4(&qword_1000EC320);
  v148 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v134 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v145 = (char *)&v130 - v7;
  v8 = __chkstk_darwin(v6);
  v142 = (char *)&v130 - v9;
  __chkstk_darwin(v8);
  v141 = (char *)&v130 - v10;
  v11 = (Swift::Int)a1[1];
  result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0)
      goto LABEL_141;
    if (v11)
      return sub_10003465C(0, v11, 1, a1);
    return result;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_149;
  v144 = a1;
  v131 = result;
  v137 = v1;
  if (v11 < 2)
  {
    v17 = (char *)_swiftEmptyArrayStorage;
    v136 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80));
    v130 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      v19 = _swiftEmptyArrayStorage[2];
LABEL_107:
      if (v19 >= 2)
      {
        v122 = *v144;
        do
        {
          v123 = v19 - 2;
          if (v19 < 2)
            goto LABEL_136;
          if (!v122)
            goto LABEL_148;
          v124 = *(_QWORD *)&v17[16 * v123 + 32];
          v125 = *(_QWORD *)&v17[16 * v19 + 24];
          v126 = v137;
          sub_1000348D8((unint64_t)&v122[*(_QWORD *)(v148 + 72) * v124], (unint64_t)&v122[*(_QWORD *)(v148 + 72) * *(_QWORD *)&v17[16 * v19 + 16]], (unint64_t)&v122[*(_QWORD *)(v148 + 72) * v125], v136);
          v137 = v126;
          if (v126)
            break;
          if (v125 < v124)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v17 = sub_10003F1FC((uint64_t)v17);
          if (v123 >= *((_QWORD *)v17 + 2))
            goto LABEL_138;
          v127 = &v17[16 * v123 + 32];
          *(_QWORD *)v127 = v124;
          *((_QWORD *)v127 + 1) = v125;
          v128 = *((_QWORD *)v17 + 2);
          if (v19 > v128)
            goto LABEL_139;
          memmove(&v17[16 * v19 + 16], &v17[16 * v19 + 32], 16 * (v128 - v19));
          *((_QWORD *)v17 + 2) = v128 - 1;
          v19 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease(v17);
      v129 = v130;
      v130[2] = 0;
      return swift_bridgeObjectRelease(v129);
    }
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v148 + 80);
    v130 = (_QWORD *)v15;
    v136 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v17 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v20 = v18;
    v21 = v18 + 1;
    v135 = v18;
    if (v18 + 1 >= v11)
    {
      v32 = v18 + 1;
      v41 = v137;
      goto LABEL_58;
    }
    v22 = *v144;
    v146 = v11;
    v23 = v148;
    v24 = *(_QWORD *)(v148 + 72);
    v25 = *(void (**)(_QWORD, _QWORD, _QWORD))(v148 + 16);
    v26 = v141;
    v25(v141, &v22[v24 * v21], v3);
    v27 = &v22[v24 * v20];
    v28 = v142;
    v25(v142, v27, v3);
    v143 = sub_100036140((unint64_t *)&qword_1000EB9B0, &qword_1000EC320, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
    LODWORD(v140) = dispatch thunk of static Comparable.< infix(_:_:)(v26, v28, v3, v143);
    v29 = *(void (**)(_QWORD, _QWORD))(v23 + 8);
    v30 = v28;
    v20 = v135;
    v29(v30, v3);
    v29(v26, v3);
    v31 = v22;
    v32 = v20 + 2;
    v138 = v31;
    v147 = v24;
    if (v20 + 2 >= v146)
    {
      v41 = v137;
      v40 = v146;
      v39 = v24;
      if ((v140 & 1) == 0)
        break;
    }
    else
    {
      v132 = v17;
      v139 = v24 * v21;
      v33 = v31;
      v34 = v24 * v32;
      do
      {
        v35 = v32;
        v36 = v141;
        v25(v141, &v33[v34], v3);
        v37 = v142;
        v25(v142, &v33[v139], v3);
        v38 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v37, v3, v143);
        v29(v37, v3);
        v29(v36, v3);
        if (((v140 ^ v38) & 1) != 0)
        {
          v41 = v137;
          v17 = v132;
          v32 = v35;
          v20 = v135;
          v40 = v146;
          v39 = v147;
          if ((v140 & 1) == 0)
            goto LABEL_38;
          goto LABEL_26;
        }
        v32 = v35 + 1;
        v39 = v147;
        v33 += v147;
      }
      while (v146 != v35 + 1);
      v40 = v146;
      v32 = v146;
      v41 = v137;
      v17 = v132;
      v20 = v135;
      if ((v140 & 1) == 0)
        break;
    }
LABEL_26:
    if (v32 < v20)
      goto LABEL_142;
    if (v20 >= v32)
      break;
    v132 = v17;
    v42 = 0;
    v43 = v39 * (v32 - 1);
    v44 = v32 * v39;
    v45 = v20;
    v46 = v20 * v39;
    v47 = v144;
    v143 = v32;
    do
    {
      if (v45 != v32 + v42 - 1)
      {
        if (!v138)
          goto LABEL_147;
        v48 = v41;
        v49 = &v138[v46];
        v50 = &v138[v43];
        v140 = *(char **)(v148 + 32);
        ((void (*)(char *, char *, uint64_t))v140)(v134, &v138[v46], v3);
        if (v46 < v43 || v49 >= &v138[v44])
        {
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v3);
        }
        else if (v46 != v43)
        {
          swift_arrayInitWithTakeBackToFront(v49);
        }
        ((void (*)(char *, char *, uint64_t))v140)(v50, v134, v3);
        v41 = v48;
        v32 = v143;
        v47 = v144;
        v39 = v147;
      }
      ++v45;
      --v42;
      v43 -= v39;
      v44 -= v39;
      v46 += v39;
    }
    while (v45 < v32 + v42);
    v17 = v132;
    v20 = v135;
    v40 = v146;
    if (v32 < v146)
      goto LABEL_41;
LABEL_58:
    if (v32 < v20)
      goto LABEL_135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v137 = v41;
    v143 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v17 = sub_10003EFF4(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    v71 = *((_QWORD *)v17 + 2);
    v70 = *((_QWORD *)v17 + 3);
    v19 = v71 + 1;
    if (v71 >= v70 >> 1)
      v17 = sub_10003EFF4((char *)(v70 > 1), v71 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v19;
    v72 = v17 + 32;
    v73 = &v17[16 * v71 + 32];
    v74 = v143;
    *(_QWORD *)v73 = v20;
    *((_QWORD *)v73 + 1) = v74;
    if (v71)
    {
      while (1)
      {
        v75 = v19 - 1;
        if (v19 >= 4)
        {
          v80 = &v72[16 * v19];
          v81 = *((_QWORD *)v80 - 8);
          v82 = *((_QWORD *)v80 - 7);
          v86 = __OFSUB__(v82, v81);
          v83 = v82 - v81;
          if (v86)
            goto LABEL_124;
          v85 = *((_QWORD *)v80 - 6);
          v84 = *((_QWORD *)v80 - 5);
          v86 = __OFSUB__(v84, v85);
          v78 = v84 - v85;
          v79 = v86;
          if (v86)
            goto LABEL_125;
          v87 = v19 - 2;
          v88 = &v72[16 * v19 - 32];
          v90 = *(_QWORD *)v88;
          v89 = *((_QWORD *)v88 + 1);
          v86 = __OFSUB__(v89, v90);
          v91 = v89 - v90;
          if (v86)
            goto LABEL_127;
          v86 = __OFADD__(v78, v91);
          v92 = v78 + v91;
          if (v86)
            goto LABEL_130;
          if (v92 >= v83)
          {
            v110 = &v72[16 * v75];
            v112 = *(_QWORD *)v110;
            v111 = *((_QWORD *)v110 + 1);
            v86 = __OFSUB__(v111, v112);
            v113 = v111 - v112;
            if (v86)
              goto LABEL_134;
            v103 = v78 < v113;
            goto LABEL_95;
          }
        }
        else
        {
          if (v19 != 3)
          {
            v104 = *((_QWORD *)v17 + 4);
            v105 = *((_QWORD *)v17 + 5);
            v86 = __OFSUB__(v105, v104);
            v97 = v105 - v104;
            v98 = v86;
            goto LABEL_89;
          }
          v77 = *((_QWORD *)v17 + 4);
          v76 = *((_QWORD *)v17 + 5);
          v86 = __OFSUB__(v76, v77);
          v78 = v76 - v77;
          v79 = v86;
        }
        if ((v79 & 1) != 0)
          goto LABEL_126;
        v87 = v19 - 2;
        v93 = &v72[16 * v19 - 32];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v96 = __OFSUB__(v94, v95);
        v97 = v94 - v95;
        v98 = v96;
        if (v96)
          goto LABEL_129;
        v99 = &v72[16 * v75];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v86 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v86)
          goto LABEL_132;
        if (__OFADD__(v97, v102))
          goto LABEL_133;
        if (v97 + v102 >= v78)
        {
          v103 = v78 < v102;
LABEL_95:
          if (v103)
            v75 = v87;
          goto LABEL_97;
        }
LABEL_89:
        if ((v98 & 1) != 0)
          goto LABEL_128;
        v106 = &v72[16 * v75];
        v108 = *(_QWORD *)v106;
        v107 = *((_QWORD *)v106 + 1);
        v86 = __OFSUB__(v107, v108);
        v109 = v107 - v108;
        if (v86)
          goto LABEL_131;
        if (v109 < v97)
          goto LABEL_14;
LABEL_97:
        v114 = v75 - 1;
        if (v75 - 1 >= v19)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v144)
          goto LABEL_146;
        v115 = v17;
        v116 = &v72[16 * v114];
        v117 = *(_QWORD *)v116;
        v118 = &v72[16 * v75];
        v119 = *((_QWORD *)v118 + 1);
        v120 = v137;
        sub_1000348D8((unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * *(_QWORD *)v116], (unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * *(_QWORD *)v118], (unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * v119], v136);
        v137 = v120;
        if (v120)
        {
          v17 = v115;
          goto LABEL_118;
        }
        if (v119 < v117)
          goto LABEL_121;
        if (v75 > *((_QWORD *)v115 + 2))
          goto LABEL_122;
        *(_QWORD *)v116 = v117;
        *(_QWORD *)&v72[16 * v114 + 8] = v119;
        v121 = *((_QWORD *)v115 + 2);
        if (v75 >= v121)
          goto LABEL_123;
        v17 = v115;
        v19 = v121 - 1;
        memmove(&v72[16 * v75], v118 + 16, 16 * (v121 - 1 - v75));
        *((_QWORD *)v115 + 2) = v121 - 1;
        if (v121 <= 2)
          goto LABEL_14;
      }
    }
    v19 = 1;
LABEL_14:
    v11 = (Swift::Int)v144[1];
    v18 = v143;
    if (v143 >= v11)
      goto LABEL_107;
  }
LABEL_38:
  v47 = v144;
  if (v32 >= v40)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v32, v20))
    goto LABEL_140;
  if (v32 - v20 >= v131)
    goto LABEL_58;
  if (__OFADD__(v20, v131))
    goto LABEL_143;
  if (v20 + v131 >= v40)
    v51 = v40;
  else
    v51 = v20 + v131;
  if (v51 >= v20)
  {
    if (v32 != v51)
    {
      v132 = v17;
      v133 = v51;
      v52 = *(_QWORD *)(v148 + 72);
      v53 = *(char **)(v148 + 16);
      v137 = v41;
      v138 = v53;
      v54 = v52 * (v32 - 1);
      v139 = v52;
      v147 = v32 * v52;
      do
      {
        v56 = 0;
        v143 = v32;
        v140 = (char *)v54;
        while (1)
        {
          v146 = v20;
          v57 = *v47;
          v58 = v141;
          v59 = v47;
          v60 = (void (*)(_QWORD, _QWORD, _QWORD))v138;
          ((void (*)(char *, char *, uint64_t))v138)(v141, &(*v47)[v147 + v56], v3);
          v61 = &v57[v54 + v56];
          v62 = v142;
          v60(v142, v61, v3);
          v63 = sub_100036140((unint64_t *)&qword_1000EB9B0, &qword_1000EC320, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
          LOBYTE(v57) = dispatch thunk of static Comparable.< infix(_:_:)(v58, v62, v3, v63);
          v64 = *(void (**)(_QWORD, _QWORD))(v148 + 8);
          v64(v62, v3);
          v64(v58, v3);
          if ((v57 & 1) == 0)
            break;
          v65 = *v59;
          if (!*v59)
            goto LABEL_145;
          v66 = &v65[v147 + v56];
          v54 = (uint64_t)v140;
          v67 = &v140[(_QWORD)v65 + v56];
          v68 = *(void (**)(_QWORD, _QWORD, _QWORD))(v148 + 32);
          v68(v145, v66, v3);
          swift_arrayInitWithTakeFrontToBack(v66, v67, 1, v3);
          v68(v67, v145, v3);
          v56 -= v139;
          v20 = v146 + 1;
          v55 = v143;
          v47 = v144;
          if (v143 == v146 + 1)
            goto LABEL_51;
        }
        v55 = v143;
        v47 = v59;
        v54 = (uint64_t)v140;
LABEL_51:
        v32 = v55 + 1;
        v54 += v139;
        v147 += v139;
        v20 = v135;
      }
      while (v32 != v133);
      v32 = v133;
      v41 = v137;
      v17 = v132;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003465C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v30 = a1;
  v7 = sub_100030EE4(&qword_1000EC320);
  v38 = *(_QWORD **)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v37 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v34 = (char *)&v28 - v11;
  result = __chkstk_darwin(v10);
  v33 = (char *)&v28 - v13;
  v36 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v14 = v38[9];
    v31 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v32 = a4;
    v40 = v14 * (v36 - 1);
    v35 = v14;
    v39 = v14 * v36;
LABEL_5:
    v15 = 0;
    v16 = v30;
    while (1)
    {
      v17 = *a4;
      v18 = v33;
      v19 = v31;
      v31(v33, v39 + v15 + *a4, v7);
      v20 = v34;
      v19(v34, v40 + v15 + v17, v7);
      v21 = sub_100036140((unint64_t *)&qword_1000EB9B0, &qword_1000EC320, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
      LOBYTE(v17) = dispatch thunk of static Comparable.< infix(_:_:)(v18, v20, v7, v21);
      v22 = (void (*)(char *, uint64_t))v38[1];
      v23 = v20;
      a4 = v32;
      v22(v23, v7);
      result = ((uint64_t (*)(char *, uint64_t))v22)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v40 += v35;
        v39 += v35;
        if (++v36 == v29)
          return result;
        goto LABEL_5;
      }
      v24 = *a4;
      if (!*a4)
        break;
      v25 = v24 + v39 + v15;
      v26 = v24 + v40 + v15;
      v27 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v27(v37, v25, v7);
      swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v7);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v26, v37, v7);
      v15 -= v35;
      if (v36 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000348D8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v8 = sub_100030EE4(&qword_1000EC320);
  v9 = *(_QWORD **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v51 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v50 = (char *)&v45 - v12;
  v52 = v9[9];
  if (!v52)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v52 == -1)
    goto LABEL_62;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v52 == -1)
    goto LABEL_63;
  v14 = (uint64_t)(a2 - a1) / v52;
  v55 = a1;
  v54 = a4;
  v15 = v13 / v52;
  if (v14 >= v13 / v52)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v52;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v15, v8);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v29 = a4 + v17;
      v53 = a4 + v17;
      v55 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v31 = -v52;
        v46 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v47 = v9;
        v48 = a4;
        v49 = a1;
        do
        {
          v52 = a3 + v31;
          v32 = v50;
          v33 = v46;
          v46(v50, v29 + v31, v8);
          v34 = a2 + v31;
          v35 = v31;
          v36 = v51;
          v33(v51, v34, v8);
          v37 = sub_100036140((unint64_t *)&qword_1000EB9B0, &qword_1000EC320, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
          LOBYTE(v33) = dispatch thunk of static Comparable.< infix(_:_:)(v32, v36, v8, v37);
          v38 = (void (*)(char *, uint64_t))v9[1];
          v38(v36, v8);
          v38(v32, v8);
          if ((v33 & 1) != 0)
          {
            v31 = v35;
            v39 = v52;
            if (a3 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v34, 1, v8);
              v9 = v47;
              v40 = v48;
              v41 = v49;
            }
            else
            {
              v9 = v47;
              v40 = v48;
              v41 = v49;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v52);
            }
            v55 += v31;
          }
          else
          {
            v42 = v53;
            v43 = v53 + v35;
            v53 += v35;
            v31 = v35;
            v39 = v52;
            if (a3 < v42 || v52 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v43, 1, v8);
              v34 = a2;
              v9 = v47;
              v40 = v48;
              v41 = v49;
            }
            else
            {
              v9 = v47;
              v40 = v48;
              v41 = v49;
              if (a3 != v42)
                swift_arrayInitWithTakeBackToFront(v52);
              v34 = a2;
            }
          }
          v29 = v53;
          if (v53 <= v40)
            break;
          a2 = v34;
          a3 = v39;
        }
        while (v34 > v41);
      }
      goto LABEL_60;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v52;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v14, v8);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v49 = a4 + v16;
    v53 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v50;
        v19(v50, a2, v8);
        v22 = v51;
        v19(v51, a4, v8);
        v23 = sub_100036140((unint64_t *)&qword_1000EB9B0, &qword_1000EC320, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
        v24 = dispatch thunk of static Comparable.< infix(_:_:)(v21, v22, v8, v23);
        v25 = (void (*)(char *, uint64_t))v9[1];
        v25(v22, v8);
        v25(v21, v8);
        v26 = v55;
        if ((v24 & 1) != 0)
        {
          v27 = a2 + v52;
          if (v55 < a2 || v55 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v55, a2, 1, v8);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v55 == a2)
              v26 = a2;
            else
              swift_arrayInitWithTakeBackToFront(v55);
          }
        }
        else
        {
          v28 = v54 + v52;
          if (v55 < v54 || v55 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v55, v54, 1, v8);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v55 != v54)
              swift_arrayInitWithTakeBackToFront(v55);
          }
          v54 = v28;
          v27 = a2;
        }
        v55 = v26 + v52;
        a4 = v54;
        if (v54 >= v49)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_60:
    sub_10003F0EC(&v55, &v54, (uint64_t *)&v53);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void (*sub_100034E30(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100034EB0(v6, a2, a3);
  return sub_100034E84;
}

void sub_100034E84(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_100034EB0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_100034F1C;
  }
  __break(1u);
  return result;
}

void sub_100034F1C(id *a1)
{

}

uint64_t sub_100034F24(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100036140(&qword_1000EB940, &qword_1000EB938, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100030EE4(&qword_1000EB938);
          v13 = sub_100034E30(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100036000(0, &qword_1000EB930, CKShareParticipant_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t _s38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewerC4NoteV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;

  if ((static URL.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v4 = *(int *)(type metadata accessor for ICArchiveNotesPreviewer.Note(0) + 20);
    v5 = (_QWORD *)(a1 + v4);
    v6 = *(_QWORD *)(a1 + v4 + 8);
    v7 = (_QWORD *)(a2 + v4);
    v8 = v7[1];
    if (v6)
    {
      if (v8)
      {
        v9 = *v5 == *v7 && v6 == v8;
        if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v5, v6, *v7, v8, 0) & 1) != 0)
          return 1;
      }
    }
    else if (!v8)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1000351BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(sub_100030EE4(a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000352D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100030EE4(&qword_1000EB988);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

id sub_1000353DC(id result, uint64_t a2, char a3)
{
  id v4;

  switch(a3)
  {
    case 2:
      return (id)swift_errorRetain();
    case 1:
      return result;
    case 0:
      v4 = result;
      return (id)swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100035424(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = *(_QWORD *)(v1 - 8);
  if ((*(_BYTE *)(v2 + 82) & 2) != 0)
    return swift_release(*a1, v1);
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_100035448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EB818;
  if (!qword_1000EB818)
  {
    v1 = type metadata accessor for ICArchiveNotesPreviewer.Note(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveNotesPreviewer.Note, v1);
    atomic_store(result, (unint64_t *)&qword_1000EB818);
  }
  return result;
}

uint64_t type metadata accessor for ICArchiveNotesPreviewer()
{
  return objc_opt_self(_TtC38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewer);
}

uint64_t *initializeBufferWithCopyOfBuffer for ICArchiveNotesPreviewer.Note(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t destroy for ICArchiveNotesPreviewer.Note(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for ICArchiveNotesPreviewer.Note(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for ICArchiveNotesPreviewer.Note(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t initializeWithTake for ICArchiveNotesPreviewer.Note(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for ICArchiveNotesPreviewer.Note(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveNotesPreviewer.Note(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035744);
}

uint64_t sub_100035744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveNotesPreviewer.Note(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000357DC);
}

uint64_t sub_1000357DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_100035858(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000B3CB0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ICArchiveNotesPreviewer.Note.States(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10003590C(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_10003590C(id result, unsigned __int8 a2)
{
  if (a2 == 2)
    return (id)swift_errorRetain(result);
  if (a2 <= 1u)
    return result;
  return result;
}

void destroy for ICArchiveNotesPreviewer.Note.States(uint64_t a1)
{
  sub_100035940(*(id *)a1, *(_BYTE *)(a1 + 8));
}

void sub_100035940(id a1, unsigned __int8 a2)
{
  if (a2 == 2)
  {
    swift_errorRelease(a1);
  }
  else if (a2 <= 1u)
  {

  }
}

uint64_t assignWithCopy for ICArchiveNotesPreviewer.Note.States(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10003590C(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_100035940(v5, v6);
  return a1;
}

uint64_t initializeWithTake for ICArchiveNotesPreviewer.Note.States(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ICArchiveNotesPreviewer.Note.States(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_100035940(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveNotesPreviewer.Note.States(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveNotesPreviewer.Note.States(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100035A90(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_100035AA8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveNotesPreviewer.Note.States()
{
  return &type metadata for ICArchiveNotesPreviewer.Note.States;
}

uint64_t sub_100035AD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100030EE4(&qword_1000EB950);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100035BDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100030EE4(&qword_1000EB908);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100035CE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100035DD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100030EE4(&qword_1000EB8E0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100035EE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100036000(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_100036038(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_100036044(uint64_t a1)
{
  uint64_t v1;

  return sub_1000329F0(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100036060(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100030EE4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003609C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_1000360B4()
{
  unint64_t result;

  result = qword_1000EB9A0;
  if (!qword_1000EB9A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EB9A0);
  }
  return result;
}

uint64_t *sub_1000360F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100036138(uint64_t a1, uint64_t a2)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL, a2);
}

uint64_t sub_100036140(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100030FF0(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100036184(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aUp_1[v2 * 8];
  v4 = qword_1000B3EF0[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aUp_1[v5 * 8];
  v7 = qword_1000B3EF0[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_1000B3EF0[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_100036208(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aPhoto_1[v2];
  v4 = *(_QWORD *)&aGrayscalblackA[v2 + 24];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aPhoto_1[v5];
  v7 = *(_QWORD *)&aGrayscalblackA[v5 + 24];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aGrayscalblackA[8 * a2 + 24], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_10003628C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x4C41434F4CLL;
  else
    v2 = 0x44554F4C43;
  if ((a2 & 1) != 0)
    v3 = 0x4C41434F4CLL;
  else
    v3 = 0x44554F4C43;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE500000000000000, v3, 0xE500000000000000, 0);
  swift_bridgeObjectRelease_n(0xE500000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100036300(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aNormal_1[v2 * 8];
  v4 = qword_1000B3F78[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aNormal_1[v5 * 8];
  v7 = qword_1000B3F78[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_1000B3F78[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_100036384(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x49444E4543534544;
  else
    v3 = 0x4E49444E45435341;
  if (v2)
    v4 = 0xE900000000000047;
  else
    v4 = 0xEA0000000000474ELL;
  if ((a2 & 1) != 0)
    v5 = 0x49444E4543534544;
  else
    v5 = 0x4E49444E45435341;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000474ELL;
  else
    v6 = 0xE900000000000047;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003642C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aCreatedModifie[v2];
  v4 = *(_QWORD *)&aAt[v2];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aCreatedModifie[v5];
  v7 = *(_QWORD *)&aAt[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aAt[8 * a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_1000364B0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aPreview_1[v2 * 8];
  v4 = qword_1000B3FD8[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aPreview_1[v5 * 8];
  v7 = qword_1000B3FD8[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_1000B3FD8[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_100036534(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aNone_1[v2];
  v4 = *(_QWORD *)&aSmallGrmediumG[v2 + 48];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aNone_1[v5];
  v7 = *(_QWORD *)&aSmallGrmediumG[v5 + 48];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aSmallGrmediumG[8 * a2 + 48], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_1000365B8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x544847494CLL;
  else
    v3 = 0x544C5541464544;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x544847494CLL;
  else
    v5 = 0x544C5541464544;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100036654(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000366A0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_100036700 + 4 * byte_1000B3CE5[a2]))();
}

uint64_t sub_100036700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;

  v4 = 0x80000001000AFE20;
  if (a1 == a3 && v3 == 0x80000001000AFE20)
  {
    v5 = 1;
    v4 = v3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, 0x80000001000AFE20, 0);
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return v5 & 1;
}

void sub_100036794(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000367E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100036868 + 4 * byte_1000B3CEF[a2]))(0x4C41525554414ELL);
}

uint64_t sub_100036868(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4C41525554414ELL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x4C41525554414ELL, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

uint64_t sub_100036940(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aPurple_1[v2 * 8];
  v4 = qword_1000B4088[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aPurple_1[v5 * 8];
  v7 = qword_1000B4088[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_1000B4088[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_1000369C4(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aLeft_2[v2 * 8];
  v4 = qword_1000B40D8[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aLeft_2[v5 * 8];
  v7 = qword_1000B40D8[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_1000B40D8[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_100036A48()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000EB9B8);
  sub_10003609C(v0, (uint64_t)qword_1000EB9B8);
  return static Logger.archiving.getter();
}

uint64_t sub_100036A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  sub_1000360F8(v4, qword_1000EB9D0);
  sub_10003609C(v4, (uint64_t)qword_1000EB9D0);
  if (qword_1000EB668 != -1)
    swift_once(&qword_1000EB668, sub_100036A48);
  v5 = sub_10003609C(v0, (uint64_t)qword_1000EB9B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

uint64_t ICArchiveImporter.Configuration.retainsIdentifiers.getter(char a1)
{
  return a1 & 1;
}

uint64_t ICArchiveImporter.Configuration.retainsIdentifiers.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.creator.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveImporter.Configuration.importsRelativeTimestamps.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t ICArchiveImporter.Configuration.importsRelativeTimestamps.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*ICArchiveImporter.Configuration.importsRelativeTimestamps.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

void ICArchiveImporter.Configuration.timestampOffset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*ICArchiveImporter.Configuration.timestampOffset.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

double static ICArchiveImporter.Configuration.default.getter()
{
  ICInternalSettingsIsAlexandriaDemoModeEnabled();
  ICInternalSettingsIsAlexandriaDemoModeEnabled();
  return 0.0;
}

id ICArchiveImporter.context.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_context);
}

double ICArchiveImporter.configuration.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  id v3;
  _BYTE v5[24];

  v1 = v0 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration;
  swift_beginAccess(v0 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration, v5, 0, 0);
  v2 = *(double *)(v1 + 8);
  v3 = *(id *)(v1 + 16);
  return v2;
}

uint64_t ICArchiveImporter.fileManager.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager));
}

id ICArchiveImporter.__allocating_init(context:configuration:fileManager:)(void *a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  objc_class *v7;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a5);
  return sub_1000401F4(a1, a2 & 0x101, a3, a4, a5, v7, ObjectType, a6, a7);
}

id ICArchiveImporter.init(context:configuration:fileManager:)(void *a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  _BYTE *v7;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a5);
  return sub_1000403E0(a1, a2 & 0x101, a3, a4, a5, v7, a7, ObjectType, a6);
}

uint64_t sub_100036DDC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _BYTE v8[24];
  _QWORD aBlock[3];
  void *ObjectType;
  void (*v11)(uint64_t);
  uint64_t v12;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v2 = swift_allocObject(&unk_1000D7AA8, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16, v0);
  v11 = sub_100042474;
  v12 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006DB80;
  ObjectType = &unk_1000D7AC0;
  v3 = _Block_copy(aBlock);
  swift_release(v12, v4);
  v5 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", UIApplicationDidReceiveMemoryWarningNotification, 0, 0, v3);
  _Block_release(v3);

  ObjectType = (void *)swift_getObjectType(v5);
  aBlock[0] = v5;
  v6 = v0 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarningObserver;
  swift_beginAccess(v0 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarningObserver, v8, 33, 0);
  sub_100042494((uint64_t)aBlock, v6);
  return swift_endAccess(v8);
}

void ICArchiveImporter.init()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v1
    && (v2 = v1,
        v3 = objc_msgSend(v1, "snapshotManagedObjectContext"),
        v2,
        v3))
  {
    objc_msgSend(v0, "initWithContext:", v3);

  }
  else
  {
    __break(1u);
  }
}

id ICArchiveImporter.__allocating_init(context:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;
  __int16 IsAlexandriaDemoModeEnabled;
  int v6;
  _BYTE *v7;
  __int16 v8;
  id v9;
  uint64_t ObjectType;

  v3 = objc_allocWithZone(v1);
  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v6 = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v7 = objc_allocWithZone(v1);
  if (v6)
    v8 = 256;
  else
    v8 = 0;
  v9 = sub_10004027C(a1, v8 | IsAlexandriaDemoModeEnabled, 0, 0, v4, v7, 0.0);
  ObjectType = swift_getObjectType(v3);
  swift_deallocPartialClassInstance(v3, ObjectType, 128, 7);
  return v9;
}

id ICArchiveImporter.init(context:)(void *a1)
{
  uint64_t v1;
  objc_class *ObjectType;
  id v4;
  __int16 IsAlexandriaDemoModeEnabled;
  int v6;
  _BYTE *v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v6 = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v7 = objc_allocWithZone(ObjectType);
  if (v6)
    v8 = 256;
  else
    v8 = 0;
  v9 = sub_10004027C(a1, v8 | IsAlexandriaDemoModeEnabled, 0, 0, v4, v7, 0.0);
  v10 = swift_getObjectType(v1);
  swift_deallocPartialClassInstance(v1, v10, 128, 7);
  return v9;
}

id ICArchiveImporter.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  objc_super v5;
  _BYTE v6[32];
  _BYTE v7[24];

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = (uint64_t)&v0[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarningObserver];
  swift_beginAccess(&v0[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarningObserver], v7, 0, 0);
  sub_100031044(v2, (uint64_t)v6, &qword_1000EB6E8);
  v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  sub_100040578((uint64_t)v6, v3);

  sub_100036060((uint64_t)v6, &qword_1000EB6E8);
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t ICArchiveImporter.Errors.errorDescription.getter(uint64_t a1)
{
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v6;

  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = String._bridgeToObjectiveC()();
      v3 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, 0, 0);

      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      return v4;
    default:
      v6 = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ICArchiveImporter.Errors, &v6, &type metadata for ICArchiveImporter.Errors, &type metadata for Int);
      __break(1u);
      JUMPOUT(0x1000376C0);
  }
}

unint64_t ICCloudSyncingObject.MoveAction.Types.init(rawValue:)(unint64_t a1)
{
  return sub_100040AE4(a1);
}

unint64_t static ICArchiveImporter.Errors._nsErrorDomain.getter()
{
  return 0xD00000000000003FLL;
}

BOOL sub_100037708(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10003771C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD v6[10];

  v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_10003777C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100042154();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000377B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

unint64_t sub_100037810@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_100040AE4(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_100037840(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10003784C()
{
  uint64_t *v0;

  return ICArchiveImporter.Errors.errorDescription.getter(*v0);
}

uint64_t sub_100037860(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100042154();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_100037888(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100042154();
  return _BridgedNSError._code.getter(a1, v2);
}

uint64_t sub_1000378B8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100042154();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t ICArchiveImporter.errors.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_errors);
  swift_beginAccess(v0 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_errors, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t ICArchiveImporter.objects(forArchiveAt:)(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSURL *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_signpost_type_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint8_t *v42;
  os_signpost_id_t v43;
  os_signpost_type_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  char *v55;
  uint64_t v56;
  os_signpost_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  void (*v77)(char *, uint64_t *, uint64_t);
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint8_t *v87;
  os_signpost_id_t v88;
  void (*v89)(char *, uint64_t, uint64_t, uint64_t);
  id v90;
  char *v91;
  uint64_t v92;
  NSObject *v93;
  char *v94;
  uint64_t v95;
  os_signpost_type_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  os_signpost_type_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint8_t *v122;
  os_signpost_id_t v123;
  uint64_t result;
  char *v125;
  char *v126;
  uint64_t v127;
  uint8_t *v128;
  os_signpost_id_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);

  v2 = type metadata accessor for OSSignpostError(0);
  v3 = *(_QWORD *)(v2 - 8);
  v139 = v2;
  v140 = v3;
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v135 = (char *)&v130 - v8;
  __chkstk_darwin(v7);
  v133 = (char *)&v130 - v9;
  v10 = sub_100030EE4(&qword_1000EB998);
  __chkstk_darwin(v10);
  v152 = (uint64_t *)((char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v145 = sub_100030EE4(&qword_1000EC320);
  v157 = *(_QWORD *)(v145 - 8);
  v12 = __chkstk_darwin(v145);
  v150 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v143 = (char *)&v130 - v14;
  v15 = type metadata accessor for URL(0);
  v154 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v151 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v17);
  v153 = (char *)&v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for OSSignpostID(0);
  v19 = *(_QWORD *)(v156 - 8);
  v20 = __chkstk_darwin(v156);
  v149 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v136 = (char *)&v130 - v23;
  v24 = __chkstk_darwin(v22);
  v134 = (char *)&v130 - v25;
  v26 = __chkstk_darwin(v24);
  v144 = (char *)&v130 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v130 - v28;
  if (qword_1000EB670 != -1)
    swift_once(&qword_1000EB670, sub_100036A90);
  v30 = type metadata accessor for OSSignposter(0);
  v31 = sub_10003609C(v30, (uint64_t)qword_1000EB9D0);
  v155 = a1;
  URL._bridgeToObjectiveC()(v32);
  v34 = v33;
  v35 = ((uint64_t (*)(void))OSSignposter.logHandle.getter)();
  v36 = OSSignpostID.init(log:object:)(v35, v34);
  v37 = OSSignposter.logHandle.getter(v36);
  v38 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v137 = v31;
    v39 = v156;
    v148 = v6;
    v40 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v41 = v144;
    v40(v144, v29, v156);
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    v43 = OSSignpostID.rawValue.getter();
    v44 = v38;
    v45 = v41;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, v44, v43, "Objects for Archive", "", v42, 2u);
    swift_slowDealloc(v42, -1, -1);

    v46 = v39;
    v31 = v137;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v41, v46);
    v47 = v40;
    v6 = v148;
  }
  else
  {

    v47 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v45 = v144;
  }
  v141 = v19;
  v142 = v29;
  v138 = v47;
  v47(v45, v29, v156);
  v48 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  v49 = OSSignpostIntervalState.init(id:isOpen:)(v45, 1);
  v50 = *(_QWORD *)&v146[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v146[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager]);
  v52 = v158;
  v53 = dispatch thunk of ICFileManaging.subdirectoriesOfDirectory(at:)(v155, ObjectType, v50);
  v158 = v52;
  if (v52)
  {
    v54 = OSSignposter.logHandle.getter(v53);
    v55 = v149;
    v56 = OSSignpostIntervalState.signpostID.getter();
    v57 = static os_signpost_type_t.end.getter(v56);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v58 = swift_retain(v49);
      checkForErrorAndConsumeState(state:)(v58);
      swift_release(v49, v59);
      v60 = v139;
      v61 = v140;
      v62 = v49;
      if ((*(unsigned int (**)(char *, uint64_t))(v140 + 88))(v6, v139) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v63 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v61 + 8))(v6, v60);
        v63 = "";
      }
      v86 = v156;
      v138(v45, v55, v156);
      v87 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v87 = 0;
      v88 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, v57, v88, "Objects for Archive", v63, v87, 2u);
      swift_slowDealloc(v87, -1, -1);

      v83 = *(void (**)(char *, uint64_t))(v141 + 8);
      v83(v55, v86);
      v83(v45, v86);
      v85 = v142;
      v49 = v62;
      goto LABEL_26;
    }

    v83 = *(void (**)(char *, uint64_t))(v141 + 8);
    v83(v55, v156);
LABEL_23:
    v85 = v142;
LABEL_26:
    swift_release(v49, v84);
    v83(v85, v156);
    return (uint64_t)v83;
  }
  v64 = v53;
  v65 = *(_QWORD *)(v53 + 16);
  v132 = v49;
  v131 = v53;
  if (v65)
  {
    v137 = v31;
    v66 = v53 + ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80));
    v147 = *(_QWORD *)(v154 + 72);
    v149 = *(char **)(v154 + 16);
    v148 = v146;
    swift_bridgeObjectRetain(v64);
    v155 = (char *)_swiftEmptyArrayStorage;
    v67 = v145;
    v68 = v153;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v149)(v68, v66, v15);
      v69 = v154;
      v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v154 + 56);
      v70(v68, 0, 1, v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v68, 1, v15) == 1)
      {
        v49 = v132;
        v90 = v146;
        goto LABEL_33;
      }
      v71 = v15;
      v72 = (uint64_t)v151;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v151, v68, v71);
      v73 = v152;
      v74 = v158;
      sub_100038670(v72, v152);
      v158 = v74;
      if (v74)
        break;
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v72, v71);
      v75 = v157;
      v15 = v71;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v157 + 48))(v73, 1, v67) == 1)
      {
        sub_100036060((uint64_t)v73, &qword_1000EB998);
        v68 = v153;
      }
      else
      {
        v76 = v73;
        v77 = *(void (**)(char *, uint64_t *, uint64_t))(v75 + 32);
        v78 = v143;
        v77(v143, v76, v67);
        v77(v150, (uint64_t *)v78, v67);
        v79 = (unint64_t)v155;
        if ((swift_isUniquelyReferenced_nonNull_native(v155) & 1) == 0)
          v79 = sub_100032EF0(0, *(_QWORD *)(v79 + 16) + 1, 1, v79);
        v81 = *(_QWORD *)(v79 + 16);
        v80 = *(_QWORD *)(v79 + 24);
        v155 = (char *)v79;
        v68 = v153;
        if (v81 >= v80 >> 1)
          v155 = (char *)sub_100032EF0(v80 > 1, v81 + 1, 1, (unint64_t)v155);
        v82 = v155;
        *((_QWORD *)v155 + 2) = v81 + 1;
        v67 = v145;
        v77(&v82[((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(_QWORD *)(v157 + 72) * v81], (uint64_t *)v150, v145);
      }
      v66 += v147;
      if (!--v65)
      {
        v49 = v132;
        v90 = v146;
        v70(v68, 1, 1, v71);
        goto LABEL_33;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v72, v71);

    swift_bridgeObjectRelease(v155);
    v92 = swift_bridgeObjectRelease_n(v131, 2);
    v93 = OSSignposter.logHandle.getter(v92);
    v94 = v134;
    v49 = v132;
    v95 = OSSignpostIntervalState.signpostID.getter();
    v96 = static os_signpost_type_t.end.getter(v95);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v97 = swift_retain(v49);
      v98 = v133;
      checkForErrorAndConsumeState(state:)(v97);
      swift_release(v49, v99);
      v100 = v139;
      v101 = v140;
      if ((*(unsigned int (**)(char *, uint64_t))(v140 + 88))(v98, v139) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v102 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v101 + 8))(v98, v100);
        v102 = "";
      }
      v125 = v144;
      v126 = v134;
      v127 = v156;
      v138(v144, v134, v156);
      v128 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v128 = 0;
      v129 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v93, v96, v129, "Objects for Archive", v102, v128, 2u);
      swift_slowDealloc(v128, -1, -1);

      v83 = *(void (**)(char *, uint64_t))(v141 + 8);
      v83(v126, v127);
      v83(v125, v127);
      v85 = v142;
      goto LABEL_26;
    }

    v83 = *(void (**)(char *, uint64_t))(v141 + 8);
    v83(v94, v156);
    goto LABEL_23;
  }
  v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v154 + 56);
  v90 = v146;
  v91 = v146;
  swift_bridgeObjectRetain(v64);
  v155 = (char *)_swiftEmptyArrayStorage;
  v89(v153, 1, 1, v15);
LABEL_33:
  v103 = v158;
  swift_bridgeObjectRelease_n(v131, 2);

  v104 = v155;
  v159 = (void (*)(char *, uint64_t))v155;
  swift_bridgeObjectRetain(v155);
  sub_10003DDCC(&v159);
  v106 = v144;
  v107 = v140;
  v158 = v103;
  v108 = v136;
  if (!v103)
  {
    v109 = swift_bridgeObjectRelease(v104);
    v83 = v159;
    v110 = OSSignposter.logHandle.getter(v109);
    v111 = OSSignpostIntervalState.signpostID.getter();
    v112 = static os_signpost_type_t.end.getter(v111);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v113 = swift_retain(v49);
      v114 = v135;
      checkForErrorAndConsumeState(state:)(v113);
      swift_release(v49, v115);
      v116 = v139;
      if ((*(unsigned int (**)(char *, uint64_t))(v107 + 88))(v114, v139) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v117 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v107 + 8))(v114, v116);
        v117 = "";
      }
      v120 = v136;
      v121 = v156;
      v138(v106, v136, v156);
      v122 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v122 = 0;
      v123 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v110, v112, v123, "Objects for Archive", v117, v122, 2u);
      swift_slowDealloc(v122, -1, -1);

      v118 = *(void (**)(char *, uint64_t))(v141 + 8);
      v118(v120, v121);
      v118(v106, v121);
      v49 = v132;
    }
    else
    {

      v118 = *(void (**)(char *, uint64_t))(v141 + 8);
      v118(v108, v156);
    }
    swift_release(v49, v119);
    v118(v142, v156);
    return (uint64_t)v83;
  }
  result = swift_release(v159, v105);
  __break(1u);
  return result;
}

uint64_t sub_100038670@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  id v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  char *v69;
  uint8_t *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  BOOL v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint64_t v145;
  uint8_t *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD v151[4];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  void (*v166)(char *, unint64_t, uint64_t);
  char *v167;
  void (*v168)(char *, uint64_t);
  char *v169;
  _QWORD *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;

  v158 = a2;
  v4 = sub_100030EE4(&qword_1000EB998);
  __chkstk_darwin(v4);
  v171 = (char *)v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100030EE4(&qword_1000EC320);
  v173 = *(_QWORD *)(v164 - 8);
  v6 = __chkstk_darwin(v164);
  v169 = (char *)v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v160 = (char *)v151 - v8;
  v9 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v9);
  v172 = (char *)v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v155 = (char *)v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v156 = (char *)v151 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v151 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)v151 - v21;
  v23 = URL.deletingPathExtension()(v20);
  v157 = URL.lastPathComponent.getter(v23);
  v25 = v24;
  v26 = (void (*)(char *, uint64_t))v12[1];
  v26(v22, v11);
  v159 = v2;
  v28 = *(_QWORD *)&v2[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager];
  v27 = *(_QWORD *)&v159[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v159[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager]);
  v30 = v170;
  v31 = dispatch thunk of ICFileManaging.subdirectoriesOfDirectory(at:)(a1, ObjectType, v27);
  if (v30)
    return swift_bridgeObjectRelease(v25);
  v167 = v19;
  v151[1] = ObjectType;
  v151[2] = v28;
  v151[3] = v27;
  v168 = v26;
  v153 = v25;
  v170 = v12;
  v152 = a1;
  v161 = v11;
  v33 = *(_QWORD *)(v31 + 16);
  v154 = v31;
  if (v33)
  {
    v34 = v170;
    v35 = v31 + ((*((unsigned __int8 *)v34 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v34 + 80));
    v163 = v170[9];
    v166 = (void (*)(char *, unint64_t, uint64_t))v170[2];
    v36 = v31;
    v165 = v159;
    swift_bridgeObjectRetain(v36);
    v37 = (char *)_swiftEmptyArrayStorage;
    v38 = v164;
    v39 = v161;
    v40 = v172;
    do
    {
      v166(v40, v35, v39);
      v162 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v34[7];
      v162(v40, 0, 1, v39);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v34[6])(v40, 1, v39) == 1)
      {
        v54 = v152;
        v53 = v158;
        v50 = v159;
        goto LABEL_18;
      }
      v41 = (unint64_t)v37;
      v42 = v167;
      ((void (*)(char *, char *, uint64_t))v34[4])(v167, v40, v39);
      v43 = (uint64_t)v171;
      sub_100038670(v42);
      v168(v42, v39);
      v44 = v173;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48))(v43, 1, v38) == 1)
      {
        sub_100036060(v43, &qword_1000EB998);
        v40 = v172;
        v37 = (char *)v41;
      }
      else
      {
        v45 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
        v46 = v160;
        v45(v160, v43, v38);
        v45(v169, (uint64_t)v46, v38);
        v37 = (char *)v41;
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
          v37 = (char *)sub_100032EF0(0, *(_QWORD *)(v41 + 16) + 1, 1, v41);
        v40 = v172;
        v48 = *((_QWORD *)v37 + 2);
        v47 = *((_QWORD *)v37 + 3);
        if (v48 >= v47 >> 1)
          v37 = (char *)sub_100032EF0(v47 > 1, v48 + 1, 1, (unint64_t)v37);
        *((_QWORD *)v37 + 2) = v48 + 1;
        v38 = v164;
        v45(&v37[((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80))+ *(_QWORD *)(v173 + 72) * v48], (uint64_t)v169, v164);
        v39 = v161;
      }
      v35 += v163;
      --v33;
      v34 = v170;
    }
    while (v33);
    v53 = v158;
    v50 = v159;
    v49 = v162;
  }
  else
  {
    v49 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v170[7];
    v50 = v159;
    v51 = v31;
    v52 = v159;
    swift_bridgeObjectRetain(v51);
    v37 = (char *)_swiftEmptyArrayStorage;
    v53 = v158;
    v39 = v161;
    v40 = v172;
  }
  v49(v40, 1, 1, v39);
  v54 = v152;
LABEL_18:
  v55 = v53;
  swift_bridgeObjectRelease_n(v154, 2);

  v176 = v37;
  swift_bridgeObjectRetain(v37);
  sub_10003DDCC(&v176);
  v56 = v157;
  v57 = swift_bridgeObjectRelease(v37);
  v58 = v176;
  v60 = URL.pathExtension.getter(v57);
  v61 = v59;
  if (v60 == 0x6372617365746F6ELL && v59 == 0xEC00000065766968
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6372617365746F6ELL, 0xEC00000065766968, v60, v59, 0) & 1) != 0)
  {
    swift_release(v58, v59);
    swift_bridgeObjectRelease(v153);
    swift_bridgeObjectRelease(v61);
    if (qword_1000EB668 != -1)
      swift_once(&qword_1000EB668, sub_100036A48);
    v62 = type metadata accessor for Logger(0);
    sub_10003609C(v62, (uint64_t)qword_1000EB9B8);
    v63 = v156;
    v64 = v54;
    v65 = v161;
    v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v170[2])(v156, v64, v161);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = v63;
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = (char *)swift_slowAlloc(32, -1);
      v176 = v71;
      v172 = 0;
      *(_DWORD *)v70 = 136315138;
      v72 = URL.pathExtension.getter(v71);
      v74 = v73;
      v174 = sub_10005F12C(v72, v73, (uint64_t *)&v176);
      v75 = v158;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, &v175, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease(v74);
      v168(v69, v65);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Archive object type not supported inside archive â€” skipping {pathExtension: %s}", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);
    }
    else
    {
      v75 = v55;
      v168(v63, v65);
    }

    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v173 + 56))(v75, 1, 1, v164);
  }
  if (v60 == 0x746E756F636361 && v61 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F636361, 0xE700000000000000, v60, v61, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v61);
    v76 = sub_100030EE4(&qword_1000EBB20);
    v77 = swift_allocBox();
    v79 = v78;
    v80 = (uint64_t *)(v78 + *(int *)(v76 + 48));
    v81 = *(int *)(v76 + 64);
    ((void (*)(uint64_t, uint64_t, uint64_t))v170[2])(v78, v54, v161);
    v82 = v153;
    *v80 = v56;
    v80[1] = v82;
    *(_QWORD *)(v79 + v81) = v58;
    *v55 = v77;
    v83 = (unsigned int *)&enum case for ICObjectReferences.account<A>(_:);
LABEL_31:
    v84 = v173;
    v85 = v164;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v173 + 104))(v55, *v83, v164);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v55, 0, 1, v85);
  }
  if (v60 == 0x7265646C6F66 && v61 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7265646C6F66, 0xE600000000000000, v60, v61, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v61);
    v86 = sub_100030EE4(&qword_1000EBB20);
    v87 = swift_allocBox();
    v89 = v88;
    v90 = (uint64_t *)(v88 + *(int *)(v86 + 48));
    v91 = *(int *)(v86 + 64);
    ((void (*)(uint64_t, uint64_t, uint64_t))v170[2])(v88, v54, v161);
    v92 = v153;
    *v90 = v56;
    v90[1] = v92;
    *(_QWORD *)(v89 + v91) = v58;
    *v55 = v87;
    v83 = (unsigned int *)&enum case for ICObjectReferences.folder<A>(_:);
    goto LABEL_31;
  }
  if (v60 == 1702129518 && v61 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1702129518, 0xE400000000000000, v60, v61, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v61);
    v93 = sub_100030EE4(&qword_1000EBB10);
    v94 = swift_allocBox();
    v96 = v95;
    v97 = (uint64_t *)(v95 + *(int *)(v93 + 48));
    v98 = *(int *)(v93 + 64);
    ((void (*)(uint64_t, uint64_t, uint64_t))v170[2])(v95, v54, v161);
    v99 = v153;
    *v97 = v56;
    v97[1] = v99;
    *(_QWORD *)(v96 + v98) = v58;
    *v55 = v94;
    v83 = (unsigned int *)&enum case for ICObjectReferences.note<A>(_:);
    goto LABEL_31;
  }
  if (v60 == 0x656D686361747461 && v61 == 0xEA0000000000746ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000746ELL);
LABEL_44:
    v171 = v58;
    v172 = 0;
    v176 = (char *)_swiftEmptyArrayStorage;
    sub_10003F268(0, 5, 0);
    v102 = v176;
    v104 = *((_QWORD *)v176 + 2);
    v103 = *((_QWORD *)v176 + 3);
    v105 = v104 + 1;
    if (v104 >= v103 >> 1)
    {
      sub_10003F268(v103 > 1, v104 + 1, 1);
      v102 = v176;
    }
    *((_QWORD *)v102 + 2) = v105;
    v106 = &v102[16 * v104];
    strcpy(v106 + 32, "notesarchive");
    v106[45] = unk_1000B412D;
    *((_WORD *)v106 + 23) = unk_1000B412E;
    v176 = v102;
    v107 = *((_QWORD *)v102 + 3);
    v108 = v104 + 2;
    if (v105 >= v107 >> 1)
    {
      sub_10003F268(v107 > 1, v104 + 2, 1);
      v102 = v176;
    }
    *((_QWORD *)v102 + 2) = v108;
    v109 = &v102[16 * v105];
    strcpy(v109 + 32, "account");
    *((_QWORD *)v109 + 5) = 0xE700000000000000;
    v176 = v102;
    v110 = *((_QWORD *)v102 + 3);
    v111 = v104 + 3;
    if (v108 >= v110 >> 1)
    {
      sub_10003F268(v110 > 1, v104 + 3, 1);
      v102 = v176;
    }
    *((_QWORD *)v102 + 2) = v111;
    v112 = &v102[16 * v108];
    *((_QWORD *)v112 + 4) = *(_QWORD *)"folder";
    *((_QWORD *)v112 + 5) = 0xE600000000000000;
    v176 = v102;
    v113 = *((_QWORD *)v102 + 3);
    v114 = v104 + 4;
    if (v111 >= v113 >> 1)
    {
      sub_10003F268(v113 > 1, v104 + 4, 1);
      v102 = v176;
    }
    *((_QWORD *)v102 + 2) = v114;
    v115 = &v102[16 * v111];
    *((_QWORD *)v115 + 4) = *(_QWORD *)"note";
    *((_QWORD *)v115 + 5) = 0xE400000000000000;
    v176 = v102;
    v116 = *((_QWORD *)v102 + 3);
    if (v114 >= v116 >> 1)
    {
      sub_10003F268(v116 > 1, v104 + 5, 1);
      v102 = v176;
    }
    *((_QWORD *)v102 + 2) = v104 + 5;
    v117 = &v102[16 * v114];
    *((_QWORD *)v117 + 4) = *(_QWORD *)"attachmehive";
    *((_QWORD *)v117 + 5) = 0xEA0000000000746ELL;
    v118 = v172;
    v119 = dispatch thunk of ICFileManaging.contentsOfDirectory(at:)(v54);
    v120 = v153;
    v121 = v171;
    if (v118)
    {
      swift_bridgeObjectRelease(v153);
      swift_release(v121, v122);
      return swift_release(v102, v123);
    }
    else
    {
      v124 = sub_100040618(v119, v102);
      v172 = 0;
      swift_release(v102, v125);
      v126 = *(_QWORD *)(v124 + 16);
      swift_bridgeObjectRelease(v124);
      v127 = v126 > 1;
      v128 = (int *)sub_100030EE4(&qword_1000EBB00);
      v129 = swift_allocBox();
      v131 = v130;
      v132 = (uint64_t *)(v130 + v128[12]);
      v133 = v128[16];
      v134 = v128[20];
      ((void (*)(uint64_t, uint64_t, uint64_t))v170[2])(v130, v54, v161);
      *v132 = v157;
      v132[1] = v120;
      *(_BYTE *)(v131 + v133) = v127;
      *(_QWORD *)(v131 + v134) = v171;
      v135 = v158;
      *v158 = v129;
      v136 = v173;
      v137 = v164;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v173 + 104))(v135, enum case for ICObjectReferences.attachment<A>(_:), v164);
      return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v135, 0, 1, v137);
    }
  }
  v100 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D686361747461, 0xEA0000000000746ELL, v60, v61, 0);
  swift_bridgeObjectRelease(v61);
  if ((v100 & 1) != 0)
    goto LABEL_44;
  swift_release(v58, v101);
  swift_bridgeObjectRelease(v153);
  if (qword_1000EB668 != -1)
    swift_once(&qword_1000EB668, sub_100036A48);
  v138 = type metadata accessor for Logger(0);
  sub_10003609C(v138, (uint64_t)qword_1000EB9B8);
  v139 = v155;
  v140 = v54;
  v141 = v161;
  v142 = ((uint64_t (*)(char *, uint64_t, uint64_t))v170[2])(v155, v140, v161);
  v143 = Logger.logObject.getter(v142);
  v144 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v143, v144))
  {
    v145 = swift_slowAlloc(12, -1);
    v172 = 0;
    v146 = (uint8_t *)v145;
    v147 = (char *)swift_slowAlloc(32, -1);
    v176 = v147;
    *(_DWORD *)v146 = 136315138;
    v148 = URL.pathExtension.getter(v147);
    v150 = v149;
    v174 = sub_10005F12C(v148, v149, (uint64_t *)&v176);
    v55 = v158;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, &v175, v146 + 4, v146 + 12);
    swift_bridgeObjectRelease(v150);
    v168(v139, v141);
    _os_log_impl((void *)&_mh_execute_header, v143, v144, "Unknown object type â€” skipping {pathExtension: %s}", v146, 0xCu);
    swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v147, -1, -1);
    swift_slowDealloc(v146, -1, -1);
  }
  else
  {
    v168(v139, v141);
  }

  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v173 + 56))(v55, 1, 1, v164);
}

_QWORD *sub_1000395E8(uint64_t a1, void *a2, void *a3, char *a4, void *a5)
{
  _QWORD *v8;

  v8 = sub_100041720(a1, (uint64_t)a2, a3, a4, (uint64_t)a5);

  return v8;
}

uint64_t ICArchiveImporter.importArchive(at:intoNoteContainerWithId:progress:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[5] = a3;
  v4[3] = a2;
  v4[4] = a1;
  return NSManagedObjectContext.performAndWait<A>(_:)(sub_100040AF4, v4, (char *)&type metadata for () + 8);
}

void sub_100039690(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  uint64_t v4;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v7 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_context), "ic_existingObjectWithID:", a2);
  if (!v7)
    goto LABEL_10;
  v8 = v7;
  v9 = objc_opt_self(ICNoteContainer);
  v10 = swift_dynamicCastObjCClass(v8, v9);
  if (!v10)
  {

LABEL_10:
    __break(1u);
    return;
  }
  v11 = (void *)v10;
  v12 = ICArchiveImporter.objects(forArchiveAt:)(a3);
  if (!v4)
  {
    v13 = v12;
    if (a4)
      v14 = a4;
    else
      v14 = objc_msgSend(objc_allocWithZone((Class)NSProgress), "init");
    v15 = a4;
    ICArchiveImporter.importObjects(_:fromArchiveAt:into:progress:)(v13, (uint64_t)a3, v11, v14);

    swift_bridgeObjectRelease(v13);
  }

}

uint64_t ICArchiveImporter.importObjects(_:fromArchiveAt:into:progress:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  NSURL *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_signpost_type_t v77;
  char v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint8_t *v81;
  os_signpost_id_t v82;
  void (*v83)(char *, uint64_t);
  void (*v84)(char *, char *, uint64_t);
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  char *v123;
  uint64_t v124;
  os_signpost_type_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t ObjectType;
  char *v134;
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint8_t *v140;
  os_signpost_id_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t result;
  _QWORD v148[14];
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  _QWORD *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  void (*v165)(char *, char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD v185[4];
  char v186[8];

  v5 = v4;
  v172 = a4;
  v173 = a1;
  v176 = a2;
  v7 = type metadata accessor for OSSignpostError(0);
  v167 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v148[1] = (char *)v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v148[5] = (char *)v148 - v11;
  v12 = __chkstk_darwin(v10);
  v148[6] = (char *)v148 - v13;
  v14 = __chkstk_darwin(v12);
  v148[7] = (char *)v148 - v15;
  v16 = __chkstk_darwin(v14);
  v155 = (char *)v148 - v17;
  v18 = __chkstk_darwin(v16);
  v157 = (char *)v148 - v19;
  v20 = __chkstk_darwin(v18);
  v160 = (char *)v148 - v21;
  v22 = __chkstk_darwin(v20);
  v148[11] = (char *)v148 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)v148 - v24;
  v26 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v26);
  v148[13] = (char *)v148 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for Date(0);
  v152 = *(_QWORD *)(v149 - 8);
  v28 = __chkstk_darwin(v149);
  v148[10] = (char *)v148 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v148[9] = (char *)v148 - v30;
  v159 = type metadata accessor for ICArchiveModel(0);
  __chkstk_darwin(v159);
  v32 = (_QWORD *)((char *)v148 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v163 = type metadata accessor for URL(0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v164 = (char *)v148 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100030EE4(&qword_1000EC320);
  v35 = *(_QWORD *)(v34 - 8);
  v182 = v34;
  v183 = v35;
  __chkstk_darwin(v34);
  v181 = (char *)v148 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for OSSignpostID(0);
  v178 = *(_QWORD *)(v37 - 8);
  v38 = __chkstk_darwin(v37);
  v148[4] = (char *)v148 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v148[8] = (char *)v148 - v41;
  v42 = __chkstk_darwin(v40);
  v151 = (char *)v148 - v43;
  v44 = __chkstk_darwin(v42);
  v156 = (char *)v148 - v45;
  v46 = __chkstk_darwin(v44);
  v161 = (char *)v148 - v47;
  v48 = __chkstk_darwin(v46);
  v168 = (char *)v148 - v49;
  v50 = __chkstk_darwin(v48);
  v150 = (char *)v148 - v51;
  v52 = __chkstk_darwin(v50);
  v148[3] = (char *)v148 - v53;
  v54 = __chkstk_darwin(v52);
  v148[12] = (char *)v148 - v55;
  v56 = __chkstk_darwin(v54);
  v58 = (char *)v148 - v57;
  __chkstk_darwin(v56);
  v60 = (char *)v148 - v59;
  v61 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_isImporting;
  v180 = v5;
  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_isImporting) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v158 = v32;
    v166 = v7;
    v177 = (uint64_t)a3;
    v62 = objc_msgSend(a3, "managedObjectContext", v25);
    if (!v62)
      __break(1u);
    v63 = v62;
    v64 = v180;
    v65 = *(void **)(v180 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_context);
    sub_100036000(0, &qword_1000EBA20, NSManagedObjectContext_ptr);
    v66 = v65;
    v67 = v63;
    v68 = static NSObject.== infix(_:_:)();

    if ((v68 & 1) != 0)
    {
      v148[2] = v66;
      *(_BYTE *)(v64 + v61) = 1;
      if (qword_1000EB670 == -1)
        goto LABEL_5;
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_43:
  swift_once(&qword_1000EB670, sub_100036A90);
LABEL_5:
  v69 = type metadata accessor for OSSignposter(0);
  v70 = sub_10003609C(v69, (uint64_t)qword_1000EB9D0);
  URL._bridgeToObjectiveC()(v71);
  v73 = v72;
  v74 = OSSignposter.logHandle.getter(v72);
  v75 = OSSignpostID.init(log:object:)(v74, v73);
  v169 = v70;
  v76 = OSSignposter.logHandle.getter(v75);
  v77 = static os_signpost_type_t.begin.getter();
  v78 = OS_os_log.signpostsEnabled.getter();
  v179 = v58;
  if ((v78 & 1) != 0)
  {
    v79 = v178;
    v80 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
    v80(v179, v60, v37);
    v81 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v81 = 0;
    v82 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v76, v77, v82, "Import Objects from Archive", "", v81, 2u);
    swift_slowDealloc(v81, -1, -1);

    v83 = *(void (**)(char *, uint64_t))(v79 + 8);
    v58 = v179;
    v83(v179, v37);
    v84 = v80;
  }
  else
  {

    v84 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
  }
  v85 = (void *)v177;
  v170 = v60;
  v175 = v37;
  v165 = v84;
  v84(v58, v60, v37);
  v86 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
  v177 = OSSignpostIntervalState.init(id:isOpen:)(v58, 1);
  v87 = v180;
  v88 = (uint64_t *)(v180 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_errors);
  swift_beginAccess(v180 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_errors, v186, 1, 0);
  v89 = *v88;
  *v88 = (uint64_t)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v89);
  v185[3] = sub_100036000(0, &qword_1000EBA28, ICNoteContainer_ptr);
  v185[0] = v85;
  v90 = v85;
  v91 = (void *)sub_100032348((uint64_t)v185);
  v93 = v92;
  sub_100035424(v185);
  v94 = v87 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration;
  swift_beginAccess(v87 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration, v185, 1, 0);
  v95 = *(void **)(v94 + 16);
  *(_QWORD *)(v94 + 16) = v91;
  *(_QWORD *)(v94 + 24) = v93;
  v154 = v94;
  v174 = v91;

  v96 = v173;
  v97 = *(_QWORD *)(v173 + 16);
  v171 = v61;
  v153 = v93;
  if (v97)
  {
    v184 = _swiftEmptyArrayStorage;
    sub_10003F2BC(0, v97, 0);
    v98 = v96 + ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80));
    v99 = *(_QWORD *)(v183 + 72);
    v100 = *(void (**)(char *, uint64_t, uint64_t))(v183 + 16);
    v101 = v184;
    do
    {
      v102 = v181;
      v103 = v182;
      v100(v181, v98, v182);
      v104 = ICObjectReferences.recursiveNoteCount.getter(v103);
      (*(void (**)(char *, uint64_t))(v183 + 8))(v102, v103);
      if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
      {
        sub_10003F2BC(0, v101[2] + 1, 1);
        v101 = v184;
      }
      v106 = v101[2];
      v105 = v101[3];
      v107 = v106 + 1;
      if (v106 >= v105 >> 1)
      {
        sub_10003F2BC(v105 > 1, v106 + 1, 1);
        v101 = v184;
      }
      v101[2] = v107;
      v101[v106 + 4] = v104;
      v98 += v99;
      --v97;
    }
    while (v97);
  }
  else
  {
    v101 = _swiftEmptyArrayStorage;
    v107 = _swiftEmptyArrayStorage[2];
    if (!v107)
    {
      v110 = 0;
      v108 = v177;
      goto LABEL_21;
    }
  }
  v108 = v177;
  v109 = 0;
  v110 = 0;
  do
  {
    v111 = v101[v109 + 4];
    v112 = __OFADD__(v110, v111);
    v110 = (_QWORD *)((char *)v110 + v111);
    if (v112)
    {
      __break(1u);
      JUMPOUT(0x10003A794);
    }
    ++v109;
  }
  while (v107 != v109);
  v58 = v179;
LABEL_21:
  swift_bridgeObjectRelease(v101);
  v113 = v175;
  if (qword_1000EB668 != -1)
    swift_once(&qword_1000EB668, sub_100036A48);
  v114 = type metadata accessor for Logger(0);
  v115 = sub_10003609C(v114, (uint64_t)qword_1000EB9B8);
  v116 = Logger.logObject.getter(v115);
  v117 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v116, v117))
  {
    v118 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v118 = 134217984;
    v184 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v118 + 4, v118 + 12);
    _os_log_impl((void *)&_mh_execute_header, v116, v117, "Importing archiveâ€¦ {noteCount: %ld}", v118, 0xCu);
    swift_slowDealloc(v118, -1, -1);
  }

  v119 = v172;
  NSProgress.throwIfCancelled()();
  if (!v120)
  {
    objc_msgSend(v119, "setTotalUnitCount:", v110);
    v132 = *(_QWORD *)(v180 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)(v180
                                               + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager));
    if (qword_1000EB638 != -1)
      swift_once(&qword_1000EB638, sub_10002F85C);
    v134 = v164;
    URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
    v142 = dispatch thunk of ICFileManaging.contents(of:)(v134, ObjectType, v132);
    v144 = v143;
    (*(void (**)(char *, uint64_t))(v162 + 8))(v134, v163);
    if (qword_1000EB658 != -1)
      swift_once(&qword_1000EB658, sub_10002FA88);
    v145 = sub_100042114(&qword_1000EBA30, type metadata accessor for ICArchiveModel, (uint64_t)&unk_1000B4C38);
    v146 = v158;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v158, v159, v142, v144, v159, v145);
    v183 = 0;
    v182 = v144;
    __asm { BR              X13 }
  }

  v122 = OSSignposter.logHandle.getter(v121);
  v123 = v168;
  v124 = OSSignpostIntervalState.signpostID.getter();
  v125 = static os_signpost_type_t.end.getter(v124);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v183 = v120;
    v126 = swift_retain(v108);
    v127 = v160;
    checkForErrorAndConsumeState(state:)(v126);
    swift_release(v108, v128);
    v129 = v167;
    v130 = v166;
    if ((*(unsigned int (**)(char *, uint64_t))(v167 + 88))(v127, v166) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v131 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v129 + 8))(v127, v130);
      v131 = "";
    }
    v138 = v180;
    v139 = v168;
    v165(v58, v168, v113);
    v140 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v140 = 0;
    v141 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v122, v125, v141, "Import Objects from Archive", v131, v140, 2u);
    swift_slowDealloc(v140, -1, -1);

    v135 = *(void (**)(char *, uint64_t))(v178 + 8);
    v135(v139, v113);
    v135(v58, v113);
    v108 = v177;
    v137 = v138;
  }
  else
  {

    v135 = *(void (**)(char *, uint64_t))(v178 + 8);
    v135(v123, v113);
    v137 = v180;
  }
  swift_release(v108, v136);
  result = ((uint64_t (*)(char *, uint64_t))v135)(v170, v113);
  *(_BYTE *)(v137 + v171) = 0;
  return result;
}

_QWORD *sub_10003B590(uint64_t a1, void *a2, char *a3, void *a4)
{
  void *v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;

  result = sub_1000395E8(a1, v4, a2, a3, a4);
  v7 = result;
  if (!v5)
  {
    v8 = result[2];
    if (v8)
    {
      swift_bridgeObjectRetain(result);
      v9 = _swiftEmptyArrayStorage;
      v22 = v7;
      v10 = v7 + 7;
      do
      {
        v12 = *((_QWORD *)v10 - 3);
        if ((*v10 & 1) != 0)
        {
          v23 = (void *)*((_QWORD *)v10 - 3);
          v11 = sub_100030EE4(&qword_1000EBAA0);
          swift_willThrowTypedImpl(&v23, v11, &protocol self-conformance witness table for Error);
        }
        else
        {
          v14 = *((_QWORD *)v10 - 2);
          v13 = (void *)*((_QWORD *)v10 - 1);
          swift_bridgeObjectRetain(v14);
          v15 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_100033010(0, v9[2] + 1, 1, v9);
          v17 = v9[2];
          v16 = v9[3];
          if (v17 >= v16 >> 1)
            v9 = sub_100033010((_QWORD *)(v16 > 1), v17 + 1, 1, v9);
          v9[2] = v17 + 1;
          v18 = &v9[3 * v17];
          v18[4] = v12;
          v18[5] = v14;
          v18[6] = v15;
        }
        v10 += 32;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease_n(v22, 2);
    }
    else
    {
      swift_bridgeObjectRelease(result);
      v9 = _swiftEmptyArrayStorage;
    }
    v19 = sub_10003CAA0((uint64_t)v9);
    swift_bridgeObjectRelease(v9);
    v20 = v19[2];
    if (v20)
    {
      sub_100030EE4(&qword_1000EBAE0);
      v21 = (void *)static _DictionaryStorage.allocate(capacity:)(v20);
    }
    else
    {
      v21 = &_swiftEmptyDictionarySingleton;
    }
    v23 = v21;
    sub_100040B54((uint64_t)v19, 1, &v23);
    swift_bridgeObjectRelease(v19);
    return v23;
  }
  return result;
}

uint64_t sub_10003B7B0(uint64_t a1, void *a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t ObjectType;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  char *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v95;
  uint64_t result;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  double v105;
  uint64_t v106;
  void *v107;
  int v108;
  int v109;
  id v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  char *v116;
  void *v117;
  id v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  _QWORD *v138;
  _QWORD *v139;
  void (*v140)(uint64_t, uint64_t);
  _QWORD *v141;
  void *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD v151[4];
  char v152[8];
  char v153;
  char v154;
  _QWORD v155[3];
  char v156[8];
  id v157;
  _OWORD v158[4];

  v143 = a3;
  v142 = a2;
  v150 = a1;
  v136 = type metadata accessor for ICAttachmentArchiveModel(0);
  __chkstk_darwin(v136);
  v139 = (uint64_t *)((char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = type metadata accessor for ICNoteArchiveModel(0);
  __chkstk_darwin(v135);
  v138 = (uint64_t *)((char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v140 = (void (*)(uint64_t, uint64_t))type metadata accessor for ICFolderArchiveModel(0);
  __chkstk_darwin(v140);
  v141 = (uint64_t *)((char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = sub_100030EE4(&qword_1000EC320);
  v146 = *(_QWORD *)(v148 - 8);
  v8 = __chkstk_darwin(v148);
  v145 = (char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v127 - v10;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v127 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v127 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v127 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v127 - v26;
  NSProgress.throwIfCancelled()();
  if (v28)
    return v12;
  v133 = v27;
  v134 = 0;
  v130 = v11;
  v149 = v13;
  v131 = v22;
  v128 = v19;
  v129 = v16;
  v144 = v12;
  v137 = (void *)a4;
  v29 = *(_QWORD *)(v147 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager + 8);
  v30 = v25;
  ObjectType = swift_getObjectType(*(_QWORD *)(v147
                                             + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager));
  ICObjectReferences.identifier.getter(v148);
  if (qword_1000EB638 != -1)
    swift_once(&qword_1000EB638, sub_10002F85C);
  v32 = v133;
  URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
  v33 = *(void (**)(char *, uint64_t))(v149 + 8);
  v132 = (uint64_t)v30;
  v34 = v144;
  v33(v30, v144);
  v35 = v134;
  v36 = dispatch thunk of ICFileManaging.contents(of:)(v32, ObjectType, v29);
  v12 = v35;
  if (v35)
  {
    v33(v32, v34);
    v143 = 0;
    v38 = v137;
    v39 = v148;
    v40 = (void (*)(uint64_t, uint64_t))v33;
    v41 = v145;
    *(_QWORD *)&v151[0] = v35;
    swift_errorRetain(v35);
    v61 = sub_100030EE4(&qword_1000EBAA0);
    v62 = sub_100036000(0, &qword_1000EC310, NSError_ptr);
    if (!swift_dynamicCast(&v157, v151, v61, v62, 0))
      goto LABEL_26;
    v63 = v157;
    v64 = objc_msgSend(v157, "domain");
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v67 = v66;

    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    v12 = v68;
    if (v65 == v69 && v67 == v68)
    {
      swift_bridgeObjectRelease_n(v67, 2);
      v70 = v63;
    }
    else
    {
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v67, v69, v68, 0);
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(v12);
      v70 = v63;
      if ((v71 & 1) == 0)
      {
LABEL_25:

        v39 = v148;
        v12 = v35;
LABEL_26:
        swift_errorRelease(*(_QWORD *)&v151[0]);
        v73 = v146;
        if (qword_1000EB668 != -1)
          swift_once(&qword_1000EB668, sub_100036A48);
        v74 = type metadata accessor for Logger(0);
        sub_10003609C(v74, (uint64_t)qword_1000EB9B8);
        (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v41, v150, v39);
        swift_errorRetain(v12);
        v75 = swift_errorRetain(v12);
        v76 = v73;
        v77 = Logger.logObject.getter(v75);
        v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          v79 = swift_slowAlloc(22, -1);
          v149 = v12;
          v80 = v79;
          v81 = (void *)swift_slowAlloc(64, -1);
          v140 = v40;
          v142 = v81;
          *(_QWORD *)&v151[0] = v81;
          *(_DWORD *)v80 = 136315394;
          swift_getErrorValue(v149, v156, v155);
          v82 = Error.localizedDescription.getter(v155[1], v155[2]);
          v84 = v83;
          v157 = (id)sub_10005F12C(v82, v83, (uint64_t *)v151);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v80 + 4, v80 + 12);
          swift_bridgeObjectRelease(v84);
          swift_errorRelease(v149);
          swift_errorRelease(v149);
          *(_WORD *)(v80 + 12) = 2080;
          v85 = v39;
          v86 = v132;
          ICObjectReferences.identifier.getter(v85);
          v87 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v88 = dispatch thunk of CustomStringConvertible.description.getter(v144, v87);
          v90 = v89;
          v140(v86, v144);
          v157 = (id)sub_10005F12C(v88, v90, (uint64_t *)v151);
          v34 = v144;
          v38 = v137;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v80 + 14, v80 + 22);
          swift_bridgeObjectRelease(v90);
          (*(void (**)(char *, uint64_t))(v146 + 8))(v145, v85);
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Cannot import model {error: %s, containerID: %s}", (uint8_t *)v80, 0x16u);
          v91 = v142;
          swift_arrayDestroy(v142, 2, (char *)&type metadata for Any + 8);
          v40 = v140;
          swift_slowDealloc(v91, -1, -1);
          v92 = v80;
          v12 = v149;
          swift_slowDealloc(v92, -1, -1);

        }
        else
        {
          swift_errorRelease(v12);
          swift_errorRelease(v12);
          (*(void (**)(char *, uint64_t))(v76 + 8))(v41, v39);

          v85 = v39;
          v86 = v132;
        }
        ICObjectReferences.identifier.getter(v85);
        v93 = (_QWORD *)(v147 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_errors);
        swift_beginAccess(v147 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_errors, v151, 33, 0);
        swift_errorRetain(v12);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v93);
        v157 = (id)*v93;
        *v93 = 0x8000000000000000;
        sub_1000605CC(v12, v86, isUniquelyReferenced_nonNull_native);
        v95 = *v93;
        *v93 = v157;
        swift_bridgeObjectRelease(v95);
        v40(v86, v34);
        swift_endAccess(v151);
        objc_msgSend(v38, "setCompletedUnitCount:", objc_msgSend(v38, "totalUnitCount"));
        return v12;
      }
    }
    if (objc_msgSend(v70, "code") == (id)3072)
    {
      v72 = swift_errorRelease(v35);
      swift_willThrow(v72);
      swift_errorRelease(*(_QWORD *)&v151[0]);
      return v12;
    }
    goto LABEL_25;
  }
  v42 = v37;
  v127 = v36;
  v33(v32, v34);
  v43 = v146;
  v44 = v130;
  v45 = v148;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v146 + 16))(v130, v150, v148);
  v46 = (*(uint64_t (**)(_QWORD *, uint64_t))(v43 + 88))(v44, v45);
  v47 = v137;
  v134 = v42;
  if (v46 == enum case for ICObjectReferences.account<A>(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v43 + 96))(v44, v45);
    v48 = (_QWORD *)*v44;
    v49 = sub_100030EE4(&qword_1000EBB20);
    v50 = swift_projectBox(v48);
    v141 = *(_QWORD **)(v50 + *(int *)(v49 + 64));
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v131, v50, v34);
    if (qword_1000EB658 != -1)
      swift_once(&qword_1000EB658, sub_10002FA88);
    v51 = sub_10004225C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v151, &type metadata for ICAccountArchiveModel, v127, v134, &type metadata for ICAccountArchiveModel, v51);
    v158[0] = v151[0];
    v158[1] = v151[1];
    v158[2] = v151[2];
    v158[3] = v151[3];
    v12 = sub_10003CC14((uint64_t)v158, (uint64_t)v141, v60, v142, (uint64_t)v143, (uint64_t)v137);
    v33(v131, v34);
    sub_100040B10(v127, v134);
    sub_1000422A0(v158);
    swift_release(v48, v111);
    return v12;
  }
  if (v46 == enum case for ICObjectReferences.folder<A>(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v43 + 96))(v44, v45);
    v52 = (_QWORD *)*v44;
    v53 = sub_100030EE4(&qword_1000EBB20);
    v149 = (uint64_t)v52;
    v139 = *(_QWORD **)(swift_projectBox(v52) + *(int *)(v53 + 64));
    if (qword_1000EB658 != -1)
      swift_once(&qword_1000EB658, sub_10002FA88);
    v54 = sub_100042114(&qword_1000EBB28, type metadata accessor for ICFolderArchiveModel, (uint64_t)&unk_1000B846C);
    v55 = v141;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v141, v140, v127, v134, v140, v54);
    v140 = (void (*)(uint64_t, uint64_t))v33;
    v102 = (unsigned __int8 *)(v147
                             + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration);
    swift_beginAccess(v147 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration, v152, 0, 0);
    v103 = *v102;
    v104 = v102[1];
    v105 = *((double *)v102 + 1);
    v107 = (void *)*((_QWORD *)v102 + 2);
    v106 = *((_QWORD *)v102 + 3);
    if (v104)
      v108 = 256;
    else
      v108 = 0;
    v109 = v108 | v103;
    v110 = v107;
    v117 = sub_100098208((uint64_t)v142, (uint64_t)v143, v109, (uint64_t)v107, v106, v105);

    v118 = v117;
    v121 = sub_10003B590(v139, v118, &off_1000DA730, v137);

    sub_10003D824(v121, ICFolder_ptr, (void (*)(unint64_t, uint64_t))sub_100059888);
    v123 = v122;
    swift_bridgeObjectRelease(v121);
    v124 = sub_10009852C(v118, v123);
    swift_bridgeObjectRelease(v123);

    v125 = sub_1000986F4((uint64_t)v118);
    swift_bridgeObjectRelease(v125);
    v12 = v55[1];
    swift_bridgeObjectRetain(v55[2]);
    sub_100040B10(v127, v134);
    sub_100042220((uint64_t)v55, type metadata accessor for ICFolderArchiveModel);
    swift_release(v149, v126);
    return v12;
  }
  if (v46 == enum case for ICObjectReferences.note<A>(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v43 + 96))(v44, v45);
    v56 = (_QWORD *)*v44;
    v57 = sub_100030EE4(&qword_1000EBB10);
    v141 = v56;
    v58 = swift_projectBox(v56);
    v140 = *(void (**)(uint64_t, uint64_t))(v58 + *(int *)(v57 + 64));
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v128, v58, v34);
    if (qword_1000EB658 != -1)
      swift_once(&qword_1000EB658, sub_10002FA88);
    v59 = sub_100042114(&qword_1000EBB18, type metadata accessor for ICNoteArchiveModel, (uint64_t)&unk_1000B42CC);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v138, v135, v127, v134, v135, v59);
    v112 = v138;
    v114 = sub_10003CF2C((uint64_t)v138, (uint64_t)v140, v113, (uint64_t)v142, v143, v47);
    v143 = 0;
    v12 = (uint64_t)v114;
    sub_100040B10(v127, v134);
    sub_100042220((uint64_t)v112, type metadata accessor for ICNoteArchiveModel);
    v119 = &v153;
LABEL_41:
    v33(*((char **)v119 - 32), v34);
    swift_release(v141, v120);
    return v12;
  }
  if (v46 == enum case for ICObjectReferences.attachment<A>(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v43 + 96))(v44, v45);
    v97 = (_QWORD *)*v44;
    v98 = sub_100030EE4(&qword_1000EBB00);
    v141 = v97;
    v99 = swift_projectBox(v97);
    v140 = *(void (**)(uint64_t, uint64_t))(v99 + *(int *)(v98 + 80));
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v129, v99, v34);
    v100 = v136;
    if (qword_1000EB658 != -1)
      swift_once(&qword_1000EB658, sub_10002FA88);
    v101 = sub_100042114(&qword_1000EBB08, type metadata accessor for ICAttachmentArchiveModel, (uint64_t)&unk_1000B577C);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v139, v100, v127, v134, v100, v101);
    v115 = v139;
    v116 = sub_10003D4A8((uint64_t)v139, v140, (int64_t)v129, (char *)v142, v143, v47);
    v143 = 0;
    v12 = (uint64_t)v116;
    sub_100040B10(v127, v134);
    sub_100042220((uint64_t)v115, type metadata accessor for ICAttachmentArchiveModel);
    v119 = &v154;
    goto LABEL_41;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v45, v45);
  __break(1u);
  return result;
}

_QWORD *sub_10003CAA0(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  void **v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v15;
  _QWORD v16[3];
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_10003F284(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (void **)(a1 + 48);
    do
    {
      v5 = (uint64_t)*(v4 - 1);
      v6 = *v4;
      v16[0] = *(v4 - 2);
      v16[1] = v5;
      v16[2] = v6;
      swift_bridgeObjectRetain_n(v5, 2);
      v7 = v6;
      v8 = sub_100030EE4(&qword_1000EB950);
      v9 = sub_100030EE4(&qword_1000EBAE8);
      swift_dynamicCast(&v17, v16, v8, v9, 7);
      v10 = v17;
      v15 = v18;

      swift_bridgeObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10003F284(0, v2[2] + 1, 1);
        v2 = v19;
      }
      v12 = v2[2];
      v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_10003F284(v11 > 1, v12 + 1, 1);
        v2 = v19;
      }
      v2[2] = v12 + 1;
      v13 = &v2[3 * v12];
      v13[4] = v10;
      *(_OWORD *)(v13 + 5) = v15;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10003CC14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v7;
  char *v8;
  double *v12;
  double v13;
  uint64_t v14;
  void *v15;
  __int16 v16;
  __int16 v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  char *v42;
  char v45[24];
  uint64_t v46;
  uint64_t v47;

  v8 = v6;
  v12 = (double *)&v8[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration];
  swift_beginAccess(&v8[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration], v45, 0, 0);
  v13 = v12[1];
  v15 = (void *)*((_QWORD *)v12 + 2);
  v14 = *((_QWORD *)v12 + 3);
  if (*((_BYTE *)v12 + 1))
    v16 = 256;
  else
    v16 = 0;
  v17 = v16 | *(unsigned __int8 *)v12;
  v18 = v15;
  v19 = v14;
  v20 = a1;
  v21 = sub_100054C8C(a4, a5, v17, (uint64_t)v15, v19, v13);
  if (v7)
  {

  }
  else
  {
    v23 = v21;

    v24 = objc_opt_self(ICAccount);
    v25 = swift_dynamicCastObjCClass(v23, v24);
    if (v25)
    {
      v26 = (void *)v25;
      v27 = v23;
      v32 = sub_10003B590(a2, v26, &off_1000DA6F8, a6);
      sub_10003D824(v32, ICFolder_ptr, (void (*)(unint64_t, uint64_t))sub_100059888);
      v34 = v33;
      swift_bridgeObjectRelease(v32);
      v39 = sub_100054E7C(v26, v34);
      swift_bridgeObjectRelease(v34);

      sub_1000422F0(a1 + 48, (uint64_t)&v46);
      sub_1000422F0((uint64_t)&v46, (uint64_t)&v47);
      v40 = v47;
      if (v47)
      {
        v41 = v27;
        v42 = v8;
        sub_100042338(&v46);
        sub_100040E14(v40, v26, (uint64_t)v42);

        sub_100042360(&v46);
      }
      else
      {

      }
    }
    else
    {
      v28 = objc_opt_self(ICFolder);
      v29 = swift_dynamicCastObjCClass(v23, v28);
      if (v29)
      {
        v30 = (void *)v29;
        v31 = v23;
        v35 = sub_10003B590(a2, v30, &off_1000DA730, a6);
        sub_10003D824(v35, ICFolder_ptr, (void (*)(unint64_t, uint64_t))sub_100059888);
        v37 = v36;
        swift_bridgeObjectRelease(v35);
        v38 = sub_100054E7C(v30, v37);

        swift_bridgeObjectRelease(v37);
      }
    }
    v7 = *(_QWORD *)(v20 + 8);
    swift_bridgeObjectRetain(*(_QWORD *)(v20 + 16));
  }
  return v7;
}

char *sub_10003CF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, void *a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *isa;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *result;
  double v31;
  void *v32;
  void (*v33)(char *, uint64_t);
  int v34;
  uint64_t v35;
  int v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  void *v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  id v63;
  void (*v64)(char *, uint64_t, _QWORD *);
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;

  v63 = a6;
  v7 = v6;
  v60 = a4;
  v61 = a5;
  isa = (_QWORD *)sub_100030EE4(&qword_1000EC320);
  v11 = *(isa - 1);
  __chkstk_darwin(isa);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(char ***)(a2 + 16);
  v57 = a2;
  if (v14)
  {
    v58 = v6;
    v59 = a1;
    v67 = (unsigned __int8 *)_swiftEmptyArrayStorage;
    sub_10003F2BC(0, (int64_t)v14, 0);
    v15 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v16 = *(_QWORD *)(v11 + 72);
    v64 = *(void (**)(char *, uint64_t, _QWORD *))(v11 + 16);
    v65 = v16;
    v17 = v67;
    v66 = v11;
    do
    {
      v64(v13, v15, isa);
      a1 = ICObjectReferences.recursiveAttachmentCount.getter(isa);
      (*(void (**)(char *, _QWORD *))(v11 + 8))(v13, isa);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      {
        sub_10003F2BC(0, *((_QWORD *)v17 + 2) + 1, 1);
        v17 = v67;
      }
      v19 = *((_QWORD *)v17 + 2);
      v18 = *((_QWORD *)v17 + 3);
      v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        sub_10003F2BC(v18 > 1, v19 + 1, 1);
        v17 = v67;
      }
      *((_QWORD *)v17 + 2) = v20;
      *(_QWORD *)&v17[8 * v19 + 32] = a1;
      v11 = v66;
      v15 += v65;
      v14 = (char **)((char *)v14 - 1);
    }
    while (v14);
    v7 = v58;
  }
  else
  {
    v17 = (unsigned __int8 *)_swiftEmptyArrayStorage;
    v20 = _swiftEmptyArrayStorage[2];
    if (!v20)
      goto LABEL_31;
    v59 = a1;
  }
  v21 = 0;
  v22 = 0;
  do
  {
    v23 = *(_QWORD *)&v17[8 * v21 + 32];
    v24 = __OFADD__(v22, v23);
    v22 = (_QWORD *)((char *)v22 + v23);
    if (v24)
    {
      __break(1u);
      goto LABEL_38;
    }
    ++v21;
  }
  while (v20 != v21);
  a1 = v59;
  while (1)
  {
    swift_bridgeObjectRelease(v17);
    if (qword_1000EB668 != -1)
      swift_once(&qword_1000EB668, sub_100036A48);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10003609C(v25, (uint64_t)qword_1000EB9B8);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v29 = 134217984;
      v67 = (unsigned __int8 *)v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 4, v29 + 12);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Importing noteâ€¦ {attachmentCount: %ld}", v29, 0xCu);
      swift_slowDealloc(v29, -1, -1);
    }

    result = (char *)v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      __break(1u);
      goto LABEL_41;
    }
    isa = NSProgress.addingChild(totalUnitCount:pendingUnitCount:)((Swift::Int64)result, 1).super.isa;
    v17 = (unsigned __int8 *)(v7
                            + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration);
    swift_beginAccess(v7 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration, &v67, 0, 0);
    v31 = *((double *)v17 + 1);
    v32 = (void *)*((_QWORD *)v17 + 2);
    v33 = (void (*)(char *, uint64_t))*((_QWORD *)v17 + 3);
    if (v17[1])
      v34 = 256;
    else
      v34 = 0;
    v35 = v7;
    v36 = v34 | *v17;
    v37 = v32;
    v38 = v62;
    v39 = (char *)sub_1000424F0(v60, v61, v36, (uint64_t)v32, v33, v31);
    v7 = v38;
    if (v38)
    {

      v39 = (char *)objc_msgSend(isa, "completedUnitCount");
      v40 = v39 + 1;
      if (!__OFADD__(v39, 1))
        goto LABEL_36;
      __break(1u);
    }
    v41 = v39;

    v42 = v41;
    v43 = sub_10003B590(v57, v42, &off_1000DA768, isa);
    if (!v38)
      break;

    v44 = (char *)objc_msgSend(isa, "completedUnitCount");
    v40 = v44 + 1;
    if (!__OFADD__(v44, 1))
      goto LABEL_36;
    __break(1u);
LABEL_31:
    v22 = 0;
  }
  v45 = v43;
  v58 = v35;

  sub_10003D824(v45, ICAttachment_ptr, (void (*)(unint64_t, uint64_t))sub_100059BCC);
  v47 = v46;
  swift_bridgeObjectRelease(v45);
  v48 = *((double *)v17 + 1);
  v49 = (void *)*((_QWORD *)v17 + 2);
  v50 = *((_QWORD *)v17 + 3);
  if (v17[1])
    v51 = 256;
  else
    v51 = 0;
  v52 = v51 | *v17;
  v53 = v49;
  v54 = sub_100043540(v42, v47, v52, (uint64_t)v49, v50, v48);

  swift_bridgeObjectRelease(v47);
  v55 = sub_1000439F0((uint64_t)v42);
  swift_bridgeObjectRelease(v55);
  v14 = &selRef_accessibilityHint;
  sub_10003DB6C((char)objc_msgSend(v63, "completedUnitCount"));
LABEL_38:
  v17 = *(unsigned __int8 **)(a1 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  result = (char *)objc_msgSend(isa, v14[223]);
  v40 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_41:
    __break(1u);
  }
  else
  {
LABEL_36:
    objc_msgSend(isa, "setCompletedUnitCount:", v40);

    return (char *)v17;
  }
  return result;
}

char *sub_10003D4A8(uint64_t a1, void *a2, int64_t a3, char *a4, char *a5, void *a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 *v11;
  double v12;
  void *v13;
  int *v14;
  int v15;
  int v16;
  id v17;
  int v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  NSURL *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  double v41;
  void *v42;
  uint64_t v43;
  int v44;
  int v45;
  id v46;
  void *v47;
  char *result;
  void *v49;
  uint64_t v50;
  int64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  id v58;
  char v59[24];

  v57 = a5;
  v54 = a6;
  v55 = a1;
  v56 = a4;
  v51 = a3;
  v52 = a2;
  v7 = (_QWORD *)type metadata accessor for URL(0);
  v8 = *(v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v6;
  v11 = (unsigned __int8 *)(v6
                          + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration);
  swift_beginAccess(v6 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration, v59, 0, 0);
  v12 = *((double *)v11 + 1);
  v13 = (void *)*((_QWORD *)v11 + 2);
  v14 = (int *)*((_QWORD *)v11 + 3);
  if (v11[1])
    v15 = 256;
  else
    v15 = 0;
  v16 = v15 | *v11;
  v17 = v13;
  v18 = v16;
  v19 = v55;
  v20 = v58;
  v21 = sub_1000628CC((uint64_t)v56, v57, v18, (uint64_t)v13, v14, v12);
  if (v20)
  {

    v22 = v54;
    v21 = (char *)objc_msgSend(v54, "completedUnitCount");
    v23 = v21 + 1;
    if (!__OFADD__(v21, 1))
      goto LABEL_21;
    __break(1u);
  }
  v24 = v21;
  v57 = v10;
  v58 = v7;

  v25 = v24;
  v26 = v53;
  v22 = v54;
  v27 = (char *)sub_10003B590(v52, v25, &off_1000DA7A0, v54);
  if (v20)
  {

    v27 = (char *)objc_msgSend(v22, "completedUnitCount");
    v23 = v27 + 1;
    if (!__OFADD__(v27, 1))
      goto LABEL_21;
    __break(1u);
  }
  v28 = (uint64_t)v27;

  sub_10003D824(v28, ICAttachment_ptr, (void (*)(unint64_t, uint64_t))sub_100059BCC);
  v30 = v29;
  v52 = v20;
  swift_bridgeObjectRelease(v28);
  v31 = *(_QWORD *)(v19 + 88);
  v56 = v30;
  if (v31)
  {
    v32 = v57;
    URL.appendingPathComponent(_:isDirectory:)(*(_QWORD *)(v19 + 80), v31, 0);
    URL._bridgeToObjectiveC()(v33);
    v35 = v34;
    v36 = objc_msgSend(v25, "addMediaWithURL:", v34);

    (*(void (**)(char *, id))(v8 + 8))(v32, v58);
  }
  v37 = v19;
  v38 = v19 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 88);
  if ((*(_BYTE *)(v38 + 16) & 1) == 0)

  v39 = *(char **)(v26 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager);
  v40 = *(char **)(v26 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager + 8);
  v41 = *((double *)v11 + 1);
  v42 = (void *)*((_QWORD *)v11 + 2);
  v43 = *((_QWORD *)v11 + 3);
  if (v11[1])
    v44 = 256;
  else
    v44 = 0;
  v45 = v44 | *v11;
  v58 = v42;
  v46 = v52;
  v10 = v56;
  sub_100062F3C(v25, v51, v56, v39, v40, v45, (uint64_t)v42, v43, v41);
  if (v46)
  {

    swift_bridgeObjectRelease(v10);
    result = (char *)objc_msgSend(v22, "completedUnitCount");
    v23 = result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_21:
      objc_msgSend(v22, "setCompletedUnitCount:", v23);
      return v10;
    }
    __break(1u);
  }
  else
  {
    v49 = v47;

    swift_bridgeObjectRelease(v10);
    v10 = *(char **)(v37 + 8);
    swift_bridgeObjectRetain(*(_QWORD *)(v37 + 16));
    result = (char *)objc_msgSend(v22, "completedUnitCount");
    v23 = result + 1;
    if (!__OFADD__(result, 1))
      goto LABEL_21;
  }
  __break(1u);
  return result;
}

void sub_10003D824(uint64_t a1, _QWORD *a2, void (*a3)(unint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;
  id v27;
  Swift::Int v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  int64_t v43;
  _QWORD v44[9];
  _QWORD *v45;

  v6 = a1 + 64;
  v5 = *(_QWORD *)(a1 + 64);
  v41 = &_swiftEmptyDictionarySingleton;
  v45 = &_swiftEmptyDictionarySingleton;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v43 = (unint64_t)(63 - v7) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v40 = v6;
  if (!v9)
    goto LABEL_8;
LABEL_5:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v12 = v11 | (v10 << 6);
  while (1)
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v12);
    v17 = objc_opt_self(*a2);
    v18 = swift_dynamicCastObjCClass(v16, v17);
    if (v18)
    {
      v23 = v18;
      v24 = v41[2];
      if (v41[3] <= v24)
      {
        v42 = v24 + 1;
        v27 = v16;
        swift_bridgeObjectRetain(v15);
        a3(v42, 1);
        v26 = v45;
      }
      else
      {
        v25 = v16;
        swift_bridgeObjectRetain(v15);
        v26 = v41;
      }
      v41 = v26;
      Hasher.init(_seed:)(v44, v26[5]);
      String.hash(into:)(v44, v14, v15);
      v28 = Hasher._finalize()();
      v29 = (char *)(v41 + 8);
      v30 = -1 << *((_BYTE *)v41 + 32);
      v31 = v28 & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~v41[(v31 >> 6) + 8]) == 0)
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v30) >> 6;
        v6 = v40;
        while (++v32 != v35 || (v34 & 1) == 0)
        {
          v36 = v32 == v35;
          if (v32 == v35)
            v32 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)&v29[8 * v32];
          if (v37 != -1)
          {
            v33 = __clz(__rbit64(~v37)) + (v32 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      v33 = __clz(__rbit64((-1 << v31) & ~v41[(v31 >> 6) + 8])) | v31 & 0x7FFFFFFFFFFFFFC0;
      v6 = v40;
LABEL_37:
      *(_QWORD *)&v29[(v33 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v33;
      v38 = (_QWORD *)(v41[6] + 16 * v33);
      *v38 = v14;
      v38[1] = v15;
      *(_QWORD *)(v41[7] + 8 * v33) = v23;
      ++v41[2];

      if (v9)
        goto LABEL_5;
    }
    else if (v9)
    {
      goto LABEL_5;
    }
LABEL_8:
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v19 >= v43)
      goto LABEL_39;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    v21 = v10 + 1;
    if (!v20)
    {
      v21 = v10 + 2;
      if (v10 + 2 >= v43)
        goto LABEL_39;
      v20 = *(_QWORD *)(v6 + 8 * v21);
      if (!v20)
      {
        v21 = v10 + 3;
        if (v10 + 3 >= v43)
          goto LABEL_39;
        v20 = *(_QWORD *)(v6 + 8 * v21);
        if (!v20)
        {
          v21 = v10 + 4;
          if (v10 + 4 >= v43)
            goto LABEL_39;
          v20 = *(_QWORD *)(v6 + 8 * v21);
          if (!v20)
            break;
        }
      }
    }
LABEL_23:
    v9 = (v20 - 1) & v20;
    v12 = __clz(__rbit64(v20)) + (v21 << 6);
    v10 = v21;
  }
  v22 = v10 + 5;
  if (v10 + 5 >= v43)
  {
LABEL_39:
    sub_100036138(a1, v6);
    return;
  }
  v20 = *(_QWORD *)(v6 + 8 * v22);
  if (v20)
  {
    v21 = v10 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v21 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v21 >= v43)
      goto LABEL_39;
    v20 = *(_QWORD *)(v6 + 8 * v21);
    ++v22;
    if (v20)
      goto LABEL_23;
  }
LABEL_42:
  __break(1u);
}

void sub_10003DB6C(char a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  id v15;
  char *v16;
  id v17;
  id v18;
  id v19;

  v2 = v1;
  v3 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarning;
  if ((v1[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarning] & 1) != 0
    || (a1 & 0x1F) == 0)
  {
    if (qword_1000EB668 != -1)
      swift_once(&qword_1000EB668, sub_100036A48);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10003609C(v4, (uint64_t)qword_1000EB9B8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Saving batch of imported notes and resetting inserted objectsâ€¦", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(void **)&v2[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_context];
    v10 = objc_msgSend(v9, "insertedObjects");
    v11 = sub_100036000(0, &qword_1000EBB40, NSManagedObject_ptr);
    v12 = sub_100042388();
    v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v11, v12);

    v19 = 0;
    v14 = objc_msgSend(v9, "save:", &v19);
    v15 = v19;
    if (v14)
    {
      v16 = v2;
      v17 = v15;
      sub_100041440(v13, (uint64_t)v16);
      swift_bridgeObjectRelease(v13);

      v2[v3] = 0;
    }
    else
    {
      v18 = v19;
      swift_bridgeObjectRelease(v13);
      _convertNSErrorToError(_:)(v15);

      swift_willThrow();
    }
  }
}

void sub_10003DD74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *Strong;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  Strong = (_BYTE *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    Strong[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarning] = 1;

  }
}

Swift::Int sub_10003DDCC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_100030EE4(&qword_1000EC320) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_100040544(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10003DE50(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_10003DE50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  Swift::Int v34;
  Swift::Int v35;
  Swift::Int v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  Swift::Int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  Swift::Int v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  unint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  _QWORD *v134;
  _QWORD *v135;
  Swift::Int v136;
  char *v137;
  Swift::Int v138;
  char *v139;
  int64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t, uint64_t);
  char *v146;
  char *v147;
  _QWORD *v148;
  int64_t v149;
  char *v150;
  Swift::Int v151;
  int64_t v152;
  uint64_t v153;

  v3 = sub_100030EE4(&qword_1000EC320);
  v153 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v139 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v150 = (char *)&v135 - v7;
  v8 = __chkstk_darwin(v6);
  v147 = (char *)&v135 - v9;
  __chkstk_darwin(v8);
  v146 = (char *)&v135 - v10;
  v11 = a1[1];
  result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0)
      goto LABEL_143;
    if (v11)
      return sub_10003E86C(0, v11, 1, a1);
    return result;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_151;
  v136 = result;
  v142 = v1;
  if (v11 < 2)
  {
    v17 = _swiftEmptyArrayStorage;
    v141 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    if (v11 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
      v19 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      v135 = v17;
      if (v20 >= 2)
      {
        v125 = *a1;
        do
        {
          v126 = v20 - 2;
          if (v20 < 2)
            goto LABEL_138;
          if (!v125)
            goto LABEL_150;
          v118 = v19;
          v127 = v19 + 32;
          v128 = *(_QWORD *)&v19[16 * v126 + 32];
          v129 = *(_QWORD *)&v19[16 * v20 + 24];
          v130 = v142;
          sub_10003EAD0(v125 + *(_QWORD *)(v153 + 72) * v128, v125 + *(_QWORD *)(v153 + 72) * *(_QWORD *)&v127[16 * v20 - 16], v125 + *(_QWORD *)(v153 + 72) * v129, v141);
          v142 = v130;
          if (v130)
            goto LABEL_117;
          if (v129 < v128)
            goto LABEL_139;
          if ((swift_isUniquelyReferenced_nonNull_native(v118) & 1) == 0)
            v118 = sub_10003F1FC((uint64_t)v118);
          if (v126 >= *((_QWORD *)v118 + 2))
            goto LABEL_140;
          v131 = &v118[16 * v126 + 32];
          *(_QWORD *)v131 = v128;
          *((_QWORD *)v131 + 1) = v129;
          v132 = *((_QWORD *)v118 + 2);
          if (v20 > v132)
            goto LABEL_141;
          v19 = v118;
          memmove(&v118[16 * v20 + 16], &v118[16 * v20 + 32], 16 * (v132 - v20));
          *((_QWORD *)v118 + 2) = v132 - 1;
          v20 = v132 - 1;
        }
        while (v132 > 2);
      }
      v133 = v19;
LABEL_119:
      swift_bridgeObjectRelease(v133);
      v134 = v135;
      v135[2] = 0;
      return swift_bridgeObjectRelease(v134);
    }
    v135 = _swiftEmptyArrayStorage;
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v153 + 80);
    v135 = (_QWORD *)v15;
    v141 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v19 = (char *)_swiftEmptyArrayStorage;
  v148 = a1;
  while (1)
  {
    v21 = v18;
    v22 = v18 + 1;
    v140 = v18;
    if (v18 + 1 >= v11)
    {
      v34 = v18 + 1;
      v41 = v142;
    }
    else
    {
      v144 = *a1;
      v23 = v144;
      v151 = v11;
      v24 = v18;
      v25 = v153;
      v26 = *(_QWORD *)(v153 + 72);
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 16);
      v28 = v146;
      v27(v146, v144 + v26 * v22, v3);
      v29 = v23 + v26 * v24;
      v30 = v147;
      v27(v147, v29, v3);
      v149 = sub_1000423E0();
      LODWORD(v145) = dispatch thunk of static Comparable.< infix(_:_:)(v28, v30, v3, v149);
      v31 = *(void (**)(char *, uint64_t))(v25 + 8);
      v32 = v30;
      v33 = v144;
      v31(v32, v3);
      v31(v28, v3);
      v34 = v24 + 2;
      v11 = v151;
      v152 = v26;
      if (v34 >= v151)
      {
        v41 = v142;
        v40 = v26;
      }
      else
      {
        v137 = v19;
        v143 = v26 * v22;
        v35 = v26 * v34;
        while (1)
        {
          v36 = v34;
          v37 = v146;
          v27(v146, v33 + v35, v3);
          v38 = v147;
          v27(v147, v33 + v143, v3);
          v39 = dispatch thunk of static Comparable.< infix(_:_:)(v37, v38, v3, v149);
          v31(v38, v3);
          v31(v37, v3);
          if (((v145 ^ v39) & 1) != 0)
            break;
          v34 = v36 + 1;
          v11 = v151;
          v40 = v152;
          v33 += v152;
          if (v151 == v34)
          {
            v34 = v151;
            v41 = v142;
            v19 = v137;
            goto LABEL_25;
          }
        }
        v41 = v142;
        v19 = v137;
        v34 = v36;
        v11 = v151;
        v40 = v152;
      }
LABEL_25:
      a1 = v148;
      v21 = v140;
      if ((v145 & 1) != 0)
      {
        if (v34 < v140)
          goto LABEL_144;
        if (v140 < v34)
        {
          v137 = v19;
          v42 = 0;
          v43 = v40 * (v34 - 1);
          v44 = v34 * v40;
          v45 = v140;
          v46 = v140 * v40;
          v149 = v34;
          do
          {
            if (v45 != v34 + v42 - 1)
            {
              if (!v144)
                goto LABEL_149;
              v47 = v41;
              v48 = v144 + v46;
              v49 = (char *)(v144 + v43);
              v145 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 32);
              v145(v139, v144 + v46, v3);
              if (v46 < v43 || v48 >= v144 + v44)
              {
                swift_arrayInitWithTakeFrontToBack(v48, v49, 1, v3);
              }
              else if (v46 != v43)
              {
                swift_arrayInitWithTakeBackToFront(v48);
              }
              v145(v49, (uint64_t)v139, v3);
              v41 = v47;
              a1 = v148;
              v34 = v149;
              v40 = v152;
            }
            ++v45;
            --v42;
            v43 -= v40;
            v44 -= v40;
            v46 += v40;
          }
          while (v45 < v34 + v42);
          v19 = v137;
          v21 = v140;
          v11 = v151;
        }
      }
    }
    if (v34 >= v11)
      goto LABEL_57;
    if (__OFSUB__(v34, v21))
      goto LABEL_142;
    if (v34 - v21 >= v136)
      goto LABEL_57;
    if (__OFADD__(v21, v136))
      goto LABEL_145;
    v50 = v21 + v136 >= v11 ? v11 : v21 + v136;
    if (v50 < v21)
      break;
    if (v34 != v50)
    {
      v137 = v19;
      v138 = v50;
      v51 = *(_QWORD *)(v153 + 72);
      v52 = *(char **)(v153 + 16);
      v142 = v41;
      v143 = (uint64_t)v52;
      v53 = v51 * (v34 - 1);
      v144 = v51;
      v54 = v34 * v51;
      do
      {
        v56 = 0;
        v149 = v34;
        v145 = (void (*)(char *, uint64_t, uint64_t))v54;
        while (1)
        {
          v57 = *a1;
          v151 = v54 + v56;
          v152 = v21;
          v58 = (char *)(v54 + v56 + v57);
          v59 = v146;
          v60 = (void (*)(char *, uint64_t, uint64_t))v143;
          ((void (*)(char *, char *, uint64_t))v143)(v146, v58, v3);
          v61 = v53;
          v62 = v53 + v56 + v57;
          v63 = a1;
          v64 = v147;
          v60(v147, v62, v3);
          v65 = sub_1000423E0();
          LOBYTE(v57) = dispatch thunk of static Comparable.< infix(_:_:)(v59, v64, v3, v65);
          v66 = *(void (**)(char *, uint64_t))(v153 + 8);
          v66(v64, v3);
          v66(v59, v3);
          if ((v57 & 1) == 0)
            break;
          v67 = *v63;
          if (!*v63)
            goto LABEL_147;
          v54 = (Swift::Int)v145;
          v68 = (char *)v145 + v67 + v56;
          v53 = v61;
          v69 = (char *)(v67 + v61 + v56);
          v70 = *(void (**)(char *, char *, uint64_t))(v153 + 32);
          v70(v150, v68, v3);
          swift_arrayInitWithTakeFrontToBack(v68, v69, 1, v3);
          v70(v69, v150, v3);
          v56 -= v144;
          v21 = v152 + 1;
          a1 = v148;
          v55 = v149;
          if (v149 == v152 + 1)
            goto LABEL_50;
        }
        v55 = v149;
        a1 = v63;
        v53 = v61;
        v54 = (Swift::Int)v145;
LABEL_50:
        v34 = v55 + 1;
        v53 += v144;
        v54 += v144;
        v21 = v140;
      }
      while (v34 != v138);
      v34 = v138;
      v41 = v142;
      v19 = v137;
    }
LABEL_57:
    if (v34 < v21)
      goto LABEL_137;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v142 = v41;
    v149 = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_10003EFF4(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v73 = *((_QWORD *)v19 + 2);
    v72 = *((_QWORD *)v19 + 3);
    v20 = v73 + 1;
    if (v73 >= v72 >> 1)
      v19 = sub_10003EFF4((char *)(v72 > 1), v73 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v20;
    v74 = v19 + 32;
    v75 = &v19[16 * v73 + 32];
    v76 = v149;
    *(_QWORD *)v75 = v21;
    *((_QWORD *)v75 + 1) = v76;
    if (v73)
    {
      while (1)
      {
        v77 = v20 - 1;
        if (v20 >= 4)
        {
          v82 = &v74[16 * v20];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_126;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_127;
          v89 = v20 - 2;
          v90 = &v74[16 * v20 - 32];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_129;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_132;
          if (v94 >= v85)
          {
            v112 = &v74[16 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_136;
            v105 = v80 < v115;
            goto LABEL_94;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v106 = *((_QWORD *)v19 + 4);
            v107 = *((_QWORD *)v19 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_88;
          }
          v79 = *((_QWORD *)v19 + 4);
          v78 = *((_QWORD *)v19 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_128;
        v89 = v20 - 2;
        v95 = &v74[16 * v20 - 32];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_131;
        v101 = &v74[16 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_134;
        if (__OFADD__(v99, v104))
          goto LABEL_135;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_94:
          if (v105)
            v77 = v89;
          goto LABEL_96;
        }
LABEL_88:
        if ((v100 & 1) != 0)
          goto LABEL_130;
        v108 = &v74[16 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_133;
        if (v111 < v99)
          goto LABEL_15;
LABEL_96:
        v116 = v77 - 1;
        if (v77 - 1 >= v20)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        v117 = *a1;
        if (!*a1)
          goto LABEL_148;
        v118 = v19;
        v119 = &v74[16 * v116];
        v120 = *(_QWORD *)v119;
        v121 = &v74[16 * v77];
        v122 = *((_QWORD *)v121 + 1);
        v123 = v142;
        sub_10003EAD0(v117 + *(_QWORD *)(v153 + 72) * *(_QWORD *)v119, v117 + *(_QWORD *)(v153 + 72) * *(_QWORD *)v121, v117 + *(_QWORD *)(v153 + 72) * v122, v141);
        v142 = v123;
        if (v123)
        {
LABEL_117:
          v133 = v118;
          goto LABEL_119;
        }
        if (v122 < v120)
          goto LABEL_123;
        if (v77 > *((_QWORD *)v118 + 2))
          goto LABEL_124;
        *(_QWORD *)v119 = v120;
        *(_QWORD *)&v74[16 * v116 + 8] = v122;
        v124 = *((_QWORD *)v118 + 2);
        if (v77 >= v124)
          goto LABEL_125;
        v19 = v118;
        v20 = v124 - 1;
        memmove(&v74[16 * v77], v121 + 16, 16 * (v124 - 1 - v77));
        *((_QWORD *)v118 + 2) = v124 - 1;
        a1 = v148;
        if (v124 <= 2)
          goto LABEL_15;
      }
    }
    v20 = 1;
LABEL_15:
    v11 = a1[1];
    v18 = v149;
    if (v149 >= v11)
    {
      v17 = v135;
      goto LABEL_105;
    }
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003E86C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v30 = a1;
  v7 = sub_100030EE4(&qword_1000EC320);
  v38 = *(_QWORD **)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v37 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v34 = (char *)&v28 - v11;
  result = __chkstk_darwin(v10);
  v33 = (char *)&v28 - v13;
  v36 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v14 = v38[9];
    v31 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v32 = a4;
    v40 = v14 * (v36 - 1);
    v35 = v14;
    v39 = v14 * v36;
LABEL_5:
    v15 = 0;
    v16 = v30;
    while (1)
    {
      v17 = *a4;
      v18 = v33;
      v19 = v31;
      v31(v33, v39 + v15 + *a4, v7);
      v20 = v34;
      v19(v34, v40 + v15 + v17, v7);
      v21 = sub_1000423E0();
      LOBYTE(v17) = dispatch thunk of static Comparable.< infix(_:_:)(v18, v20, v7, v21);
      v22 = (void (*)(char *, uint64_t))v38[1];
      v23 = v20;
      a4 = v32;
      v22(v23, v7);
      result = ((uint64_t (*)(char *, uint64_t))v22)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v40 += v35;
        v39 += v35;
        if (++v36 == v29)
          return result;
        goto LABEL_5;
      }
      v24 = *a4;
      if (!*a4)
        break;
      v25 = v24 + v39 + v15;
      v26 = v24 + v40 + v15;
      v27 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v27(v37, v25, v7);
      swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v7);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v26, v37, v7);
      v15 -= v35;
      if (v36 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10003EAD0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char *v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  char *v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;

  v8 = sub_100030EE4(&qword_1000EC320);
  v9 = *(_QWORD **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v52 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v51 = (char *)&v45 - v12;
  v53 = v9[9];
  if (!v53)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (a2 - a1 == 0x8000000000000000 && v53 == -1)
    goto LABEL_63;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v53 == -1)
    goto LABEL_64;
  v14 = (uint64_t)(a2 - a1) / v53;
  v56 = a1;
  v55 = a4;
  v15 = v13 / v53;
  if (v14 >= v13 / v53)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v53;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v15, v8);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v29 = a4 + v17;
      v54 = a4 + v17;
      v56 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v31 = -v53;
        v32 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v46 = -v53;
        v47 = v32;
        v49 = a4;
        v50 = a1;
        v48 = v9;
        do
        {
          v53 = a3 + v31;
          v33 = v51;
          v34 = v47;
          v47(v51, v29 + v31, v8);
          v35 = a2 + v31;
          v36 = v52;
          v34(v52, a2 + v31, v8);
          v37 = sub_1000423E0();
          LOBYTE(v34) = dispatch thunk of static Comparable.< infix(_:_:)(v33, v36, v8, v37);
          v38 = (void (*)(char *, uint64_t))v9[1];
          v38(v36, v8);
          v38(v33, v8);
          if ((v34 & 1) != 0)
          {
            v39 = v53;
            if (a3 < a2 || v53 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v53, a2 + v31, 1, v8);
              v9 = v48;
              v40 = v49;
              v41 = v50;
            }
            else
            {
              v9 = v48;
              v40 = v49;
              v41 = v50;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v53);
            }
            v31 = v46;
            v56 += v46;
          }
          else
          {
            v39 = v53;
            v42 = v54;
            v43 = v54 + v31;
            v54 += v31;
            if (a3 < v42 || v53 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v53, v43, 1, v8);
              v35 = a2;
              v9 = v48;
              v40 = v49;
              v41 = v50;
            }
            else
            {
              v9 = v48;
              v40 = v49;
              v41 = v50;
              if (a3 != v42)
                swift_arrayInitWithTakeBackToFront(v53);
              v35 = a2;
            }
            v31 = v46;
          }
          v29 = v54;
          if (v54 <= v40)
            break;
          a2 = v35;
          a3 = v39;
        }
        while (v35 > v41);
      }
      goto LABEL_61;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v53;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v14, v8);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v50 = a4 + v16;
    v54 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v51;
        v19(v51, a2, v8);
        v22 = v52;
        v19(v52, a4, v8);
        v23 = sub_1000423E0();
        v24 = dispatch thunk of static Comparable.< infix(_:_:)(v21, v22, v8, v23);
        v25 = (void (*)(char *, uint64_t))v9[1];
        v25(v22, v8);
        v25(v21, v8);
        v26 = v56;
        if ((v24 & 1) != 0)
        {
          v27 = a2 + v53;
          if (v56 < a2 || v56 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v56, a2, 1, v8);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v56 == a2)
              v26 = a2;
            else
              swift_arrayInitWithTakeBackToFront(v56);
          }
        }
        else
        {
          v28 = v55 + v53;
          if (v56 < v55 || v56 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v56, v55, 1, v8);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v56 != v55)
              swift_arrayInitWithTakeBackToFront(v56);
          }
          v55 = v28;
          v27 = a2;
        }
        v56 = v26 + v53;
        a4 = v55;
        if (v55 >= v50)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_61:
    sub_10003F0EC(&v56, &v55, (uint64_t *)&v54);
    return 1;
  }
LABEL_65:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10003EFF4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EBB78);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10003F0EC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_100030EE4(&qword_1000EC320);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3);
  return result;
}

char *sub_10003F1FC(uint64_t a1)
{
  return sub_10003EFF4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10003F210(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003FCD8(a1, a2, a3, (_QWORD *)*v3, &qword_1000EBAD8, &qword_1000EB718);
  *v3 = result;
  return result;
}

uint64_t sub_10003F23C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003FEB8(a1, a2, a3, (_QWORD *)*v3, &qword_1000EBB70, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

uint64_t sub_10003F268(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10003F408(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10003F284(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003F570(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10003F2A0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003F714(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10003F2BC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10003F898(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10003F2D8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10003F9F4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10003F2F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003FEB8(a1, a2, a3, (_QWORD *)*v3, &qword_1000EBAC8, _s14descr1000D81A9V8ActivityVMa);
  *v3 = result;
  return result;
}

uint64_t sub_10003F320(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003FEB8(a1, a2, a3, (_QWORD *)*v3, &qword_1000EB8E8, _s14descr1000DA8A1V3TagVMa);
  *v3 = result;
  return result;
}

uint64_t sub_10003F34C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003FEB8(a1, a2, a3, (_QWORD *)*v3, &qword_1000EBAC0, _s14descr1000D9B91O14AudioRecordingV8FragmentVMa);
  *v3 = result;
  return result;
}

uint64_t sub_10003F378(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003FB50(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10003F394(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003FCD8(a1, a2, a3, (_QWORD *)*v3, &qword_1000EB8F0, &qword_1000EB8F8);
  *v3 = result;
  return result;
}

uint64_t sub_10003F3C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10003FEB8(a1, a2, a3, (_QWORD *)*v3, &qword_1000EBAB8, _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa);
  *v3 = result;
  return result;
}

uint64_t sub_10003F3EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100040098(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10003F408(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EB6F0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4, v15);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003F570(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EBAF0);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100030EE4(&qword_1000EBAE8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4, a2);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003F714(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EBB58);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = v11 + 4;
  v15 = a4 + 4;
  v16 = 4 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v11 + 4, a4 + 4, v16 * 8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    sub_100030EE4(&qword_1000EBB60);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4, a2);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003F898(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EBB68);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4, v15);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003F9F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EBB50);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4, v15);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003FB50(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EBA98);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_100030EE4(&qword_1000EB6E8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4, a2);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003FCD8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100030EE4(a5);
  v14 = *(_QWORD *)(sub_100030EE4(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_100030EE4(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4, v25);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003FEB8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100030EE4(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4, v25);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100040098(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EBAB0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4, v15);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

id sub_1000401F4(void *a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5, Class a6, uint64_t a7, uint64_t a8, double a9)
{
  return sub_1000403E0(a1, a2 & 0x101, a3, a4, a5, objc_allocWithZone(a6), a9, a7, a8);
}

id sub_10004027C(void *a1, __int16 a2, void *a3, uint64_t a4, void *a5, _BYTE *a6, double a7)
{
  objc_class *ObjectType;
  uint64_t v15;
  _BYTE *v16;
  _OWORD *v17;
  double *v18;
  _QWORD *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  objc_super v25;

  ObjectType = (objc_class *)swift_getObjectType(a6);
  a6[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_isImporting] = 0;
  v15 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_errors;
  v16 = a6;
  *(_QWORD *)&a6[v15] = sub_10002FB80((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v16[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_saveBatchSize] = 32;
  v16[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarning] = 0;
  v17 = &v16[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarningObserver];
  *v17 = 0u;
  v17[1] = 0u;
  *(_QWORD *)&v16[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_context] = a1;
  v18 = (double *)&v16[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration];
  *(_BYTE *)v18 = a2 & 1;
  *((_BYTE *)v18 + 1) = HIBYTE(a2) & 1;
  v18[1] = a7;
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  v19 = &v16[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager];
  *v19 = a5;
  v19[1] = &protocol witness table for NSFileManager;
  v20 = a3;
  v21 = a5;
  v22 = a1;

  v25.receiver = v16;
  v25.super_class = ObjectType;
  v23 = objc_msgSendSuper2(&v25, "init");
  sub_100036DDC();

  return v23;
}

id sub_1000403E0(void *a1, __int16 a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6, double a7, uint64_t a8, uint64_t a9)
{
  objc_class *ObjectType;
  uint64_t v18;
  _BYTE *v19;
  _OWORD *v20;
  double *v21;
  _QWORD *v22;
  id v23;
  id v24;
  id v25;
  objc_super v27;

  ObjectType = (objc_class *)swift_getObjectType(a6);
  a6[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_isImporting] = 0;
  v18 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_errors;
  v19 = a6;
  *(_QWORD *)&a6[v18] = sub_10002FB80((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v19[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_saveBatchSize] = 32;
  v19[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarning] = 0;
  v20 = &v19[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_didReceiveMemoryWarningObserver];
  *v20 = 0u;
  v20[1] = 0u;
  *(_QWORD *)&v19[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_context] = a1;
  v21 = (double *)&v19[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration];
  *(_BYTE *)v21 = a2 & 1;
  *((_BYTE *)v21 + 1) = HIBYTE(a2) & 1;
  v21[1] = a7;
  *((_QWORD *)v21 + 2) = a3;
  *((_QWORD *)v21 + 3) = a4;
  v22 = &v19[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager];
  *v22 = a5;
  v22[1] = a9;
  v23 = a3;
  swift_unknownObjectRetain(a5);
  v24 = a1;

  v27.receiver = v19;
  v27.super_class = ObjectType;
  v25 = objc_msgSendSuper2(&v27, "init");
  sub_100036DDC();

  swift_unknownObjectRelease(a5);
  return v25;
}

uint64_t sub_100040544(_QWORD *a1)
{
  return sub_10003FCD8(0, a1[2], 0, a1, &qword_1000EB968, &qword_1000EC320);
}

BOOL sub_100040578(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  sub_100031044(a1, (uint64_t)&v10, &qword_1000EB6E8);
  v3 = v11;
  if (v11)
  {
    sub_100031034(&v10, &v8);
    v4 = v9;
    v5 = sub_10004242C(&v8, v9);
    v6 = _bridgeAnythingToObjectiveC<A>(_:)(v5, v4);
    objc_msgSend(a2, "removeObserver:", v6);
    swift_unknownObjectRelease(v6);
    sub_100035424(&v8);
  }
  return v3 == 0;
}

uint64_t sub_100040618(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;

  v5 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v36 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v45 = (char *)&v34 - v13;
  v46 = (char *)_swiftEmptyArrayStorage;
  v41 = *(_QWORD *)(a1 + 16);
  if (!v41)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_29:
    swift_bridgeObjectRelease(a1);
    sub_100036060((uint64_t)v7, (uint64_t *)&unk_1000EC2E0);
    return (uint64_t)v46;
  }
  v14 = 0;
  v34 = v2;
  v35 = a2 + 7;
  v39 = a1;
  v40 = v7;
  v43 = a2;
  v38 = v8;
  while (1)
  {
    if (v14 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
      goto LABEL_31;
    }
    v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v16 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, a1 + v15 + v16 * v14, v8);
    v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56);
    v37(v7, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      goto LABEL_29;
    v42 = v15;
    v44 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 32);
    v17 = v44(v45, v7, v8);
    v18 = URL.pathExtension.getter(v17);
    v20 = v19;
    v21 = a2[2];
    if (!v21)
      goto LABEL_21;
    v22 = v18;
    v23 = a2[4];
    v24 = a2[5];
    if (v23 != v22 || v24 != v20)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v22, v20, 0);
      if ((result & 1) == 0)
        break;
    }
LABEL_3:
    swift_bridgeObjectRelease(v20);
    v8 = v38;
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v45, v38);
    a1 = v39;
    v7 = v40;
    a2 = v43;
LABEL_4:
    if (++v14 == v41)
    {
      v37(v7, 1, 1, v8);
      goto LABEL_29;
    }
  }
  a2 = v43;
  if (v21 == 1)
  {
LABEL_21:
    swift_bridgeObjectRelease(v20);
    v8 = v38;
    v44(v36, v45, v38);
    v31 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
    {
      sub_10003F23C(0, *((_QWORD *)v31 + 2) + 1, 1);
      v31 = v46;
    }
    v7 = v40;
    v33 = *((_QWORD *)v31 + 2);
    v32 = *((_QWORD *)v31 + 3);
    if (v33 >= v32 >> 1)
    {
      sub_10003F23C(v32 > 1, v33 + 1, 1);
      v31 = v46;
    }
    *((_QWORD *)v31 + 2) = v33 + 1;
    result = v44(&v31[v42 + v33 * v16], v36, v8);
    v46 = v31;
    a1 = v39;
    goto LABEL_4;
  }
  v25 = v35;
  v26 = 1;
  while (1)
  {
    v27 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    v28 = *(v25 - 1);
    v29 = *v25;
    v30 = v28 == v22 && v29 == v20;
    if (v30)
      goto LABEL_3;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v22, v20, 0);
    if ((result & 1) != 0)
      goto LABEL_3;
    v25 += 2;
    ++v26;
    v30 = v27 == v21;
    a2 = v43;
    if (v30)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

_QWORD *sub_100040980(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        swift_bridgeObjectRetain(*v6);
        v9 = sub_10005F8A4(v7, v8);
        if ((v10 & 1) != 0
          && (v11 = objc_msgSend(*(id *)(*(_QWORD *)(a2 + 56) + 8 * v9), "identifier")) != 0)
        {
          v12 = v11;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
          v14 = v13;

          v15 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v8);
          v16 = swift_bridgeObjectRelease(v14);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v18 >= v17 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
          specialized Array._endMutation()(v19);
        }
        else
        {
          swift_bridgeObjectRelease(v8);
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

unint64_t sub_100040AE4(unint64_t result)
{
  if (result > 4)
    return 0;
  return result;
}

void sub_100040AF4()
{
  uint64_t v0;

  sub_100039690(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_100040B10(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result, a2);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL, a2);
}

uint64_t sub_100040B54(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void **i;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  id v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = result;
    v7 = (_QWORD *)swift_bridgeObjectRetain(result);
    v9 = v7[4];
    v8 = v7[5];
    v10 = (void *)v7[6];
    v11 = (_QWORD *)*a3;
    swift_bridgeObjectRetain(v8);
    v48 = v10;
    v13 = sub_10005F8A4(v9, v8);
    v14 = v11[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v17 = v12;
    if (v11[3] < v16)
    {
      sub_10005987C(v16, a2 & 1);
      v18 = sub_10005F8A4(v9, v8);
      if ((v17 & 1) != (v19 & 1))
      {
LABEL_27:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v13 = v18;
      v20 = (_QWORD *)*a3;
      if ((v17 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v21 = *(id *)(v20[7] + 8 * v13);
      swift_bridgeObjectRelease(v8);

      v22 = v20[7];
      *(_QWORD *)(v22 + 8 * v13) = v21;
      v23 = v3 - 1;
      if (v3 == 1)
        return swift_bridgeObjectRelease(v6);
LABEL_16:
      for (i = (void **)(v6 + 72); ; i += 3)
      {
        v33 = (uint64_t)*(i - 2);
        v32 = (uint64_t)*(i - 1);
        v34 = *i;
        v35 = (_QWORD *)*a3;
        swift_bridgeObjectRetain(v32);
        v36 = v34;
        v37 = sub_10005F8A4(v33, v32);
        v39 = v35[2];
        v40 = (v38 & 1) == 0;
        v26 = __OFADD__(v39, v40);
        v41 = v39 + v40;
        if (v26)
          break;
        v42 = v38;
        if (v35[3] < v41)
        {
          sub_10005987C(v41, 1);
          v37 = sub_10005F8A4(v33, v32);
          if ((v42 & 1) != (v43 & 1))
            goto LABEL_27;
        }
        v44 = (_QWORD *)*a3;
        if ((v42 & 1) != 0)
        {
          v29 = 8 * v37;
          v30 = *(id *)(v44[7] + 8 * v37);
          swift_bridgeObjectRelease(v32);

          v31 = v44[7];
          *(_QWORD *)(v31 + v29) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = (uint64_t *)(v44[6] + 16 * v37);
          *v45 = v33;
          v45[1] = v32;
          *(_QWORD *)(v44[7] + 8 * v37) = v36;
          v46 = v44[2];
          v26 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v26)
            goto LABEL_26;
          v44[2] = v47;
        }
        if (!--v23)
          return swift_bridgeObjectRelease(v6);
      }
      goto LABEL_25;
    }
    if ((a2 & 1) != 0)
    {
      v20 = (_QWORD *)*a3;
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_10005B390();
      v20 = (_QWORD *)*a3;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    v24 = (uint64_t *)(v20[6] + 16 * v13);
    *v24 = v9;
    v24[1] = v8;
    *(_QWORD *)(v20[7] + 8 * v13) = v48;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v20[2] = v27;
    v23 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease(v6);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_100040E14(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id *v22;
  uint64_t v23;
  int64_t v24;
  char *v25;
  Class isa;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  id v36;
  NSString v37;
  id v38;
  uint64_t v39;
  NSString v40;
  NSString v41;
  char *v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  id v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  unint64_t v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  id *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71[32];
  int64_t v72;

  v67 = a2;
  v5 = sub_100030EE4(&qword_1000EBA10);
  v6 = __chkstk_darwin(v5);
  v57 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v66 = (char *)&v53 - v8;
  v69 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v69 - 8);
  v10 = __chkstk_darwin(v69);
  v54 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v64 = (char *)&v53 - v12;
  v13 = _s14descr1000DA8A1V3TagVMa(0);
  v62 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v61 = (uint64_t)&v53 - v17;
  v18 = *(_QWORD *)(a1 + 56);
  v58 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v22 = (id *)(a3 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration);
  v68 = a1;
  swift_bridgeObjectRetain(a1);
  v60 = v22;
  swift_beginAccess(v22, v71, 0, 0);
  v24 = 0;
  v59 = (unint64_t)(v19 + 63) >> 6;
  v56 = 0x80000001000B06B0;
  v65 = v9;
  while (1)
  {
    if (v21)
    {
      v70 = (v21 - 1) & v21;
      v72 = v24;
      v27 = __clz(__rbit64(v21)) | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v28 >= v59)
      return swift_release(v68, v23);
    v29 = *(_QWORD *)(v58 + 8 * v28);
    v30 = v24 + 1;
    if (!v29)
    {
      v30 = v24 + 2;
      if (v24 + 2 >= v59)
        return swift_release(v68, v23);
      v29 = *(_QWORD *)(v58 + 8 * v30);
      if (!v29)
      {
        v30 = v24 + 3;
        if (v24 + 3 >= v59)
          return swift_release(v68, v23);
        v29 = *(_QWORD *)(v58 + 8 * v30);
        if (!v29)
        {
          v30 = v24 + 4;
          if (v24 + 4 >= v59)
            return swift_release(v68, v23);
          v29 = *(_QWORD *)(v58 + 8 * v30);
          if (!v29)
            break;
        }
      }
    }
LABEL_23:
    v70 = (v29 - 1) & v29;
    v72 = v30;
    v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_24:
    v32 = v61;
    sub_100042198(*(_QWORD *)(v68 + 48) + *(_QWORD *)(v62 + 72) * v27, v61);
    sub_1000421DC(v32, (uint64_t)v16);
    v33 = *(_BYTE *)v60;
    v34 = *(_QWORD *)&v16[*(int *)(v63 + 20) + 8];
    v35 = v60[2];
    swift_bridgeObjectRetain(v34);
    v36 = v67;
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
    v38 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagWithDisplayText:account:createIfNecessary:", v37, v36, 1);

    if (!v38)
      goto LABEL_37;
    v39 = (uint64_t)v66;
    if ((v33 & 1) != 0)
    {
      v40 = String._bridgeToObjectiveC()();
      objc_msgSend(v38, "setDisplayText:", v40);

      objc_msgSend(v38, "unmarkForDeletion");
      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v38, "updateChangeCountWithReason:", v41);

    }
    v42 = v16;
    sub_100031044((uint64_t)v16, v39, &qword_1000EBA10);
    v43 = v9;
    v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v45 = v69;
    if (v44(v39, 1, v69) != 1)
    {
      v25 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v64, v39, v45);
      v9 = v43;
      v16 = v42;
      goto LABEL_5;
    }
    v46 = objc_msgSend(v38, "creationDate");
    if (!v46)
    {
      v50 = (uint64_t)v57;
      v45 = v69;
      v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v57, 1, 1, v69);
      v16 = v42;
LABEL_32:
      v25 = v64;
      static Date.now.getter(v51);
      sub_100036060(v50, &qword_1000EBA10);
      goto LABEL_33;
    }
    v47 = v46;
    v48 = v54;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v49 = v65;
    v50 = (uint64_t)v57;
    v45 = v69;
    v55 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v55(v57, v48, v69);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v45);
    v51 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v44)(v50, 1, v45);
    v16 = v42;
    if ((_DWORD)v51 == 1)
      goto LABEL_32;
    v25 = v64;
    v55(v64, (char *)v50, v45);
LABEL_33:
    sub_100036060(v39, &qword_1000EBA10);
    v9 = v65;
LABEL_5:
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v45);
    objc_msgSend(v38, "setCreationDate:", isa);

    sub_100042220((uint64_t)v16, _s14descr1000DA8A1V3TagVMa);
    v24 = v72;
    v21 = v70;
  }
  v31 = v24 + 5;
  if (v24 + 5 >= v59)
    return swift_release(v68, v23);
  v29 = *(_QWORD *)(v58 + 8 * v31);
  if (v29)
  {
    v30 = v24 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v30 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v30 >= v59)
      return swift_release(v68, v23);
    v29 = *(_QWORD *)(v58 + 8 * v30);
    ++v31;
    if (v29)
      goto LABEL_23;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001000B0690, "com_apple_mobilenotes_SharingExtension/ICImportableObject.swift", 63, 2, 37, 0);
  __break(1u);
  return result;
}

void sub_100041440(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  void *v29;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_100036000(0, &qword_1000EBB40, NSManagedObject_ptr);
    v7 = sub_100042388();
    v8 = Set.Iterator.init(_cocoa:)(v28, v5, v6, v7);
    v3 = v28[0];
    v26 = v28[1];
    v9 = v28[2];
    v10 = v28[3];
    v11 = v28[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    v8 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v25 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v15 = (v11 - 1) & v11;
      v16 = __clz(__rbit64(v11)) | (v10 << 6);
      v17 = v10;
      goto LABEL_32;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v22 >= v25)
      goto LABEL_35;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    v17 = v10 + 1;
    if (!v23)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v25)
        goto LABEL_35;
      v23 = *(_QWORD *)(v26 + 8 * v17);
      if (!v23)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v25)
          goto LABEL_35;
        v23 = *(_QWORD *)(v26 + 8 * v17);
        if (!v23)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v25)
            goto LABEL_35;
          v23 = *(_QWORD *)(v26 + 8 * v17);
          if (!v23)
          {
            v17 = v10 + 5;
            if (v10 + 5 >= v25)
              goto LABEL_35;
            v23 = *(_QWORD *)(v26 + 8 * v17);
            if (!v23)
            {
              v24 = v10 + 6;
              while (v25 != v24)
              {
                v23 = *(_QWORD *)(v26 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_100036138(v3, v26);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
    v21 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_35;
    while (1)
    {
      objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_context), "refreshObject:mergeChanges:", v21, 0);

      v10 = v17;
      v11 = v15;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(v8);
      if (v18)
      {
        v19 = v18;
        v27 = v18;
        v20 = sub_100036000(0, &qword_1000EBB40, NSManagedObject_ptr);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v29, &v27, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v29;
        swift_unknownObjectRelease(v19);
        v17 = v10;
        v15 = v11;
        if (v21)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

_QWORD *sub_100041720(uint64_t a1, uint64_t a2, void *a3, char *a4, uint64_t a5)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_10003F2A0(0, v6, 0);
    v8 = *(_QWORD *)(sub_100030EE4(&qword_1000EC320) - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v23 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      v10 = sub_10003B7B0(v9, a3, a4, a5);
      if (v5)
        break;
      v14 = v10;
      v15 = v11;
      v16 = v12;
      v17 = v13;
      v19 = _swiftEmptyArrayStorage[2];
      v18 = _swiftEmptyArrayStorage[3];
      v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        sub_10003F2A0(v18 > 1, v19 + 1, 1);
        v20 = v19 + 1;
      }
      _swiftEmptyArrayStorage[2] = v20;
      v21 = &_swiftEmptyArrayStorage[4 * v19];
      v21[4] = v14;
      v21[5] = v15;
      v21[6] = v16;
      *((_BYTE *)v21 + 56) = v17 & 1;
      v9 += v23;
      if (!--v6)
        return _swiftEmptyArrayStorage;
    }
    swift_release(_swiftEmptyArrayStorage, v11);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100041874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double *v22;
  uint64_t result;
  uint64_t v24;
  int64_t v25;
  char *v26;
  Class isa;
  unint64_t v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  double v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, void *, void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, double);
  int v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  id v53;
  uint64_t v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t ObjectType;
  void (*v79)(uint64_t, char *, uint64_t);
  uint64_t v80;
  char v81[32];

  v72 = a2;
  v73 = a3;
  v6 = sub_100030EE4(&qword_1000EBA10);
  v7 = __chkstk_darwin(v6);
  v62 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v67 = (uint64_t)&v61 - v9;
  v66 = type metadata accessor for Date(0);
  v77 = *(_QWORD *)(v66 - 8);
  v10 = __chkstk_darwin(v66);
  v61 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v65 = (char *)&v61 - v12;
  v13 = _s14descr1000DA8A1V3TagVMa(0);
  v70 = *(_QWORD *)(v13 - 8);
  v71 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v69 = (uint64_t)&v61 - v17;
  v18 = *(_QWORD *)(a1 + 56);
  v63 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v22 = (double *)(a4 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_configuration);
  v74 = a1;
  swift_bridgeObjectRetain(a1);
  v68 = v22;
  result = swift_beginAccess(v22, v81, 0, 0);
  v25 = 0;
  v64 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      v75 = (v21 - 1) & v21;
      v76 = v25;
      v28 = __clz(__rbit64(v21)) | (v25 << 6);
      goto LABEL_21;
    }
    v29 = __OFADD__(v25, 1);
    v30 = v25 + 1;
    if (v29)
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v30 >= v64)
      return swift_release(v74, v24);
    v31 = *(_QWORD *)(v63 + 8 * v30);
    if (!v31)
      break;
LABEL_20:
    v75 = (v31 - 1) & v31;
    v76 = v30;
    v28 = __clz(__rbit64(v31)) + (v30 << 6);
LABEL_21:
    v33 = v69;
    sub_100042198(*(_QWORD *)(v74 + 48) + *(_QWORD *)(v70 + 72) * v28, v69);
    sub_1000421DC(v33, (uint64_t)v16);
    v34 = *(unsigned __int8 *)v68;
    v35 = *((unsigned __int8 *)v68 + 1);
    v36 = v68[1];
    v37 = (void *)*((_QWORD *)v68 + 2);
    v79 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v68 + 3);
    ObjectType = swift_getObjectType(v72);
    v38 = &v16[*(int *)(v71 + 20)];
    v39 = *(_QWORD *)v38;
    v40 = *((_QWORD *)v38 + 1);
    v41 = v73;
    v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, double))(v73 + 8);
    if (v35)
      v43 = 256;
    else
      v43 = 0;
    v44 = v43 | v34;
    v45 = v37;
    v46 = v80;
    v47 = v42(v39, v40, v44, v37, (void (*)(_QWORD, _QWORD, _QWORD))v79, ObjectType, v41, v36);
    v80 = v46;
    if (v46)
    {

      sub_100042220((uint64_t)v16, _s14descr1000DA8A1V3TagVMa);
      return swift_release(v74, v24);
    }
    v48 = (void *)v47;
    v49 = v67;
    sub_100031044((uint64_t)v16, v67, &qword_1000EBA10);
    v50 = v77;
    v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
    v52 = v66;
    if (v51(v49, 1, v66) != 1)
    {
      v26 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v65, v49, v52);
      goto LABEL_5;
    }
    v53 = objc_msgSend(v48, "creationDate");
    v54 = (uint64_t)v62;
    if (!v53)
    {
      v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v62, 1, 1, v52);
LABEL_30:
      v26 = v65;
      static Date.now.getter(v60);
      sub_100036060(v54, &qword_1000EBA10);
      goto LABEL_31;
    }
    v55 = v53;
    v56 = v61;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v57 = v16;
    v58 = v77;
    v79 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 32);
    v79(v54, v56, v52);
    v59 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56);
    v16 = v57;
    v59(v54, 0, 1, v52);
    v60 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v51)(v54, 1, v52);
    if ((_DWORD)v60 == 1)
      goto LABEL_30;
    v26 = v65;
    v79((uint64_t)v65, (char *)v54, v52);
LABEL_31:
    sub_100036060(v49, &qword_1000EBA10);
    v50 = v77;
LABEL_5:
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v52);
    objc_msgSend(v48, "setCreationDate:", isa);

    result = sub_100042220((uint64_t)v16, _s14descr1000DA8A1V3TagVMa);
    v21 = v75;
    v25 = v76;
  }
  v32 = v30 + 1;
  if (v30 + 1 >= v64)
    return swift_release(v74, v24);
  v31 = *(_QWORD *)(v63 + 8 * v32);
  if (v31)
    goto LABEL_19;
  v32 = v30 + 2;
  if (v30 + 2 >= v64)
    return swift_release(v74, v24);
  v31 = *(_QWORD *)(v63 + 8 * v32);
  if (v31)
    goto LABEL_19;
  v32 = v30 + 3;
  if (v30 + 3 >= v64)
    return swift_release(v74, v24);
  v31 = *(_QWORD *)(v63 + 8 * v32);
  if (v31)
    goto LABEL_19;
  v32 = v30 + 4;
  if (v30 + 4 >= v64)
    return swift_release(v74, v24);
  v31 = *(_QWORD *)(v63 + 8 * v32);
  if (v31)
  {
LABEL_19:
    v30 = v32;
    goto LABEL_20;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v64)
      return swift_release(v74, v24);
    v31 = *(_QWORD *)(v63 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_20;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_100041DD0()
{
  unint64_t result;

  result = qword_1000EBA38;
  if (!qword_1000EBA38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EBA38);
  }
  return result;
}

unint64_t sub_100041E1C()
{
  unint64_t result;

  result = qword_1000EBA40;
  if (!qword_1000EBA40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EBA40);
  }
  return result;
}

unint64_t sub_100041E64()
{
  unint64_t result;

  result = qword_1000EBA48;
  if (!qword_1000EBA48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EBA48);
  }
  return result;
}

unint64_t sub_100041EAC()
{
  unint64_t result;

  result = qword_1000EBA50;
  if (!qword_1000EBA50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EBA50);
  }
  return result;
}

unint64_t sub_100041EF4()
{
  unint64_t result;

  result = qword_1000EBA58;
  if (!qword_1000EBA58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000EBA58);
  }
  return result;
}

uint64_t type metadata accessor for ICArchiveImporter()
{
  return objc_opt_self(_TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter);
}

void destroy for ICArchiveImporter.Configuration(uint64_t a1)
{

}

uint64_t initializeWithCopy for ICArchiveImporter.Configuration(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  id v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v3;
  v4 = (id)v3;
  return a1;
}

uint64_t assignWithCopy for ICArchiveImporter.Configuration(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(void **)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v6 = v3;

  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for ICArchiveImporter.Configuration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveImporter.Configuration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveImporter.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveImporter.Configuration()
{
  return &type metadata for ICArchiveImporter.Configuration;
}

ValueMetadata *type metadata accessor for ICArchiveImporter.Errors()
{
  return &type metadata for ICArchiveImporter.Errors;
}

uint64_t sub_100042114(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100042154()
{
  unint64_t result;

  result = qword_1000EBAD0;
  if (!qword_1000EBAD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveImporter.Errors, &type metadata for ICArchiveImporter.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EBAD0);
  }
  return result;
}

uint64_t sub_100042198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s14descr1000DA8A1V3TagVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000421DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s14descr1000DA8A1V3TagVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042220(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10004225C()
{
  unint64_t result;

  result = qword_1000EBB30;
  if (!qword_1000EBB30)
  {
    result = swift_getWitnessTable(&unk_1000B4F6C, &type metadata for ICAccountArchiveModel);
    atomic_store(result, (unint64_t *)&qword_1000EBB30);
  }
  return result;
}

_QWORD *sub_1000422A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000422F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EBB38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100042338(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

_QWORD *sub_100042360(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

unint64_t sub_100042388()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EBB48;
  if (!qword_1000EBB48)
  {
    v1 = sub_100036000(255, &qword_1000EBB40, NSManagedObject_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000EBB48);
  }
  return result;
}

unint64_t sub_1000423E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EB9B0;
  if (!qword_1000EB9B0)
  {
    v1 = sub_100030FF0(&qword_1000EC320);
    result = swift_getWitnessTable(&protocol conformance descriptor for ICObjectReferences<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EB9B0);
  }
  return result;
}

_QWORD *sub_10004242C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100042450()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100042474(uint64_t a1)
{
  uint64_t v1;

  sub_10003DD74(a1, v1);
}

uint64_t sub_10004247C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004248C(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_100042494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EB6E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000424DC()
{
  sub_100040AF4();
}

uint64_t sub_1000424F0(uint64_t a1, char *a2, int a3, uint64_t a4, void (*a5)(char *, uint64_t), double a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t ObjectType;
  void *v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  Class isa;
  int *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  Class v69;
  NSString v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD v75[2];
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;

  v94 = a4;
  v93 = a5;
  LODWORD(v92) = a3;
  v91 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v99 = v8;
  v100 = v9;
  __chkstk_darwin(v8);
  v96 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100030EE4(&qword_1000EBBD0);
  v12 = __chkstk_darwin(v11);
  v98 = (char *)v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = sub_100030EE4(&qword_1000EBA10);
  v15 = __chkstk_darwin(v14);
  v83 = (char *)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v84 = (char *)v75 - v18;
  v19 = __chkstk_darwin(v17);
  v90 = (char *)v75 - v20;
  v21 = __chkstk_darwin(v19);
  v82 = (char *)v75 - v22;
  v23 = __chkstk_darwin(v21);
  v89 = (char *)v75 - v24;
  v25 = __chkstk_darwin(v23);
  v81 = (char *)v75 - v26;
  v27 = __chkstk_darwin(v25);
  v88 = (char *)v75 - v28;
  v29 = __chkstk_darwin(v27);
  v80 = (char *)v75 - v30;
  v31 = __chkstk_darwin(v29);
  v87 = (char *)v75 - v32;
  v33 = __chkstk_darwin(v31);
  v79 = (char *)v75 - v34;
  v35 = __chkstk_darwin(v33);
  v37 = (void (*)(char *, uint64_t))((char *)v75 - v36);
  __chkstk_darwin(v35);
  v86 = (uint64_t)v75 - v38;
  v85 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v85 - 8);
  v40 = __chkstk_darwin(v85);
  v42 = (char *)v75 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v40);
  v45 = (char *)v75 - v44;
  v46 = __chkstk_darwin(v43);
  v48 = (char *)v75 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)v75 - v50;
  __chkstk_darwin(v49);
  v53 = (char *)v75 - v52;
  ObjectType = swift_getObjectType(a1);
  v55 = v97;
  result = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, void (*)(char *, uint64_t), uint64_t, double))v91
            + 4))(*(_QWORD *)(v95 + 8), *(_QWORD *)(v95 + 16), (unsigned __int16)v92 & 0x101, v94, v93, ObjectType, a6);
  if (!v55)
  {
    v76 = v45;
    v77 = v48;
    v93 = v37;
    v91 = v42;
    v97 = (void *)result;
    v78 = type metadata accessor for ICNoteArchiveModel(0);
    v57 = v86;
    sub_100031044(v95 + *(int *)(v78 + 40), v86, &qword_1000EBA10);
    v58 = v85;
    v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
    v59 = v92(v57, 1, v85);
    v60 = v39;
    v75[1] = 0;
    if (v59 == 1)
    {
      Date.init()();
      sub_100036060(v57, &qword_1000EBA10);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v51, v57, v58);
    }
    v61 = v97;
    v62 = (uint64_t)v93;
    static Date.+ infix(_:_:)(v51, a6);
    v63 = *(void (**)(char *, uint64_t))(v60 + 8);
    v63(v51, v58);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v93 = v63;
    v63(v53, v58);
    objc_msgSend(v61, "setCreationDate:", isa);

    v65 = (int *)v78;
    sub_100031044(v95 + *(int *)(v78 + 44), v62, &qword_1000EBA10);
    if (v92(v62, 1, v58) == 1)
    {
      v66 = v76;
      Date.init()();
      sub_100036060(v62, &qword_1000EBA10);
    }
    else
    {
      v66 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v76, v62, v58);
    }
    v67 = v77;
    static Date.+ infix(_:_:)(v66, a6);
    v68 = v93;
    v93(v66, v58);
    v69 = Date._bridgeToObjectiveC()().super.isa;
    v68(v67, v58);
    objc_msgSend(v61, "setModificationDate:", v69);

    if (*(_QWORD *)(v95 + v65[12] + 8))
      v70 = String._bridgeToObjectiveC()();
    else
      v70 = 0;
    objc_msgSend(v61, "setTitle:", v70);

    v71 = v95;
    objc_msgSend(v61, "setIsPinned:", *(_BYTE *)(v95 + v65[13]) & 1);
    objc_msgSend(v61, "setIsSystemPaper:", *(_BYTE *)(v71 + v65[14]) & 1);
    objc_msgSend(v61, "setPaperStyleType:", word_1000C7F7C[*(char *)(v71 + v65[15])]);
    v72 = *(unsigned __int8 *)(v71 + v65[16]);
    if ((v72 & 1) != 0)
      v73 = 2;
    else
      v73 = 1;
    if (v72 == 2)
      v74 = 0;
    else
      v74 = v73;
    objc_msgSend(v61, "setPreferredBackgroundType:", v74);
    __asm { BR              X10 }
  }
  return result;
}

id sub_100043540(id a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  Class isa;
  id result;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  unint64_t _;
  void *_a;
  _QWORD aBlock[5];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;

  v14 = type metadata accessor for ICNoteArchiveModel(0);
  v15 = (uint64_t *)(v6 + *(int *)(v14 + 100));
  v16 = v15[1];
  if (!v16)
  {
    v22 = (uint64_t *)(v6 + *(int *)(v14 + 96));
    v23 = v22[10];
    if (!v23)
      return 0;
    v24 = v22[1];
    v25 = v22[2];
    v26 = v22[3];
    v27 = v22[4];
    v28 = v22[5];
    v67 = a1;
    v30 = v22[6];
    v29 = v22[7];
    v32 = v22[8];
    v31 = v22[9];
    v33 = v22[11];
    v34 = v22[12];
    v69 = *v22;
    v77 = *v22;
    v78 = v24;
    v79 = v25;
    v80 = v26;
    v81 = v27;
    v82 = v28;
    v83 = v30;
    v84 = v29;
    v85 = v32;
    v86 = v31;
    v65 = v24;
    v66 = v31;
    v87 = v23;
    v88 = v33;
    v89 = v34;
    _ = v25;
    sub_100049030(v24, v25);
    v70 = v27;
    v71 = v26;
    v35 = v27;
    v36 = v28;
    sub_100049030(v26, v35);
    v68 = v30;
    v37 = v30;
    v38 = v29;
    sub_100049030(v28, v37);
    sub_100049030(v29, v32);
    swift_bridgeObjectRetain(v23);
    sub_100049030(v33, v34);
    sub_10007F930(v67);
    v39 = objc_msgSend(v67, "noteData");
    if (v39)
    {
      v40 = v39;
      v41 = v34;
      v42 = v33;
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v40, "setData:", isa);

      v33 = v42;
      v34 = v41;
    }
    a1 = objc_msgSend(v67, "noteData");
    sub_100048F78(v69, v65, _, v71, v70, v36, v68, v38, v32, v66, v23, v33, v34);
    return a1;
  }
  v17 = v15[2];
  v18 = *v15;
  v19 = sub_1000475B4(a2);
  v20 = sub_1000872B8(v19, (uint64_t)a1, (uint64_t)&off_1000DA768, a3 & 0x101, a4, a5, a6, v18, v16, v17);
  swift_release(v19, v21);
  if (v7)
    return a1;
  _a = v20;
  result = objc_msgSend(a1, "textStorage");
  if (result)
  {
    v45 = result;
    objc_msgSend(result, "beginSkippingTimestampUpdates");
    v46 = objc_msgSend(v45, "mergeableString");
    v47 = objc_msgSend(v45, "ic_range");
    v49 = v48;
    v50 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
    objc_msgSend(v46, "replaceCharactersInRange:withAttributedString:", v47, v49, v50);

    v51 = objc_msgSend(v45, "mergeableString");
    ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)_a, 0);

    v52 = objc_msgSend(v45, "mergeableString");
    v72 = objc_msgSend(v45, "ic_range");
    v54 = v53;
    v55 = swift_allocObject(&unk_1000D7BF0, 24, 7);
    *(_QWORD *)(v55 + 16) = a1;
    v56 = swift_allocObject(&unk_1000D7C18, 32, 7);
    *(_QWORD *)(v56 + 16) = sub_100049098;
    *(_QWORD *)(v56 + 24) = v55;
    aBlock[4] = sub_1000490B0;
    v76 = v56;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100046FD8;
    aBlock[3] = &unk_1000D7C30;
    v57 = _Block_copy(aBlock);
    v58 = v76;
    v59 = a1;
    swift_retain(v56);
    swift_release(v58, v60);
    objc_msgSend(v52, "enumerateEditsInRange:usingBlock:", v72, v54, v57);

    _Block_release(v57);
    LOBYTE(v57) = swift_isEscapingClosureAtFileLocation(v56, "", 107, 144, 81, 1);
    result = (id)swift_release(v56, v61);
    if ((v57 & 1) == 0)
    {
      objc_msgSend(v45, "endSkippingTimestampUpdates");
      v62 = objc_msgSend(v59, "noteData");
      if (v62)
      {
        v63 = v62;
        objc_msgSend(v62, "setNeedsToBeSaved:", 1);

      }
      a1 = objc_msgSend(v59, "noteData");
      swift_release(v55, v64);

      return a1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000439F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t IsAlexandriaDemoModeEnabled;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v40[3];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;

  v3 = v2;
  v5 = sub_100030EE4(&qword_1000EBBB0);
  __chkstk_darwin(v5);
  v45 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000EBBB8);
  __chkstk_darwin(v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PersistedActivityEvent(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v42 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = _s14descr1000D81A9V8ActivityVMa(0);
  v13 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ICNoteArchiveModel(0) + 108));
  if (!v16)
    return 0;
  v48 = (unint64_t)_swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    goto LABEL_13;
  v40[1] = a1;
  v40[2] = v3;
  v18 = v16 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v44 = *(_QWORD *)(v13 + 72);
  v40[0] = v16;
  swift_bridgeObjectRetain(v16);
  v47 = v15;
  do
  {
    v46 = v17;
    v33 = sub_10004BAD4(v18, (uint64_t)v15, _s14descr1000D81A9V8ActivityVMa);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v33);
    ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    sub_10004F014((uint64_t)v9, 0.0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100036060((uint64_t)v9, &qword_1000EBBB8);
      v43 = sub_100036000(0, (unint64_t *)&qword_1000EB810, ICCloudSyncingObject_ptr);
      v19 = &v15[*(int *)(v41 + 44)];
      v20 = v10;
      v22 = *(_QWORD *)v19;
      v21 = *((_QWORD *)v19 + 1);
      v23 = v11;
      v24 = v9;
      v25 = v45;
      sub_10004F5B4(v45, 0.0);
      v26 = v22;
      v10 = v20;
      v27 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(forData:fallback:)(v26, v21, v25);
      v28 = v25;
      v9 = v24;
      v11 = v23;
      v15 = v47;
      sub_100036060(v28, &qword_1000EBBB0);
      v29 = sub_100042220((uint64_t)v15, _s14descr1000D81A9V8ActivityVMa);
    }
    else
    {
      v35 = v42;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v9, v10);
      sub_100036000(0, (unint64_t *)&qword_1000EB810, ICCloudSyncingObject_ptr);
      v36 = v45;
      sub_10004F5B4(v45, 0.0);
      v27 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(for:fallback:)(v35, v36);
      sub_100036060(v36, &qword_1000EBBB0);
      v37 = v35;
      v15 = v47;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v10);
      v29 = sub_100042220((uint64_t)v15, _s14descr1000D81A9V8ActivityVMa);
      if (!v27)
        goto LABEL_8;
    }
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v31 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v30 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v31 >= v30 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
    v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v27);
    specialized Array._endMutation()(v32);
LABEL_8:
    v18 += v44;
    v17 = v46 - 1;
  }
  while (v46 != 1);
  swift_bridgeObjectRelease(v40[0]);
LABEL_13:
  v38 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.setter();
  return ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter(v38);
}

uint64_t sub_100043DC4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000EBB80);
  sub_10003609C(v0, (uint64_t)qword_1000EBB80);
  return static Logger.archiving.getter();
}

uint64_t sub_100043E0C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100043E48 + 4 * byte_1000B4170[a1]))(0xD000000000000010, 0x80000001000B0770);
}

uint64_t sub_100043E48()
{
  return 0x6E65644965707974;
}

uint64_t sub_100043E6C()
{
  return 0x696669746E656469;
}

uint64_t sub_100043E8C()
{
  return 0x6954746E65726170;
}

unint64_t sub_100043EAC()
{
  return 0xD000000000000013;
}

uint64_t sub_100043F88()
{
  uint64_t v0;

  return v0 - 1;
}

BOOL sub_100044084(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100044098()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000440DC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100044104(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100044144()
{
  unsigned __int8 *v0;

  return sub_100043E0C(*v0);
}

uint64_t sub_10004414C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100047D7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100044170()
{
  return 0;
}

void sub_10004417C(_BYTE *a1@<X8>)
{
  *a1 = 25;
}

uint64_t sub_100044188(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004B594();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000441B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004B594();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000441D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000EBD18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10004B594();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICNoteArchiveModel.CodingKeys, &type metadata for ICNoteArchiveModel.CodingKeys, v11, v9, v10);
  LOBYTE(v58) = *(_BYTE *)v3;
  v65 = 0;
  v12 = sub_10004B5D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v58, &v65, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    LOBYTE(v58) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v58, v5);
    v15 = *(_QWORD *)(v3 + 24);
    v16 = *(_QWORD *)(v3 + 32);
    LOBYTE(v58) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v58, v5);
    v17 = *(_QWORD *)(v3 + 40);
    v18 = *(_QWORD *)(v3 + 48);
    LOBYTE(v58) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v58, v5);
    v19 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v58) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v58, v5);
    v20 = *(unsigned __int8 *)(v3 + 57);
    LOBYTE(v58) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v58, v5);
    v21 = (int *)type metadata accessor for ICNoteArchiveModel(0);
    v22 = v3 + v21[10];
    LOBYTE(v58) = 6;
    v23 = type metadata accessor for Date(0);
    v24 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v58, v5, v23, v24);
    v25 = v3 + v21[11];
    LOBYTE(v58) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v58, v5, v23, v24);
    v26 = (uint64_t *)(v3 + v21[12]);
    v27 = *v26;
    v28 = v26[1];
    LOBYTE(v58) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v58, v5);
    v29 = *(unsigned __int8 *)(v3 + v21[13]);
    LOBYTE(v58) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, &v58, v5);
    v30 = *(unsigned __int8 *)(v3 + v21[14]);
    LOBYTE(v58) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, &v58, v5);
    LOBYTE(v58) = *(_BYTE *)(v3 + v21[15]);
    v65 = 11;
    v31 = sub_10004B61C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &type metadata for ICNoteArchiveModel.PaperStyles, v31);
    LOBYTE(v58) = *(_BYTE *)(v3 + v21[16]);
    v65 = 12;
    v32 = sub_10004B660();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &type metadata for ICNoteArchiveModel.Backgrounds, v32);
    LOBYTE(v58) = *(_BYTE *)(v3 + v21[17]);
    v65 = 13;
    v33 = sub_10004B6A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &type metadata for ICNoteArchiveModel.AttachmentViewTypes, v33);
    v34 = (uint64_t *)(v3 + v21[18]);
    v35 = *v34;
    v36 = v34[1];
    LOBYTE(v58) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v58, v5);
    v37 = v3 + v21[19];
    LOBYTE(v58) = 15;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, &v58, v5, v23, v24);
    v38 = v3 + v21[20];
    LOBYTE(v58) = 16;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v38, &v58, v5, v23, v24);
    v39 = v3 + v21[21];
    LOBYTE(v58) = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v39, &v58, v5, v23, v24);
    v40 = v3 + v21[22];
    LOBYTE(v58) = 18;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v58, v5, v23, v24);
    v41 = v3 + v21[23];
    LOBYTE(v58) = 19;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v41, &v58, v5, v23, v24);
    v42 = (__int128 *)(v3 + v21[24]);
    v43 = *((_QWORD *)v42 + 12);
    v44 = v42[1];
    v58 = *v42;
    v59 = v44;
    v45 = v42[3];
    v60 = v42[2];
    v61 = v45;
    v46 = v42[5];
    v62 = v42[4];
    v63 = v46;
    v64 = v43;
    v65 = 20;
    v47 = sub_10004B6E8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &_s13EncryptedDataVN, v47);
    v48 = (__int128 *)(v3 + v21[25]);
    v49 = *((_QWORD *)v48 + 2);
    v58 = *v48;
    *(_QWORD *)&v59 = v49;
    v65 = 21;
    v50 = sub_10004B72C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &_s14descr1000DA611V16AttributedStringVN, v50);
    *(_QWORD *)&v58 = *(_QWORD *)(v3 + v21[26]);
    v65 = 22;
    v51 = sub_100030EE4(&qword_1000EBD60);
    v52 = sub_10004B948(&qword_1000EBD68, &qword_1000EBD70, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, v51, v52);
    *(_QWORD *)&v58 = *(_QWORD *)(v3 + v21[27]);
    v65 = 23;
    v53 = sub_100030EE4(&qword_1000EBD78);
    v54 = sub_10004B9CC(&qword_1000EBD80, &qword_1000EBD88, (uint64_t)&unk_1000B4A30, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, v53, v54);
    *(_QWORD *)&v58 = *(_QWORD *)(v3 + v21[28]);
    v65 = 24;
    v55 = sub_100030EE4(&qword_1000EBD90);
    v56 = sub_10004B770();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, v55, v56);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000448B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(void);
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  char v113;

  v80 = a2;
  v3 = sub_100030EE4(&qword_1000EBA10);
  v4 = __chkstk_darwin(v3);
  v79 = (uint64_t)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v78 = (uint64_t)&v75 - v7;
  v8 = __chkstk_darwin(v6);
  v77 = (uint64_t)&v75 - v9;
  v10 = __chkstk_darwin(v8);
  v76 = (uint64_t)&v75 - v11;
  v12 = __chkstk_darwin(v10);
  v81 = (uint64_t)&v75 - v13;
  v14 = __chkstk_darwin(v12);
  *(_QWORD *)&v86 = (char *)&v75 - v15;
  __chkstk_darwin(v14);
  *(_QWORD *)&v87 = (char *)&v75 - v16;
  v89 = sub_100030EE4(&qword_1000EBDA0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for ICNoteArchiveModel(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v22 = 3;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *((_WORD *)v22 + 28) = 514;
  v23 = &v22[*(int *)(v20 + 40)];
  v24 = type metadata accessor for Date(0);
  v25 = *(void (**)(void))(*(_QWORD *)(v24 - 8) + 56);
  v105 = (uint64_t)v23;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25)(v23, 1, 1, v24);
  v104 = &v22[v19[11]];
  v25();
  v26 = &v22[v19[12]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v103 = v26;
  *(_QWORD *)&v85 = v19[13];
  v22[v85] = 2;
  *(_QWORD *)&v84 = v19[14];
  v22[v84] = 2;
  *(_QWORD *)&v83 = v19[15];
  v22[v83] = 7;
  v82 = v19[16];
  v22[v82] = 2;
  v27 = v19[17];
  v22[v27] = 3;
  v28 = &v22[v19[18]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v99 = v28;
  v100 = &v22[v19[19]];
  v25();
  v97 = &v22[v19[20]];
  v25();
  v95 = &v22[v19[21]];
  v25();
  v94 = &v22[v19[22]];
  v25();
  v93 = &v22[v19[23]];
  v25();
  v29 = &v22[v19[24]];
  *((_QWORD *)v29 + 12) = 0;
  *((_OWORD *)v29 + 4) = 0u;
  *((_OWORD *)v29 + 5) = 0u;
  *((_OWORD *)v29 + 2) = 0u;
  *((_OWORD *)v29 + 3) = 0u;
  *(_OWORD *)v29 = 0u;
  *((_OWORD *)v29 + 1) = 0u;
  v30 = (uint64_t *)&v22[v19[25]];
  *v30 = 0;
  v30[1] = 0;
  v92 = v30;
  v30[2] = 0;
  v96 = v19[26];
  *(_QWORD *)&v22[v96] = 0;
  v98 = v19[27];
  *(_QWORD *)&v22[v98] = 0;
  v101 = v19[28];
  v102 = a1;
  *(_QWORD *)&v22[v101] = 0;
  v31 = a1[3];
  v32 = a1[4];
  sub_10004242C(a1, v31);
  v33 = sub_10004B594();
  v90 = v18;
  v34 = v91;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICNoteArchiveModel.CodingKeys, &type metadata for ICNoteArchiveModel.CodingKeys, v33, v31, v32);
  if (v34)
  {
    v36 = (uint64_t)v104;
    v35 = v105;
    sub_100035424(v102);
    v41 = v101;
    swift_bridgeObjectRelease(*((_QWORD *)v22 + 4));
    swift_bridgeObjectRelease(*((_QWORD *)v22 + 6));
    sub_100036060(v35, &qword_1000EBA10);
    sub_100036060(v36, &qword_1000EBA10);
    swift_bridgeObjectRelease(*((_QWORD *)v103 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v99 + 1));
    sub_100036060((uint64_t)v100, &qword_1000EBA10);
    sub_100036060((uint64_t)v97, &qword_1000EBA10);
    sub_100036060((uint64_t)v95, &qword_1000EBA10);
    sub_100036060((uint64_t)v94, &qword_1000EBA10);
    sub_100036060((uint64_t)v93, &qword_1000EBA10);
    sub_100048F78(*(_QWORD *)v29, *((_QWORD *)v29 + 1), *((_QWORD *)v29 + 2), *((_QWORD *)v29 + 3), *((_QWORD *)v29 + 4), *((_QWORD *)v29 + 5), *((_QWORD *)v29 + 6), *((_QWORD *)v29 + 7), *((_QWORD *)v29 + 8), *((_QWORD *)v29 + 9), *((_QWORD *)v29 + 10), *((_QWORD *)v29 + 11), *((_QWORD *)v29 + 12));
    sub_100048F48(*v92, v92[1], v92[2]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v96]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v98]);
    return swift_bridgeObjectRelease(*(_QWORD *)&v22[v41]);
  }
  else
  {
    *(_QWORD *)&v91 = v27;
    v113 = 0;
    v37 = sub_1000312F0();
    v38 = v89;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v106, &type metadata for ICArchiveModels, &v113, v89, &type metadata for ICArchiveModels, v37);
    v40 = (uint64_t)v104;
    v39 = v105;
    *v22 = v106;
    LOBYTE(v106) = 1;
    *((_QWORD *)v22 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v106, v38);
    *((_QWORD *)v22 + 2) = v43;
    LOBYTE(v106) = 2;
    *((_QWORD *)v22 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v38);
    *((_QWORD *)v22 + 4) = v44;
    LOBYTE(v106) = 3;
    *((_QWORD *)v22 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v38);
    *((_QWORD *)v22 + 6) = v45;
    LOBYTE(v106) = 4;
    v22[56] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v38);
    LOBYTE(v106) = 5;
    v22[57] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v38);
    LOBYTE(v106) = 6;
    v75 = sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v106, v38, v24);
    sub_100048A00(v87, v39);
    LOBYTE(v106) = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v106, v38, v24);
    sub_100048A00(v86, v40);
    LOBYTE(v106) = 8;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v38);
    v48 = v47;
    v49 = (uint64_t *)v103;
    swift_bridgeObjectRelease(*((_QWORD *)v103 + 1));
    *v49 = v46;
    v49[1] = v48;
    LOBYTE(v106) = 9;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v89);
    v22[v85] = v50;
    LOBYTE(v106) = 10;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v89);
    v22[v84] = v51;
    v113 = 11;
    sub_10004B7F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICNoteArchiveModel.PaperStyles, &v113, v89, &type metadata for ICNoteArchiveModel.PaperStyles);
    v22[v83] = v106;
    v113 = 12;
    sub_10004B838();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICNoteArchiveModel.Backgrounds, &v113, v89, &type metadata for ICNoteArchiveModel.Backgrounds);
    v22[v82] = v106;
    v113 = 13;
    sub_10004B87C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICNoteArchiveModel.AttachmentViewTypes, &v113, v89, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    v22[v91] = v106;
    LOBYTE(v106) = 14;
    v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v106, v89);
    v54 = v53;
    v55 = (uint64_t *)v99;
    swift_bridgeObjectRelease(*((_QWORD *)v99 + 1));
    *v55 = v52;
    v55[1] = v54;
    LOBYTE(v106) = 15;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v106, v89, v24);
    sub_100048A00(v81, (uint64_t)v100);
    LOBYTE(v106) = 16;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v106, v89, v24);
    sub_100048A00(v76, (uint64_t)v97);
    LOBYTE(v106) = 17;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v106, v89, v24);
    sub_100048A00(v77, (uint64_t)v95);
    LOBYTE(v106) = 18;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v106, v89, v24);
    sub_100048A00(v78, (uint64_t)v94);
    LOBYTE(v106) = 19;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v106, v89, v24);
    sub_100048A00(v79, (uint64_t)v93);
    v113 = 20;
    sub_10004B8C0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s13EncryptedDataVN, &v113, v89, &_s13EncryptedDataVN);
    v91 = v106;
    v87 = v107;
    v86 = v108;
    v85 = v109;
    v84 = v110;
    v83 = v111;
    v56 = v112;
    sub_100048F78(*(_QWORD *)v29, *((_QWORD *)v29 + 1), *((_QWORD *)v29 + 2), *((_QWORD *)v29 + 3), *((_QWORD *)v29 + 4), *((_QWORD *)v29 + 5), *((_QWORD *)v29 + 6), *((_QWORD *)v29 + 7), *((_QWORD *)v29 + 8), *((_QWORD *)v29 + 9), *((_QWORD *)v29 + 10), *((_QWORD *)v29 + 11), *((_QWORD *)v29 + 12));
    v57 = v87;
    *(_OWORD *)v29 = v91;
    *((_OWORD *)v29 + 1) = v57;
    v58 = v85;
    *((_OWORD *)v29 + 2) = v86;
    *((_OWORD *)v29 + 3) = v58;
    v59 = v83;
    *((_OWORD *)v29 + 4) = v84;
    *((_OWORD *)v29 + 5) = v59;
    *((_QWORD *)v29 + 12) = v56;
    v113 = 21;
    sub_10004B904();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14descr1000DA611V16AttributedStringVN, &v113, v89, &_s14descr1000DA611V16AttributedStringVN);
    v91 = v106;
    v60 = v107;
    v61 = v92;
    sub_100048F48(*v92, v92[1], v92[2]);
    *(_OWORD *)v61 = v91;
    v61[2] = v60;
    v62 = sub_100030EE4(&qword_1000EBD60);
    v113 = 22;
    sub_10004B948(&qword_1000EBDD8, &qword_1000EBDE0, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v62, &v113, v89, v62);
    v63 = v106;
    v64 = v96;
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v96]);
    *(_QWORD *)&v22[v64] = v63;
    v65 = sub_100030EE4(&qword_1000EBD78);
    v113 = 23;
    sub_10004B9CC(&qword_1000EBDE8, &qword_1000EBDF0, (uint64_t)&unk_1000B4A58, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, &v113, v89, v65);
    v66 = v106;
    v67 = v98;
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v98]);
    *(_QWORD *)&v22[v67] = v66;
    v68 = sub_100030EE4(&qword_1000EBD90);
    v113 = 24;
    sub_10004BA50();
    v69 = v68;
    v70 = v89;
    v71 = v68;
    v72 = v90;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v69, &v113, v89, v71);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v72, v70);
    v73 = v106;
    v74 = v101;
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v101]);
    *(_QWORD *)&v22[v74] = v73;
    sub_10004BAD4((uint64_t)v22, v80, type metadata accessor for ICNoteArchiveModel);
    sub_100035424(v102);
    return sub_100042220((uint64_t)v22, type metadata accessor for ICNoteArchiveModel);
  }
}

void sub_100045730(void *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  unsigned int v52;
  char v53;
  char v54;
  id v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  id v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  id v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  id v102;
  void *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  id v107;
  uint64_t v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  id v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  id v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  id v135;
  void *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  id v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  id v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  id v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  id v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  objc_class *v166;
  Class isa;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  id v174;
  Class v175;
  id v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  id v187;
  void *v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  void *v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  id v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  char *v235;
  uint64_t v236;
  _QWORD *v237;
  id v238;
  _QWORD *v239;
  char v240[8];
  _OWORD v241[6];
  uint64_t v242;

  v237 = a2;
  v236 = type metadata accessor for UUID(0);
  v213 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236);
  v212 = (char *)&v205 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = _s14descr1000D81A9V8ActivityVMa(0);
  v207 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v235 = (char *)&v205 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for Logger(0);
  v215 = *(_QWORD *)(v216 - 8);
  v8 = __chkstk_darwin(v216);
  v206 = (char *)&v205 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v208 = (char *)&v205 - v11;
  __chkstk_darwin(v10);
  v205 = (char *)&v205 - v12;
  v13 = sub_100030EE4(&qword_1000EBA10);
  v14 = __chkstk_darwin(v13);
  v225 = (char *)&v205 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  *(_QWORD *)&v234 = (char *)&v205 - v17;
  v18 = __chkstk_darwin(v16);
  v224 = (char *)&v205 - v19;
  v20 = __chkstk_darwin(v18);
  v222 = (char *)&v205 - v21;
  v22 = __chkstk_darwin(v20);
  v219 = (char *)&v205 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v205 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v205 - v27;
  *(_BYTE *)a3 = 3;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_WORD *)(a3 + 56) = 514;
  v29 = (int *)type metadata accessor for ICNoteArchiveModel(0);
  v30 = a3 + v29[10];
  v31 = type metadata accessor for Date(0);
  v32 = *(void (**)(void))(*(_QWORD *)(v31 - 8) + 56);
  v227 = v30;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32)(v30, 1, 1, v31);
  *(_QWORD *)&v229 = a3 + v29[11];
  v32();
  v33 = (uint64_t *)(a3 + v29[12]);
  *v33 = 0;
  v33[1] = 0;
  v214 = v33;
  v228 = v29[13];
  *(_BYTE *)(a3 + v228) = 2;
  *(_QWORD *)&v230 = v29[14];
  *(_BYTE *)(a3 + v230) = 2;
  *(_QWORD *)&v231 = v29[15];
  *(_BYTE *)(a3 + v231) = 7;
  *(_QWORD *)&v232 = v29[16];
  *(_BYTE *)(a3 + v232) = 2;
  *(_QWORD *)&v233 = v29[17];
  *(_BYTE *)(a3 + v233) = 3;
  v34 = (uint64_t *)(a3 + v29[18]);
  *v34 = 0;
  v34[1] = 0;
  v217 = a3 + v29[19];
  v32();
  v218 = a3 + v29[20];
  v32();
  v220 = a3 + v29[21];
  v32();
  v221 = a3 + v29[22];
  v32();
  v223 = a3 + v29[23];
  v32();
  v35 = a3 + v29[24];
  *(_QWORD *)(v35 + 96) = 0;
  *(_OWORD *)(v35 + 64) = 0u;
  *(_OWORD *)(v35 + 80) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)(v35 + 48) = 0u;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)(v35 + 16) = 0u;
  v36 = (uint64_t *)(a3 + v29[25]);
  *v36 = 0;
  v36[1] = 0;
  v209 = v36;
  v36[2] = 0;
  v226 = v29[26];
  *(_QWORD *)(a3 + v226) = 0;
  v210 = v29[27];
  *(_QWORD *)(a3 + v210) = 0;
  v211 = v29[28];
  *(_QWORD *)(a3 + v211) = 0;
  v238 = a1;
  v37 = objc_msgSend(a1, "identifier");
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;

  }
  else
  {
    v39 = 0;
    v41 = 0xE000000000000000;
  }
  *(_QWORD *)(a3 + 8) = v39;
  *(_QWORD *)(a3 + 16) = v41;
  v42 = (uint64_t)v238;
  v43 = objc_msgSend(v238, "creationDate");
  if (v43)
  {
    v44 = v43;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v45 = 0;
  }
  else
  {
    v45 = 1;
  }
  v46 = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v32)(v28, v45, 1, v31);
  sub_100048A00((uint64_t)v28, v227);
  v47 = objc_msgSend((id)v42, "modificationDate");
  if (v47)
  {
    v48 = v47;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v46 = 0;
  }
  v49 = v230;
  v50 = v229;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v32)(v26, v46, 1, v31);
  sub_100048A00((uint64_t)v26, v50);
  v51 = objc_msgSend((id)v42, "isPinned");
  *(_BYTE *)(a3 + v228) = v51;
  *(_BYTE *)(a3 + v49) = objc_msgSend((id)v42, "isSystemPaper");
  v52 = objc_msgSend((id)v42, "paperStyleType");
  if ((v52 & 0x80000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    swift_bridgeObjectRelease(v34);
    swift_release(v239, v204);
    __break(1u);
    return;
  }
  *(_BYTE *)(a3 + v231) = sub_100048700((unsigned __int16)v52);
  v53 = sub_1000487F4((unsigned __int16)objc_msgSend((id)v42, "preferredBackgroundType"));
  *(_BYTE *)(a3 + v232) = v53;
  v54 = sub_1000488E8((uint64_t)objc_msgSend((id)v42, "attachmentViewType"));
  *(_BYTE *)(a3 + v233) = v54;
  v55 = objc_msgSend((id)v42, "hostApplicationIdentifier");
  v56 = v234;
  if (v55)
  {
    v57 = v55;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v60 = v59;

  }
  else
  {
    v58 = 0;
    v60 = 0;
  }
  swift_bridgeObjectRelease(v34[1]);
  *v34 = v58;
  v34[1] = v60;
  v61 = v237;
  if ((*((_BYTE *)v237 + 50) & 1) != 0 || (*((_BYTE *)v237 + 51) & 1) != 0)
  {
    v62 = objc_msgSend((id)v42, "lastOpenedDate");
    if (v62)
    {
      v63 = v62;
      v64 = v219;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v65 = (uint64_t)v64;
      v66 = 0;
      v67 = v222;
    }
    else
    {
      v66 = 1;
      v67 = v222;
      v65 = (uint64_t)v219;
    }
    v68 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32)(v65, v66, 1, v31);
    sub_100048A00(v65, v217);
    v69 = objc_msgSend((id)v42, "lastActivitySummaryViewedDate");
    if (v69)
    {
      v70 = v69;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v68 = 0;
    }
    v71 = (uint64_t)v67;
    v72 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32)(v71, v68, 1, v31);
    sub_100048A00(v71, v218);
    v73 = objc_msgSend((id)v42, "lastActivityRecentUpdatesViewedDate");
    if (v73)
    {
      v74 = v73;
      v75 = v224;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v76 = (uint64_t)v75;
      v72 = 0;
    }
    else
    {
      v76 = (uint64_t)v224;
    }
    v77 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32)(v76, v72, 1, v31);
    sub_100048A00(v76, v220);
    v78 = objc_msgSend((id)v42, "recentUpdatesGenerationDate");
    if (v78)
    {
      v79 = v78;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v77 = 0;
    }
    v80 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32)(v56, v77, 1, v31);
    sub_100048A00(v56, v221);
    v81 = objc_msgSend((id)v42, "lastAttributionsViewedDate");
    if (v81)
    {
      v82 = v81;
      v83 = (uint64_t)v225;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v80 = 0;
    }
    else
    {
      v83 = (uint64_t)v225;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32)(v83, v80, 1, v31);
    sub_100048A00(v83, v223);
  }
  if ((*((_BYTE *)v61 + 52) & 1) != 0)
  {
    v92 = objc_msgSend((id)v42, "isPasswordProtectedAndLocked");
    v85 = (uint64_t)v235;
    if ((v92 & 1) != 0)
    {
      sub_100048ED0(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
      v93 = v216;
      if (qword_1000EB678 != -1)
        swift_once(&qword_1000EB678, sub_100043DC4);
      v94 = sub_10003609C(v93, (uint64_t)qword_1000EBB80);
      v95 = v215;
      v96 = v208;
      (*(void (**)(char *, uint64_t, uint64_t))(v215 + 16))(v208, v94, v93);
      v97 = (id)v42;
      v98 = Logger.logObject.getter(v97);
      v99 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v98, v99))
      {
        v100 = (uint8_t *)swift_slowAlloc(12, -1);
        v101 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v241[0] = v101;
        *(_DWORD *)v100 = 136315138;
        v102 = objc_msgSend(v97, "identifier");
        if (v102)
        {
          v103 = v102;
          v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
          v106 = v105;

        }
        else
        {
          v104 = 9732322;
          v106 = 0xA300000000000000;
        }
        v239 = (_QWORD *)sub_10005F12C(v104, v106, (uint64_t *)v241);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240, v100 + 4, v100 + 12);

        swift_bridgeObjectRelease(v106);
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "Pages Handoff: Note is locked â€” skipping {identifier: %s}", v100, 0xCu);
        swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v100, -1, -1);

        (*(void (**)(char *, uint64_t))(v215 + 8))(v96, v216);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v93);
      }
      return;
    }
    v107 = objc_msgSend((id)v42, "textStorage");
    v108 = v216;
    if (!v107)
    {
      if (qword_1000EB678 != -1)
        swift_once(&qword_1000EB678, sub_100043DC4);
      v131 = sub_10003609C(v108, (uint64_t)qword_1000EBB80);
      v119 = v215;
      v120 = v205;
      (*(void (**)(char *, uint64_t, uint64_t))(v215 + 16))(v205, v131, v108);
      v121 = (id)v42;
      v122 = Logger.logObject.getter(v121);
      v132 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v122, v132))
      {
        v133 = (uint8_t *)swift_slowAlloc(12, -1);
        v134 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v241[0] = v134;
        *(_DWORD *)v133 = 136315138;
        v135 = objc_msgSend(v121, "identifier");
        if (v135)
        {
          v136 = v135;
          v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
          v139 = v138;

        }
        else
        {
          v137 = 9732322;
          v139 = 0xA300000000000000;
        }
        v239 = (_QWORD *)sub_10005F12C(v137, v139, (uint64_t *)v241);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240, v133 + 4, v133 + 12);

        swift_bridgeObjectRelease(v139);
        _os_log_impl((void *)&_mh_execute_header, v122, v132, "Note doesn't have a text storage â€” skipping {identifier: %s}", v133, 0xCu);
        swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v134, -1, -1);
        swift_slowDealloc(v133, -1, -1);

        (*(void (**)(char *, uint64_t))(v215 + 8))(v205, v108);
        goto LABEL_68;
      }
      goto LABEL_55;
    }
LABEL_43:
    v109 = v107;
    v110 = objc_msgSend(v107, "mergeableString");
    v111 = (id)v42;
    sub_100048ED0(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048F08);
    v112 = sub_10008CA90(v110, v111, (uint64_t)v61);
    v114 = v113;
    v116 = v115;
    sub_100048ED0(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);

    v117 = v209;
    sub_100048F48(*v209, v209[1], v209[2]);
    *v117 = (uint64_t)v112;
    v117[1] = v114;
    v117[2] = v116;
    v42 = (uint64_t)v238;
    goto LABEL_69;
  }
  v84 = objc_msgSend((id)v42, "isPasswordProtected");
  v85 = (uint64_t)v235;
  if (!v84)
  {
    v107 = objc_msgSend((id)v42, "textStorage");
    if (!v107)
    {
      if (qword_1000EB678 != -1)
        goto LABEL_114;
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  v86 = objc_msgSend((id)v42, "noteData");
  if (v86)
  {
    v87 = v86;
    v88 = objc_msgSend(v86, "data");

    if (v88)
    {
      v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

    }
    else
    {
      v89 = 0;
      v91 = 0xC000000000000000;
    }
    v61 = v237;
  }
  else
  {
    v89 = 0;
    v91 = 0xC000000000000000;
  }
  v140 = v238;
  sub_10007FE3C(v140, v89, v91, v241);
  v234 = v241[0];
  v233 = v241[1];
  v232 = v241[2];
  v231 = v241[3];
  v230 = v241[4];
  v229 = v241[5];
  v141 = v242;

  sub_100048F78(*(_QWORD *)v35, *(_QWORD *)(v35 + 8), *(_QWORD *)(v35 + 16), *(_QWORD *)(v35 + 24), *(_QWORD *)(v35 + 32), *(_QWORD *)(v35 + 40), *(_QWORD *)(v35 + 48), *(_QWORD *)(v35 + 56), *(_QWORD *)(v35 + 64), *(_QWORD *)(v35 + 72), *(_QWORD *)(v35 + 80), *(_QWORD *)(v35 + 88), *(_QWORD *)(v35 + 96));
  v142 = v233;
  *(_OWORD *)v35 = v234;
  *(_OWORD *)(v35 + 16) = v142;
  v143 = v231;
  *(_OWORD *)(v35 + 32) = v232;
  *(_OWORD *)(v35 + 48) = v143;
  v144 = v229;
  *(_OWORD *)(v35 + 64) = v230;
  *(_OWORD *)(v35 + 80) = v144;
  *(_QWORD *)(v35 + 96) = v141;
  v145 = objc_msgSend(v140, "title");
  if (v145)
  {
    v146 = v145;
    v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
    v149 = v148;

  }
  else
  {
    v147 = 0;
    v149 = 0;
  }
  v150 = v226;
  v151 = v214;
  swift_bridgeObjectRelease(v214[1]);
  *v151 = v147;
  v151[1] = v149;
  v42 = (uint64_t)v238;
  while (1)
  {
    v152 = objc_msgSend((id)v42, "outlineState");
    v153 = objc_msgSend(v152, "collapsedUUIDs");

    v154 = sub_100042114((unint64_t *)&unk_1000EC360, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v155 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v153, v236, v154);

    swift_bridgeObjectRelease(*(_QWORD *)(a3 + v150));
    *(_QWORD *)(a3 + v150) = v155;
    if ((v61[6] & 1) == 0)
      break;
    v156 = (id)v42;
    v157 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter(v156);

    if ((unint64_t)v157 >> 62)
    {
      if (v157 < 0)
        v164 = v157;
      else
        v164 = v157 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v157);
      v42 = _CocoaArrayWrapper.endIndex.getter(v164);
      swift_bridgeObjectRelease(v157);
      if (!v42)
      {
LABEL_86:
        swift_bridgeObjectRelease(v157);
        v159 = _swiftEmptyArrayStorage;
LABEL_87:
        v165 = v210;
        swift_bridgeObjectRelease(*(_QWORD *)(a3 + v210));
        *(_QWORD *)(a3 + v165) = v159;
        v42 = (uint64_t)v238;
        break;
      }
    }
    else
    {
      v42 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v42)
        goto LABEL_86;
    }
    v239 = _swiftEmptyArrayStorage;
    sub_10003F2F4(0, v42 & ~(v42 >> 63), 0);
    if ((v42 & 0x8000000000000000) == 0)
    {
      v158 = 0;
      v159 = v239;
      v160 = v207;
      do
      {
        if ((v157 & 0xC000000000000001) != 0)
          v161 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v158, v157);
        else
          v161 = *(id *)(v157 + 8 * v158 + 32);
        sub_10004E12C(v161, v85);
        v239 = v159;
        v163 = v159[2];
        v162 = v159[3];
        if (v163 >= v162 >> 1)
        {
          sub_10003F2F4(v162 > 1, v163 + 1, 1);
          v160 = v207;
          v159 = v239;
        }
        ++v158;
        v159[2] = v163 + 1;
        sub_100048E8C(v85, (uint64_t)v159+ ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80))+ *(_QWORD *)(v160 + 72) * v163);
      }
      while (v42 != v158);
      swift_bridgeObjectRelease(v157);
      v61 = v237;
      goto LABEL_87;
    }
    __break(1u);
LABEL_114:
    swift_once(&qword_1000EB678, sub_100043DC4);
LABEL_47:
    v108 = v216;
    v118 = sub_10003609C(v216, (uint64_t)qword_1000EBB80);
    v119 = v215;
    v120 = v206;
    (*(void (**)(char *, uint64_t, uint64_t))(v215 + 16))(v206, v118, v108);
    v121 = (id)v42;
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v122, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v125 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v241[0] = v125;
      *(_DWORD *)v124 = 136315138;
      v126 = objc_msgSend(v121, "identifier");
      if (v126)
      {
        v127 = v126;
        v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
        v130 = v129;

      }
      else
      {
        v128 = 9732322;
        v130 = 0xA300000000000000;
      }
      v239 = (_QWORD *)sub_10005F12C(v128, v130, (uint64_t *)v241);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240, v124 + 4, v124 + 12);

      swift_bridgeObjectRelease(v130);
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Note doesn't have a text storage â€” skipping {identifier: %s}", v124, 0xCu);
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v124, -1, -1);

      (*(void (**)(char *, uint64_t))(v215 + 8))(v206, v108);
LABEL_68:
      v61 = v237;
      v42 = (uint64_t)v238;
      v85 = (uint64_t)v235;
    }
    else
    {
LABEL_55:

      (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v108);
      v61 = v237;
    }
LABEL_69:
    v150 = v226;
  }
  if ((*((_BYTE *)v61 + 49) & 1) != 0)
  {
    v166 = (objc_class *)objc_msgSend((id)v42, "replicaIDToUserIDDictData");
    isa = v166;
    if (v166)
    {
      v168 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v166);
      v170 = v169;

      v171 = v212;
      UUID.init()(v172);
      v173 = v213;
      if (v170 >> 60 == 15)
      {
        isa = 0;
      }
      else
      {
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100048E78(v168, v170);
      }
    }
    else
    {
      v171 = v212;
      UUID.init()(0);
      v173 = v213;
    }
    v174 = objc_allocWithZone((Class)ICMergeableDictionary);
    v175 = UUID._bridgeToObjectiveC()().super.isa;
    v176 = objc_msgSend(v174, "initWithData:replicaID:", isa, v175);

    (*(void (**)(char *, uint64_t))(v173 + 8))(v171, v236);
    v177 = objc_msgSend(v176, "allKeys");
    v178 = sub_100036000(0, (unint64_t *)&qword_1000EBB98, NSString_ptr);
    v179 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v177, v178);

    v180 = v238;
    v181 = sub_10004786C(v179, v180);
    swift_bridgeObjectRelease(v179);

    v182 = v181[2];
    if (v182)
    {
      sub_100030EE4(&qword_1000EB740);
      v183 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v182);
    }
    else
    {
      v183 = &_swiftEmptyDictionarySingleton;
    }
    v239 = v183;
    sub_100048A88((uint64_t)v181, 1, &v239);

    swift_bridgeObjectRelease(v181);
    v184 = v239;
    v185 = v211;
    swift_bridgeObjectRelease(*(_QWORD *)(a3 + v211));
    v186 = v237;
    sub_100048ED0(v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
    *(_QWORD *)(a3 + v185) = v184;
    v42 = (uint64_t)v238;
    if ((*((_BYTE *)v186 + 51) & 1) == 0)
      goto LABEL_90;
  }
  else
  {
    sub_100048ED0(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
    if ((*((_BYTE *)v61 + 51) & 1) == 0)
    {
LABEL_90:

      return;
    }
  }
  v187 = objc_msgSend((id)v42, "folder");
  v188 = v187;
  if (v187)
  {
    v189 = objc_msgSend(v187, "identifier");

    if (v189)
    {
      v188 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
      v191 = v190;

    }
    else
    {
      v188 = 0;
      v191 = 0;
    }
    v42 = (uint64_t)v238;
  }
  else
  {
    v191 = 0;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a3 + 32));
  *(_QWORD *)(a3 + 24) = v188;
  *(_QWORD *)(a3 + 32) = v191;
  v192 = objc_msgSend((id)v42, "folder");
  v193 = v192;
  if (v192)
  {
    v194 = objc_msgSend(v192, "title");

    v193 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v194);
    v196 = v195;

  }
  else
  {
    v196 = 0;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a3 + 48));
  *(_QWORD *)(a3 + 40) = v193;
  *(_QWORD *)(a3 + 48) = v196;
  v197 = v238;
  v198 = objc_msgSend(v238, "title");
  if (v198)
  {
    v199 = v198;
    v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
    v202 = v201;

  }
  else
  {
    v200 = 0;
    v202 = 0;
  }
  v203 = v214;
  swift_bridgeObjectRelease(v214[1]);
  *v203 = v200;
  v203[1] = v202;
  *(_BYTE *)(a3 + 56) = objc_msgSend(v197, "markedForDeletion");
  LOBYTE(v203) = objc_msgSend(v197, "isPasswordProtected");

  *(_BYTE *)(a3 + 57) = (_BYTE)v203;
}

uint64_t sub_100046DA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000448B8(a1, a2);
}

uint64_t sub_100046DBC(_QWORD *a1)
{
  return sub_1000441D8(a1);
}

void sub_100046DD0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  Class isa;
  id v19;
  Class v20;
  uint64_t v21;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a1, "timestamp");
  if (v16)
  {
    v17 = v16;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) != 1)
    {
      sub_100036060((uint64_t)v15, &qword_1000EBA10);
      isa = Int64._bridgeToObjectiveC()().super.super.isa;
      v19 = objc_msgSend(a1, "replicaID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v20 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      objc_msgSend(a3, "setNotesVersion:forReplicaID:", isa, v20);

      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
  }
  sub_100036060((uint64_t)v15, &qword_1000EBA10);
}

void sub_100046FD8(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t sub_10004701C(char a1)
{
  return *(_QWORD *)&aNone_2[8 * a1];
}

uint64_t sub_10004703C(char *a1, char *a2)
{
  return sub_100036534(*a1, *a2);
}

Swift::Int sub_100047048()
{
  char *v0;

  return sub_100054948(0, *v0);
}

uint64_t sub_100047054(uint64_t a1)
{
  char *v1;

  return sub_1000543CC(a1, *v1);
}

Swift::Int sub_10004705C(uint64_t a1)
{
  char *v1;

  return sub_100054948(a1, *v1);
}

unint64_t sub_100047064@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10004C40C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100047090@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10004701C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000470B8(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D6C00;
}

uint64_t sub_1000470C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004C340();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100047124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004C340();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100047170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000474B8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10004C454, (uint64_t (*)(void))sub_10004C340);
}

uint64_t sub_100047184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047544(a1, a2, a3, a4, (uint64_t (*)(void))sub_10004C454, (uint64_t (*)(void))sub_10004C340);
}

uint64_t sub_100047198(char a1)
{
  if ((a1 & 1) != 0)
    return 0x544847494CLL;
  else
    return 0x544C5541464544;
}

uint64_t sub_1000471CC(char *a1, char *a2)
{
  return sub_1000365B8(*a1, *a2);
}

Swift::Int sub_1000471D8()
{
  char *v0;

  return sub_100053CAC(*v0);
}

uint64_t sub_1000471E0(uint64_t a1)
{
  char *v1;

  return sub_10005440C(a1, *v1);
}

Swift::Int sub_1000471E8(uint64_t a1)
{
  char *v1;

  return sub_1000548D0(a1, *v1);
}

uint64_t sub_1000471F0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D6C28, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10004724C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100047198(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100047274(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D6C78;
}

uint64_t sub_100047284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004C384();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000472E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004C384();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10004732C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000474B8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10004C3C8, (uint64_t (*)(void))sub_10004C384);
}

uint64_t sub_100047340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047544(a1, a2, a3, a4, (uint64_t (*)(void))sub_10004C3C8, (uint64_t (*)(void))sub_10004C384);
}

uint64_t sub_100047354(char a1)
{
  return *(_QWORD *)&aPreview_2[8 * a1];
}

uint64_t sub_100047374(char *a1, char *a2)
{
  return sub_1000364B0(*a1, *a2);
}

Swift::Int sub_100047380()
{
  char *v0;

  return sub_100053D28(*v0);
}

uint64_t sub_100047388(uint64_t a1)
{
  char *v1;

  return sub_10005438C(a1, *v1);
}

Swift::Int sub_100047390(uint64_t a1)
{
  char *v1;

  return sub_1000549AC(a1, *v1);
}

unint64_t sub_100047398@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10004C498(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000473C4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100047354(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000473EC(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D6D08;
}

uint64_t sub_1000473FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004C2FC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100047458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004C2FC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000474A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000474B8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10004C4E0, (uint64_t (*)(void))sub_10004C2FC);
}

uint64_t sub_1000474B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11;
  uint64_t v12;

  v11 = a5();
  v12 = a6();
  return ArgumentDecodable<>.init(fromArgument:)(a1, a2, a3, a4, v11, v12, &protocol witness table for String);
}

uint64_t sub_100047530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047544(a1, a2, a3, a4, (uint64_t (*)(void))sub_10004C4E0, (uint64_t (*)(void))sub_10004C2FC);
}

uint64_t sub_100047544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11;
  uint64_t v12;

  v11 = a5();
  v12 = a6();
  return static ArgumentDecodable<>.typeSummary(forName:)(a1, a2, a3, a4, v11, v12, &protocol witness table for String);
}

uint64_t sub_1000475B4(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;

  sub_100030EE4(&qword_1000EBBC0);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = 0;
  v38 = (_QWORD *)result;
  v39 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v35 = v5;
  v36 = (unint64_t)(v7 + 63) >> 6;
  v37 = result + 64;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v40 = v3;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * i);
    v17 = v16[1];
    v41 = *v16;
    v18 = *(void **)(*(_QWORD *)(v39 + 56) + 8 * i);
    swift_bridgeObjectRetain(v17);
    v19 = v18;
    v20 = objc_msgSend(v19, "identifier");
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

    }
    else
    {
      v22 = 0;
      v24 = 0xE000000000000000;
    }
    v25 = objc_msgSend(v19, "typeUTI");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

    }
    else
    {
      v27 = 0;
      v29 = 0;
    }
    sub_100036000(0, (unint64_t *)&qword_1000EBBC8, ICTTAttachment_ptr);
    v30 = ICTTAttachment.init(identifier:universalTypeIdentifier:)(v22, v24, v27, v29);

    result = (uint64_t)v38;
    *(_QWORD *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v31 = (_QWORD *)(v38[6] + 16 * i);
    *v31 = v41;
    v31[1] = v17;
    *(_QWORD *)(v38[7] + 8 * i) = v30;
    v32 = v38[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v38[2] = v34;
    v3 = v40;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_30;
    if (v12 >= v36)
      return result;
    v13 = *(_QWORD *)(v35 + 8 * v12);
    v14 = v3 + 1;
    if (!v13)
    {
      v14 = v3 + 2;
      if (v3 + 2 >= v36)
        return result;
      v13 = *(_QWORD *)(v35 + 8 * v14);
      if (!v13)
      {
        v14 = v3 + 3;
        if (v3 + 3 >= v36)
          return result;
        v13 = *(_QWORD *)(v35 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v9 = (v13 - 1) & v13;
    v40 = v14;
  }
  v15 = v3 + 4;
  if (v3 + 4 >= v36)
    return result;
  v13 = *(_QWORD *)(v35 + 8 * v15);
  if (v13)
  {
    v14 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v36)
      return result;
    v13 = *(_QWORD *)(v35 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

_QWORD *sub_10004786C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  id v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;

  v3 = v2;
  v57 = a2;
  v5 = sub_100030EE4(&qword_1000EBBA0);
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v56 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v61 = (char *)&v50 - v12;
  v13 = sub_100030EE4(&qword_1000EBBA8);
  __chkstk_darwin(v13);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100030EE4(&qword_1000EB738);
  v17 = *(_QWORD *)(v16 - 8);
  v63 = v16;
  v64 = v17;
  v18 = __chkstk_darwin(v16);
  v62 = (uint64_t)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v55 = (uint64_t)&v50 - v20;
  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v21)
  {
    v50 = v3;
    v60 = a1 & 0xC000000000000001;
    v22 = _swiftEmptyArrayStorage;
    v23 = 4;
    v53 = v7;
    v54 = a1;
    v51 = v15;
    v52 = v9;
    v59 = v21;
    while (1)
    {
      v66 = v22;
      v24 = v60 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, a1) : *(id *)(a1 + 8 * v23);
      v25 = v24;
      if (__OFADD__(v23 - 4, 1))
        break;
      v65 = v23 - 3;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;
      UUID.init(uuidString:)(v26);
      swift_bridgeObjectRelease(v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_100036060((uint64_t)v7, &qword_1000EBBA0);
        v29 = 1;
      }
      else
      {
        v58 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v58(v61, v7, v8);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v31 = objc_msgSend(v57, "userIDForReplicaID:", isa);

        v32 = v9;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v35 = v34;

        v36 = objc_msgSend((id)objc_opt_self(NSUUID), "CR_unknown");
        v37 = v56;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

        v38 = UUID.uuidString.getter();
        v40 = v39;
        v41 = *(void (**)(char *, uint64_t))(v32 + 8);
        v41(v37, v8);
        if (v33 == v38 && v35 == v40)
        {
          swift_bridgeObjectRelease(v35);
        }
        else
        {
          v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v38, v40, 0);
          swift_bridgeObjectRelease(v40);
          if ((v42 & 1) == 0)
          {
            v15 = v51;
            v43 = (uint64_t *)&v51[*(int *)(v63 + 48)];
            v58(v51, v61, v8);
            v29 = 0;
            *v43 = v33;
            v43[1] = v35;
            v7 = v53;
            a1 = v54;
            v9 = v52;
            goto LABEL_18;
          }
        }
        v41(v61, v8);
        swift_bridgeObjectRelease(v35);
        v29 = 1;
        v7 = v53;
        a1 = v54;
        v15 = v51;
        v9 = v52;
      }
LABEL_18:
      v3 = v63;
      v44 = v64;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v15, v29, 1, v63);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v15, 1, v3) == 1)
      {
        sub_100036060((uint64_t)v15, &qword_1000EBBA8);
        v22 = v66;
      }
      else
      {
        v45 = v55;
        sub_1000490E8((uint64_t)v15, v55, &qword_1000EB738);
        sub_1000490E8(v45, v62, &qword_1000EB738);
        v22 = v66;
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
          v22 = (_QWORD *)sub_100033134(0, v22[2] + 1, 1, (unint64_t)v22);
        v47 = v22[2];
        v46 = v22[3];
        v3 = v47 + 1;
        if (v47 >= v46 >> 1)
          v22 = (_QWORD *)sub_100033134(v46 > 1, v47 + 1, 1, (unint64_t)v22);
        v22[2] = v3;
        sub_1000490E8(v62, (uint64_t)v22+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(_QWORD *)(v64 + 72) * v47, &qword_1000EB738);
      }
      ++v23;
      if (v65 == v59)
      {
        swift_bridgeObjectRelease(a1);
        return v22;
      }
    }
    __break(1u);
LABEL_26:
    if (a1 < 0)
      v48 = a1;
    else
      v48 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v21 = _CocoaArrayWrapper.endIndex.getter(v48);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100047D7C(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  v3 = a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001000B0770)
  {
    v6 = 0x80000001000B0770;
LABEL_16:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000B0770, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_16;
  }
  if (a1 == 0x6954746E65726170 && a2 == 0xEB00000000656C74
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6954746E65726170, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x80000001000B0790;
    if (a2 == 0x80000001000B0790)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000B0790, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v7);
    return 4;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x80000001000B07B0;
    if (a2 == 0x80000001000B07B0)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000B07B0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v8);
    return 5;
  }
  if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6;
  }
  if (a1 == 0x6465696669646F6DLL && a2 == 0xEA00000000007441
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6465696669646F6DLL, 0xEA00000000007441, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8;
  }
  if (a1 == 0x64656E6E69507369 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x64656E6E69507369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9;
  }
  if (a1 == 0x4E6B636975517369 && a2 == 0xEB0000000065746FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6B636975517369, 0xEB0000000065746FLL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 10;
  }
  if (a1 == 0x7974537265706170 && a2 == 0xEA0000000000656CLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7974537265706170, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 11;
  }
  if (a1 == 0xD000000000000013)
  {
    v9 = 0x80000001000B07D0;
    if (a2 == 0x80000001000B07D0)
      goto LABEL_59;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000B07D0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v9);
    return 12;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001000B07F0)
  {
    v10 = 0x80000001000B07F0;
LABEL_65:
    swift_bridgeObjectRelease(v10);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000B07F0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_65;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001000B0810)
  {
    v11 = 0x80000001000B0810;
LABEL_71:
    swift_bridgeObjectRelease(v11);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001000B0810, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_71;
  }
  if (a1 == 0x7441646577656976 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7441646577656976, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 15;
  }
  if (a1 == 0xD000000000000017)
  {
    v12 = 0x80000001000B0830;
    if (a2 == 0x80000001000B0830)
      goto LABEL_80;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001000B0830, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_80:
    swift_bridgeObjectRelease(v12);
    return 16;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001000B0850)
  {
    v13 = 0x80000001000B0850;
LABEL_86:
    swift_bridgeObjectRelease(v13);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001000B0850, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_86;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001000B0870)
  {
    v14 = 0x80000001000B0870;
LABEL_92:
    swift_bridgeObjectRelease(v14);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001000B0870, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_92;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001000B0890)
  {
    v15 = 0x80000001000B0890;
LABEL_98:
    swift_bridgeObjectRelease(v15);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000B0890, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_98;
  }
  if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xED00006174614464, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 20;
  }
  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 21;
  }
  if (a1 == 0xD000000000000017)
  {
    v16 = 0x80000001000B08B0;
    if (a2 == 0x80000001000B08B0)
      goto LABEL_111;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001000B08B0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_111:
    swift_bridgeObjectRelease(v16);
    return 22;
  }
  if (a1 == 0x6974697669746361 && a2 == 0xEA00000000007365
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6974697669746361, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 23;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x80000001000B08D0)
  {
    swift_bridgeObjectRelease(0x80000001000B08D0);
    return 24;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x80000001000B08D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 24;
    else
      return 25;
  }
}

unint64_t sub_100048700(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 < 8)
    return 0x605040302010007uLL >> (8 * a1);
  if (qword_1000EB678 != -1)
    swift_once(&qword_1000EB678, sub_100043DC4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10003609C(v2, (uint64_t)qword_1000EBB80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown paper style â€” returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 7;
}

uint64_t sub_1000487F4(unsigned __int16 a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 < 3u)
    return 0x10002u >> (8 * a1);
  if (qword_1000EB678 != -1)
    swift_once(&qword_1000EB678, sub_100043DC4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10003609C(v2, (uint64_t)qword_1000EBB80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown preferred background color â€” returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 2;
}

uint64_t sub_1000488E8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if ((unsigned __int16)result >= 3u)
  {
    if (qword_1000EB678 != -1)
      swift_once(&qword_1000EB678, sub_100043DC4);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10003609C(v1, (uint64_t)qword_1000EBB80);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unknown attachment view type â€” returning default", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ICNoteArchiveModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EBC38;
  if (!qword_1000EBC38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ICNoteArchiveModel);
  return result;
}

uint64_t sub_100048A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EBA10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t sub_100048A88(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(unint64_t, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100030EE4(&qword_1000EB738);
  result = __chkstk_darwin(v11);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v65 = v3;
    v17 = &v15[*(int *)(result + 48)];
    v63 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v18 = a1 + v63;
    v70 = *(_QWORD *)(v13 + 72);
    v67 = a1;
    swift_bridgeObjectRetain(a1);
    sub_100031044(v18, (uint64_t)v15, &qword_1000EB738);
    v71 = v8;
    v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
    v69 = v15;
    v74 = v7;
    v64 = v19;
    v19((unint64_t)v10, v15, v7);
    v20 = *(_QWORD *)v17;
    v21 = *((_QWORD *)v17 + 1);
    v68 = v17;
    v72 = a3;
    v22 = *a3;
    v24 = sub_10005F908((uint64_t)v10);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v28 = v23;
    v29 = *(_QWORD *)(v22 + 24);
    v73 = v10;
    v66 = v20;
    if (v29 < v27)
    {
      sub_10005A274(v27, a2 & 1);
      v30 = sub_10005F908((uint64_t)v10);
      if ((v28 & 1) != (v31 & 1))
      {
LABEL_28:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v74);
        __break(1u);
        return result;
      }
      v24 = v30;
      v33 = v71;
      v32 = v72;
      v34 = v74;
      if ((v28 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v33 + 8))(v73, v34);
      v35 = (_QWORD *)(*(_QWORD *)(*v32 + 56) + 16 * v24);
      swift_bridgeObjectRelease(v35[1]);
      *v35 = v66;
      v35[1] = v21;
      v36 = v16 - 1;
      if (v16 == 1)
        return swift_bridgeObjectRelease(v67);
LABEL_16:
      v42 = v67 + v70 + v63;
      while (1)
      {
        v44 = (uint64_t)v69;
        sub_100031044(v42, (uint64_t)v69, &qword_1000EB738);
        v45 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
        v46 = (uint64_t)v73;
        v45(v73, v44, v34);
        v47 = *(_QWORD *)v68;
        v48 = *((_QWORD *)v68 + 1);
        v49 = *v32;
        v51 = sub_10005F908(v46);
        v52 = *(_QWORD *)(v49 + 16);
        v53 = (v50 & 1) == 0;
        v54 = v52 + v53;
        if (__OFADD__(v52, v53))
          goto LABEL_26;
        v55 = v50;
        if (*(_QWORD *)(v49 + 24) < v54)
        {
          sub_10005A274(v54, 1);
          v56 = sub_10005F908(v46);
          if ((v55 & 1) != (v57 & 1))
            goto LABEL_28;
          v51 = v56;
        }
        v32 = v72;
        if ((v55 & 1) != 0)
        {
          v33 = v71;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v74);
          v43 = (_QWORD *)(*(_QWORD *)(*v32 + 56) + 16 * v51);
          swift_bridgeObjectRelease(v43[1]);
          *v43 = v47;
          v43[1] = v48;
        }
        else
        {
          v58 = (_QWORD *)*v72;
          *(_QWORD *)(*v72 + 8 * (v51 >> 6) + 64) |= 1 << v51;
          v33 = v71;
          v45((char *)(v58[6] + *(_QWORD *)(v71 + 72) * v51), (uint64_t)v73, v74);
          v59 = (_QWORD *)(v58[7] + 16 * v51);
          *v59 = v47;
          v59[1] = v48;
          v60 = v58[2];
          v40 = __OFADD__(v60, 1);
          v61 = v60 + 1;
          if (v40)
            goto LABEL_27;
          v58[2] = v61;
        }
        v42 += v70;
        --v36;
        v34 = v74;
        if (!v36)
          return swift_bridgeObjectRelease(v67);
      }
    }
    v33 = v71;
    v32 = v72;
    v34 = v74;
    if ((a2 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_10005B934();
      v32 = v72;
      if ((v28 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v37 = (_QWORD *)*v32;
    *(_QWORD *)(*v32 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v64(v37[6] + *(_QWORD *)(v33 + 72) * v24, v73, v34);
    v38 = (_QWORD *)(v37[7] + 16 * v24);
    *v38 = v66;
    v38[1] = v21;
    v39 = v37[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v37[2] = v41;
    v34 = v74;
    v36 = v16 - 1;
    if (v16 == 1)
      return swift_bridgeObjectRelease(v67);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_100048E78(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100040B10(result, a2);
  return result;
}

uint64_t sub_100048E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s14descr1000D81A9V8ActivityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100048ED0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_100048F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100048F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_100048F78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t result;

  if (a11)
  {
    sub_100040B10(a2, a3);
    sub_100040B10(a4, a5);
    sub_100040B10(a6, a7);
    sub_100040B10(a8, a9);
    swift_bridgeObjectRelease(a11);
    return sub_100040B10(a12, a13);
  }
  return result;
}

uint64_t sub_100049030(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100049074()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100049098(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100046DD0(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1000490A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000490B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000490D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000490E0(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_1000490E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100030EE4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *sub_10004912C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[5];
    v10 = a2[6];
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v11 = a3[10];
    __dst = (void *)(a1 + v11);
    v12 = (char *)a2 + v11;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v16 = v10;
    v17 = v15;
    swift_bridgeObjectRetain(v16);
    if (v15(v12, 1, v13))
    {
      v18 = sub_100030EE4(&qword_1000EBA10);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v20 = a3[11];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    if (v17((char *)a2 + v20, 1, v13))
    {
      v23 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v21, v22, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v21, 0, 1, v13);
    }
    v24 = a3[12];
    v25 = a3[13];
    v26 = (_QWORD *)((char *)v4 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    *((_BYTE *)v4 + v25) = *((_BYTE *)a2 + v25);
    v29 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *((_BYTE *)v4 + v29) = *((_BYTE *)a2 + v29);
    v30 = a3[17];
    *((_BYTE *)v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    *((_BYTE *)v4 + v30) = *((_BYTE *)a2 + v30);
    v31 = a3[18];
    v32 = a3[19];
    v33 = (_QWORD *)((char *)v4 + v31);
    v34 = (uint64_t *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = (char *)v4 + v32;
    v37 = (char *)a2 + v32;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v35);
    if (v17(v37, 1, v13))
    {
      v38 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v36, v37, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v36, 0, 1, v13);
    }
    v39 = a3[20];
    v40 = (char *)v4 + v39;
    v41 = (char *)a2 + v39;
    if (v17((char *)a2 + v39, 1, v13))
    {
      v42 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v40, v41, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v40, 0, 1, v13);
    }
    v43 = a3[21];
    v44 = (char *)v4 + v43;
    v45 = (char *)a2 + v43;
    if (v17((char *)a2 + v43, 1, v13))
    {
      v46 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v44, v45, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v44, 0, 1, v13);
    }
    v47 = a3[22];
    v48 = (char *)v4 + v47;
    v49 = (char *)a2 + v47;
    if (v17((char *)a2 + v47, 1, v13))
    {
      v50 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v48, v49, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v48, 0, 1, v13);
    }
    v51 = a3[23];
    v52 = (char *)v4 + v51;
    v53 = (char *)a2 + v51;
    if (v17((char *)a2 + v51, 1, v13))
    {
      v54 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v52, v53, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v52, 0, 1, v13);
    }
    v55 = a3[24];
    v56 = (_QWORD *)((char *)v4 + v55);
    v57 = (uint64_t *)((char *)a2 + v55);
    if (*(uint64_t *)((char *)a2 + v55 + 80))
    {
      v58 = v57[1];
      *v56 = *v57;
      v59 = v57[2];
      sub_100049030(v58, v59);
      v56[1] = v58;
      v56[2] = v59;
      v60 = v57[3];
      v61 = v57[4];
      sub_100049030(v60, v61);
      v56[3] = v60;
      v56[4] = v61;
      v62 = v57[5];
      v63 = v57[6];
      sub_100049030(v62, v63);
      v56[5] = v62;
      v56[6] = v63;
      v64 = v57[7];
      v65 = v57[8];
      sub_100049030(v64, v65);
      v56[7] = v64;
      v56[8] = v65;
      v66 = v57[10];
      v56[9] = v57[9];
      v56[10] = v66;
      v67 = v57[11];
      v68 = v57[12];
      swift_bridgeObjectRetain(v66);
      sub_100049030(v67, v68);
      v56[11] = v67;
      v56[12] = v68;
    }
    else
    {
      v69 = *((_OWORD *)v57 + 5);
      *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
      *((_OWORD *)v56 + 5) = v69;
      v56[12] = v57[12];
      v70 = *((_OWORD *)v57 + 1);
      *(_OWORD *)v56 = *(_OWORD *)v57;
      *((_OWORD *)v56 + 1) = v70;
      v71 = *((_OWORD *)v57 + 3);
      *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
      *((_OWORD *)v56 + 3) = v71;
    }
    v72 = a3[25];
    v73 = (_QWORD *)((char *)v4 + v72);
    v74 = (uint64_t *)((char *)a2 + v72);
    v75 = v74[1];
    if (v75)
    {
      *v73 = *v74;
      v73[1] = v75;
      v76 = v74[2];
      v73[2] = v76;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v76);
    }
    else
    {
      *(_OWORD *)v73 = *(_OWORD *)v74;
      v73[2] = v74[2];
    }
    v77 = a3[26];
    v78 = a3[27];
    v79 = *(uint64_t *)((char *)a2 + v77);
    *(_QWORD *)((char *)v4 + v77) = v79;
    v80 = *(uint64_t *)((char *)a2 + v78);
    *(_QWORD *)((char *)v4 + v78) = v80;
    v81 = a3[28];
    v82 = *(uint64_t *)((char *)a2 + v81);
    *(_QWORD *)((char *)v4 + v81) = v82;
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v82);
  }
  return v4;
}

uint64_t sub_1000496A0(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  v4 = (char *)a1 + a2[10];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (char *)a1 + a2[11];
  if (!v7(v8, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[18] + 8));
  v9 = (char *)a1 + a2[19];
  if (!v7(v9, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v10 = (char *)a1 + a2[20];
  if (!v7(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  v11 = (char *)a1 + a2[21];
  if (!v7(v11, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v12 = (char *)a1 + a2[22];
  if (!v7(v12, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v13 = (char *)a1 + a2[23];
  if (!v7(v13, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  v14 = (_QWORD *)((char *)a1 + a2[24]);
  if (v14[10])
  {
    sub_100040B10(v14[1], v14[2]);
    sub_100040B10(v14[3], v14[4]);
    sub_100040B10(v14[5], v14[6]);
    sub_100040B10(v14[7], v14[8]);
    swift_bridgeObjectRelease(v14[10]);
    sub_100040B10(v14[11], v14[12]);
  }
  v15 = (char *)a1 + a2[25];
  v16 = *((_QWORD *)v15 + 1);
  if (v16)
  {
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 2));
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[27]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[28]));
}

uint64_t sub_1000498CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v10 = a3[10];
  __dst = (void *)(a1 + v10);
  v11 = (const void *)(a2 + v10);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v15 = v9;
  v16 = v14;
  swift_bridgeObjectRetain(v15);
  if (v14((uint64_t)v11, 1, v12))
  {
    v17 = sub_100030EE4(&qword_1000EBA10);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v18 = a3[11];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (v16(a2 + v18, 1, v12))
  {
    v21 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v19, v20, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
  }
  v22 = a3[12];
  v23 = a3[13];
  v24 = (_QWORD *)(a1 + v22);
  v25 = (_QWORD *)(a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v27 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  v28 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[18];
  v30 = a3[19];
  v31 = (_QWORD *)(a1 + v29);
  v32 = (_QWORD *)(a2 + v29);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = (void *)(a1 + v30);
  v35 = (const void *)(a2 + v30);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v33);
  if (v16((uint64_t)v35, 1, v12))
  {
    v36 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v34, v35, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v34, 0, 1, v12);
  }
  v37 = a3[20];
  v38 = (void *)(a1 + v37);
  v39 = (const void *)(a2 + v37);
  if (v16(a2 + v37, 1, v12))
  {
    v40 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v38, v39, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
  }
  v41 = a3[21];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  if (v16(a2 + v41, 1, v12))
  {
    v44 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v42, v43, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v42, 0, 1, v12);
  }
  v45 = a3[22];
  v46 = (void *)(a1 + v45);
  v47 = (const void *)(a2 + v45);
  if (v16(a2 + v45, 1, v12))
  {
    v48 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v46, v47, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v46, 0, 1, v12);
  }
  v49 = a3[23];
  v50 = (void *)(a1 + v49);
  v51 = (const void *)(a2 + v49);
  if (v16(a2 + v49, 1, v12))
  {
    v52 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v50, v51, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
  }
  v53 = a3[24];
  v54 = (_QWORD *)(a1 + v53);
  v55 = (_QWORD *)(a2 + v53);
  if (*(_QWORD *)(a2 + v53 + 80))
  {
    v56 = v55[1];
    *v54 = *v55;
    v57 = v55[2];
    sub_100049030(v56, v57);
    v54[1] = v56;
    v54[2] = v57;
    v58 = v55[3];
    v59 = v55[4];
    sub_100049030(v58, v59);
    v54[3] = v58;
    v54[4] = v59;
    v60 = v55[5];
    v61 = v55[6];
    sub_100049030(v60, v61);
    v54[5] = v60;
    v54[6] = v61;
    v62 = v55[7];
    v63 = v55[8];
    sub_100049030(v62, v63);
    v54[7] = v62;
    v54[8] = v63;
    v64 = v55[10];
    v54[9] = v55[9];
    v54[10] = v64;
    v65 = v55[11];
    v66 = v55[12];
    swift_bridgeObjectRetain(v64);
    sub_100049030(v65, v66);
    v54[11] = v65;
    v54[12] = v66;
  }
  else
  {
    v67 = *((_OWORD *)v55 + 5);
    *((_OWORD *)v54 + 4) = *((_OWORD *)v55 + 4);
    *((_OWORD *)v54 + 5) = v67;
    v54[12] = v55[12];
    v68 = *((_OWORD *)v55 + 1);
    *(_OWORD *)v54 = *(_OWORD *)v55;
    *((_OWORD *)v54 + 1) = v68;
    v69 = *((_OWORD *)v55 + 3);
    *((_OWORD *)v54 + 2) = *((_OWORD *)v55 + 2);
    *((_OWORD *)v54 + 3) = v69;
  }
  v70 = a3[25];
  v71 = (_QWORD *)(a1 + v70);
  v72 = (_QWORD *)(a2 + v70);
  v73 = v72[1];
  if (v73)
  {
    *v71 = *v72;
    v71[1] = v73;
    v74 = v72[2];
    v71[2] = v74;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
  }
  else
  {
    *(_OWORD *)v71 = *(_OWORD *)v72;
    v71[2] = v72[2];
  }
  v75 = a3[26];
  v76 = a3[27];
  v77 = *(_QWORD *)(a2 + v75);
  *(_QWORD *)(a1 + v75) = v77;
  v78 = *(_QWORD *)(a2 + v76);
  *(_QWORD *)(a1 + v76) = v78;
  v79 = a3[28];
  v80 = *(_QWORD *)(a2 + v79);
  *(_QWORD *)(a1 + v79) = v80;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v80);
  return a1;
}

uint64_t sub_100049E14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = a3[10];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = a3[11];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = v17((void *)(a1 + v21), 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    v26 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = a3[12];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v32 = a3[18];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[19];
  v38 = (void *)(a1 + v37);
  v39 = (void *)(a2 + v37);
  v40 = v17((void *)(a1 + v37), 1, v15);
  v41 = v17(v39, 1, v15);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v38, v39, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v38, 0, 1, v15);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v41)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v38, v15);
LABEL_18:
    v42 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v38, v39, v15);
LABEL_19:
  v43 = a3[20];
  v44 = (void *)(a1 + v43);
  v45 = (void *)(a2 + v43);
  v46 = v17((void *)(a1 + v43), 1, v15);
  v47 = v17(v45, 1, v15);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v44, v45, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v44, 0, 1, v15);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v44, v15);
LABEL_24:
    v48 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v44, v45, v15);
LABEL_25:
  v49 = a3[21];
  v50 = (void *)(a1 + v49);
  v51 = (void *)(a2 + v49);
  v52 = v17((void *)(a1 + v49), 1, v15);
  v53 = v17(v51, 1, v15);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v50, v51, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v50, 0, 1, v15);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v53)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v50, v15);
LABEL_30:
    v54 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v50, v51, v15);
LABEL_31:
  v55 = a3[22];
  v56 = (void *)(a1 + v55);
  v57 = (void *)(a2 + v55);
  v58 = v17((void *)(a1 + v55), 1, v15);
  v59 = v17(v57, 1, v15);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v56, v57, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v15);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v56, v15);
LABEL_36:
    v60 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v56, v57, v15);
LABEL_37:
  v61 = a3[23];
  v62 = (void *)(a1 + v61);
  v63 = (void *)(a2 + v61);
  v64 = v17((void *)(a1 + v61), 1, v15);
  v65 = v17(v63, 1, v15);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v62, v63, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v62, 0, 1, v15);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v65)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v62, v15);
LABEL_42:
    v66 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v62, v63, v15);
LABEL_43:
  v67 = a3[24];
  v68 = (_QWORD *)(a1 + v67);
  v69 = (_QWORD *)(a2 + v67);
  v70 = *(_QWORD *)(a1 + v67 + 80);
  v71 = *(_QWORD *)(a2 + v67 + 80);
  if (v70)
  {
    if (v71)
    {
      *v68 = *v69;
      v72 = v69[1];
      v73 = v69[2];
      sub_100049030(v72, v73);
      v74 = v68[1];
      v75 = v68[2];
      v68[1] = v72;
      v68[2] = v73;
      sub_100040B10(v74, v75);
      v76 = v69[3];
      v77 = v69[4];
      sub_100049030(v76, v77);
      v78 = v68[3];
      v79 = v68[4];
      v68[3] = v76;
      v68[4] = v77;
      sub_100040B10(v78, v79);
      v80 = v69[5];
      v81 = v69[6];
      sub_100049030(v80, v81);
      v82 = v68[5];
      v83 = v68[6];
      v68[5] = v80;
      v68[6] = v81;
      sub_100040B10(v82, v83);
      v84 = v69[7];
      v85 = v69[8];
      sub_100049030(v84, v85);
      v86 = v68[7];
      v87 = v68[8];
      v68[7] = v84;
      v68[8] = v85;
      sub_100040B10(v86, v87);
      v68[9] = v69[9];
      v88 = v69[10];
      v89 = v68[10];
      v68[10] = v88;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRelease(v89);
      v90 = v69[11];
      v91 = v69[12];
      sub_100049030(v90, v91);
      v92 = v68[11];
      v93 = v68[12];
      v68[11] = v90;
      v68[12] = v91;
      sub_100040B10(v92, v93);
    }
    else
    {
      sub_10004A720(v68);
      v106 = *((_OWORD *)v69 + 1);
      v105 = *((_OWORD *)v69 + 2);
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *((_OWORD *)v68 + 1) = v106;
      *((_OWORD *)v68 + 2) = v105;
      v108 = *((_OWORD *)v69 + 4);
      v107 = *((_OWORD *)v69 + 5);
      v109 = *((_OWORD *)v69 + 3);
      v68[12] = v69[12];
      *((_OWORD *)v68 + 4) = v108;
      *((_OWORD *)v68 + 5) = v107;
      *((_OWORD *)v68 + 3) = v109;
    }
  }
  else if (v71)
  {
    *v68 = *v69;
    v94 = v69[1];
    v95 = v69[2];
    sub_100049030(v94, v95);
    v68[1] = v94;
    v68[2] = v95;
    v96 = v69[3];
    v97 = v69[4];
    sub_100049030(v96, v97);
    v68[3] = v96;
    v68[4] = v97;
    v98 = v69[5];
    v99 = v69[6];
    sub_100049030(v98, v99);
    v68[5] = v98;
    v68[6] = v99;
    v100 = v69[7];
    v101 = v69[8];
    sub_100049030(v100, v101);
    v68[7] = v100;
    v68[8] = v101;
    v68[9] = v69[9];
    v102 = v69[10];
    v68[10] = v102;
    v103 = v69[11];
    v104 = v69[12];
    swift_bridgeObjectRetain(v102);
    sub_100049030(v103, v104);
    v68[11] = v103;
    v68[12] = v104;
  }
  else
  {
    v110 = *(_OWORD *)v69;
    v111 = *((_OWORD *)v69 + 2);
    *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
    *((_OWORD *)v68 + 2) = v111;
    *(_OWORD *)v68 = v110;
    v112 = *((_OWORD *)v69 + 3);
    v113 = *((_OWORD *)v69 + 4);
    v114 = *((_OWORD *)v69 + 5);
    v68[12] = v69[12];
    *((_OWORD *)v68 + 4) = v113;
    *((_OWORD *)v68 + 5) = v114;
    *((_OWORD *)v68 + 3) = v112;
  }
  v115 = a3[25];
  v116 = (_QWORD *)(a1 + v115);
  v117 = (_QWORD *)(a2 + v115);
  v118 = *(_QWORD *)(a1 + v115 + 8);
  v119 = *(_QWORD *)(a2 + v115 + 8);
  if (v118)
  {
    if (v119)
    {
      *v116 = *v117;
      v120 = v117[1];
      v116[1] = v120;
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRelease(v118);
      v121 = v117[2];
      v122 = v116[2];
      v116[2] = v121;
      swift_bridgeObjectRetain(v121);
      swift_bridgeObjectRelease(v122);
    }
    else
    {
      sub_10004A754((uint64_t)v116);
      v125 = v117[2];
      *(_OWORD *)v116 = *(_OWORD *)v117;
      v116[2] = v125;
    }
  }
  else if (v119)
  {
    *v116 = *v117;
    v123 = v117[1];
    v116[1] = v123;
    v124 = v117[2];
    v116[2] = v124;
    swift_bridgeObjectRetain(v123);
    swift_bridgeObjectRetain(v124);
  }
  else
  {
    v126 = *(_OWORD *)v117;
    v116[2] = v117[2];
    *(_OWORD *)v116 = v126;
  }
  v127 = a3[26];
  v128 = *(_QWORD *)(a1 + v127);
  v129 = *(_QWORD *)(a2 + v127);
  *(_QWORD *)(a1 + v127) = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v128);
  v130 = a3[27];
  v131 = *(_QWORD *)(a1 + v130);
  v132 = *(_QWORD *)(a2 + v130);
  *(_QWORD *)(a1 + v130) = v132;
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRelease(v131);
  v133 = a3[28];
  v134 = *(_QWORD *)(a1 + v133);
  v135 = *(_QWORD *)(a2 + v133);
  *(_QWORD *)(a1 + v133) = v135;
  swift_bridgeObjectRetain(v135);
  swift_bridgeObjectRelease(v134);
  return a1;
}

_QWORD *sub_10004A720(_QWORD *a1)
{
  _s13EncryptedDataVwxx(a1);
  return a1;
}

uint64_t sub_10004A754(uint64_t a1)
{
  _s14descr1000DA611V16AttributedStringV5ColorVwxx();
  return a1;
}

uint64_t sub_10004A788(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[11];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    v16 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  if (v11((const void *)(a2 + v20), 1, v9))
  {
    v23 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v21, v22, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
  }
  v24 = a3[20];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  if (v11((const void *)(a2 + v24), 1, v9))
  {
    v27 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v25, v26, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v25, 0, 1, v9);
  }
  v28 = a3[21];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  if (v11((const void *)(a2 + v28), 1, v9))
  {
    v31 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v29, v30, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
  }
  v32 = a3[22];
  v33 = (void *)(a1 + v32);
  v34 = (const void *)(a2 + v32);
  if (v11((const void *)(a2 + v32), 1, v9))
  {
    v35 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v33, v34, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v33, 0, 1, v9);
  }
  v36 = a3[23];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  if (v11((const void *)(a2 + v36), 1, v9))
  {
    v39 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v37, v38, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v37, 0, 1, v9);
  }
  v40 = a3[24];
  v41 = a3[25];
  v42 = a1 + v40;
  v43 = a2 + v40;
  *(_QWORD *)(v42 + 96) = *(_QWORD *)(v43 + 96);
  v44 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v44;
  v45 = *(_OWORD *)(v43 + 80);
  *(_OWORD *)(v42 + 64) = *(_OWORD *)(v43 + 64);
  *(_OWORD *)(v42 + 80) = v45;
  v46 = *(_OWORD *)(v43 + 48);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v43 + 32);
  *(_OWORD *)(v42 + 48) = v46;
  v47 = a1 + v41;
  v48 = a2 + v41;
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_QWORD *)(v47 + 16) = *(_QWORD *)(v48 + 16);
  v49 = a3[27];
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);
  *(_QWORD *)(a1 + a3[28]) = *(_QWORD *)(a2 + a3[28]);
  return a1;
}

uint64_t sub_10004ABBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v12 = a3[10];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = a3[11];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = v17((void *)(a1 + v21), 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v22, v23, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    v26 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v22, v23, v15);
LABEL_13:
  v27 = a3[12];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  v34 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  v35 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v36 = (_QWORD *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v39 = *v37;
  v38 = v37[1];
  v40 = v36[1];
  *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease(v40);
  v41 = a3[19];
  v42 = (void *)(a1 + v41);
  v43 = (void *)(a2 + v41);
  v44 = v17((void *)(a1 + v41), 1, v15);
  v45 = v17(v43, 1, v15);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v42, v43, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v42, 0, 1, v15);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v45)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v42, v15);
LABEL_18:
    v46 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v42, v43, v15);
LABEL_19:
  v47 = a3[20];
  v48 = (void *)(a1 + v47);
  v49 = (void *)(a2 + v47);
  v50 = v17((void *)(a1 + v47), 1, v15);
  v51 = v17(v49, 1, v15);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v48, v49, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v48, 0, 1, v15);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v48, v15);
LABEL_24:
    v52 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v48, v49, v15);
LABEL_25:
  v53 = a3[21];
  v54 = (void *)(a1 + v53);
  v55 = (void *)(a2 + v53);
  v56 = v17((void *)(a1 + v53), 1, v15);
  v57 = v17(v55, 1, v15);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v54, v55, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v54, 0, 1, v15);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v54, v15);
LABEL_30:
    v58 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v54, v55, v15);
LABEL_31:
  v59 = a3[22];
  v60 = (void *)(a1 + v59);
  v61 = (void *)(a2 + v59);
  v62 = v17((void *)(a1 + v59), 1, v15);
  v63 = v17(v61, 1, v15);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v60, v61, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v60, 0, 1, v15);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v63)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v60, v15);
LABEL_36:
    v64 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v60, v61, v15);
LABEL_37:
  v65 = a3[23];
  v66 = (void *)(a1 + v65);
  v67 = (void *)(a2 + v65);
  v68 = v17((void *)(a1 + v65), 1, v15);
  v69 = v17(v67, 1, v15);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v66, v67, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v66, 0, 1, v15);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v69)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v66, v15);
LABEL_42:
    v70 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v66, v67, v15);
LABEL_43:
  v71 = a3[24];
  v72 = (_QWORD *)(a1 + v71);
  v73 = a2 + v71;
  if (*(_QWORD *)(a1 + v71 + 80))
  {
    if (*(_QWORD *)(v73 + 80))
    {
      v74 = *(_QWORD *)(v73 + 16);
      v75 = v72[1];
      v76 = v72[2];
      *(_OWORD *)v72 = *(_OWORD *)v73;
      v72[2] = v74;
      sub_100040B10(v75, v76);
      v77 = v72[3];
      v78 = v72[4];
      *(_OWORD *)(v72 + 3) = *(_OWORD *)(v73 + 24);
      sub_100040B10(v77, v78);
      v79 = v72[5];
      v80 = v72[6];
      *(_OWORD *)(v72 + 5) = *(_OWORD *)(v73 + 40);
      sub_100040B10(v79, v80);
      v81 = v72[7];
      v82 = v72[8];
      *(_OWORD *)(v72 + 7) = *(_OWORD *)(v73 + 56);
      sub_100040B10(v81, v82);
      v83 = *(_QWORD *)(v73 + 80);
      v84 = v72[10];
      v72[9] = *(_QWORD *)(v73 + 72);
      v72[10] = v83;
      swift_bridgeObjectRelease(v84);
      v85 = v72[11];
      v86 = v72[12];
      *(_OWORD *)(v72 + 11) = *(_OWORD *)(v73 + 88);
      sub_100040B10(v85, v86);
      goto LABEL_48;
    }
    sub_10004A720(v72);
  }
  v87 = *(_OWORD *)(v73 + 80);
  *((_OWORD *)v72 + 4) = *(_OWORD *)(v73 + 64);
  *((_OWORD *)v72 + 5) = v87;
  v72[12] = *(_QWORD *)(v73 + 96);
  v88 = *(_OWORD *)(v73 + 16);
  *(_OWORD *)v72 = *(_OWORD *)v73;
  *((_OWORD *)v72 + 1) = v88;
  v89 = *(_OWORD *)(v73 + 48);
  *((_OWORD *)v72 + 2) = *(_OWORD *)(v73 + 32);
  *((_OWORD *)v72 + 3) = v89;
LABEL_48:
  v90 = a3[25];
  v91 = a1 + v90;
  v92 = a2 + v90;
  v93 = *(_QWORD *)(a1 + v90 + 8);
  if (!v93)
  {
LABEL_52:
    *(_OWORD *)v91 = *(_OWORD *)v92;
    *(_QWORD *)(v91 + 16) = *(_QWORD *)(v92 + 16);
    goto LABEL_53;
  }
  v94 = *(_QWORD *)(v92 + 8);
  if (!v94)
  {
    sub_10004A754(v91);
    goto LABEL_52;
  }
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_QWORD *)(v91 + 8) = v94;
  swift_bridgeObjectRelease(v93);
  v95 = *(_QWORD *)(v91 + 16);
  *(_QWORD *)(v91 + 16) = *(_QWORD *)(v92 + 16);
  swift_bridgeObjectRelease(v95);
LABEL_53:
  v96 = a3[26];
  v97 = *(_QWORD *)(a1 + v96);
  *(_QWORD *)(a1 + v96) = *(_QWORD *)(a2 + v96);
  swift_bridgeObjectRelease(v97);
  v98 = a3[27];
  v99 = *(_QWORD *)(a1 + v98);
  *(_QWORD *)(a1 + v98) = *(_QWORD *)(a2 + v98);
  swift_bridgeObjectRelease(v99);
  v100 = a3[28];
  v101 = *(_QWORD *)(a1 + v100);
  *(_QWORD *)(a1 + v100) = *(_QWORD *)(a2 + v100);
  swift_bridgeObjectRelease(v101);
  return a1;
}

uint64_t sub_10004B2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004B2F8);
}

uint64_t sub_10004B2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_10004B378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004B384);
}

uint64_t sub_10004B384(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100030EE4(&qword_1000EBA10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_10004B3FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v4[0] = &unk_1000B41D8;
  v4[1] = &unk_1000B41F0;
  v4[2] = &unk_1000B4208;
  v4[3] = &unk_1000B4208;
  v4[4] = &unk_1000B4220;
  v4[5] = &unk_1000B4220;
  sub_10004B4E4(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_1000B4208;
    v8 = &unk_1000B4220;
    v9 = &unk_1000B4220;
    v10 = &unk_1000B4238;
    v11 = &unk_1000B4220;
    v12 = &unk_1000B4250;
    v13 = &unk_1000B4208;
    v14 = v5;
    v15 = v5;
    v16 = v5;
    v17 = v5;
    v18 = v5;
    v19 = &unk_1000B4268;
    v20 = &unk_1000B4280;
    v21 = &unk_1000B4298;
    v22 = &unk_1000B4298;
    v23 = &unk_1000B4298;
    swift_initStructMetadata(a1, 256, 25, v4, a1 + 16);
  }
}

void sub_10004B4E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EBC48)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EBC48);
  }
}

uint64_t sub_10004B538(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100042114(&qword_1000EBB18, type metadata accessor for ICNoteArchiveModel, (uint64_t)&unk_1000B42CC);
  result = sub_100042114(&qword_1000EBD10, type metadata accessor for ICNoteArchiveModel, (uint64_t)&unk_1000B42F4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10004B594()
{
  unint64_t result;

  result = qword_1000EBD20;
  if (!qword_1000EBD20)
  {
    result = swift_getWitnessTable(&unk_1000B481C, &type metadata for ICNoteArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EBD20);
  }
  return result;
}

unint64_t sub_10004B5D8()
{
  unint64_t result;

  result = qword_1000EBD28;
  if (!qword_1000EBD28)
  {
    result = swift_getWitnessTable(&unk_1000B3BB8, &type metadata for ICArchiveModels);
    atomic_store(result, (unint64_t *)&qword_1000EBD28);
  }
  return result;
}

unint64_t sub_10004B61C()
{
  unint64_t result;

  result = qword_1000EBD38;
  if (!qword_1000EBD38)
  {
    result = swift_getWitnessTable(&unk_1000B47F4, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1000EBD38);
  }
  return result;
}

unint64_t sub_10004B660()
{
  unint64_t result;

  result = qword_1000EBD40;
  if (!qword_1000EBD40)
  {
    result = swift_getWitnessTable(&unk_1000B47CC, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1000EBD40);
  }
  return result;
}

unint64_t sub_10004B6A4()
{
  unint64_t result;

  result = qword_1000EBD48;
  if (!qword_1000EBD48)
  {
    result = swift_getWitnessTable(&unk_1000B486C, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1000EBD48);
  }
  return result;
}

unint64_t sub_10004B6E8()
{
  unint64_t result;

  result = qword_1000EBD50;
  if (!qword_1000EBD50)
  {
    result = swift_getWitnessTable(&unk_1000B6314, &_s13EncryptedDataVN);
    atomic_store(result, (unint64_t *)&qword_1000EBD50);
  }
  return result;
}

unint64_t sub_10004B72C()
{
  unint64_t result;

  result = qword_1000EBD58;
  if (!qword_1000EBD58)
  {
    result = swift_getWitnessTable(&unk_1000B6B74, &_s14descr1000DA611V16AttributedStringVN);
    atomic_store(result, (unint64_t *)&qword_1000EBD58);
  }
  return result;
}

unint64_t sub_10004B770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EBD98;
  if (!qword_1000EBD98)
  {
    v1 = sub_100030FF0(&qword_1000EBD90);
    sub_100042114(&qword_1000EBD70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000EBD98);
  }
  return result;
}

unint64_t sub_10004B7F4()
{
  unint64_t result;

  result = qword_1000EBDB0;
  if (!qword_1000EBDB0)
  {
    result = swift_getWitnessTable(&unk_1000B477C, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1000EBDB0);
  }
  return result;
}

unint64_t sub_10004B838()
{
  unint64_t result;

  result = qword_1000EBDB8;
  if (!qword_1000EBDB8)
  {
    result = swift_getWitnessTable(&unk_1000B4754, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1000EBDB8);
  }
  return result;
}

unint64_t sub_10004B87C()
{
  unint64_t result;

  result = qword_1000EBDC0;
  if (!qword_1000EBDC0)
  {
    result = swift_getWitnessTable(&unk_1000B47A4, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1000EBDC0);
  }
  return result;
}

unint64_t sub_10004B8C0()
{
  unint64_t result;

  result = qword_1000EBDC8;
  if (!qword_1000EBDC8)
  {
    result = swift_getWitnessTable(&unk_1000B633C, &_s13EncryptedDataVN);
    atomic_store(result, (unint64_t *)&qword_1000EBDC8);
  }
  return result;
}

unint64_t sub_10004B904()
{
  unint64_t result;

  result = qword_1000EBDD0;
  if (!qword_1000EBDD0)
  {
    result = swift_getWitnessTable(&unk_1000B6B9C, &_s14descr1000DA611V16AttributedStringVN);
    atomic_store(result, (unint64_t *)&qword_1000EBDD0);
  }
  return result;
}

uint64_t sub_10004B948(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100030FF0(&qword_1000EBD60);
    sub_100042114(a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004B9CC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100030FF0(&qword_1000EBD78);
    sub_100042114(a2, _s14descr1000D81A9V8ActivityVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004BA50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EBDF8;
  if (!qword_1000EBDF8)
  {
    v1 = sub_100030FF0(&qword_1000EBD90);
    sub_100042114(&qword_1000EBDE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000EBDF8);
  }
  return result;
}

uint64_t sub_10004BAD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for ICNoteArchiveModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE8)
    goto LABEL_17;
  if (a2 + 24 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 24) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 24;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 24;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 24;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v8 = v6 - 25;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICNoteArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_10004BBF4 + 4 * byte_1000B418E[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_10004BC28 + 4 * byte_1000B4189[v4]))();
}

uint64_t sub_10004BC28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004BC30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004BC38);
  return result;
}

uint64_t sub_10004BC44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004BC4CLL);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_10004BC50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004BC58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.CodingKeys()
{
  return &type metadata for ICNoteArchiveModel.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ICNoteArchiveModel.Backgrounds(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICNoteArchiveModel.Backgrounds(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004BD50 + 4 * byte_1000B4198[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004BD84 + 4 * byte_1000B4193[v4]))();
}

uint64_t sub_10004BD84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004BD8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004BD94);
  return result;
}

uint64_t sub_10004BDA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004BDA8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004BDAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004BDB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10004BDC0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.Backgrounds()
{
  return &type metadata for ICNoteArchiveModel.Backgrounds;
}

uint64_t getEnumTagSinglePayload for ICNoteArchiveModel.PaperStyles(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICNoteArchiveModel.PaperStyles(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10004BEB8 + 4 * byte_1000B41A2[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10004BEEC + 4 * byte_1000B419D[v4]))();
}

uint64_t sub_10004BEEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004BEF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004BEFCLL);
  return result;
}

uint64_t sub_10004BF08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004BF10);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10004BF14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004BF1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.PaperStyles()
{
  return &type metadata for ICNoteArchiveModel.PaperStyles;
}

uint64_t getEnumTagSinglePayload for ICNoteArchiveModel.AttachmentViewTypes(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICNoteArchiveModel.AttachmentViewTypes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10004C014 + 4 * byte_1000B41AC[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10004C048 + 4 * byte_1000B41A7[v4]))();
}

uint64_t sub_10004C048(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004C050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004C058);
  return result;
}

uint64_t sub_10004C064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004C06CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10004C070(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004C078(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.AttachmentViewTypes()
{
  return &type metadata for ICNoteArchiveModel.AttachmentViewTypes;
}

uint64_t sub_10004C098()
{
  return sub_10004C19C(&qword_1000EBE00, &qword_1000EBE08);
}

unint64_t sub_10004C0C0()
{
  unint64_t result;

  result = qword_1000EBE10;
  if (!qword_1000EBE10)
  {
    result = swift_getWitnessTable(&unk_1000B4444, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1000EBE10);
  }
  return result;
}

uint64_t sub_10004C108()
{
  return sub_10004C19C(&qword_1000EBE18, &qword_1000EBE20);
}

unint64_t sub_10004C130()
{
  unint64_t result;

  result = qword_1000EBE28;
  if (!qword_1000EBE28)
  {
    result = swift_getWitnessTable(&unk_1000B455C, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1000EBE28);
  }
  return result;
}

uint64_t sub_10004C178()
{
  return sub_10004C19C(&qword_1000EBE30, &qword_1000EBE38);
}

uint64_t sub_10004C19C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100030FF0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004C1E0()
{
  unint64_t result;

  result = qword_1000EBE40;
  if (!qword_1000EBE40)
  {
    result = swift_getWitnessTable(&unk_1000B4674, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1000EBE40);
  }
  return result;
}

unint64_t sub_10004C228()
{
  unint64_t result;

  result = qword_1000EBE48;
  if (!qword_1000EBE48)
  {
    result = swift_getWitnessTable(&unk_1000B472C, &type metadata for ICNoteArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EBE48);
  }
  return result;
}

unint64_t sub_10004C270()
{
  unint64_t result;

  result = qword_1000EBE50;
  if (!qword_1000EBE50)
  {
    result = swift_getWitnessTable(&unk_1000B469C, &type metadata for ICNoteArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EBE50);
  }
  return result;
}

unint64_t sub_10004C2B8()
{
  unint64_t result;

  result = qword_1000EBE58;
  if (!qword_1000EBE58)
  {
    result = swift_getWitnessTable(&unk_1000B46C4, &type metadata for ICNoteArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EBE58);
  }
  return result;
}

unint64_t sub_10004C2FC()
{
  unint64_t result;

  result = qword_1000EBE60;
  if (!qword_1000EBE60)
  {
    result = swift_getWitnessTable(&unk_1000B43CC, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1000EBE60);
  }
  return result;
}

unint64_t sub_10004C340()
{
  unint64_t result;

  result = qword_1000EBE68;
  if (!qword_1000EBE68)
  {
    result = swift_getWitnessTable(&unk_1000B44E4, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1000EBE68);
  }
  return result;
}

unint64_t sub_10004C384()
{
  unint64_t result;

  result = qword_1000EBE70;
  if (!qword_1000EBE70)
  {
    result = swift_getWitnessTable(&unk_1000B45FC, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1000EBE70);
  }
  return result;
}

unint64_t sub_10004C3C8()
{
  unint64_t result;

  result = qword_1000EBE78;
  if (!qword_1000EBE78)
  {
    result = swift_getWitnessTable(&unk_1000B45C4, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1000EBE78);
  }
  return result;
}

unint64_t sub_10004C40C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D6B38, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t sub_10004C454()
{
  unint64_t result;

  result = qword_1000EBE80;
  if (!qword_1000EBE80)
  {
    result = swift_getWitnessTable(&unk_1000B44AC, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1000EBE80);
  }
  return result;
}

unint64_t sub_10004C498(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D6CA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_10004C4E0()
{
  unint64_t result;

  result = qword_1000EBE88;
  if (!qword_1000EBE88)
  {
    result = swift_getWitnessTable(&unk_1000B4394, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1000EBE88);
  }
  return result;
}

uint64_t sub_10004C52C()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "identifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_10004C590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_10004C5CC(uint64_t a1, uint64_t a2)
{
  return sub_10004CBC4(a1, a2, (SEL *)&selRef_localizedName);
}

void *sub_10004C5D8()
{
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10004C5E4@<X0>(uint64_t a1@<X8>)
{
  return sub_10004C590(a1);
}

uint64_t sub_10004C5F8()
{
  return 0;
}

uint64_t sub_10004C604(uint64_t *a1)
{
  void **v1;
  void *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD v8[4];
  _OWORD v9[4];

  v3 = *v1;
  objc_msgSend(v3, "persistPendingChanges");
  v4 = v3;
  sub_10004D9B4(a1);
  sub_100055858(v4, a1, (uint64_t)v9);
  if (qword_1000EB650 != -1)
    swift_once(&qword_1000EB650, sub_10002F9E0);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v5 = sub_10004E0E4();
  v6 = dispatch thunk of JSONEncoder.encode<A>(_:)(v8, &type metadata for ICAccountArchiveModel, v5);
  sub_1000422A0(v9);
  return v6;
}

void *sub_10004C6E4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *result;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;

  v1 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v1);
  v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = _s14descr1000DA8A1V3TagVMa(0);
  v4 = *(_QWORD *)(v46 - 8);
  v5 = __chkstk_darwin(v46);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v41 - v8;
  v10 = objc_msgSend(v0, "account");
  if (!v10)
    return &_swiftEmptySetSingleton;
  v11 = v10;
  v12 = objc_msgSend(v0, "visibleInlineAttachments");
  v13 = sub_100036000(0, &qword_1000EBEB0, ICInlineAttachment_ptr);
  v14 = sub_10004E08C();
  v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, v13, v14);

  v16 = v11;
  sub_10004DA70(v15, v16);
  v18 = v17;
  swift_bridgeObjectRelease(v15);

  if (!((unint64_t)v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v19)
      goto LABEL_4;
LABEL_25:
    swift_bridgeObjectRelease(v18);
    v36 = _swiftEmptyArrayStorage;
LABEL_26:
    v39 = sub_10007DA8C((uint64_t)v36);

    swift_bridgeObjectRelease(v36);
    return (void *)v39;
  }
  if (v18 < 0)
    v40 = v18;
  else
    v40 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v19 = _CocoaArrayWrapper.endIndex.getter(v40);
  swift_bridgeObjectRelease(v18);
  if (!v19)
    goto LABEL_25;
LABEL_4:
  v47 = _swiftEmptyArrayStorage;
  result = (void *)sub_10003F320(0, v19 & ~(v19 >> 63), 0);
  if ((v19 & 0x8000000000000000) == 0)
  {
    v21 = 0;
    v42 = v16;
    v43 = v18 & 0xC000000000000001;
    v44 = v19;
    v45 = v18;
    do
    {
      if (v43)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      else
        v22 = *(id *)(v18 + 8 * v21 + 32);
      v23 = v22;
      v24 = type metadata accessor for Date(0);
      v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
      v26 = 1;
      v25(v7, 1, 1, v24);
      v27 = objc_msgSend(v23, "creationDate");
      if (v27)
      {
        v28 = v27;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v26 = 0;
      }
      v25(v3, v26, 1, v24);
      sub_100048A00((uint64_t)v3, (uint64_t)v7);
      v29 = objc_msgSend(v23, "displayText");
      if (v29)
      {
        v30 = v29;
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

      }
      else
      {

        v31 = 0;
        v33 = 0xE000000000000000;
      }
      v34 = v44;
      v35 = (uint64_t *)&v7[*(int *)(v46 + 20)];
      *v35 = v31;
      v35[1] = v33;
      sub_1000421DC((uint64_t)v7, (uint64_t)v9);
      v36 = v47;
      if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      {
        sub_10003F320(0, v36[2] + 1, 1);
        v36 = v47;
      }
      v38 = v36[2];
      v37 = v36[3];
      if (v38 >= v37 >> 1)
      {
        sub_10003F320(v37 > 1, v38 + 1, 1);
        v36 = v47;
      }
      ++v21;
      v36[2] = v38 + 1;
      sub_1000421DC((uint64_t)v9, (uint64_t)v36+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v38);
      v18 = v45;
    }
    while (v34 != v21);
    swift_bridgeObjectRelease(v45);
    v16 = v42;
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10004CAA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v8))
  {
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = sub_10004C6E4();

      sub_10005FB8C((uint64_t)v7);
      ++v3;
      if (v6 == v2)
        goto LABEL_15;
    }
    __break(1u);
LABEL_11:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_15:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10004CBB8(uint64_t a1, uint64_t a2)
{
  return sub_10004CBC4(a1, a2, (SEL *)&selRef_title);
}

uint64_t sub_10004CBC4(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  uint64_t v5;

  v4 = objc_msgSend(*v3, *a3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

uint64_t sub_10004CC14()
{
  id *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = objc_msgSend(*v0, "visibleNotesInFolder");
  v2 = sub_100036000(0, &qword_1000EB970, ICNote_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  v4 = sub_10004CAA8(v3);
  swift_bridgeObjectRelease(v3);
  v5 = sub_10007DA8C((uint64_t)v4);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_10004CCB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10004CDA0(a1, a2, a3, type metadata accessor for ICFolderArchiveModel, (void (*)(id, uint64_t *))sub_100098AC8, &qword_1000EBEC0, (uint64_t)&unk_1000B8494);
}

uint64_t sub_10004CCE8()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "title");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void *sub_10004CD4C()
{
  return sub_10004C6E4();
}

uint64_t sub_10004CD6C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10004CDA0(a1, a2, a3, type metadata accessor for ICNoteArchiveModel, (void (*)(id, uint64_t *))sub_100045730, &qword_1000EBD10, (uint64_t)&unk_1000B42F4);
}

uint64_t sub_10004CDA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), void (*a5)(id, uint64_t *), unint64_t *a6, uint64_t a7)
{
  void **v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v13 = a4(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v21 - v14;
  v16 = *v7;
  objc_msgSend(v16, "persistPendingChanges");
  v17 = v16;
  sub_10004D9B4(a1);
  a5(v17, a1);
  if (qword_1000EB650 != -1)
    swift_once(&qword_1000EB650, sub_10002F9E0);
  v18 = sub_100042114(a6, a4, a7);
  v19 = dispatch thunk of JSONEncoder.encode<A>(_:)(v15, v13, v18);
  sub_100042220((uint64_t)v15, a4);
  return v19;
}

uint64_t sub_10004CED4@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v2, "isPasswordProtected"))
  {
    v7 = 0;
LABEL_6:
    v11 = type metadata accessor for URL(v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  v7 = objc_msgSend(v2, "media");
  if (!v7)
    goto LABEL_6;
  v8 = v7;
  v9 = objc_msgSend(v7, "mediaURL");

  if (v9)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);

    v10 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 0, 1, v10);
  }
  else
  {
    v13 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
  }
  return sub_1000490E8((uint64_t)v6, a1, (uint64_t *)&unk_1000EC2E0);
}

id sub_10004D02C()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend(v0, "media");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "cryptoStrategy");

  if (v3)
  {
    v4 = objc_msgSend(v3, "decryptedData");
    swift_unknownObjectRelease(v3);
    if (v4)
    {
      v3 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);

      return v3;
    }
    return 0;
  }
  return v3;
}

void *sub_10004D0DC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void (*v21)(uint64_t, char *, uint64_t);
  id v22;
  void *v23;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v25 - v7;
  v9 = objc_msgSend(v1, "attachmentModel");
  v10 = objc_opt_self(ICAttachmentPaperBundleModel);
  v11 = swift_dynamicCastObjCClass(v9, v10);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = sub_100030EE4(&qword_1000EBB70);
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(unsigned __int8 *)(v3 + 80);
    v16 = (v15 + 32) & ~v15;
    v17 = swift_allocObject(v13, v16 + 2 * v14, v15 | 7);
    *(_OWORD *)(v17 + 16) = xmmword_1000B3840;
    v18 = v17 + v16;
    v19 = v9;
    v20 = objc_msgSend(v12, "paperBundleDatabaseSubdirectoryURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v21 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 32);
    v21(v18, v8, v2);
    v22 = objc_msgSend(v12, "paperBundleAssetsSubdirectoryURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v21(v18 + v14, v6, v2);
    v23 = sub_10004DE24(v17);
    swift_setDeallocating(v17);
    swift_arrayDestroy(v18, 2, v2);
    swift_deallocClassInstance(v17, 32, 7);

  }
  else
  {

    return &_swiftEmptySetSingleton;
  }
  return v23;
}

id sub_10004D2B8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  Class isa;
  id v26;
  id v27;
  uint64_t v29;

  v1 = v0;
  v2 = sub_100030EE4(&qword_1000EBE98);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v29 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  v11 = objc_msgSend(v1, "attachmentModel");
  v12 = objc_opt_self(ICAttachmentInlineDrawingModel);
  v13 = swift_dynamicCastObjCClass(v11, v12);
  if (v13)
  {
    v14 = (void *)v13;
    v15 = v11;
    v16 = objc_msgSend(v14, "newDrawingFromMergeableData");
    if (v16)
    {
      v17 = v16;
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      v18 = type metadata accessor for PKDrawing(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 0, 1, v18);
    }
    else
    {
      v18 = ((uint64_t (*)(void))type metadata accessor for PKDrawing)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
    }
    sub_1000490E8((uint64_t)v8, (uint64_t)v10, &qword_1000EBE98);
    sub_10004D9E8((uint64_t)v10, (uint64_t)v5);
    type metadata accessor for PKDrawing(0);
    v24 = *(_QWORD *)(v18 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v5, 1, v18) != 1)
    {
      isa = PKDrawing._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v18);
    }
    v26 = objc_msgSend((id)objc_opt_self(ICAttachmentInlineDrawingModel), "generateImageForAttachment:fromDrawing:fullResolution:appearanceInfo:", v1, isa, 1, 0);

    if (v26)
    {
      v27 = objc_msgSend(v26, "ic_PNGData");
      v22 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);

    }
    else
    {

      v22 = 0;
    }
    sub_10004DA30((uint64_t)v10);
  }
  else
  {
    v19 = objc_opt_self(ICAttachmentSystemPaperModel);
    if (swift_dynamicCastObjCClass(v11, v19))
    {
      v20 = (void *)objc_opt_self(ICAttachmentSystemPaperModel);
      v21 = objc_msgSend((id)objc_opt_self(ICAppearanceInfo), "appearanceInfoWithType:", 0);
      v22 = objc_msgSend(v20, "generateImageForAttachment:fullResolution:appearanceInfo:", v1, 1, v21);

      if (v22)
      {
        v23 = objc_msgSend(v22, "ic_PNGData");

        v22 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
      }

    }
    else
    {

      return 0;
    }
  }
  return v22;
}

uint64_t sub_10004D5D8()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  if (objc_msgSend(v0, "attachmentType") != 14 && objc_msgSend(v0, "attachmentType") != 15)
    return 0;
  v1 = objc_msgSend(v0, "fallbackPDFData");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_10004D668(uint64_t *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = type metadata accessor for ICAttachmentArchiveModel(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v1, "persistPendingChanges");
  v6 = objc_msgSend(v1, "media");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "persistPendingChanges");

  }
  v8 = v1;
  sub_10004D9B4(a1);
  sub_1000642BC(v8, (uint64_t)a1, (uint64_t)v5);
  if (qword_1000EB650 != -1)
    swift_once(&qword_1000EB650, sub_10002F9E0);
  v9 = sub_100042114(&qword_1000EBE90, type metadata accessor for ICAttachmentArchiveModel, (uint64_t)&unk_1000B57A4);
  v10 = dispatch thunk of JSONEncoder.encode<A>(_:)(v5, v3, v9);
  sub_100042220((uint64_t)v5, type metadata accessor for ICAttachmentArchiveModel);
  return v10;
}

uint64_t sub_10004D7C4()
{
  return sub_10004C52C();
}

uint64_t sub_10004D7E4()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = *v0;
  v2 = objc_msgSend(*v0, "userTitle");
  if (!v2)
  {
    v2 = objc_msgSend(v1, "title");
    if (!v2)
      return 0;
  }
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void *sub_10004D870()
{
  id *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(*v0, "media");
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "filename");

    v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }
  return v2;
}

uint64_t sub_10004D8F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10004CED4(a1);
}

id sub_10004D914()
{
  return sub_10004D02C();
}

void *sub_10004D934()
{
  return sub_10004D0DC();
}

id sub_10004D954()
{
  return sub_10004D2B8();
}

uint64_t sub_10004D974()
{
  return sub_10004D5D8();
}

uint64_t sub_10004D994(uint64_t *a1)
{
  return sub_10004D668(a1);
}

uint64_t *sub_10004D9B4(uint64_t *a1)
{
  sub_100048F08(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_10004D9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EBE98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DA30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100030EE4(&qword_1000EBE98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10004DA70(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  int64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[5];
  unint64_t v40;

  v2 = a1;
  v40 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = sub_100036000(0, &qword_1000EBEB0, ICInlineAttachment_ptr);
    v6 = sub_10004E08C();
    v7 = Set.Iterator.init(_cocoa:)(v39, v4, v5, v6);
    v2 = v39[0];
    v36 = v39[1];
    v8 = v39[2];
    v9 = v39[3];
    v10 = v39[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v36 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    v7 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v14 = (unint64_t)(v8 + 64) >> 6;
  while (v2 < 0)
  {
    v18 = __CocoaSet.Iterator.next()(v7);
    if (!v18)
      goto LABEL_43;
    v19 = v18;
    v37 = v18;
    v20 = sub_100036000(0, &qword_1000EBEB0, ICInlineAttachment_ptr);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v38, &v37, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
    v21 = v38;
    swift_unknownObjectRelease(v19);
    v17 = v9;
    v15 = v10;
    if (!v21)
      goto LABEL_43;
LABEL_31:
    if (!objc_msgSend(v21, "isHashtagAttachment")
      || (v24 = objc_msgSend(v21, "tokenContentIdentifier")) == 0)
    {

      goto LABEL_12;
    }
    v25 = v24;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v28 = a2;
    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    v30 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagWithStandardizedContent:onlyVisible:account:", v29, 1, v28);

    v9 = v17;
    v10 = v15;
    if (v30)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
      v32 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v31 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v32 >= v31 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      v7 = (_QWORD *)specialized Array._endMutation()(v33);
LABEL_12:
      v9 = v17;
      v10 = v15;
    }
  }
  if (v10)
  {
    v15 = (v10 - 1) & v10;
    v16 = __clz(__rbit64(v10)) | (v9 << 6);
    v17 = v9;
LABEL_30:
    v21 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_43;
    goto LABEL_31;
  }
  v17 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v17 >= v14)
      goto LABEL_43;
    v22 = *(_QWORD *)(v36 + 8 * v17);
    if (!v22)
    {
      v23 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_43;
      v22 = *(_QWORD *)(v36 + 8 * v23);
      if (v22)
        goto LABEL_28;
      v23 = v9 + 3;
      if (v9 + 3 >= v14)
        goto LABEL_43;
      v22 = *(_QWORD *)(v36 + 8 * v23);
      if (v22)
        goto LABEL_28;
      v23 = v9 + 4;
      if (v9 + 4 >= v14)
        goto LABEL_43;
      v22 = *(_QWORD *)(v36 + 8 * v23);
      if (v22)
      {
LABEL_28:
        v17 = v23;
      }
      else
      {
        v17 = v9 + 5;
        if (v9 + 5 >= v14)
          goto LABEL_43;
        v22 = *(_QWORD *)(v36 + 8 * v17);
        if (!v22)
        {
          v34 = v9 + 6;
          while (v14 != v34)
          {
            v22 = *(_QWORD *)(v36 + 8 * v34++);
            if (v22)
            {
              v17 = v34 - 1;
              goto LABEL_29;
            }
          }
LABEL_43:
          sub_100036138(v2, v36);
          return;
        }
      }
    }
LABEL_29:
    v15 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v17 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

void *sub_10004DE24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100030EE4(&qword_1000EBEA0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100042114(&qword_1000EBAA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100042114(&qword_1000EBEA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

unint64_t sub_10004E08C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EBEB8;
  if (!qword_1000EBEB8)
  {
    v1 = sub_100036000(255, &qword_1000EBEB0, ICInlineAttachment_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000EBEB8);
  }
  return result;
}

unint64_t sub_10004E0E4()
{
  unint64_t result;

  result = qword_1000EBEC8;
  if (!qword_1000EBEC8)
  {
    result = swift_getWitnessTable(&unk_1000B4F94, &type metadata for ICAccountArchiveModel);
    atomic_store(result, (unint64_t *)&qword_1000EBEC8);
  }
  return result;
}

uint64_t sub_10004E12C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned int (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  int *v150;
  uint64_t *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t result;
  uint64_t *v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  void (*v167)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  char *v174;
  int *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  void (*v185)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  void (*v188)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t (*v196)(char *, uint64_t, uint64_t);

  v192 = a1;
  v3 = sub_100030EE4(&qword_1000EBED0);
  __chkstk_darwin(v3);
  v176 = (char *)&v158 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100030EE4(&qword_1000EBED8);
  v6 = __chkstk_darwin(v5);
  v190 = (uint64_t)&v158 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v183 = (char *)&v158 - v8;
  v9 = sub_100030EE4(&qword_1000EBEE0);
  v10 = __chkstk_darwin(v9);
  v164 = (char *)&v158 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v166 = (char *)&v158 - v12;
  v13 = sub_100030EE4(&qword_1000EBA10);
  v14 = __chkstk_darwin(v13);
  v184 = (uint64_t)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v179 = (char *)&v158 - v16;
  v17 = sub_100030EE4(&qword_1000EBBB0);
  v18 = __chkstk_darwin(v17);
  v191 = (uint64_t)&v158 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v177 = (char *)&v158 - v21;
  v22 = __chkstk_darwin(v20);
  v174 = (char *)&v158 - v23;
  v24 = __chkstk_darwin(v22);
  v170 = (char *)&v158 - v25;
  v26 = __chkstk_darwin(v24);
  v193 = (char *)&v158 - v27;
  v28 = __chkstk_darwin(v26);
  v163 = (char *)&v158 - v29;
  v30 = __chkstk_darwin(v28);
  v162 = (char *)&v158 - v31;
  v32 = __chkstk_darwin(v30);
  v158 = (uint64_t)&v158 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v158 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v158 - v37;
  v39 = sub_100030EE4(&qword_1000EBBB8);
  v40 = __chkstk_darwin(v39);
  v182 = (uint64_t)&v158 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v181 = (uint64_t)&v158 - v43;
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v158 - v45;
  v47 = __chkstk_darwin(v44);
  v49 = (char *)&v158 - v48;
  __chkstk_darwin(v47);
  v51 = (char *)&v158 - v50;
  v52 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v52 - 8);
  v159 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
  v159(a2, 1, 1, v52);
  v54 = (int *)_s14descr1000D81A9V8ActivityVMa(0);
  v55 = a2 + v54[5];
  v56 = type metadata accessor for ActivityEventObject(0);
  v178 = *(_QWORD *)(v56 - 8);
  v57 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v178 + 56);
  v161 = v55;
  v185 = v57;
  v186 = v56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v57)(v55, 1, 1);
  v58 = a2 + v54[6];
  v59 = type metadata accessor for ActivityEventParticipant(0);
  v180 = *(_QWORD *)(v59 - 8);
  v60 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v180 + 56);
  v165 = v58;
  v188 = v60;
  v189 = v59;
  ((void (*)(uint64_t, uint64_t, uint64_t))v60)(v58, 1, 1);
  v61 = a2 + v54[7];
  v62 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56);
  v169 = v61;
  v168 = v62;
  v167 = v63;
  ((void (*)(uint64_t, uint64_t, uint64_t))v63)(v61, 1, 1);
  v64 = (uint64_t *)(a2 + v54[8]);
  *v64 = 0;
  v64[1] = 0;
  v171 = v64;
  v65 = a2 + v54[9];
  *(_QWORD *)v65 = 0;
  v172 = (uint64_t *)v65;
  *(_BYTE *)(v65 + 8) = 1;
  v175 = v54;
  v66 = v54[10];
  v195 = a2;
  v67 = (uint64_t *)(a2 + v66);
  sub_10004EF94();
  *v67 = 0;
  v67[1] = 0;
  v173 = v67;
  v68 = v192;
  static ICCloudSyncingObject.persistedActivityEvent(for:)(v192);
  v69 = (uint64_t)v38;
  static ICCloudSyncingObject.fallbackActivityEvent(for:)(v68);
  v194 = v51;
  sub_100031044((uint64_t)v51, (uint64_t)v49, &qword_1000EBBB8);
  v70 = type metadata accessor for PersistedActivityEvent(0);
  v71 = *(_QWORD *)(v70 - 8);
  v196 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  v72 = v196(v49, 1, v70);
  v187 = v71;
  if (v72 == 1)
  {
    sub_100036060((uint64_t)v49, &qword_1000EBBB8);
    v73 = 1;
    v74 = (uint64_t)v193;
    v75 = v184;
  }
  else
  {
    v76 = v184;
    PersistedActivityEvent.timestamp.getter();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v70);
    v73 = 0;
    v74 = (uint64_t)v193;
    v75 = v76;
  }
  v77 = v159;
  v159(v75, v73, 1, v52);
  sub_100031044(v69, (uint64_t)v36, &qword_1000EBBB0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v75, 1, v52) == 1)
  {
    v78 = v158;
    sub_100031044((uint64_t)v36, v158, &qword_1000EBBB0);
    v79 = type metadata accessor for FallbackActivityEvent(0);
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79) == 1)
    {
      sub_100036060((uint64_t)v36, &qword_1000EBBB0);
      sub_100036060(v78, &qword_1000EBBB0);
      v81 = 1;
      v74 = (uint64_t)v193;
      v82 = v196;
      v83 = (uint64_t)v179;
    }
    else
    {
      v83 = (uint64_t)v179;
      FallbackActivityEvent.timestamp.getter();
      sub_100036060((uint64_t)v36, &qword_1000EBBB0);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v78, v79);
      v81 = 0;
      v74 = (uint64_t)v193;
      v82 = v196;
    }
    v77(v83, v81, 1, v52);
    sub_100036060(v184, &qword_1000EBA10);
    v84 = (uint64_t)v194;
    v85 = v195;
    v86 = (uint64_t)v166;
  }
  else
  {
    sub_100036060((uint64_t)v36, &qword_1000EBBB0);
    v83 = (uint64_t)v179;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v179, v75, v52);
    v77(v83, 0, 1, v52);
    v84 = (uint64_t)v194;
    v85 = v195;
    v86 = (uint64_t)v166;
    v82 = v196;
  }
  sub_10004EFD0(v83, v85, &qword_1000EBA10);
  sub_100031044(v84, (uint64_t)v46, &qword_1000EBBB8);
  v87 = v82(v46, 1, v70);
  v88 = v84;
  v160 = v70;
  if (v87 == 1)
  {
    v89 = (uint64_t)v164;
    v90 = v69;
    sub_100036060((uint64_t)v46, &qword_1000EBBB8);
    v91 = 1;
  }
  else
  {
    v90 = v69;
    v89 = (uint64_t)v164;
    PersistedActivityEvent.object.getter();
    (*(void (**)(char *, uint64_t))(v187 + 8))(v46, v70);
    v91 = 0;
  }
  v92 = (uint64_t)v163;
  v93 = (uint64_t)v162;
  v94 = v185;
  v95 = v186;
  v185(v89, v91, 1, v186);
  sub_100031044(v90, v93, &qword_1000EBBB0);
  v96 = v178;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v178 + 48))(v89, 1, v95) == 1)
  {
    v97 = v88;
    sub_100031044(v93, v92, &qword_1000EBBB0);
    v98 = type metadata accessor for FallbackActivityEvent(0);
    v99 = *(_QWORD *)(v98 - 8);
    v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v92, 1, v98);
    v101 = v90;
    v102 = v160;
    v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v196;
    if (v100 == 1)
    {
      sub_100036060(v93, &qword_1000EBBB0);
      sub_100036060(v92, &qword_1000EBBB0);
      v104 = 1;
    }
    else
    {
      FallbackActivityEvent.object.getter();
      sub_100036060(v93, &qword_1000EBBB0);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v92, v98);
      v104 = 0;
    }
    v74 = (uint64_t)v193;
    v185(v86, v104, 1, v186);
    sub_100036060(v89, &qword_1000EBEE0);
    v106 = v190;
    v105 = v161;
    v88 = v97;
  }
  else
  {
    sub_100036060(v93, &qword_1000EBBB0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32))(v86, v89, v95);
    v94(v86, 0, 1, v95);
    v105 = v161;
    v101 = v90;
    v102 = v160;
    v106 = v190;
    v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v196;
  }
  v107 = v195;
  sub_10004EFD0(v86, v105, &qword_1000EBEE0);
  v108 = v181;
  sub_100031044(v88, v181, &qword_1000EBBB8);
  v109 = v103(v108, 1, v102);
  v110 = v107;
  if (v109 == 1)
  {
    sub_100036060(v108, &qword_1000EBBB8);
    v111 = 1;
  }
  else
  {
    PersistedActivityEvent.participant.getter();
    (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v108, v102);
    v111 = 0;
  }
  v112 = (uint64_t)v170;
  v114 = v188;
  v113 = v189;
  v188(v106, v111, 1, v189);
  sub_100031044(v101, v74, &qword_1000EBBB0);
  v115 = v106;
  v116 = v180;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 48))(v115, 1, v113) == 1)
  {
    sub_100031044(v74, v112, &qword_1000EBBB0);
    v117 = type metadata accessor for FallbackActivityEvent(0);
    v118 = v74;
    v119 = *(_QWORD *)(v117 - 8);
    v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v112, 1, v117);
    v121 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v196;
    v122 = (uint64_t)v174;
    if (v120 == 1)
    {
      sub_100036060(v118, &qword_1000EBBB0);
      sub_100036060(v112, &qword_1000EBBB0);
      v123 = 1;
      v124 = v183;
    }
    else
    {
      v124 = v183;
      FallbackActivityEvent.participant.getter();
      sub_100036060(v118, &qword_1000EBBB0);
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v112, v117);
      v123 = 0;
    }
    v188((uint64_t)v124, v123, 1, v189);
    sub_100036060(v190, &qword_1000EBED8);
    v88 = (uint64_t)v194;
    v127 = v195;
    v126 = v165;
    v125 = (uint64_t)v124;
  }
  else
  {
    sub_100036060(v74, &qword_1000EBBB0);
    v125 = (uint64_t)v183;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v183, v115, v113);
    v114(v125, 0, 1, v113);
    v126 = v165;
    v127 = v110;
    v121 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v196;
    v122 = (uint64_t)v174;
  }
  sub_10004EFD0(v125, v126, &qword_1000EBED8);
  v128 = v182;
  sub_100031044(v88, v182, &qword_1000EBBB8);
  if (v121(v128, 1, v102) == 1)
  {
    sub_100036060(v128, &qword_1000EBBB8);
    v129 = 1;
    v130 = (uint64_t)v176;
    v131 = (uint64_t)v177;
  }
  else
  {
    v130 = (uint64_t)v176;
    PersistedActivityEvent.activity.getter();
    (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v128, v102);
    v129 = 0;
    v131 = (uint64_t)v177;
  }
  v132 = v169;
  v167(v130, v129, 1, v168);
  sub_10004EFD0(v130, v132, &qword_1000EBED0);
  sub_100031044(v101, v122, &qword_1000EBBB0);
  v133 = type metadata accessor for FallbackActivityEvent(0);
  v134 = *(_QWORD *)(v133 - 8);
  v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
  if (v135(v122, 1, v133) == 1)
  {
    sub_100036060(v122, &qword_1000EBBB0);
    v136 = 0;
    v137 = 0;
  }
  else
  {
    v136 = FallbackActivityEvent.typeName.getter();
    v137 = v138;
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v122, v133);
  }
  v139 = v171;
  swift_bridgeObjectRelease(v171[1]);
  *v139 = v136;
  v139[1] = v137;
  sub_100031044(v101, v131, &qword_1000EBBB0);
  v140 = v135(v131, 1, v133);
  if (v140 == 1)
  {
    sub_100036060(v131, &qword_1000EBBB0);
    v141 = 0;
  }
  else
  {
    v141 = FallbackActivityEvent.minimumSupportedNotesVersion.getter();
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v131, v133);
  }
  v142 = v172;
  *v172 = v141;
  *((_BYTE *)v142 + 8) = v140 == 1;
  v143 = v191;
  sub_100031044(v101, v191, &qword_1000EBBB0);
  if (v135(v143, 1, v133) == 1)
  {
    sub_100036060(v191, &qword_1000EBBB0);
    v144 = 0;
    v145 = 0;
  }
  else
  {
    v146 = v191;
    v144 = FallbackActivityEvent.localizedFallbackTitle.getter();
    v145 = v147;
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v146, v133);
  }
  v148 = v192;
  v149 = (uint64_t)v194;
  v150 = v175;
  v151 = v173;
  swift_bridgeObjectRelease(v173[1]);
  *v151 = v144;
  v151[1] = v145;
  v152 = objc_msgSend(v148, "data");
  v153 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v152);
  v155 = v154;

  sub_100036060(v101, &qword_1000EBBB0);
  result = sub_100036060(v149, &qword_1000EBBB8);
  v157 = (uint64_t *)(v127 + v150[11]);
  *v157 = v153;
  v157[1] = v155;
  return result;
}

uint64_t _s14descr1000D81A9V8ActivityVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EBF40;
  if (!qword_1000EBF40)
    return swift_getSingletonMetadata(a1, &_s14descr1000D81A9V8ActivityVMn);
  return result;
}

unint64_t sub_10004EF94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EB810;
  if (!qword_1000EB810)
  {
    v1 = objc_opt_self(ICCloudSyncingObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EB810);
  }
  return result;
}

uint64_t sub_10004EFD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100030EE4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004F014@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;

  v72 = a1;
  v4 = sub_100030EE4(&qword_1000EBED0);
  __chkstk_darwin(v4);
  v65 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  v7 = __chkstk_darwin(v6);
  v61 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (char *)&v57 - v9;
  v10 = sub_100030EE4(&qword_1000EBED8);
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for ActivityEventParticipant(0);
  v69 = *(_QWORD *)(v71 - 8);
  v12 = __chkstk_darwin(v71);
  v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v63 = (char *)&v57 - v14;
  v15 = sub_100030EE4(&qword_1000EBEE0);
  __chkstk_darwin(v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ActivityEventObject(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v59 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v70 = (char *)&v57 - v22;
  v23 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v23);
  v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v62 = (char *)&v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v57 - v30;
  v32 = v2;
  sub_100031044(v2, (uint64_t)v25, &qword_1000EBA10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    v33 = &qword_1000EBA10;
    v34 = (uint64_t)v25;
LABEL_9:
    sub_100036060(v34, v33);
    v46 = type metadata accessor for PersistedActivityEvent(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v72, 1, 1, v46);
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v31, v25, v26);
  v35 = (int *)_s14descr1000D81A9V8ActivityVMa(0);
  sub_100031044(v2 + v35[5], (uint64_t)v17, &qword_1000EBEE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    v33 = &qword_1000EBEE0;
    v34 = (uint64_t)v17;
    goto LABEL_9;
  }
  v36 = v70;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v70, v17, v18);
  v37 = v68;
  sub_100031044(v32 + v35[6], v68, &qword_1000EBED8);
  v38 = v69;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v37, 1, v71) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v36, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    v33 = &qword_1000EBED8;
    v34 = v37;
    goto LABEL_9;
  }
  v57 = v18;
  v58 = v19;
  v39 = v63;
  v40 = v37;
  v41 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v63, v40, v71);
  v42 = v65;
  sub_100031044(v32 + v35[7], v65, &qword_1000EBED0);
  v43 = v66;
  v44 = v38;
  v45 = v67;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v42, 1, v67) == 1)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v41);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v70, v57);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
    v33 = &qword_1000EBED0;
    v34 = v42;
    goto LABEL_9;
  }
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 32))(v64, v42, v45);
  v49 = v39;
  Date.addingTimeInterval(_:)(v48, a2);
  v50 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v59, v70, v57);
  v51 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v52 = v60;
  v53 = v49;
  v51(v60, v49, v41);
  v54 = v61;
  v55 = v64;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v61, v64, v45);
  PersistedActivityEvent.init(timestamp:object:participant:activity:)(v62, v50, v52, v54);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v55, v45);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v71);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v70, v57);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
  v56 = type metadata accessor for PersistedActivityEvent(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v72, 0, 1, v56);
}

uint64_t sub_10004F5B4@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  v3 = v2;
  v69 = a1;
  v5 = sub_100030EE4(&qword_1000EBED8);
  __chkstk_darwin(v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActivityEventParticipant(0);
  v9 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  v67 = v9;
  v10 = __chkstk_darwin(v8);
  v63 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v65 = (char *)&v56 - v12;
  v13 = sub_100030EE4(&qword_1000EBEE0);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActivityEventObject(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v62 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v68 = (char *)&v56 - v20;
  v21 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v21);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v64 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v56 - v28;
  sub_100031044(v3, (uint64_t)v23, &qword_1000EBA10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_100036060((uint64_t)v23, &qword_1000EBA10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v23, v24);
    v30 = (int *)_s14descr1000D81A9V8ActivityVMa(0);
    sub_100031044(v3 + v30[5], (uint64_t)v15, &qword_1000EBEE0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
      sub_100036060((uint64_t)v15, &qword_1000EBEE0);
    }
    else
    {
      v31 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      v61 = v17;
      v32 = v68;
      v31(v68, v15, v16);
      sub_100031044(v3 + v30[6], (uint64_t)v7, &qword_1000EBED8);
      v33 = v66;
      v34 = v67;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v7, 1, v66) == 1)
      {
        (*(void (**)(char *, uint64_t))(v61 + 8))(v32, v16);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
        sub_100036060((uint64_t)v7, &qword_1000EBED8);
      }
      else
      {
        v35 = v61;
        v60 = v16;
        v36 = v65;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v65, v7, v33);
        v37 = v3 + v30[9];
        if (*(_BYTE *)(v37 + 8) == 1)
        {
          (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v68, v60);
        }
        else
        {
          v38 = (uint64_t *)(v3 + v30[8]);
          v39 = v38[1];
          v40 = v68;
          if (v39)
          {
            v41 = (uint64_t *)(v3 + v30[10]);
            v42 = v41[1];
            if (v42)
            {
              v43 = *(_QWORD *)v37;
              v58 = *v38;
              v59 = v43;
              v57 = *v41;
              swift_bridgeObjectRetain(v39);
              v44 = swift_bridgeObjectRetain(v42);
              Date.addingTimeInterval(_:)(v44, a2);
              v45 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
              v46 = v33;
              v47 = v62;
              v45(v62, v40, v60);
              v48 = v67;
              v49 = v63;
              v50 = v65;
              (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v63, v65, v46);
              v51 = v69;
              FallbackActivityEvent.init(timestamp:object:participant:minimumSupportedNotesVersion:typeName:localizedFallbackTitle:)(v64, v47, v49, v59, v58, v39, v57, v42);
              (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v66);
              (*(void (**)(char *, uint64_t))(v61 + 8))(v68, v60);
              (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
              v52 = type metadata accessor for FallbackActivityEvent(0);
              return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 0, 1, v52);
            }
          }
          (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v33);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v60);
        }
        (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
      }
    }
  }
  v54 = v69;
  v55 = type metadata accessor for FallbackActivityEvent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
}

uint64_t *sub_10004FABC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100030EE4(&qword_1000EBA10);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ActivityEventObject(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100030EE4(&qword_1000EBEE0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = a3[6];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for ActivityEventParticipant(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_100030EE4(&qword_1000EBED8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = a3[7];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for PersistedActivityEvent.Activities(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = sub_100030EE4(&qword_1000EBED0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = a3[8];
    v30 = a3[9];
    v31 = (uint64_t *)((char *)a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (char *)a1 + v30;
    v35 = (char *)a2 + v30;
    v34[8] = v35[8];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v36 = a3[10];
    v37 = a3[11];
    v38 = (uint64_t *)((char *)a1 + v36);
    v39 = (uint64_t *)((char *)a2 + v36);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = (uint64_t *)((char *)a1 + v37);
    v42 = (char *)a2 + v37;
    v43 = *(uint64_t *)((char *)a2 + v37);
    v44 = *((_QWORD *)v42 + 1);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v40);
    sub_100049030(v43, v44);
    *v41 = v43;
    v41[1] = v44;
  }
  return a1;
}

uint64_t sub_10004FD94(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for ActivityEventObject(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = a1 + a2[6];
  v10 = type metadata accessor for ActivityEventParticipant(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = a1 + a2[7];
  v13 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  return sub_100040B10(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
}

char *sub_10004FEE8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ActivityEventObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100030EE4(&qword_1000EBEE0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for ActivityEventParticipant(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100030EE4(&qword_1000EBED8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100030EE4(&qword_1000EBED0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[8];
  v28 = a3[9];
  v29 = &a1[v27];
  v30 = &a2[v27];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = &a1[v28];
  v33 = &a2[v28];
  v32[8] = v33[8];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v34 = a3[10];
  v35 = a3[11];
  v36 = &a1[v34];
  v37 = &a2[v34];
  v38 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = v38;
  v39 = (uint64_t *)&a1[v35];
  v40 = &a2[v35];
  v41 = *(_QWORD *)&a2[v35];
  v42 = *((_QWORD *)v40 + 1);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v38);
  sub_100049030(v41, v42);
  *v39 = v41;
  v39[1] = v42;
  return a1;
}

char *sub_100050194(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ActivityEventObject(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_12:
    v20 = sub_100030EE4(&qword_1000EBEE0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_13:
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for ActivityEventParticipant(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_18:
    v29 = sub_100030EE4(&qword_1000EBED8);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_19:
  v30 = a3[7];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 24))(v31, v32, v33);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_24;
  }
  if (v37)
  {
LABEL_24:
    v38 = sub_100030EE4(&qword_1000EBED0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_25:
  v39 = a3[8];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v43 = *((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[9];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_QWORD *)v46;
  v45[8] = v46[8];
  *(_QWORD *)v45 = v47;
  v48 = a3[10];
  v49 = &a1[v48];
  v50 = &a2[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v52 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  v53 = a3[11];
  v54 = (uint64_t *)&a1[v53];
  v55 = (uint64_t *)&a2[v53];
  v56 = *v55;
  v57 = v55[1];
  sub_100049030(*v55, v57);
  v58 = *v54;
  v59 = v54[1];
  *v54 = v56;
  v54[1] = v57;
  sub_100040B10(v58, v59);
  return a1;
}

char *sub_10005058C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ActivityEventObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100030EE4(&qword_1000EBEE0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for ActivityEventParticipant(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100030EE4(&qword_1000EBED8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100030EE4(&qword_1000EBED0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  v30 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  return a1;
}

char *sub_100050808(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ActivityEventObject(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_12:
    v20 = sub_100030EE4(&qword_1000EBEE0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_13:
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for ActivityEventParticipant(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_18:
    v29 = sub_100030EE4(&qword_1000EBED8);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_19:
  v30 = a3[7];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v31, v32, v33);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_24;
  }
  if (v37)
  {
LABEL_24:
    v38 = sub_100030EE4(&qword_1000EBED0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_25:
  v39 = a3[8];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v44 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease(v44);
  v45 = a3[9];
  v46 = a3[10];
  v47 = &a1[v45];
  v48 = &a2[v45];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v48[8];
  v49 = &a1[v46];
  v50 = &a2[v46];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v53 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease(v53);
  v54 = a3[11];
  v55 = *(_QWORD *)&a1[v54];
  v56 = *(_QWORD *)&a1[v54 + 8];
  *(_OWORD *)&a1[v54] = *(_OWORD *)&a2[v54];
  sub_100040B10(v55, v56);
  return a1;
}

uint64_t sub_100050BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100050BD8);
}

uint64_t sub_100050BD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = sub_100030EE4(&qword_1000EBA10);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100030EE4(&qword_1000EBEE0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100030EE4(&qword_1000EBED8);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = sub_100030EE4(&qword_1000EBED0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_100050CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050CF4);
}

uint64_t sub_100050CF4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_100030EE4(&qword_1000EBA10);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100030EE4(&qword_1000EBEE0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_100030EE4(&qword_1000EBED8);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = sub_100030EE4(&qword_1000EBED0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[8] + 8) = a2;
  return result;
}

void sub_100050DF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  sub_100050F10(319, (unint64_t *)&qword_1000EBC48, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100050F10(319, &qword_1000EBF50, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventObject);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100050F10(319, &qword_1000EBF58, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventParticipant);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100050F10(319, (unint64_t *)&unk_1000EBF60, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedActivityEvent.Activities);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          v10[4] = &unk_1000B49E8;
          v10[5] = &unk_1000B4A00;
          v10[6] = &unk_1000B49E8;
          v10[7] = &unk_1000B4A18;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_100050F10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100050F5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100050F94 + 4 * byte_1000B49C8[a1]))(0xD000000000000016, 0x80000001000B0900);
}

uint64_t sub_100050F94()
{
  return 0x6D617473656D6974;
}

uint64_t sub_100050FB0()
{
  return 0x7463656A626FLL;
}

uint64_t sub_100050FC4()
{
  return 0x7069636974726170;
}

uint64_t sub_100050FE4()
{
  return 0x7974697669746361;
}

uint64_t sub_100050FFC()
{
  return 0x6B6361626C6C6166;
}

uint64_t sub_10005103C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v37;
  char v38;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000EBFE0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100051B20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000D81A9V8ActivityV10CodingKeysON, &_s14descr1000D81A9V8ActivityV10CodingKeysON, v11, v9, v10);
  LOBYTE(v37) = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v37, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)_s14descr1000D81A9V8ActivityVMa(0);
    v15 = v3 + v14[5];
    LOBYTE(v37) = 1;
    v16 = type metadata accessor for ActivityEventObject(0);
    v17 = sub_100042114(&qword_1000EBFE8, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventObject, (uint64_t)&protocol conformance descriptor for ActivityEventObject);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v37, v5, v16, v17);
    v18 = v3 + v14[6];
    LOBYTE(v37) = 2;
    v19 = type metadata accessor for ActivityEventParticipant(0);
    v20 = sub_100042114(&qword_1000EBFF0, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventParticipant, (uint64_t)&protocol conformance descriptor for ActivityEventParticipant);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v37, v5, v19, v20);
    v21 = v3 + v14[7];
    LOBYTE(v37) = 3;
    v22 = type metadata accessor for PersistedActivityEvent.Activities(0);
    v23 = sub_100042114(&qword_1000EBFF8, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedActivityEvent.Activities, (uint64_t)&protocol conformance descriptor for PersistedActivityEvent.Activities);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v37, v5, v22, v23);
    v24 = (uint64_t *)(v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v37) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v37, v5);
    v27 = (uint64_t *)(v3 + v14[9]);
    v28 = *v27;
    LOBYTE(v27) = *((_BYTE *)v27 + 8);
    *(_QWORD *)&v37 = v28;
    BYTE8(v37) = (_BYTE)v27;
    v38 = 5;
    type metadata accessor for NotesVersion(0);
    v30 = v29;
    v31 = sub_100042114(&qword_1000EC000, (uint64_t (*)(uint64_t))type metadata accessor for NotesVersion, (uint64_t)&protocol conformance descriptor for ICNotesVersion);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v38, v5, v30, v31);
    v32 = (uint64_t *)(v3 + v14[10]);
    v33 = *v32;
    v34 = v32[1];
    LOBYTE(v37) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v37, v5);
    v37 = *(_OWORD *)(v3 + v14[11]);
    v38 = 7;
    v35 = sub_100051C28();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, &type metadata for Data, v35);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100051398@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  _OWORD v80[2];
  char v81;

  v63 = a2;
  v3 = sub_100030EE4(&qword_1000EBED0);
  __chkstk_darwin(v3);
  v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100030EE4(&qword_1000EBED8);
  __chkstk_darwin(v5);
  v67 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000EBEE0);
  __chkstk_darwin(v7);
  v66 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v9);
  v68 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100030EE4(&qword_1000EBFA8);
  v69 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)_s14descr1000D81A9V8ActivityVMa(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v65 = v16;
  v17(v15, 1, 1);
  v18 = (uint64_t)&v15[v13[5]];
  v19 = type metadata accessor for ActivityEventObject(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v74 = v18;
  v20(v18, 1, 1, v19);
  v21 = &v15[v13[6]];
  v22 = type metadata accessor for ActivityEventParticipant(0);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v75 = (uint64_t)v21;
  v23(v21, 1, 1, v22);
  v24 = (uint64_t)&v15[v13[7]];
  v25 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v73 = v24;
  v26(v24, 1, 1, v25);
  v27 = &v15[v13[8]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  v78 = v27;
  v79 = v15;
  v28 = &v15[v13[9]];
  *(_QWORD *)v28 = 0;
  v28[8] = 1;
  v29 = &v15[v13[10]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v77 = v29;
  v30 = a1[3];
  v31 = a1[4];
  v72 = a1;
  sub_10004242C(a1, v30);
  v32 = sub_100051B20();
  v70 = v12;
  v33 = v76;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000D81A9V8ActivityV10CodingKeysON, &_s14descr1000D81A9V8ActivityV10CodingKeysON, v32, v30, v31);
  if (v33)
  {
    v37 = v74;
    v38 = v75;
    v39 = v73;
    sub_100035424(v72);
    sub_100036060((uint64_t)v79, &qword_1000EBA10);
    sub_100036060(v37, &qword_1000EBEE0);
    sub_100036060(v38, &qword_1000EBED8);
    sub_100036060(v39, &qword_1000EBED0);
    swift_bridgeObjectRelease(*((_QWORD *)v78 + 1));
    return swift_bridgeObjectRelease(*((_QWORD *)v77 + 1));
  }
  else
  {
    v62 = v13;
    v34 = (uint64_t)v66;
    v35 = (uint64_t)v67;
    v76 = v28;
    LOBYTE(v80[0]) = 0;
    sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v36 = (uint64_t)v68;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, v80, v71, v65);
    sub_10004EFD0(v36, (uint64_t)v79, &qword_1000EBA10);
    LOBYTE(v80[0]) = 1;
    sub_100042114(&qword_1000EBFB8, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventObject, (uint64_t)&protocol conformance descriptor for ActivityEventObject);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, v80, v71, v19);
    v40 = v75;
    sub_10004EFD0(v34, v74, &qword_1000EBEE0);
    LOBYTE(v80[0]) = 2;
    sub_100042114(&qword_1000EBFC0, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityEventParticipant, (uint64_t)&protocol conformance descriptor for ActivityEventParticipant);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, v80, v71, v22);
    sub_10004EFD0(v35, v40, &qword_1000EBED8);
    LOBYTE(v80[0]) = 3;
    sub_100042114(&qword_1000EBFC8, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedActivityEvent.Activities, (uint64_t)&protocol conformance descriptor for PersistedActivityEvent.Activities);
    v41 = (uint64_t)v64;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v25, v80, v71, v25);
    sub_10004EFD0(v41, v73, &qword_1000EBED0);
    LOBYTE(v80[0]) = 4;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v80, v71);
    v44 = v43;
    v45 = (uint64_t *)v78;
    swift_bridgeObjectRelease(*((_QWORD *)v78 + 1));
    *v45 = v42;
    v45[1] = v44;
    type metadata accessor for NotesVersion(0);
    v47 = v46;
    v81 = 5;
    sub_100042114(&qword_1000EBFD0, (uint64_t (*)(uint64_t))type metadata accessor for NotesVersion, (uint64_t)&protocol conformance descriptor for ICNotesVersion);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v47, &v81, v71, v47);
    v48 = BYTE8(v80[0]);
    v49 = v76;
    *(_QWORD *)v76 = *(_QWORD *)&v80[0];
    v49[8] = v48;
    LOBYTE(v80[0]) = 6;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v80, v71);
    v51 = v69;
    v52 = v50;
    v54 = v53;
    v55 = v77;
    swift_bridgeObjectRelease(*((_QWORD *)v77 + 1));
    *v55 = v52;
    v55[1] = v54;
    v81 = 7;
    v56 = sub_100051B64();
    v58 = v70;
    v57 = v71;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v80, &type metadata for Data, &v81, v71, &type metadata for Data, v56);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v58, v57);
    v59 = v63;
    v60 = (uint64_t)v79;
    *(_OWORD *)&v79[v62[11]] = v80[0];
    sub_100051BA8(v60, v59);
    sub_100035424(v72);
    return sub_100051BEC(v60);
  }
}

uint64_t sub_100051A70()
{
  unsigned __int8 *v0;

  return sub_100050F5C(*v0);
}

uint64_t sub_100051A78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100051EA0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100051A9C(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100051AA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100051B20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100051AD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100051B20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100051AF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100051398(a1, a2);
}

uint64_t sub_100051B0C(_QWORD *a1)
{
  return sub_10005103C(a1);
}

unint64_t sub_100051B20()
{
  unint64_t result;

  result = qword_1000EBFB0;
  if (!qword_1000EBFB0)
  {
    result = swift_getWitnessTable(&unk_1000B4B44, &_s14descr1000D81A9V8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000EBFB0);
  }
  return result;
}

unint64_t sub_100051B64()
{
  unint64_t result;

  result = qword_1000EBFD8;
  if (!qword_1000EBFD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000EBFD8);
  }
  return result;
}

uint64_t sub_100051BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s14descr1000D81A9V8ActivityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100051BEC(uint64_t a1)
{
  uint64_t v2;

  v2 = _s14descr1000D81A9V8ActivityVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100051C28()
{
  unint64_t result;

  result = qword_1000EC008;
  if (!qword_1000EC008)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000EC008);
  }
  return result;
}

uint64_t _s14descr1000D81A9V8ActivityV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14descr1000D81A9V8ActivityV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100051D48 + 4 * byte_1000B49D5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100051D7C + 4 * byte_1000B49D0[v4]))();
}

uint64_t sub_100051D7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100051D84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100051D8CLL);
  return result;
}

uint64_t sub_100051D98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100051DA0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100051DA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100051DAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000D81A9V8ActivityV10CodingKeysOMa()
{
  return &_s14descr1000D81A9V8ActivityV10CodingKeysON;
}

unint64_t sub_100051DCC()
{
  unint64_t result;

  result = qword_1000EC010;
  if (!qword_1000EC010)
  {
    result = swift_getWitnessTable(&unk_1000B4B1C, &_s14descr1000D81A9V8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000EC010);
  }
  return result;
}

unint64_t sub_100051E14()
{
  unint64_t result;

  result = qword_1000EC018;
  if (!qword_1000EC018)
  {
    result = swift_getWitnessTable(&unk_1000B4A8C, &_s14descr1000D81A9V8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000EC018);
  }
  return result;
}

unint64_t sub_100051E5C()
{
  unint64_t result;

  result = qword_1000EC020;
  if (!qword_1000EC020)
  {
    result = swift_getWitnessTable(&unk_1000B4AB4, &_s14descr1000D81A9V8ActivityV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000EC020);
  }
  return result;
}

uint64_t sub_100051EA0(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  char v7;

  v3 = a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7463656A626FLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0x7069636974726170 && a2 == 0xEB00000000746E61
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7069636974726170, 0xEB00000000746E61, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  if (a1 == 0x7974697669746361 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7974697669746361, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xEC00000065707954
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xEC00000065707954, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  if (a1 == 0xD000000000000016)
  {
    v6 = 0x80000001000B0900;
    if (a2 == 0x80000001000B0900)
      goto LABEL_27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001000B0900, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v6);
    return 5;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xED0000656C746954
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xED0000656C746954, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6;
  }
  else if (a1 == 0x6B6361626C6C6166 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease(0xEC00000061746144);
    return 7;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xEC00000061746144, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t *sub_1000521E0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[7];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 == 1)
    {
      v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = v17;
      v19 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      *((_QWORD *)v15 + 3) = v19;
      v20 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
      *((_QWORD *)v15 + 5) = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
    }
    v21 = a3[8];
    v22 = a3[9];
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)v4 + v21) = v23;
    v24 = *(uint64_t *)((char *)a2 + v22);
    *(uint64_t *)((char *)v4 + v22) = v24;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
  }
  return v4;
}

uint64_t sub_100052358(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = (_QWORD *)(a1 + a2[7]);
  v8 = v7[1];
  if (v8 != 1)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7[3]);
    swift_bridgeObjectRelease(v7[5]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_100052404(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(v14 + 8);
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v16;
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
    v17 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v13 + 24) = v17;
    v18 = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
    *(_QWORD *)(v13 + 40) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  v22 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_100052550(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = (__int128 *)(a2 + v15);
  v18 = *(_QWORD *)(a1 + v15 + 8);
  v19 = *(_QWORD *)(a2 + v15 + 8);
  if (v18 == 1)
  {
    if (v19 == 1)
    {
      v20 = *v17;
      v21 = v17[2];
      *(_OWORD *)(v16 + 16) = v17[1];
      *(_OWORD *)(v16 + 32) = v21;
      *(_OWORD *)v16 = v20;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v24 = *((_QWORD *)v17 + 1);
      *(_QWORD *)(v16 + 8) = v24;
      *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
      v25 = *((_QWORD *)v17 + 3);
      *(_QWORD *)(v16 + 24) = v25;
      *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
      v26 = *((_QWORD *)v17 + 5);
      *(_QWORD *)(v16 + 40) = v26;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
    }
  }
  else if (v19 == 1)
  {
    sub_1000527A8((_QWORD *)v16);
    v23 = v17[1];
    v22 = v17[2];
    *(_OWORD *)v16 = *v17;
    *(_OWORD *)(v16 + 16) = v23;
    *(_OWORD *)(v16 + 32) = v22;
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v27 = *((_QWORD *)v17 + 1);
    *(_QWORD *)(v16 + 8) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v18);
    *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
    v28 = *((_QWORD *)v17 + 3);
    v29 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
    v30 = *((_QWORD *)v17 + 5);
    v31 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
  }
  v32 = a3[8];
  v33 = *(_QWORD *)(a1 + v32);
  v34 = *(_QWORD *)(a2 + v32);
  *(_QWORD *)(a1 + v32) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v33);
  v35 = a3[9];
  v36 = *(_QWORD *)(a1 + v35);
  v37 = *(_QWORD *)(a2 + v35);
  *(_QWORD *)(a1 + v35) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v36);
  return a1;
}

_QWORD *sub_1000527A8(_QWORD *a1)
{
  destroy for ICArchiveCreator(a1);
  return a1;
}

uint64_t sub_1000527DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = a3[8];
  v14 = (_OWORD *)(a1 + v12);
  v15 = (_OWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v14[2] = v15[2];
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000528E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = *(_QWORD *)(a1 + v15 + 8);
  if (v18 != 1)
  {
    v19 = v17[1];
    if (v19 != 1)
    {
      *v16 = *v17;
      v16[1] = v19;
      swift_bridgeObjectRelease(v18);
      v21 = v17[3];
      v22 = v16[3];
      v16[2] = v17[2];
      v16[3] = v21;
      swift_bridgeObjectRelease(v22);
      v23 = v17[5];
      v24 = v16[5];
      v16[4] = v17[4];
      v16[5] = v23;
      swift_bridgeObjectRelease(v24);
      goto LABEL_12;
    }
    sub_1000527A8(v16);
  }
  v20 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v20;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
LABEL_12:
  v25 = a3[8];
  v26 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = *(_QWORD *)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_100052A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100052AA0);
}

uint64_t sub_100052AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100030EE4(&qword_1000EBA10);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100052B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100052B3C);
}

uint64_t sub_100052B3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100030EE4(&qword_1000EBA10);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = a2;
  return result;
}

uint64_t type metadata accessor for ICArchiveModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EC080;
  if (!qword_1000EC080)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ICArchiveModel);
  return result;
}

void sub_100052BF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1000B4BC8;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10004B4E4(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000B4BE0;
    v4[4] = &unk_1000B4BF8;
    v4[5] = &unk_1000B4BF8;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_100052C8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100052CC4 + 4 * byte_1000B4BA0[a1]))(0xD000000000000011, 0x80000001000B0920);
}

uint64_t sub_100052CC4()
{
  return 0x6E65644965707974;
}

uint64_t sub_100052CE8()
{
  return 0x6E6F697369766572;
}

uint64_t sub_100052D00()
{
  return 0x4164657461657263;
}

uint64_t sub_100052D1C()
{
  return 0x4264657461657263;
}

uint64_t sub_100052D3C()
{
  return 1936154996;
}

uint64_t sub_100052D4C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v26[3];
  char v27;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000EC108);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100053514();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICArchiveModel.CodingKeys, &type metadata for ICArchiveModel.CodingKeys, v11, v9, v10);
  LOBYTE(v26[0]) = *(_BYTE *)v3;
  v27 = 0;
  v12 = sub_10004B5D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v27, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    LOBYTE(v26[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v26, v5);
    v14 = (int *)type metadata accessor for ICArchiveModel(0);
    v15 = v3 + v14[6];
    LOBYTE(v26[0]) = 2;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, v26, v5, v16, v17);
    v18 = (_OWORD *)(v3 + v14[7]);
    v19 = v18[1];
    v26[0] = *v18;
    v26[1] = v19;
    v26[2] = v18[2];
    v27 = 3;
    v20 = sub_10005361C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, &type metadata for ICArchiveCreator, v20);
    *(_QWORD *)&v26[0] = *(_QWORD *)(v3 + v14[8]);
    v27 = 4;
    v21 = sub_100030EE4(&qword_1000EC0E0);
    v22 = sub_100053660(&qword_1000EC118, &qword_1000EC120, (uint64_t)&unk_1000B7EE8, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v21, v22);
    *(_QWORD *)&v26[0] = *(_QWORD *)(v3 + v14[9]);
    v27 = 5;
    v23 = sub_100030EE4(&qword_1000EC0F8);
    v24 = sub_1000536E4(&qword_1000EC128, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005300C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  char v52;

  v41 = a2;
  v3 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v3);
  *(_QWORD *)&v44 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100030EE4(&qword_1000EC0C8);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for ICArchiveModel(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = 0;
  *((_QWORD *)v10 + 1) = 1;
  v11 = (uint64_t)&v10[*(int *)(v8 + 24)];
  Date.init()();
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v42 = v11;
  v13(v11, 0, 1, v12);
  v14 = (uint64_t *)&v10[v7[7]];
  *(_OWORD *)v14 = xmmword_1000B4D80;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  v15 = v7[8];
  *(_QWORD *)&v10[v15] = 0;
  v16 = v7[9];
  v46 = a1;
  v47 = v10;
  *(_QWORD *)&v10[v16] = 0;
  v17 = a1[3];
  v18 = a1[4];
  sub_10004242C(a1, v17);
  v19 = sub_100053514();
  v20 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICArchiveModel.CodingKeys, &type metadata for ICArchiveModel.CodingKeys, v19, v17, v18);
  if (v20)
  {
    v37 = v46;
    v26 = (uint64_t)v47;
  }
  else
  {
    *(_QWORD *)&v48 = v12;
    v39 = v15;
    v40 = v14;
    v22 = v43;
    v21 = v44;
    v38 = v16;
    v52 = 0;
    v23 = sub_1000312F0();
    v24 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v49, &type metadata for ICArchiveModels, &v52, v45, &type metadata for ICArchiveModels, v23);
    v26 = (uint64_t)v47;
    *v47 = v49[0];
    LOBYTE(v49[0]) = 1;
    *(_QWORD *)(v26 + 8) = KeyedDecodingContainer.decode(_:forKey:)(v49, v24);
    LOBYTE(v49[0]) = 2;
    sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, v49, v24, v48);
    sub_100048A00(v21, v42);
    v52 = 3;
    sub_100053594();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICArchiveCreator, &v52, v24, &type metadata for ICArchiveCreator);
    v48 = v49[0];
    v44 = v49[1];
    v28 = v50;
    v27 = v51;
    v29 = v40;
    sub_100048A48(*v40, v40[1], v40[2], v40[3], v40[4], v40[5]);
    v30 = v44;
    *(_OWORD *)v29 = v48;
    *((_OWORD *)v29 + 1) = v30;
    v29[4] = v28;
    v29[5] = v27;
    v31 = sub_100030EE4(&qword_1000EC0E0);
    v52 = 4;
    sub_100053660(&qword_1000EC0E8, &qword_1000EC0F0, (uint64_t)&unk_1000B7D74, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v52, v24, v31);
    v32 = *(_QWORD *)&v49[0];
    v33 = v39;
    swift_bridgeObjectRelease(*(_QWORD *)(v26 + v39));
    *(_QWORD *)(v26 + v33) = v32;
    v34 = sub_100030EE4(&qword_1000EC0F8);
    v52 = 5;
    sub_1000536E4(&qword_1000EC100, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &v52, v24, v34);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v24);
    v35 = *(_QWORD *)&v49[0];
    v36 = v38;
    swift_bridgeObjectRelease(*(_QWORD *)(v26 + v38));
    *(_QWORD *)(v26 + v36) = v35;
    sub_1000535D8(v26, v41);
    v37 = v46;
  }
  sub_100035424(v37);
  return sub_100053558(v26);
}

uint64_t sub_100053464()
{
  unsigned __int8 *v0;

  return sub_100052C8C(*v0);
}

uint64_t sub_10005346C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100053978(a1, a2);
  *a3 = result;
  return result;
}

void sub_100053490(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10005349C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053514();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000534C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053514();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000534EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005300C(a1, a2);
}

uint64_t sub_100053500(_QWORD *a1)
{
  return sub_100052D4C(a1);
}

unint64_t sub_100053514()
{
  unint64_t result;

  result = qword_1000EC0D0;
  if (!qword_1000EC0D0)
  {
    result = swift_getWitnessTable(&unk_1000B4D24, &type metadata for ICArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC0D0);
  }
  return result;
}

uint64_t sub_100053558(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ICArchiveModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100053594()
{
  unint64_t result;

  result = qword_1000EC0D8;
  if (!qword_1000EC0D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveCreator, &type metadata for ICArchiveCreator);
    atomic_store(result, (unint64_t *)&qword_1000EC0D8);
  }
  return result;
}

uint64_t sub_1000535D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ICArchiveModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005361C()
{
  unint64_t result;

  result = qword_1000EC110;
  if (!qword_1000EC110)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveCreator, &type metadata for ICArchiveCreator);
    atomic_store(result, (unint64_t *)&qword_1000EC110);
  }
  return result;
}

uint64_t sub_100053660(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100030FF0(&qword_1000EC0E0);
    sub_100042114(a2, _s14descr1000DA8A1V3TagVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000536E4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100030FF0(&qword_1000EC0F8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ICArchiveModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100053820 + 4 * byte_1000B4BAB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100053854 + 4 * byte_1000B4BA6[v4]))();
}

uint64_t sub_100053854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005385C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100053864);
  return result;
}

uint64_t sub_100053870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100053878);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10005387C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveModel.CodingKeys()
{
  return &type metadata for ICArchiveModel.CodingKeys;
}

unint64_t sub_1000538A4()
{
  unint64_t result;

  result = qword_1000EC130;
  if (!qword_1000EC130)
  {
    result = swift_getWitnessTable(&unk_1000B4CFC, &type metadata for ICArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC130);
  }
  return result;
}

unint64_t sub_1000538EC()
{
  unint64_t result;

  result = qword_1000EC138;
  if (!qword_1000EC138)
  {
    result = swift_getWitnessTable(&unk_1000B4C6C, &type metadata for ICArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC138);
  }
  return result;
}

unint64_t sub_100053934()
{
  unint64_t result;

  result = qword_1000EC140;
  if (!qword_1000EC140)
  {
    result = swift_getWitnessTable(&unk_1000B4C94, &type metadata for ICArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC140);
  }
  return result;
}

uint64_t sub_100053978(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0x4264657461657263 && a2 == 0xE900000000000079
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4264657461657263, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 1936154996 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1936154996, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000B0920)
  {
    swift_bridgeObjectRelease(0x80000001000B0920);
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000B0920, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void sub_100053BE0(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_100053C38()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0x80000001000AFE20);
  swift_bridgeObjectRelease(0x80000001000AFE20);
  return Hasher._finalize()();
}

Swift::Int sub_100053CAC(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0x544847494CLL;
  else
    v2 = 0x544C5541464544;
  if ((a1 & 1) != 0)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100053D28(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)((char *)&unk_1000B5200 + v2);
  String.hash(into:)(v5, *(_QWORD *)&aPreview_3[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100053D90(char a1)
{
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  if ((a1 & 1) != 0)
    v2 = 0x4C41434F4CLL;
  else
    v2 = 0x44554F4C43;
  String.hash(into:)(v4, v2, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_100053DFC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)((char *)&unk_1000B52E8 + v2);
  String.hash(into:)(v5, *(_QWORD *)((char *)&unk_1000B52C8 + v2), v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100053E64(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aGrayscalblackA_0[v2 + 24];
  String.hash(into:)(v5, *(_QWORD *)&aPhoto_2[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100053ECC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)((char *)&unk_1000B5150 + v2);
  String.hash(into:)(v5, *(_QWORD *)&aPurple_2[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100053F34(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)((char *)&unk_1000B5100 + v2);
  String.hash(into:)(v5, *(_QWORD *)&aLeft_3[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_100053F9C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_100053FF4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x4C41525554414ELL, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_100054098(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)((char *)&unk_1000B5260 + v2);
  String.hash(into:)(v5, *(_QWORD *)&aNormal_2[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100054100(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aAt_0[v2];
  String.hash(into:)(v5, *(_QWORD *)&aCreatedModifie_0[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100054168(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0x49444E4543534544;
  else
    v2 = 0x4E49444E45435341;
  if ((a1 & 1) != 0)
    v3 = 0xEA0000000000474ELL;
  else
    v3 = 0xE900000000000047;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000541F0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)((char *)&unk_1000B52E8 + v2);
  String.hash(into:)(a1, *(_QWORD *)((char *)&unk_1000B52C8 + v2), v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100054230(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aGrayscalblackA_0[v2 + 24];
  String.hash(into:)(a1, *(_QWORD *)&aPhoto_2[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100054270(uint64_t a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
    v2 = 0x4C41434F4CLL;
  else
    v2 = 0x44554F4C43;
  String.hash(into:)(a1, v2, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

uint64_t sub_1000542AC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)((char *)&unk_1000B5260 + v2);
  String.hash(into:)(a1, *(_QWORD *)&aNormal_2[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000542EC(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x49444E4543534544;
  else
    v3 = 0x4E49444E45435341;
  if (v2)
    v4 = 0xE900000000000047;
  else
    v4 = 0xEA0000000000474ELL;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10005434C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aAt_0[v2];
  String.hash(into:)(a1, *(_QWORD *)&aCreatedModifie_0[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10005438C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)((char *)&unk_1000B5200 + v2);
  String.hash(into:)(a1, *(_QWORD *)&aPreview_3[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000543CC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aSmallGrmediumG_1[v2 + 48];
  String.hash(into:)(a1, *(_QWORD *)&aNone_3[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10005440C(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x544847494CLL;
  else
    v3 = 0x544C5541464544;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_100054460(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000544A4(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2, 0x80000001000AFE20);
  return swift_bridgeObjectRelease(0x80000001000AFE20);
}

void sub_1000544FC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100054540(uint64_t a1)
{
  String.hash(into:)(a1, 0x4C41525554414ELL, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

uint64_t sub_1000545C8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)((char *)&unk_1000B5150 + v2);
  String.hash(into:)(a1, *(_QWORD *)&aPurple_2[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100054608(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)((char *)&unk_1000B5100 + v2);
  String.hash(into:)(a1, *(_QWORD *)&aLeft_3[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100054648(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)((char *)&unk_1000B5100 + v3);
  String.hash(into:)(v6, *(_QWORD *)&aLeft_3[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_1000546AC(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)((char *)&unk_1000B5150 + v3);
  String.hash(into:)(v6, *(_QWORD *)&aPurple_2[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100054710(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_100054764()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x4C41525554414ELL, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_100054808(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10005485C()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0x80000001000AFE20);
  swift_bridgeObjectRelease(0x80000001000AFE20);
  return Hasher._finalize()();
}

Swift::Int sub_1000548D0(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0x544847494CLL;
  else
    v3 = 0x544C5541464544;
  if ((a2 & 1) != 0)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100054948(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aSmallGrmediumG_1[v3 + 48];
  String.hash(into:)(v6, *(_QWORD *)&aNone_3[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_1000549AC(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)((char *)&unk_1000B5200 + v3);
  String.hash(into:)(v6, *(_QWORD *)&aPreview_3[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100054A10(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aAt_0[v3];
  String.hash(into:)(v6, *(_QWORD *)&aCreatedModifie_0[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100054A74(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0x49444E4543534544;
  else
    v3 = 0x4E49444E45435341;
  if ((a2 & 1) != 0)
    v4 = 0xEA0000000000474ELL;
  else
    v4 = 0xE900000000000047;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100054AF8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)((char *)&unk_1000B5260 + v3);
  String.hash(into:)(v6, *(_QWORD *)&aNormal_2[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100054B5C(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  if ((a2 & 1) != 0)
    v3 = 0x4C41434F4CLL;
  else
    v3 = 0x44554F4C43;
  String.hash(into:)(v5, v3, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_100054BC4(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aGrayscalblackA_0[v3 + 24];
  String.hash(into:)(v6, *(_QWORD *)&aPhoto_2[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100054C28(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)((char *)&unk_1000B52E8 + v3);
  String.hash(into:)(v6, *(_QWORD *)((char *)&unk_1000B52C8 + v3), v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

id sub_100054C8C(id a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, double a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  id v15;
  void *v16;
  char v17;
  void *v18;
  char **v19;
  id v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSString v26;
  uint64_t v27;
  unint64_t v28;
  char v30;
  char v31;

  v8 = v6;
  if ((a3 & 1) == 0 || (v15 = objc_msgSend(a1, "managedObjectContext")) == 0)
  {
LABEL_8:
    ObjectType = swift_getObjectType(a1);
    v20 = a1;
    v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, double))(a2 + 16))(v8[1], v8[2], a3 & 0x101, a4, a5, ObjectType, a2, a6);
    if (!v7)
    {
      v20 = (id)v22;
      v23 = objc_opt_self(ICFolder);
      v24 = swift_dynamicCastObjCClass(v20, v23);
      if (v24)
      {
        v25 = (void *)v24;
        v20 = v20;
        v26 = v20;
        if (objc_msgSend(v25, "isRenamable"))
        {
          v27 = v8[4];
          if (v27)
            v28 = v8[4];
          else
            v28 = 0xE000000000000000;
          swift_bridgeObjectRetain(v27);
          v26 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v28);
          objc_msgSend(v25, "setTitle:", v26);

        }
      }
    }
    return v20;
  }
  v16 = v15;
  sub_1000490E8((uint64_t)(v6 + 5), (uint64_t)&v30, &qword_1000EC168);
  sub_1000490E8((uint64_t)&v30, (uint64_t)&v31, &qword_1000EC168);
  v17 = v31;
  if (v31 == 2)
  {

    goto LABEL_8;
  }
  v18 = (void *)objc_opt_self(ICAccount);
  v19 = &selRef_cloudKitAccountInContext_;
  if ((v17 & 1) != 0)
    v19 = &selRef_localAccountInContext_;
  v20 = objc_msgSend(v18, *v19, v16);

  if (!v20)
    goto LABEL_8;
  return v20;
}

id sub_100054E7C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id result;
  uint64_t i;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  _BYTE v17[8];
  uint64_t v18;

  sub_1000490E8(v2 + 56, (uint64_t)v17, &qword_1000EC160);
  sub_1000490E8((uint64_t)v17, (uint64_t)&v18, &qword_1000EC160);
  v5 = v18;
  if (!v18)
    return 0;
  swift_bridgeObjectRetain(a2);
  v6 = (uint64_t)sub_100040980(v5, a2);
  swift_bridgeObjectRelease(a2);
  v7 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  v8 = v7;
  if (!((unint64_t)v6 >> 62))
  {
    v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = v7;
    result = (id)swift_bridgeObjectRetain(v6);
    if (v9)
      goto LABEL_4;
LABEL_15:

    swift_bridgeObjectRelease_n(v6, 2);
    objc_msgSend(a1, "setSubFolderOrderMergeableDataDirty:", 1);
    objc_msgSend(a1, "saveSubFolderMergeableDataIfNeeded");
    return objc_msgSend(a1, "subFolderIdentifiersOrderedSetDocument");
  }
  if (v6 < 0)
    v15 = v6;
  else
    v15 = v6 & 0xFFFFFFFFFFFFFF8;
  v16 = v7;
  swift_bridgeObjectRetain(v6);
  result = (id)_CocoaArrayWrapper.endIndex.getter(v15);
  v9 = (uint64_t)result;
  if (!result)
    goto LABEL_15;
LABEL_4:
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v13 = *(id *)(v6 + 8 * i + 32);
      v14 = v13;
      objc_msgSend(v8, "addObject:", v13);

    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100055040()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000EC148);
  sub_10003609C(v0, (uint64_t)qword_1000EC148);
  return static Logger.archiving.getter();
}

uint64_t sub_100055088(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000550C0 + 4 * byte_1000B4DAE[a1]))(0xD000000000000011, 0x80000001000B0920);
}

uint64_t sub_1000550C0()
{
  return 0x6E65644965707974;
}

uint64_t sub_1000550E4()
{
  return 0x696669746E656469;
}

uint64_t sub_100055100()
{
  return 0x656C746974;
}

uint64_t sub_100055114()
{
  return 1701869940;
}

uint64_t sub_100055124()
{
  return 1936154996;
}

uint64_t sub_100055134(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v24[15];
  char v25;
  _BYTE v26[8];
  _BYTE v27[15];
  char v28;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000EC1C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100055FE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICAccountArchiveModel.CodingKeys, &type metadata for ICAccountArchiveModel.CodingKeys, v11, v9, v10);
  v24[0] = *(_BYTE *)v3;
  v25 = 0;
  v12 = sub_10004B5D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v25, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    v24[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v24, v5);
    v15 = *(_QWORD *)(v3 + 24);
    v16 = *(_QWORD *)(v3 + 32);
    v24[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v24, v5);
    sub_1000490E8(v3 + 40, (uint64_t)&v28, &qword_1000EC168);
    sub_1000490E8((uint64_t)&v28, (uint64_t)v24, &qword_1000EC168);
    v25 = 3;
    v17 = sub_100056024();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v5, &type metadata for ICAccountArchiveModel.Types, v17);
    sub_1000490E8(v3 + 48, (uint64_t)v27, &qword_1000EBB38);
    sub_1000490E8((uint64_t)v27, (uint64_t)v24, &qword_1000EBB38);
    v25 = 4;
    v18 = sub_100030EE4(&qword_1000EC0E0);
    v19 = sub_100056684(&qword_1000EC118, &qword_1000EC120, (uint64_t)&unk_1000B7EE8, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v5, v18, v19);
    sub_1000490E8(v3 + 56, (uint64_t)v26, &qword_1000EC160);
    sub_1000490E8((uint64_t)v26, (uint64_t)v24, &qword_1000EC160);
    v25 = 5;
    v20 = sub_100030EE4(&qword_1000EC0F8);
    v21 = sub_1000536E4(&qword_1000EC128, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v5, v20, v21);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000553F8()
{
  unsigned __int8 *v0;

  return sub_100055088(*v0);
}

uint64_t sub_100055400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100056068(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100055424(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100055FE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005544C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100055FE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100055474@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1000562B4(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1000554B4(_QWORD *a1)
{
  return sub_100055134(a1);
}

uint64_t sub_1000554EC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4C41434F4CLL;
  else
    return 0x44554F4C43;
}

uint64_t sub_100055514(char *a1, char *a2)
{
  return sub_10003628C(*a1, *a2);
}

Swift::Int sub_100055520()
{
  char *v0;

  return sub_100053D90(*v0);
}

uint64_t sub_100055528(uint64_t a1)
{
  char *v1;

  return sub_100054270(a1, *v1);
}

Swift::Int sub_100055530(uint64_t a1)
{
  char *v1;

  return sub_100054B5C(a1, *v1);
}

uint64_t sub_100055538@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D6D30, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100055594@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000554EC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000555BC(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D6D80;
}

uint64_t sub_1000555CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100056740();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100055628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100056740();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100055674(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100055680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;

  v8 = sub_100056784();
  v9 = sub_100056740();
  return ArgumentDecodable<>.init(fromArgument:)(a1, a2, a3, a4, v8, v9, &protocol witness table for String);
}

uint64_t sub_1000556F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;

  v8 = sub_100056784();
  v9 = sub_100056740();
  return static ArgumentDecodable<>.typeSummary(forName:)(a1, a2, a3, a4, v8, v9, &protocol witness table for String);
}

uint64_t sub_100055758(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 == 1)
    return 0;
  if (a1 == 3)
    return 1;
  if (qword_1000EB680 != -1)
    swift_once(&qword_1000EB680, sub_100055040);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10003609C(v2, (uint64_t)qword_1000EC148);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v1 = 2;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown account type â€” returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    return 2;
  }
  return v1;
}

uint64_t sub_100055858@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;

  sub_100055B20(a2);
  v5 = objc_msgSend(a1, "identifier");
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain(v9);
  v10 = objc_msgSend(a1, "localizedName");
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;

  v32 = v12;
  swift_bridgeObjectRetain(v12);
  v31 = sub_100055758((int)objc_msgSend(a1, "accountType"));
  v35 = a1;
  v13 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  v14 = objc_msgSend(v13, "allObjects");

  v15 = sub_100055B54();
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  if (!((unint64_t)v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    v34 = v9;
    if (v17)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease(v16);

LABEL_20:
    swift_bridgeObjectRetain(v34);
    v29 = swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v32);
    result = swift_bridgeObjectRelease_n(v34, 2);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v34;
    *(_QWORD *)(a3 + 24) = v33;
    *(_QWORD *)(a3 + 32) = v32;
    *(_BYTE *)(a3 + 40) = v31;
    *(_QWORD *)(a3 + 48) = &_swiftEmptySetSingleton;
    *(_QWORD *)(a3 + 56) = _swiftEmptyArrayStorage;
    return result;
  }
  if (v16 < 0)
    v28 = v16;
  else
    v28 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v17 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v16);
  v34 = v9;
  if (!v17)
    goto LABEL_19;
LABEL_6:
  result = sub_10003F268(0, v17 & ~(v17 >> 63), 0);
  if ((v17 & 0x8000000000000000) == 0)
  {
    v30 = a3;
    v19 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
        v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v16);
      else
        v20 = *(id *)(v16 + 8 * v19 + 32);
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

      v26 = _swiftEmptyArrayStorage[2];
      v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1)
        sub_10003F268(v25 > 1, v26 + 1, 1);
      ++v19;
      _swiftEmptyArrayStorage[2] = v26 + 1;
      v27 = &_swiftEmptyArrayStorage[2 * v26];
      v27[4] = v22;
      v27[5] = v24;
    }
    while (v17 != v19);
    swift_bridgeObjectRelease(v16);

    a3 = v30;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t *sub_100055B20(uint64_t *a1)
{
  sub_100048A48(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

unint64_t sub_100055B54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EBB98;
  if (!qword_1000EBB98)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EBB98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ICAccountArchiveModel.Types(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100055BDC + 4 * byte_1000B4DB9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100055C10 + 4 * byte_1000B4DB4[v4]))();
}

uint64_t sub_100055C10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055C18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100055C20);
  return result;
}

uint64_t sub_100055C2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100055C34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100055C38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055C40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAccountArchiveModel.Types()
{
  return &type metadata for ICAccountArchiveModel.Types;
}

uint64_t destroy for ICAccountArchiveModel(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for ICAccountArchiveModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for ICAccountArchiveModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for ICAccountArchiveModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ICAccountArchiveModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v8 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICAccountArchiveModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICAccountArchiveModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICAccountArchiveModel()
{
  return &type metadata for ICAccountArchiveModel;
}

unint64_t sub_100055ED4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10004225C();
  result = sub_10004E0E4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100055F04()
{
  unint64_t result;

  result = qword_1000EC1A8;
  if (!qword_1000EC1A8)
  {
    result = swift_getWitnessTable(&unk_1000B4E6C, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000EC1A8);
  }
  return result;
}

unint64_t sub_100055F4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC1B0;
  if (!qword_1000EC1B0)
  {
    v1 = sub_100030FF0(&qword_1000EC1B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000EC1B0);
  }
  return result;
}

unint64_t sub_100055F9C()
{
  unint64_t result;

  result = qword_1000EC1C0;
  if (!qword_1000EC1C0)
  {
    result = swift_getWitnessTable(&unk_1000B4F44, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000EC1C0);
  }
  return result;
}

unint64_t sub_100055FE0()
{
  unint64_t result;

  result = qword_1000EC1D0;
  if (!qword_1000EC1D0)
  {
    result = swift_getWitnessTable(&unk_1000B5080, &type metadata for ICAccountArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC1D0);
  }
  return result;
}

unint64_t sub_100056024()
{
  unint64_t result;

  result = qword_1000EC1D8;
  if (!qword_1000EC1D8)
  {
    result = swift_getWitnessTable(&unk_1000B4E44, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000EC1D8);
  }
  return result;
}

uint64_t sub_100056068(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 1936154996 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1936154996, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000B0920)
  {
    swift_bridgeObjectRelease(0x80000001000B0920);
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000B0920, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1000562B4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;

  v5 = sub_100030EE4(&qword_1000EC1E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100055FE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICAccountArchiveModel.CodingKeys, &type metadata for ICAccountArchiveModel.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100035424(a1);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    return swift_bridgeObjectRelease(0);
  }
  else
  {
    v33 = 0;
    v12 = sub_1000312F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for ICArchiveModels, &v33, v5, &type metadata for ICArchiveModels, v12);
    v13 = v31;
    LOBYTE(v31) = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
    v16 = v15;
    v30 = v14;
    v32 = v13;
    LOBYTE(v31) = 2;
    swift_bridgeObjectRetain(v15);
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    v19 = v18;
    v29 = v17;
    v33 = 3;
    sub_100055F04();
    swift_bridgeObjectRetain(v19);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAccountArchiveModel.Types, &v33, v5, &type metadata for ICAccountArchiveModel.Types);
    v28 = v31;
    v20 = sub_100030EE4(&qword_1000EC0E0);
    v33 = 4;
    sub_100056684(&qword_1000EC0E8, &qword_1000EC0F0, (uint64_t)&unk_1000B7D74, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v20, &v33, v5, v20);
    v27 = a2;
    v21 = v31;
    v22 = sub_100030EE4(&qword_1000EC0F8);
    v33 = 5;
    sub_1000536E4(&qword_1000EC100, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v21);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, &v33, v5, v22);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v23 = v31;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRelease(0);
    sub_100035424(a1);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v19);
    result = swift_bridgeObjectRelease(v16);
    v25 = v27;
    *v27 = v32;
    *((_QWORD *)v25 + 1) = v30;
    *((_QWORD *)v25 + 2) = v16;
    *((_QWORD *)v25 + 3) = v29;
    *((_QWORD *)v25 + 4) = v19;
    v25[40] = v28;
    *((_QWORD *)v25 + 6) = v21;
    *((_QWORD *)v25 + 7) = v23;
  }
  return result;
}

uint64_t sub_100056684(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100030FF0(&qword_1000EC0E0);
    sub_100056700(a2, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100056700(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = _s14descr1000DA8A1V3TagVMa(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100056740()
{
  unint64_t result;

  result = qword_1000EC1E8;
  if (!qword_1000EC1E8)
  {
    result = swift_getWitnessTable(&unk_1000B4ECC, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000EC1E8);
  }
  return result;
}

unint64_t sub_100056784()
{
  unint64_t result;

  result = qword_1000EC1F0;
  if (!qword_1000EC1F0)
  {
    result = swift_getWitnessTable(&unk_1000B4E94, &type metadata for ICAccountArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000EC1F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ICAccountArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100056814 + 4 * byte_1000B4DC3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100056848 + 4 * byte_1000B4DBE[v4]))();
}

uint64_t sub_100056848(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100056850(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100056858);
  return result;
}

uint64_t sub_100056864(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005686CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100056870(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100056878(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAccountArchiveModel.CodingKeys()
{
  return &type metadata for ICAccountArchiveModel.CodingKeys;
}

unint64_t sub_100056898()
{
  unint64_t result;

  result = qword_1000EC1F8;
  if (!qword_1000EC1F8)
  {
    result = swift_getWitnessTable(&unk_1000B5058, &type metadata for ICAccountArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC1F8);
  }
  return result;
}

unint64_t sub_1000568E0()
{
  unint64_t result;

  result = qword_1000EC200;
  if (!qword_1000EC200)
  {
    result = swift_getWitnessTable(&unk_1000B4FC8, &type metadata for ICAccountArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC200);
  }
  return result;
}

unint64_t sub_100056928()
{
  unint64_t result;

  result = qword_1000EC208;
  if (!qword_1000EC208)
  {
    result = swift_getWitnessTable(&unk_1000B4FF0, &type metadata for ICAccountArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC208);
  }
  return result;
}

uint64_t sub_10005696C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = sub_10005F76C(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v3);
  v6 = *v5;
  v7 = v5[1];
  v8 = (void *)v5[2];
  v9 = (void *)v5[3];
  swift_errorRetain(*v5);
  v10 = v9;
  swift_bridgeObjectRetain(v7);
  v11 = v8;
  return v6;
}

uint64_t sub_1000569EC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000EC210);
  sub_10003609C(v0, (uint64_t)qword_1000EC210);
  return static Logger.archiving.getter();
}

id sub_100056A34()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char *v33;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  objc_class *ObjectType;
  objc_super v44;
  _QWORD *v45;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for UTType(0, v2);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  __chkstk_darwin(v3);
  v40 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_queue;
  v36[1] = sub_100036000(0, &qword_1000EC318, OS_dispatch_queue_ptr);
  v45 = (_QWORD *)sub_100030EE4(&qword_1000EC328);
  v14 = v1;
  v15 = sub_100030EE4(&qword_1000EC330);
  v16 = String.init<A>(describing:)(&v45, v15);
  v18 = v17;
  static DispatchQoS.unspecified.getter();
  v45 = _swiftEmptyArrayStorage;
  v19 = sub_100042114(&qword_1000EC338, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_100030EE4(&qword_1000EC340);
  v21 = sub_100036140(&qword_1000EC348, &qword_1000EC340, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v20, v21, v8, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v39);
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v16, v18, v13, v10, v7, 0);
  *(_QWORD *)(v36[0] + v37) = v22;
  v23 = objc_allocWithZone((Class)NSUserDefaults);
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v23, "initWithSuiteName:", v24);

  if (!v25)
    v25 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  *(_QWORD *)&v14[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_userDefaults] = v25;
  v26 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_allowedContentTypes;
  v27 = sub_100030EE4((uint64_t *)&unk_1000EC350);
  v28 = v41;
  v29 = *(unsigned __int8 *)(v41 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(v27, v30 + *(_QWORD *)(v41 + 72), v29 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1000B5310;
  v32 = objc_msgSend((id)objc_opt_self(ICArchive), "universalTypeIdentifier");
  v33 = v40;
  static UTType._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v31 + v30, v33, v42);
  *(_QWORD *)&v14[v26] = v31;
  v34 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates;
  *(_QWORD *)&v14[v34] = sub_1000302A4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v14[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_archiveImporter] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ICArchiveImporter()), "init");

  v44.receiver = v14;
  v44.super_class = ObjectType;
  return objc_msgSendSuper2(&v44, "init");
}

uint64_t sub_100056E98()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v1 = *(void **)(v0
                + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_userDefaults);
  v2 = objc_msgSend((id)objc_opt_self(ICArchive), "userDefaultsKey");
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v4 = v3;
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }
  v5 = objc_msgSend(v1, "BOOLForKey:", v2);

  if (v5)
  {
    v7 = URL.pathExtension.getter(v6);
    v9 = v8;
    if (qword_1000EB630 != -1)
      swift_once(&qword_1000EB630, sub_10002F50C);
    if (v7 == static ICArchive.packageExtension && v9 == *(_QWORD *)algn_1000F6918)
      v11 = 1;
    else
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, static ICArchive.packageExtension, *(_QWORD *)algn_1000F6918, 0);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

void sub_10005704C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD aBlock[5];
  uint64_t v43;
  uint64_t v44;

  v41 = a3;
  v39 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v37 = a1;
  v38 = v7;
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v9(v8, a1, v5);
  v40 = v3;
  v10 = (uint64_t *)&v3[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates];
  swift_beginAccess(&v3[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates], aBlock, 32, 0);
  v11 = sub_10005696C((uint64_t)v8, *v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_endAccess(aBlock);
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v8, v5);
  sub_100059454(v11, v13, v15, v17);
  if (v13)
  {
    __break(1u);
    goto LABEL_5;
  }
  v19 = v37;
  v9(v8, v37, v5);
  swift_beginAccess(v10, aBlock, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  v44 = *v10;
  *v10 = 0x8000000000000000;
  sub_100060728(0, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  v21 = *v10;
  *v10 = v44;
  swift_bridgeObjectRelease(v21);
  v18(v8, v5);
  swift_endAccess(aBlock);
  sub_100036000(0, &qword_1000EC318, OS_dispatch_queue_ptr);
  v22 = static OS_dispatch_queue.main.getter();
  v9(v8, v19, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 24) & ~v23;
  v25 = (v38 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_1000D8848, v25 + 16, v23 | 7);
  v27 = v40;
  *(_QWORD *)(v26 + 16) = v40;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v26 + v24, v8, v5);
  v28 = (_QWORD *)(v26 + v25);
  v29 = v41;
  *v28 = v39;
  v28[1] = v29;
  v30 = swift_allocObject(&unk_1000D8870, 32, 7);
  *(_QWORD *)(v30 + 16) = sub_10005C5DC;
  *(_QWORD *)(v30 + 24) = v26;
  aBlock[4] = sub_1000490B0;
  v43 = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100057AA0;
  aBlock[3] = &unk_1000D8888;
  v31 = _Block_copy(aBlock);
  v32 = v43;
  v33 = v27;
  swift_retain(v29);
  swift_retain(v30);
  swift_release(v32, v34);
  dispatch_sync(v22, v31);

  _Block_release(v31);
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation(v30, "", 116, 57, 33, 1);
  swift_release(v26, v35);
  swift_release(v30, v36);
  if ((v31 & 1) != 0)
LABEL_5:
    __break(1u);
}

uint64_t sub_100057354(uint64_t a1, char *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  void (*v35)(_QWORD *);
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD *v54;
  void (*v55)(_QWORD *);
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t (*v74)(uint64_t);
  char *v75;
  _QWORD v76[3];
  char v77[8];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v74 = a3;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v75 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v67 - v11;
  v13 = sub_100030EE4(&qword_1000EC320);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = a2;
  v17 = ICArchiveImporter.objects(forArchiveAt:)(a2);
  v75 = v12;
  v68 = v17;
  v69 = v7;
  v28 = *(_QWORD *)(v17 + 16);
  if (v28)
  {
    v70 = v8;
    v71 = a1;
    v72 = a4;
    v29 = v17 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v27 = *(_QWORD *)(v14 + 72);
    v30 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    swift_bridgeObjectRetain(v17);
    v31 = 0;
    while (1)
    {
      v30(v16, v29, v13);
      v32 = ICObjectReferences.recursiveNoteCount.getter(v13);
      v33 = __OFADD__(v31, v32);
      v31 += v32;
      if (v33)
        break;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v29 += v27;
      if (!--v28)
      {
        swift_bridgeObjectRelease(v68);
        a1 = v71;
        v8 = v70;
        goto LABEL_14;
      }
    }
    __break(1u);
    swift_once(&qword_1000EB688, sub_1000569EC);
    v18 = type metadata accessor for Logger(0);
    sub_10003609C(v18, (uint64_t)qword_1000EC210);
    swift_errorRetain(v31);
    v19 = swift_errorRetain(v31);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v78 = v23;
      *(_DWORD *)v22 = 136315138;
      v70 = v27;
      swift_getErrorValue(v31, v77, v76);
      v24 = Error.localizedDescription.getter(v76[1], v76[2]);
      v26 = v25;
      v80 = sub_10005F12C(v24, v25, &v78);
      v27 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error getting objects for archive {error: %s}", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_errorRelease(v31);
      swift_errorRelease(v31);
    }

    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v75, v73, v28);
    swift_beginAccess(v71 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates, &v80, 33, 0);
    v35 = sub_1000579BC(&v78);
    v36 = v34[1];
    if (v36)
    {
      v37 = v34;
      v38 = v28;
      v39 = v27;
      v41 = (void *)v34[2];
      v40 = (void *)v34[3];
      v42 = *v34;
      swift_errorRetain(*v34);
      v43 = v40;
      swift_bridgeObjectRetain(v36);
      v44 = v41;
      swift_errorRelease(v42);
      swift_bridgeObjectRelease(v36);

      v27 = v39;
      v28 = v38;
      v45 = *v37;
      *v37 = v31;
      swift_errorRetain(v31);
      swift_errorRelease(v45);
    }
    ((void (*)(uint64_t *, _QWORD))v35)(&v78, 0);
    swift_endAccess(&v80);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v75, v28);
    v74(0);
    return swift_errorRelease(v31);
  }
  else
  {
    v31 = 0;
LABEL_14:
    v47 = v69;
    v48 = v75;
    if (qword_1000EB688 != -1)
      swift_once(&qword_1000EB688, sub_1000569EC);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10003609C(v49, (uint64_t)qword_1000EC210);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v53 = 134217984;
      v48 = v75;
      v78 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v53 + 4, v53 + 12);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Created objects for archive {noteCount: %ld}", v53, 0xCu);
      swift_slowDealloc(v53, -1, -1);
    }

    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v48, v73, v47);
    swift_beginAccess(a1 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates, &v80, 33, 0);
    v55 = sub_1000579BC(&v78);
    v56 = v54[1];
    if (v56)
    {
      v57 = v54;
      v59 = (void *)v54[2];
      v58 = (void *)v54[3];
      v60 = *v54;
      swift_errorRetain(*v54);
      v61 = v8;
      v62 = v58;
      swift_bridgeObjectRetain(v56);
      v63 = v59;
      v64 = v60;
      v47 = v69;
      swift_errorRelease(v64);
      swift_bridgeObjectRelease(v56);

      v8 = v61;
      v48 = v75;
      v65 = v57[1];
      v66 = v68;
      v57[1] = v68;
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRelease(v65);
      ((void (*)(uint64_t *, _QWORD))v55)(&v78, 0);
    }
    else
    {
      ((void (*)(uint64_t *, _QWORD))v55)(&v78, 0);
      v66 = v68;
    }
    swift_endAccess(&v80);
    swift_bridgeObjectRelease(v66);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v48, v47);
    if (v31 < 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      __break(1u);
    }
    else
    {
      return v74(v31);
    }
  }
  return result;
}

void (*sub_1000579BC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = type metadata accessor for URL(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_10005C160(v2, (uint64_t)v5);
  return sub_100057A4C;
}

void sub_100057A4C(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t sub_100057AA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_100057B9C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;

  static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
  v1 = v0;
  v2 = objc_allocWithZone((Class)NSError);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithDomain:code:userInfo:", v3, 3072, 0);

  qword_1000EC228 = (uint64_t)v4;
}

void sub_100057C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7, void (*a8)(void), void (*a9)(void))
{
  char *v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  char v36;
  id v37;
  _QWORD *v38;
  void (*v39)(_QWORD *);
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  _QWORD *v52;
  void (*v53)(_QWORD *);
  uint64_t v54;
  _QWORD *v55;
  id v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  id v80;
  id v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (**v86)(void);
  void (*v87)(void);
  void *v88;
  id v89;
  id v90;
  uint64_t v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t);
  uint64_t v119;
  char *v120;
  void (*v121)(void);
  id v122;
  void (*v123)(void);
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  _QWORD aBlock[5];
  char *v129;
  id v130;
  _QWORD *v131;

  v10 = v9;
  v123 = a8;
  v118 = a6;
  v119 = a7;
  v111 = a5;
  v110 = a4;
  v114 = a3;
  v113 = a2;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for DispatchQoS(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v115 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v124 = v17;
  v125 = v18;
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v112 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v120 = (char *)&v101 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v101 - v23;
  v25 = (uint64_t *)&v9[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates];
  swift_beginAccess(v25, aBlock, 32, 0);
  v26 = *v25;
  v127 = a1;
  v27 = sub_10005696C(a1, v26);
  v126 = v29;
  v122 = v30;
  if (v28)
  {
    v31 = v27;
    v32 = v28;
    v121 = a9;
    swift_endAccess(aBlock);
    if (v31)
    {
      swift_errorRetain(v31);
      v33 = (void *)_convertErrorToNSError(_:)(v31);
      if (qword_1000EB690 != -1)
        swift_once(&qword_1000EB690, sub_100057B9C);
      v34 = (void *)qword_1000EC228;
      sub_100036000(0, &qword_1000EC310, NSError_ptr);
      v35 = v34;
      v36 = static NSObject.== infix(_:_:)(v33, v35);

      if ((v36 & 1) == 0)
        v118(v31);
      sub_1000583BC(v127);
      v123();
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      swift_bridgeObjectRelease(v32);

    }
    else
    {
      v104 = v15;
      v109 = v32;
      v105 = v13;
      v106 = v10;
      v107 = v12;
      v37 = objc_msgSend(objc_allocWithZone((Class)NSProgress), "init");
      v108 = *(void (**)(char *, uint64_t, uint64_t))(v125 + 16);
      v108(v24, v127, v124);
      swift_beginAccess(v25, &v131, 33, 0);
      v39 = sub_1000579BC(aBlock);
      v40 = v38[1];
      if (v40)
      {
        v41 = v38;
        v42 = (void *)v38[2];
        v43 = (void *)v38[3];
        v44 = v37;
        v45 = *v38;
        swift_errorRetain(*v38);
        v102 = v43;
        swift_bridgeObjectRetain(v40);
        v46 = v42;
        v47 = v45;
        v37 = v44;
        swift_errorRelease(v47);
        swift_bridgeObjectRelease(v40);

        v48 = (void *)v41[2];
        v41[2] = v44;
        v49 = v44;

      }
      ((void (*)(_QWORD *, _QWORD))v39)(aBlock, 0);
      swift_endAccess(&v131);
      v50 = v124;
      v51 = *(void (**)(char *, uint64_t))(v125 + 8);
      v51(v24, v124);
      v108(v120, v127, v50);
      swift_beginAccess(v25, &v131, 33, 0);
      v53 = sub_1000579BC(aBlock);
      v54 = v52[1];
      v103 = v37;
      if (v54)
      {
        v55 = v52;
        v56 = v37;
        v58 = (void *)v52[2];
        v57 = (void *)v52[3];
        v59 = *v52;
        v60 = *v52;
        v102 = v53;
        swift_errorRetain(v60);
        v61 = v57;
        swift_bridgeObjectRetain(v54);
        v62 = v58;
        swift_errorRelease(v59);
        swift_bridgeObjectRelease(v54);

        v130 = v56;
        KeyPath = swift_getKeyPath(&unk_1000B5368);
        v64 = swift_allocObject(&unk_1000D87A8, 32, 7);
        *(_QWORD *)(v64 + 16) = v110;
        v65 = v111;
        *(_QWORD *)(v64 + 24) = v111;
        swift_retain(v65);
        v66 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_10005BFA4, v64, &protocol witness table for NSObject);
        swift_release(KeyPath, v67);
        swift_release(v64, v68);
        v69 = (void *)v55[3];
        v55[3] = v66;

        ((void (*)(_QWORD *, _QWORD))v102)(aBlock, 0);
      }
      else
      {
        ((void (*)(_QWORD *, _QWORD))v53)(aBlock, 0);
      }
      swift_endAccess(&v131);
      v70 = v124;
      v51(v120, v124);
      v71 = v106;
      v120 = *(char **)&v106[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_queue];
      v72 = v112;
      v108(v112, v127, v70);
      v73 = v125;
      v74 = *(unsigned __int8 *)(v125 + 80);
      v75 = (v74 + 56) & ~v74;
      v76 = (v19 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
      v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8;
      v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8;
      v79 = (char *)swift_allocObject(&unk_1000D87D0, v78 + 16, v74 | 7);
      *((_QWORD *)v79 + 2) = v71;
      *((_QWORD *)v79 + 3) = 0;
      v80 = v126;
      *((_QWORD *)v79 + 4) = v109;
      *((_QWORD *)v79 + 5) = v80;
      v81 = v122;
      *((_QWORD *)v79 + 6) = v122;
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(&v79[v75], v72, v70);
      v82 = &v79[v76];
      v83 = v114;
      *(_QWORD *)v82 = v113;
      *((_QWORD *)v82 + 1) = v83;
      v84 = &v79[v77];
      v85 = v119;
      *(_QWORD *)v84 = v118;
      *((_QWORD *)v84 + 1) = v85;
      v86 = (void (**)(void))&v79[v78];
      v87 = v121;
      *v86 = v123;
      v86[1] = v87;
      aBlock[4] = sub_10005C0AC;
      v129 = v79;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000587FC;
      aBlock[3] = &unk_1000D87E8;
      v88 = _Block_copy(aBlock);
      v89 = v81;
      swift_retain(v83);
      swift_retain(v85);
      swift_retain(v87);
      v90 = v71;
      v91 = v109;
      swift_bridgeObjectRetain(v109);
      v92 = v126;
      v93 = v115;
      static DispatchQoS.unspecified.getter();
      v131 = _swiftEmptyArrayStorage;
      v94 = sub_100042114(&qword_1000EC2F8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v95 = sub_100030EE4(&qword_1000EC300);
      v96 = sub_100036140(&qword_1000EC308, &qword_1000EC300, (uint64_t)&protocol conformance descriptor for [A]);
      v97 = v104;
      v98 = v95;
      v99 = v107;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v131, v98, v96, v107, v94);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v93, v97, v88);
      _Block_release(v88);

      swift_bridgeObjectRelease(v91);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v97, v99);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v93, v117);
      swift_release(v129, v100);
    }
  }
  else
  {
    swift_endAccess(aBlock);
    __break(1u);
  }
}

void sub_1000583BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _BYTE v21[24];

  v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates);
  swift_beginAccess(v1 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates, v21, 32, 0);
  v4 = (void *)sub_10005696C(a1, *v3);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_endAccess(v21);
  if (v6)
  {
    sub_10005BE48(v4, v6, v8, v10);
    v11 = v8;
    swift_errorRelease(v4);

    swift_bridgeObjectRelease(v6);
    objc_msgSend(v11, "cancel");

    sub_10005BE48(v4, v6, v8, v10);
    v12 = v10;
    swift_errorRelease(v4);

    v13 = swift_bridgeObjectRelease(v6);
    if (v10)
    {
      dispatch thunk of NSKeyValueObservation.invalidate()(v13);

    }
  }
  swift_beginAccess(v3, v21, 33, 0);
  v14 = sub_10005934C(a1);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_endAccess(v21);
  sub_100059454(v14, v16, v18, v20);
  sub_100059454((uint64_t)v4, v6, v8, v10);
}

void sub_100058528(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v8;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void (*v29)(void);
  _QWORD v30[8];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  _BYTE v37[24];

  v35 = a8;
  v36 = a7;
  v31 = a6;
  v32 = a5;
  v33 = a1;
  v11 = (uint64_t *)(v8
                  + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates);
  swift_beginAccess(v8 + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates, v37, 32, 0);
  v12 = a2;
  v13 = sub_10005696C(a2, *v11);
  if (!v14)
  {
LABEL_6:
    swift_endAccess(v37);
    goto LABEL_7;
  }
  v17 = v13;
  v18 = v14;
  v19 = v15;
  v20 = v16;
  swift_endAccess(v37);
  swift_bridgeObjectRetain(v18);
  swift_errorRetain(v17);
  v21 = v20;
  v22 = v19;
  swift_errorRelease(v17);

  swift_bridgeObjectRelease(v18);
  sub_100059454(v17, v18, v19, v20);
  if (v19)
  {
    v25 = (void *)a3(v23, v24);
    v26 = objc_msgSend(v25, "managedObjectContext", v31, v32);
    if (v26)
    {
      v27 = v26;
      v30[2] = v25;
      v30[3] = __chkstk_darwin(v26);
      v30[4] = v34;
      v30[5] = v33;
      v30[6] = v12;
      v30[7] = v22;
      NSManagedObjectContext.performAndWait<A>(_:)(sub_10005C140, v30, (char *)&type metadata for () + 8);
      v28 = objc_msgSend((id)objc_opt_self(ICAttachmentPreviewGenerator), "sharedGenerator");
      objc_msgSend(v28, "generatePreviewsIfNeeded");

      v29 = v36;
      sub_1000583BC(v12);
      v29();

      return;
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, 0x80000001000B0A90, "com_apple_mobilenotes_SharingExtension/ICArchiveImportNoteFileParser.swift", 74, 2, 160, 0);
  __break(1u);
}

uint64_t sub_1000587FC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2, v4);
}

void sub_1000589D8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v11;
  void *v12;
  objc_class *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t IsAlexandriaDemoModeEnabled;
  __int16 v20;
  int v21;
  uint64_t ObjectType;
  __int16 v23;
  id v24;

  v11 = objc_msgSend(a1, "folder");
  if (v11)
  {
    v12 = v11;
    objc_msgSend(a2, "deleteObject:", a1);
    v13 = (objc_class *)type metadata accessor for ICArchiveImporter();
    v14 = (uint64_t *)(*(_QWORD *)(a3
                                + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_archiveImporter)
                    + OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension17ICArchiveImporter_fileManager);
    v15 = *v14;
    v16 = v14[1];
    v17 = a2;
    v18 = swift_unknownObjectRetain(v15);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v18);
    v20 = IsAlexandriaDemoModeEnabled;
    v21 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    ObjectType = swift_getObjectType(v15);
    if (v21)
      v23 = 256;
    else
      v23 = 0;
    v24 = sub_1000401F4(v17, v23 | v20, 0, 0, v15, v13, ObjectType, v16, 0.0);
    ICArchiveImporter.importObjects(_:fromArchiveAt:into:progress:)(a4, a5, v12, a6);

  }
  else
  {
    __break(1u);
  }
}

void sub_100058B18()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char v45;
  char v46;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  _BYTE v63[24];
  char v64[32];

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t *)&v0[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates];
  swift_beginAccess(&v0[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates], v64, 0, 0);
  v9 = *v8;
  v10 = *(_QWORD *)(*v8 + 64);
  v51 = *v8 + 64;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v52 = (unint64_t)(v11 + 63) >> 6;
  v54 = v9;
  swift_bridgeObjectRetain_n(v9, 2);
  v50 = v0;
  v14 = 0;
  v55 = v2;
  v56 = v1;
  v53 = v7;
  while (1)
  {
    if (v13)
    {
      v22 = __clz(__rbit64(v13));
      v23 = (v13 - 1) & v13;
      v24 = v22 | (v14 << 6);
      goto LABEL_26;
    }
    v25 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v25 >= v52)
      goto LABEL_35;
    v26 = *(_QWORD *)(v51 + 8 * v25);
    ++v14;
    if (!v26)
    {
      v14 = v25 + 1;
      if (v25 + 1 >= v52)
        goto LABEL_35;
      v26 = *(_QWORD *)(v51 + 8 * v14);
      if (!v26)
      {
        v14 = v25 + 2;
        if (v25 + 2 >= v52)
          goto LABEL_35;
        v26 = *(_QWORD *)(v51 + 8 * v14);
        if (!v26)
        {
          v14 = v25 + 3;
          if (v25 + 3 >= v52)
            goto LABEL_35;
          v26 = *(_QWORD *)(v51 + 8 * v14);
          if (!v26)
          {
            v14 = v25 + 4;
            if (v25 + 4 >= v52)
              goto LABEL_35;
            v26 = *(_QWORD *)(v51 + 8 * v14);
            if (!v26)
              break;
          }
        }
      }
    }
LABEL_25:
    v23 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_26:
    v28 = *(_QWORD *)(v2 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v7, *(_QWORD *)(v54 + 48) + v28 * v24, v1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
      goto LABEL_36;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    swift_beginAccess(v8, v63, 32, 0);
    v30 = *v8;
    v31 = *(_QWORD *)(*v8 + 16);
    v60 = v23;
    v61 = v14;
    if (v31 && (v32 = sub_10005F76C((uint64_t)v4), (v33 & 1) != 0))
    {
      v34 = (uint64_t *)(*(_QWORD *)(v30 + 56) + 32 * v32);
      v35 = *v34;
      v36 = v34[1];
      v37 = (void *)v34[2];
      v38 = (void *)v34[3];
      swift_endAccess(v63);
      v58 = v36;
      swift_bridgeObjectRetain(v36);
      v59 = v35;
      swift_errorRetain(v35);
      v39 = v38;
      v57 = v37;
      v40 = v37;
      objc_msgSend(v40, "cancel", v50);
      if (v38)
      {
        v41 = v39;
        dispatch thunk of NSKeyValueObservation.invalidate()(v41);

      }
    }
    else
    {
      swift_endAccess(v63);
      v58 = 0;
      v59 = 0;
      v57 = 0;
      v38 = 0;
    }
    swift_beginAccess(v8, v63, 33, 0);
    v42 = *v8;
    swift_bridgeObjectRetain(*v8);
    v43 = v4;
    v44 = sub_10005F76C((uint64_t)v4);
    v46 = v45;
    swift_bridgeObjectRelease(v42);
    v17 = 0;
    v18 = 0;
    v20 = 0;
    v19 = 0;
    if ((v46 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
      v48 = *v8;
      v62 = *v8;
      *v8 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10005BBA4();
        v48 = v62;
      }
      (*(void (**)(unint64_t, uint64_t))(v55 + 8))(*(_QWORD *)(v48 + 48) + v44 * v28, v56);
      v15 = v62;
      v16 = (uint64_t *)(*(_QWORD *)(v62 + 56) + 32 * v44);
      v17 = *v16;
      v18 = v16[1];
      v20 = (void *)v16[2];
      v19 = (void *)v16[3];
      sub_10005AC00(v44, v62);
      v21 = *v8;
      *v8 = v15;
      swift_bridgeObjectRelease(v21);
    }
    swift_endAccess(v63);
    sub_100059454(v17, v18, v20, v19);
    sub_100059454(v59, v58, v57, v38);
    v2 = v55;
    v1 = v56;
    v4 = v43;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v56);
    v7 = v53;
    v13 = v60;
    v14 = v61;
  }
  v27 = v25 + 5;
  if (v27 >= v52)
  {
LABEL_35:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
LABEL_36:
    v49 = v54;
    swift_release(v54, v29);
    swift_bridgeObjectRelease(v49);

    return;
  }
  v26 = *(_QWORD *)(v51 + 8 * v27);
  if (v26)
  {
    v14 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v14 >= v52)
      goto LABEL_35;
    v26 = *(_QWORD *)(v51 + 8 * v14);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_38:
  __break(1u);
}

uint64_t type metadata accessor for ICArchiveImportNoteFileParser()
{
  return objc_opt_self(_TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser);
}

void destroy for ICArchiveImportNoteFileParser.ImportState(uint64_t a1)
{
  swift_errorRelease(*(_QWORD *)a1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *initializeWithCopy for ICArchiveImportNoteFileParser.ImportState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v4 = *a2;
  swift_errorRetain(*a2);
  v5 = a2[1];
  v6 = (void *)a2[2];
  *a1 = v4;
  a1[1] = v5;
  v7 = (void *)a2[3];
  a1[2] = v6;
  a1[3] = v7;
  swift_bridgeObjectRetain(v5);
  v8 = v6;
  v9 = v7;
  return a1;
}

uint64_t *assignWithCopy for ICArchiveImportNoteFileParser.ImportState(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v4 = *a1;
  v5 = *a2;
  swift_errorRetain(*a2);
  *a1 = v5;
  swift_errorRelease(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a1[2];
  v9 = (void *)a2[2];
  a1[2] = (uint64_t)v9;
  v10 = v9;

  v11 = (void *)a1[3];
  v12 = (void *)a2[3];
  a1[3] = (uint64_t)v12;
  v13 = v12;

  return a1;
}

uint64_t assignWithTake for ICArchiveImportNoteFileParser.ImportState(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  void *v5;

  swift_errorRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveImportNoteFileParser.ImportState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveImportNoteFileParser.ImportState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveImportNoteFileParser.ImportState()
{
  return &type metadata for ICArchiveImportNoteFileParser.ImportState;
}

double sub_100059268@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10005F9A0(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10005B540();
      v10 = v13;
    }

    sub_100031034((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v7), a2);
    sub_10005AA10(v7, v10);
    v11 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10005934C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10005F76C(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10005BBA4();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for URL(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 32 * v5);
  sub_10005AC00(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

void sub_100059454(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a2)
  {
    swift_errorRelease(a1);
    swift_bridgeObjectRelease(a2);

  }
}

uint64_t sub_10005949C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, unint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  int64_t v58;
  char *v59;
  uint64_t v60;

  v3 = v2;
  v6 = sub_100030EE4(&qword_1000EC320);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100030EE4(&qword_1000EB720);
  v57 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v13 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v59 = v9;
  v14 = 1 << *(_BYTE *)(v10 + 32);
  v15 = *(_QWORD *)(v10 + 64);
  v54 = (_QWORD *)(v10 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v52 = v2;
  v53 = (unint64_t)(v14 + 63) >> 6;
  v18 = v11 + 64;
  result = swift_retain(v10);
  v21 = 0;
  v55 = v10;
  v56 = v7;
  v60 = v6;
  while (1)
  {
    if (v17)
    {
      v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v25 = v24 | (v21 << 6);
      goto LABEL_24;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v53)
      break;
    v27 = v54;
    v28 = v54[v26];
    ++v21;
    if (!v28)
    {
      v21 = v26 + 1;
      if (v26 + 1 >= v53)
        goto LABEL_36;
      v28 = v54[v21];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v53)
        {
LABEL_36:
          swift_release(v10, v20);
          v3 = v52;
          if ((v57 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v54[v29];
        if (!v28)
        {
          while (1)
          {
            v21 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v21 >= v53)
              goto LABEL_36;
            v28 = v54[v21];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v21 = v29;
      }
    }
LABEL_23:
    v17 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_24:
    v30 = v7[9];
    v31 = *(_QWORD *)(v10 + 48) + v30 * v25;
    v32 = 24 * v25;
    v58 = v21;
    if ((v57 & 1) != 0)
    {
      v33 = (void (*)(char *, unint64_t, uint64_t))v7[4];
      v34 = v60;
      v33(v59, v31, v60);
      v35 = *(_QWORD *)(v10 + 56) + v32;
      v36 = *(id *)v35;
      v37 = *(_QWORD *)(v35 + 8);
      v38 = *(_BYTE *)(v35 + 16);
    }
    else
    {
      v39 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      v34 = v60;
      v39(v59, v31, v60);
      v40 = *(_QWORD *)(v10 + 56) + v32;
      v36 = *(id *)v40;
      v37 = *(_QWORD *)(v40 + 8);
      v38 = *(_BYTE *)(v40 + 16);
      sub_1000353DC(*(id *)v40, v37, v38);
    }
    v41 = *(_QWORD *)(v13 + 40);
    v42 = sub_100036140((unint64_t *)&unk_1000EC370, &qword_1000EC320, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v41, v34, v42);
    v43 = -1 << *(_BYTE *)(v13 + 32);
    v44 = result & ~v43;
    v45 = v44 >> 6;
    if (((-1 << v44) & ~*(_QWORD *)(v18 + 8 * (v44 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v44) & ~*(_QWORD *)(v18 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
      v7 = v56;
    }
    else
    {
      v46 = 0;
      v47 = (unint64_t)(63 - v43) >> 6;
      v7 = v56;
      do
      {
        if (++v45 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v48 = v45 == v47;
        if (v45 == v47)
          v45 = 0;
        v46 |= v48;
        v49 = *(_QWORD *)(v18 + 8 * v45);
      }
      while (v49 == -1);
      v22 = __clz(__rbit64(~v49)) + (v45 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v7[4])(*(_QWORD *)(v13 + 48) + v30 * v22, v59, v60);
    v23 = *(_QWORD *)(v13 + 56) + 24 * v22;
    *(_QWORD *)v23 = v36;
    *(_QWORD *)(v23 + 8) = v37;
    *(_BYTE *)(v23 + 16) = v38;
    ++*(_QWORD *)(v13 + 16);
    v10 = v55;
    v21 = v58;
  }
  swift_release(v10, v20);
  v3 = v52;
  v27 = v54;
  if ((v57 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v50 = 1 << *(_BYTE *)(v10 + 32);
  if (v50 >= 64)
    bzero(v27, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v50;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10, v12);
  *v3 = v13;
  return result;
}

Swift::Int sub_10005987C(uint64_t a1, uint64_t a2)
{
  return sub_100059BD8(a1, a2, &qword_1000EBAE0);
}

Swift::Int sub_100059888(uint64_t a1, uint64_t a2)
{
  return sub_100059BD8(a1, a2, (uint64_t *)&unk_1000EC380);
}

_OWORD *sub_100059894(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *result;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  _OWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  _QWORD v43[9];
  _OWORD v44[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100030EE4(&qword_1000EB728);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v40 = (unint64_t)(v10 + 63) >> 6;
  v13 = v7 + 64;
  result = (_OWORD *)swift_retain(v5);
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_25;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v20 >= v40)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v41 + 8 * v20);
    ++v16;
    if (!v22)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v40)
        goto LABEL_37;
      v22 = *(_QWORD *)(v41 + 8 * v16);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v40)
        {
LABEL_37:
          swift_release(v5, v15);
          if ((v42 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v22 = *(_QWORD *)(v41 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v16 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_46;
            if (v16 >= v40)
              goto LABEL_37;
            v22 = *(_QWORD *)(v41 + 8 * v16);
            ++v23;
            if (v22)
              goto LABEL_24;
          }
        }
        v16 = v23;
      }
    }
LABEL_24:
    v12 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_25:
    v24 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v19);
    v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v19);
    if ((v42 & 1) != 0)
    {
      sub_100031034(v25, v44);
    }
    else
    {
      sub_100030F24((uint64_t)v25, (uint64_t)v44);
      v26 = v24;
    }
    v27 = *(_QWORD *)(v9 + 40);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v30 = v29;
    Hasher.init(_seed:)(v43, v27);
    String.hash(into:)(v43, v28, v30);
    v31 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v30);
    v32 = -1 << *(_BYTE *)(v9 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v13 + 8 * (v33 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v13 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v13 + 8 * v34);
      }
      while (v38 == -1);
      v17 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v17) = v24;
    result = sub_100031034(v44, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v17));
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v5, v15);
  v21 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v21, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = (_OWORD *)swift_release(v5, v8);
  *v3 = v9;
  return result;
}

Swift::Int sub_100059BCC(uint64_t a1, uint64_t a2)
{
  return sub_100059BD8(a1, a2, (uint64_t *)&unk_1000EC390);
}

Swift::Int sub_100059BD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int result;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  _QWORD v43[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100030EE4(a3);
  v42 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v10 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v11 = 1 << *(_BYTE *)(v6 + 32);
  v41 = v6 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v6 + 64);
  v39 = v4;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain(v6);
  v17 = 0;
  while (1)
  {
    if (v13)
    {
      v23 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v24 = v23 | (v17 << 6);
      goto LABEL_34;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v40)
      break;
    v26 = (_QWORD *)(v6 + 64);
    v27 = *(_QWORD *)(v41 + 8 * v25);
    ++v17;
    if (!v27)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v40)
        goto LABEL_36;
      v27 = *(_QWORD *)(v41 + 8 * v17);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v40)
        {
LABEL_36:
          swift_release(v6, v16);
          v4 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = *(_QWORD *)(v41 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v17 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v17 >= v40)
              goto LABEL_36;
            v27 = *(_QWORD *)(v41 + 8 * v17);
            ++v28;
            if (v27)
              goto LABEL_33;
          }
        }
        v17 = v28;
      }
    }
LABEL_33:
    v13 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_34:
    v33 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v24);
    v35 = *v33;
    v34 = v33[1];
    v36 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v24);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      v37 = v36;
    }
    Hasher.init(_seed:)(v43, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v43, v35, v34);
    result = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v10 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v14 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v14 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v20 == v30;
        if (v20 == v30)
          v20 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v20);
      }
      while (v32 == -1);
      v21 = __clz(__rbit64(~v32)) + (v20 << 6);
    }
    *(_QWORD *)(v14 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v21);
    *v22 = v35;
    v22[1] = v34;
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v21) = v36;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release(v6, v16);
  v4 = v39;
  v26 = (_QWORD *)(v6 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v6 + 32);
  if (v38 >= 64)
    bzero(v26, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v38;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6, v9);
  *v4 = v10;
  return result;
}

uint64_t sub_100059EE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100030EE4(&qword_1000EB750);
  v47 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v13 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v10 + 32);
  v15 = *(_QWORD *)(v10 + 64);
  v45 = (_QWORD *)(v10 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v2;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v11 + 64;
  result = swift_retain(v10);
  v21 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_36;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v10, v20);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v44)
              goto LABEL_36;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v7 + 72);
    v30 = *(_QWORD *)(v10 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v30, v6);
      v31 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v30, v6);
      v31 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v24);
      swift_errorRetain(v31);
    }
    v32 = *(_QWORD *)(v13 + 40);
    v33 = sub_100042114(&qword_1000EBAA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v6, v33);
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v13 + 48) + v29 * v22, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v10, v20);
  v3 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v10 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10, v12);
  *v3 = v13;
  return result;
}

uint64_t sub_10005A274(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  int v49;
  uint64_t v50;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100030EE4(&qword_1000EB740);
  v49 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v12 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v9 + 32);
  v14 = *(_QWORD *)(v9 + 64);
  v47 = (_QWORD *)(v9 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v45 = v2;
  v46 = (unint64_t)(v13 + 63) >> 6;
  v17 = v10 + 64;
  result = swift_retain(v9);
  v20 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v46)
      break;
    v26 = v47;
    v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v46)
        goto LABEL_36;
      v27 = v47[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_36:
          swift_release(v9, v19);
          v3 = v45;
          if ((v49 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v20 >= v46)
              goto LABEL_36;
            v27 = v47[v20];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v20 = v28;
      }
    }
LABEL_23:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v50 + 72);
    v30 = *(_QWORD *)(v9 + 48) + v29 * v24;
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 32))(v8, v30, v6);
      v31 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v24);
      v33 = *v31;
      v32 = v31[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v8, v30, v6);
      v34 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v24);
      v33 = *v34;
      v32 = v34[1];
      swift_bridgeObjectRetain(v32);
    }
    v35 = *(_QWORD *)(v12 + 40);
    v36 = sub_100042114((unint64_t *)&unk_1000EC360, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v6, v36);
    v37 = -1 << *(_BYTE *)(v12 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v17 + 8 * (v38 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v17 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v17 + 8 * v39);
      }
      while (v43 == -1);
      v21 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v50 + 32))(*(_QWORD *)(v12 + 48) + v29 * v21, v8, v6);
    v22 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v21);
    *v22 = v33;
    v22[1] = v32;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v9, v19);
  v3 = v45;
  v26 = v47;
  if ((v49 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v44 = 1 << *(_BYTE *)(v9 + 32);
  if (v44 >= 64)
    bzero(v26, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v44;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9, v11);
  *v3 = v12;
  return result;
}

uint64_t sub_10005A620(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void (*v38)(char *, unint64_t, uint64_t);
  uint64_t *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  int64_t v61;
  char *v62;
  uint64_t v63;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v59 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100030EE4(&qword_1000EC2F0);
  v58 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v12 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v62 = v8;
  v53 = v2;
  v13 = 1 << *(_BYTE *)(v9 + 32);
  v14 = *(_QWORD *)(v9 + 64);
  v55 = (_QWORD *)(v9 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v54 = (unint64_t)(v13 + 63) >> 6;
  v17 = v10 + 64;
  result = swift_retain(v9);
  v20 = 0;
  v56 = v9;
  v57 = v12;
  v63 = v6;
  v21 = v59;
  while (1)
  {
    if (v16)
    {
      v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v25 = v24 | (v20 << 6);
      goto LABEL_24;
    }
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v54)
      break;
    v27 = v55;
    v28 = v55[v26];
    ++v20;
    if (!v28)
    {
      v20 = v26 + 1;
      if (v26 + 1 >= v54)
        goto LABEL_36;
      v28 = v55[v20];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v54)
        {
LABEL_36:
          swift_release(v9, v19);
          v3 = v53;
          if ((v58 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v55[v29];
        if (!v28)
        {
          while (1)
          {
            v20 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v20 >= v54)
              goto LABEL_36;
            v28 = v55[v20];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v20 = v29;
      }
    }
LABEL_23:
    v16 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v20 << 6);
    v21 = v59;
LABEL_24:
    v30 = v21[9];
    v31 = *(_QWORD *)(v9 + 48) + v30 * v25;
    v61 = v20;
    if ((v58 & 1) != 0)
    {
      v32 = (void (*)(char *, unint64_t, uint64_t))v21[4];
      v33 = v63;
      v32(v62, v31, v63);
      v34 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 32 * v25);
      v35 = v34[1];
      v60 = *v34;
      v36 = (void *)v34[2];
      v37 = (void *)v34[3];
    }
    else
    {
      v38 = (void (*)(char *, unint64_t, uint64_t))v21[2];
      v33 = v63;
      v38(v62, v31, v63);
      v39 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 32 * v25);
      v35 = v39[1];
      v36 = (void *)v39[2];
      v37 = (void *)v39[3];
      v60 = *v39;
      swift_errorRetain(v60);
      v40 = v37;
      swift_bridgeObjectRetain(v35);
      v41 = v36;
    }
    v12 = v57;
    v42 = *(_QWORD *)(v57 + 40);
    v43 = sub_100042114(&qword_1000EBAA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v42, v33, v43);
    v44 = -1 << *(_BYTE *)(v12 + 32);
    v45 = result & ~v44;
    v46 = v45 >> 6;
    if (((-1 << v45) & ~*(_QWORD *)(v17 + 8 * (v45 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v45) & ~*(_QWORD *)(v17 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
      v21 = v59;
    }
    else
    {
      v47 = 0;
      v48 = (unint64_t)(63 - v44) >> 6;
      v21 = v59;
      do
      {
        if (++v46 == v48 && (v47 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v49 = v46 == v48;
        if (v46 == v48)
          v46 = 0;
        v47 |= v49;
        v50 = *(_QWORD *)(v17 + 8 * v46);
      }
      while (v50 == -1);
      v22 = __clz(__rbit64(~v50)) + (v46 << 6);
    }
    *(_QWORD *)(v17 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v21[4])(*(_QWORD *)(v12 + 48) + v30 * v22, v62, v63);
    v23 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 32 * v22);
    v20 = v61;
    *v23 = v60;
    v23[1] = v35;
    v23[2] = v36;
    v23[3] = v37;
    ++*(_QWORD *)(v12 + 16);
    v9 = v56;
  }
  swift_release(v9, v19);
  v3 = v53;
  v27 = v55;
  if ((v58 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v51 = 1 << *(_BYTE *)(v9 + 32);
  if (v51 >= 64)
    bzero(v27, ((unint64_t)(v51 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v51;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9, v11);
  *v3 = v12;
  return result;
}

unint64_t sub_10005AA10(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;
        Hasher.init(_seed:)(v30, v10);
        v15 = v11;
        String.hash(into:)(v30, v12, v14);
        v16 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v14);
        v17 = v16 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v17 < v8)
            goto LABEL_5;
        }
        else if (v17 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(a2 + 48);
          v19 = (_QWORD *)(v18 + 8 * v3);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v3 != v6 || v19 >= v20 + 1)
            *v19 = *v20;
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_OWORD *)(v21 + 32 * v3);
          v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 2))
          {
            v9 = v23[1];
            *v22 = *v23;
            v22[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10005AC00(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for URL(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (result + 1) & v11;
      v12 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v37(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100042114(&qword_1000EBAA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v38)
        {
          if (v21 >= v38 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_OWORD *)(v26 + 32 * a1);
            v28 = (_OWORD *)(v26 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 2))
            {
              v29 = v28[1];
              *v27 = *v28;
              v27[1] = v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v38 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10005AEA0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v12 = a6[6];
  v13 = sub_100030EE4(&qword_1000EC320);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a2, v13);
  v15 = a6[7] + 24 * a1;
  *(_QWORD *)v15 = a3;
  *(_QWORD *)(v15 + 8) = a4;
  *(_BYTE *)(v15 + 16) = a5;
  v16 = a6[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a6[2] = v18;
  return result;
}

_OWORD *sub_10005AF58(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_100031034(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10005AFBC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10005B054(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  a7[(a1 >> 6) + 8] |= 1 << a1;
  v14 = a7[6];
  v15 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * a1, a2, v15);
  v17 = (_QWORD *)(a7[7] + 32 * a1);
  *v17 = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  v18 = a7[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a7[2] = v20;
  return result;
}

char *sub_10005B108()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = sub_100030EE4(&qword_1000EC320);
  v1 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030EE4(&qword_1000EB720);
  v35 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v3 + 16);
  v41 = v4;
  if (!v6)
  {
    result = (char *)swift_release(v3, v5);
    v33 = v41;
    v32 = v35;
LABEL_25:
    *v32 = v33;
    return result;
  }
  v7 = v4;
  result = (char *)(v4 + 64);
  v9 = (char *)(v3 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v36 = v3 + 64;
  if (v7 != v3 || result >= &v9[8 * v10])
  {
    result = (char *)memmove(result, v9, 8 * v10);
    v7 = v41;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v3 + 16);
  v12 = 1 << *(_BYTE *)(v3 + 32);
  v40 = v3;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v3 + 64);
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v38;
  v15 = v39;
  v17 = v41;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v40;
      goto LABEL_9;
    }
    v29 = v11 + 1;
    v20 = v40;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v37)
      goto LABEL_23;
    v30 = *(_QWORD *)(v36 + 8 * v29);
    ++v11;
    if (!v30)
    {
      v11 = v29 + 1;
      if (v29 + 1 >= v37)
        goto LABEL_23;
      v30 = *(_QWORD *)(v36 + 8 * v11);
      if (!v30)
        break;
    }
LABEL_22:
    v14 = (v30 - 1) & v30;
    v19 = __clz(__rbit64(v30)) + (v11 << 6);
LABEL_9:
    v21 = *(_QWORD *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v15);
    v22 = *(_QWORD *)(v20 + 56);
    v23 = 24 * v19;
    v24 = v22 + 24 * v19;
    v25 = *(void **)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = *(_QWORD *)(v17 + 48) + v21;
    LOBYTE(v21) = *(_BYTE *)(v24 + 16);
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v27, v16, v15);
    v28 = *(_QWORD *)(v17 + 56) + v23;
    *(_QWORD *)v28 = v25;
    *(_QWORD *)(v28 + 8) = v26;
    *(_BYTE *)(v28 + 16) = v21;
    result = (char *)sub_1000353DC(v25, v26, v21);
  }
  v31 = v29 + 2;
  if (v31 >= v37)
  {
LABEL_23:
    result = (char *)swift_release(v40, v9);
    v32 = v35;
    v33 = v41;
    goto LABEL_25;
  }
  v30 = *(_QWORD *)(v36 + 8 * v31);
  if (v30)
  {
    v11 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v11 >= v37)
      goto LABEL_23;
    v30 = *(_QWORD *)(v36 + 8 * v11);
    ++v31;
    if (v30)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10005B390()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100030EE4(&qword_1000EBAE0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2, v4);
    *v1 = v5;
    return result;
  }
  result = (id)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v2 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 16);
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10005B540()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];

  v1 = v0;
  sub_100030EE4(&qword_1000EB728);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2, v4);
    *v1 = v5;
    return result;
  }
  result = (id)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v2 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 16);
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_26;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v16);
    v19 = 32 * v16;
    sub_100030F24(*(_QWORD *)(v2 + 56) + 32 * v16, (uint64_t)v23);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    sub_100031034(v23, (_OWORD *)(*(_QWORD *)(v5 + 56) + v19));
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v14)
    goto LABEL_26;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10005B704()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030EE4(&qword_1000EB750);
  v25 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5, v7);
    *v25 = v8;
    return result;
  }
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v26 = v5 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = (void *)swift_errorRetain(v20);
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10005B934()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  const void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v36 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030EE4(&qword_1000EB740);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v3 + 16);
  v39 = v4;
  if (!v6)
  {
    result = (void *)swift_release(v3, v5);
    v31 = v39;
    v30 = v33;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v7 = v4;
  result = (void *)(v4 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v35 = (const void *)(v3 + 64);
  if (v7 != v3 || (unint64_t)result >= v3 + 64 + 8 * v9)
  {
    result = memmove(result, v35, 8 * v9);
    v7 = v39;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v3 + 16);
  v12 = 1 << *(_BYTE *)(v3 + 32);
  v38 = v3;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v3 + 64);
  v34 = (unint64_t)(v12 + 63) >> 6;
  v16 = v36;
  v15 = v37;
  v17 = v39;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v38;
      goto LABEL_12;
    }
    v27 = v11 + 1;
    v20 = v38;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v27);
    ++v11;
    if (!v28)
    {
      v11 = v27 + 1;
      if (v27 + 1 >= v34)
        goto LABEL_26;
      v28 = *((_QWORD *)v35 + v11);
      if (!v28)
        break;
    }
LABEL_25:
    v14 = (v28 - 1) & v28;
    v19 = __clz(__rbit64(v28)) + (v11 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v15);
    v22 = 16 * v19;
    v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v19);
    v24 = *v23;
    v25 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v17 + 48) + v21, v16, v15);
    v26 = (_QWORD *)(*(_QWORD *)(v17 + 56) + v22);
    *v26 = v24;
    v26[1] = v25;
    result = (void *)swift_bridgeObjectRetain(v25);
  }
  v29 = v27 + 2;
  if (v29 >= v34)
  {
LABEL_26:
    result = (void *)swift_release(v38, v5);
    v30 = v33;
    v31 = v39;
    goto LABEL_28;
  }
  v28 = *((_QWORD *)v35 + v29);
  if (v28)
  {
    v11 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v11 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v11);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10005BBA4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  const void *v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;

  v1 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v1 - 8);
  v41 = v1;
  __chkstk_darwin(v1);
  v39 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030EE4(&qword_1000EC2F0);
  v36 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v3 + 16);
  v43 = v4;
  if (!v6)
  {
    result = (id)swift_release(v3, v5);
    v35 = v43;
    v34 = v36;
LABEL_28:
    *v34 = v35;
    return result;
  }
  v7 = v4;
  result = (id)(v4 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v37 = (const void *)(v3 + 64);
  if (v7 != v3 || (unint64_t)result >= v3 + 64 + 8 * v9)
  {
    result = memmove(result, v37, 8 * v9);
    v7 = v43;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v3 + 16);
  v12 = 1 << *(_BYTE *)(v3 + 32);
  v42 = v3;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v3 + 64);
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v39;
  v15 = v40;
  v17 = v41;
  v18 = v43;
  while (1)
  {
    if (v14)
    {
      v44 = (v14 - 1) & v14;
      v45 = v11;
      v19 = __clz(__rbit64(v14)) | (v11 << 6);
      v20 = v42;
      goto LABEL_12;
    }
    v30 = v11 + 1;
    v20 = v42;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v30 >= v38)
      goto LABEL_26;
    v31 = *((_QWORD *)v37 + v30);
    v32 = v11 + 1;
    if (!v31)
    {
      v32 = v11 + 2;
      if (v11 + 2 >= v38)
        goto LABEL_26;
      v31 = *((_QWORD *)v37 + v32);
      if (!v31)
        break;
    }
LABEL_25:
    v44 = (v31 - 1) & v31;
    v45 = v32;
    v19 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v15 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v17);
    v22 = 32 * v19;
    v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 32 * v19);
    v24 = *v23;
    v25 = v23[1];
    v26 = (void *)v23[2];
    v27 = (void *)v23[3];
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v18 + 48) + v21, v16, v17);
    v28 = (_QWORD *)(*(_QWORD *)(v18 + 56) + v22);
    *v28 = v24;
    v28[1] = v25;
    v28[2] = v26;
    v28[3] = v27;
    swift_errorRetain(v24);
    v29 = v27;
    swift_bridgeObjectRetain(v25);
    result = v26;
    v14 = v44;
    v11 = v45;
  }
  v33 = v11 + 3;
  if (v11 + 3 >= v38)
  {
LABEL_26:
    result = (id)swift_release(v42, v5);
    v34 = v36;
    v35 = v43;
    goto LABEL_28;
  }
  v31 = *((_QWORD *)v37 + v33);
  if (v31)
  {
    v32 = v11 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v32 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v32 >= v38)
      goto LABEL_26;
    v31 = *((_QWORD *)v37 + v32);
    ++v33;
    if (v31)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10005BE48(id result, uint64_t a2, void *a3, void *a4)
{
  id v6;

  if (a2)
  {
    swift_errorRetain(result);
    v6 = a4;
    swift_bridgeObjectRetain(a2);
    return a3;
  }
  return result;
}

uint64_t sub_10005BE90()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_10005BEB4()
{
  uint64_t v0;

  return (id)(*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10005BED4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_10005BEE4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (id)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t sub_10005BF24()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

const char *sub_10005BF30()
{
  return "completedUnitCount";
}

id sub_10005BF3C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "completedUnitCount");
  *a2 = result;
  return result;
}

id sub_10005BF6C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setCompletedUnitCount:", *a1);
}

uint64_t sub_10005BF80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 24), a2);
  return swift_deallocObject(v2, 32, 7);
}

uint64_t sub_10005BFA4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_10005BFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8), v9);
  swift_release(*(_QWORD *)(v0 + v7 + 8), v10);
  swift_release(*(_QWORD *)(v0 + v8 + 8), v11);
  return swift_deallocObject(v0, v8 + 16, v5);
}

void sub_10005C0AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100058528(*(_QWORD *)(v0 + 32), v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void (**)(void))(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10005C128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005C138(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

void sub_10005C140()
{
  uint64_t v0;

  sub_1000589D8(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56));
}

void (*sub_10005C160(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x68uLL);
  *a1 = v5;
  v6 = type metadata accessor for URL(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v5[10] = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_10005C3FC(v5);
  v5[12] = sub_10005C28C(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_10005C220;
}

void sub_10005C220(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_10005C28C(_QWORD *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  char v22;
  void (*result)(uint64_t *);
  uint64_t v24;

  v4 = v3;
  v8 = malloc(0x40uLL);
  *a1 = v8;
  v8[4] = a2;
  v8[5] = v4;
  v9 = *v4;
  v11 = sub_10005F76C(a2);
  *((_BYTE *)v8 + 56) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[6] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*v4 + 56) + 32 * v11;
        v18 = *(_QWORD *)v17;
        v19 = *(_QWORD *)(v17 + 8);
        v20 = *(_OWORD *)(v17 + 16);
LABEL_12:
        *v8 = v18;
        v8[1] = v19;
        *((_OWORD *)v8 + 1) = v20;
        return sub_10005C3BC;
      }
LABEL_11:
      v18 = 0;
      v19 = 0;
      v20 = 0uLL;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_10005BBA4();
      goto LABEL_7;
    }
    sub_10005A620(v14, a3 & 1);
    v21 = sub_10005F76C(a2);
    if ((v15 & 1) == (v22 & 1))
    {
      v11 = v21;
      v8[6] = v21;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v24 = type metadata accessor for URL(0);
  result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
  return result;
}

void sub_10005C3BC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_10005C428(*a1, *(_BYTE *)(*a1 + 56), *(uint64_t **)(*a1 + 40), *(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  sub_100059454(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(void **)(v1 + 16), *(void **)(v1 + 24));
  free((void *)v1);
}

uint64_t (*sub_10005C3FC(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_10005C41C;
}

uint64_t sub_10005C41C(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

id sub_10005C428(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;

  v10 = type metadata accessor for URL(0);
  __chkstk_darwin(v10);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)a1;
  v15 = *(_QWORD *)(a1 + 8);
  v17 = *(void **)(a1 + 16);
  v18 = *(void **)(a1 + 24);
  if (v15)
  {
    v19 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v20 = (_QWORD *)(v19[7] + 32 * a4);
      *v20 = v16;
      v20[1] = v15;
      v20[2] = v17;
      v20[3] = v18;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 16))(v14, a5);
      sub_10005B054(a4, (uint64_t)v14, (uint64_t)v16, v15, (uint64_t)v17, (uint64_t)v18, v19);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v12 + 72) * a4, 1, v11);
    sub_10005AC00(a4, *a3);
  }
  return sub_10005BE48(v16, v15, v17, v18);
}

uint64_t sub_10005C548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8), v7);
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10005C5DC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100057354(*(_QWORD *)(v0 + 16), (char *)(v0 + v2), *(uint64_t (**)(uint64_t))v3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_10005C624()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10005C634(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  void *v36;
  id v37;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  objc_class *ObjectType;
  objc_super v48;
  _QWORD *v49;

  v46 = a1;
  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = type metadata accessor for UTType(0, v3);
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  __chkstk_darwin(v4);
  v43 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_queue;
  v39[2] = sub_100036000(0, &qword_1000EC318, OS_dispatch_queue_ptr);
  v49 = (_QWORD *)sub_100030EE4(&qword_1000EC328);
  v15 = v2;
  v16 = sub_100030EE4(&qword_1000EC330);
  v17 = String.init<A>(describing:)(&v49, v16);
  v19 = v18;
  static DispatchQoS.unspecified.getter();
  v49 = _swiftEmptyArrayStorage;
  v20 = sub_100042114(&qword_1000EC338, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v21 = sub_100030EE4(&qword_1000EC340);
  v22 = sub_100036140(&qword_1000EC348, &qword_1000EC340, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v21, v22, v9, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v42);
  v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v17, v19, v14, v11, v8, 0);
  *(_QWORD *)(v39[1] + v40) = v23;
  v24 = objc_allocWithZone((Class)NSUserDefaults);
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v24, "initWithSuiteName:", v25);

  if (!v26)
    v26 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  *(_QWORD *)&v15[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_userDefaults] = v26;
  v27 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_allowedContentTypes;
  v28 = sub_100030EE4((uint64_t *)&unk_1000EC350);
  v29 = v44;
  v30 = *(unsigned __int8 *)(v44 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = swift_allocObject(v28, v31 + *(_QWORD *)(v44 + 72), v30 | 7);
  *(_OWORD *)(v32 + 16) = xmmword_1000B5310;
  v33 = objc_msgSend((id)objc_opt_self(ICArchive), "universalTypeIdentifier");
  v34 = v43;
  static UTType._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v32 + v31, v34, v45);
  *(_QWORD *)&v15[v27] = v32;
  v35 = OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_importStates;
  *(_QWORD *)&v15[v35] = sub_1000302A4((uint64_t)_swiftEmptyArrayStorage);
  v36 = v46;
  *(_QWORD *)&v15[OBJC_IVAR____TtC38com_apple_mobilenotes_SharingExtension29ICArchiveImportNoteFileParser_archiveImporter] = v46;
  v37 = v36;

  v48.receiver = v15;
  v48.super_class = ObjectType;
  return objc_msgSendSuper2(&v48, "init");
}

uint64_t ICArchivePreviewer.__allocating_init(forArchiveAt:)(char *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 32, 7);
  ICArchivePreviewer.init(forArchiveAt:)(a1);
  return v3;
}

id ICArchivePreviewer.startPreviewing(_:completion:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t aBlock;
  uint64_t v43;
  uint64_t v44;

  v39 = a2;
  v40 = a3;
  v5 = type metadata accessor for URL(0);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100030EE4(&qword_1000EC320);
  v8 = *(_QWORD *)(v41 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v41);
  v11 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v36 = (char *)&v35 - v13;
  v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  v37 = v3 + 24;
  swift_beginAccess(v3 + 24, &aBlock, 32, 0);
  v15 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v15 + 16))
  {
    v16 = sub_10005F804(a1);
    if ((v17 & 1) != 0)
    {
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 56) + 24 * v16 + 16);
      swift_endAccess(&aBlock);
      __asm { BR              X9 }
    }
  }
  swift_endAccess(&aBlock);
  if (qword_1000EB698 != -1)
    swift_once(&qword_1000EB698, sub_10005D9A0);
  v19 = type metadata accessor for Logger(0);
  sub_10003609C(v19, (uint64_t)qword_1000EC400);
  v20 = v8;
  v21 = v41;
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v41);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    aBlock = v26;
    v37 = v20;
    *(_DWORD *)v25 = 136315138;
    v36 = (char *)(v25 + 4);
    ICObjectReferences.identifier.getter(v21);
    v27 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v5, v27);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v5);
    v43 = sub_10005F12C(v28, v30, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v36, v25 + 12);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v41);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Object to be previewed does not exist {url: %s}", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v21);
  }

  v31 = sub_1000360B4();
  v32 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v31, 0, 0);
  *v33 = 4;
  v39(v32, 1);
  swift_errorRelease(v32);
  return objc_msgSend(objc_allocWithZone((Class)NSProgress), "init");
}

uint64_t ICArchivePreviewer.stopPreviewing(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  void (*v33)(char *, uint64_t);
  uint8_t *v34;
  uint64_t v35;
  uint8_t *v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000EC320);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v40 - v12;
  v14 = (uint64_t *)(v1 + 24);
  swift_beginAccess(v1 + 24, &v51, 32, 0);
  v15 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v15 + 16))
  {
    v16 = sub_10005F804(a1);
    if ((v17 & 1) != 0)
    {
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 56) + 24 * v16 + 16);
      swift_endAccess(&v51);
      __asm { BR              X9 }
    }
  }
  v47 = v4;
  v48 = v3;
  swift_endAccess(&v51);
  if (qword_1000EB698 != -1)
    swift_once(&qword_1000EB698, sub_10005D9A0);
  v19 = type metadata accessor for Logger(0);
  sub_10003609C(v19, (uint64_t)qword_1000EC400);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20 = v49(v11, a1, v7);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v46 = v13;
    v24 = (uint8_t *)v23;
    v44 = swift_slowAlloc(32, -1);
    v51 = v44;
    v45 = a1;
    v25 = v7;
    *(_DWORD *)v24 = 136315138;
    v26 = v24 + 12;
    v42 = v24 + 4;
    v43 = v24;
    ICObjectReferences.identifier.getter(v25);
    v27 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v28 = v48;
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v48, v27);
    v41 = v8;
    v31 = v30;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v28);
    v50 = sub_10005F12C(v29, v31, &v51);
    v32 = v26;
    v7 = v25;
    a1 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v42, v32);
    swift_bridgeObjectRelease(v31);
    v33 = *(void (**)(char *, uint64_t))(v41 + 8);
    v33(v11, v7);
    v34 = v43;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Object to be previewed does not exist {url: %s}", v43, 0xCu);
    v35 = v44;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    v36 = v34;
    v13 = v46;
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t))(v8 + 8);
    v33(v11, v7);
  }

  v49(v13, a1, v7);
  swift_beginAccess(v14, &v51, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  v50 = *v14;
  *v14 = 0x8000000000000000;
  sub_1000602B4(0, 0, 3, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  v38 = *v14;
  *v14 = v50;
  swift_bridgeObjectRelease(v38);
  v33(v13, v7);
  return swift_endAccess(&v51);
}

uint64_t sub_10005D9A0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000EC400);
  sub_10003609C(v0, (uint64_t)qword_1000EC400);
  return static Logger.archiving.getter();
}

uint64_t ICArchivePreviewer.init(forArchiveAt:)(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  id v12;
  void *v13;
  id v14;
  objc_class *v15;
  id v16;
  id v17;
  __int16 IsAlexandriaDemoModeEnabled;
  int v19;
  _BYTE *v20;
  __int16 v21;
  id v22;
  uint64_t ObjectType;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  id v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t *v69;
  id v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76[3];
  uint64_t v77;

  v2 = v1;
  v71 = a1;
  v3 = *v1;
  v4 = sub_100030EE4(&qword_1000EB718);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000EC320);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[3] = sub_10002FD14((uint64_t)_swiftEmptyArrayStorage);
  v11 = v1 + 3;
  v12 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (!v12
    || (v13 = v12,
        v14 = objc_msgSend(v12, "persistentContainer"),
        v13,
        !v14))
  {
    if (qword_1000EB698 != -1)
      swift_once(&qword_1000EB698, sub_10005D9A0);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10003609C(v29, (uint64_t)qword_1000EC400);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "No shared note context has been set up", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    v35 = v34;
    v36 = objc_allocWithZone((Class)NSError);
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, 134060, 0);

    swift_willThrow();
    v38 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v71, v38);
    swift_bridgeObjectRelease(v2[3]);
    swift_deallocPartialClassInstance(v2, v3, 32, 7);
    return (uint64_t)v2;
  }
  v77 = v8;
  v69 = v11;
  v2[2] = v14;
  v70 = v14;
  v72 = (char *)objc_msgSend(v70, "viewContext");
  v15 = (objc_class *)type metadata accessor for ICArchiveImporter();
  v16 = objc_allocWithZone(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v19 = ICInternalSettingsIsAlexandriaDemoModeEnabled();
  v20 = objc_allocWithZone(v15);
  if (v19)
    v21 = 256;
  else
    v21 = 0;
  v22 = sub_10004027C(v72, v21 | IsAlexandriaDemoModeEnabled, 0, 0, v17, v20, 0.0);
  ObjectType = swift_getObjectType(v16);
  swift_deallocPartialClassInstance(v16, ObjectType, 128, 7);
  v24 = v71;
  v25 = (uint64_t)v73;
  v26 = ICArchiveImporter.objects(forArchiveAt:)(v71);
  if (v25)
  {
    swift_release(v2, v27);

    v28 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v24, v28);
    return (uint64_t)v2;
  }
  v66 = v22;
  v67 = 0;
  v68 = v2;
  v76[0] = (unint64_t)_swiftEmptyArrayStorage;
  v40 = *(_QWORD *)(v26 + 16);
  if (v40)
  {
    v41 = v26 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
    v42 = *(_QWORD *)(v77 + 72);
    v43 = *(void (**)(char *, unint64_t, uint64_t))(v77 + 16);
    v73 = (char *)v26;
    swift_bridgeObjectRetain(v26);
    do
    {
      v43(v10, v41, v7);
      v44 = ICObjectReferences.recursiveChildren.getter(v7);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v10, v7);
      sub_10005FA20(v44);
      v41 += v42;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease_n(v73, 2);
    v45 = (_QWORD *)v76[0];
  }
  else
  {
    swift_bridgeObjectRelease(v26);
    v45 = _swiftEmptyArrayStorage;
  }
  v46 = v77;
  v47 = v45[2];
  if (v47)
  {
    v76[0] = (unint64_t)_swiftEmptyArrayStorage;
    sub_10003F210(0, v47, 0);
    v48 = *(unsigned __int8 *)(v46 + 80);
    v65 = v45;
    v49 = (char *)v45 + ((v48 + 32) & ~v48);
    v72 = *(char **)(v46 + 72);
    v73 = v6;
    v50 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
    do
    {
      v50(v10, v49, v7);
      v51 = &v6[*(int *)(v75 + 48)];
      v50(v6, v10, v7);
      *(_QWORD *)v51 = 0;
      *((_QWORD *)v51 + 1) = 0;
      v51[16] = 3;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v7);
      v52 = (_QWORD *)v76[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v76[0]) & 1) == 0)
      {
        sub_10003F210(0, v52[2] + 1, 1);
        v52 = (_QWORD *)v76[0];
      }
      v54 = v52[2];
      v53 = v52[3];
      if (v54 >= v53 >> 1)
      {
        sub_10003F210(v53 > 1, v54 + 1, 1);
        v52 = (_QWORD *)v76[0];
      }
      v52[2] = v54 + 1;
      v55 = (uint64_t)v52
          + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))
          + *(_QWORD *)(v74 + 72) * v54;
      v6 = v73;
      sub_10006124C((uint64_t)v73, v55);
      v49 = &v72[(_QWORD)v49];
      --v47;
      v46 = v77;
    }
    while (v47);
    swift_bridgeObjectRelease(v65);
  }
  else
  {
    swift_bridgeObjectRelease(v45);
    v52 = _swiftEmptyArrayStorage;
  }
  v56 = v52[2];
  v2 = v68;
  if (v56)
  {
    sub_100030EE4(&qword_1000EB720);
    v57 = (void *)static _DictionaryStorage.allocate(capacity:)(v56);
  }
  else
  {
    v57 = &_swiftEmptyDictionarySingleton;
  }
  v58 = v70;
  v76[0] = (unint64_t)v57;
  v59 = swift_bridgeObjectRetain(v52);
  v60 = v67;
  sub_100060D84(v59, 1, v76);
  if (!v60)
  {

    swift_bridgeObjectRelease(v52);
    v61 = v76[0];
    v62 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v71, v62);
    v63 = v69;
    swift_beginAccess(v69, v76, 1, 0);
    v64 = *v63;
    *v63 = v61;
    swift_bridgeObjectRelease(v64);
    return (uint64_t)v2;
  }
  result = swift_unexpectedError(v60, "Swift/Dictionary.swift", 22, 1, 489);
  __break(1u);
  return result;
}

uint64_t ICArchivePreviewer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];

  v1 = sub_100030EE4(&qword_1000EC320);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 24, v22, 1, 0);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = v5 + 64;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 24), 2);
  result = swift_retain(v0);
  v13 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_5;
    }
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v10)
      goto LABEL_25;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v10)
        goto LABEL_25;
      v17 = *(_QWORD *)(v6 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v10)
          goto LABEL_25;
        v17 = *(_QWORD *)(v6 + 8 * v13);
        if (!v17)
        {
          v13 = v16 + 3;
          if (v16 + 3 >= v10)
            goto LABEL_25;
          v17 = *(_QWORD *)(v6 + 8 * v13);
          if (!v17)
          {
            v13 = v16 + 4;
            if (v16 + 4 >= v10)
              goto LABEL_25;
            v17 = *(_QWORD *)(v6 + 8 * v13);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_24:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + *(_QWORD *)(v2 + 72) * v15, v1);
    ICArchivePreviewer.stopPreviewing(_:)((uint64_t)v4);
    result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  v18 = v16 + 5;
  if (v18 >= v10)
  {
LABEL_25:
    swift_release(v5, v12);
    swift_bridgeObjectRelease(v5);
    swift_release(v0, v19);
    v20 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 24) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v20);

    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
    return v0;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v10)
      goto LABEL_25;
    v17 = *(_QWORD *)(v6 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t ICArchivePreviewer.__deallocating_deinit()
{
  uint64_t v0;

  ICArchivePreviewer.deinit();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t ICArchivePreviewer.Errors.errorDescription.getter(uint64_t a1)
{
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
  {
    v6 = a1;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ICArchivePreviewer.Errors, &v6, &type metadata for ICArchivePreviewer.Errors, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v2 = String._bridgeToObjectiveC()();
    v3 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, 0, 0);

    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    return v4;
  }
  return result;
}

uint64_t ICArchivePreviewer.Errors.init(rawValue:)()
{
  return 0;
}

unint64_t static ICArchivePreviewer.Errors._nsErrorDomain.getter()
{
  return 0xD000000000000040;
}

uint64_t sub_10005E3B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100061BD0();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

_QWORD *sub_10005E3E8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_10005E400()
{
  uint64_t *v0;

  return ICArchivePreviewer.Errors.errorDescription.getter(*v0);
}

uint64_t sub_10005E408(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061BD0();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_10005E430(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061BD0();
  return _BridgedNSError._code.getter(a1, v2);
}

uint64_t sub_10005E458(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100061BD0();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t ICArchivePreviewer.objects.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

void sub_10005E4CC(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void (*v23)(char *, uint64_t, uint64_t);
  int v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void (*v48)(uint64_t *);
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v8 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  __chkstk_darwin(v8);
  v53 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100030EE4(&qword_1000EC320);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v57 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v50 - v14;
  v16 = (uint64_t *)(a3 + 24);
  swift_beginAccess(a3 + 24, &v61, 32, 0);
  v17 = *(_QWORD *)(a3 + 24);
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_10005F804(a4), (v19 & 1) != 0))
  {
    v20 = *(_QWORD *)(v17 + 56) + 24 * v18;
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(unsigned __int8 *)(v20 + 16);
    v58 = *(void **)v20;
    v59 = v21;
    sub_1000353DC(v58, v21, v22);
  }
  else
  {
    v58 = 0;
    v59 = 0;
    v22 = 255;
  }
  swift_endAccess(&v61);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v56 = a4;
  v23(v15, a4, v10);
  swift_beginAccess(v16, &v61, 33, 0);
  if ((a2 & 1) != 0)
    v24 = 2;
  else
    v24 = 1;
  sub_100061D28(a1, a2 & 1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
  v60 = *v16;
  *v16 = 0x8000000000000000;
  sub_1000602B4((uint64_t)a1, 0, v24, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
  v26 = *v16;
  *v16 = v60;
  swift_bridgeObjectRelease(v26);
  v27 = *(void (**)(char *, uint64_t))(v11 + 8);
  v27(v15, v10);
  swift_endAccess(&v61);
  if (v22)
  {
    v28 = v59;
    if (qword_1000EB698 != -1)
      swift_once(&qword_1000EB698, sub_10005D9A0);
    v29 = type metadata accessor for Logger(0);
    sub_10003609C(v29, (uint64_t)qword_1000EC400);
    v30 = v57;
    v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v57, v56, v10);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(12, -1);
      LODWORD(v56) = v22;
      v59 = v28;
      v35 = (uint8_t *)v34;
      v52 = swift_slowAlloc(32, -1);
      v61 = v52;
      *(_DWORD *)v35 = 136315138;
      v51 = v35 + 4;
      v36 = v53;
      ICObjectReferences.identifier.getter(v10);
      v37 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v38 = v55;
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v55, v37);
      v41 = v40;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v38);
      v60 = sub_10005F12C(v39, v41, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v51, v35 + 12);
      swift_bridgeObjectRelease(v41);
      v27(v57, v10);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Preview object is in unexpected state {url: %s}", v35, 0xCu);
      v42 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      sub_100061D34(v58, v59, v56);
    }
    else
    {
      sub_100061D34(v58, v28, v22);
      v27(v30, v10);

    }
  }
  else
  {
    v44 = v58;
    v43 = v59;
    sub_1000353DC(v58, v59, 0);

    v45 = *(_QWORD *)(v43 + 16);
    if (v45)
    {
      swift_bridgeObjectRetain(v43);
      v46 = (uint64_t *)(v43 + 40);
      do
      {
        v48 = (void (*)(uint64_t *))*(v46 - 1);
        v47 = *v46;
        v61 = (uint64_t)a1;
        v62 = a2 & 1;
        swift_retain(v47);
        v48(&v61);
        swift_release(v47, v49);
        v46 += 2;
        --v45;
      }
      while (v45);
      swift_bridgeObjectRelease(v43);
    }
    sub_100061D34(v44, v43, 0);
    swift_bridgeObjectRelease(v43);
  }
}

uint64_t sub_10005E92C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t IsAlexandriaDemoModeEnabled;
  __int16 v20;
  int v21;
  _BYTE *v22;
  __int16 v23;
  id v24;
  uint64_t ObjectType;
  id v26;
  id v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  void *v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **aBlock;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  void *v85;
  _QWORD *v86;

  v75 = a5;
  v76 = a6;
  v73 = a4;
  v74 = type metadata accessor for DispatchWorkItemFlags(0);
  v80 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v78 = *(_QWORD *)(v11 - 8);
  v79 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (objc_class *)type metadata accessor for ICArchiveImporter();
  v15 = objc_allocWithZone(v14);
  v16 = (void *)objc_opt_self(NSFileManager);
  v17 = a1;
  v18 = objc_msgSend(v16, "defaultManager");
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v18);
  v20 = IsAlexandriaDemoModeEnabled;
  v21 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
  v22 = objc_allocWithZone(v14);
  if (v21)
    v23 = 256;
  else
    v23 = 0;
  v24 = sub_10004027C(v17, v23 | v20, 0, 0, v18, v22, 0.0);
  ObjectType = swift_getObjectType(v15);
  swift_deallocPartialClassInstance(v15, ObjectType, 128, 7);
  v26 = objc_msgSend((id)objc_opt_self(ICAccount), "inMemoryAccountInContext:", v17);
  v27 = objc_msgSend(v26, "defaultFolder");
  v77 = v24;
  v28 = sub_10003B7B0(a2, v27, (char *)&off_1000DA730, (uint64_t)a3);
  v30 = v29;
  v70 = v28;
  v71 = v31;
  v72 = v32;
  v33 = v73;

  aBlock = 0;
  v34 = objc_msgSend(v17, "save:", &aBlock);
  v35 = aBlock;
  if (v34)
  {
    sub_100036000(0, &qword_1000EC318, OS_dispatch_queue_ptr);
    v69 = static OS_dispatch_queue.main.getter(v35);
    v36 = swift_allocObject(&unk_1000D8A88, 80, 7);
    v37 = v70;
    v38 = v71;
    *(_QWORD *)(v36 + 16) = v70;
    *(_QWORD *)(v36 + 24) = v38;
    *(_QWORD *)(v36 + 32) = v72;
    v39 = v30 & 1;
    *(_BYTE *)(v36 + 40) = v30 & 1;
    v40 = v33;
    *(_QWORD *)(v36 + 48) = v33;
    *(_QWORD *)(v36 + 56) = a3;
    v41 = v76;
    *(_QWORD *)(v36 + 64) = v75;
    *(_QWORD *)(v36 + 72) = v41;
    v85 = sub_100061CE0;
    v86 = (_QWORD *)v36;
    aBlock = _NSConcreteStackBlock;
    v82 = 1107296256;
    v83 = sub_1000587FC;
    v84 = &unk_1000D8AA0;
    v75 = _Block_copy(&aBlock);
    v42 = v86;
    v43 = v38;
    v44 = v72;
    sub_100061CF8(v37, v43, v72, v39);
    swift_retain(v40);
    v45 = a3;
    swift_retain(v41);
    v47 = swift_release(v42, v46);
    static DispatchQoS.unspecified.getter(v47);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v48 = sub_100042114(&qword_1000EC2F8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v49 = sub_100030EE4(&qword_1000EC300);
    v50 = sub_100036140(&qword_1000EC308, &qword_1000EC300, (uint64_t)&protocol conformance descriptor for [A]);
    v51 = v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v49, v50, v74, v48);
    v52 = v75;
    v53 = (void *)v69;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v75);
    _Block_release(v52);

    sub_100061C6C(v70, v71, v44, v39);
  }
  else
  {
    v54 = aBlock;
    v55 = _convertNSErrorToError(_:)(v35);

    swift_willThrow(v56);
    sub_100061C6C(v70, v71, v72, v30 & 1);

    sub_100036000(0, &qword_1000EC318, OS_dispatch_queue_ptr);
    v57 = (void *)((uint64_t (*)(void))static OS_dispatch_queue.main.getter)();
    v58 = (_QWORD *)swift_allocObject(&unk_1000D8A38, 40, 7);
    v59 = v76;
    v58[2] = v75;
    v58[3] = v59;
    v58[4] = v55;
    v85 = sub_100061C40;
    v86 = v58;
    aBlock = _NSConcreteStackBlock;
    v82 = 1107296256;
    v83 = sub_1000587FC;
    v84 = &unk_1000D8A50;
    v60 = _Block_copy(&aBlock);
    v61 = v86;
    swift_retain(v59);
    swift_errorRetain(v55);
    v63 = swift_release(v61, v62);
    static DispatchQoS.unspecified.getter(v63);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v64 = sub_100042114(&qword_1000EC2F8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v65 = sub_100030EE4(&qword_1000EC300);
    v66 = sub_100036140(&qword_1000EC308, &qword_1000EC300, (uint64_t)&protocol conformance descriptor for [A]);
    v51 = v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v65, v66, v74, v64);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v60);

    _Block_release(v60);
    swift_errorRelease(v55);
  }
  (*(void (**)(char *, uint64_t))(v80 + 8))(v10, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v13, v79);
}

void sub_10005EEDC(void *a1, uint64_t a2, void *a3, char a4, uint64_t a5, void *a6, void (*a7)(void *, uint64_t))
{
  void *v9;
  id v13;
  uint64_t v14;
  _QWORD v15[3];
  void *v16;
  unsigned __int8 v17;

  v9 = a1;
  if ((a4 & 1) != 0)
  {
    swift_errorRetain(a1);
    v14 = 1;
  }
  else
  {
    v15[0] = a1;
    v15[1] = a2;
    v15[2] = a3;
    swift_bridgeObjectRetain(a2);
    v13 = a3;
    sub_10005EFB8((uint64_t)v15, a5, (uint64_t)&v16);

    swift_bridgeObjectRelease(a2);
    v9 = v16;
    v14 = v17;
  }
  objc_msgSend(a6, "setCompletedUnitCount:", objc_msgSend(a6, "totalUnitCount"));
  a7(v9, v14);
  sub_100036038(v9, v14);
}

void sub_10005EFB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  unsigned int v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[4];

  v4 = *(void **)(a1 + 16);
  v5 = objc_msgSend(*(id *)(a2 + 16), "viewContext");
  v6 = objc_msgSend(v4, "objectID");
  v7 = objc_msgSend(v5, "objectWithID:", v6);

  v15[3] = sub_100036000(0, &qword_1000EBB40, NSManagedObject_ptr);
  v15[0] = v7;
  v8 = v7;
  v9 = (void *)sub_100032540((uint64_t)v15);
  sub_100035424(v15);
  v10 = objc_msgSend(v9, "isPasswordProtected", v15[0]);
  v11 = v10;
  if (v10)
  {
    v12 = sub_1000612E0();
    v13 = swift_allocError(&type metadata for ICArchivePreviewer.Errors, v12, 0, 0);
    *v14 = 0;

    v9 = (void *)v13;
  }

  *(_QWORD *)a3 = v9;
  *(_BYTE *)(a3 + 8) = v11;
}

void sub_10005F0DC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v6 = a2;
  v4();
  swift_release(v3, v5);

}

uint64_t sub_10005F12C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10005F1FC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100030F24((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100030F24((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100035424(v12);
  return v7;
}

uint64_t sub_10005F1FC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10005F3B4(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10005F3B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10005F448(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10005F620(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10005F620(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10005F448(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10005F5BC(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10005F5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100030EE4(&qword_1000EC500);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10005F620(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100030EE4(&qword_1000EC500);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_10005F76C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_100042114(&qword_1000EBAA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100060AE0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1000EBEA8, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_10005F804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = sub_100030EE4(&qword_1000EC320);
  v6 = sub_100036140((unint64_t *)&unk_1000EC370, &qword_1000EC320, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000608BC(a1, v7);
}

uint64_t sub_10005F87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 24), a2);
  return swift_deallocObject(v2, 32, 7);
}

unint64_t sub_10005F8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100060A00(a1, a2, v5);
}

unint64_t sub_10005F908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100042114((unint64_t *)&unk_1000EC360, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100060AE0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000EC4F8, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10005F9A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100060C10(a1, v7);
}

uint64_t sub_10005FA20(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_100032EF0(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = sub_100030EE4(&qword_1000EC320);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005FB8C(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int isUniquelyReferenced_nonNull_native;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(_QWORD, _QWORD, _QWORD);
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  unint64_t v61;
  unsigned int (*v62)(_QWORD, _QWORD, _QWORD);
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;

  v68 = _s14descr1000DA8A1V3TagVMa(0);
  v4 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v67 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100030EE4(&qword_1000EC4E8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v66 = (uint64_t)&v58 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v58 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *v1;
  v17 = *(_QWORD *)(*v1 + 16);
  v18 = v17 + v15;
  if (__OFADD__(v17, v15))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v16;
  if (!isUniquelyReferenced_nonNull_native || (v20 = *(_QWORD *)(v16 + 24) >> 1, v20 < v18))
  {
    if (v17 <= v18)
      v21 = v17 + v15;
    else
      v21 = v17;
    v16 = sub_100033354(isUniquelyReferenced_nonNull_native, v21, 1, v16);
    *v1 = v16;
    v20 = *(_QWORD *)(v16 + 24) >> 1;
  }
  v22 = *(_QWORD *)(v16 + 16);
  v2 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v17 = *(_QWORD *)(v4 + 72);
  v23 = v20 - v22;
  v24 = sub_1000618CC(&v69, v16 + v2 + v17 * v22, v20 - v22, a1);
  if (v24 < v15)
    goto LABEL_15;
  if (v24)
  {
    v26 = *(_QWORD *)(v16 + 16);
    v27 = __OFADD__(v26, v24);
    v28 = v26 + v24;
    if (v27)
    {
      __break(1u);
      goto LABEL_20;
    }
    *(_QWORD *)(v16 + 16) = v28;
  }
  if (v24 != v23)
    return sub_100036138(v69, v70);
LABEL_16:
  v16 = *(_QWORD *)(v16 + 16);
  v15 = v69;
  v25 = v71;
  v23 = v72;
  v64 = v71;
  v65 = v70;
  if (v73)
  {
    v63 = (v73 - 1) & v73;
    v30 = __clz(__rbit64(v73)) | (v72 << 6);
LABEL_18:
    sub_100042198(*(_QWORD *)(v15 + 48) + v30 * v17, (uint64_t)v14);
    v31 = v15;
    v32 = v68;
    v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v59(v14, 0, 1, v68);
    v33 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v23;
    goto LABEL_42;
  }
LABEL_20:
  v34 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
LABEL_40:
    v15 = v12;
    goto LABEL_41;
  }
  v35 = (unint64_t)(v25 + 64) >> 6;
  v62 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v23;
  if (v34 < v35)
  {
    v36 = *(_QWORD *)(v65 + 8 * v34);
    if (v36)
    {
LABEL_23:
      v63 = (v36 - 1) & v36;
      v30 = __clz(__rbit64(v36)) + (v34 << 6);
      v23 = v34;
      goto LABEL_18;
    }
    v37 = v23 + 2;
    v62 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))(v23 + 1);
    if (v23 + 2 < v35)
    {
      v12 = v15;
      v36 = *(_QWORD *)(v65 + 8 * v37);
      if (v36)
      {
LABEL_26:
        v34 = v37;
        goto LABEL_23;
      }
      v62 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))(v23 + 2);
      if (v23 + 3 < v35)
      {
        v36 = *(_QWORD *)(v65 + 8 * (v23 + 3));
        if (v36)
        {
          v34 = v23 + 3;
          goto LABEL_23;
        }
        v37 = v23 + 4;
        v62 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))(v23 + 3);
        if (v23 + 4 < v35)
        {
          v36 = *(_QWORD *)(v65 + 8 * v37);
          if (v36)
            goto LABEL_26;
          v34 = v23 + 5;
          v62 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))(v23 + 4);
          if (v23 + 5 < v35)
          {
            v36 = *(_QWORD *)(v65 + 8 * v34);
            if (v36)
              goto LABEL_23;
            v62 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))(v35 - 1);
            v38 = v23 + 6;
            while (v35 != v38)
            {
              v36 = *(_QWORD *)(v65 + 8 * v38++);
              if (v36)
              {
                v34 = v38 - 1;
                goto LABEL_23;
              }
            }
            goto LABEL_40;
          }
        }
      }
    }
  }
LABEL_41:
  v31 = v15;
  v32 = v68;
  v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v59(v14, 1, 1, v68);
  v63 = 0;
  v33 = v62;
LABEL_42:
  v60 = v31;
  v69 = v31;
  v70 = v65;
  v71 = v64;
  v72 = (int64_t)v33;
  v73 = v63;
  v39 = v66;
  sub_100031044((uint64_t)v14, v66, &qword_1000EC4E8);
  v62 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v4 + 48);
  if (v62(v39, 1, v32) == 1)
  {
LABEL_43:
    sub_100061B54((uint64_t)v14);
    sub_100036138(v60, v65);
    return sub_100061B54(v39);
  }
  v40 = v67;
  while (1)
  {
    sub_100061B54(v39);
    v42 = *v1;
    v43 = *(_QWORD *)(*v1 + 24);
    v44 = v43 >> 1;
    if ((uint64_t)(v43 >> 1) < v16 + 1)
    {
      v42 = sub_100033354(v43 > 1, v16 + 1, 1, *v1);
      *v1 = v42;
      v44 = *(_QWORD *)(v42 + 24) >> 1;
    }
    sub_100031044((uint64_t)v14, (uint64_t)v9, &qword_1000EC4E8);
    if (v62(v9, 1, v68) == 1)
    {
      v39 = v66;
LABEL_83:
      sub_100061B54((uint64_t)v9);
      v41 = v68;
      goto LABEL_46;
    }
    v61 = v42 + v2;
    sub_1000421DC((uint64_t)v9, v40);
    v45 = v16 < v44;
    if (v16 > v44)
      v44 = v16;
    v46 = v64;
    if (v45)
      break;
LABEL_45:
    v64 = v46;
    sub_100061B94(v40);
    v16 = v44;
    v41 = v68;
    v39 = v66;
LABEL_46:
    *(_QWORD *)(*v1 + 16) = v16;
    sub_100031044((uint64_t)v14, v39, &qword_1000EC4E8);
    if (v62(v39, 1, v41) == 1)
      goto LABEL_43;
  }
  while (1)
  {
    sub_100061B54((uint64_t)v14);
    result = sub_1000421DC(v40, v61 + v16 * v17);
    v47 = v69;
    v48 = v72;
    v64 = v71;
    v65 = v70;
    if (v73)
    {
      v63 = (v73 - 1) & v73;
      v49 = __clz(__rbit64(v73)) | (v72 << 6);
      goto LABEL_57;
    }
    v52 = v72 + 1;
    if (__OFADD__(v72, 1))
      break;
    v53 = (unint64_t)(v71 + 64) >> 6;
    v54 = v72;
    if (v52 < v53)
    {
      v55 = *(_QWORD *)(v65 + 8 * v52);
      if (v55)
        goto LABEL_61;
      v54 = v72 + 1;
      if (v72 + 2 < v53)
      {
        v55 = *(_QWORD *)(v65 + 8 * (v72 + 2));
        if (v55)
        {
          v52 = v72 + 2;
          goto LABEL_61;
        }
        v54 = v72 + 2;
        if (v72 + 3 < v53)
        {
          v55 = *(_QWORD *)(v65 + 8 * (v72 + 3));
          if (v55)
          {
            v52 = v72 + 3;
            goto LABEL_61;
          }
          v54 = v72 + 3;
          if (v72 + 4 < v53)
          {
            v55 = *(_QWORD *)(v65 + 8 * (v72 + 4));
            if (v55)
            {
              v52 = v72 + 4;
LABEL_61:
              v63 = (v55 - 1) & v55;
              v49 = __clz(__rbit64(v55)) + (v52 << 6);
              v48 = v52;
LABEL_57:
              sub_100042198(*(_QWORD *)(v69 + 48) + v49 * v17, (uint64_t)v14);
              v50 = v68;
              v59(v14, 0, 1, v68);
              v51 = v48;
              goto LABEL_79;
            }
            v52 = v72 + 5;
            v54 = v72 + 4;
            if (v72 + 5 < v53)
            {
              v55 = *(_QWORD *)(v65 + 8 * v52);
              if (v55)
                goto LABEL_61;
              v56 = v72 + 6;
              while (v53 != v56)
              {
                v55 = *(_QWORD *)(v65 + 8 * v56++);
                if (v55)
                {
                  v52 = v56 - 1;
                  goto LABEL_61;
                }
              }
              v54 = v53 - 1;
            }
          }
        }
      }
    }
    v50 = v68;
    v57 = v54;
    v59(v14, 1, 1, v68);
    v51 = v57;
    v63 = 0;
LABEL_79:
    ++v16;
    v60 = v47;
    v69 = v47;
    v70 = v65;
    v46 = v64;
    v71 = v64;
    v72 = v51;
    v73 = v63;
    sub_100031044((uint64_t)v14, (uint64_t)v9, &qword_1000EC4E8);
    if (v62(v9, 1, v50) == 1)
    {
      v39 = v66;
      v40 = v67;
      goto LABEL_83;
    }
    v40 = v67;
    sub_1000421DC((uint64_t)v9, v67);
    if (v16 == v44)
      goto LABEL_45;
  }
  __break(1u);
  return result;
}

void sub_1000602B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  int v28;

  v6 = (_QWORD **)v5;
  v28 = a3;
  v27 = a2;
  v10 = sub_100030EE4(&qword_1000EC320);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_10005F804(a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    v22 = *v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7] + 24 * v16;
      sub_100060464(*(void **)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
      v24 = v27;
      *(_QWORD *)v23 = a1;
      *(_QWORD *)(v23 + 8) = v24;
      *(_BYTE *)(v23 + 16) = v28;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_10005B108();
    goto LABEL_7;
  }
  sub_10005949C(v19, a5 & 1);
  v25 = sub_10005F804(a4);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return;
  }
  v16 = v25;
  v22 = *v6;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  sub_10005AEA0(v16, (uint64_t)v13, a1, v27, v28, v22);
}

uint64_t sub_10006044C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006045C(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

void sub_100060464(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 2:
      swift_errorRelease(a1);
      break;
    case 1:

      break;
    case 0:

      swift_bridgeObjectRelease(a2);
      break;
  }
}

_OWORD *sub_1000604AC(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_10005F9A0((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_100035424(v16);
        return sub_100031034(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10005B540();
      goto LABEL_7;
    }
    sub_100059894(v12, a3 & 1);
    v18 = sub_10005F9A0((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10005AF58(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_1000605CC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10005F76C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_errorRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10005B704();
    goto LABEL_7;
  }
  sub_100059EE0(v17, a3 & 1);
  v23 = sub_10005F76C(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10005AFBC(v14, (uint64_t)v11, a1, v20);
}

void sub_100060728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v7 = (_QWORD **)v6;
  v34 = a3;
  v35 = a4;
  v33 = a2;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)*v6;
  v17 = sub_10005F76C(a5);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = v15[3];
  if (v22 >= v20 && (a6 & 1) != 0)
  {
LABEL_7:
    v23 = *v7;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = (uint64_t *)(v23[7] + 32 * v17);
      v25 = v24[1];
      v26 = (void *)v24[2];
      v27 = (void *)v24[3];
      swift_errorRelease(*v24);
      swift_bridgeObjectRelease(v25);

      v28 = v33;
      *v24 = a1;
      v24[1] = v28;
      v29 = v35;
      v24[2] = v34;
      v24[3] = v29;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a6 & 1) == 0)
  {
    sub_10005BBA4();
    goto LABEL_7;
  }
  sub_10005A620(v20, a6 & 1);
  v30 = sub_10005F76C(a5);
  if ((v21 & 1) != (v31 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return;
  }
  v17 = v30;
  v23 = *v7;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a5, v11);
  sub_10005B054(v17, (uint64_t)v14, a1, v33, v34, v35, v23);
}

unint64_t sub_1000608BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = sub_100030EE4(&qword_1000EC320);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100036140(&qword_1000EC508, &qword_1000EC320, (uint64_t)&protocol conformance descriptor for ICObjectReferences<A>);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100060A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100060AE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100042114(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_100060C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_100060D84(uint64_t a1, char a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(unint64_t, uint64_t, unint64_t);
  void *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(unint64_t, uint64_t, unint64_t);
  unint64_t v70;
  unint64_t *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  v7 = sub_100030EE4(&qword_1000EC320);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100030EE4(&qword_1000EB718);
  v12 = __chkstk_darwin(v11);
  v15 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease(a1);
  v62[1] = v3;
  v63 = v16;
  v17 = a3;
  v18 = &v15[*(int *)(v12 + 48)];
  v62[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = a1 + v62[0];
  v68 = *(_QWORD *)(v13 + 72);
  v65 = a1;
  swift_bridgeObjectRetain(a1);
  sub_100031044(v19, (uint64_t)v15, &qword_1000EB718);
  v64 = v8;
  v20 = *(void (**)(unint64_t, uint64_t, unint64_t))(v8 + 32);
  v67 = v15;
  v69 = v20;
  v70 = v7;
  v20((unint64_t)v10, (uint64_t)v15, v7);
  v21 = *(void **)v18;
  v22 = *((_QWORD *)v18 + 1);
  v23 = v18[16];
  v71 = v17;
  v72 = v10;
  v24 = *v17;
  v26 = sub_10005F804((uint64_t)v10);
  v27 = *(_QWORD *)(v24 + 16);
  v28 = (v25 & 1) == 0;
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
    goto LABEL_24;
  v7 = v25;
  if (*(_QWORD *)(v24 + 24) >= v29)
  {
    if ((a2 & 1) != 0)
    {
      if ((v25 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10005B108();
      if ((v7 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v37 = (uint64_t)v72;
    v7 = *v71;
    *(_QWORD *)(*v71 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    v38 = *(_QWORD *)(v7 + 48);
    v66 = *(_QWORD *)(v64 + 72);
    v69(v38 + v66 * v26, v37, v70);
    v39 = *(_QWORD *)(v7 + 56) + 24 * v26;
    *(_QWORD *)v39 = v21;
    *(_QWORD *)(v39 + 8) = v22;
    *(_BYTE *)(v39 + 16) = v23;
    v40 = *(_QWORD *)(v7 + 16);
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    *(_QWORD *)(v7 + 16) = v42;
    v43 = v63 - 1;
    if (v63 == 1)
      return swift_bridgeObjectRelease_n(v65, 2);
    v44 = v65 + v68 + v62[0];
    while (1)
    {
      v45 = (uint64_t)v67;
      sub_100031044(v44, (uint64_t)v67, &qword_1000EB718);
      v46 = (uint64_t)v72;
      v69((unint64_t)v72, v45, v70);
      v21 = *(void **)v18;
      v22 = *((_QWORD *)v18 + 1);
      v23 = v18[16];
      v47 = *v71;
      v7 = sub_10005F804(v46);
      v49 = *(_QWORD *)(v47 + 16);
      v50 = (v48 & 1) == 0;
      v51 = v49 + v50;
      if (__OFADD__(v49, v50))
        break;
      v52 = v48;
      if (*(_QWORD *)(v47 + 24) < v51)
      {
        sub_10005949C(v51, 1);
        v53 = sub_10005F804((uint64_t)v72);
        if ((v52 & 1) != (v54 & 1))
          goto LABEL_26;
        v7 = v53;
      }
      if ((v52 & 1) != 0)
        goto LABEL_10;
      v55 = (uint64_t)v72;
      v56 = (_QWORD *)*v71;
      *(_QWORD *)(*v71 + 8 * (v7 >> 6) + 64) |= 1 << v7;
      v69(v56[6] + v66 * v7, v55, v70);
      v57 = v56[7] + 24 * v7;
      *(_QWORD *)v57 = v21;
      *(_QWORD *)(v57 + 8) = v22;
      *(_BYTE *)(v57 + 16) = v23;
      v58 = v56[2];
      v41 = __OFADD__(v58, 1);
      v59 = v58 + 1;
      if (v41)
        goto LABEL_25;
      v56[2] = v59;
      v44 += v68;
      if (!--v43)
        return swift_bridgeObjectRelease_n(v65, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_10005949C(v29, a2 & 1);
  v30 = sub_10005F804((uint64_t)v72);
  if ((v7 & 1) == (v31 & 1))
  {
    v26 = v30;
    if ((v7 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v33 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow();
    v75 = v33;
    swift_errorRetain(v33);
    v34 = sub_100030EE4(&qword_1000EBAA0);
    v35 = swift_dynamicCast(v34, &v75, v34, &type metadata for _MergeError, 0);
    v7 = (unint64_t)v72;
    if ((v35 & 1) == 0)
    {
      v36 = v65;
      swift_bridgeObjectRelease(v65);
      sub_100060464(v21, v22, v23);
      (*(void (**)(unint64_t, unint64_t))(v64 + 8))(v7, v70);
      swift_bridgeObjectRelease(v36);
      return swift_errorRelease(v75);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v70);
  __break(1u);
LABEL_27:
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v60._object = (void *)0x80000001000B0C00;
  v60._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v60);
  _print_unlocked<A, B>(_:_:)(v7, &v73, v70, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v61._countAndFlagsBits = 39;
  v61._object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v73, v74, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10006124C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EB718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100061298()
{
  unint64_t result;

  result = qword_1000EC418;
  if (!qword_1000EC418)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EC418);
  }
  return result;
}

unint64_t sub_1000612E0()
{
  unint64_t result;

  result = qword_1000EC420;
  if (!qword_1000EC420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EC420);
  }
  return result;
}

unint64_t sub_100061328()
{
  unint64_t result;

  result = qword_1000EC428;
  if (!qword_1000EC428)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EC428);
  }
  return result;
}

unint64_t sub_100061370()
{
  unint64_t result;

  result = qword_1000EC430;
  if (!qword_1000EC430)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EC430);
  }
  return result;
}

unint64_t sub_1000613B8()
{
  unint64_t result;

  result = qword_1000EC438;
  if (!qword_1000EC438)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EC438);
  }
  return result;
}

uint64_t type metadata accessor for ICArchivePreviewer()
{
  return objc_opt_self(_TtC38com_apple_mobilenotes_SharingExtension18ICArchivePreviewer);
}

ValueMetadata *type metadata accessor for ICArchivePreviewer.Errors()
{
  return &type metadata for ICArchivePreviewer.Errors;
}

void destroy for ICArchivePreviewer.ObjectStates(uint64_t a1)
{
  sub_100060464(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s38com_apple_mobilenotes_SharingExtension18ICArchivePreviewerC12ObjectStatesOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000353DC(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ICArchivePreviewer.ObjectStates(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000353DC(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100060464(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for ICArchivePreviewer.ObjectStates(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ICArchivePreviewer.ObjectStates(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100060464(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchivePreviewer.ObjectStates(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchivePreviewer.ObjectStates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000615C0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1000615D8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ICArchivePreviewer.ObjectStates()
{
  return &type metadata for ICArchivePreviewer.ObjectStates;
}

uint64_t sub_100061600(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = sub_100030EE4(&qword_1000EC320);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 32);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 48) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000618CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;

  v8 = _s14descr1000DA8A1V3TagVMa(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  v35 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 24);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_100042198(*(_QWORD *)(v35 + 48) + v29 * v25, (uint64_t)v12);
    sub_1000421DC((uint64_t)v12, (uint64_t)v15);
    result = sub_1000421DC((uint64_t)v15, a2);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100061B54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100030EE4(&qword_1000EC4E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100061B94(uint64_t a1)
{
  uint64_t v2;

  v2 = _s14descr1000DA8A1V3TagVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100061BD0()
{
  unint64_t result;

  result = qword_1000EC4F0;
  if (!qword_1000EC4F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchivePreviewer.Errors, &type metadata for ICArchivePreviewer.Errors);
    atomic_store(result, (unint64_t *)&qword_1000EC4F0);
  }
  return result;
}

uint64_t sub_100061C14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 24), a2);
  swift_errorRelease(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_100061C40()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 16))(*(_QWORD *)(v0 + 32), 1);
}

void sub_100061C6C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    swift_errorRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(a2);

  }
}

uint64_t sub_100061C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100061C6C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48), v1);

  swift_release(*(_QWORD *)(v0 + 72), v2);
  return swift_deallocObject(v0, 80, 7);
}

void sub_100061CE0()
{
  uint64_t v0;

  sub_10005EEDC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(void (**)(void *, uint64_t))(v0 + 64));
}

id sub_100061CF8(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if ((a4 & 1) != 0)
    return (id)swift_errorRetain(a1);
  swift_bridgeObjectRetain(a2);
  return a3;
}

id sub_100061D28(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

void sub_100061D34(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    sub_100060464(a1, a2, a3);
}

id sub_100061D48(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  void (**v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t aBlock;
  uint64_t v54;
  uint64_t v55;

  v8 = type metadata accessor for URL(0);
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100030EE4(&qword_1000EC320);
  v11 = *(char **)(v49 - 8);
  v12 = *((_QWORD *)v11 + 8);
  v13 = __chkstk_darwin(v49);
  v45 = (void (**)(char *, uint64_t))((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v13);
  v44 = (char *)&v43 - v15;
  v16 = __chkstk_darwin(v14);
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - v17;
  v19 = swift_allocObject(&unk_1000D8AD8, 32, 7);
  v51 = a3;
  v52 = v19;
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  v46 = a2 + 24;
  swift_beginAccess(a2 + 24, &aBlock, 32, 0);
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD *)(v20 + 16);
  v50 = a4;
  swift_retain(a4);
  if (v21)
  {
    v22 = sub_10005F804(a1);
    if ((v23 & 1) != 0)
    {
      v24 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 56) + 24 * v22 + 16);
      swift_endAccess(&aBlock);
      __asm { BR              X9 }
    }
  }
  swift_endAccess(&aBlock);
  if (qword_1000EB698 != -1)
    swift_once(&qword_1000EB698, sub_10005D9A0);
  v25 = type metadata accessor for Logger(0);
  sub_10003609C(v25, (uint64_t)qword_1000EC400);
  v26 = v49;
  v27 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v11 + 2))(v18, a1, v49);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    aBlock = v46;
    *(_DWORD *)v30 = 136315138;
    v44 = (char *)(v30 + 4);
    v45 = (void (**)(char *, uint64_t))v11;
    ICObjectReferences.identifier.getter(v26);
    v31 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v32 = v48;
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v48, v31);
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v32);
    v54 = sub_10005F12C(v33, v35, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v44, v30 + 12);
    swift_bridgeObjectRelease(v35);
    v45[1](v18, v26);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Object to be previewed does not exist {url: %s}", v30, 0xCu);
    v36 = v46;
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    (*((void (**)(char *, uint64_t))v11 + 1))(v18, v26);
  }

  v37 = sub_1000360B4();
  v38 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v37, 0, 0);
  *v39 = 4;
  swift_errorRetain(v38);
  v51(v38, 1);
  swift_errorRelease(v38);
  swift_errorRelease(v38);
  v40 = objc_msgSend(objc_allocWithZone((Class)NSProgress), "init");
  swift_release(v52, v41);
  return v40;
}

void sub_100062684(void *a1, char a2)
{
  uint64_t v2;

  sub_10003227C(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_100062694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100030EE4(&qword_1000EC320);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16), v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10006270C(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_100030EE4(&qword_1000EC320) - 8) + 80);
  sub_10005E4CC(a1, v4, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_100062764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_100030EE4(&qword_1000EC320);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v7), v9);
  swift_release(*(_QWORD *)(v0 + v8 + 8), v10);
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_100062808(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_100030EE4(&qword_1000EC320) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10005E92C(a1, v1 + v4, *(void **)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100062878(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

char *sub_1000628CC(uint64_t a1, char *a2, int a3, uint64_t a4, int *a5, double a6)
{
  char *v6;
  char *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t ObjectType;
  char *v31;
  char *result;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  Class isa;
  int *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  Class v48;
  char *v49;
  NSString v50;
  char *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  char *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  NSString v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  Class v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int *v79;
  char *v80;

  v79 = a5;
  v7 = v6;
  v78 = a4;
  LODWORD(v77) = a3;
  v76 = a2;
  v10 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v10);
  v75 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100030EE4(&qword_1000EBA10);
  v13 = __chkstk_darwin(v12);
  v74 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v71 - v15;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v71 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v71 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v71 - v28;
  ObjectType = swift_getObjectType(a1);
  v31 = v80;
  result = (char *)(*((uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, int *, uint64_t, double))v76 + 5))(*((_QWORD *)v7 + 1), *((_QWORD *)v7 + 2), (unsigned __int16)v77 & 0x101, v78, v79, ObjectType, a6);
  if (!v31)
  {
    v80 = result;
    v72 = v16;
    v73 = v27;
    v33 = v18;
    v76 = v21;
    v77 = v24;
    v78 = 0;
    if (*((_QWORD *)v7 + 9))
      v34 = String._bridgeToObjectiveC()();
    else
      v34 = 0;
    v35 = v17;
    v36 = v80;
    objc_msgSend(v80, "setTypeUTI:", v34);

    v79 = (int *)type metadata accessor for ICAttachmentArchiveModel(0);
    v37 = (uint64_t)v72;
    sub_100031044((uint64_t)&v7[v79[12]], (uint64_t)v72, &qword_1000EBA10);
    v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
    v39 = v38(v37, 1, v35);
    v80 = v7;
    v40 = v73;
    if (v39 == 1)
    {
      Date.init()();
      sub_100036060(v37, &qword_1000EBA10);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v73, v37, v35);
    }
    static Date.+ infix(_:_:)(v40, a6);
    v41 = *(void (**)(char *, uint64_t))(v33 + 8);
    v41(v40, v35);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v41(v29, v35);
    objc_msgSend(v36, "setCreationDate:", isa);

    v43 = v79;
    v44 = v74;
    sub_100031044((uint64_t)&v80[v79[13]], v74, &qword_1000EBA10);
    if (v38(v44, 1, v35) == 1)
    {
      v45 = v76;
      Date.init()();
      sub_100036060(v44, &qword_1000EBA10);
    }
    else
    {
      v45 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v76, v44, v35);
    }
    v46 = (uint64_t)v75;
    v47 = v77;
    static Date.+ infix(_:_:)(v45, a6);
    v41(v45, v35);
    v48 = Date._bridgeToObjectiveC()().super.isa;
    v41(v47, v35);
    objc_msgSend(v36, "setModificationDate:", v48);

    v49 = v80;
    if (*(_QWORD *)&v80[v43[15] + 8])
      v50 = String._bridgeToObjectiveC()();
    else
      v50 = 0;
    objc_msgSend(v36, "setTitle:", v50);

    v51 = &v49[v43[16]];
    v52 = 0.0;
    v53 = 0.0;
    v54 = 0.0;
    v55 = 0.0;
    if ((v51[32] & 1) == 0)
    {
      v52 = *((double *)v51 + 2);
      v53 = *((double *)v51 + 3);
      v54 = *(double *)v51;
      v55 = *((double *)v51 + 1);
    }
    objc_msgSend(v36, "setBounds:", v54, v55, v52, v53);
    v56 = &v49[v43[17]];
    if ((v56[64] & 1) == 0)
    {
      v58 = *((double *)v56 + 6);
      v57 = *((double *)v56 + 7);
      v60 = *((double *)v56 + 4);
      v59 = *((double *)v56 + 5);
      v62 = *((double *)v56 + 2);
      v61 = *((double *)v56 + 3);
      v63 = *((double *)v56 + 1);
      objc_msgSend(v36, "setCroppingQuadTopLeftX:", *(double *)v56);
      objc_msgSend(v36, "setCroppingQuadTopLeftY:", v63);
      objc_msgSend(v36, "setCroppingQuadTopRightX:", v62);
      objc_msgSend(v36, "setCroppingQuadTopRightY:", v61);
      objc_msgSend(v36, "setCroppingQuadBottomRightX:", v60);
      objc_msgSend(v36, "setCroppingQuadBottomRightY:", v59);
      objc_msgSend(v36, "setCroppingQuadBottomLeftX:", v58);
      objc_msgSend(v36, "setCroppingQuadBottomLeftY:", v57);
    }
    objc_msgSend(v36, "setOrientation:", word_1000B5E36[v49[v43[18]]]);
    objc_msgSend(v36, "setImageFilterType:", word_1000B5E40[v49[v43[19]]]);
    sub_100031044((uint64_t)&v49[v43[20]], v46, (uint64_t *)&unk_1000EC2E0);
    v64 = type metadata accessor for URL(0);
    v65 = *(_QWORD *)(v64 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v46, 1, v64) == 1)
    {
      sub_100036060(v46, (uint64_t *)&unk_1000EC2E0);
      v66 = 0;
    }
    else
    {
      URL.absoluteString.getter();
      v68 = v67;
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v46, v64);
      v66 = String._bridgeToObjectiveC()();
      v49 = v80;
      swift_bridgeObjectRelease(v68);
    }
    objc_msgSend(v36, "setUrlString:", v66);

    v69 = v79;
    if (*(_QWORD *)&v49[v79[21] + 8] >> 60 == 15)
      v70 = 0;
    else
      v70 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v36, "setSynapseData:", v70);

    __asm { BR              X10 }
  }
  return result;
}

void sub_100062F3C(void *a1, int64_t a2, void *a3, char *a4, char *a5, int a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t i;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  id v49;
  Class isa;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  id k;
  id v58;
  unint64_t v59;
  id m;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *ObjectType;
  id v83;
  uint64_t v84;
  unint64_t v85;
  id v86;
  id v87;
  char *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  id v94;
  void *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  id v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  id v134;
  void *v135;
  uint64_t v136;
  id v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  _BOOL4 v150;
  id v151;
  unsigned int v152;
  id v153;
  Class v154;
  id v155;
  char v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  __int128 v160;
  id v161;
  unint64_t v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  uint64_t j;
  id v175;
  void *v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  id v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  unint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  int64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  _QWORD v207[3];
  char v208[8];
  uint64_t v209[3];
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  char v215;

  v199 = a8;
  v198 = a7;
  LODWORD(v197) = a6;
  v202 = a4;
  v203 = a5;
  v205 = a3;
  v201 = a2;
  v204 = type metadata accessor for URL(0);
  v200 = *(_QWORD *)(v204 - 8);
  v11 = __chkstk_darwin(v204);
  v13 = (char *)&v179 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v179 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v179 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (unint64_t)&v179 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v179 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v179 - v26;
  v28 = objc_msgSend(a1, "attachmentModel");
  v29 = objc_opt_self(ICAttachmentGalleryModel);
  v30 = swift_dynamicCastObjCClass(v28, v29);
  if (v30)
  {
    v31 = (_QWORD *)v30;
    v22 = (unint64_t)v28;
    v32 = objc_msgSend(a1, "managedObjectContext");
    if (v32)
    {
      v33 = (unint64_t)v32;
      v34 = *(_QWORD *)(v193 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 100));
      if (!v34)
        goto LABEL_103;
      v35 = (uint64_t)v205;
      swift_bridgeObjectRetain(v205);
      v36 = swift_bridgeObjectRetain(v34);
      v37 = v194;
      v38 = (uint64_t)sub_100067958(v36, v35);
      v194 = v37;
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v35);
      if ((unint64_t)v38 >> 62)
      {
LABEL_98:
        if (v38 < 0)
          v165 = v38;
        else
          v165 = v38 & 0xFFFFFFFFFFFFFF8;
        v40 = (void *)v22;
        v166 = (id)v22;
        swift_bridgeObjectRetain(v38);
        v39 = _CocoaArrayWrapper.endIndex.getter(v165);
        if (v39)
          goto LABEL_6;
      }
      else
      {
        v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
        v40 = (void *)v22;
        v41 = (id)v22;
        swift_bridgeObjectRetain(v38);
        if (v39)
        {
LABEL_6:
          if (v39 < 1)
          {
LABEL_118:
            __break(1u);
LABEL_119:
            swift_once(&qword_1000EB6A0, sub_100064EC8);
LABEL_76:
            v140 = type metadata accessor for Logger(0);
            sub_10003609C(v140, (uint64_t)qword_1000EC510);
            swift_errorRetain(v33);
            v141 = swift_errorRetain(v33);
            v142 = Logger.logObject.getter(v141);
            v143 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v142, v143))
            {
              v144 = (uint8_t *)swift_slowAlloc(12, -1);
              v145 = swift_slowAlloc(32, -1);
              v209[0] = v145;
              *(_DWORD *)v144 = 136315138;
              swift_getErrorValue(v33, v208, v207);
              v146 = Error.localizedDescription.getter(v207[1], v207[2]);
              v148 = v147;
              v206 = sub_10005F12C(v146, v147, v209);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, v207, v144 + 4, v144 + 12);
              swift_bridgeObjectRelease(v148);
              swift_errorRelease(v33);
              swift_errorRelease(v33);
              _os_log_impl((void *)&_mh_execute_header, v142, v143, "Cannot import paper attachment database and assets â€” skipping {error: %s}", v144, 0xCu);
              swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v145, -1, -1);
              swift_slowDealloc(v144, -1, -1);

              swift_errorRelease(v33);
            }
            else
            {
              swift_errorRelease(v33);
              swift_errorRelease(v33);
              swift_errorRelease(v33);

            }
            return;
          }
          for (i = 0; i != v39; ++i)
          {
            if ((v38 & 0xC000000000000001) != 0)
              v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v38);
            else
              v43 = *(id *)(v38 + 8 * i + 32);
            v44 = v43;
            objc_msgSend(v31, "addSubAttachment:", v43);

          }
        }
      }
      v22 = (unint64_t)v40;

      swift_bridgeObjectRelease_n(v38, 2);
LABEL_103:
      objc_msgSend(v31, "writeMergeableData");
      v167 = swift_bridgeObjectRetain(v205);
      v168 = v194;
      sub_100066D04(v167, v169);
      v171 = v170;
      v194 = v168;
      if ((unint64_t)v170 >> 62)
      {
        if (v170 < 0)
          v177 = v170;
        else
          v177 = v170 & 0xFFFFFFFFFFFFFF8;
        v178 = (id)v33;
        swift_bridgeObjectRetain(v171);
        v172 = _CocoaArrayWrapper.endIndex.getter(v177);
        if (v172)
          goto LABEL_105;
      }
      else
      {
        v172 = *(_QWORD *)((v170 & 0xFFFFFFFFFFFFF8) + 0x10);
        v173 = (id)v33;
        swift_bridgeObjectRetain(v171);
        if (v172)
        {
LABEL_105:
          if (v172 >= 1)
          {
            for (j = 0; j != v172; ++j)
            {
              if ((v171 & 0xC000000000000001) != 0)
                v175 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v171);
              else
                v175 = *(id *)(v171 + 8 * j + 32);
              v176 = v175;
              objc_msgSend((id)v33, "deleteObject:", v175);

            }
            goto LABEL_115;
          }
          __break(1u);
          goto LABEL_118;
        }
      }
LABEL_115:

      swift_bridgeObjectRelease_n(v171, 2);
      return;
    }
    goto LABEL_123;
  }
  v190 = v25;
  v191 = v19;
  v188 = v16;
  v205 = a1;
  v187 = v13;
  v195 = v27;
  v196 = v22;
  v45 = v204;
  v46 = objc_opt_self(ICAttachmentPaperBundleModel);
  v192 = (id)swift_dynamicCastObjCClass(v28, v46);
  if (v192)
  {
    v47 = *(_QWORD *)(v193 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 56) + 8);
    v48 = v205;
    v189 = v28;
    v49 = v28;
    if (v47 >> 60 == 15)
      isa = 0;
    else
      isa = Data._bridgeToObjectiveC()().super.isa;
    v67 = v195;
    v68 = v190;
    objc_msgSend(v48, "setMergeableData:", isa);

    v69 = v192;
    v70 = objc_msgSend(v192, "paperBundleDatabaseSubdirectoryURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v70);

    v72 = URL.lastPathComponent.getter(v71);
    v74 = v73;
    v75 = *(void (**)(char *, uint64_t))(v200 + 8);
    v75(v68, v45);
    URL.appendingPathComponent(_:isDirectory:)(v72, v74, 0);
    swift_bridgeObjectRelease(v74);
    v76 = objc_msgSend(v69, "paperBundleAssetsSubdirectoryURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v76);

    v78 = URL.lastPathComponent.getter(v77);
    v80 = v79;
    v75(v68, v45);
    v81 = v196;
    URL.appendingPathComponent(_:isDirectory:)(v78, v80, 0);
    swift_bridgeObjectRelease(v80);
    ObjectType = (void *)swift_getObjectType(v202);
    v83 = objc_msgSend(v69, "paperBundleURL");
    v84 = (uint64_t)v191;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v83);

    v85 = v194;
    v205 = ObjectType;
    dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v84, 1, ObjectType, v203);
    v33 = v85;
    if (!v85)
    {
      v75((char *)v84, v45);
      v86 = v192;
      v87 = objc_msgSend(v192, "paperBundleDatabaseSubdirectoryURL");
      v88 = v188;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v87);

      v89 = v205;
      dispatch thunk of ICFileManaging.copyItem(at:to:)(v67, v88, v205, v203);
      v75(v88, v45);
      v137 = objc_msgSend(v86, "paperBundleAssetsSubdirectoryURL");
      v138 = v187;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v137);

      v139 = v196;
      dispatch thunk of ICFileManaging.copyItem(at:to:)(v196, v138, v89, v203);
      v194 = 0;

      v75(v138, v45);
      v75((char *)v139, v45);
      v75(v195, v45);
      return;
    }
    v194 = 0;
    v75((char *)v84, v45);
    v75((char *)v81, v45);
    v75(v67, v45);
    if (qword_1000EB6A0 == -1)
      goto LABEL_76;
    goto LABEL_119;
  }
  v51 = objc_opt_self(ICAttachmentTableModel);
  v52 = swift_dynamicCastObjCClass(v28, v51);
  if (v52)
  {
    v53 = (void *)v52;
    v54 = type metadata accessor for ICAttachmentArchiveModel(0);
    if (!*(_QWORD *)(v193 + *(int *)(v54 + 92)))
      return;
    v183 = *(_QWORD **)(v193 + *(int *)(v54 + 92));
    v179 = v54;
    v180 = v28;
    v192 = v53;
    v55 = objc_msgSend(v53, "table");
    v56 = (unint64_t)objc_msgSend(v55, "rowCount");

    if ((v56 & 0x8000000000000000) != 0)
      goto LABEL_121;
    for (k = v192; v56; --v56)
    {
      v58 = objc_msgSend(k, "table");
      objc_msgSend(v58, "removeRowAtIndex:", 0);

    }
    v38 = (uint64_t)objc_msgSend(k, "table");
    v59 = (unint64_t)objc_msgSend((id)v38, "columnCount");

    if ((v59 & 0x8000000000000000) != 0)
    {
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    for (m = v192; v59; --v59)
    {
      v38 = (uint64_t)objc_msgSend(m, "table");
      objc_msgSend((id)v38, "removeColumnAtIndex:", 0);

    }
    v61 = objc_msgSend(m, "table");
    v31 = v183;

    v62 = objc_msgSend(m, "table");
    v63 = v62;
    v181 = v31[2];
    if (v181)
    {
      v64 = v31[4];
      v182 = v31 + 4;

      v184 = (unsigned __int16)v197 & 0x101;
      v65 = (char *)swift_bridgeObjectRetain(v183);
      v66 = 0;
      while (1)
      {
        if (v66 >= *((_QWORD *)v65 + 2))
        {
          __break(1u);
LABEL_121:
          __break(1u);
          goto LABEL_122;
        }
        v100 = v182[v66];
        v187 = *(char **)(v100 + 16);
        if (!v187)
          goto LABEL_33;
        v185 = v66;
        v188 = (char *)(v100 + 32);
        swift_bridgeObjectRetain(v100);
        v33 = 0;
        v186 = v100;
LABEL_37:
        if (v33 >= *(_QWORD *)(v100 + 16))
        {
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
        v101 = (uint64_t *)&v188[24 * v33];
        v102 = v101[1];
        v191 = (char *)*v101;
        v103 = v101[2];
        v197 = (_QWORD *)v102;
        swift_bridgeObjectRetain(v102);
        v196 = v103;
        swift_bridgeObjectRetain(v103);
        v195 = (char *)objc_msgSend(m, "attachment");
        if (!v195)
          goto LABEL_124;
        v190 = (char *)v33;
        v189 = (id)(v33 + 1);
        v104 = sub_10003018C((uint64_t)_swiftEmptyArrayStorage);
        sub_100030EE4(&qword_1000EBBC0);
        v65 = (char *)static _DictionaryStorage.copy(original:)(v104);
        v96 = v65;
        v38 = 0;
        v105 = 1 << *(_BYTE *)(v104 + 32);
        v204 = v104;
        v107 = *(_QWORD *)(v104 + 64);
        v33 = v104 + 64;
        v106 = v107;
        v200 = v33;
        if (v105 < 64)
          v108 = ~(-1 << v105);
        else
          v108 = -1;
        v93 = v108 & v106;
        v201 = (unint64_t)(v105 + 63) >> 6;
        v202 = v65 + 64;
        v203 = v65;
        if ((v108 & v106) != 0)
        {
LABEL_43:
          v109 = __clz(__rbit64(v93));
          v93 &= v93 - 1;
          v22 = v109 | (v38 << 6);
          goto LABEL_57;
        }
        while (1)
        {
          v110 = __OFADD__(v38++, 1);
          if (v110)
          {
            __break(1u);
            goto LABEL_95;
          }
          if (v38 >= v201)
          {
            m = v192;
            v112 = v199;
            v113 = v198;
            v31 = v197;
            v114 = v196;
            v115 = (uint64_t)v195;
            goto LABEL_72;
          }
          v111 = *(_QWORD *)(v200 + 8 * v38);
          v112 = v199;
          v113 = v198;
          v31 = v197;
          v114 = v196;
          v115 = (uint64_t)v195;
          if (!v111)
            break;
LABEL_56:
          v93 = (v111 - 1) & v111;
          v22 = __clz(__rbit64(v111)) + (v38 << 6);
LABEL_57:
          v117 = *(_QWORD *)(v204 + 56);
          v118 = *(_QWORD *)(v204 + 48) + 16 * v22;
          v33 = *(_QWORD *)(v118 + 8);
          v205 = *(id *)v118;
          v119 = *(void **)(v117 + 8 * v22);
          swift_bridgeObjectRetain(v33);
          v120 = objc_msgSend(v119, "identifier");
          if (v120)
          {
            v121 = v120;
            v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
            v124 = v123;

          }
          else
          {
            v122 = 0;
            v124 = 0xE000000000000000;
          }
          v125 = objc_msgSend(v119, "typeUTI");
          if (v125)
          {
            m = v125;
            v126 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
            v128 = v127;

          }
          else
          {
            v126 = 0;
            v128 = 0;
          }
          sub_100068128();
          v65 = (char *)ICTTAttachment.init(identifier:universalTypeIdentifier:)(v122, v124, v126, v128);
          v96 = v203;
          *(_QWORD *)&v202[(v22 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v22;
          v129 = (_QWORD *)(*((_QWORD *)v96 + 6) + 16 * v22);
          *v129 = v205;
          v129[1] = v33;
          *(_QWORD *)(*((_QWORD *)v96 + 7) + 8 * v22) = v65;
          v130 = *((_QWORD *)v96 + 2);
          v110 = __OFADD__(v130, 1);
          v131 = v130 + 1;
          if (v110)
          {
            __break(1u);
            goto LABEL_92;
          }
          *((_QWORD *)v96 + 2) = v131;
          if (v93)
            goto LABEL_43;
        }
        v116 = v38 + 1;
        if (v38 + 1 >= v201)
          goto LABEL_71;
        v111 = *(_QWORD *)(v200 + 8 * v116);
        if (v111)
          goto LABEL_55;
        v116 = v38 + 2;
        if (v38 + 2 >= v201)
          goto LABEL_71;
        v111 = *(_QWORD *)(v200 + 8 * v116);
        if (v111)
          goto LABEL_55;
        v116 = v38 + 3;
        if (v38 + 3 >= v201)
          goto LABEL_71;
        v111 = *(_QWORD *)(v200 + 8 * v116);
        if (v111)
          goto LABEL_55;
        v116 = v38 + 4;
        if (v38 + 4 < v201)
          break;
LABEL_71:
        m = v192;
LABEL_72:
        v132 = v194;
        v133 = (void *)v115;
        v134 = sub_1000872B8((uint64_t)v96, v115, (uint64_t)&off_1000DA7A0, v184, v113, v112, a9, (uint64_t)v191, (uint64_t)v31, v114);
        v194 = v132;
        if (v132)
        {
          swift_bridgeObjectRelease(v183);
          swift_bridgeObjectRelease(v186);
          v163 = v180;

          swift_bridgeObjectRelease(v204);
          swift_bridgeObjectRelease(v114);
          swift_bridgeObjectRelease(v31);
          swift_release(v96, v164);
          return;
        }
        v135 = v134;

        swift_bridgeObjectRelease(v204);
        swift_bridgeObjectRelease(v114);
        swift_bridgeObjectRelease(v31);
        swift_release(v96, v136);
        v31 = objc_msgSend(m, "table");
        objc_msgSend(v31, "setAttributedString:columnIndex:rowIndex:", v135, v190, v185);

        v33 = (unint64_t)v189;
        v100 = v186;
        if (v189 != v187)
          goto LABEL_37;
        swift_bridgeObjectRelease(v186);
        v65 = (char *)v183;
        v66 = v185;
LABEL_33:
        if (++v66 == v181)
        {
LABEL_95:
          swift_bridgeObjectRelease(v65);
          goto LABEL_80;
        }
      }
      v111 = *(_QWORD *)(v200 + 8 * v116);
      if (!v111)
      {
        while (1)
        {
          v38 = v116 + 1;
          if (__OFADD__(v116, 1))
            break;
          if (v38 >= v201)
            goto LABEL_71;
          v111 = *(_QWORD *)(v200 + 8 * v38);
          ++v116;
          if (v111)
            goto LABEL_56;
        }
        __break(1u);
        goto LABEL_97;
      }
LABEL_55:
      v38 = v116;
      goto LABEL_56;
    }

LABEL_80:
    v149 = *(unsigned __int8 *)(v193 + *(int *)(v179 + 96));
    if (v149 != 2)
    {
      v150 = (v149 & 1) == 0;
      v151 = objc_msgSend(m, "table");
      v152 = objc_msgSend(v151, "isRightToLeft");

      if (((v150 ^ v152) & 1) == 0)
      {
        v153 = objc_msgSend(m, "table");
        objc_msgSend(v153, "reverseColumnDirection");

      }
    }
    objc_msgSend(m, "writeMergeableData");

  }
  else
  {
    v90 = objc_opt_self(ICAttachmentAudioModel);
    v91 = swift_dynamicCastObjCClass(v28, v90);
    if (v91)
    {
      v92 = (void *)v91;
      v38 = (uint64_t)v28;
      v93 = (unint64_t)v92;
      v94 = objc_msgSend(v92, "audioDocument");
      if (v94)
      {
        v95 = v94;
        v96 = (char *)objc_msgSend(v94, "document");

        v97 = v193 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 112);
        v98 = *(_QWORD *)(v97 + 8);
        if (v98 == 1)
        {
          v99 = 0;
        }
        else
        {
          v156 = *(_BYTE *)(v97 + 72);
          v157 = *(_QWORD *)(v97 + 64);
          v158 = *(_DWORD *)(v97 + 56);
          v159 = *(_QWORD *)(v97 + 48);
          v209[1] = *(_QWORD *)v97;
          v209[2] = v98;
          v160 = *(_OWORD *)(v97 + 32);
          v210 = *(_OWORD *)(v97 + 16);
          v211 = v160;
          v212 = v159;
          v213 = v158 & 1;
          v214 = v157;
          v215 = v156;
          v161 = objc_msgSend(v92, "audioDocument");
          if (!v161)
          {
LABEL_126:
            __break(1u);
            return;
          }
          v126 = v161;
          v162 = v194;
          v65 = sub_100080DAC(v161, (uint64_t)v205, (uint64_t)&off_1000DA7A0, (unsigned __int16)v197 & 0x101, v198, v199, a9);
          v194 = v162;
          if (v162)
          {

            return;
          }
LABEL_92:
          v99 = v65;

        }
        objc_msgSend(v96, "setRootObject:", v99);

        swift_unknownObjectRelease(v99);
        objc_msgSend((id)v93, "writeMergeableData");

        return;
      }
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }

    v154 = 0;
    if (*(_QWORD *)(v193 + *(int *)(type metadata accessor for ICAttachmentArchiveModel(0) + 56) + 8) >> 60 != 15)
      v154 = Data._bridgeToObjectiveC()().super.isa;
    v155 = v205;
    objc_msgSend(v205, "setMergeableData:", v154);

    objc_msgSend(v155, "attachmentModel");
  }
}

void sub_1000642BC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _OWORD *v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unsigned int v61;
  unint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  id v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  id v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  id v112;
  void *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t *v119;
  __int128 v120;
  id v121;
  void *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  id v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  char *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[72];
  _OWORD v160[3];
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  char v164;
  CGRect v165;
  CGRect v166;

  *(_QWORD *)&v157 = a2;
  v5 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v5);
  v155 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000EBA10);
  v8 = __chkstk_darwin(v7);
  v150 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v138 - v10;
  *(_BYTE *)a3 = 4;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_WORD *)(a3 + 56) = 514;
  v12 = (int *)type metadata accessor for ICAttachmentArchiveModel(0);
  v13 = a3 + v12[12];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 56);
  v148 = v13;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(v13, 1, 1, v14);
  v149 = a3 + v12[13];
  v15();
  v16 = (uint64_t *)(a3 + v12[14]);
  v156 = xmmword_1000B5F20;
  v140 = v16;
  *(_OWORD *)v16 = xmmword_1000B5F20;
  v17 = (_QWORD *)(a3 + v12[15]);
  *v17 = 0;
  v17[1] = 0;
  *(_QWORD *)&v158 = v17;
  v18 = a3 + v12[16];
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_BYTE *)(v18 + 32) = 1;
  v19 = a3 + v12[17];
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_BYTE *)(v19 + 64) = 1;
  v151 = v12[18];
  *(_BYTE *)(a3 + v151) = 4;
  v152 = v12[19];
  *(_BYTE *)(a3 + v152) = 5;
  v20 = a3 + v12[20];
  v21 = type metadata accessor for URL(0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v153 = v20;
  v143 = v21;
  v142 = v22;
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v20, 1, 1);
  v154 = (uint64_t *)(a3 + v12[21]);
  *(_OWORD *)v154 = v156;
  v23 = a3 + v12[22];
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  v145 = (_QWORD *)v23;
  *(_BYTE *)(v23 + 16) = 1;
  v146 = v12[23];
  *(_QWORD *)(a3 + v146) = 0;
  v147 = v12[24];
  *(_BYTE *)(a3 + v147) = 2;
  v141 = v12[25];
  *(_QWORD *)(a3 + v141) = 0;
  v24 = (_QWORD *)(a3 + v12[26]);
  *v24 = 0;
  v24[1] = 0;
  *(_QWORD *)&v156 = v24;
  v144 = v12[27];
  *(_BYTE *)(a3 + v144) = 3;
  v25 = (_OWORD *)(a3 + v12[28]);
  *v25 = xmmword_1000B4D80;
  v25[1] = 0u;
  v25[2] = 0u;
  v25[3] = 0u;
  v139 = (uint64_t *)v25;
  *(_OWORD *)((char *)v25 + 57) = 0u;
  v26 = objc_msgSend(a1, "identifier");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0xE000000000000000;
  }
  *(_QWORD *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 16) = v30;
  v31 = objc_msgSend(a1, "typeUTI");
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  v36 = v157;
  *(_QWORD *)(a3 + 64) = v33;
  *(_QWORD *)(a3 + 72) = v35;
  v37 = a1;
  v38 = sub_1000676C8(v37);
  v40 = v39;

  *(_QWORD *)(a3 + 80) = v38;
  *(_QWORD *)(a3 + 88) = v40;
  v41 = objc_msgSend(v37, "creationDate");
  if (v41)
  {
    v42 = v41;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  v44 = (uint64_t)v150;
  v45 = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v15)(v11, v43, 1, v14);
  sub_10004EFD0((uint64_t)v11, v148, &qword_1000EBA10);
  v46 = objc_msgSend(v37, "modificationDate");
  if (v46)
  {
    v47 = v46;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v45 = 0;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(v44, v45, 1, v14);
  sub_10004EFD0(v44, v149, &qword_1000EBA10);
  v48 = objc_msgSend(v37, "title");
  if (v48)
  {
    v49 = v48;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v52 = v51;

  }
  else
  {
    v50 = 0;
    v52 = 0;
  }
  v53 = (uint64_t *)v158;
  swift_bridgeObjectRelease(*(_QWORD *)(v158 + 8));
  *v53 = v50;
  v53[1] = v52;
  objc_msgSend(v37, "bounds");
  v54 = 0;
  v166.origin.x = 0.0;
  v166.origin.y = 0.0;
  v166.size.width = 0.0;
  v166.size.height = 0.0;
  v55 = CGRectEqualToRect(v165, v166);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  if (!v55)
  {
    objc_msgSend(v37, "bounds");
    v54 = v59;
  }
  *(_QWORD *)v18 = v54;
  *(_QWORD *)(v18 + 8) = v56;
  *(_QWORD *)(v18 + 16) = v57;
  *(_QWORD *)(v18 + 24) = v58;
  *(_BYTE *)(v18 + 32) = v55;
  v60 = v37;
  sub_100067A84(v60, (uint64_t)v159);

  sub_100067C60((uint64_t)v159, v19);
  *(_BYTE *)(a3 + v151) = sub_100067CA8((int)objc_msgSend(v60, "orientation"));
  v61 = objc_msgSend(v60, "imageFilterType");
  v62 = 0x403020105uLL >> (8 * v61);
  if (v61 >= 5)
    LOBYTE(v62) = 5;
  *(_BYTE *)(a3 + v152) = v62;
  v63 = objc_msgSend(v60, "urlString");
  if (v63)
  {
    v64 = v63;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v67 = v66;

    swift_bridgeObjectRetain(v67);
    v68 = (uint64_t)v155;
    URL.init(string:)(v65, v67);
    swift_bridgeObjectRelease_n(v67, 2);
  }
  else
  {
    v68 = (uint64_t)v155;
    v142(v155, 1, 1, v143);
  }
  sub_10004EFD0(v68, v153, (uint64_t *)&unk_1000EC2E0);
  v69 = objc_msgSend(v60, "synapseData");
  if (v69)
  {
    v70 = v69;
    v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v73 = v72;

  }
  else
  {
    v71 = 0;
    v73 = 0xF000000000000000;
  }
  v74 = v154;
  sub_100048E78(*v154, v154[1]);
  *v74 = v71;
  v74[1] = v73;
  v75 = objc_msgSend(v60, "synapseBasedMetadata");
  v76 = v75;
  if (v75)
  {
    v77 = objc_msgSend(v75, "selectedText");

    if (v77)
    {
      v76 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      v79 = v78;

      goto LABEL_30;
    }
    v76 = 0;
  }
  v79 = 0;
LABEL_30:
  v80 = (_QWORD *)v156;
  swift_bridgeObjectRelease(*(_QWORD *)(v156 + 8));
  *v80 = v76;
  v80[1] = v79;
  v81 = objc_msgSend(v60, "mergeablePreferredViewSize");
  if (v81)
  {
    v82 = v81;
    v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v81);
    v85 = v84;

    sub_100040B10(v83, v85);
    v86 = sub_1000488E8((uint64_t)objc_msgSend(v60, "preferredViewSize"));
    *(_BYTE *)(a3 + v144) = v86;
  }
  v87 = objc_msgSend(v60, "location");
  if (v87)
  {
    v88 = v87;
    objc_msgSend(v87, "latitude");
    v90 = v89;
    objc_msgSend(v88, "longitude");
    v92 = v91;

    v93 = v145;
    *v145 = v90;
    v93[1] = v92;
    *((_BYTE *)v93 + 16) = 0;
  }
  v94 = objc_msgSend(v60, "tableModel");
  if (v94)
  {
    v95 = v94;
    v96 = sub_100067D94(v94, v36);
    v97 = v146;
    swift_bridgeObjectRelease(*(_QWORD *)(a3 + v146));
    *(_QWORD *)(a3 + v97) = v96;
    v98 = objc_msgSend(v95, "table");
    LOBYTE(v97) = objc_msgSend(v98, "isRightToLeft");

    sub_100048ED0((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
    *(_BYTE *)(a3 + v147) = v97;
    if ((*(_BYTE *)(v36 + 51) & 1) == 0)
    {
LABEL_36:

      return;
    }
  }
  else
  {
    v99 = objc_msgSend(v60, "attachmentModel");
    v100 = objc_opt_self(ICAttachmentGalleryModel);
    v101 = (void *)swift_dynamicCastObjCClass(v99, v100);
    if (v101)
    {
      v102 = objc_msgSend(v101, "subAttachmentIdentifiers");
      v103 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v102, &type metadata for String);

      v104 = v141;
      swift_bridgeObjectRelease(*(_QWORD *)(a3 + v141));
      sub_100048ED0((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
      *(_QWORD *)(a3 + v104) = v103;
      if ((*(_BYTE *)(v36 + 51) & 1) == 0)
        goto LABEL_36;
    }
    else
    {

      v110 = objc_msgSend(v60, "audioModel");
      if (!v110)
        goto LABEL_58;
      v111 = v110;
      v112 = objc_msgSend(v110, "audioDocument");

      if (!v112)
      {
        __break(1u);
        return;
      }
      v113 = (void *)ICTTAudioDocument.root.getter();

      if (v113)
      {
        v114 = v60;
        sub_100048ED0((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048F08);
        sub_100082F50(v113, v114, (_QWORD *)v36, (uint64_t)v160);
        v158 = v160[0];
        v157 = v160[1];
        v156 = v160[2];
        v115 = v161;
        v116 = v162;
        v117 = v163;
        v118 = v164;
        v119 = v139;
        sub_100067F2C(*v139, v139[1], v139[2], v139[3], v139[4], v139[5], v139[6], v139[7], v139[8]);
        sub_100048ED0((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
        v120 = v157;
        *(_OWORD *)v119 = v158;
        *((_OWORD *)v119 + 1) = v120;
        *((_OWORD *)v119 + 2) = v156;
        v119[6] = v115;
        v119[7] = v116;
        v119[8] = v117;
        *((_BYTE *)v119 + 72) = v118;
        if ((*(_BYTE *)(v36 + 51) & 1) == 0)
          goto LABEL_36;
      }
      else
      {
LABEL_58:
        v132 = objc_msgSend(v60, "mergeableData");
        if (v132)
        {
          v133 = v132;
          v134 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v132);
          v136 = v135;

        }
        else
        {
          v134 = 0;
          v136 = 0xF000000000000000;
        }
        v137 = v140;
        sub_100048E78(*v140, v140[1]);
        sub_100048ED0((_QWORD *)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
        *v137 = v134;
        v137[1] = v136;
        if ((*(_BYTE *)(v36 + 51) & 1) == 0)
          goto LABEL_36;
      }
    }
  }
  v105 = objc_msgSend(v60, "note");
  v106 = v105;
  if (v105)
  {
    v107 = objc_msgSend(v105, "identifier");

    if (v107)
    {
      v106 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      v109 = v108;

      goto LABEL_49;
    }
    v106 = 0;
  }
  v109 = 0;
LABEL_49:
  swift_bridgeObjectRelease(*(_QWORD *)(a3 + 32));
  *(_QWORD *)(a3 + 24) = v106;
  *(_QWORD *)(a3 + 32) = v109;
  v121 = objc_msgSend(v60, "note");
  v122 = v121;
  if (!v121)
  {
LABEL_53:
    v125 = 0;
    goto LABEL_54;
  }
  v123 = objc_msgSend(v121, "title");

  if (!v123)
  {
    v122 = 0;
    goto LABEL_53;
  }
  v122 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
  v125 = v124;

LABEL_54:
  swift_bridgeObjectRelease(*(_QWORD *)(a3 + 48));
  *(_QWORD *)(a3 + 40) = v122;
  *(_QWORD *)(a3 + 48) = v125;
  v126 = objc_msgSend(v60, "title");
  if (v126)
  {
    v127 = v126;
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
    v130 = v129;

  }
  else
  {
    v128 = 0;
    v130 = 0;
  }
  swift_bridgeObjectRelease(v53[1]);
  *v53 = v128;
  v53[1] = v130;
  *(_BYTE *)(a3 + 56) = objc_msgSend(v60, "markedForDeletion");
  v131 = objc_msgSend(v60, "isPasswordProtected");

  *(_BYTE *)(a3 + 57) = v131;
}

uint64_t type metadata accessor for ICAttachmentArchiveModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EC588;
  if (!qword_1000EC588)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ICAttachmentArchiveModel);
  return result;
}

uint64_t sub_100064EC8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000EC510);
  sub_10003609C(v0, (uint64_t)qword_1000EC510);
  return static Logger.archiving.getter();
}

uint64_t sub_100064F10(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100064F4C + 4 * byte_1000B5584[a1]))(0xD000000000000010, 0x80000001000B0770);
}

uint64_t sub_100064F4C()
{
  return 0x6E65644965707974;
}

uint64_t sub_100064F70()
{
  return 0x696669746E656469;
}

uint64_t sub_100064F90()
{
  return 0x6954746E65726170;
}

unint64_t sub_100064FB0()
{
  return 0xD000000000000013;
}

uint64_t sub_100064FD8()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_1000651A0()
{
  return 0x6365526F69647561;
}

uint64_t sub_1000651C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  char v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 *v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  char v75;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000EC660);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10006A014();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.CodingKeys, &type metadata for ICAttachmentArchiveModel.CodingKeys, v11, v9, v10);
  LOBYTE(v69) = *(_BYTE *)v3;
  v75 = 0;
  v12 = sub_10004B5D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    LOBYTE(v69) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v69, v5);
    v15 = *(_QWORD *)(v3 + 24);
    v16 = *(_QWORD *)(v3 + 32);
    LOBYTE(v69) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v69, v5);
    v17 = *(_QWORD *)(v3 + 40);
    v18 = *(_QWORD *)(v3 + 48);
    LOBYTE(v69) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v69, v5);
    v19 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v69) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v69, v5);
    v20 = *(unsigned __int8 *)(v3 + 57);
    LOBYTE(v69) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v69, v5);
    v21 = *(_QWORD *)(v3 + 64);
    v22 = *(_QWORD *)(v3 + 72);
    LOBYTE(v69) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v69, v5);
    v23 = *(_QWORD *)(v3 + 80);
    v24 = *(_QWORD *)(v3 + 88);
    LOBYTE(v69) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v69, v5);
    v25 = (int *)type metadata accessor for ICAttachmentArchiveModel(0);
    v26 = v3 + v25[12];
    LOBYTE(v69) = 8;
    v27 = type metadata accessor for Date(0);
    v28 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v69, v5, v27, v28);
    v29 = v3 + v25[13];
    LOBYTE(v69) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v69, v5, v27, v28);
    v69 = *(_OWORD *)(v3 + v25[14]);
    v75 = 10;
    v30 = sub_100051C28();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for Data, v30);
    v31 = (uint64_t *)(v3 + v25[15]);
    v32 = *v31;
    v33 = v31[1];
    LOBYTE(v69) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v69, v5);
    v34 = (__int128 *)(v3 + v25[16]);
    v35 = *((_BYTE *)v34 + 32);
    v36 = v34[1];
    v69 = *v34;
    v70 = v36;
    LOBYTE(v71) = v35;
    v75 = 12;
    type metadata accessor for CGRect(0);
    v38 = v37;
    v39 = sub_100042114(&qword_1000EC670, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, v38, v39);
    v40 = (__int128 *)(v3 + v25[17]);
    v41 = *((_BYTE *)v40 + 64);
    v42 = v40[1];
    v69 = *v40;
    v70 = v42;
    v43 = v40[3];
    v71 = v40[2];
    v72 = v43;
    LOBYTE(v73) = v41;
    v75 = 13;
    v44 = sub_10006A058();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICAttachmentArchiveModel.Cropping, v44);
    LOBYTE(v69) = *(_BYTE *)(v3 + v25[18]);
    v75 = 14;
    v45 = sub_10006A09C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICAttachmentArchiveModel.Orientations, v45);
    LOBYTE(v69) = *(_BYTE *)(v3 + v25[19]);
    v75 = 15;
    v46 = sub_10006A0E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICAttachmentArchiveModel.ImageFilters, v46);
    v47 = v3 + v25[20];
    LOBYTE(v69) = 16;
    v48 = type metadata accessor for URL(0);
    v49 = sub_100042114(&qword_1000EC690, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v47, &v69, v5, v48, v49);
    v69 = *(_OWORD *)(v3 + v25[21]);
    v75 = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for Data, v30);
    v50 = (__int128 *)(v3 + v25[22]);
    v51 = *((_BYTE *)v50 + 16);
    v69 = *v50;
    LOBYTE(v70) = v51;
    v75 = 18;
    v52 = sub_10006A124();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICAttachmentArchiveModel.Coordinate, v52);
    *(_QWORD *)&v69 = *(_QWORD *)(v3 + v25[23]);
    v75 = 19;
    v53 = sub_100030EE4(&qword_1000EC6A0);
    v54 = sub_10006A18C(&qword_1000EC6A8, &qword_1000EC6A0, (void (*)(void))sub_10006A168, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, v53, v54);
    v55 = *(unsigned __int8 *)(v3 + v25[24]);
    LOBYTE(v69) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v55, &v69, v5);
    *(_QWORD *)&v69 = *(_QWORD *)(v3 + v25[25]);
    v75 = 21;
    v56 = sub_100030EE4(&qword_1000EC0F8);
    v57 = sub_1000536E4(&qword_1000EC128, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, v56, v57);
    v58 = (uint64_t *)(v3 + v25[26]);
    v59 = *v58;
    v60 = v58[1];
    LOBYTE(v69) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v59, v60, &v69, v5);
    LOBYTE(v69) = *(_BYTE *)(v3 + v25[27]);
    v75 = 23;
    v61 = sub_10004B6A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &type metadata for ICNoteArchiveModel.AttachmentViewTypes, v61);
    v62 = (__int128 *)(v3 + v25[28]);
    v63 = *((_QWORD *)v62 + 8);
    v64 = *((_BYTE *)v62 + 72);
    v65 = v62[1];
    v69 = *v62;
    v70 = v65;
    v66 = v62[3];
    v71 = v62[2];
    v72 = v66;
    v73 = v63;
    v74 = v64;
    v75 = 24;
    v67 = sub_10006A1F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v69, &v75, v5, &_s14descr1000D9B91O14AudioRecordingVN, v67);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10006591C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(void);
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  char *v57;
  char v58;
  __int128 v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _QWORD *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  char v121;

  v114 = a1;
  v94 = a2;
  v2 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v2);
  v93 = (uint64_t)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100030EE4(&qword_1000EBA10);
  v5 = __chkstk_darwin(v4);
  v96 = (uint64_t)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v98 = (char *)&v87 - v7;
  v100 = sub_100030EE4(&qword_1000EC6C0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  *(_QWORD *)&v113 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for ICAttachmentArchiveModel(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v12 = 4;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *((_WORD *)v12 + 28) = 514;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  v13 = &v12[*(int *)(v10 + 48)];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 56);
  *(_QWORD *)&v112 = v13;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v15)(v13, 1, 1, v14);
  *(_QWORD *)&v110 = &v12[v9[13]];
  v97 = v14;
  v15();
  v16 = &v12[v9[14]];
  v111 = xmmword_1000B5F20;
  *(_QWORD *)&v109 = v16;
  *(_OWORD *)v16 = xmmword_1000B5F20;
  v17 = &v12[v9[15]];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v108 = v17;
  v18 = &v12[v9[16]];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  v18[32] = 1;
  v19 = &v12[v9[17]];
  *((_OWORD *)v19 + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  v19[64] = 1;
  v95 = v9[18];
  v12[v95] = 4;
  v92 = v9[19];
  v12[v92] = 5;
  v20 = (uint64_t)&v12[v9[20]];
  v21 = type metadata accessor for URL(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v107 = v20;
  v22(v20, 1, 1, v21);
  v106 = &v12[v9[21]];
  *(_OWORD *)v106 = v111;
  v23 = &v12[v9[22]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v105 = v9[23];
  *(_QWORD *)&v12[v105] = 0;
  v24 = v9[24];
  v12[v24] = 2;
  v103 = v9[25];
  *(_QWORD *)&v12[v103] = 0;
  v25 = &v12[v9[26]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v104 = v25;
  v26 = v9[27];
  v12[v26] = 3;
  v27 = v9[28];
  *(_QWORD *)&v111 = v12;
  v28 = &v12[v27];
  *(_OWORD *)v28 = xmmword_1000B4D80;
  *((_OWORD *)v28 + 1) = 0u;
  *((_OWORD *)v28 + 2) = 0u;
  *((_OWORD *)v28 + 3) = 0u;
  v102 = (uint64_t *)&v12[v27];
  *(_OWORD *)(v28 + 57) = 0u;
  v30 = v114[3];
  v29 = v114[4];
  sub_10004242C(v114, v30);
  v31 = sub_10006A014();
  v32 = v101;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.CodingKeys, &type metadata for ICAttachmentArchiveModel.CodingKeys, v31, v30, v29);
  if (v32)
  {
    v36 = (_QWORD *)v111;
    sub_100035424(v114);
    v37 = v102;
    swift_bridgeObjectRelease(v36[4]);
    swift_bridgeObjectRelease(v36[6]);
    swift_bridgeObjectRelease(v36[9]);
    swift_bridgeObjectRelease(v36[11]);
    sub_100036060(v112, &qword_1000EBA10);
    sub_100036060(v110, &qword_1000EBA10);
    sub_100048E78(*(_QWORD *)v109, *(_QWORD *)(v109 + 8));
    swift_bridgeObjectRelease(*((_QWORD *)v108 + 1));
    sub_100036060(v107, (uint64_t *)&unk_1000EC2E0);
    sub_100048E78(*(_QWORD *)v106, *((_QWORD *)v106 + 1));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v36 + v105));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v36 + v103));
    swift_bridgeObjectRelease(*((_QWORD *)v104 + 1));
    return sub_100067F2C(*v37, v37[1], v37[2], v37[3], v37[4], v37[5], v37[6], v37[7], v37[8]);
  }
  else
  {
    v101 = v18;
    v91 = v19;
    v88 = v23;
    v89 = v24;
    v90 = v26;
    v33 = v99;
    v121 = 0;
    v34 = sub_1000312F0();
    v35 = v100;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v115, &type metadata for ICArchiveModels, &v121, v100, &type metadata for ICArchiveModels, v34);
    v38 = v111;
    *(_BYTE *)v111 = v115;
    LOBYTE(v115) = 1;
    *(_QWORD *)(v38 + 8) = KeyedDecodingContainer.decode(_:forKey:)(&v115, v35);
    *(_QWORD *)(v38 + 16) = v39;
    LOBYTE(v115) = 2;
    *(_QWORD *)(v38 + 24) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v35);
    *(_QWORD *)(v38 + 32) = v40;
    LOBYTE(v115) = 3;
    *(_QWORD *)(v38 + 40) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v35);
    *(_QWORD *)(v38 + 48) = v41;
    LOBYTE(v115) = 4;
    *(_BYTE *)(v38 + 56) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v35);
    LOBYTE(v115) = 5;
    *(_BYTE *)(v38 + 57) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v35);
    LOBYTE(v115) = 6;
    *(_QWORD *)(v38 + 64) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v35);
    *(_QWORD *)(v38 + 72) = v42;
    LOBYTE(v115) = 7;
    *(_QWORD *)(v38 + 80) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v35);
    *(_QWORD *)(v38 + 88) = v43;
    LOBYTE(v115) = 8;
    v44 = sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v45 = (uint64_t)v98;
    v46 = v97;
    v87 = v44;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v97, &v115, v35, v97);
    sub_10004EFD0(v45, v112, &qword_1000EBA10);
    LOBYTE(v115) = 9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v46, &v115, v35, v46);
    sub_10004EFD0(v96, v110, &qword_1000EBA10);
    v121 = 10;
    sub_100051B64();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v121, v100, &type metadata for Data);
    v47 = v115;
    v48 = (_OWORD *)v109;
    sub_100048E78(*(_QWORD *)v109, *(_QWORD *)(v109 + 8));
    *v48 = v47;
    LOBYTE(v115) = 11;
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v100);
    v51 = v50;
    v52 = (uint64_t *)v108;
    swift_bridgeObjectRelease(*((_QWORD *)v108 + 1));
    *v52 = v49;
    v52[1] = v51;
    type metadata accessor for CGRect(0);
    v54 = v53;
    v121 = 12;
    sub_100042114(&qword_1000EC6C8, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v54, &v121, v100, v54);
    v55 = v117;
    v56 = v116;
    v57 = v101;
    *(_OWORD *)v101 = v115;
    *((_OWORD *)v57 + 1) = v56;
    v57[32] = v55;
    v121 = 13;
    sub_10006A234();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAttachmentArchiveModel.Cropping, &v121, v100, &type metadata for ICAttachmentArchiveModel.Cropping);
    v58 = v119;
    v59 = v116;
    v60 = v91;
    *(_OWORD *)v91 = v115;
    *((_OWORD *)v60 + 1) = v59;
    v61 = v118;
    *((_OWORD *)v60 + 2) = v117;
    *((_OWORD *)v60 + 3) = v61;
    v60[64] = v58;
    v121 = 14;
    sub_10006A278();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAttachmentArchiveModel.Orientations, &v121, v100, &type metadata for ICAttachmentArchiveModel.Orientations);
    *(_BYTE *)(v111 + v95) = v115;
    v121 = 15;
    sub_10006A2BC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAttachmentArchiveModel.ImageFilters, &v121, v100, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    *(_BYTE *)(v111 + v92) = v115;
    LOBYTE(v115) = 16;
    sub_100042114(&qword_1000EC6E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v115, v100, v21);
    sub_10004EFD0(v93, v107, (uint64_t *)&unk_1000EC2E0);
    v121 = 17;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v121, v100, &type metadata for Data);
    v62 = v115;
    v63 = v106;
    sub_100048E78(*(_QWORD *)v106, *((_QWORD *)v106 + 1));
    *(_OWORD *)v63 = v62;
    v121 = 18;
    sub_10006A300();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICAttachmentArchiveModel.Coordinate, &v121, v100, &type metadata for ICAttachmentArchiveModel.Coordinate);
    v64 = v116;
    v65 = v88;
    *(_OWORD *)v88 = v115;
    v65[16] = v64;
    v66 = sub_100030EE4(&qword_1000EC6A0);
    v121 = 19;
    sub_10006A18C(&qword_1000EC6F8, &qword_1000EC6A0, (void (*)(void))sub_10006A344, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v66, &v121, v100, v66);
    v67 = v115;
    v68 = v105;
    v69 = v111;
    swift_bridgeObjectRelease(*(_QWORD *)(v111 + v105));
    *(_QWORD *)(v69 + v68) = v67;
    LOBYTE(v115) = 20;
    v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v100);
    *(_BYTE *)(v111 + v89) = v70;
    v71 = sub_100030EE4(&qword_1000EC0F8);
    v121 = 21;
    sub_1000536E4(&qword_1000EC100, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v71, &v121, v100, v71);
    v72 = v115;
    v73 = v103;
    v74 = v111;
    swift_bridgeObjectRelease(*(_QWORD *)(v111 + v103));
    *(_QWORD *)(v74 + v73) = v72;
    LOBYTE(v115) = 22;
    v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v115, v100);
    v77 = v76;
    v78 = (uint64_t *)v104;
    swift_bridgeObjectRelease(*((_QWORD *)v104 + 1));
    *v78 = v75;
    v78[1] = v77;
    v121 = 23;
    sub_10004B87C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICNoteArchiveModel.AttachmentViewTypes, &v121, v100, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    *(_BYTE *)(v111 + v90) = v115;
    v121 = 24;
    sub_10006A368();
    v79 = v100;
    v80 = v113;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14descr1000D9B91O14AudioRecordingVN, &v121, v100, &_s14descr1000D9B91O14AudioRecordingVN);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v80, v79);
    v112 = v116;
    v113 = v115;
    v110 = v117;
    v109 = v118;
    v81 = v119;
    LOBYTE(v79) = v120;
    v82 = v102;
    sub_100067F2C(*v102, v102[1], v102[2], v102[3], v102[4], v102[5], v102[6], v102[7], v102[8]);
    v83 = v112;
    *(_OWORD *)v82 = v113;
    *((_OWORD *)v82 + 1) = v83;
    v84 = v109;
    *((_OWORD *)v82 + 2) = v110;
    *((_OWORD *)v82 + 3) = v84;
    v82[8] = v81;
    *((_BYTE *)v82 + 72) = v79;
    v85 = v111;
    sub_10006A3AC(v111, v94);
    sub_100035424(v114);
    return sub_10006A3F0(v85);
  }
}

uint64_t sub_100066698()
{
  unsigned __int8 *v0;

  return sub_100064F10(*v0);
}

uint64_t sub_1000666A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006A42C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000666C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A014();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000666EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A014();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100066714@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006591C(a1, a2);
}

uint64_t sub_100066728(_QWORD *a1)
{
  return sub_1000651C4(a1);
}

uint64_t sub_10006673C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD **a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD **v34;
  _QWORD aBlock[5];
  uint64_t v36;
  _QWORD *v37;

  v34 = a6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = _swiftEmptyArrayStorage;
  v13 = objc_msgSend(a4, "table");
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = (v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)((v16 + 60) & 0xFFFFFFFFFFFFFFF8);
  v18 = swift_allocObject(&unk_1000D8D38, v17 + 1, v14 | 7);
  *(_QWORD *)(v18 + 16) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v15, v12, v9);
  v19 = v18 + v16;
  v20 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)v19 = *(_OWORD *)a5;
  *(_OWORD *)(v19 + 16) = v20;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(a5 + 32);
  *(_QWORD *)(v19 + 45) = *(_QWORD *)(a5 + 45);
  *(_QWORD *)((char *)v17 + v18) = &v37;
  v21 = swift_allocObject(&unk_1000D8D60, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1000680A0;
  *(_QWORD *)(v21 + 24) = v18;
  aBlock[4] = sub_10006BD8C;
  v36 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100066C50;
  aBlock[3] = &unk_1000D8D78;
  v22 = _Block_copy(aBlock);
  v23 = v36;
  v24 = a4;
  sub_100048ED0((_QWORD *)a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048F08);
  swift_retain(v21);
  swift_release(v23, v25);
  objc_msgSend(v13, "enumerateColumnsWithBlock:", v22);

  _Block_release(v22);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v21, "", 113, 93, 47, 1);
  swift_release(v21, v27);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    isEscapingClosureAtFileLocation = (uint64_t)v37;
    v17 = v34;
    a4 = *v34;
    swift_bridgeObjectRetain(v37);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a4);
    *v17 = a4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  a4 = sub_100033574(0, a4[2] + 1, 1, a4);
  *v17 = a4;
LABEL_3:
  v31 = a4[2];
  v30 = a4[3];
  if (v31 >= v30 >> 1)
  {
    a4 = sub_100033574((_QWORD *)(v30 > 1), v31 + 1, 1, a4);
    *v17 = a4;
  }
  a4[2] = v31 + 1;
  a4[v31 + 4] = isEscapingClosureAtFileLocation;
  v32 = v37;
  swift_release(v18, v29);
  return swift_bridgeObjectRelease(v32);
}

void sub_1000669F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  Class isa;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v10 = sub_100030EE4(&qword_1000EBBA0);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a4, "table");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v15 = UUID._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v13, "mergeableStringForColumnID:rowID:", isa, v15);

  if (!v16)
  {
    UUID.init()(v17);
    v18 = type metadata accessor for UUID(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v12, 0, 1, v18);
    v20 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18) != 1)
    {
      v20 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v18);
    }
    v16 = objc_msgSend(objc_allocWithZone((Class)ICTTMergeableAttributedString), "initWithReplicaID:", v20);

  }
  v21 = objc_msgSend(a4, "attachment");
  if (v21)
  {
    v22 = v21;
    sub_100048ED0(a6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048F08);
    v23 = v16;
    v24 = sub_10008CA90(v23, v22, (uint64_t)a6);
    v26 = v25;
    v28 = v27;
    sub_100048ED0(a6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
    v29 = (_QWORD *)*a7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a7);
    *a7 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = sub_100033680(0, v29[2] + 1, 1, v29);
      *a7 = v29;
    }
    v32 = v29[2];
    v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      v29 = sub_100033680((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
      *a7 = v29;
    }
    v29[2] = v32 + 1;
    v33 = &v29[3 * v32];
    v33[4] = v24;
    v33[5] = v26;
    v33[6] = v28;

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100066C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(a1 + 32);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v12(v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_100066D04(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v3 = 0;
  v5 = a1 + 64;
  v4 = *(_QWORD *)(a1 + 64);
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v4;
  v9 = (unint64_t)(v6 + 63) >> 6;
  if ((v7 & v4) != 0)
    goto LABEL_6;
LABEL_7:
  v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v9)
    {
      v14 = *(_QWORD *)(v5 + 8 * v13);
      ++v3;
      if (v14)
        goto LABEL_22;
      v3 = v13 + 1;
      if (v13 + 1 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v3);
      if (v14)
        goto LABEL_22;
      v3 = v13 + 2;
      if (v13 + 2 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v3);
      if (v14)
        goto LABEL_22;
      v3 = v13 + 3;
      if (v13 + 3 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v3);
      if (v14)
      {
LABEL_22:
        v8 = (v14 - 1) & v14;
        for (i = __clz(__rbit64(v14)) + (v3 << 6); ; i = v11 | (v3 << 6))
        {
          v16 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * i);
          v17 = objc_msgSend(v16, "parentAttachment");
          if (v17)
          {
            v10 = v17;

            if (!v8)
              goto LABEL_7;
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v18 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
            v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
            specialized ContiguousArray._endMutation()(v19);
            if (!v8)
              goto LABEL_7;
          }
LABEL_6:
          v11 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
      }
      v15 = v13 + 4;
      if (v15 < v9)
      {
        v14 = *(_QWORD *)(v5 + 8 * v15);
        if (v14)
        {
          v3 = v15;
          goto LABEL_22;
        }
        while (1)
        {
          v3 = v15 + 1;
          if (__OFADD__(v15, 1))
            goto LABEL_28;
          if (v3 >= v9)
            break;
          v14 = *(_QWORD *)(v5 + 8 * v3);
          ++v15;
          if (v14)
            goto LABEL_22;
        }
      }
    }
LABEL_26:
    swift_release(a1, a2);
    return;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_100066ED4(char a1)
{
  return *(_QWORD *)&aTopleft_0[8 * a1];
}

uint64_t sub_100066EF4(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000EC728);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10006B1B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys, v11, v9, v10);
  v18 = *v3;
  v17 = 0;
  type metadata accessor for CGPoint(0);
  v13 = v12;
  v14 = sub_100042114(&qword_1000EC730, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, v13, v14);
  if (!v2)
  {
    v18 = v3[1];
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, v13, v14);
    v18 = v3[2];
    v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, v13, v14);
    v18 = v3[3];
    v17 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, v13, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000670C4()
{
  char *v0;

  return sub_100066ED4(*v0);
}

uint64_t sub_1000670CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006ADC4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000670F0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000670FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006B1B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100067124(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006B1B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10006714C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_10006AF7C(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_10006718C(_QWORD *a1)
{
  return sub_100066EF4(a1);
}

uint64_t sub_1000671A0(char a1)
{
  return qword_1000B5E90[a1];
}

uint64_t sub_1000671C0(char *a1, char *a2)
{
  return sub_100036184(*a1, *a2);
}

Swift::Int sub_1000671CC()
{
  char *v0;

  return sub_100053DFC(*v0);
}

uint64_t sub_1000671D4(uint64_t a1)
{
  char *v1;

  return sub_1000541F0(a1, *v1);
}

Swift::Int sub_1000671DC(uint64_t a1)
{
  char *v1;

  return sub_100054C28(a1, *v1);
}

unint64_t sub_1000671E4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10006B884(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100067210@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000671A0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100067238(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D6E28;
}

uint64_t sub_100067248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006B7B8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000672A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006B7B8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000672F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000474B8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10006BBA0, (uint64_t (*)(void))sub_10006B7B8);
}

uint64_t sub_100067304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047544(a1, a2, a3, a4, (uint64_t (*)(void))sub_10006BBA0, (uint64_t (*)(void))sub_10006B7B8);
}

uint64_t sub_100067318(char a1)
{
  return *(_QWORD *)&aPhoto_3[8 * a1];
}

uint64_t sub_100067338(char a1)
{
  if ((a1 & 1) != 0)
    return 0x64757469676E6F6CLL;
  else
    return 0x656475746974616CLL;
}

uint64_t sub_100067374(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_100030EE4(&qword_1000EC7A8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10004242C(a1, v11);
  v13 = sub_10006B840();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v17, v7, a2);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v16, v7, a3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100067490(char *a1, char *a2)
{
  return sub_100036208(*a1, *a2);
}

Swift::Int sub_10006749C()
{
  char *v0;

  return sub_100053E64(*v0);
}

uint64_t sub_1000674A4(uint64_t a1)
{
  char *v1;

  return sub_100054230(a1, *v1);
}

Swift::Int sub_1000674AC(uint64_t a1)
{
  char *v1;

  return sub_100054BC4(a1, *v1);
}

unint64_t sub_1000674B4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10006B8CC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000674E0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100067318(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100067508(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D6EE8;
}

uint64_t sub_100067518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006B7FC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100067574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006B7FC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000675C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000474B8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10006BB5C, (uint64_t (*)(void))sub_10006B7FC);
}

uint64_t sub_1000675D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047544(a1, a2, a3, a4, (uint64_t (*)(void))sub_10006BB5C, (uint64_t (*)(void))sub_10006B7FC);
}

BOOL sub_1000675E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100067600()
{
  char *v0;

  return sub_100067338(*v0);
}

uint64_t sub_100067608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006B914(a1, a2);
  *a3 = result;
  return result;
}

void sub_10006762C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100067638(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006B840();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100067660(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006B840();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100067688(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = sub_10006BA04(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

uint64_t sub_1000676B0(_QWORD *a1)
{
  double *v1;

  return sub_100067374(a1, *v1, v1[1]);
}

uint64_t sub_1000676C8(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _BYTE v29[64];

  v1 = objc_msgSend(a1, "media");
  v2 = v1;
  if (!v1)
    return 0;
  v3 = objc_msgSend(v1, "filename");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = sub_100030EE4(&qword_1000EB6F0);
  inited = swift_initStackObject(v7, v29);
  *(_OWORD *)(inited + 16) = xmmword_1000B3840;
  if (qword_1000EB638 != -1)
    swift_once(&qword_1000EB638, sub_10002F85C);
  v9 = *(_QWORD *)algn_1000F6928;
  *(_QWORD *)(inited + 32) = qword_1000F6920;
  *(_QWORD *)(inited + 40) = v9;
  v10 = qword_1000EB640;
  swift_bridgeObjectRetain(v9);
  if (v10 != -1)
    swift_once(&qword_1000EB640, sub_10002F884);
  v11 = *(_QWORD *)algn_1000F6938;
  *(_QWORD *)(inited + 48) = qword_1000F6930;
  *(_QWORD *)(inited + 56) = v11;
  v12 = sub_10002F8DC(v4, v6, (_QWORD *)inited);
  swift_setDeallocating(inited);
  swift_bridgeObjectRetain(v11);
  swift_arrayDestroy(inited + 32, 2, &type metadata for String);
  if ((v12 & 1) != 0)
  {
    v28[0] = 46;
    v28[1] = 0xE100000000000000;
    v13 = sub_100030F60();
    v14 = StringProtocol.components<A>(separatedBy:)(v28, &type metadata for String, &type metadata for String, v13, v13);
    swift_bridgeObjectRelease(v6);
    v26 = sub_10002F9A0(1, v14);
    swift_bridgeObjectRetain(v14);
    v15 = sub_100030EE4(&qword_1000EB700);
    v16 = sub_100036140((unint64_t *)&qword_1000EB708, &qword_1000EB700, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
    v17 = BidirectionalCollection<>.joined(separator:)(46, 0xE100000000000000, v15, v16);
    swift_unknownObjectRelease(v26);
    v18 = *(_QWORD *)(v14 + 16);
    if (v18)
    {
      v19 = v14 + 16 * v18;
      v20 = *(_QWORD *)(v19 + 16);
      v21 = *(void **)(v19 + 24);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v14);
      v27 = v17;
      v22._countAndFlagsBits = 3027488;
      v22._object = (void *)0xE300000000000000;
      String.append(_:)(v22);
      v23._countAndFlagsBits = v20;
      v23._object = v21;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      swift_bridgeObjectRelease(v14);
      v27 = v17;
      v24._countAndFlagsBits = 12832;
      v24._object = (void *)0xE200000000000000;
      String.append(_:)(v24);
    }
    return v27;
  }
  return v4;
}

_QWORD *sub_100067958(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        swift_bridgeObjectRetain_n(*v6, 2);
        v9 = sub_10005F8A4(v7, v8);
        if ((v10 & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v9);
          v12 = swift_bridgeObjectRelease_n(v8, 2);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
          v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v14 >= v13 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
          specialized Array._endMutation()(v15);
        }
        else
        {
          swift_bridgeObjectRelease_n(v8, 2);
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

id sub_100067A84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id result;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  objc_msgSend(a1, "croppingQuadTopLeftX");
  if (v4 == 0.0
    && (objc_msgSend(a1, "croppingQuadTopLeftY"), v5 == 1.0)
    && (objc_msgSend(a1, "croppingQuadTopRightX"), v6 == 1.0)
    && (objc_msgSend(a1, "croppingQuadTopRightY"), v7 == 1.0)
    && (objc_msgSend(a1, "croppingQuadBottomRightX"), v8 == 1.0)
    && (objc_msgSend(a1, "croppingQuadBottomRightY"), v9 == 0.0)
    && (objc_msgSend(a1, "croppingQuadBottomLeftX"), v10 == 0.0)
    && (result = objc_msgSend(a1, "croppingQuadBottomLeftY"), v12 == 0.0))
  {
    v13 = 0;
    v14 = 1;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    objc_msgSend(a1, "croppingQuadTopLeftX");
    v13 = v22;
    objc_msgSend(a1, "croppingQuadTopLeftY");
    v15 = v23;
    objc_msgSend(a1, "croppingQuadTopRightX");
    v16 = v24;
    objc_msgSend(a1, "croppingQuadTopRightY");
    v17 = v25;
    objc_msgSend(a1, "croppingQuadBottomRightX");
    v18 = v26;
    objc_msgSend(a1, "croppingQuadBottomRightY");
    v19 = v27;
    objc_msgSend(a1, "croppingQuadBottomLeftX");
    v20 = v28;
    result = objc_msgSend(a1, "croppingQuadBottomLeftY");
    v14 = 0;
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v21;
  *(_BYTE *)(a2 + 64) = v14;
  return result;
}

uint64_t sub_100067C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EC528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100067CA8(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 < 4)
    return 0x3020104u >> (8 * a1);
  if (qword_1000EB6A0 != -1)
    swift_once(&qword_1000EB6A0, sub_100064EC8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10003609C(v2, (uint64_t)qword_1000EC510);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown drawing orientation â€” returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 4;
}

uint64_t sub_100067D94(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  _QWORD aBlock[5];
  uint64_t v17;
  _QWORD *v18;

  v18 = _swiftEmptyArrayStorage;
  v4 = objc_msgSend(a1, "table");
  v5 = swift_allocObject(&unk_1000D8CC0, 88, 7);
  *(_QWORD *)(v5 + 16) = a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 69) = *(_QWORD *)(a2 + 45);
  *(_QWORD *)(v5 + 80) = &v18;
  v7 = swift_allocObject(&unk_1000D8CE8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_100067FC4;
  *(_QWORD *)(v7 + 24) = v5;
  aBlock[4] = sub_1000490B0;
  v17 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100066C50;
  aBlock[3] = &unk_1000D8D00;
  v8 = _Block_copy(aBlock);
  v9 = v17;
  v10 = a1;
  sub_100048ED0((_QWORD *)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048F08);
  swift_retain(v7);
  swift_release(v9, v11);
  objc_msgSend(v4, "enumerateRowsWithBlock:", v8);

  _Block_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v7, "", 113, 91, 40, 1);
  result = swift_release(v7, v12);
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v15 = v18;
    swift_release(v5, v14);
    return (uint64_t)v15;
  }
  return result;
}

uint64_t sub_100067F2C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 != 1)
  {
    sub_100048F48(result, a2, a3);
    sub_100048F48(a4, a5, a6);
    return swift_bridgeObjectRelease(a9);
  }
  return result;
}

uint64_t sub_100067F80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  }
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100067FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10006673C(a1, a2, a3, *(_QWORD **)(v3 + 16), v3 + 24, *(_QWORD ***)(v3 + 80));
}

uint64_t sub_100067FD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100067FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100067FF4(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_100067FFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = v0 + v5;
  v7 = *(_QWORD *)(v0 + v5 + 8);
  if (v7 != 1)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
  }
  return swift_deallocObject(v0, ((v5 + 60) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1000680A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000669F4(a1, a2, a3, *(void **)(v3 + 16), v3 + v8, (_QWORD *)(v3 + v9), *(_QWORD **)(v3 + ((v9 + 60) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100068118()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100068128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EBBC8;
  if (!qword_1000EBBC8)
  {
    v1 = objc_opt_self(ICTTAttachment);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EBBC8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ICAttachmentArchiveModel.Cropping(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.Cropping(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Cropping()
{
  return &type metadata for ICAttachmentArchiveModel.Cropping;
}

_QWORD *sub_1000681D0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v76;
  uint64_t v77;
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v10;
    v11 = a2[11];
    v12 = a3[12];
    __dst = (void *)(a1 + v12);
    v76 = (char *)a2 + v12;
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    v13 = type metadata accessor for Date(0);
    v77 = *(_QWORD *)(v13 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v14(v76, 1, v13))
    {
      v15 = sub_100030EE4(&qword_1000EBA10);
      memcpy(__dst, v76, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      v16 = v77;
    }
    else
    {
      v16 = v77;
      (*(void (**)(void *, char *, uint64_t))(v77 + 16))(__dst, v76, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(__dst, 0, 1, v13);
    }
    v18 = a3[13];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    if (v14((char *)a2 + v18, 1, v13))
    {
      v21 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v13);
    }
    v22 = a3[14];
    v23 = (char *)v4 + v22;
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v26 = *v24;
      sub_100049030(*v24, v24[1]);
      *(_QWORD *)v23 = v26;
      *((_QWORD *)v23 + 1) = v25;
    }
    v27 = a3[15];
    v28 = a3[16];
    v29 = (_QWORD *)((char *)v4 + v27);
    v30 = (uint64_t *)((char *)a2 + v27);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = (char *)v4 + v28;
    v33 = (uint64_t)a2 + v28;
    v32[32] = *(_BYTE *)(v33 + 32);
    v34 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v34;
    v35 = a3[17];
    v36 = a3[18];
    v37 = (char *)v4 + v35;
    v38 = (uint64_t)a2 + v35;
    v37[64] = *(_BYTE *)(v38 + 64);
    v39 = *(_OWORD *)(v38 + 48);
    *((_OWORD *)v37 + 2) = *(_OWORD *)(v38 + 32);
    *((_OWORD *)v37 + 3) = v39;
    v40 = *(_OWORD *)(v38 + 16);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v40;
    *((_BYTE *)v4 + v36) = *((_BYTE *)a2 + v36);
    v41 = a3[20];
    *((_BYTE *)v4 + a3[19]) = *((_BYTE *)a2 + a3[19]);
    v42 = (char *)v4 + v41;
    v43 = (char *)a2 + v41;
    v44 = type metadata accessor for URL(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_bridgeObjectRetain(v31);
    if (v46(v43, 1, v44))
    {
      v47 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    v48 = a3[21];
    v49 = (char *)v4 + v48;
    v50 = (uint64_t *)((char *)a2 + v48);
    v51 = v50[1];
    if (v51 >> 60 == 15)
    {
      *(_OWORD *)v49 = *(_OWORD *)v50;
    }
    else
    {
      v52 = *v50;
      sub_100049030(*v50, v50[1]);
      *(_QWORD *)v49 = v52;
      *((_QWORD *)v49 + 1) = v51;
    }
    v53 = a3[22];
    v54 = a3[23];
    v55 = (char *)v4 + v53;
    v56 = (uint64_t)a2 + v53;
    *(_OWORD *)v55 = *(_OWORD *)v56;
    v55[16] = *(_BYTE *)(v56 + 16);
    v57 = *(uint64_t *)((char *)a2 + v54);
    *(_QWORD *)((char *)v4 + v54) = v57;
    v58 = a3[25];
    *((_BYTE *)v4 + a3[24]) = *((_BYTE *)a2 + a3[24]);
    v59 = *(uint64_t *)((char *)a2 + v58);
    *(_QWORD *)((char *)v4 + v58) = v59;
    v60 = a3[26];
    v61 = a3[27];
    v62 = (_QWORD *)((char *)v4 + v60);
    v63 = (uint64_t *)((char *)a2 + v60);
    v64 = v63[1];
    *v62 = *v63;
    v62[1] = v64;
    *((_BYTE *)v4 + v61) = *((_BYTE *)a2 + v61);
    v65 = a3[28];
    v66 = (char *)v4 + v65;
    v67 = (uint64_t)a2 + v65;
    v68 = *(uint64_t *)((char *)a2 + v65 + 8);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v64);
    if (v68)
    {
      if (v68 == 1)
      {
        v69 = *(_OWORD *)(v67 + 48);
        *((_OWORD *)v66 + 2) = *(_OWORD *)(v67 + 32);
        *((_OWORD *)v66 + 3) = v69;
        *(_OWORD *)(v66 + 57) = *(_OWORD *)(v67 + 57);
        v70 = *(_OWORD *)(v67 + 16);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v70;
        return v4;
      }
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = v68;
      v73 = *(_QWORD *)(v67 + 16);
      *((_QWORD *)v66 + 2) = v73;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v73);
      v71 = *(_QWORD *)(v67 + 32);
      if (!v71)
        goto LABEL_24;
    }
    else
    {
      *(_OWORD *)v66 = *(_OWORD *)v67;
      *((_QWORD *)v66 + 2) = *(_QWORD *)(v67 + 16);
      v71 = *(_QWORD *)(v67 + 32);
      if (!v71)
      {
LABEL_24:
        *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
        *((_QWORD *)v66 + 5) = *(_QWORD *)(v67 + 40);
        goto LABEL_25;
      }
    }
    *((_QWORD *)v66 + 3) = *(_QWORD *)(v67 + 24);
    *((_QWORD *)v66 + 4) = v71;
    v72 = *(_QWORD *)(v67 + 40);
    *((_QWORD *)v66 + 5) = v72;
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v72);
LABEL_25:
    *((_QWORD *)v66 + 6) = *(_QWORD *)(v67 + 48);
    v66[56] = *(_BYTE *)(v67 + 56);
    v74 = *(_QWORD *)(v67 + 64);
    *((_QWORD *)v66 + 8) = v74;
    v66[72] = *(_BYTE *)(v67 + 72);
    swift_bridgeObjectRetain(v74);
    return v4;
  }
  v17 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain(v17);
  return v4;
}

uint64_t sub_100068658(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = (char *)a1 + a2[12];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (char *)a1 + a2[13];
  if (!v7(v8, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v9 = (_QWORD *)((char *)a1 + a2[14]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_100040B10(*v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15] + 8));
  v11 = (char *)a1 + a2[20];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  v14 = (_QWORD *)((char *)a1 + a2[21]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_100040B10(*v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[23]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[25]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[26] + 8));
  v16 = (_QWORD *)((char *)a1 + a2[28]);
  result = v16[1];
  if (result)
  {
    if (result == 1)
      return result;
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(v16[2]);
  }
  v18 = v16[4];
  if (v18)
  {
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v16[5]);
  }
  return swift_bridgeObjectRelease(v16[8]);
}

uint64_t sub_100068824(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const void *v74;
  uint64_t v75;
  void *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  v11 = a3[12];
  __dst = (void *)(a1 + v11);
  v74 = (const void *)(a2 + v11);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v12 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v12 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v75 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v13(v74, 1, v12))
  {
    v14 = sub_100030EE4(&qword_1000EBA10);
    memcpy(__dst, v74, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    v15 = v75;
  }
  else
  {
    v15 = v75;
    (*(void (**)(void *, const void *, uint64_t))(v75 + 16))(__dst, v74, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v75 + 56))(__dst, 0, 1, v12);
  }
  v16 = a3[13];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  if (v13((const void *)(a2 + v16), 1, v12))
  {
    v19 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v17, v18, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v12);
  }
  v20 = a3[14];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = v22[1];
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v24 = *v22;
    sub_100049030(*v22, v22[1]);
    *(_QWORD *)v21 = v24;
    *(_QWORD *)(v21 + 8) = v23;
  }
  v25 = a3[15];
  v26 = a3[16];
  v27 = (_QWORD *)(a1 + v25);
  v28 = (_QWORD *)(a2 + v25);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = a1 + v26;
  v31 = a2 + v26;
  *(_BYTE *)(v30 + 32) = *(_BYTE *)(v31 + 32);
  v32 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v32;
  v33 = a3[17];
  v34 = a3[18];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_BYTE *)(v35 + 64) = *(_BYTE *)(v36 + 64);
  v37 = *(_OWORD *)(v36 + 48);
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_OWORD *)(v35 + 48) = v37;
  v38 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v38;
  *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  v39 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  v42 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48);
  swift_bridgeObjectRetain(v29);
  if (v44(v41, 1, v42))
  {
    v45 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v43 + 16))(v40, v41, v42);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  v46 = a3[21];
  v47 = a1 + v46;
  v48 = (uint64_t *)(a2 + v46);
  v49 = v48[1];
  if (v49 >> 60 == 15)
  {
    *(_OWORD *)v47 = *(_OWORD *)v48;
  }
  else
  {
    v50 = *v48;
    sub_100049030(*v48, v48[1]);
    *(_QWORD *)v47 = v50;
    *(_QWORD *)(v47 + 8) = v49;
  }
  v51 = a3[22];
  v52 = a3[23];
  v53 = a1 + v51;
  v54 = a2 + v51;
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_BYTE *)(v53 + 16) = *(_BYTE *)(v54 + 16);
  v55 = *(_QWORD *)(a2 + v52);
  *(_QWORD *)(a1 + v52) = v55;
  v56 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v57 = *(_QWORD *)(a2 + v56);
  *(_QWORD *)(a1 + v56) = v57;
  v58 = a3[26];
  v59 = a3[27];
  v60 = (_QWORD *)(a1 + v58);
  v61 = (_QWORD *)(a2 + v58);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  *(_BYTE *)(a1 + v59) = *(_BYTE *)(a2 + v59);
  v63 = a3[28];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = *(_QWORD *)(a2 + v63 + 8);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v62);
  if (!v66)
  {
    *(_OWORD *)v64 = *(_OWORD *)v65;
    *(_QWORD *)(v64 + 16) = *(_QWORD *)(v65 + 16);
    v69 = *(_QWORD *)(v65 + 32);
    if (!v69)
    {
LABEL_22:
      *(_OWORD *)(v64 + 24) = *(_OWORD *)(v65 + 24);
      *(_QWORD *)(v64 + 40) = *(_QWORD *)(v65 + 40);
      goto LABEL_23;
    }
LABEL_20:
    *(_QWORD *)(v64 + 24) = *(_QWORD *)(v65 + 24);
    *(_QWORD *)(v64 + 32) = v69;
    v70 = *(_QWORD *)(v65 + 40);
    *(_QWORD *)(v64 + 40) = v70;
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v70);
LABEL_23:
    *(_QWORD *)(v64 + 48) = *(_QWORD *)(v65 + 48);
    *(_BYTE *)(v64 + 56) = *(_BYTE *)(v65 + 56);
    v72 = *(_QWORD *)(v65 + 64);
    *(_QWORD *)(v64 + 64) = v72;
    *(_BYTE *)(v64 + 72) = *(_BYTE *)(v65 + 72);
    swift_bridgeObjectRetain(v72);
    return a1;
  }
  if (v66 != 1)
  {
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *(_QWORD *)(v64 + 8) = v66;
    v71 = *(_QWORD *)(v65 + 16);
    *(_QWORD *)(v64 + 16) = v71;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v71);
    v69 = *(_QWORD *)(v65 + 32);
    if (!v69)
      goto LABEL_22;
    goto LABEL_20;
  }
  v67 = *(_OWORD *)(v65 + 48);
  *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
  *(_OWORD *)(v64 + 48) = v67;
  *(_OWORD *)(v64 + 57) = *(_OWORD *)(v65 + 57);
  v68 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v68;
  return a1;
}

uint64_t sub_100068C80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  _OWORD *v113;
  _OWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[12];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_7:
  v25 = a3[13];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = v21((void *)(a1 + v25), 1, v19);
  v29 = v21(v27, 1, v19);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v26, v27, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v26, v19);
LABEL_12:
    v30 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v26, v27, v19);
LABEL_13:
  v31 = a3[14];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = *(_QWORD *)(a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      sub_100049030(v35, v34);
      *v32 = v35;
      v32[1] = v34;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v34 >> 60 == 15)
  {
    sub_100069484((uint64_t)v32);
LABEL_18:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_20;
  }
  v36 = *v33;
  sub_100049030(v36, v34);
  v37 = *v32;
  v38 = v32[1];
  *v32 = v36;
  v32[1] = v34;
  sub_100040B10(v37, v38);
LABEL_20:
  v39 = a3[15];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[16];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = *(_BYTE *)(v46 + 32);
  v48 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v48;
  *(_BYTE *)(v45 + 32) = v47;
  v49 = a3[17];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_OWORD *)(v51 + 16);
  v53 = *(_OWORD *)(v51 + 32);
  v54 = *(_OWORD *)(v51 + 48);
  *(_BYTE *)(v50 + 64) = *(_BYTE *)(v51 + 64);
  *(_OWORD *)(v50 + 32) = v53;
  *(_OWORD *)(v50 + 48) = v54;
  *(_OWORD *)(v50 + 16) = v52;
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  v55 = a3[20];
  v56 = (void *)(a1 + v55);
  v57 = (void *)(a2 + v55);
  v58 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(void *, void *, uint64_t))(v59 + 16))(v56, v57, v58);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v62)
  {
    (*(void (**)(void *, uint64_t))(v59 + 8))(v56, v58);
LABEL_25:
    v63 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(void *, void *, uint64_t))(v59 + 24))(v56, v57, v58);
LABEL_26:
  v64 = a3[21];
  v65 = (uint64_t *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v67 = *(_QWORD *)(a2 + v64 + 8);
  if (*(_QWORD *)(a1 + v64 + 8) >> 60 == 15)
  {
    if (v67 >> 60 != 15)
    {
      v68 = *v66;
      sub_100049030(v68, v67);
      *v65 = v68;
      v65[1] = v67;
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  if (v67 >> 60 == 15)
  {
    sub_100069484((uint64_t)v65);
LABEL_31:
    *(_OWORD *)v65 = *(_OWORD *)v66;
    goto LABEL_33;
  }
  v69 = *v66;
  sub_100049030(v69, v67);
  v70 = *v65;
  v71 = v65[1];
  *v65 = v69;
  v65[1] = v67;
  sub_100040B10(v70, v71);
LABEL_33:
  v72 = a3[22];
  v73 = a1 + v72;
  v74 = (__int128 *)(a2 + v72);
  v75 = *v74;
  *(_BYTE *)(v73 + 16) = *((_BYTE *)v74 + 16);
  *(_OWORD *)v73 = v75;
  v76 = a3[23];
  v77 = *(_QWORD *)(a1 + v76);
  v78 = *(_QWORD *)(a2 + v76);
  *(_QWORD *)(a1 + v76) = v78;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRelease(v77);
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v79 = a3[25];
  v80 = *(_QWORD *)(a1 + v79);
  v81 = *(_QWORD *)(a2 + v79);
  *(_QWORD *)(a1 + v79) = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v80);
  v82 = a3[26];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (_QWORD *)(a2 + v82);
  *v83 = *v84;
  v85 = v84[1];
  v86 = v83[1];
  v83[1] = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v87 = a3[28];
  v88 = a1 + v87;
  v89 = (__int128 *)(a2 + v87);
  v90 = *(_QWORD *)(a1 + v87 + 8);
  v91 = *((_QWORD *)v89 + 1);
  if (v90 == 1)
  {
    if (v91 == 1)
    {
      *(_OWORD *)v88 = *v89;
      v92 = v89[1];
      v93 = v89[2];
      v94 = v89[3];
      *(_OWORD *)(v88 + 57) = *(__int128 *)((char *)v89 + 57);
      *(_OWORD *)(v88 + 32) = v93;
      *(_OWORD *)(v88 + 48) = v94;
      *(_OWORD *)(v88 + 16) = v92;
      return a1;
    }
    if (v91)
    {
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v98 = *((_QWORD *)v89 + 1);
      *(_QWORD *)(v88 + 8) = v98;
      v99 = *((_QWORD *)v89 + 2);
      *(_QWORD *)(v88 + 16) = v99;
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v99);
      if (*((_QWORD *)v89 + 4))
      {
LABEL_40:
        *(_QWORD *)(v88 + 24) = *((_QWORD *)v89 + 3);
        v100 = *((_QWORD *)v89 + 4);
        *(_QWORD *)(v88 + 32) = v100;
        v101 = *((_QWORD *)v89 + 5);
        *(_QWORD *)(v88 + 40) = v101;
        swift_bridgeObjectRetain(v100);
        swift_bridgeObjectRetain(v101);
LABEL_49:
        v107 = *((_QWORD *)v89 + 6);
        *(_BYTE *)(v88 + 56) = *((_BYTE *)v89 + 56);
        *(_QWORD *)(v88 + 48) = v107;
        v108 = *((_QWORD *)v89 + 8);
        *(_QWORD *)(v88 + 64) = v108;
        *(_BYTE *)(v88 + 72) = *((_BYTE *)v89 + 72);
        swift_bridgeObjectRetain(v108);
        return a1;
      }
    }
    else
    {
      v105 = *v89;
      *(_QWORD *)(v88 + 16) = *((_QWORD *)v89 + 2);
      *(_OWORD *)v88 = v105;
      if (*((_QWORD *)v89 + 4))
        goto LABEL_40;
    }
    v106 = *(__int128 *)((char *)v89 + 24);
    *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
    *(_OWORD *)(v88 + 24) = v106;
    goto LABEL_49;
  }
  if (v91 == 1)
  {
    sub_1000694B8((_QWORD *)v88);
    *(_OWORD *)v88 = *v89;
    v96 = v89[2];
    v95 = v89[3];
    v97 = v89[1];
    *(_OWORD *)(v88 + 57) = *(__int128 *)((char *)v89 + 57);
    *(_OWORD *)(v88 + 32) = v96;
    *(_OWORD *)(v88 + 48) = v95;
    *(_OWORD *)(v88 + 16) = v97;
  }
  else
  {
    if (v90)
    {
      if (v91)
      {
        *(_QWORD *)v88 = *(_QWORD *)v89;
        v102 = *((_QWORD *)v89 + 1);
        *(_QWORD *)(v88 + 8) = v102;
        swift_bridgeObjectRetain(v102);
        swift_bridgeObjectRelease(v90);
        v103 = *((_QWORD *)v89 + 2);
        v104 = *(_QWORD *)(v88 + 16);
        *(_QWORD *)(v88 + 16) = v103;
        swift_bridgeObjectRetain(v103);
        swift_bridgeObjectRelease(v104);
      }
      else
      {
        sub_10004A754(v88);
        v111 = *((_QWORD *)v89 + 2);
        *(_OWORD *)v88 = *v89;
        *(_QWORD *)(v88 + 16) = v111;
      }
    }
    else if (v91)
    {
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v109 = *((_QWORD *)v89 + 1);
      *(_QWORD *)(v88 + 8) = v109;
      v110 = *((_QWORD *)v89 + 2);
      *(_QWORD *)(v88 + 16) = v110;
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRetain(v110);
    }
    else
    {
      v112 = *v89;
      *(_QWORD *)(v88 + 16) = *((_QWORD *)v89 + 2);
      *(_OWORD *)v88 = v112;
    }
    v113 = (_OWORD *)(v88 + 24);
    v114 = (__int128 *)((char *)v89 + 24);
    v115 = *(_QWORD *)(v88 + 32);
    v116 = *((_QWORD *)v89 + 4);
    if (v115)
    {
      if (v116)
      {
        *(_QWORD *)(v88 + 24) = *((_QWORD *)v89 + 3);
        v117 = *((_QWORD *)v89 + 4);
        *(_QWORD *)(v88 + 32) = v117;
        swift_bridgeObjectRetain(v117);
        swift_bridgeObjectRelease(v115);
        v118 = *((_QWORD *)v89 + 5);
        v119 = *(_QWORD *)(v88 + 40);
        *(_QWORD *)(v88 + 40) = v118;
        swift_bridgeObjectRetain(v118);
        swift_bridgeObjectRelease(v119);
      }
      else
      {
        sub_10004A754(v88 + 24);
        v122 = *((_QWORD *)v89 + 5);
        *v113 = *v114;
        *(_QWORD *)(v88 + 40) = v122;
      }
    }
    else if (v116)
    {
      *(_QWORD *)(v88 + 24) = *((_QWORD *)v89 + 3);
      v120 = *((_QWORD *)v89 + 4);
      *(_QWORD *)(v88 + 32) = v120;
      v121 = *((_QWORD *)v89 + 5);
      *(_QWORD *)(v88 + 40) = v121;
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRetain(v121);
    }
    else
    {
      v123 = *v114;
      *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
      *v113 = v123;
    }
    v124 = *((_QWORD *)v89 + 6);
    *(_BYTE *)(v88 + 56) = *((_BYTE *)v89 + 56);
    *(_QWORD *)(v88 + 48) = v124;
    v125 = *(_QWORD *)(v88 + 64);
    v126 = *((_QWORD *)v89 + 8);
    *(_QWORD *)(v88 + 64) = v126;
    swift_bridgeObjectRetain(v126);
    swift_bridgeObjectRelease(v125);
    *(_BYTE *)(v88 + 72) = *((_BYTE *)v89 + 72);
  }
  return a1;
}

uint64_t sub_100069484(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

_QWORD *sub_1000694B8(_QWORD *a1)
{
  _s14descr1000D9B91O14AudioRecordingVwxx(a1);
  return a1;
}

uint64_t sub_1000694EC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = a3[12];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[13];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    v17 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v19 = a3[16];
  v20 = a3[17];
  v21 = a1 + v19;
  v22 = a2 + v19;
  v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  *(_BYTE *)(v21 + 32) = *(_BYTE *)(v22 + 32);
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 64) = *(_BYTE *)(v25 + 64);
  v26 = *(_OWORD *)(v25 + 48);
  *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 32);
  *(_OWORD *)(v24 + 48) = v26;
  v27 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v27;
  v28 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[20];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = type metadata accessor for URL(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v35 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  v38 = a3[24];
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v38) = *(_BYTE *)(a2 + v38);
  v39 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_OWORD *)(a1 + v39) = *(_OWORD *)(a2 + v39);
  v40 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v41 = (_OWORD *)(a1 + v40);
  v42 = (_OWORD *)(a2 + v40);
  *(_OWORD *)((char *)v41 + 57) = *(_OWORD *)((char *)v42 + 57);
  v43 = v42[3];
  v41[2] = v42[2];
  v41[3] = v43;
  v44 = v42[1];
  *v41 = *v42;
  v41[1] = v44;
  return a1;
}

uint64_t sub_1000697B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a3[12];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  v25 = a3[13];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = v21((void *)(a1 + v25), 1, v19);
  v29 = v21(v27, 1, v19);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v26, v27, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v26, v19);
LABEL_12:
    v30 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v26, v27, v19);
LABEL_13:
  v31 = a3[14];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a1 + v31 + 8);
  if (v34 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_18;
  }
  v35 = *(_QWORD *)(v33 + 8);
  if (v35 >> 60 == 15)
  {
    sub_100069484(v32);
    goto LABEL_16;
  }
  v36 = *(_QWORD *)v32;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_QWORD *)(v32 + 8) = v35;
  sub_100040B10(v36, v34);
LABEL_18:
  v37 = a3[15];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  v42 = v38[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  v43 = a3[16];
  v44 = a3[17];
  v45 = a1 + v43;
  v46 = a2 + v43;
  *(_BYTE *)(v45 + 32) = *(_BYTE *)(v46 + 32);
  v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  v48 = a1 + v44;
  v49 = a2 + v44;
  *(_BYTE *)(v48 + 64) = *(_BYTE *)(v49 + 64);
  v50 = *(_OWORD *)(v49 + 48);
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(_OWORD *)(v48 + 48) = v50;
  v51 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v51;
  v52 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  *(_BYTE *)(a1 + v52) = *(_BYTE *)(a2 + v52);
  v53 = a3[20];
  v54 = (void *)(a1 + v53);
  v55 = (void *)(a2 + v53);
  v56 = type metadata accessor for URL(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, void *, uint64_t))(v57 + 32))(v54, v55, v56);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v57 + 8))(v54, v56);
LABEL_23:
    v61 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(void *, void *, uint64_t))(v57 + 40))(v54, v55, v56);
LABEL_24:
  v62 = a3[21];
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = *(_QWORD *)(a1 + v62 + 8);
  if (v65 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)v63 = *(_OWORD *)v64;
    goto LABEL_29;
  }
  v66 = *(_QWORD *)(v64 + 8);
  if (v66 >> 60 == 15)
  {
    sub_100069484(v63);
    goto LABEL_27;
  }
  v67 = *(_QWORD *)v63;
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *(_QWORD *)(v63 + 8) = v66;
  sub_100040B10(v67, v65);
LABEL_29:
  v68 = a3[22];
  v69 = a3[23];
  v70 = a1 + v68;
  v71 = a2 + v68;
  *(_OWORD *)v70 = *(_OWORD *)v71;
  *(_BYTE *)(v70 + 16) = *(_BYTE *)(v71 + 16);
  v72 = *(_QWORD *)(a1 + v69);
  *(_QWORD *)(a1 + v69) = *(_QWORD *)(a2 + v69);
  swift_bridgeObjectRelease(v72);
  v73 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v74 = *(_QWORD *)(a1 + v73);
  *(_QWORD *)(a1 + v73) = *(_QWORD *)(a2 + v73);
  swift_bridgeObjectRelease(v74);
  v75 = a3[26];
  v76 = (_QWORD *)(a1 + v75);
  v77 = (uint64_t *)(a2 + v75);
  v79 = *v77;
  v78 = v77[1];
  v80 = v76[1];
  *v76 = v79;
  v76[1] = v78;
  swift_bridgeObjectRelease(v80);
  v81 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v82 = a1 + v81;
  v83 = a2 + v81;
  v84 = *(_QWORD *)(a1 + v81 + 8);
  if (v84 != 1)
  {
    v85 = *(_QWORD *)(v83 + 8);
    if (v85 == 1)
    {
      sub_1000694B8((_QWORD *)(a1 + v81));
      goto LABEL_32;
    }
    if (v84)
    {
      if (v85)
      {
        *(_QWORD *)v82 = *(_QWORD *)v83;
        *(_QWORD *)(v82 + 8) = v85;
        swift_bridgeObjectRelease(v84);
        v88 = *(_QWORD *)(v82 + 16);
        *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
        swift_bridgeObjectRelease(v88);
        goto LABEL_41;
      }
      sub_10004A754(a1 + v81);
    }
    *(_OWORD *)v82 = *(_OWORD *)v83;
    *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
LABEL_41:
    v89 = *(_QWORD *)(v82 + 32);
    if (v89)
    {
      v90 = *(_QWORD *)(v83 + 32);
      if (v90)
      {
        *(_QWORD *)(v82 + 24) = *(_QWORD *)(v83 + 24);
        *(_QWORD *)(v82 + 32) = v90;
        swift_bridgeObjectRelease(v89);
        v91 = *(_QWORD *)(v82 + 40);
        *(_QWORD *)(v82 + 40) = *(_QWORD *)(v83 + 40);
        swift_bridgeObjectRelease(v91);
LABEL_46:
        *(_QWORD *)(v82 + 48) = *(_QWORD *)(v83 + 48);
        *(_BYTE *)(v82 + 56) = *(_BYTE *)(v83 + 56);
        v92 = *(_QWORD *)(v82 + 64);
        *(_QWORD *)(v82 + 64) = *(_QWORD *)(v83 + 64);
        swift_bridgeObjectRelease(v92);
        *(_BYTE *)(v82 + 72) = *(_BYTE *)(v83 + 72);
        return a1;
      }
      sub_10004A754(v82 + 24);
    }
    *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
    *(_QWORD *)(v82 + 40) = *(_QWORD *)(v83 + 40);
    goto LABEL_46;
  }
LABEL_32:
  v86 = *(_OWORD *)(v83 + 48);
  *(_OWORD *)(v82 + 32) = *(_OWORD *)(v83 + 32);
  *(_OWORD *)(v82 + 48) = v86;
  *(_OWORD *)(v82 + 57) = *(_OWORD *)(v83 + 57);
  v87 = *(_OWORD *)(v83 + 16);
  *(_OWORD *)v82 = *(_OWORD *)v83;
  *(_OWORD *)(v82 + 16) = v87;
  return a1;
}

uint64_t sub_100069D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069D20);
}

uint64_t sub_100069D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 48);
    }
    else
    {
      v10 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 80);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100069DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069DD4);
}

uint64_t sub_100069DD4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 48);
    }
    else
    {
      v10 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 80);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_100069E78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v6[0] = &unk_1000B55F0;
  v6[1] = &unk_1000B5608;
  v6[2] = &unk_1000B5620;
  v6[3] = &unk_1000B5620;
  v6[4] = &unk_1000B5638;
  v6[5] = &unk_1000B5638;
  v6[6] = &unk_1000B5620;
  v6[7] = &unk_1000B5620;
  sub_100050F10(319, (unint64_t *)&qword_1000EBC48, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    v9 = &unk_1000B5650;
    v10 = &unk_1000B5620;
    v11 = &unk_1000B5668;
    v12 = &unk_1000B5680;
    v13 = &unk_1000B55F0;
    v14 = &unk_1000B5698;
    sub_100050F10(319, (unint64_t *)&unk_1000EC598, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v15 = *(_QWORD *)(v4 - 8) + 64;
      v16 = &unk_1000B5650;
      v17 = &unk_1000B56B0;
      v18 = &unk_1000B56C8;
      v19 = &unk_1000B5638;
      v20 = &unk_1000B56C8;
      v21 = &unk_1000B5620;
      v22 = &unk_1000B56E0;
      v23 = &unk_1000B56F8;
      swift_initStructMetadata(a1, 256, 25, v6, a1 + 16);
    }
  }
}

uint64_t sub_100069FB8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100042114(&qword_1000EBB08, type metadata accessor for ICAttachmentArchiveModel, (uint64_t)&unk_1000B577C);
  result = sub_100042114(&qword_1000EBE90, type metadata accessor for ICAttachmentArchiveModel, (uint64_t)&unk_1000B57A4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10006A014()
{
  unint64_t result;

  result = qword_1000EC668;
  if (!qword_1000EC668)
  {
    result = swift_getWitnessTable(&unk_1000B5CDC, &type metadata for ICAttachmentArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC668);
  }
  return result;
}

unint64_t sub_10006A058()
{
  unint64_t result;

  result = qword_1000EC678;
  if (!qword_1000EC678)
  {
    result = swift_getWitnessTable(&unk_1000B572C, &type metadata for ICAttachmentArchiveModel.Cropping);
    atomic_store(result, (unint64_t *)&qword_1000EC678);
  }
  return result;
}

unint64_t sub_10006A09C()
{
  unint64_t result;

  result = qword_1000EC680;
  if (!qword_1000EC680)
  {
    result = swift_getWitnessTable(&unk_1000B5CB4, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1000EC680);
  }
  return result;
}

unint64_t sub_10006A0E0()
{
  unint64_t result;

  result = qword_1000EC688;
  if (!qword_1000EC688)
  {
    result = swift_getWitnessTable(&unk_1000B5C8C, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1000EC688);
  }
  return result;
}

unint64_t sub_10006A124()
{
  unint64_t result;

  result = qword_1000EC698;
  if (!qword_1000EC698)
  {
    result = swift_getWitnessTable(&unk_1000B5C64, &type metadata for ICAttachmentArchiveModel.Coordinate);
    atomic_store(result, (unint64_t *)&qword_1000EC698);
  }
  return result;
}

uint64_t sub_10006A168()
{
  return sub_10006A18C(&qword_1000EC6B0, &qword_1000EB908, (void (*)(void))sub_10004B72C, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

uint64_t sub_10006A18C(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100030FF0(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006A1F0()
{
  unint64_t result;

  result = qword_1000EC6B8;
  if (!qword_1000EC6B8)
  {
    result = swift_getWitnessTable(&unk_1000B65C0, &_s14descr1000D9B91O14AudioRecordingVN);
    atomic_store(result, (unint64_t *)&qword_1000EC6B8);
  }
  return result;
}

unint64_t sub_10006A234()
{
  unint64_t result;

  result = qword_1000EC6D0;
  if (!qword_1000EC6D0)
  {
    result = swift_getWitnessTable(&unk_1000B5754, &type metadata for ICAttachmentArchiveModel.Cropping);
    atomic_store(result, (unint64_t *)&qword_1000EC6D0);
  }
  return result;
}

unint64_t sub_10006A278()
{
  unint64_t result;

  result = qword_1000EC6D8;
  if (!qword_1000EC6D8)
  {
    result = swift_getWitnessTable(&unk_1000B5C3C, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1000EC6D8);
  }
  return result;
}

unint64_t sub_10006A2BC()
{
  unint64_t result;

  result = qword_1000EC6E0;
  if (!qword_1000EC6E0)
  {
    result = swift_getWitnessTable(&unk_1000B5C14, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1000EC6E0);
  }
  return result;
}

unint64_t sub_10006A300()
{
  unint64_t result;

  result = qword_1000EC6F0;
  if (!qword_1000EC6F0)
  {
    result = swift_getWitnessTable(&unk_1000B5BEC, &type metadata for ICAttachmentArchiveModel.Coordinate);
    atomic_store(result, (unint64_t *)&qword_1000EC6F0);
  }
  return result;
}

uint64_t sub_10006A344()
{
  return sub_10006A18C(&qword_1000EC700, &qword_1000EB908, (void (*)(void))sub_10004B904, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_10006A368()
{
  unint64_t result;

  result = qword_1000EC708;
  if (!qword_1000EC708)
  {
    result = swift_getWitnessTable(&unk_1000B65E8, &_s14descr1000D9B91O14AudioRecordingVN);
    atomic_store(result, (unint64_t *)&qword_1000EC708);
  }
  return result;
}

uint64_t sub_10006A3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ICAttachmentArchiveModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006A3F0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ICAttachmentArchiveModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006A42C(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v3 = a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001000B0770)
  {
    v6 = 0x80000001000B0770;
LABEL_16:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000B0770, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_16;
  }
  if (a1 == 0x6954746E65726170 && a2 == 0xEB00000000656C74
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6954746E65726170, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x80000001000B0790;
    if (a2 == 0x80000001000B0790)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000B0790, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v7);
    return 4;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x80000001000B07B0;
    if (a2 == 0x80000001000B07B0)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000B07B0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v8);
    return 5;
  }
  if (a1 == 0xD000000000000018)
  {
    v9 = 0x80000001000B0E50;
    if (a2 == 0x80000001000B0E50)
      goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001000B0E50, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v9);
    return 6;
  }
  if (a1 == 0x6C6946616964656DLL && a2 == 0xED0000656D616E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6946616964656DLL, 0xED0000656D616E65, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7;
  }
  if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8;
  }
  if (a1 == 0x6465696669646F6DLL && a2 == 0xEA00000000007441
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6465696669646F6DLL, 0xEA00000000007441, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 10;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 11;
  }
  if (a1 == 0x73646E756F62 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73646E756F62, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 12;
  }
  if (a1 == 0x676E6970706F7263 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6970706F7263, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 13;
  }
  if (a1 == 0x7461746E6569726FLL && a2 == 0xEB000000006E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 14;
  }
  if (a1 == 0x6C69466567616D69 && a2 == 0xEB00000000726574
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69466567616D69, 0xEB00000000726574, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 15;
  }
  if (a1 == 7107189 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 16;
  }
  if (a1 == 0x4474657070696E73 && a2 == 0xEB00000000617461
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4474657070696E73, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 17;
  }
  if (a1 == 0x616E6964726F6F63 && a2 == 0xEA00000000006574
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x616E6964726F6F63, 0xEA00000000006574, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 18;
  }
  if (a1 == 1937207154 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1937207154, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 19;
  }
  if (a1 == 0x5474686769527369 && a2 == 0xED00007466654C6FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5474686769527369, 0xED00007466654C6FLL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 20;
  }
  if (a1 == 0xD000000000000018)
  {
    v10 = 0x80000001000B0E70;
    if (a2 == 0x80000001000B0E70)
      goto LABEL_96;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001000B0E70, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_96:
    swift_bridgeObjectRelease(v10);
    return 21;
  }
  if (a1 == 0x65746F75516C7275 && a2 == 0xEC00000074786554
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65746F75516C7275, 0xEC00000074786554, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 22;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001000B0E90)
  {
    v11 = 0x80000001000B0E90;
LABEL_106:
    swift_bridgeObjectRelease(v11);
    return 23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000B0E90, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_106;
  }
  if (a1 == 0x6365526F69647561 && a2 == 0xEE00676E6964726FLL)
  {
    swift_bridgeObjectRelease(0xEE00676E6964726FLL);
    return 24;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6365526F69647561, 0xEE00676E6964726FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 24;
    else
      return 25;
  }
}

uint64_t sub_10006ADC4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7466654C706F74 && a2 == 0xE700000000000000;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7466654C706F74, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x7468676952706F74 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7468676952706F74, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x69526D6F74746F62 && a2 == 0xEB00000000746867
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x69526D6F74746F62, 0xEB00000000746867, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0x654C6D6F74746F62 && a2 == 0xEA00000000007466)
  {
    swift_bridgeObjectRelease(0xEA00000000007466);
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x654C6D6F74746F62, 0xEA00000000007466, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10006AF7C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = sub_100030EE4(&qword_1000EC710);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10006B1B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100035424(a1);
  type metadata accessor for CGPoint(0);
  v13 = v12;
  v26 = 0;
  v14 = sub_100042114(&qword_1000EC720, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v26, v5, v13, v14);
  v15 = v24;
  v16 = v25;
  v26 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v26, v5, v13, v14);
  v17 = v24;
  v18 = v25;
  v26 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v26, v5, v13, v14);
  v19 = v24;
  v20 = v25;
  v26 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v13, &v26, v5, v13, v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v24;
  v22 = v25;
  result = sub_100035424(a1);
  *a2 = v15;
  a2[1] = v16;
  a2[2] = v17;
  a2[3] = v18;
  a2[4] = v19;
  a2[5] = v20;
  a2[6] = v21;
  a2[7] = v22;
  return result;
}

unint64_t sub_10006B1B8()
{
  unint64_t result;

  result = qword_1000EC718;
  if (!qword_1000EC718)
  {
    result = swift_getWitnessTable(&unk_1000B5B9C, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC718);
  }
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Cropping.CodingKeys()
{
  return &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_10006B260 + 4 * byte_1000B55A2[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_10006B294 + 4 * byte_1000B559D[v4]))();
}

uint64_t sub_10006B294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006B2A4);
  return result;
}

uint64_t sub_10006B2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006B2B8);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_10006B2BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B2C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.CodingKeys()
{
  return &type metadata for ICAttachmentArchiveModel.CodingKeys;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Coordinate()
{
  return &type metadata for ICAttachmentArchiveModel.Coordinate;
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.ImageFilters(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10006B33C + 4 * byte_1000B55AC[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10006B370 + 4 * byte_1000B55A7[v4]))();
}

uint64_t sub_10006B370(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006B380);
  return result;
}

uint64_t sub_10006B38C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006B394);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10006B398(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B3A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.ImageFilters()
{
  return &type metadata for ICAttachmentArchiveModel.ImageFilters;
}

uint64_t _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s38com_apple_mobilenotes_SharingExtension24ICAttachmentArchiveModelV12OrientationsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10006B498 + 4 * byte_1000B55B6[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10006B4CC + 4 * byte_1000B55B1[v4]))();
}

uint64_t sub_10006B4CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B4D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006B4DCLL);
  return result;
}

uint64_t sub_10006B4E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006B4F0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10006B4F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B4FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Orientations()
{
  return &type metadata for ICAttachmentArchiveModel.Orientations;
}

uint64_t sub_10006B51C()
{
  return sub_100036140(&qword_1000EC738, &qword_1000EC740, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10006B54C()
{
  unint64_t result;

  result = qword_1000EC748;
  if (!qword_1000EC748)
  {
    result = swift_getWitnessTable(&unk_1000B58EC, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1000EC748);
  }
  return result;
}

uint64_t sub_10006B594()
{
  return sub_100036140(&qword_1000EC750, &qword_1000EC758, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10006B5C4()
{
  unint64_t result;

  result = qword_1000EC760;
  if (!qword_1000EC760)
  {
    result = swift_getWitnessTable(&unk_1000B5A04, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1000EC760);
  }
  return result;
}

unint64_t sub_10006B60C()
{
  unint64_t result;

  result = qword_1000EC768;
  if (!qword_1000EC768)
  {
    result = swift_getWitnessTable(&unk_1000B5ABC, &type metadata for ICAttachmentArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC768);
  }
  return result;
}

unint64_t sub_10006B654()
{
  unint64_t result;

  result = qword_1000EC770;
  if (!qword_1000EC770)
  {
    result = swift_getWitnessTable(&unk_1000B5B74, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC770);
  }
  return result;
}

unint64_t sub_10006B69C()
{
  unint64_t result;

  result = qword_1000EC778;
  if (!qword_1000EC778)
  {
    result = swift_getWitnessTable(&unk_1000B5AE4, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC778);
  }
  return result;
}

unint64_t sub_10006B6E4()
{
  unint64_t result;

  result = qword_1000EC780;
  if (!qword_1000EC780)
  {
    result = swift_getWitnessTable(&unk_1000B5B0C, &type metadata for ICAttachmentArchiveModel.Cropping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC780);
  }
  return result;
}

unint64_t sub_10006B72C()
{
  unint64_t result;

  result = qword_1000EC788;
  if (!qword_1000EC788)
  {
    result = swift_getWitnessTable(&unk_1000B5A2C, &type metadata for ICAttachmentArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC788);
  }
  return result;
}

unint64_t sub_10006B774()
{
  unint64_t result;

  result = qword_1000EC790;
  if (!qword_1000EC790)
  {
    result = swift_getWitnessTable(&unk_1000B5A54, &type metadata for ICAttachmentArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC790);
  }
  return result;
}

unint64_t sub_10006B7B8()
{
  unint64_t result;

  result = qword_1000EC798;
  if (!qword_1000EC798)
  {
    result = swift_getWitnessTable(&unk_1000B5874, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1000EC798);
  }
  return result;
}

unint64_t sub_10006B7FC()
{
  unint64_t result;

  result = qword_1000EC7A0;
  if (!qword_1000EC7A0)
  {
    result = swift_getWitnessTable(&unk_1000B598C, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1000EC7A0);
  }
  return result;
}

unint64_t sub_10006B840()
{
  unint64_t result;

  result = qword_1000EC7B0;
  if (!qword_1000EC7B0)
  {
    result = swift_getWitnessTable(&unk_1000B5DE4, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC7B0);
  }
  return result;
}

unint64_t sub_10006B884(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D6DA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_10006B8CC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D6E50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_10006B914(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x656475746974616CLL && a2 == 0xE800000000000000;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_10006BA04(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v13;
  char v14;
  char v15;

  v4 = sub_100030EE4(&qword_1000EC7B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10004242C(a1, v8);
  v10 = sub_10006B840();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys, v10, v8, v9);
  if (!v1)
  {
    v15 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v15, v4);
    v2 = v11;
    v14 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v14, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100035424(a1);
  return v2;
}

unint64_t sub_10006BB5C()
{
  unint64_t result;

  result = qword_1000EC7C0;
  if (!qword_1000EC7C0)
  {
    result = swift_getWitnessTable(&unk_1000B5954, &type metadata for ICAttachmentArchiveModel.ImageFilters);
    atomic_store(result, (unint64_t *)&qword_1000EC7C0);
  }
  return result;
}

unint64_t sub_10006BBA0()
{
  unint64_t result;

  result = qword_1000EC7C8;
  if (!qword_1000EC7C8)
  {
    result = swift_getWitnessTable(&unk_1000B583C, &type metadata for ICAttachmentArchiveModel.Orientations);
    atomic_store(result, (unint64_t *)&qword_1000EC7C8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.Coordinate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10006BC30 + 4 * byte_1000B55C0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006BC64 + 4 * byte_1000B55BB[v4]))();
}

uint64_t sub_10006BC64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006BC6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006BC74);
  return result;
}

uint64_t sub_10006BC80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006BC88);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10006BC8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006BC94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICAttachmentArchiveModel.Coordinate.CodingKeys()
{
  return &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys;
}

unint64_t sub_10006BCB4()
{
  unint64_t result;

  result = qword_1000EC7D0;
  if (!qword_1000EC7D0)
  {
    result = swift_getWitnessTable(&unk_1000B5DBC, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC7D0);
  }
  return result;
}

unint64_t sub_10006BCFC()
{
  unint64_t result;

  result = qword_1000EC7D8;
  if (!qword_1000EC7D8)
  {
    result = swift_getWitnessTable(&unk_1000B5D2C, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC7D8);
  }
  return result;
}

unint64_t sub_10006BD44()
{
  unint64_t result;

  result = qword_1000EC7E0;
  if (!qword_1000EC7E0)
  {
    result = swift_getWitnessTable(&unk_1000B5D54, &type metadata for ICAttachmentArchiveModel.Coordinate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC7E0);
  }
  return result;
}

uint64_t ICCloudSyncingObject.MoveAction.Types.init(fromParentObject:toParentObject:)(void *a1, void *a2)
{
  return sub_10006CEA0(a1, a2);
}

Swift::Int sub_10006BDB4()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10006BDF8()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10006BE20(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t ICCloudSyncingObject.MoveAction.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_type);
}

id ICCloudSyncingObject.MoveAction.object.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
}

id ICCloudSyncingObject.MoveAction.fromParentObject.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
}

id ICCloudSyncingObject.MoveAction.toParentObject.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
}

uint64_t ICCloudSyncingObject.MoveAction.isCopy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy);
}

id ICCloudSyncingObject.MoveAction.__allocating_init(type:object:fromParentObject:toParentObject:isCopy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  objc_class *v5;
  _BYTE *v11;
  objc_super v13;

  v11 = objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_type] = a1;
  *(_QWORD *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_object] = a2;
  *(_QWORD *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject] = a3;
  *(_QWORD *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject] = a4;
  v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy] = a5;
  v13.receiver = v11;
  v13.super_class = v5;
  return objc_msgSendSuper2(&v13, "init");
}

id ICCloudSyncingObject.MoveAction.init(type:object:fromParentObject:toParentObject:isCopy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _BYTE *v5;
  objc_class *ObjectType;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_type] = a1;
  *(_QWORD *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_object] = a2;
  *(_QWORD *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject] = a3;
  *(_QWORD *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject] = a4;
  v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy] = a5;
  v13.receiver = v5;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

id ICCloudSyncingObject.MoveAction.__allocating_init(object:fromParentObject:toParentObject:isCopy:)(void *a1, void *a2, void *a3, char a4)
{
  objc_class *v4;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t ObjectType;

  v9 = objc_allocWithZone(v4);
  if (!a2)
  {

    a1 = a3;
LABEL_8:

    ObjectType = swift_getObjectType(v9);
    swift_deallocPartialClassInstance(v9, ObjectType, 41, 7);
    return 0;
  }
  if (!a3)
  {

    goto LABEL_8;
  }
  v10 = a3;
  v11 = a2;
  v12 = sub_10006CEA0(v11, v10);
  if ((v13 & 1) != 0)
  {

    goto LABEL_8;
  }
  v14 = objc_msgSend(v9, "initWithType:object:fromParentObject:toParentObject:isCopy:", v12, a1, v11, v10, a4 & 1);

  return v14;
}

id ICCloudSyncingObject.MoveAction.init(object:fromParentObject:toParentObject:isCopy:)(void *a1, void *a2, void *a3, char a4)
{
  void *v4;
  void *v6;
  id v8;
  id v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t ObjectType;

  v6 = a1;
  if (!a2)
  {

    v6 = a3;
LABEL_8:

    ObjectType = swift_getObjectType(v4);
    swift_deallocPartialClassInstance(v4, ObjectType, 41, 7);
    return 0;
  }
  if (!a3)
  {

    goto LABEL_8;
  }
  v8 = a2;
  v9 = a3;
  v10 = sub_10006CEA0(v8, v9);
  if ((v11 & 1) != 0)
  {

    goto LABEL_8;
  }
  v12 = objc_msgSend(v4, "initWithType:object:fromParentObject:toParentObject:isCopy:", v10, v6, v8, v9, a4 & 1);

  return v12;
}

id ICCloudSyncingObject.MoveAction.__allocating_init(folder:toParentObject:isCopy:)(void *a1, void *a2, char a3)
{
  objc_class *v3;
  objc_class *v4;
  id v8;
  id v9;
  id v10;

  v4 = v3;
  v8 = objc_allocWithZone(v4);
  v9 = objc_msgSend(a1, "parent");
  if (!v9)
    v9 = objc_msgSend(a1, "account");
  v10 = objc_msgSend(v8, "initWithObject:fromParentObject:toParentObject:isCopy:", a1, v9, a2, a3 & 1);

  return v10;
}

id ICCloudSyncingObject.MoveAction.init(folder:toParentObject:isCopy:)(void *a1, void *a2, char a3)
{
  void *v3;
  void *v4;
  id v8;
  id v9;

  v4 = v3;
  v8 = objc_msgSend(a1, "parent");
  if (!v8)
    v8 = objc_msgSend(a1, "account");
  v9 = objc_msgSend(v4, "initWithObject:fromParentObject:toParentObject:isCopy:", a1, v8, a2, a3 & 1);

  return v9;
}

id ICCloudSyncingObject.MoveAction.__allocating_init(note:toFolder:isCopy:)(void *a1, void *a2, char a3)
{
  objc_class *v3;
  id v7;
  id v8;
  id v9;

  v7 = objc_allocWithZone(v3);
  v8 = objc_msgSend(a1, "folder");
  v9 = objc_msgSend(v7, "initWithObject:fromParentObject:toParentObject:isCopy:", a1, v8, a2, a3 & 1);

  return v9;
}

id ICCloudSyncingObject.MoveAction.init(note:toFolder:isCopy:)(void *a1, void *a2, char a3)
{
  void *v3;
  id v7;
  id v8;

  v7 = objc_msgSend(a1, "folder");
  v8 = objc_msgSend(v3, "initWithObject:fromParentObject:toParentObject:isCopy:", a1, v7, a2, a3 & 1);

  return v8;
}

void ICCloudSyncingObject.MoveAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("com_apple_mobilenotes_SharingExtension.MoveAction", 49, "init()", 6, 0);
  __break(1u);
}

Swift::Void __swiftcall ICCloudSyncingObject.persistParticipantActivityEvents(oldShare:newShare:)(CKShare_optional oldShare, CKShare_optional newShare)
{
  void *v2;
  void *v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  void (*v32)(_QWORD *, _QWORD);
  uint64_t v33;
  void *v34;
  int v35;
  id v36;
  char **v37;
  uint64_t v38;
  void *v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  _QWORD v44[4];
  uint64_t v45;

  v3 = *(void **)&oldShare.is_nil;
  isa = oldShare.value.super.super.isa;
  v43 = sub_100030EE4(&qword_1000EC810);
  v5 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100030EE4(&qword_1000EC818);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v42 = (char *)&v39 - v12;
  if (isa)
  {
    v13 = -[objc_class ic_nonCurrentUserParticipants](isa, "ic_nonCurrentUserParticipants");
    v14 = sub_100036000(0, &qword_1000EB930, CKShareParticipant_ptr);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_9;
  }
  else
  {
    v15 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_9;
  }
  if ((v15 & 0x4000000000000000) == 0)
  {
    v16 = v15 & 0xFFFFFFFFFFFFFF8;
    if (!v3)
      goto LABEL_10;
    goto LABEL_7;
  }
LABEL_9:
  v16 = (uint64_t)sub_100033AEC(v15);
  swift_bridgeObjectRelease(v15);
  if (!v3)
  {
LABEL_10:
    v19 = (unint64_t)_swiftEmptyArrayStorage;
    v39 = v2;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_18;
    goto LABEL_11;
  }
LABEL_7:
  v17 = objc_msgSend(v3, "ic_nonCurrentUserParticipants");
  v18 = sub_100036000(0, &qword_1000EB930, CKShareParticipant_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  v39 = v2;
  if ((v19 & 0x8000000000000000) != 0)
    goto LABEL_18;
LABEL_11:
  if ((v19 & 0x4000000000000000) == 0)
  {
    v20 = v19 & 0xFFFFFFFFFFFFFF8;
    goto LABEL_13;
  }
LABEL_18:
  v20 = (uint64_t)sub_100033AEC(v19);
  swift_bridgeObjectRelease(v19);
LABEL_13:
  v44[0] = v20;
  v45 = v16;
  v21 = sub_100030EE4(&qword_1000EB938);
  v22 = sub_100036140(&qword_1000EC820, &qword_1000EB938, (uint64_t)&protocol conformance descriptor for [A]);
  v23 = sub_10006D500();
  BidirectionalCollection<>.difference<A>(from:)(&v45, v21, v21, v22, v22, v23);
  swift_release(v20, v24);
  swift_release(v16, v25);
  v26 = v43;
  v41 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v41(v11, v7, v43);
  v27 = sub_100036140(&qword_1000EC830, &qword_1000EC810, (uint64_t)&protocol conformance descriptor for CollectionDifference<A>);
  dispatch thunk of Collection.startIndex.getter(v26, v27);
  v40 = *(void (**)(char *, uint64_t))(v5 + 8);
  v40(v7, v26);
  *(_QWORD *)&v11[*(int *)(v8 + 36)] = v44[0];
  v28 = (uint64_t)v42;
  sub_10006D558((uint64_t)v11, (uint64_t)v42);
  v29 = (uint64_t *)(v28 + *(int *)(v8 + 36));
  v30 = *v29;
  dispatch thunk of Collection.endIndex.getter(v44, v26, v27);
  v31 = v39;
  if (v30 != v44[0])
  {
    do
    {
      v32 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v44, v29, v26, v27);
      v34 = *(void **)(v33 + 8);
      v35 = *(unsigned __int8 *)(v33 + 25);
      v36 = v34;
      v32(v44, 0);
      v41(v7, v42, v43);
      dispatch thunk of Collection.formIndex(after:)(v29, v43, v27);
      v40(v7, v43);
      v37 = &selRef_persistRemoveParticipantActivityEventForObject_participant_;
      if (!v35)
        v37 = &selRef_persistAddParticipantActivityEventForObject_participant_;

      v28 = (uint64_t)v42;
      v26 = v43;

      v38 = *v29;
      dispatch thunk of Collection.endIndex.getter(v44, v26, v27);
    }
    while (v38 != v44[0]);
  }
  sub_100036060(v28, &qword_1000EC818);
}

Swift::Void __swiftcall ICCloudSyncingObject.persistJoinActivityEvent()()
{
  sub_10006CC7C(&enum case for PersistedActivityEvent.Activities.addParticipant(_:));
}

Swift::Void __swiftcall ICCloudSyncingObject.persistLeaveActivityEvent()()
{
  sub_10006CC7C(&enum case for PersistedActivityEvent.Activities.removeParticipant(_:));
}

uint64_t sub_10006CC7C(unsigned int *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;

  v19 = a1;
  v20 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100030EE4(&qword_1000EBED8);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActivityEventParticipant(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1;
  ActivityEventParticipant.init(cloudSyncingObject:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return sub_100036060((uint64_t)v11, &qword_1000EBED8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
  v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *v19, v5);
  Date.init()(v18);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_10006CEA0(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v9;
  id v10;
  void *v11;
  id v12;
  char v13;
  unsigned int v14;

  v4 = objc_opt_self(ICFolder);
  v5 = (void *)swift_dynamicCastObjCClass(a1, v4);
  if (v5 && objc_msgSend(v5, "isTrashFolder")
    || (v6 = objc_opt_self(ICFolder), (v7 = (void *)swift_dynamicCastObjCClass(a2, v6)) != 0)
    && objc_msgSend(v7, "isTrashFolder"))
  {

    return 0;
  }
  if (objc_msgSend(a1, "isSharedViaICloud") && objc_msgSend(a2, "isSharedViaICloud"))
  {
    v9 = objc_msgSend(a1, "sharedRootObject");
    v10 = objc_msgSend(a2, "sharedRootObject");
    v11 = v10;
    if (v9)
    {
      if (v10)
      {
        sub_100036000(0, (unint64_t *)&qword_1000EB810, ICCloudSyncingObject_ptr);
        v12 = v9;
        v13 = static NSObject.== infix(_:_:)(v12, v11);

        if ((v13 & 1) == 0)
          return 2;
        return 3;
      }

      v11 = a2;
    }
    else
    {

      if (!v11)
        return 3;
    }

    return 2;
  }
  if ((objc_msgSend(a1, "isSharedViaICloud") & 1) != 0)
  {
    v14 = objc_msgSend(a2, "isSharedViaICloud");

    if (v14)
      return 0;
    else
      return 4;
  }
  else
  {

    return 1;
  }
}

void _sSo20ICCloudSyncingObjectC38com_apple_mobilenotes_SharingExtensionE29undoablyPersistActivityEvents3for03oldC003newC0yAbCE10MoveActionC_ABSgAJtFZ_0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;

  switch(*(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_type))
  {
    case 0:
      return;
    case 1:
      if (!a3)
        return;
      v4 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      v29 = a3;
      if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) != 1)
        goto LABEL_28;
      v5 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
      v6 = a3;
      v7 = objc_msgSend(v6, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v6, v5, 0, v4);
      goto LABEL_29;
    case 2:
      v29 = a3;
      if (a2)
      {
        v12 = *(void **)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
        v13 = a2;
        v14 = objc_msgSend(v12, "sharedRootObject");
        if (v14)
        {
          v15 = v14;
          if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
            v16 = objc_msgSend(v14, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v13, *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object), v12, 0);
          else
            v16 = objc_msgSend(v14, "persistMoveActivityEventForObject:fromParentObject:toParentObject:", v13, v12, 0);
          v24 = v16;
          v25 = objc_msgSend((id)objc_opt_self(NSUndoManager), "shared");
          objc_msgSend(v25, "registerUndoForCloudSyncingObjectActivityEvent:cloudSyncingObject:", v24, v15);

          v13 = v25;
        }

        a3 = v29;
      }
      if (!a3)
        return;
      v4 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
      {
        v26 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
        v27 = a3;
        v7 = objc_msgSend(v27, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v27, v26, 0, v4);
      }
      else
      {
LABEL_28:
        v28 = a3;
        v7 = objc_msgSend(v28, "persistMoveActivityEventForObject:fromParentObject:toParentObject:", v28, 0, v4);
      }
      goto LABEL_29;
    case 3:
      if (!a3)
        return;
      v17 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
      v18 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      v29 = a3;
      if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
      {
        v19 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
        v20 = a3;
        v7 = objc_msgSend(v20, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v20, v19, v17, v18);
      }
      else
      {
        v21 = a3;
        v7 = objc_msgSend(v21, "persistMoveActivityEventForObject:fromParentObject:toParentObject:", v21, v17, v18);
      }
LABEL_29:
      v22 = v7;
      v23 = objc_msgSend((id)objc_opt_self(NSUndoManager), "shared");
      objc_msgSend(v23, "registerUndoForCloudSyncingObjectActivityEvent:cloudSyncingObject:", v22, v29);
      goto LABEL_30;
    case 4:
      if (!a2)
        return;
      v8 = *(void **)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
      v29 = a2;
      v9 = objc_msgSend(v8, "sharedRootObject");
      if (v9)
      {
        v10 = v9;
        if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
          v11 = objc_msgSend(v9, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v29, *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object), v8, 0);
        else
          v11 = objc_msgSend(v9, "persistMoveActivityEventForObject:fromParentObject:toParentObject:", v29, v8, 0);
        v22 = v11;
        v23 = objc_msgSend((id)objc_opt_self(NSUndoManager), "shared");
        objc_msgSend(v23, "registerUndoForCloudSyncingObjectActivityEvent:cloudSyncingObject:", v22, v10);

LABEL_30:
      }
      else
      {

      }
      return;
    default:
      v30 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_type);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ICCloudSyncingObject.MoveAction.Types, &v30, &type metadata for ICCloudSyncingObject.MoveAction.Types, &type metadata for Int);
      __break(1u);
      JUMPOUT(0x10006D4ECLL);
  }
}

unint64_t sub_10006D500()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC828;
  if (!qword_1000EC828)
  {
    v1 = sub_100036000(255, &qword_1000EB930, CKShareParticipant_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000EC828);
  }
  return result;
}

uint64_t sub_10006D558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EC818);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006D5AC()
{
  unint64_t result;

  result = qword_1000EC838;
  if (!qword_1000EC838)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICCloudSyncingObject.MoveAction.Types, &type metadata for ICCloudSyncingObject.MoveAction.Types);
    atomic_store(result, (unint64_t *)&qword_1000EC838);
  }
  return result;
}

uint64_t type metadata accessor for ICCloudSyncingObject.MoveAction()
{
  return objc_opt_self(ICCloudSyncingObjectMoveAction);
}

ValueMetadata *type metadata accessor for ICCloudSyncingObject.MoveAction.Types()
{
  return &type metadata for ICCloudSyncingObject.MoveAction.Types;
}

uint64_t sub_10006D620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;

  if (*(_QWORD *)(a1 + 16) == 1)
  {
    v1 = sub_100030EE4(&qword_1000EB8F8);
    ICObjectReferences.title.getter(v1);
    if (v2)
    {
      v3 = v2;
      v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v3);
      v5 = objc_msgSend(v4, "ic_sanitizedFilenameString");

      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      v9 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v9 = v6 & 0xFFFFFFFFFFFFLL;
      if (v9)
        return v6;
      swift_bridgeObjectRelease(v8);
    }
  }
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  return v14;
}

_QWORD *sub_10006D774(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10003F268(0, v1, 0);
    v3 = (_QWORD *)(a1 + 32);
    do
    {
      v4 = v3[3];
      v5 = v3[4];
      sub_10004242C(v3, v4);
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      v8 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10003F268(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_10003F268(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      v3 += 5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10006D890(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t result;
  Swift::Int v29;
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *);
  uint64_t v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;

  v40 = a5;
  v41 = a8;
  v48 = a1;
  v49 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v50 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8));
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = ((uint64_t (*)(void))__chkstk_darwin)();
  v18 = (char *)&v39 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a6);
  v42 = *(_QWORD *)(v21 - 8);
  v43 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v39 - v22;
  v24 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v24)
    return static Array._allocateUninitialized(_:)(0, a4);
  v46 = AssociatedTypeWitness;
  v25 = v8;
  v26 = a4;
  v27 = v24;
  v54 = ContiguousArray.init()(v26);
  v44 = type metadata accessor for ContiguousArray(0, v26);
  ContiguousArray.reserveCapacity(_:)(v27);
  v47 = v25;
  result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v29 = v27;
    v45 = v20;
    while (v29)
    {
      v51 = v29;
      v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v53, v23, a3, a6);
      v31 = *(void (**)(char *))(v15 + 16);
      v32 = v15;
      v33 = v46;
      v31(v18);
      v30(v53, 0);
      v34 = v23;
      v35 = v18;
      v36 = v45;
      v37 = v52;
      v48(v35, v50);
      if (v37)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
        swift_release(v54, v38);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v41, v50, v40);
      }
      v52 = 0;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      ContiguousArray.append(_:)(v36, v44);
      result = dispatch thunk of Collection.formIndex(after:)(v34, a3, a6);
      v29 = v51 - 1;
      v15 = v32;
      v18 = v35;
      v23 = v34;
      if (v51 == 1)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
        return v54;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006DB80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t static ICArchiveExporterConfiguration.default.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t IsAlexandriaDemoModeEnabled;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t result;

  if (qword_1000EB6B8 != -1)
    swift_once(&qword_1000EB6B8, sub_10007E8F0);
  v2 = static ICArchiveCreator.default;
  v4 = qword_1000F6970;
  v3 = unk_1000F6978;
  v5 = xmmword_1000F6980;
  swift_bridgeObjectRetain(*((_QWORD *)&xmmword_1000F6980 + 1));
  swift_bridgeObjectRetain(*((_QWORD *)&v2 + 1));
  v6 = swift_bridgeObjectRetain(v3);
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v6);
  v8 = IsAlexandriaDemoModeEnabled;
  v9 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
  v10 = v9;
  result = ICInternalSettingsIsAlexandriaDemoModeEnabled(v9);
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 49) = v10;
  *(_BYTE *)(a1 + 50) = result;
  *(_WORD *)(a1 + 51) = 0;
  return result;
}

uint64_t sub_10006DCE4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000EC868);
  sub_10003609C(v0, (uint64_t)qword_1000EC868);
  return static Logger.archiving.getter();
}

uint64_t sub_10006DD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  sub_1000360F8(v4, qword_1000EC880);
  sub_10003609C(v4, (uint64_t)qword_1000EC880);
  if (qword_1000EB6A8 != -1)
    swift_once(&qword_1000EB6A8, sub_10006DCE4);
  v5 = sub_10003609C(v0, (uint64_t)qword_1000EC868);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

uint64_t ICArchiveExporter.objectProvider.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t ICArchiveExporter.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007C2CC(v1 + 24, a1);
}

uint64_t ICArchiveExporter.fileManager.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 80));
}

uint64_t ICArchiveExporter.__allocating_init(objectProvider:configuration:fileManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  swift_allocObject(v4, 152, 7);
  v9 = sub_10007DBA8(a1, a2, a3, a4);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  return v9;
}

uint64_t ICArchiveExporter.init(objectProvider:configuration:fileManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_10007DBA8(a1, a2, a3, a4);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  return v6;
}

uint64_t sub_10006DF08()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _BYTE v7[24];
  _QWORD aBlock[3];
  void *ObjectType;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v2 = swift_allocObject(&unk_1000D94E0, 24, 7);
  swift_weakInit(v2 + 16, v0);
  v10 = sub_10007E57C;
  v11 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006DB80;
  ObjectType = &unk_1000D94F8;
  v3 = _Block_copy(aBlock);
  swift_release(v11, v4);
  v5 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", UIApplicationDidReceiveMemoryWarningNotification, 0, 0, v3);
  _Block_release(v3);

  ObjectType = (void *)swift_getObjectType(v5);
  aBlock[0] = v5;
  swift_beginAccess(v0 + 120, v7, 33, 0);
  sub_10004EFD0((uint64_t)aBlock, v0 + 120, &qword_1000EB6E8);
  return swift_endAccess(v7);
}

uint64_t sub_10006E04C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  id v9;
  _BYTE v11[24];
  _QWORD aBlock[3];
  void *ObjectType;
  uint64_t (*v14)(uint64_t);
  _QWORD *v15;

  v1 = v0;
  v2 = (uint64_t)(v0 + 15);
  v3 = *v0;
  v4 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v5 = swift_allocObject(&unk_1000D9530, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v6 = (_QWORD *)swift_allocObject(&unk_1000D9558, 40, 7);
  v6[2] = *(_QWORD *)(v3 + 80);
  v6[3] = *(_QWORD *)(v3 + 88);
  v6[4] = v5;
  v14 = sub_10007E5E4;
  v15 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006DB80;
  ObjectType = &unk_1000D9570;
  v7 = _Block_copy(aBlock);
  swift_release(v15, v8);
  v9 = objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", UIApplicationDidReceiveMemoryWarningNotification, 0, 0, v7);
  _Block_release(v7);

  ObjectType = (void *)swift_getObjectType(v9);
  aBlock[0] = v9;
  swift_beginAccess(v2, v11, 33, 0);
  sub_10004EFD0((uint64_t)aBlock, v2, &qword_1000EB6E8);
  return swift_endAccess(v11);
}

_QWORD *ICArchiveExporter.deinit()
{
  _QWORD *v0;

  sub_10006E20C();
  swift_unknownObjectRelease(v0[2]);
  sub_100048A48(v0[3], v0[4], v0[5], v0[6], v0[7], v0[8]);
  swift_unknownObjectRelease(v0[10]);
  sub_100036060((uint64_t)(v0 + 15), &qword_1000EB6E8);
  return v0;
}

void sub_10006E20C()
{
  uint64_t v0;
  id v1;
  _BYTE v2[32];
  _BYTE v3[24];

  swift_beginAccess(v0 + 120, v3, 0, 0);
  sub_100031044(v0 + 120, (uint64_t)v2, &qword_1000EB6E8);
  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  sub_100040578((uint64_t)v2, v1);

  sub_100036060((uint64_t)v2, &qword_1000EB6E8);
}

uint64_t ICArchiveExporter.__deallocating_deinit()
{
  uint64_t v0;

  ICArchiveExporter.deinit();
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t ICArchiveExporter.createArchive(for:at:progress:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;

  v5 = v3;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = ICArchiveExporter.createArchive(for:progress:)(a1, a3, (uint64_t)v12);
  if (!v4)
  {
    v14 = *(_QWORD *)(v5 + 88);
    ObjectType = swift_getObjectType(*(_QWORD *)(v5 + 80));
    dispatch thunk of ICFileManaging.removeItem(at:)(a2, ObjectType, v14);
    dispatch thunk of ICFileManaging.copyItem(at:to:)(v12, a2, ObjectType, v14);
    ICArchiveExporter.removeArchive(at:)((uint64_t)v12);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t sub_10006E404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[2];
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;

  v21[0] = a3;
  v6 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocBox(v7);
  v12 = v11;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v28 = 0;
  v23 = v12;
  v24 = v3;
  v25 = a1;
  v26 = a2;
  v27 = &v28;
  v15 = type metadata accessor for ICModernObjectProvider(0);
  v16 = sub_100042114(&qword_1000EC950, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
  v17 = v21[1];
  dispatch thunk of ICObjectProviding.performAndWait(task:)(sub_10007E090, v22, v15, v16);
  if (v17)
    goto LABEL_4;
  v18 = v21[0];
  sub_100031044(v12, (uint64_t)v9, (uint64_t *)&unk_1000EC2E0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v18, v9, v13);
LABEL_4:
    sub_10006EC04(v10, (uint64_t)&v28, v3);
    return swift_release(v10, v20);
  }
  __break(1u);
  return result;
}

uint64_t ICArchiveExporter.createArchive(for:progress:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;

  v21 = a2;
  v20 = a3;
  v5 = *v3;
  v6 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocBox(v7);
  v12 = v11;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v29 = 0;
  v24 = v12;
  v25 = v3;
  v15 = v22;
  v26 = a1;
  v27 = v21;
  v28 = &v29;
  dispatch thunk of ICObjectProviding.performAndWait(task:)(sub_10007DC18, v23, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88));
  if (v15)
    goto LABEL_4;
  v16 = v20;
  sub_100031044(v12, (uint64_t)v9, (uint64_t *)&unk_1000EC2E0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v16, v9, v13);
LABEL_4:
    sub_10006F1D8(v10, (uint64_t)&v29, (uint64_t)v3);
    return swift_release(v10, v18);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006E6EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v28 - v9;
  if (qword_1000EB6A8 != -1)
    swift_once(&qword_1000EB6A8, sub_10006DCE4);
  v11 = type metadata accessor for Logger(0);
  sub_10003609C(v11, (uint64_t)qword_1000EC868);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31 = a1;
  v13 = v12(v10, a1, v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v30 = v1;
    v17 = (uint8_t *)v16;
    v29 = swift_slowAlloc(32, -1);
    v34 = v29;
    *(_DWORD *)v17 = 136315138;
    v28 = v17 + 4;
    v18 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
    v21 = v20;
    v32 = sub_10005F12C(v19, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v28, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v10, v4);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Removing archiveâ€¦ {url: %s}", v17, 0xCu);
    v23 = v29;
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v24 = v17;
    v2 = v30;
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v10, v4);
  }

  v25 = *(_QWORD *)(v2 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 80));
  URL.deletingLastPathComponent()();
  dispatch thunk of ICFileManaging.removeItem(at:)(v8, ObjectType, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v8, v4);
}

uint64_t ICArchiveExporter.removeArchive(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v28 - v9;
  if (qword_1000EB6A8 != -1)
    swift_once(&qword_1000EB6A8, sub_10006DCE4);
  v11 = type metadata accessor for Logger(0);
  sub_10003609C(v11, (uint64_t)qword_1000EC868);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31 = a1;
  v13 = v12(v10, a1, v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v30 = v1;
    v17 = (uint8_t *)v16;
    v29 = swift_slowAlloc(32, -1);
    v34 = v29;
    *(_DWORD *)v17 = 136315138;
    v28 = v17 + 4;
    v18 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
    v21 = v20;
    v32 = sub_10005F12C(v19, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v28, v17 + 12);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v10, v4);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Removing archiveâ€¦ {url: %s}", v17, 0xCu);
    v23 = v29;
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v24 = v17;
    v2 = v30;
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v10, v4);
  }

  v25 = *(_QWORD *)(v2 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 80));
  URL.deletingLastPathComponent()();
  dispatch thunk of ICFileManaging.removeItem(at:)(v8, ObjectType, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v8, v4);
}

uint64_t sub_10006EC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t result;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57[3];
  uint64_t v58;
  _BYTE v59[24];

  v50 = a3;
  v51 = a2;
  v55 = (uint8_t *)type metadata accessor for Logger(0);
  v53 = *((_QWORD *)v55 - 1);
  __chkstk_darwin(v55);
  v52 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v49 - v9;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v49 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v49 - v19;
  v54 = a1;
  v21 = swift_projectBox(a1);
  swift_beginAccess(v21, v59, 0, 0);
  sub_100031044(v21, (uint64_t)v10, (uint64_t *)&unk_1000EC2E0);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v22(v10, 1, v11) == 1)
  {
    sub_100036060((uint64_t)v10, (uint64_t *)&unk_1000EC2E0);
LABEL_5:
    v51 = v12;
    v23 = v54;
    v24 = (uint64_t)v55;
    v25 = v52;
    v26 = v53;
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v27 = sub_10003609C(v24, (uint64_t)qword_1000EC868);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v27, v24);
    v28 = swift_retain_n(v23, 2);
    v29 = Logger.logObject.getter(v28);
    LODWORD(v50) = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v50))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v58 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_beginAccess(v21, v57, 0, 0);
      sub_100031044(v21, (uint64_t)v8, (uint64_t *)&unk_1000EC2E0);
      if (v22(v8, 1, v11) == 1)
      {
        result = swift_release(v54, v32);
        __break(1u);
      }
      else
      {
        v33 = v51;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v18, v8, v11);
        v34 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v35 = dispatch thunk of CustomStringConvertible.description.getter(v11, v34);
        v37 = v36;
        (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v11);
        v56 = sub_10005F12C(v35, v37, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 4, v30 + 12);
        swift_release_n(v54, 2);
        swift_bridgeObjectRelease(v37);
        _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v50, "Created archive {url: %s}", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        return (*(uint64_t (**)(char *, uint8_t *))(v53 + 8))(v52, v55);
      }
    }
    else
    {

      swift_release_n(v23, 2);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v25, v24);
    }
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v10, v11);
  if ((*(_BYTE *)v51 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    goto LABEL_5;
  }
  sub_10006E6EC((uint64_t)v20);
  if (qword_1000EB6A8 != -1)
    swift_once(&qword_1000EB6A8, sub_10006DCE4);
  sub_10003609C((uint64_t)v55, (uint64_t)qword_1000EC868);
  v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v15, v20, v11);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v57[0] = v43;
    *(_DWORD *)v42 = 136315138;
    v55 = v42 + 4;
    v44 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v11, v44);
    v47 = v46;
    v58 = sub_10005F12C(v45, v46, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v55, v42 + 12);
    swift_bridgeObjectRelease(v47);
    v48 = *(void (**)(char *, uint64_t))(v12 + 8);
    v48(v15, v11);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to create archive â€” removing temporary files {url: %s}", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    v48 = *(void (**)(char *, uint64_t))(v12 + 8);
    v48(v15, v11);
  }
  return ((uint64_t (*)(char *, uint64_t))v48)(v20, v11);
}

uint64_t sub_10006F1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t result;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57[3];
  uint64_t v58;
  _BYTE v59[24];

  v50 = a3;
  v51 = a2;
  v55 = (uint8_t *)type metadata accessor for Logger(0);
  v53 = *((_QWORD *)v55 - 1);
  __chkstk_darwin(v55);
  v52 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v49 - v9;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v49 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v49 - v19;
  v54 = a1;
  v21 = swift_projectBox(a1);
  swift_beginAccess(v21, v59, 0, 0);
  sub_100031044(v21, (uint64_t)v10, (uint64_t *)&unk_1000EC2E0);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v22(v10, 1, v11) == 1)
  {
    sub_100036060((uint64_t)v10, (uint64_t *)&unk_1000EC2E0);
LABEL_5:
    v51 = v12;
    v23 = v54;
    v24 = (uint64_t)v55;
    v25 = v52;
    v26 = v53;
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v27 = sub_10003609C(v24, (uint64_t)qword_1000EC868);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v27, v24);
    v28 = swift_retain_n(v23, 2);
    v29 = Logger.logObject.getter(v28);
    LODWORD(v50) = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v50))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v58 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_beginAccess(v21, v57, 0, 0);
      sub_100031044(v21, (uint64_t)v8, (uint64_t *)&unk_1000EC2E0);
      if (v22(v8, 1, v11) == 1)
      {
        result = swift_release(v54, v32);
        __break(1u);
      }
      else
      {
        v33 = v51;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v15, v8, v11);
        v34 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v35 = dispatch thunk of CustomStringConvertible.description.getter(v11, v34);
        v37 = v36;
        (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v11);
        v56 = sub_10005F12C(v35, v37, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 4, v30 + 12);
        swift_release_n(v54, 2);
        swift_bridgeObjectRelease(v37);
        _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v50, "Created archive {url: %s}", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        return (*(uint64_t (**)(char *, uint8_t *))(v53 + 8))(v52, v55);
      }
    }
    else
    {

      swift_release_n(v23, 2);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v25, v24);
    }
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v10, v11);
  if ((*(_BYTE *)v51 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    goto LABEL_5;
  }
  ICArchiveExporter.removeArchive(at:)((uint64_t)v20);
  if (qword_1000EB6A8 != -1)
    swift_once(&qword_1000EB6A8, sub_10006DCE4);
  sub_10003609C((uint64_t)v55, (uint64_t)qword_1000EC868);
  v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v18, v20, v11);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v57[0] = v43;
    *(_DWORD *)v42 = 136315138;
    v55 = v42 + 4;
    v44 = sub_100042114(&qword_1000EBAF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v11, v44);
    v47 = v46;
    v58 = sub_10005F12C(v45, v46, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v55, v42 + 12);
    swift_bridgeObjectRelease(v47);
    v48 = *(void (**)(char *, uint64_t))(v12 + 8);
    v48(v18, v11);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to create archive â€” removing temporary files {url: %s}", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    v48 = *(void (**)(char *, uint64_t))(v12 + 8);
    v48(v18, v11);
  }
  return ((uint64_t (*)(char *, uint64_t))v48)(v20, v11);
}

uint64_t sub_10006F7AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _BYTE *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t ObjectType;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (**v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  NSURL *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_signpost_type_t v66;
  uint64_t v67;
  uint64_t v68;
  void (**v69)(char *, uint64_t, uint64_t);
  char *v70;
  uint8_t *v71;
  os_signpost_id_t v72;
  char *v73;
  void (**v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void (*v80)(char *, unint64_t, uint64_t);
  uint64_t v81;
  BOOL v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint8_t *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  NSObject *v95;
  char *v96;
  uint64_t v97;
  os_signpost_type_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  os_signpost_type_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  const char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint8_t *v120;
  os_signpost_id_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  const char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint8_t *v136;
  os_signpost_id_t v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, uint64_t);
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  _BYTE *v155;
  char *v156;
  void (**v157)(char *, uint64_t, uint64_t);
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;

  v164 = a1;
  v155 = a5;
  v159 = a4;
  v152 = type metadata accessor for OSSignpostError(0);
  v154 = *(_QWORD *)(v152 - 8);
  v7 = __chkstk_darwin(v152);
  v148 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v147 = (char *)&v138 - v10;
  __chkstk_darwin(v9);
  v150 = (char *)&v138 - v11;
  v161 = sub_100030EE4(&qword_1000EB8F8);
  v166 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v153 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSSignposter(0);
  v157 = *(void (***)(char *, uint64_t, uint64_t))(v13 - 8);
  v158 = v13;
  __chkstk_darwin(v13);
  v156 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for OSSignpostID(0);
  v160 = *(_QWORD *)(v162 - 8);
  v15 = __chkstk_darwin(v162);
  v151 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v149 = (char *)&v138 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v138 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v138 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v138 - v25;
  v27 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v138 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v138 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v138 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v138 - v37;
  v163 = a2;
  v39 = v165;
  result = sub_100070E9C(a3, (uint64_t)&v138 - v37);
  if (!v39)
  {
    v143 = v33;
    v142 = v30;
    v145 = a3;
    v141 = v21;
    v144 = v24;
    v165 = 0;
    v146 = v26;
    v41 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v41 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v38, 0, 1, v41);
    v43 = v164;
    sub_10004EFD0((uint64_t)v38, v164, (uint64_t *)&unk_1000EC2E0);
    v44 = *(_QWORD *)(v163 + 80);
    v45 = *(_QWORD *)(v163 + 88);
    sub_100031044(v43, (uint64_t)v36, (uint64_t *)&unk_1000EC2E0);
    v46 = *(char **)(v42 + 48);
    v47 = v41;
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v36, 1, v41);
    if ((_DWORD)result == 1)
    {
      __break(1u);
LABEL_45:
      __break(1u);
    }
    else
    {
      ObjectType = swift_getObjectType(v44);
      v49 = v165;
      dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v36, 1, ObjectType, v45);
      v50 = v49;
      v51 = v161;
      if (v49)
        return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v36, v41);
      v140 = *(void (**)(char *, uint64_t))(v42 + 8);
      v140(v36, v41);
      if (qword_1000EB6B0 != -1)
        goto LABEL_43;
      while (1)
      {
        v165 = v50;
        v52 = v158;
        v53 = sub_10003609C(v158, (uint64_t)qword_1000EC880);
        v54 = v156;
        v55 = v157;
        v157[2](v156, v53, v52);
        v56 = v43;
        v57 = (uint64_t)v143;
        sub_100031044(v56, (uint64_t)v143, (uint64_t *)&unk_1000EC2E0);
        v139 = v46;
        result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v46)(v57, 1, v47);
        if ((_DWORD)result == 1)
          goto LABEL_45;
        v59 = v47;
        URL._bridgeToObjectiveC()(v58);
        v61 = v60;
        v62 = OSSignposter.logHandle.getter(v60);
        OSSignpostID.init(log:object:)(v62, v61);
        ((void (*)(char *, uint64_t))v55[1])(v54, v52);
        v63 = v57;
        v43 = v59;
        v64 = ((uint64_t (*)(uint64_t, uint64_t))v140)(v63, v59);
        v158 = v53;
        v65 = OSSignposter.logHandle.getter(v64);
        v66 = static os_signpost_type_t.begin.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v67 = v160;
          v68 = v162;
          v69 = *(void (***)(char *, uint64_t, uint64_t))(v160 + 16);
          v70 = v144;
          ((void (*)(char *, char *, uint64_t))v69)(v144, v146, v162);
          v71 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v71 = 0;
          v72 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, v66, v72, "Create Archive", "", v71, 2u);
          swift_slowDealloc(v71, -1, -1);

          v73 = v70;
          (*(void (**)(char *, uint64_t))(v67 + 8))(v70, v68);
          v74 = v69;
        }
        else
        {

          v74 = *(void (***)(char *, uint64_t, uint64_t))(v160 + 16);
          v73 = v144;
        }
        v157 = v74;
        ((void (*)(char *, char *, uint64_t))v74)(v73, v146, v162);
        v75 = type metadata accessor for OSSignpostIntervalState(0);
        swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
        v76 = OSSignpostIntervalState.init(id:isOpen:)(v73, 1);
        v77 = v145;
        v47 = *(_QWORD *)(v145 + 16);
        if (!v47)
          break;
        v78 = v145 + ((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80));
        v79 = *(_QWORD *)(v166 + 72);
        v80 = *(void (**)(char *, unint64_t, uint64_t))(v166 + 16);
        swift_bridgeObjectRetain(v145);
        v46 = 0;
        v50 = v153;
        while (1)
        {
          v80(v50, v78, v51);
          v81 = ICObjectReferences.recursiveNoteCount.getter(v51);
          v82 = __OFADD__(v46, v81);
          v46 += v81;
          if (v82)
            break;
          (*(void (**)(char *, uint64_t))(v166 + 8))(v50, v51);
          v78 += v79;
          if (!--v47)
          {
            v77 = v145;
            swift_bridgeObjectRelease(v145);
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_43:
        swift_once(&qword_1000EB6B0, sub_10006DD2C);
      }
      v46 = 0;
LABEL_16:
      v83 = v159;
      if (qword_1000EB6A8 != -1)
        swift_once(&qword_1000EB6A8, sub_10006DCE4);
      v84 = type metadata accessor for Logger(0);
      v85 = sub_10003609C(v84, (uint64_t)qword_1000EC868);
      v86 = Logger.logObject.getter(v85);
      v87 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v88 = 134217984;
        v77 = v145;
        v167 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, &v168, v88 + 4, v88 + 12);
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Exporting notesâ€¦ {noteCount: %ld}", v88, 0xCu);
        v89 = v88;
        v83 = v159;
        swift_slowDealloc(v89, -1, -1);
      }

      objc_msgSend(v83, "setTotalUnitCount:", v46);
      v90 = (uint64_t)v142;
      sub_100031044(v164, (uint64_t)v142, (uint64_t *)&unk_1000EC2E0);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v139)(v90, 1, v43);
      v91 = v165;
      if ((_DWORD)result != 1)
      {
        sub_1000713D0(v90, v77, v83);
        v92 = v160;
        v93 = v155;
        if (v91)
        {
          v94 = ((uint64_t (*)(uint64_t, uint64_t))v140)(v90, v43);
          v95 = OSSignposter.logHandle.getter(v94);
          v96 = v141;
          v97 = OSSignpostIntervalState.signpostID.getter();
          v98 = static os_signpost_type_t.end.getter(v97);
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            v99 = swift_retain(v76);
            v100 = v150;
            checkForErrorAndConsumeState(state:)(v99);
            swift_release(v76, v101);
            v102 = v154;
            v103 = v152;
            v104 = (*(uint64_t (**)(char *, uint64_t))(v154 + 88))(v100, v152);
            v156 = (char *)v76;
            if (v104 == enum case for OSSignpostError.doubleEnd(_:))
            {
              v116 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v103);
              v116 = "";
            }
            v117 = v141;
            v118 = v144;
            v119 = v162;
            ((void (*)(char *, char *, uint64_t))v157)(v144, v141, v162);
            v120 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v120 = 0;
            v121 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v95, v98, v121, "Create Archive", v116, v120, 2u);
            swift_slowDealloc(v120, -1, -1);

            v122 = *(void (**)(char *, uint64_t))(v92 + 8);
            v122(v117, v119);
            v122(v118, v119);
            v76 = (uint64_t)v156;
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        v140((char *)v90, v43);
        NSProgress.throwIfCancelled()();
        if (v106)
        {
          v95 = OSSignposter.logHandle.getter(v105);
          v96 = v151;
          v107 = OSSignpostIntervalState.signpostID.getter();
          v108 = static os_signpost_type_t.end.getter(v107);
          v109 = OS_os_log.signpostsEnabled.getter();
          v110 = v154;
          if ((v109 & 1) != 0)
          {
            v111 = swift_retain(v76);
            v112 = v148;
            checkForErrorAndConsumeState(state:)(v111);
            swift_release(v76, v113);
            v114 = v152;
            v115 = (*(uint64_t (**)(char *, uint64_t))(v110 + 88))(v112, v152);
            v165 = v106;
            if (v115 == enum case for OSSignpostError.doubleEnd(_:))
            {
              v132 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v114);
              v132 = "";
            }
            v133 = v151;
LABEL_39:
            v134 = v144;
            v135 = v162;
            ((void (*)(char *, char *, uint64_t))v157)(v144, v133, v162);
            v136 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v136 = 0;
            v137 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v95, v108, v137, "Create Archive", v132, v136, 2u);
            swift_slowDealloc(v136, -1, -1);

            v122 = *(void (**)(char *, uint64_t))(v92 + 8);
            v122(v133, v135);
            v122(v134, v135);
            goto LABEL_40;
          }
        }
        else
        {
          *v93 = 1;
          v95 = OSSignposter.logHandle.getter(v105);
          v96 = v149;
          v124 = OSSignpostIntervalState.signpostID.getter();
          v108 = static os_signpost_type_t.end.getter(v124);
          v125 = OS_os_log.signpostsEnabled.getter();
          v126 = v154;
          if ((v125 & 1) != 0)
          {
            v127 = swift_retain(v76);
            v128 = v147;
            checkForErrorAndConsumeState(state:)(v127);
            swift_release(v76, v129);
            v130 = v152;
            v131 = (*(uint64_t (**)(char *, uint64_t))(v126 + 88))(v128, v152);
            v165 = 0;
            if (v131 == enum case for OSSignpostError.doubleEnd(_:))
            {
              v132 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v126 + 8))(v128, v130);
              v132 = "";
            }
            v133 = v149;
            goto LABEL_39;
          }
        }
LABEL_36:

        v122 = *(void (**)(char *, uint64_t))(v92 + 8);
        v122(v96, v162);
LABEL_40:
        swift_release(v76, v123);
        return ((uint64_t (*)(char *, uint64_t))v122)(v146, v162);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000702FC(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, _BYTE *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  NSURL *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_signpost_type_t v61;
  char v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint8_t *v66;
  os_signpost_id_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t AssociatedTypeWitness;
  uint64_t v77;
  uint64_t v78;
  uint64_t WitnessTable;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  char *v88;
  void *v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  os_signpost_type_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  char *v107;
  uint64_t v108;
  os_signpost_type_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  char *v117;
  char *v118;
  uint8_t *v119;
  os_signpost_id_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  char *v128;
  char *v129;
  uint8_t *v130;
  os_signpost_id_t v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  char *v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  _BYTE *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD v159[3];
  uint64_t v160;
  uint64_t v161;

  v157 = a1;
  v147 = a4;
  v148 = a5;
  v146 = *a2;
  v145 = type metadata accessor for OSSignpostError(0);
  v150 = *(_QWORD *)(v145 - 8);
  v7 = __chkstk_darwin(v145);
  v142 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v143 = (char *)&v132 - v10;
  __chkstk_darwin(v9);
  v141 = (char *)&v132 - v11;
  v154 = type metadata accessor for OSSignposter(0);
  v152 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v151 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for OSSignpostID(0);
  v153 = *(_QWORD *)(v155 - 8);
  v13 = __chkstk_darwin(v155);
  v144 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v149 = (char *)&v132 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v132 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v132 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v132 - v23;
  v25 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v132 - v30;
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v132 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v132 - v35;
  v156 = a2;
  v37 = v158;
  result = sub_10007109C(a3, (uint64_t)&v132 - v35);
  if (v37)
    return result;
  v137 = v31;
  v136 = v28;
  v139 = a3;
  v134 = v19;
  v158 = 0;
  v138 = v22;
  v140 = v24;
  v39 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v39 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
  v41 = v157;
  sub_10004EFD0((uint64_t)v36, v157, (uint64_t *)&unk_1000EC2E0);
  v42 = v156[10];
  v43 = v156[11];
  sub_100031044(v41, (uint64_t)v34, (uint64_t *)&unk_1000EC2E0);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  result = v44(v34, 1, v39);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    return result;
  }
  ObjectType = swift_getObjectType(v42);
  v46 = v158;
  dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v34, 1, ObjectType, v43);
  v47 = v154;
  if (v46)
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v34, v39);
  v48 = v41;
  v135 = *(void (**)(char *, uint64_t))(v40 + 8);
  v135(v34, v39);
  if (qword_1000EB6B0 != -1)
    swift_once(&qword_1000EB6B0, sub_10006DD2C);
  v158 = 0;
  v49 = sub_10003609C(v47, (uint64_t)qword_1000EC880);
  v51 = v151;
  v50 = v152;
  (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v49, v47);
  v52 = v137;
  sub_100031044(v48, (uint64_t)v137, (uint64_t *)&unk_1000EC2E0);
  result = v44(v52, 1, v39);
  if ((_DWORD)result == 1)
    goto LABEL_40;
  URL._bridgeToObjectiveC()(v53);
  v55 = v54;
  v56 = v51;
  v57 = OSSignposter.logHandle.getter(v54);
  v58 = v140;
  OSSignpostID.init(log:object:)(v57, v55);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v47);
  v154 = v39;
  v59 = ((uint64_t (*)(char *, uint64_t))v135)(v52, v39);
  v151 = (char *)v49;
  v60 = OSSignposter.logHandle.getter(v59);
  v61 = static os_signpost_type_t.begin.getter();
  v62 = OS_os_log.signpostsEnabled.getter();
  v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  if ((v62 & 1) != 0)
  {
    v63 = v153;
    v64 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
    v65 = v138;
    v64(v138, v58, v155);
    v66 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v66 = 0;
    v67 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v60, v61, v67, "Create Archive", "", v66, 2u);
    v68 = v155;
    swift_slowDealloc(v66, -1, -1);

    v69 = v65;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v68);
    v70 = v64;
    v71 = v58;
    v72 = v139;
  }
  else
  {

    v70 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
    v71 = v58;
    v69 = v138;
    v72 = v139;
    v68 = v155;
  }
  v137 = (char *)v70;
  v70(v69, v71, v68);
  v73 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v152 = OSSignpostIntervalState.init(id:isOpen:)(v69, 1);
  v159[0] = 0;
  v159[1] = v72;
  __chkstk_darwin(v152);
  v74 = *(_QWORD *)(v146 + 80);
  v75 = *(_QWORD *)(v146 + 88);
  *(&v132 - 2) = v74;
  *(&v132 - 1) = v75;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v75);
  swift_getAssociatedConformanceWitness(v75, v74, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v77 = type metadata accessor for ICObjectReferences(255);
  v78 = type metadata accessor for Array(0, v77);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v78);
  v80 = v158;
  Sequence.reduce<A>(_:_:)(&v160, v159, sub_10007E71C, &v132 - 4, v78, &type metadata for Int, WitnessTable);
  v81 = v160;
  v82 = (uint64_t)v136;
  if (qword_1000EB6A8 != -1)
    swift_once(&qword_1000EB6A8, sub_10006DCE4);
  v83 = type metadata accessor for Logger(0);
  v84 = sub_10003609C(v83, (uint64_t)qword_1000EC868);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.debug.getter();
  v87 = os_log_type_enabled(v85, v86);
  v88 = v149;
  v89 = v147;
  if (v87)
  {
    v90 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v90 = 134217984;
    v160 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161, v90 + 4, v90 + 12);
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Exporting notesâ€¦ {noteCount: %ld}", v90, 0xCu);
    swift_slowDealloc(v90, -1, -1);
  }

  objc_msgSend(v89, "setTotalUnitCount:", v81);
  sub_100031044(v157, v82, (uint64_t *)&unk_1000EC2E0);
  result = v133(v82, 1, v154);
  v91 = v155;
  v92 = v150;
  v93 = v148;
  if ((_DWORD)result == 1)
    goto LABEL_41;
  sub_10007239C(v82, v139, (uint64_t)v89);
  v94 = v152;
  if (!v80)
  {
    v135((char *)v82, v154);
    NSProgress.throwIfCancelled()();
    v158 = v105;
    if (v105)
    {
      v106 = OSSignposter.logHandle.getter(v104);
      v107 = v144;
      v108 = OSSignpostIntervalState.signpostID.getter();
      v109 = static os_signpost_type_t.end.getter(v108);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v110 = swift_retain(v94);
        v111 = v142;
        checkForErrorAndConsumeState(state:)(v110);
        swift_release(v94, v112);
        v113 = v145;
        if ((*(unsigned int (**)(char *, uint64_t))(v92 + 88))(v111, v145) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v114 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v92 + 8))(v111, v113);
          v114 = "";
        }
        v128 = v144;
LABEL_36:
        v129 = v138;
        ((void (*)(char *, char *, uint64_t))v137)(v138, v128, v91);
        v130 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v130 = 0;
        v131 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v106, v109, v131, "Create Archive", v114, v130, 2u);
        v91 = v155;
        swift_slowDealloc(v130, -1, -1);

        v126 = *(void (**)(char *, uint64_t))(v153 + 8);
        v126(v128, v91);
        v126(v129, v91);
        goto LABEL_37;
      }
    }
    else
    {
      *v93 = 1;
      v106 = OSSignposter.logHandle.getter(v104);
      v107 = v134;
      v121 = OSSignpostIntervalState.signpostID.getter();
      v109 = static os_signpost_type_t.end.getter(v121);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v122 = swift_retain(v94);
        v123 = v141;
        checkForErrorAndConsumeState(state:)(v122);
        swift_release(v94, v124);
        v125 = v145;
        if ((*(unsigned int (**)(char *, uint64_t))(v92 + 88))(v123, v145) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v114 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v92 + 8))(v123, v125);
          v114 = "";
        }
        v128 = v134;
        goto LABEL_36;
      }
    }

    v126 = *(void (**)(char *, uint64_t))(v153 + 8);
    v126(v107, v91);
LABEL_37:
    swift_release(v94, v127);
    return ((uint64_t (*)(char *, uint64_t))v126)(v140, v91);
  }
  v95 = ((uint64_t (*)(uint64_t, uint64_t))v135)(v82, v154);
  v96 = OSSignposter.logHandle.getter(v95);
  v97 = OSSignpostIntervalState.signpostID.getter();
  v98 = static os_signpost_type_t.end.getter(v97);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    swift_retain(v94);
    v99 = v94;
    v100 = v143;
    checkForErrorAndConsumeState(state:)(v99);
    swift_release(v99, v101);
    v102 = v145;
    if ((*(unsigned int (**)(char *, uint64_t))(v92 + 88))(v100, v145) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v103 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v92 + 8))(v100, v102);
      v103 = "";
    }
    v117 = v138;
    ((void (*)(char *, char *, uint64_t))v137)(v138, v88, v91);
    v118 = v88;
    v119 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v119 = 0;
    v120 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v96, v98, v120, "Create Archive", v103, v119, 2u);
    v91 = v155;
    swift_slowDealloc(v119, -1, -1);

    v115 = *(void (**)(char *, uint64_t))(v153 + 8);
    v115(v118, v91);
    v115(v117, v91);
    v94 = v152;
  }
  else
  {

    v115 = *(void (**)(char *, uint64_t))(v153 + 8);
    v115(v88, v91);
  }
  swift_release(v94, v116);
  return ((uint64_t (*)(char *, uint64_t))v115)(v140, v91);
}

uint64_t sub_100070E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v35 = a2;
  v4 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v31 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(v2 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 80));
  result = dispatch thunk of ICFileManaging.url(for:)(13, ObjectType, v17);
  if (!v3)
  {
    URL.appendingPathComponent(_:isDirectory:)(0x7365766968637241, 0xE800000000000000, 1);
    v20 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    v21 = v20(v11, v7);
    v22 = UUID.init()(v21);
    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v33);
    URL.appendingPathComponent(_:isDirectory:)(v23, v25, 1);
    swift_bridgeObjectRelease(v25);
    v20(v14, v7);
    sub_10006D620(v34);
    v27 = v26;
    v28 = _sSo9ICArchiveC38com_apple_mobilenotes_SharingExtensionE15archiveFilename8forTitleS2S_tFZ_0();
    v30 = v29;
    swift_bridgeObjectRelease(v27);
    URL.appendingPathComponent(_:isDirectory:)(v28, v30, 1);
    swift_bridgeObjectRelease(v30);
    return v20(v16, v7);
  }
  return result;
}

uint64_t sub_10007109C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a1;
  v39 = a2;
  v36 = *v2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v40 - 8);
  v9 = __chkstk_darwin(v40);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v36 - v13;
  __chkstk_darwin(v12);
  v37 = (char *)&v36 - v15;
  v16 = v2[11];
  ObjectType = swift_getObjectType(v2[10]);
  result = dispatch thunk of ICFileManaging.url(for:)(13, ObjectType, v16);
  if (!v3)
  {
    URL.appendingPathComponent(_:isDirectory:)(0x7365766968637241, 0xE800000000000000, 1);
    v19 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    v20 = v19(v11, v40);
    v21 = UUID.init()(v20);
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v25 = v37;
    URL.appendingPathComponent(_:isDirectory:)(v22, v24, 1);
    swift_bridgeObjectRelease(v24);
    v26 = v14;
    v27 = v40;
    v19(v26, v40);
    sub_100036000(0, &qword_1000EC988, ICArchive_ptr);
    v29 = *(_QWORD *)(v36 + 80);
    v28 = *(_QWORD *)(v36 + 88);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v28);
    swift_getAssociatedConformanceWitness(v28, v29, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
    static ICArchive.archiveTitle<A>(for:)(v38);
    v32 = v31;
    v33 = _sSo9ICArchiveC38com_apple_mobilenotes_SharingExtensionE15archiveFilename8forTitleS2S_tFZ_0();
    v35 = v34;
    swift_bridgeObjectRelease(v32);
    URL.appendingPathComponent(_:isDirectory:)(v33, v35, 1);
    swift_bridgeObjectRelease(v35);
    return v19(v25, v27);
  }
  return result;
}

uint64_t sub_10007131C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t result;

  v7 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v9 = type metadata accessor for ICObjectReferences(0);
  result = ICObjectReferences.recursiveNoteCount.getter(v9);
  if (__OFADD__(v7, result))
    __break(1u);
  else
    *a4 = v7 + result;
  return result;
}

uint64_t sub_1000713D0(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char v37;
  void (*v38)(char *, _QWORD *);
  void (*v39)(char *, char *, uint64_t);
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  int64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  void (*v85)(char *, _QWORD *);
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  int64_t v94;
  _QWORD *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t ObjectType;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  int *v141;
  char *v142;
  int *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  void (*v154)(char *, unint64_t, uint64_t);
  char *v155;
  char *v156;
  _QWORD *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  char v168[8];

  v4 = v3;
  v144 = a3;
  v139 = type metadata accessor for URL(0);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v8 = (char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ICArchiveModel(0);
  __chkstk_darwin(v9);
  v11 = (int *)((char *)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100030EE4(&qword_1000EC958);
  v160 = *(_QWORD *)(v12 - 8);
  v161 = (_QWORD *)v12;
  v13 = __chkstk_darwin(v12);
  v159 = (char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v158 = (char *)&v137 - v15;
  v150 = sub_100030EE4(&qword_1000EB8F8);
  v162 = *(_QWORD *)(v150 - 8);
  v16 = __chkstk_darwin(v150);
  v151 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v137 - v19;
  v21 = __chkstk_darwin(v18);
  v156 = (char *)&v137 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v137 - v23;
  if ((v4[12] & 1) != 0)
  {
    __break(1u);
LABEL_97:
    swift_once(&qword_1000EB650, sub_10002F9E0);
LABEL_85:
    v124 = sub_100042114(&qword_1000EC980, type metadata accessor for ICArchiveModel, (uint64_t)&unk_1000B4C10);
    v125 = v161;
    v126 = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, v11, v124);
    v4 = v147;
    v128 = v142;
    if (v125)
    {
      result = sub_100042220(a1, type metadata accessor for ICArchiveModel);
    }
    else
    {
      v129 = v126;
      v130 = v127;
      v131 = v147[11];
      ObjectType = swift_getObjectType(v147[10]);
      if (qword_1000EB638 != -1)
        swift_once(&qword_1000EB638, sub_10002F85C);
      URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v128, v129, v130, ObjectType, v131);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v128, v139);
      v133 = v145;
      if (v145)
      {
        v134 = v148 + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
        v135 = *(_QWORD *)(v162 + 72);
        swift_bridgeObjectRetain(v148);
        do
        {
          v136 = v133;
          sub_100073194(v134, v146, v144);
          v134 += v135;
          --v133;
        }
        while (v136 != 1);
        swift_bridgeObjectRelease(v148);
      }
      sub_100042220((uint64_t)v143, type metadata accessor for ICArchiveModel);
      result = sub_100040B10(v129, v130);
    }
    goto LABEL_90;
  }
  v141 = (int *)v9;
  v146 = a1;
  v143 = v11;
  *((_BYTE *)v4 + 96) = 1;
  *(_QWORD *)&v166 = _swiftEmptyArrayStorage;
  v25 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(a2);
  v147 = v4;
  v148 = a2;
  v142 = v8;
  v145 = v25;
  if (v25)
  {
    v140 = v20;
    v26 = *(char **)(v162 + 72);
    v149 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
    v27 = a2 + v149;
    v154 = *(void (**)(char *, unint64_t, uint64_t))(v162 + 16);
    LODWORD(v153) = enum case for ICObjectReferences.Types.account<A>(_:);
    v152 = _swiftEmptyArrayStorage;
    v28 = v150;
    v29 = v24;
    v155 = v26;
    v154(v24, a2 + v149, v150);
    while (1)
    {
      v31 = v158;
      ICObjectReferences.type.getter(v28);
      v32 = v160;
      v33 = v161;
      v34 = v29;
      v35 = v159;
      (*(void (**)(char *, _QWORD, _QWORD *))(v160 + 104))(v159, v153, v161);
      v36 = sub_10007E0D0();
      v37 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v35, v33, v36);
      v38 = *(void (**)(char *, _QWORD *))(v32 + 8);
      v38(v35, v33);
      v38(v31, v33);
      if ((v37 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v162 + 8))(v34, v28);
        v29 = v34;
        v30 = v155;
      }
      else
      {
        v39 = *(void (**)(char *, char *, uint64_t))(v162 + 32);
        v39(v156, v34, v28);
        v40 = v152;
        v29 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native(v152) & 1) == 0)
        {
          sub_10003F394(0, v40[2] + 1, 1);
          v28 = v150;
        }
        v41 = (_QWORD *)v166;
        v43 = *(_QWORD *)(v166 + 16);
        v42 = *(_QWORD *)(v166 + 24);
        v30 = v155;
        if (v43 >= v42 >> 1)
        {
          sub_10003F394(v42 > 1, v43 + 1, 1);
          v28 = v150;
          v41 = (_QWORD *)v166;
        }
        v41[2] = v43 + 1;
        v152 = v41;
        v39((char *)v41 + v149 + v43 * (_QWORD)v30, v156, v28);
      }
      v27 += (unint64_t)v30;
      if (!--v25)
        break;
      v154(v29, v27, v28);
    }
    v44 = (void (*)(char *, unint64_t, uint64_t))v166;
    v4 = v147;
    a2 = v148;
    v20 = v140;
  }
  else
  {
    v44 = (void (*)(char *, unint64_t, uint64_t))_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(a2);
  v46 = (char *)v4[2];
  v47 = *((_QWORD *)v44 + 2);
  v156 = v46;
  if (!v47)
  {
    swift_release(v44, v45);
    v48 = _swiftEmptyArrayStorage;
LABEL_24:
    v61 = v48[2];
    if (v61)
    {
      v62 = (uint64_t)(v48 + 4);
      swift_bridgeObjectRetain(v48);
      v63 = _swiftEmptyArrayStorage;
      v155 = (char *)&type metadata for Any + 8;
      do
      {
        sub_100031044(v62, (uint64_t)v168, &qword_1000EB6E8);
        sub_100031044((uint64_t)v168, (uint64_t)&v166, &qword_1000EB6E8);
        if (v167)
        {
          v64 = sub_100030EE4(&qword_1000EB8E0);
          if ((swift_dynamicCast(&v163, &v166, v155, v64, 6) & 1) == 0)
          {
            v165 = 0;
            v163 = 0u;
            v164 = 0u;
          }
        }
        else
        {
          sub_100036060((uint64_t)&v166, &qword_1000EB6E8);
          v163 = 0u;
          v164 = 0u;
          v165 = 0;
        }
        sub_100036060((uint64_t)v168, &qword_1000EB6E8);
        if (*((_QWORD *)&v164 + 1))
        {
          sub_10007E1BC(&v163, (uint64_t)&v166);
          sub_10007E1BC(&v166, (uint64_t)&v163);
          if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
            v63 = sub_1000337A4(0, v63[2] + 1, 1, v63);
          v66 = v63[2];
          v65 = v63[3];
          if (v66 >= v65 >> 1)
            v63 = sub_1000337A4((_QWORD *)(v65 > 1), v66 + 1, 1, v63);
          v63[2] = v66 + 1;
          sub_10007E1BC(&v163, (uint64_t)&v63[5 * v66 + 4]);
        }
        else
        {
          sub_100036060((uint64_t)&v163, &qword_1000EC968);
        }
        v62 += 32;
        --v61;
      }
      while (v61);
      swift_bridgeObjectRelease_n(v48, 2);
    }
    else
    {
      swift_bridgeObjectRelease(v48);
      v63 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)&v166 = _swiftEmptyArrayStorage;
    v67 = v63[2];
    if (v67)
    {
      v68 = v63 + 4;
      swift_bridgeObjectRetain(v63);
      do
      {
        v69 = v68[3];
        v70 = v68[4];
        sub_10004242C(v68, v69);
        v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 24))(v69, v70);
        sub_10005FB8C(v71);
        v68 += 5;
        --v67;
      }
      while (v67);
      swift_bridgeObjectRelease(v63);
    }
    swift_bridgeObjectRelease(v63);
    v149 = v166;
    *(_QWORD *)&v166 = _swiftEmptyArrayStorage;
    v72 = swift_bridgeObjectRetain(v148);
    v73 = v145;
    v74 = v150;
    if (v145)
    {
      v75 = *(_QWORD *)(v162 + 72);
      v152 = (_QWORD *)((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
      v76 = (char *)v152 + v72;
      v155 = *(char **)(v162 + 16);
      LODWORD(v154) = enum case for ICObjectReferences.Types.folder<A>(_:);
      v153 = v75;
      ((void (*)(char *, char *, uint64_t))v155)(v20, (char *)v152 + v72, v150);
      while (1)
      {
        v78 = v20;
        v79 = v158;
        ICObjectReferences.type.getter(v74);
        v81 = v159;
        v80 = v160;
        v82 = v161;
        (*(void (**)(char *, _QWORD, _QWORD *))(v160 + 104))(v159, v154, v161);
        v83 = sub_100036000(0, &qword_1000EC970, NSManagedObjectID_ptr);
        v84 = sub_10007E164();
        LOBYTE(v83) = static ICObjectReferences.Types.== infix(_:_:)(v79, v81, v83, v84);
        v85 = *(void (**)(char *, _QWORD *))(v80 + 8);
        v85(v81, v82);
        v85(v79, v82);
        if ((v83 & 1) != 0)
        {
          v86 = *(void (**)(char *, char *, uint64_t))(v162 + 32);
          v86(v151, v78, v74);
          v87 = v166;
          v20 = v78;
          if ((swift_isUniquelyReferenced_nonNull_native(v166) & 1) == 0)
          {
            sub_10003F394(0, *(_QWORD *)(v87 + 16) + 1, 1);
            v87 = v166;
          }
          v89 = *(_QWORD *)(v87 + 16);
          v88 = *(_QWORD *)(v87 + 24);
          if (v89 >= v88 >> 1)
          {
            sub_10003F394(v88 > 1, v89 + 1, 1);
            v87 = v166;
          }
          *(_QWORD *)(v87 + 16) = v89 + 1;
          v90 = (char *)v152 + v87;
          v77 = v153;
          v74 = v150;
          v86(&v90[v89 * v153], v151, v150);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v162 + 8))(v78, v74);
          v20 = v78;
          v77 = v153;
        }
        v76 += v77;
        if (!--v73)
          break;
        ((void (*)(char *, char *, uint64_t))v155)(v20, v76, v74);
      }
      v91 = (_QWORD *)v166;
      v72 = v148;
    }
    else
    {
      v91 = _swiftEmptyArrayStorage;
    }
    v92 = v157;
    swift_bridgeObjectRelease(v72);
    v94 = v91[2];
    if (v94)
    {
      *(_QWORD *)&v163 = _swiftEmptyArrayStorage;
      swift_retain(v156);
      sub_10003F378(0, v94, 0);
      v95 = (_QWORD *)v163;
      v96 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
      v161 = v91;
      v97 = (char *)v91 + v96;
      v98 = *(_QWORD *)(v162 + 72);
      v99 = sub_100042114(&qword_1000EC950, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
      do
      {
        dispatch thunk of ICObjectProviding.object(for:)(v97, *(_QWORD *)v156, v99);
        if (v92)
        {
          swift_bridgeObjectRelease(v149);
          swift_release(v161, v109);
          swift_release(v95, v110);
          result = swift_release(v156, v111);
          v4 = v147;
          goto LABEL_90;
        }
        *(_QWORD *)&v163 = v95;
        v101 = v95[2];
        v100 = v95[3];
        if (v101 >= v100 >> 1)
        {
          sub_10003F378(v100 > 1, v101 + 1, 1);
          v95 = (_QWORD *)v163;
        }
        v95[2] = v101 + 1;
        sub_10007E11C((uint64_t)&v166, (uint64_t)&v95[4 * v101 + 4]);
        v97 += v98;
        --v94;
      }
      while (v94);
      swift_release(v156, v102);
      swift_release(v161, v112);
      v103 = v95[2];
      if (!v103)
        goto LABEL_81;
    }
    else
    {
      swift_release(v91, v93);
      v95 = _swiftEmptyArrayStorage;
      v103 = _swiftEmptyArrayStorage[2];
      if (!v103)
      {
LABEL_81:
        swift_bridgeObjectRelease(v95);
        v105 = _swiftEmptyArrayStorage;
        goto LABEL_82;
      }
    }
    v104 = (uint64_t)(v95 + 4);
    swift_bridgeObjectRetain(v95);
    v105 = _swiftEmptyArrayStorage;
    do
    {
      sub_100031044(v104, (uint64_t)v168, &qword_1000EB6E8);
      sub_100031044((uint64_t)v168, (uint64_t)&v166, &qword_1000EB6E8);
      if (v167)
      {
        v106 = sub_100030EE4(&qword_1000EB8E0);
        if ((swift_dynamicCast(&v163, &v166, (char *)&type metadata for Any + 8, v106, 6) & 1) == 0)
        {
          v165 = 0;
          v163 = 0u;
          v164 = 0u;
        }
      }
      else
      {
        sub_100036060((uint64_t)&v166, &qword_1000EB6E8);
        v163 = 0u;
        v164 = 0u;
        v165 = 0;
      }
      sub_100036060((uint64_t)v168, &qword_1000EB6E8);
      if (*((_QWORD *)&v164 + 1))
      {
        sub_10007E1BC(&v163, (uint64_t)&v166);
        sub_10007E1BC(&v166, (uint64_t)&v163);
        if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
          v105 = sub_1000337A4(0, v105[2] + 1, 1, v105);
        v108 = v105[2];
        v107 = v105[3];
        if (v108 >= v107 >> 1)
          v105 = sub_1000337A4((_QWORD *)(v107 > 1), v108 + 1, 1, v105);
        v105[2] = v108 + 1;
        sub_10007E1BC(&v163, (uint64_t)&v105[5 * v108 + 4]);
      }
      else
      {
        sub_100036060((uint64_t)&v163, &qword_1000EC968);
      }
      v104 += 32;
      --v103;
    }
    while (v103);
    swift_bridgeObjectRelease_n(v95, 2);
LABEL_82:
    v113 = sub_10006D774((uint64_t)v105);
    v161 = v92;
    swift_bridgeObjectRelease(v105);
    v114 = v147[4];
    v115 = v147[5];
    v116 = v147[6];
    v117 = v147[7];
    v118 = v147[8];
    v160 = v147[3];
    sub_100048F08(v160, v114, v115, v116, v117, v118);
    v119 = v149;
    v159 = (char *)sub_10007DA8C(v149);
    v120 = swift_bridgeObjectRelease(v119);
    if (!v113[2])
    {
      v120 = swift_bridgeObjectRelease(v113);
      v113 = 0;
    }
    v11 = v141;
    a1 = (uint64_t)v143;
    v121 = (char *)v143 + v141[6];
    Date.init()(v120);
    v122 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v121, 0, 1, v122);
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 1;
    v123 = (_QWORD *)(a1 + v11[7]);
    *v123 = v160;
    v123[1] = v114;
    v123[2] = v115;
    v123[3] = v116;
    v123[4] = v117;
    v123[5] = v118;
    *(_QWORD *)(a1 + v11[8]) = v159;
    *(_QWORD *)(a1 + v11[9]) = v113;
    if (qword_1000EB650 == -1)
      goto LABEL_85;
    goto LABEL_97;
  }
  *(_QWORD *)&v163 = _swiftEmptyArrayStorage;
  swift_retain(v46);
  sub_10003F378(0, v47, 0);
  v48 = (_QWORD *)v163;
  v49 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
  v154 = v44;
  v50 = (char *)v44 + v49;
  v51 = *(_QWORD *)(v162 + 72);
  v155 = (char *)sub_100042114(&qword_1000EC950, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
  while (1)
  {
    v52 = v157;
    dispatch thunk of ICObjectProviding.object(for:)(v50, *(_QWORD *)v46, v155);
    if (v52)
      break;
    v157 = 0;
    *(_QWORD *)&v163 = v48;
    v55 = v48[2];
    v54 = v48[3];
    if (v55 >= v54 >> 1)
    {
      sub_10003F378(v54 > 1, v55 + 1, 1);
      v48 = (_QWORD *)v163;
    }
    v48[2] = v55 + 1;
    sub_10007E11C((uint64_t)&v166, (uint64_t)&v48[4 * v55 + 4]);
    v50 += v51;
    --v47;
    v46 = v156;
    if (!v47)
    {
      swift_release(v156, v56);
      swift_release(v154, v60);
      goto LABEL_24;
    }
  }
  swift_release(v46, v53);
  swift_release(v154, v57);
  result = swift_release(v48, v58);
LABEL_90:
  *((_BYTE *)v4 + 96) = 0;
  return result;
}

uint64_t sub_10007239C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int *v4;
  int *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t ObjectType;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t WitnessTable;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  _BYTE v115[24];

  v5 = v4;
  v9 = *v3;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for ICArchiveModel(0);
  v14 = __chkstk_darwin(v104);
  if ((v3[12] & 1) != 0)
  {
    __break(1u);
LABEL_53:
    swift_once(&qword_1000EB650, sub_10002F9E0);
    goto LABEL_47;
  }
  v99 = v13;
  v101 = v11;
  v102 = v10;
  v100 = a1;
  v98 = a3;
  v103 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = &v92;
  *((_BYTE *)v3 + 96) = 1;
  *(_QWORD *)&v113 = a2;
  __chkstk_darwin(v14);
  v16 = a2;
  v17 = *(_QWORD *)(v9 + 80);
  v18 = *(_QWORD *)(v9 + 88);
  *(&v92 - 2) = v17;
  *(&v92 - 1) = v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v18);
  swift_getAssociatedConformanceWitness(v18, v17, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v20 = type metadata accessor for ICObjectReferences(255);
  v21 = type metadata accessor for Array(0, v20);
  v106 = v16;
  swift_bridgeObjectRetain(v16);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v21);
  *(_QWORD *)&v113 = _ArrayProtocol.filter(_:)(sub_10007E314, &v92 - 4, v21);
  v108 = (uint64_t)v4;
  v109 = v3;
  v22 = v3[2];
  v23 = (_QWORD *)swift_allocObject(&unk_1000D94B8, 40, 7);
  v23[2] = v17;
  v23[3] = v18;
  v23[4] = v22;
  v24 = swift_unknownObjectRetain(v22);
  v107 = &v92;
  __chkstk_darwin(v24);
  *(&v92 - 4) = v17;
  *(&v92 - 3) = v18;
  *(&v92 - 2) = (uint64_t)sub_10007E3DC;
  *(&v92 - 1) = (uint64_t)v23;
  v25 = sub_100030EE4(&qword_1000EB6E8);
  v26 = sub_100030EE4(&qword_1000EBAA0);
  v27 = v25;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for [A], v21);
  v29 = v108;
  v30 = sub_10006D890((void (*)(char *, char *))sub_10007E330, (uint64_t)(&v92 - 6), v21, v27, v26, v28, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v110);
  if (v29)
  {
    v32 = v113;
    swift_release(v23, v31);
    result = swift_bridgeObjectRelease(v32);
LABEL_26:
    v58 = v109;
LABEL_27:
    *((_BYTE *)v58 + 96) = 0;
    return result;
  }
  v92 = 0;
  v93 = v28;
  v94 = v26;
  v95 = v27;
  v96 = v22;
  v97 = v21;
  v34 = v113;
  v108 = v30;
  swift_release(v23, v31);
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(v108 + 16);
  if (v35)
  {
    v36 = v108 + 32;
    swift_bridgeObjectRetain(v108);
    v37 = _swiftEmptyArrayStorage;
    v38 = v17;
    v39 = v18;
    do
    {
      sub_100031044(v36, (uint64_t)v115, &qword_1000EB6E8);
      sub_100031044((uint64_t)v115, (uint64_t)&v113, &qword_1000EB6E8);
      if (v114)
      {
        v40 = sub_100030EE4(&qword_1000EB8E0);
        if ((swift_dynamicCast(&v110, &v113, (char *)&type metadata for Any + 8, v40, 6) & 1) == 0)
        {
          v112 = 0;
          v110 = 0u;
          v111 = 0u;
        }
      }
      else
      {
        sub_100036060((uint64_t)&v113, &qword_1000EB6E8);
        v110 = 0u;
        v111 = 0u;
        v112 = 0;
      }
      sub_100036060((uint64_t)v115, &qword_1000EB6E8);
      if (*((_QWORD *)&v111 + 1))
      {
        sub_10007E1BC(&v110, (uint64_t)&v113);
        sub_10007E1BC(&v113, (uint64_t)&v110);
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
          v37 = sub_1000337A4(0, v37[2] + 1, 1, v37);
        v42 = v37[2];
        v41 = v37[3];
        if (v42 >= v41 >> 1)
          v37 = sub_1000337A4((_QWORD *)(v41 > 1), v42 + 1, 1, v37);
        v37[2] = v42 + 1;
        sub_10007E1BC(&v110, (uint64_t)&v37[5 * v42 + 4]);
      }
      else
      {
        sub_100036060((uint64_t)&v110, &qword_1000EC968);
      }
      v36 += 32;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease_n(v108, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v108);
    v37 = _swiftEmptyArrayStorage;
    v38 = v17;
    v39 = v18;
  }
  *(_QWORD *)&v113 = _swiftEmptyArrayStorage;
  v43 = v37[2];
  v44 = v96;
  if (v43)
  {
    v45 = v37 + 4;
    swift_bridgeObjectRetain(v37);
    do
    {
      v46 = v45[3];
      v47 = v45[4];
      sub_10004242C(v45, v46);
      v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 24))(v46, v47);
      sub_10005FB8C(v48);
      v45 += 5;
      --v43;
    }
    while (v43);
    swift_bridgeObjectRelease(v37);
  }
  swift_bridgeObjectRelease(v37);
  v49 = v113;
  *(_QWORD *)&v113 = v106;
  v50 = __chkstk_darwin(v106);
  *(&v92 - 2) = v38;
  *(&v92 - 1) = v39;
  swift_bridgeObjectRetain(v50);
  v51 = v97;
  v52 = v92;
  *(_QWORD *)&v113 = _ArrayProtocol.filter(_:)(sub_10007E344, &v92 - 4, v97);
  v53 = (_QWORD *)swift_allocObject(&unk_1000D9490, 40, 7);
  v53[2] = v38;
  v53[3] = v39;
  v53[4] = v44;
  v54 = swift_unknownObjectRetain(v44);
  __chkstk_darwin(v54);
  *(&v92 - 4) = v38;
  *(&v92 - 3) = v39;
  *(&v92 - 2) = (uint64_t)sub_10007E3DC;
  *(&v92 - 1) = (uint64_t)v53;
  v55 = sub_10006D890((void (*)(char *, char *))sub_10007E330, (uint64_t)(&v92 - 6), v51, v95, v94, v93, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v110);
  v108 = v52;
  if (v52)
  {
    v57 = v113;
    swift_release(v53, v56);
    swift_bridgeObjectRelease(v49);
    result = swift_bridgeObjectRelease(v57);
    goto LABEL_26;
  }
  v59 = v55;
  v60 = v113;
  swift_release(v53, v56);
  swift_bridgeObjectRelease(v60);
  v61 = *(_QWORD *)(v59 + 16);
  if (v61)
  {
    v107 = (_QWORD *)v49;
    v62 = v59 + 32;
    WitnessTable = v59;
    swift_bridgeObjectRetain(v59);
    v63 = _swiftEmptyArrayStorage;
    do
    {
      sub_100031044(v62, (uint64_t)v115, &qword_1000EB6E8);
      sub_100031044((uint64_t)v115, (uint64_t)&v113, &qword_1000EB6E8);
      if (v114)
      {
        v64 = sub_100030EE4(&qword_1000EB8E0);
        if ((swift_dynamicCast(&v110, &v113, (char *)&type metadata for Any + 8, v64, 6) & 1) == 0)
        {
          v112 = 0;
          v110 = 0u;
          v111 = 0u;
        }
      }
      else
      {
        sub_100036060((uint64_t)&v113, &qword_1000EB6E8);
        v110 = 0u;
        v111 = 0u;
        v112 = 0;
      }
      sub_100036060((uint64_t)v115, &qword_1000EB6E8);
      if (*((_QWORD *)&v111 + 1))
      {
        sub_10007E1BC(&v110, (uint64_t)&v113);
        sub_10007E1BC(&v113, (uint64_t)&v110);
        if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
          v63 = sub_1000337A4(0, v63[2] + 1, 1, v63);
        v66 = v63[2];
        v65 = v63[3];
        if (v66 >= v65 >> 1)
          v63 = sub_1000337A4((_QWORD *)(v65 > 1), v66 + 1, 1, v63);
        v63[2] = v66 + 1;
        sub_10007E1BC(&v110, (uint64_t)&v63[5 * v66 + 4]);
      }
      else
      {
        sub_100036060((uint64_t)&v110, &qword_1000EC968);
      }
      v62 += 32;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease_n(WitnessTable, 2);
    v49 = (uint64_t)v107;
  }
  else
  {
    swift_bridgeObjectRelease(v59);
    v63 = _swiftEmptyArrayStorage;
  }
  v67 = v108;
  v68 = sub_10006D774((uint64_t)v63);
  v108 = v67;
  swift_bridgeObjectRelease(v63);
  v69 = v109[4];
  v70 = v109[5];
  v71 = v109[6];
  v72 = v109[7];
  v73 = v109[8];
  v107 = (_QWORD *)v109[3];
  sub_100048F08((uint64_t)v107, v69, v70, v71, v72, v73);
  WitnessTable = sub_10007DA8C(v49);
  v74 = swift_bridgeObjectRelease(v49);
  if (!v68[2])
  {
    v74 = swift_bridgeObjectRelease(v68);
    v68 = 0;
  }
  v5 = (int *)v104;
  v13 = v103;
  v75 = &v103[*(int *)(v104 + 24)];
  Date.init()(v74);
  v76 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 0, 1, v76);
  *v13 = 0;
  *((_QWORD *)v13 + 1) = 1;
  v77 = &v13[v5[7]];
  *(_QWORD *)v77 = v107;
  *((_QWORD *)v77 + 1) = v69;
  *((_QWORD *)v77 + 2) = v70;
  *((_QWORD *)v77 + 3) = v71;
  *((_QWORD *)v77 + 4) = v72;
  *((_QWORD *)v77 + 5) = v73;
  *(_QWORD *)&v13[v5[8]] = WitnessTable;
  *(_QWORD *)&v13[v5[9]] = v68;
  if (qword_1000EB650 != -1)
    goto LABEL_53;
LABEL_47:
  v78 = sub_100042114(&qword_1000EC980, type metadata accessor for ICArchiveModel, (uint64_t)&unk_1000B4C10);
  v79 = v108;
  v80 = dispatch thunk of JSONEncoder.encode<A>(_:)(v13, v5, v78);
  v58 = v109;
  if (v79)
  {
    result = sub_100042220((uint64_t)v13, type metadata accessor for ICArchiveModel);
    goto LABEL_27;
  }
  v82 = v80;
  v83 = v81;
  v84 = v109[10];
  v108 = v109[11];
  ObjectType = swift_getObjectType(v84);
  if (qword_1000EB638 != -1)
    swift_once(&qword_1000EB638, sub_10002F85C);
  v86 = v99;
  v87 = v100;
  URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v86, v82, v83, ObjectType, v108);
  v88 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v86, v102);
  *(_QWORD *)&v113 = v106;
  __chkstk_darwin(v88);
  v89 = v109;
  *(&v92 - 4) = (uint64_t)v109;
  *(&v92 - 3) = v87;
  *(&v92 - 2) = v98;
  v90 = v97;
  v91 = swift_getWitnessTable(&protocol conformance descriptor for [A], v97);
  Sequence.forEach(_:)(sub_10007E1D4, &v92 - 6, v90, v91);
  sub_100042220((uint64_t)v13, type metadata accessor for ICArchiveModel);
  result = sub_100040B10(v82, v83);
  *((_BYTE *)v89 + 96) = 0;
  return result;
}

BOOL sub_100072ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t WitnessTable;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v7 = type metadata accessor for ICObjectReferences.Types(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = type metadata accessor for ICObjectReferences(0);
  ICObjectReferences.type.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for ICObjectReferences.Types.account<A>(_:), v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ICObjectReferences<A>.Types, v7);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v11, v7, WitnessTable);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v17(v13, v7);
  return (v16 & 1) == 0;
}

uint64_t sub_10007303C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v7 = type metadata accessor for ICObjectReferences.Types(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - v12;
  v14 = type metadata accessor for ICObjectReferences(0);
  ICObjectReferences.type.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for ICObjectReferences.Types.folder<A>(_:), v7);
  v15 = static ICObjectReferences.Types.== infix(_:_:)(v13, v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v16(v13, v7);
  return v15 & 1;
}

uint64_t sub_100073194(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  NSString v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_signpost_type_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint8_t *v80;
  os_signpost_id_t v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  NSObject *v99;
  char *v100;
  uint64_t v101;
  os_signpost_type_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  NSObject *v120;
  char *v121;
  uint64_t v122;
  os_signpost_type_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint8_t *v161;
  os_signpost_id_t v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  uint8_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  _BOOL4 v186;
  uint8_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  NSObject *v207;
  os_log_type_t v208;
  _BOOL4 v209;
  uint8_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  NSObject *v220;
  os_log_type_t v221;
  _BOOL4 v222;
  uint8_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint8_t *v236;
  os_signpost_id_t v237;
  uint64_t result;
  _QWORD v239[7];
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  void *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  char v272[8];
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  char v277;
  id v278;
  char v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;

  v252 = a3;
  v251 = a2;
  v263 = type metadata accessor for OSSignpostError(0);
  v262 = *(_QWORD *)(v263 - 8);
  v4 = __chkstk_darwin(v263);
  v243 = (char *)v239 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v239[2] = (char *)v239 - v7;
  v8 = __chkstk_darwin(v6);
  v247 = (char *)v239 - v9;
  v10 = __chkstk_darwin(v8);
  v242 = (char *)v239 - v11;
  v12 = __chkstk_darwin(v10);
  v239[1] = (char *)v239 - v13;
  v14 = __chkstk_darwin(v12);
  v246 = (char *)v239 - v15;
  v16 = __chkstk_darwin(v14);
  v245 = (char *)v239 - v17;
  v18 = __chkstk_darwin(v16);
  v239[3] = (char *)v239 - v19;
  v20 = __chkstk_darwin(v18);
  v254 = (char *)v239 - v21;
  v22 = __chkstk_darwin(v20);
  v253 = (char *)v239 - v23;
  v24 = __chkstk_darwin(v22);
  v240 = (char *)v239 - v25;
  v26 = __chkstk_darwin(v24);
  v239[6] = (char *)v239 - v27;
  __chkstk_darwin(v26);
  v258 = (char *)v239 - v28;
  v29 = sub_100030EE4(&qword_1000EB8F8);
  v264 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v265 = (char *)v239 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for OSSignposter(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)v239 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = type metadata accessor for OSSignpostID(0);
  v271 = *(_QWORD *)(v282 - 8);
  v35 = __chkstk_darwin(v282);
  v250 = (char *)v239 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v239[5] = (char *)v239 - v38;
  v39 = __chkstk_darwin(v37);
  v257 = (char *)v239 - v40;
  v41 = __chkstk_darwin(v39);
  v249 = (char *)v239 - v42;
  v43 = __chkstk_darwin(v41);
  v239[4] = (char *)v239 - v44;
  v45 = __chkstk_darwin(v43);
  v256 = (char *)v239 - v46;
  v47 = __chkstk_darwin(v45);
  v255 = (char *)v239 - v48;
  v49 = __chkstk_darwin(v47);
  v241 = (char *)v239 - v50;
  v51 = __chkstk_darwin(v49);
  v259 = (char *)v239 - v52;
  v53 = __chkstk_darwin(v51);
  v260 = (char *)v239 - v54;
  v55 = __chkstk_darwin(v53);
  v248 = (char *)v239 - v56;
  v57 = __chkstk_darwin(v55);
  v244 = (char *)v239 - v58;
  v59 = __chkstk_darwin(v57);
  v261 = (char *)v239 - v60;
  v61 = __chkstk_darwin(v59);
  v270 = (char *)v239 - v62;
  __chkstk_darwin(v61);
  v64 = (char *)v239 - v63;
  if (qword_1000EB6B0 != -1)
    swift_once(&qword_1000EB6B0, sub_10006DD2C);
  v65 = sub_10003609C(v31, (uint64_t)qword_1000EC880);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v65, v31);
  v268 = a1;
  v269 = v29;
  ICObjectReferences.identifier.getter(v29);
  v66 = v278;
  v67 = objc_msgSend(v278, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v69 = v68;

  v70 = String._bridgeToObjectiveC()();
  v71 = swift_bridgeObjectRelease(v69);
  v72 = OSSignposter.logHandle.getter(v71);
  OSSignpostID.init(log:object:)(v72, v70);
  v73 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  v267 = v65;
  v74 = OSSignposter.logHandle.getter(v73);
  v75 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v77 = v270;
    v76 = v271;
    v78 = *(void (**)(char *, char *, uint64_t))(v271 + 16);
    v79 = v282;
    v78(v270, v64, v282);
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    v81 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v74, v75, v81, "Export Object", "", v80, 2u);
    swift_slowDealloc(v80, -1, -1);

    v82 = *(void (**)(char *, uint64_t))(v76 + 8);
    v83 = v78;
    v82(v77, v79);
  }
  else
  {

    v77 = v270;
    v83 = *(void (**)(char *, char *, uint64_t))(v271 + 16);
  }
  v83(v77, v64, v282);
  v84 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
  v85 = OSSignpostIntervalState.init(id:isOpen:)(v77, 1);
  v86 = v264;
  v87 = v265;
  v89 = v268;
  v88 = v269;
  (*(void (**)(char *, uint64_t, uint64_t))(v264 + 16))(v265, v268, v269);
  v90 = (*(uint64_t (**)(char *, uint64_t))(v86 + 88))(v87, v88);
  v91 = v64;
  if (v90 == enum case for ICObjectReferences.account<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v86 + 96))(v87, v88);
    swift_release(*(_QWORD *)v87, v92);
    v93 = v89;
    v94 = type metadata accessor for ICModernObjectProvider(0);
    v95 = sub_100042114(&qword_1000EC950, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    v96 = v266;
    v97 = dispatch thunk of ICObjectProviding.object(for:)(v93, v94, v95);
    if (v96)
    {
      v98 = v83;
      v99 = OSSignposter.logHandle.getter(v97);
      v100 = v261;
      v101 = OSSignpostIntervalState.signpostID.getter();
      v102 = static os_signpost_type_t.end.getter(v101);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v103 = v282;
        v269 = v96;
        v104 = swift_retain(v85);
        v105 = v258;
        checkForErrorAndConsumeState(state:)(v104);
        v268 = v85;
        v106 = v85;
        v107 = v105;
        swift_release(v106, v108);
        v109 = v262;
        v110 = v105;
        v111 = v263;
        v112 = v91;
        if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v110, v263) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v113 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v109 + 8))(v107, v111);
          v113 = "";
        }
        v159 = v261;
        v160 = v270;
        v98(v270, v261, v103);
        v161 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v161 = 0;
        v162 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v99, v102, v162, "Export Object", v113, v161, 2u);
        swift_slowDealloc(v161, -1, -1);

        v145 = *(void (**)(char *, uint64_t))(v271 + 8);
        v145(v159, v103);
        v145(v160, v103);
        v91 = v112;
        v85 = v268;
      }
      else
      {

        v145 = *(void (**)(char *, uint64_t))(v271 + 8);
        v145(v100, v282);
      }
      goto LABEL_103;
    }
    if (v273)
    {
      v142 = sub_100030EE4(&qword_1000EB8E0);
      v143 = swift_dynamicCast(&v274, v272, (char *)&type metadata for Any + 8, v142, 6);
      v121 = v260;
      if ((v143 & 1) != 0)
      {
        if (*((_QWORD *)&v275 + 1))
        {
          sub_10007E1BC(&v274, (uint64_t)&v278);
          v144 = ICObjectReferences.children.getter(v269);
          sub_1000773DC(&v278, v144, v251, (uint64_t)v252);
          goto LABEL_67;
        }
      }
      else
      {
        v276 = 0;
        v274 = 0u;
        v275 = 0u;
      }
    }
    else
    {
      sub_100036060((uint64_t)v272, &qword_1000EB6E8);
      v274 = 0u;
      v275 = 0u;
      v276 = 0;
      v121 = v260;
    }
    v119 = v83;
    sub_100036060((uint64_t)&v274, &qword_1000EC968);
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v163 = type metadata accessor for Logger(0);
    v164 = sub_10003609C(v163, (uint64_t)qword_1000EC868);
    v165 = Logger.logObject.getter(v164);
    v166 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v165, v166))
    {
      v167 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v167 = 0;
      _os_log_impl((void *)&_mh_execute_header, v165, v166, "Account to be exported does not exist anymore â€” skipping", v167, 2u);
      swift_slowDealloc(v167, -1, -1);
    }

    v120 = OSSignposter.logHandle.getter(v168);
    v169 = OSSignpostIntervalState.signpostID.getter();
    v123 = static os_signpost_type_t.end.getter(v169);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      goto LABEL_94;
    v268 = (uint64_t)v91;
    v269 = 0;
    v170 = swift_retain(v85);
    v171 = v253;
    checkForErrorAndConsumeState(state:)(v170);
    swift_release(v85, v172);
    v173 = v262;
    v174 = v263;
    if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v171, v263) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v129 = v85;
      v130 = "[Error] Interval already ended";
    }
    else
    {
      v181 = v171;
      v129 = v85;
      (*(void (**)(char *, uint64_t))(v173 + 8))(v181, v174);
      v130 = "";
    }
    v178 = v270;
    v179 = v270;
    v180 = &v284;
LABEL_101:
    v234 = (char *)*(v180 - 32);
LABEL_102:
    v235 = v282;
    v119(v179, v234, v282);
    v236 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v236 = 0;
    v237 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v120, v123, v237, "Export Object", v130, v236, 2u);
    swift_slowDealloc(v236, -1, -1);

    v145 = *(void (**)(char *, uint64_t))(v271 + 8);
    v145(v234, v235);
    v145(v178, v235);
    v85 = v129;
    v91 = (char *)v268;
    goto LABEL_103;
  }
  if (v90 == enum case for ICObjectReferences.folder<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v86 + 96))(v87, v88);
    swift_release(*(_QWORD *)v87, v114);
    v115 = type metadata accessor for ICModernObjectProvider(0);
    v116 = sub_100042114(&qword_1000EC950, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    v117 = v266;
    v118 = dispatch thunk of ICObjectProviding.object(for:)(v89, v115, v116);
    if (v117)
    {
      v119 = v83;
      v120 = OSSignposter.logHandle.getter(v118);
      v121 = v259;
      v122 = OSSignpostIntervalState.signpostID.getter();
      v123 = static os_signpost_type_t.end.getter(v122);
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
        goto LABEL_94;
      v268 = (uint64_t)v91;
      v269 = v117;
      v124 = swift_retain(v85);
      v125 = v254;
      checkForErrorAndConsumeState(state:)(v124);
      swift_release(v85, v126);
      v127 = v262;
      v128 = v263;
      if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v125, v263) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v129 = v85;
        v130 = "[Error] Interval already ended";
      }
      else
      {
        v177 = v125;
        v129 = v85;
        (*(void (**)(char *, uint64_t))(v127 + 8))(v177, v128);
        v130 = "";
      }
      v178 = v270;
      v179 = v270;
      v180 = &v283;
      goto LABEL_101;
    }
    if (v273)
    {
      v158 = sub_100030EE4(&qword_1000EB8E0);
      if ((swift_dynamicCast(&v274, v272, (char *)&type metadata for Any + 8, v158, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v275 + 1))
        {
          sub_10007E1BC(&v274, (uint64_t)&v278);
          v144 = ICObjectReferences.children.getter(v269);
          sub_100077BD0(&v278, v144, v251, (uint64_t)v252);
          goto LABEL_67;
        }
      }
      else
      {
        v276 = 0;
        v274 = 0u;
        v275 = 0u;
      }
    }
    else
    {
      sub_100036060((uint64_t)v272, &qword_1000EB6E8);
      v274 = 0u;
      v275 = 0u;
      v276 = 0;
    }
    v119 = v83;
    sub_100036060((uint64_t)&v274, &qword_1000EC968);
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v182 = type metadata accessor for Logger(0);
    v183 = sub_10003609C(v182, (uint64_t)qword_1000EC868);
    v184 = Logger.logObject.getter(v183);
    v185 = static os_log_type_t.fault.getter();
    v186 = os_log_type_enabled(v184, v185);
    v121 = v255;
    if (v186)
    {
      v187 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v187 = 0;
      _os_log_impl((void *)&_mh_execute_header, v184, v185, "Folder to be exported does not exist anymore â€” skipping", v187, 2u);
      swift_slowDealloc(v187, -1, -1);
    }

    v120 = OSSignposter.logHandle.getter(v188);
    v189 = OSSignpostIntervalState.signpostID.getter();
    v123 = static os_signpost_type_t.end.getter(v189);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      goto LABEL_94;
    v268 = (uint64_t)v91;
    v269 = 0;
    v190 = swift_retain(v85);
    v191 = v245;
    checkForErrorAndConsumeState(state:)(v190);
    swift_release(v85, v192);
    v193 = v262;
    v194 = v263;
    if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v191, v263) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v129 = v85;
      v130 = "[Error] Interval already ended";
    }
    else
    {
      v204 = v191;
      v129 = v85;
      (*(void (**)(char *, uint64_t))(v193 + 8))(v204, v194);
      v130 = "";
    }
    v178 = v270;
    v179 = v270;
    v180 = (uint64_t *)&v279;
    goto LABEL_101;
  }
  if (v90 == enum case for ICObjectReferences.note<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v86 + 96))(v87, v88);
    swift_release(*(_QWORD *)v87, v131);
    v132 = type metadata accessor for ICModernObjectProvider(0);
    v133 = sub_100042114(&qword_1000EC950, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    v134 = v266;
    v135 = dispatch thunk of ICObjectProviding.object(for:)(v89, v132, v133);
    if (v134)
    {
      v119 = v83;
      v120 = OSSignposter.logHandle.getter(v135);
      v121 = v256;
      v136 = OSSignpostIntervalState.signpostID.getter();
      v123 = static os_signpost_type_t.end.getter(v136);
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
        goto LABEL_94;
      v268 = (uint64_t)v91;
      v269 = v134;
      v137 = swift_retain(v85);
      v138 = v246;
      checkForErrorAndConsumeState(state:)(v137);
      swift_release(v85, v139);
      v140 = v262;
      v141 = v263;
      if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v138, v263) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v129 = v85;
        v130 = "[Error] Interval already ended";
      }
      else
      {
        v202 = v138;
        v129 = v85;
        (*(void (**)(char *, uint64_t))(v140 + 8))(v202, v141);
        v130 = "";
      }
      v178 = v270;
      v179 = v270;
      v180 = (uint64_t *)&v280;
      goto LABEL_101;
    }
    if (v273)
    {
      v175 = sub_100030EE4(&qword_1000EB8E0);
      if ((swift_dynamicCast(&v274, v272, (char *)&type metadata for Any + 8, v175, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v275 + 1))
        {
          sub_10007E1BC(&v274, (uint64_t)&v278);
          v144 = ICObjectReferences.children.getter(v269);
          sub_1000783B4(&v278, v144, v251, v252);
          goto LABEL_67;
        }
      }
      else
      {
        v276 = 0;
        v274 = 0u;
        v275 = 0u;
      }
    }
    else
    {
      sub_100036060((uint64_t)v272, &qword_1000EB6E8);
      v274 = 0u;
      v275 = 0u;
      v276 = 0;
    }
    v119 = v83;
    sub_100036060((uint64_t)&v274, &qword_1000EC968);
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v205 = type metadata accessor for Logger(0);
    v206 = sub_10003609C(v205, (uint64_t)qword_1000EC868);
    v207 = Logger.logObject.getter(v206);
    v208 = static os_log_type_t.fault.getter();
    v209 = os_log_type_enabled(v207, v208);
    v121 = v249;
    if (v209)
    {
      v210 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v210 = 0;
      _os_log_impl((void *)&_mh_execute_header, v207, v208, "Note to be exported does not exist anymore â€” skipping", v210, 2u);
      swift_slowDealloc(v210, -1, -1);
    }

    v120 = OSSignposter.logHandle.getter(v211);
    v212 = OSSignpostIntervalState.signpostID.getter();
    v123 = static os_signpost_type_t.end.getter(v212);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      goto LABEL_94;
    v268 = (uint64_t)v91;
    v269 = 0;
    v213 = swift_retain(v85);
    v214 = v242;
    checkForErrorAndConsumeState(state:)(v213);
    swift_release(v85, v215);
    v216 = v262;
    v217 = v263;
    if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v214, v263) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v129 = v85;
      v130 = "[Error] Interval already ended";
    }
    else
    {
      v231 = v214;
      v129 = v85;
      (*(void (**)(char *, uint64_t))(v216 + 8))(v231, v217);
      v130 = "";
    }
    v178 = v270;
    v179 = v270;
    v180 = &v276;
    goto LABEL_101;
  }
  if (v90 == enum case for ICObjectReferences.attachment<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v86 + 96))(v87, v88);
    swift_release(*(_QWORD *)v87, v147);
    v148 = type metadata accessor for ICModernObjectProvider(0);
    v149 = sub_100042114(&qword_1000EC950, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    v150 = v266;
    v151 = dispatch thunk of ICObjectProviding.object(for:)(v89, v148, v149);
    if (v150)
    {
      v119 = v83;
      v120 = OSSignposter.logHandle.getter(v151);
      v121 = v257;
      v152 = OSSignpostIntervalState.signpostID.getter();
      v123 = static os_signpost_type_t.end.getter(v152);
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
        goto LABEL_94;
      v268 = (uint64_t)v91;
      v269 = v150;
      v153 = swift_retain(v85);
      v154 = v247;
      checkForErrorAndConsumeState(state:)(v153);
      swift_release(v85, v155);
      v156 = v262;
      v157 = v263;
      if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v154, v263) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v129 = v85;
        v130 = "[Error] Interval already ended";
      }
      else
      {
        v203 = v154;
        v129 = v85;
        (*(void (**)(char *, uint64_t))(v156 + 8))(v203, v157);
        v130 = "";
      }
      v178 = v270;
      v179 = v270;
      v180 = &v281;
      goto LABEL_101;
    }
    if (v273)
    {
      v176 = sub_100030EE4(&qword_1000EB8E0);
      if ((swift_dynamicCast(&v274, v272, (char *)&type metadata for Any + 8, v176, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v275 + 1))
        {
          sub_10007E1BC(&v274, (uint64_t)&v278);
          v144 = ICObjectReferences.children.getter(v269);
          sub_100078F7C(&v278, v144, v251, v252);
LABEL_67:
          v119 = v83;
          sub_100035424(&v278);
          v195 = swift_bridgeObjectRelease(v144);
          v120 = OSSignposter.logHandle.getter(v195);
          v121 = v248;
          v196 = OSSignpostIntervalState.signpostID.getter();
          v123 = static os_signpost_type_t.end.getter(v196);
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            v268 = (uint64_t)v91;
            v269 = 0;
            v197 = swift_retain(v85);
            v198 = v240;
            checkForErrorAndConsumeState(state:)(v197);
            swift_release(v85, v199);
            v200 = v262;
            v201 = v263;
            if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v198, v263) == enum case for OSSignpostError.doubleEnd(_:))
            {
              v129 = v85;
              v130 = "[Error] Interval already ended";
            }
            else
            {
              v233 = v198;
              v129 = v85;
              (*(void (**)(char *, uint64_t))(v200 + 8))(v233, v201);
              v130 = "";
            }
            v234 = v248;
            v178 = v270;
            v179 = v270;
            goto LABEL_102;
          }
LABEL_94:

          v145 = *(void (**)(char *, uint64_t))(v271 + 8);
          v145(v121, v282);
LABEL_103:
          swift_release(v85, v146);
          return ((uint64_t (*)(char *, uint64_t))v145)(v91, v282);
        }
      }
      else
      {
        v276 = 0;
        v274 = 0u;
        v275 = 0u;
      }
    }
    else
    {
      sub_100036060((uint64_t)v272, &qword_1000EB6E8);
      v274 = 0u;
      v275 = 0u;
      v276 = 0;
    }
    v119 = v83;
    sub_100036060((uint64_t)&v274, &qword_1000EC968);
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v218 = type metadata accessor for Logger(0);
    v219 = sub_10003609C(v218, (uint64_t)qword_1000EC868);
    v220 = Logger.logObject.getter(v219);
    v221 = static os_log_type_t.fault.getter();
    v222 = os_log_type_enabled(v220, v221);
    v121 = v250;
    if (v222)
    {
      v223 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v223 = 0;
      _os_log_impl((void *)&_mh_execute_header, v220, v221, "Object to be exported does not exist anymore â€” skipping", v223, 2u);
      swift_slowDealloc(v223, -1, -1);
    }

    v120 = OSSignposter.logHandle.getter(v224);
    v225 = OSSignpostIntervalState.signpostID.getter();
    v123 = static os_signpost_type_t.end.getter(v225);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      goto LABEL_94;
    v268 = (uint64_t)v91;
    v269 = 0;
    v226 = swift_retain(v85);
    v227 = v243;
    checkForErrorAndConsumeState(state:)(v226);
    swift_release(v85, v228);
    v229 = v262;
    v230 = v263;
    if ((*(unsigned int (**)(char *, uint64_t))(v262 + 88))(v227, v263) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v129 = v85;
      v130 = "[Error] Interval already ended";
    }
    else
    {
      v232 = v227;
      v129 = v85;
      (*(void (**)(char *, uint64_t))(v229 + 8))(v232, v230);
      v130 = "";
    }
    v178 = v270;
    v179 = v270;
    v180 = (uint64_t *)&v277;
    goto LABEL_101;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v88, v88);
  __break(1u);
  return result;
}

uint64_t sub_100074C9C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (**v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  void (**v72)(char *, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v74;
  uint64_t v75;
  NSString v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_signpost_type_t v81;
  char v82;
  uint64_t v83;
  void (*v84)(_QWORD);
  char *v85;
  void (*v86)(_QWORD);
  uint8_t *v87;
  os_signpost_id_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  void (**v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  os_signpost_type_t v105;
  char *v106;
  void (*v107)(char *, char *, void (*)(_QWORD));
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  os_signpost_type_t v120;
  void (*v121)(char *, char *, void (*)(_QWORD));
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  void (**v154)(char *, uint64_t, uint64_t);
  uint8_t *v155;
  os_signpost_id_t v156;
  uint64_t (*v157)(void (**)(char *, uint64_t, uint64_t), void (*)(_QWORD));
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  os_signpost_type_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  void (**v180)(char *, uint64_t, uint64_t);
  uint8_t *v181;
  os_signpost_id_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  uint8_t *v188;
  uint64_t v189;
  NSObject *v190;
  void (**v191)(char *, uint64_t, uint64_t);
  uint64_t v192;
  os_signpost_type_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  __int128 *v211;
  uint64_t v212;
  uint64_t v213;
  NSObject *v214;
  os_log_type_t v215;
  uint8_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  NSObject *v226;
  os_log_type_t v227;
  uint8_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint8_t *v240;
  os_signpost_id_t v241;
  uint8_t *v242;
  os_signpost_id_t v243;
  uint64_t result;
  _QWORD v245[6];
  char *v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  void *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  void (*v274)(_QWORD);
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char v281[8];
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  void (**v288)(char *, uint64_t, uint64_t);

  v258 = a3;
  v257 = a2;
  v279 = a1;
  v4 = *v3;
  v269 = type metadata accessor for OSSignpostError(0);
  v268 = *(_QWORD *)(v269 - 8);
  v5 = __chkstk_darwin(v269);
  v245[1] = (char *)v245 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v253 = (char *)v245 - v8;
  v9 = __chkstk_darwin(v7);
  v245[0] = (char *)v245 - v10;
  v11 = __chkstk_darwin(v9);
  v252 = (char *)v245 - v12;
  v13 = __chkstk_darwin(v11);
  v245[2] = (char *)v245 - v14;
  v15 = __chkstk_darwin(v13);
  v260 = (char *)v245 - v16;
  v17 = __chkstk_darwin(v15);
  v245[5] = (char *)v245 - v18;
  v19 = __chkstk_darwin(v17);
  v264 = (char *)v245 - v20;
  v21 = __chkstk_darwin(v19);
  v246 = (char *)v245 - v22;
  v23 = __chkstk_darwin(v21);
  v249 = (char *)v245 - v24;
  v25 = __chkstk_darwin(v23);
  v248 = (char *)v245 - v26;
  v27 = __chkstk_darwin(v25);
  v251 = (char *)v245 - v28;
  __chkstk_darwin(v27);
  v259 = (char *)v245 - v29;
  v30 = *(_QWORD *)(v4 + 80);
  v31 = *(_QWORD *)(v4 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v31);
  v278 = v31;
  swift_getAssociatedConformanceWitness(v31, v30, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v33 = type metadata accessor for ICObjectReferences(0);
  v276 = *(_QWORD *)(v33 - 8);
  v34 = __chkstk_darwin(v33);
  v277 = (char *)v245 - v35;
  v272 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v34);
  v37 = (char *)v245 - v36;
  v38 = type metadata accessor for OSSignposter(0);
  v288 = *(void (***)(char *, uint64_t, uint64_t))(v38 - 8);
  __chkstk_darwin(v38);
  v40 = (char *)v245 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = (void (*)(_QWORD))type metadata accessor for OSSignpostID(0);
  v280 = *((_QWORD *)v274 - 1);
  v41 = __chkstk_darwin(v274);
  v245[4] = (char *)v245 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v263 = (char *)v245 - v44;
  v45 = __chkstk_darwin(v43);
  v245[3] = (char *)v245 - v46;
  v47 = __chkstk_darwin(v45);
  v262 = (char *)v245 - v48;
  v49 = __chkstk_darwin(v47);
  v247 = (char *)v245 - v50;
  v51 = __chkstk_darwin(v49);
  v266 = (char *)v245 - v52;
  v53 = __chkstk_darwin(v51);
  v250 = (char *)v245 - v54;
  v55 = __chkstk_darwin(v53);
  v267 = (char *)v245 - v56;
  v57 = __chkstk_darwin(v55);
  v254 = (char *)v245 - v58;
  v59 = __chkstk_darwin(v57);
  v256 = (char *)v245 - v60;
  v61 = __chkstk_darwin(v59);
  v255 = (char *)v245 - v62;
  v63 = __chkstk_darwin(v61);
  v261 = (char *)v245 - v64;
  v65 = __chkstk_darwin(v63);
  v265 = (char *)v245 - v66;
  v67 = __chkstk_darwin(v65);
  v273 = (char *)v245 - v68;
  __chkstk_darwin(v67);
  v70 = (void (**)(char *, uint64_t, uint64_t))((char *)v245 - v69);
  if (qword_1000EB6B0 != -1)
    swift_once(&qword_1000EB6B0, sub_10006DD2C);
  v71 = sub_10003609C(v38, (uint64_t)qword_1000EC880);
  v72 = v288;
  v288[2](v40, v71, v38);
  v275 = v33;
  ICObjectReferences.identifier.getter(v33);
  v270 = v30;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v278, v30, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: CustomStringConvertible);
  dispatch thunk of CustomStringConvertible.description.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  v75 = v74;
  (*(void (**)(char *, uint64_t))(v272 + 8))(v37, AssociatedTypeWitness);
  v76 = String._bridgeToObjectiveC()();
  v77 = swift_bridgeObjectRelease(v75);
  v78 = OSSignposter.logHandle.getter(v77);
  OSSignpostID.init(log:object:)(v78, v76);
  v79 = ((uint64_t (*)(char *, uint64_t))v72[1])(v40, v38);
  v272 = v71;
  v80 = OSSignposter.logHandle.getter(v79);
  v81 = static os_signpost_type_t.begin.getter();
  v82 = OS_os_log.signpostsEnabled.getter();
  v288 = v70;
  if ((v82 & 1) != 0)
  {
    v83 = v280;
    v84 = *(void (**)(_QWORD))(v280 + 16);
    v85 = v273;
    v86 = v274;
    ((void (*)(char *, _QWORD, void (*)(_QWORD)))v84)(v273, v288, v274);
    v87 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v87 = 0;
    v88 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v80, v81, v88, "Export Object", "", v87, 2u);
    swift_slowDealloc(v87, -1, -1);

    (*(void (**)(char *, void (*)(_QWORD)))(v83 + 8))(v85, v86);
  }
  else
  {

    v84 = *(void (**)(_QWORD))(v280 + 16);
    v86 = v274;
    v85 = v273;
  }
  v90 = v276;
  v89 = v277;
  v274 = v84;
  ((void (*)(char *, _QWORD, void (*)(_QWORD)))v84)(v85, v288, v86);
  v91 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  v92 = OSSignpostIntervalState.init(id:isOpen:)(v85, 1);
  v93 = v279;
  v94 = v275;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v89, v279, v275);
  v95 = (*(uint64_t (**)(char *, uint64_t))(v90 + 88))(v89, v94);
  v96 = v278;
  v97 = v90;
  v98 = v270;
  if (v95 == enum case for ICObjectReferences.account<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v97 + 96))(v89, v94);
    swift_release(*(_QWORD *)v89, v99);
    v100 = v271;
    v101 = dispatch thunk of ICObjectProviding.object(for:)(v93, v98, v96);
    if (v100)
    {
      v102 = OSSignposter.logHandle.getter(v101);
      v103 = v267;
      v104 = OSSignpostIntervalState.signpostID.getter();
      v105 = static os_signpost_type_t.end.getter(v104);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v106 = v85;
        v107 = (void (*)(char *, char *, void (*)(_QWORD)))v274;
        v279 = v100;
        v108 = swift_retain(v92);
        v109 = v264;
        checkForErrorAndConsumeState(state:)(v108);
        swift_release(v92, v110);
        v111 = v268;
        v112 = v269;
        if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v109, v269) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v113 = v92;
          v114 = "[Error] Interval already ended";
        }
        else
        {
          v151 = v111;
          v113 = v92;
          (*(void (**)(char *, uint64_t))(v151 + 8))(v109, v112);
          v114 = "";
        }
        v152 = v106;
        v153 = v106;
        v154 = v267;
        v107(v153, v267, v86);
        v155 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v155 = 0;
        v156 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v102, v105, v156, "Export Object", v114, v155, 2u);
        swift_slowDealloc(v155, -1, -1);

        v157 = *(uint64_t (**)(void (**)(char *, uint64_t, uint64_t), void (*)(_QWORD)))(v280 + 8);
        v157((void (**)(char *, uint64_t, uint64_t))v154, v86);
LABEL_58:
        v183 = v152;
LABEL_105:
        v157((void (**)(char *, uint64_t, uint64_t))v183, v86);
        v92 = v113;
        goto LABEL_106;
      }
      goto LABEL_45;
    }
    if (v282)
    {
      v138 = sub_100030EE4(&qword_1000EB8E0);
      if ((swift_dynamicCast(&v283, v281, (char *)&type metadata for Any + 8, v138, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v284 + 1))
        {
          sub_10007E1BC(&v283, (uint64_t)&v286);
          v139 = ICObjectReferences.children.getter(v275);
          sub_1000777B0(&v286, v139, v257, (uint64_t)v258);
          goto LABEL_68;
        }
      }
      else
      {
        v285 = 0;
        v283 = 0u;
        v284 = 0u;
      }
    }
    else
    {
      sub_100036060((uint64_t)v281, &qword_1000EB6E8);
      v283 = 0u;
      v284 = 0u;
      v285 = 0;
    }
    sub_100036060((uint64_t)&v283, &qword_1000EC968);
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v158 = type metadata accessor for Logger(0);
    v159 = sub_10003609C(v158, (uint64_t)qword_1000EC868);
    v160 = Logger.logObject.getter(v159);
    v161 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v160, v161))
    {
      v162 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v162 = 0;
      _os_log_impl((void *)&_mh_execute_header, v160, v161, "Account to be exported does not exist anymore â€” skipping", v162, 2u);
      swift_slowDealloc(v162, -1, -1);
    }

    v102 = OSSignposter.logHandle.getter(v163);
    v103 = v265;
    v164 = OSSignpostIntervalState.signpostID.getter();
    v165 = static os_signpost_type_t.end.getter(v164);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v279 = 0;
      v166 = swift_retain(v92);
      v167 = v259;
      checkForErrorAndConsumeState(state:)(v166);
      swift_release(v92, v168);
      v169 = v268;
      v170 = v269;
      if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v167, v269) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v113 = v92;
        v171 = "[Error] Interval already ended";
      }
      else
      {
        v178 = v169;
        v113 = v92;
        (*(void (**)(char *, uint64_t))(v178 + 8))(v167, v170);
        v171 = "";
      }
      v152 = v85;
      v179 = v85;
      v180 = v265;
      v274(v179);
      v181 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v181 = 0;
      v182 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v102, v165, v182, "Export Object", v171, v181, 2u);
      swift_slowDealloc(v181, -1, -1);

      v157 = *(uint64_t (**)(void (**)(char *, uint64_t, uint64_t), void (*)(_QWORD)))(v280 + 8);
      v157((void (**)(char *, uint64_t, uint64_t))v180, v86);
      goto LABEL_58;
    }
    goto LABEL_45;
  }
  if (v95 == enum case for ICObjectReferences.folder<A>(_:))
  {
    v115 = v277;
    (*(void (**)(char *, uint64_t))(v276 + 96))(v277, v94);
    swift_release(*(_QWORD *)v115, v116);
    v117 = v271;
    v118 = dispatch thunk of ICObjectProviding.object(for:)(v93, v98, v96);
    if (v117)
    {
      v102 = OSSignposter.logHandle.getter(v118);
      v103 = v266;
      v119 = OSSignpostIntervalState.signpostID.getter();
      v120 = static os_signpost_type_t.end.getter(v119);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v121 = (void (*)(char *, char *, void (*)(_QWORD)))v274;
        v279 = v117;
        v122 = swift_retain(v92);
        v123 = v260;
        checkForErrorAndConsumeState(state:)(v122);
        swift_release(v92, v124);
        v125 = v268;
        v126 = v269;
        if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v123, v269) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v113 = v92;
          v127 = "[Error] Interval already ended";
        }
        else
        {
          v175 = v125;
          v113 = v92;
          (*(void (**)(char *, uint64_t))(v175 + 8))(v123, v126);
          v127 = "";
        }
        v176 = v85;
        v177 = v266;
LABEL_103:
        v121(v176, v177, v86);
        v242 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v242 = 0;
        v243 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v102, v120, v243, "Export Object", v127, v242, 2u);
        swift_slowDealloc(v242, -1, -1);

        v157 = *(uint64_t (**)(void (**)(char *, uint64_t, uint64_t), void (*)(_QWORD)))(v280 + 8);
        v157((void (**)(char *, uint64_t, uint64_t))v177, v86);
        goto LABEL_104;
      }
      goto LABEL_45;
    }
    if (v282)
    {
      v150 = sub_100030EE4(&qword_1000EB8E0);
      if ((swift_dynamicCast(&v283, v281, (char *)&type metadata for Any + 8, v150, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v284 + 1))
        {
          sub_10007E1BC(&v283, (uint64_t)&v286);
          v139 = ICObjectReferences.children.getter(v275);
          sub_100077F9C(&v286, v139, v257, (uint64_t)v258);
          goto LABEL_68;
        }
      }
      else
      {
        v285 = 0;
        v283 = 0u;
        v284 = 0u;
      }
    }
    else
    {
      sub_100036060((uint64_t)v281, &qword_1000EB6E8);
      v283 = 0u;
      v284 = 0u;
      v285 = 0;
    }
    sub_100036060((uint64_t)&v283, &qword_1000EC968);
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v184 = type metadata accessor for Logger(0);
    v185 = sub_10003609C(v184, (uint64_t)qword_1000EC868);
    v186 = Logger.logObject.getter(v185);
    v187 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v186, v187))
    {
      v188 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v188 = 0;
      _os_log_impl((void *)&_mh_execute_header, v186, v187, "Folder to be exported does not exist anymore â€” skipping", v188, 2u);
      swift_slowDealloc(v188, -1, -1);
    }

    v190 = OSSignposter.logHandle.getter(v189);
    v191 = v261;
    v192 = OSSignpostIntervalState.signpostID.getter();
    v193 = static os_signpost_type_t.end.getter(v192);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v279 = 0;
      v194 = swift_retain(v92);
      v195 = v251;
      checkForErrorAndConsumeState(state:)(v194);
      swift_release(v92, v196);
      v197 = v268;
      v198 = v269;
      if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v195, v269) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v113 = v92;
        v199 = "[Error] Interval already ended";
      }
      else
      {
        v209 = v197;
        v113 = v92;
        (*(void (**)(char *, uint64_t))(v209 + 8))(v195, v198);
        v199 = "";
      }
      v210 = v85;
      v211 = (__int128 *)&v287;
      goto LABEL_102;
    }
LABEL_95:

    v157 = *(uint64_t (**)(void (**)(char *, uint64_t, uint64_t), void (*)(_QWORD)))(v280 + 8);
    v157((void (**)(char *, uint64_t, uint64_t))v191, v86);
    goto LABEL_106;
  }
  if (v95 == enum case for ICObjectReferences.note<A>(_:))
  {
    v128 = v277;
    (*(void (**)(char *, uint64_t))(v276 + 96))(v277, v94);
    swift_release(*(_QWORD *)v128, v129);
    v130 = v271;
    v131 = dispatch thunk of ICObjectProviding.object(for:)(v93, v98, v96);
    if (v130)
    {
      v102 = OSSignposter.logHandle.getter(v131);
      v103 = v262;
      v132 = OSSignpostIntervalState.signpostID.getter();
      v120 = static os_signpost_type_t.end.getter(v132);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v121 = (void (*)(char *, char *, void (*)(_QWORD)))v274;
        v279 = v130;
        v133 = swift_retain(v92);
        v134 = v252;
        checkForErrorAndConsumeState(state:)(v133);
        swift_release(v92, v135);
        v136 = v268;
        v137 = v269;
        if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v134, v269) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v113 = v92;
          v127 = "[Error] Interval already ended";
        }
        else
        {
          v207 = v136;
          v113 = v92;
          (*(void (**)(char *, uint64_t))(v207 + 8))(v134, v137);
          v127 = "";
        }
        v176 = v85;
        v177 = v262;
        goto LABEL_103;
      }
LABEL_45:

      v157 = *(uint64_t (**)(void (**)(char *, uint64_t, uint64_t), void (*)(_QWORD)))(v280 + 8);
      v157((void (**)(char *, uint64_t, uint64_t))v103, v86);
LABEL_106:
      swift_release(v92, v172);
      return v157(v288, v86);
    }
    if (v282)
    {
      v173 = sub_100030EE4(&qword_1000EB8E0);
      if ((swift_dynamicCast(&v283, v281, (char *)&type metadata for Any + 8, v173, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v284 + 1))
        {
          sub_10007E1BC(&v283, (uint64_t)&v286);
          v139 = ICObjectReferences.children.getter(v275);
          sub_100078964(&v286, v139, v257, v258);
          goto LABEL_68;
        }
      }
      else
      {
        v285 = 0;
        v283 = 0u;
        v284 = 0u;
      }
    }
    else
    {
      sub_100036060((uint64_t)v281, &qword_1000EB6E8);
      v283 = 0u;
      v284 = 0u;
      v285 = 0;
    }
    sub_100036060((uint64_t)&v283, &qword_1000EC968);
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v212 = type metadata accessor for Logger(0);
    v213 = sub_10003609C(v212, (uint64_t)qword_1000EC868);
    v214 = Logger.logObject.getter(v213);
    v215 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v214, v215))
    {
      v216 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v216 = 0;
      _os_log_impl((void *)&_mh_execute_header, v214, v215, "Note to be exported does not exist anymore â€” skipping", v216, 2u);
      swift_slowDealloc(v216, -1, -1);
    }

    v190 = OSSignposter.logHandle.getter(v217);
    v191 = v255;
    v218 = OSSignpostIntervalState.signpostID.getter();
    v193 = static os_signpost_type_t.end.getter(v218);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v279 = 0;
      v219 = swift_retain(v92);
      v220 = v248;
      checkForErrorAndConsumeState(state:)(v219);
      swift_release(v92, v221);
      v222 = v268;
      v223 = v269;
      if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v220, v269) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v113 = v92;
        v199 = "[Error] Interval already ended";
      }
      else
      {
        v236 = v222;
        v113 = v92;
        (*(void (**)(char *, uint64_t))(v236 + 8))(v220, v223);
        v199 = "";
      }
      v210 = v85;
      v211 = (__int128 *)((char *)&v283 + 8);
      goto LABEL_102;
    }
    goto LABEL_95;
  }
  if (v95 == enum case for ICObjectReferences.attachment<A>(_:))
  {
    v140 = v277;
    (*(void (**)(char *, uint64_t))(v276 + 96))(v277, v94);
    swift_release(*(_QWORD *)v140, v141);
    v142 = v271;
    v143 = dispatch thunk of ICObjectProviding.object(for:)(v93, v98, v96);
    if (v142)
    {
      v102 = OSSignposter.logHandle.getter(v143);
      v103 = v263;
      v144 = OSSignpostIntervalState.signpostID.getter();
      v120 = static os_signpost_type_t.end.getter(v144);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v121 = (void (*)(char *, char *, void (*)(_QWORD)))v274;
        v279 = v142;
        v145 = swift_retain(v92);
        v146 = v253;
        checkForErrorAndConsumeState(state:)(v145);
        swift_release(v92, v147);
        v148 = v268;
        v149 = v269;
        if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v146, v269) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v113 = v92;
          v127 = "[Error] Interval already ended";
        }
        else
        {
          v208 = v148;
          v113 = v92;
          (*(void (**)(char *, uint64_t))(v208 + 8))(v146, v149);
          v127 = "";
        }
        v176 = v85;
        v177 = v263;
        goto LABEL_103;
      }
      goto LABEL_45;
    }
    if (v282)
    {
      v174 = sub_100030EE4(&qword_1000EB8E0);
      if ((swift_dynamicCast(&v283, v281, (char *)&type metadata for Any + 8, v174, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v284 + 1))
        {
          sub_10007E1BC(&v283, (uint64_t)&v286);
          v139 = ICObjectReferences.children.getter(v275);
          sub_10007A4DC(&v286, v139, v257, v258);
LABEL_68:
          sub_100035424(&v286);
          v200 = swift_bridgeObjectRelease(v139);
          v190 = OSSignposter.logHandle.getter(v200);
          v191 = v254;
          v201 = OSSignpostIntervalState.signpostID.getter();
          v193 = static os_signpost_type_t.end.getter(v201);
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            v279 = 0;
            v202 = swift_retain(v92);
            v203 = v246;
            checkForErrorAndConsumeState(state:)(v202);
            swift_release(v92, v204);
            v205 = v268;
            v206 = v269;
            if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v203, v269) == enum case for OSSignpostError.doubleEnd(_:))
            {
              v113 = v92;
              v199 = "[Error] Interval already ended";
            }
            else
            {
              v238 = v205;
              v113 = v92;
              (*(void (**)(char *, uint64_t))(v238 + 8))(v203, v206);
              v199 = "";
            }
            v210 = v85;
            v211 = &v283;
LABEL_102:
            v239 = (char *)*((_QWORD *)v211 - 32);
            ((void (*)(char *, char *, void (*)(_QWORD)))v274)(v210, v239, v86);
            v240 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v240 = 0;
            v241 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v190, v193, v241, "Export Object", v199, v240, 2u);
            swift_slowDealloc(v240, -1, -1);

            v157 = *(uint64_t (**)(void (**)(char *, uint64_t, uint64_t), void (*)(_QWORD)))(v280 + 8);
            v157((void (**)(char *, uint64_t, uint64_t))v239, v86);
LABEL_104:
            v183 = v85;
            goto LABEL_105;
          }
          goto LABEL_95;
        }
      }
      else
      {
        v285 = 0;
        v283 = 0u;
        v284 = 0u;
      }
    }
    else
    {
      sub_100036060((uint64_t)v281, &qword_1000EB6E8);
      v283 = 0u;
      v284 = 0u;
      v285 = 0;
    }
    sub_100036060((uint64_t)&v283, &qword_1000EC968);
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v224 = type metadata accessor for Logger(0);
    v225 = sub_10003609C(v224, (uint64_t)qword_1000EC868);
    v226 = Logger.logObject.getter(v225);
    v227 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v226, v227))
    {
      v228 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v228 = 0;
      _os_log_impl((void *)&_mh_execute_header, v226, v227, "Object to be exported does not exist anymore â€” skipping", v228, 2u);
      swift_slowDealloc(v228, -1, -1);
    }

    v190 = OSSignposter.logHandle.getter(v229);
    v191 = v256;
    v230 = OSSignpostIntervalState.signpostID.getter();
    v193 = static os_signpost_type_t.end.getter(v230);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v279 = 0;
      v231 = swift_retain(v92);
      v232 = v249;
      checkForErrorAndConsumeState(state:)(v231);
      swift_release(v92, v233);
      v234 = v268;
      v235 = v269;
      if ((*(unsigned int (**)(char *, uint64_t))(v268 + 88))(v232, v269) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v113 = v92;
        v199 = "[Error] Interval already ended";
      }
      else
      {
        v237 = v234;
        v113 = v92;
        (*(void (**)(char *, uint64_t))(v237 + 8))(v232, v235);
        v199 = "";
      }
      v210 = v85;
      v211 = &v284;
      goto LABEL_102;
    }
    goto LABEL_95;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v94, v94);
  __break(1u);
  return result;
}

uint64_t sub_100076964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  uint64_t v39;
  void *v40;
  NSString v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  Swift::String v61;
  unint64_t v62;
  char *v63;
  NSString v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  id v97[2];
  uint64_t v98;

  v92 = a4;
  v93 = a5;
  v77 = a6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v86 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v75 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v75 - v16;
  v88 = a1;
  v89 = a2;
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v18, "ic_sanitizedFilenameString");

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v87 = a3;
  URL.appendingPathComponent(_:isDirectory:)(v20, v22, 1);
  swift_bridgeObjectRelease(v22);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v23, "ic_sanitizedFilenameString");

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  URL.appendingPathExtension(_:)(v25, v27);
  swift_bridgeObjectRelease(v27);
  v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v85 = v15;
  v28(v15, v9);
  v30 = *(_QWORD *)(v90 + 80);
  v29 = *(_QWORD *)(v90 + 88);
  ObjectType = swift_getObjectType(v30);
  v83 = v29;
  v84 = v30;
  v32 = v91;
  v82 = ObjectType;
  dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v17, 0, ObjectType, v29);
  if (!v32)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v77, v17, v9);
  v28(v17, v9);
  v98 = v32;
  swift_errorRetain(v32);
  v33 = sub_100030EE4(&qword_1000EBAA0);
  v34 = sub_100036000(0, &qword_1000EC310, NSError_ptr);
  if ((swift_dynamicCast(v97, &v98, v33, v34, 0) & 1) == 0)
    return swift_errorRelease(v98);
  v35 = v97[0];
  if (objc_msgSend(v97[0], "code") != (id)516)
  {

    return swift_errorRelease(v98);
  }
  v76 = v35;
  v78 = v34;
  v80 = v28;
  v75 = v10;
  swift_errorRelease(v32);
  v91 = 0;
  v81 = ICAttachmentNameMaxLength;
  v36 = 2;
  v79 = v33;
  while (1)
  {
    v94 = (id)v36;
    v95 = 32;
    v96 = 0xE100000000000000;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(object);
    v39 = v95;
    v40 = (void *)v96;
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v41, "ic_sanitizedFilenameString");

    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    v46 = String.count.getter(v39, v40);
    v47 = __OFSUB__(v81, v46);
    result = v81 - v46;
    if (v47)
      break;
    v90 = v36;
    v49 = sub_10007E1E8(result, v43, v45);
    v51 = v50;
    v52 = v9;
    v54 = v53;
    v56 = v55;
    swift_bridgeObjectRelease(v45);
    v57 = v54;
    v9 = v52;
    v58 = static String._fromSubstring(_:)(v49, v51, v57, v56);
    v60 = v59;
    swift_bridgeObjectRelease(v56);
    v95 = v58;
    v96 = v60;
    swift_bridgeObjectRetain(v60);
    v61._countAndFlagsBits = v39;
    v61._object = v40;
    String.append(_:)(v61);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v40);
    v62 = v96;
    v63 = v85;
    URL.appendingPathComponent(_:isDirectory:)(v95, v96, 1);
    swift_bridgeObjectRelease(v62);
    v64 = String._bridgeToObjectiveC()();
    v65 = objc_msgSend(v64, "ic_sanitizedFilenameString");

    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;

    v69 = v86;
    URL.appendingPathExtension(_:)(v66, v68);
    swift_bridgeObjectRelease(v68);
    v70 = v80;
    v80(v63, v9);
    v71 = v91;
    dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v69, 0, v82, v83);
    if (!v71)
    {

      (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v77, v69, v9);
      return swift_errorRelease(v98);
    }
    v70(v69, v9);
    v95 = v71;
    swift_errorRetain(v71);
    if (!swift_dynamicCast(&v94, &v95, v79, v78, 0)
      || (v72 = v94, v73 = objc_msgSend(v94, "code"), v72, v73 != (id)516))
    {

      swift_errorRelease(v95);
      return swift_errorRelease(v98);
    }
    result = swift_errorRelease(v71);
    v74 = v90;
    if (__OFADD__(v90, 1))
      goto LABEL_18;
    swift_errorRelease(v95);
    v91 = 0;
    v36 = v74 + 1;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100076EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  uint64_t v39;
  void *v40;
  NSString v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  Swift::String v61;
  unint64_t v62;
  char *v63;
  NSString v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  id v97[2];
  uint64_t v98;

  v92 = a4;
  v93 = a5;
  v77 = a6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v86 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v75 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v75 - v16;
  v88 = a1;
  v89 = a2;
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v18, "ic_sanitizedFilenameString");

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v87 = a3;
  URL.appendingPathComponent(_:isDirectory:)(v20, v22, 1);
  swift_bridgeObjectRelease(v22);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v23, "ic_sanitizedFilenameString");

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  URL.appendingPathExtension(_:)(v25, v27);
  swift_bridgeObjectRelease(v27);
  v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v85 = v15;
  v28(v15, v9);
  v30 = *(_QWORD *)(v90 + 80);
  v29 = *(_QWORD *)(v90 + 88);
  ObjectType = swift_getObjectType(v30);
  v83 = v29;
  v84 = v30;
  v32 = v91;
  v82 = ObjectType;
  dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v17, 0, ObjectType, v29);
  if (!v32)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v77, v17, v9);
  v28(v17, v9);
  v98 = v32;
  swift_errorRetain(v32);
  v33 = sub_100030EE4(&qword_1000EBAA0);
  v34 = sub_100036000(0, &qword_1000EC310, NSError_ptr);
  if (!swift_dynamicCast(v97, &v98, v33, v34, 0))
    return swift_errorRelease(v98);
  v35 = v97[0];
  if (objc_msgSend(v97[0], "code") != (id)516)
  {

    return swift_errorRelease(v98);
  }
  v76 = v35;
  v78 = v34;
  v80 = v28;
  v75 = v10;
  swift_errorRelease(v32);
  v91 = 0;
  v81 = ICAttachmentNameMaxLength;
  v36 = 2;
  v79 = v33;
  while (1)
  {
    v94 = (id)v36;
    v95 = 32;
    v96 = 0xE100000000000000;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(object);
    v39 = v95;
    v40 = (void *)v96;
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v41, "ic_sanitizedFilenameString");

    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    v46 = String.count.getter(v39, v40);
    v47 = __OFSUB__(v81, v46);
    result = v81 - v46;
    if (v47)
      break;
    v90 = v36;
    v49 = sub_10007E1E8(result, v43, v45);
    v51 = v50;
    v52 = v9;
    v54 = v53;
    v56 = v55;
    swift_bridgeObjectRelease(v45);
    v57 = v54;
    v9 = v52;
    v58 = static String._fromSubstring(_:)(v49, v51, v57, v56);
    v60 = v59;
    swift_bridgeObjectRelease(v56);
    v95 = v58;
    v96 = v60;
    swift_bridgeObjectRetain(v60);
    v61._countAndFlagsBits = v39;
    v61._object = v40;
    String.append(_:)(v61);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v40);
    v62 = v96;
    v63 = v85;
    URL.appendingPathComponent(_:isDirectory:)(v95, v96, 1);
    swift_bridgeObjectRelease(v62);
    v64 = String._bridgeToObjectiveC()();
    v65 = objc_msgSend(v64, "ic_sanitizedFilenameString");

    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;

    v69 = v86;
    URL.appendingPathExtension(_:)(v66, v68);
    swift_bridgeObjectRelease(v68);
    v70 = v80;
    v80(v63, v9);
    v71 = v91;
    dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v69, 0, v82, v83);
    if (!v71)
    {

      (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v77, v69, v9);
      return swift_errorRelease(v98);
    }
    v70(v69, v9);
    v95 = v71;
    swift_errorRetain(v71);
    if (!swift_dynamicCast(&v94, &v95, v79, v78, 0)
      || (v72 = v94, v73 = objc_msgSend(v94, "code"), v72, v73 != (id)516))
    {

      swift_errorRelease(v95);
      return swift_errorRelease(v98);
    }
    result = swift_errorRelease(v71);
    v74 = v90;
    if (__OFADD__(v90, 1))
      goto LABEL_18;
    swift_errorRelease(v95);
    v91 = 0;
    v36 = v74 + 1;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_1000773DC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t ObjectType;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _OWORD v55[2];
  _OWORD v56[2];
  uint64_t v57;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  NSProgress.throwIfCancelled()();
  if (!v15)
  {
    v51 = 0;
    v52 = v12;
    v49 = a2;
    v50 = v9;
    v48 = a4;
    v53 = v8;
    v54 = v14;
    v16 = a1[3];
    v17 = a1[4];
    sub_10004242C(a1, v16);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    if (v19)
    {
      v20 = v18;
      v21 = v19;
    }
    else
    {
      v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v22, "localizedStringForKey:value:table:", v23, 0, 0);

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v21 = v25;

    }
    v26 = v51;
    v27 = v52;
    v28 = v20;
    v29 = v57;
    sub_100076964(v28, v21, a3, 0x746E756F636361, 0xE700000000000000, (uint64_t)v54);
    v30 = v53;
    if (v26)
    {
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      swift_bridgeObjectRelease(v21);
      v31 = *(char **)(v29 + 88);
      v51 = *(_QWORD *)(v29 + 80);
      v52 = v31;
      if (qword_1000EB638 != -1)
        swift_once(&qword_1000EB638, sub_10002F85C);
      URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
      v32 = a1[3];
      v33 = a1[4];
      sub_10004242C(a1, v32);
      v34 = *(_OWORD *)(v29 + 40);
      v55[0] = *(_OWORD *)(v29 + 24);
      v55[1] = v34;
      v56[0] = *(_OWORD *)(v29 + 56);
      *(_QWORD *)((char *)v56 + 13) = *(_QWORD *)(v29 + 69);
      v35 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v33 + 80))(v55, v32, v33);
      v37 = v36;
      ObjectType = swift_getObjectType(v51);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v27, v35, v37, ObjectType, v52);
      v39 = *(void (**)(char *, uint64_t))(v50 + 8);
      v39(v27, v30);
      sub_100040B10(v35, v37);
      v40 = v49;
      v41 = *(_QWORD *)(v49 + 16);
      v42 = (uint64_t)v54;
      if (v41)
      {
        v43 = *(_QWORD *)(sub_100030EE4(&qword_1000EB8F8) - 8);
        v44 = v40 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
        v45 = *(_QWORD *)(v43 + 72);
        swift_bridgeObjectRetain(v40);
        v46 = v48;
        do
        {
          sub_100073194(v44, v42, v46);
          v44 += v45;
          --v41;
        }
        while (v41);
        swift_bridgeObjectRelease(v40);
        v30 = v53;
      }
      v39((char *)v42, v30);
    }
  }
}

void sub_1000777B0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t ObjectType;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t AssociatedTypeWitness;
  uint64_t v46;
  uint64_t v47;
  uint64_t WitnessTable;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  _OWORD v59[2];
  _OWORD v60[2];
  uint64_t v61;

  v5 = v4;
  v57 = a2;
  v58 = (uint64_t *)a3;
  v8 = *v5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v49 - v14;
  NSProgress.throwIfCancelled()();
  if (!v16)
  {
    v54 = 0;
    v55 = v13;
    v51 = a4;
    v52 = v10;
    v50 = v8;
    v56 = v15;
    v53 = v9;
    v17 = a1[3];
    v18 = a1[4];
    sub_10004242C(a1, v17);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
    if (v20)
    {
      v21 = v19;
      v22 = v20;
    }
    else
    {
      v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v24 = String._bridgeToObjectiveC()();
      v25 = objc_msgSend(v23, "localizedStringForKey:value:table:", v24, 0, 0);

      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v22 = v26;

    }
    v27 = v5;
    v28 = v55;
    v29 = v54;
    sub_100076EA0(v21, v22, (uint64_t)v58, 0x746E756F636361, 0xE700000000000000, (uint64_t)v56);
    if (v29)
    {
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      swift_bridgeObjectRelease(v22);
      v30 = v5[10];
      v58 = (uint64_t *)v5[11];
      if (qword_1000EB638 != -1)
        swift_once(&qword_1000EB638, sub_10002F85C);
      URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
      v31 = a1[3];
      v32 = a1[4];
      sub_10004242C(a1, v31);
      v33 = *(_OWORD *)(v5 + 5);
      v59[0] = *(_OWORD *)(v5 + 3);
      v59[1] = v33;
      v60[0] = *(_OWORD *)(v5 + 7);
      *(_QWORD *)((char *)v60 + 13) = *(uint64_t *)((char *)v5 + 69);
      v34 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v32 + 80))(v59, v31, v32);
      v36 = v35;
      ObjectType = swift_getObjectType(v30);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v28, v34, v36, ObjectType, v58);
      v38 = v53;
      v39 = v28;
      v40 = *(void (**)(char *, uint64_t))(v52 + 8);
      v40(v39, v53);
      v41 = sub_100040B10(v34, v36);
      v58 = &v49;
      v61 = v57;
      __chkstk_darwin(v41);
      v42 = (uint64_t)v56;
      *(&v49 - 4) = (uint64_t)v27;
      *(&v49 - 3) = v42;
      *(&v49 - 2) = v51;
      v44 = *(_QWORD *)(v50 + 80);
      v43 = *(_QWORD *)(v50 + 88);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v43);
      swift_getAssociatedConformanceWitness(v43, v44, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
      v46 = type metadata accessor for ICObjectReferences(255);
      v47 = type metadata accessor for Array(0, v46);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v47);
      Sequence.forEach(_:)(sub_10007E1D4, &v49 - 6, v47, WitnessTable);
      v40((char *)v42, v38);
    }
  }
}

void sub_100077BD0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t ObjectType;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _OWORD v55[2];
  _OWORD v56[2];
  uint64_t v57;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  NSProgress.throwIfCancelled()();
  if (!v15)
  {
    v51 = 0;
    v52 = v12;
    v49 = a2;
    v50 = v9;
    v48 = a4;
    v53 = v8;
    v54 = v14;
    v16 = a1[3];
    v17 = a1[4];
    sub_10004242C(a1, v16);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    if (v19)
    {
      v20 = v18;
      v21 = v19;
    }
    else
    {
      v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v22, "localizedStringForKey:value:table:", v23, 0, 0);

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v21 = v25;

    }
    v26 = v51;
    v27 = v52;
    v28 = v20;
    v29 = v57;
    sub_100076964(v28, v21, a3, 0x7265646C6F66, 0xE600000000000000, (uint64_t)v54);
    v30 = v53;
    if (v26)
    {
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      swift_bridgeObjectRelease(v21);
      v31 = *(char **)(v29 + 88);
      v51 = *(_QWORD *)(v29 + 80);
      v52 = v31;
      if (qword_1000EB638 != -1)
        swift_once(&qword_1000EB638, sub_10002F85C);
      URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
      v32 = a1[3];
      v33 = a1[4];
      sub_10004242C(a1, v32);
      v34 = *(_OWORD *)(v29 + 40);
      v55[0] = *(_OWORD *)(v29 + 24);
      v55[1] = v34;
      v56[0] = *(_OWORD *)(v29 + 56);
      *(_QWORD *)((char *)v56 + 13) = *(_QWORD *)(v29 + 69);
      v35 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v33 + 80))(v55, v32, v33);
      v37 = v36;
      ObjectType = swift_getObjectType(v51);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v27, v35, v37, ObjectType, v52);
      v39 = *(void (**)(char *, uint64_t))(v50 + 8);
      v39(v27, v30);
      sub_100040B10(v35, v37);
      v40 = v49;
      v41 = *(_QWORD *)(v49 + 16);
      v42 = (uint64_t)v54;
      if (v41)
      {
        v43 = *(_QWORD *)(sub_100030EE4(&qword_1000EB8F8) - 8);
        v44 = v40 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
        v45 = *(_QWORD *)(v43 + 72);
        swift_bridgeObjectRetain(v40);
        v46 = v48;
        do
        {
          sub_100073194(v44, v42, v46);
          v44 += v45;
          --v41;
        }
        while (v41);
        swift_bridgeObjectRelease(v40);
        v30 = v53;
      }
      v39((char *)v42, v30);
    }
  }
}

void sub_100077F9C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t ObjectType;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t AssociatedTypeWitness;
  uint64_t v46;
  uint64_t v47;
  uint64_t WitnessTable;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  _OWORD v59[2];
  _OWORD v60[2];
  uint64_t v61;

  v5 = v4;
  v57 = a2;
  v58 = (uint64_t *)a3;
  v8 = *v5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v49 - v14;
  NSProgress.throwIfCancelled()();
  if (!v16)
  {
    v54 = 0;
    v55 = v13;
    v51 = a4;
    v52 = v10;
    v50 = v8;
    v56 = v15;
    v53 = v9;
    v17 = a1[3];
    v18 = a1[4];
    sub_10004242C(a1, v17);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
    if (v20)
    {
      v21 = v19;
      v22 = v20;
    }
    else
    {
      v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v24 = String._bridgeToObjectiveC()();
      v25 = objc_msgSend(v23, "localizedStringForKey:value:table:", v24, 0, 0);

      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v22 = v26;

    }
    v27 = v5;
    v28 = v55;
    v29 = v54;
    sub_100076EA0(v21, v22, (uint64_t)v58, 0x7265646C6F66, 0xE600000000000000, (uint64_t)v56);
    if (v29)
    {
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      swift_bridgeObjectRelease(v22);
      v30 = v5[10];
      v58 = (uint64_t *)v5[11];
      if (qword_1000EB638 != -1)
        swift_once(&qword_1000EB638, sub_10002F85C);
      URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
      v31 = a1[3];
      v32 = a1[4];
      sub_10004242C(a1, v31);
      v33 = *(_OWORD *)(v5 + 5);
      v59[0] = *(_OWORD *)(v5 + 3);
      v59[1] = v33;
      v60[0] = *(_OWORD *)(v5 + 7);
      *(_QWORD *)((char *)v60 + 13) = *(uint64_t *)((char *)v5 + 69);
      v34 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v32 + 80))(v59, v31, v32);
      v36 = v35;
      ObjectType = swift_getObjectType(v30);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v28, v34, v36, ObjectType, v58);
      v38 = v53;
      v39 = v28;
      v40 = *(void (**)(char *, uint64_t))(v52 + 8);
      v40(v39, v53);
      v41 = sub_100040B10(v34, v36);
      v58 = &v49;
      v61 = v57;
      __chkstk_darwin(v41);
      v42 = (uint64_t)v56;
      *(&v49 - 4) = (uint64_t)v27;
      *(&v49 - 3) = v42;
      *(&v49 - 2) = v51;
      v44 = *(_QWORD *)(v50 + 80);
      v43 = *(_QWORD *)(v50 + 88);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v43);
      swift_getAssociatedConformanceWitness(v43, v44, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
      v46 = type metadata accessor for ICObjectReferences(255);
      v47 = type metadata accessor for Array(0, v46);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v47);
      Sequence.forEach(_:)(sub_10007E1D4, &v49 - 6, v47, WitnessTable);
      v40((char *)v42, v38);
    }
  }
}

void sub_1000783B4(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t KeyPath;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  Class v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  NSProgress v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  id v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  unint64_t v57;
  uint64_t ObjectType;
  uint64_t v59;
  Class v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Class isa;
  char *v75;
  _OWORD v76[2];
  _OWORD v77[2];

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (objc_class *)((char *)&v68 - v13);
  NSProgress.throwIfCancelled()();
  if (v16)
    return;
  v73 = a3;
  isa = v14;
  v17 = a4;
  v18 = v75;
  v71 = v9;
  v72 = v8;
  __chkstk_darwin(v15);
  *(&v68 - 2) = type metadata accessor for ICModernObjectProvider(0);
  *(&v68 - 1) = sub_100042114(&qword_1000EC950, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
  KeyPath = swift_getKeyPath(&unk_1000B6130);
  swift_retain(KeyPath);
  v70 = a2;
  v20 = sub_10007D984(a2, KeyPath);
  swift_release_n(KeyPath, 2);
  v21 = v20[2];
  if (!v21)
  {
    v22 = 0;
    v24 = v12;
    v25 = v18;
    v26 = isa;
    v27 = a1;
LABEL_8:
    swift_bridgeObjectRelease(v20);
    if (__OFADD__(v22, 1))
      goto LABEL_26;
    v75 = v24;
    v30.super.isa = NSProgress.addingChild(totalUnitCount:pendingUnitCount:)(v22 + 1, 1).super.isa;
    v31 = v27[3];
    v32 = v27[4];
    sub_10004242C(v27, v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
    if (v33)
    {
      v34 = v33;
      v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v36 = objc_msgSend(v35, "ic_sanitizedFilenameString");

      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      v40 = HIBYTE(v39) & 0xF;
      if ((v39 & 0x2000000000000000) == 0)
        v40 = v37 & 0xFFFFFFFFFFFFLL;
      if (v40)
      {
LABEL_15:
        sub_100076964(v37, v39, v73, 1702129518, 0xE400000000000000, (uint64_t)v26);
        a1 = 0;
        v69 = v17;
        isa = v30.super.isa;
        swift_bridgeObjectRelease(v39);
        if (qword_1000EB638 == -1)
          goto LABEL_16;
        goto LABEL_27;
      }
      swift_bridgeObjectRelease(v39);
    }
    v41 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v41, "localizedStringForKey:value:table:", v42, 0, 0);

    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v39 = v44;
    swift_bridgeObjectRelease(0);

    goto LABEL_15;
  }
  v22 = 0;
  v23 = v20 + 4;
  v24 = v12;
  v25 = v18;
  v26 = isa;
  v27 = a1;
  while (1)
  {
    v28 = *v23++;
    v29 = __OFADD__(v22, v28);
    v22 += v28;
    if (v29)
      break;
    if (!--v21)
      goto LABEL_8;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  swift_once(&qword_1000EB638, sub_10002F85C);
LABEL_16:
  v45 = v75;
  URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
  v46 = *((_QWORD *)v25 + 10);
  v73 = *((_QWORD *)v25 + 11);
  v47 = v27[3];
  v48 = v27;
  v49 = v45;
  v50 = v48[4];
  sub_10004242C(v48, v47);
  v51 = *(_OWORD *)(v25 + 40);
  v76[0] = *(_OWORD *)(v25 + 24);
  v76[1] = v51;
  v77[0] = *(_OWORD *)(v25 + 56);
  *(_QWORD *)((char *)v77 + 13) = *(_QWORD *)(v25 + 69);
  v52 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v50 + 80))(v76, v47, v50);
  if (a1)
  {
    v54 = v72;
    v55 = *(void (**)(char *, uint64_t))(v71 + 8);
    v55(v49, v72);

    v55((char *)v26, v54);
  }
  else
  {
    v56 = v52;
    v57 = v53;
    ObjectType = swift_getObjectType(v46);
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v49, v56, v57, ObjectType, v73);
    v59 = v72;
    sub_100040B10(v56, v57);
    v60 = isa;
    v61 = (char *)-[objc_class completedUnitCount](isa, "completedUnitCount");
    if (__OFADD__(v61, 1))
    {
      __break(1u);
    }
    else
    {
      -[objc_class setCompletedUnitCount:](v60, "setCompletedUnitCount:", v61 + 1);
      v62 = v70;
      v63 = *(_QWORD *)(v70 + 16);
      if (v63)
      {
        v64 = *(_QWORD *)(sub_100030EE4(&qword_1000EB8F8) - 8);
        v65 = v62 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
        v66 = *(_QWORD *)(v64 + 72);
        swift_bridgeObjectRetain(v62);
        do
        {
          sub_100073194(v65, v26, isa);
          v65 += v66;
          --v63;
        }
        while (v63);
        swift_bridgeObjectRelease(v70);
        v59 = v72;
      }
      sub_10007BB34((char)objc_msgSend(v69, "completedUnitCount"));

      v67 = *(void (**)(char *, uint64_t))(v71 + 8);
      v67(v75, v59);
      v67((char *)v26, v59);
    }
  }
}

void sub_100078964(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  NSString v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t ObjectType;
  Class v57;
  char *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Class isa;
  id v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[2];
  _OWORD v77[2];
  uint64_t v78;

  v5 = v4;
  v74 = a3;
  v75 = a2;
  v8 = *v5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v66 - v14;
  NSProgress.throwIfCancelled()();
  if (!v17)
  {
    v70 = a4;
    v71 = v5;
    v72 = v13;
    v73 = v15;
    v67 = v10;
    v68 = v9;
    v78 = v75;
    __chkstk_darwin(v16);
    v18 = *(_QWORD *)(v8 + 80);
    v19 = *(_QWORD **)(v8 + 88);
    *(&v66 - 2) = v18;
    *(&v66 - 1) = (uint64_t)v19;
    KeyPath = swift_getKeyPath(&unk_1000B6130);
    v21 = __chkstk_darwin(KeyPath);
    *(&v66 - 4) = v18;
    *(&v66 - 3) = (uint64_t)v19;
    *(&v66 - 2) = v21;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v19);
    swift_getAssociatedConformanceWitness(v19, v18, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
    v23 = type metadata accessor for ICObjectReferences(255);
    v24 = type metadata accessor for Array(0, v23);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v24);
    v27 = sub_10006D890((void (*)(char *, char *))sub_10007E2EC, (uint64_t)(&v66 - 6), v24, (uint64_t)&type metadata for Int, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v26);
    swift_release(KeyPath, v28);
    v29 = *(_QWORD *)(v27 + 16);
    if (v29)
    {
      v30 = 0;
      v31 = (uint64_t *)(v27 + 32);
      v32 = v72;
      while (1)
      {
        v33 = *v31++;
        v34 = __OFADD__(v30, v33);
        v30 += v33;
        if (v34)
          break;
        if (!--v29)
          goto LABEL_8;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      swift_once(&qword_1000EB638, sub_10002F85C);
LABEL_16:
      URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
      v49 = v19[10];
      v74 = v19[11];
      v50 = a1[3];
      v51 = a1[4];
      sub_10004242C(a1, v50);
      v52 = *(_OWORD *)(v19 + 5);
      v76[0] = *(_OWORD *)(v19 + 3);
      v76[1] = v52;
      v77[0] = *(_OWORD *)(v19 + 7);
      *(_QWORD *)((char *)v77 + 13) = *(_QWORD *)((char *)v19 + 69);
      v53 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v51 + 80))(v76, v50, v51);
      v55 = v54;
      ObjectType = swift_getObjectType(v49);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v32, v53, v55, ObjectType, v74);
      v57 = isa;
      sub_100040B10(v53, v55);
      v58 = (char *)-[objc_class completedUnitCount](v57, "completedUnitCount");
      v59 = v68;
      if (__OFADD__(v58, 1))
      {
        __break(1u);
      }
      else
      {
        v60 = -[objc_class setCompletedUnitCount:](v57, "setCompletedUnitCount:", v58 + 1);
        v78 = v75;
        __chkstk_darwin(v60);
        v61 = (uint64_t)v73;
        *(&v66 - 4) = (uint64_t)v71;
        *(&v66 - 3) = v61;
        *(&v66 - 2) = (uint64_t)v57;
        v62 = v66;
        v63 = swift_getWitnessTable(&protocol conformance descriptor for [A], v66);
        Sequence.forEach(_:)(sub_10007E1D4, &v66 - 6, v62, v63);
        v64 = v72;
        sub_10007BC50((char)objc_msgSend(v70, "completedUnitCount"));

        v65 = *(void (**)(char *, uint64_t))(v67 + 8);
        v65(v64, v59);
        v65((char *)v61, v59);
      }
      return;
    }
    v30 = 0;
    v32 = v72;
LABEL_8:
    swift_bridgeObjectRelease(v27);
    if (__OFADD__(v30, 1))
      goto LABEL_20;
    isa = NSProgress.addingChild(totalUnitCount:pendingUnitCount:)(v30 + 1, 1).super.isa;
    v35 = a1[3];
    v36 = a1[4];
    sub_10004242C(a1, v35);
    (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
    if (v37)
    {
      v38 = v37;
      v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v38);
      v40 = objc_msgSend(v39, "ic_sanitizedFilenameString");

      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      v44 = HIBYTE(v43) & 0xF;
      if ((v43 & 0x2000000000000000) == 0)
        v44 = v41 & 0xFFFFFFFFFFFFLL;
      if (v44)
      {
LABEL_15:
        v19 = v71;
        sub_100076EA0(v41, v43, v74, 1702129518, 0xE400000000000000, (uint64_t)v73);
        v66 = v24;
        swift_bridgeObjectRelease(v43);
        if (qword_1000EB638 == -1)
          goto LABEL_16;
        goto LABEL_21;
      }
      swift_bridgeObjectRelease(v43);
    }
    v45 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v46 = String._bridgeToObjectiveC()();
    v47 = objc_msgSend(v45, "localizedStringForKey:value:table:", v46, 0, 0);

    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v43 = v48;
    swift_bridgeObjectRelease(0);

    goto LABEL_15;
  }
}

void sub_100078F7C(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t ObjectType;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  NSString v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  void (*v150)(char *, uint64_t);
  unint64_t v151;
  unint64_t v152;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(char *, uint64_t);
  void (*v183)(char *, uint64_t);
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  __int128 v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  unint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  char v206[8];
  uint64_t v207;
  uint64_t v208;
  char v209[8];
  _QWORD v210[3];
  char v211[8];
  uint64_t v212;
  _QWORD v213[3];
  char v214[8];
  _QWORD v215[3];
  char v216[8];
  _OWORD v217[2];
  _BYTE v218[21];
  uint64_t v219;

  v200 = a3;
  v197 = a2;
  v204 = a1;
  v5 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v6 = __chkstk_darwin(v5);
  v201 = (char *)&v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v196 = (char *)&v184 - v8;
  v199 = type metadata accessor for URL(0);
  v203 = *(_QWORD *)(v199 - 8);
  v9 = __chkstk_darwin(v199);
  v195 = (char *)&v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v184 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v184 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v184 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v184 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v184 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v184 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v184 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v184 - v32;
  NSProgress.throwIfCancelled()();
  v205 = v34;
  if (v34)
    return;
  v185 = v25;
  v186 = v28;
  v187 = v22;
  *(_QWORD *)&v188 = v19;
  v192 = v16;
  v193 = v13;
  v194 = v31;
  v198 = v33;
  v189 = a4;
  v35 = v204;
  v36 = v204[3];
  v37 = v204[4];
  sub_10004242C(v204, v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
  if (v39)
  {
    v40 = v38;
    v41 = v39;
  }
  else
  {
    v42 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v43 = String._bridgeToObjectiveC()();
    v44 = objc_msgSend(v42, "localizedStringForKey:value:table:", v43, 0, 0);

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v41 = v45;

  }
  v46 = (uint64_t)v198;
  v47 = (uint64_t)v194;
  v48 = v205;
  v49 = v202;
  sub_100076964(v40, v41, v200, 0x656D686361747461, 0xEA0000000000746ELL, (uint64_t)v198);
  v50 = v48;
  if (v48)
  {
    v205 = v48;
    swift_bridgeObjectRelease(v41);
    return;
  }
  swift_bridgeObjectRelease(v41);
  if (qword_1000EB638 != -1)
LABEL_91:
    swift_once(&qword_1000EB638, sub_10002F85C);
  URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
  v51 = *(_QWORD *)(v49 + 80);
  v200 = *(_QWORD *)(v49 + 88);
  v52 = v35[3];
  v53 = v35[4];
  sub_10004242C(v35, v52);
  v54 = *(_OWORD *)(v49 + 40);
  v217[0] = *(_OWORD *)(v49 + 24);
  v217[1] = v54;
  *(_OWORD *)v218 = *(_OWORD *)(v49 + 56);
  *(_QWORD *)&v218[13] = *(_QWORD *)(v49 + 69);
  v55 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v53 + 80))(v217, v52, v53);
  if (v50)
  {
    v205 = v50;
    v57 = *(void (**)(uint64_t, uint64_t))(v203 + 8);
    v58 = v199;
    v57(v47, v199);
    v57(v46, v58);
    return;
  }
  v59 = v55;
  v60 = v56;
  ObjectType = swift_getObjectType(v51);
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v47, v59, v60, ObjectType, v200);
  v205 = 0;
  v190 = ObjectType;
  v191 = v51;
  sub_100040B10(v59, v60);
  v62 = sub_100036000(0, &qword_1000EC988, ICArchive_ptr);
  v63 = v204;
  v64 = v204[3];
  v65 = v204[4];
  v66 = sub_10004242C(v204, v64);
  sub_100030B90((uint64_t)v66, v62, v64, v65);
  v50 = "SMALL_GRMEDIUM_GLARGE_GRSMALL_LIMEDIUM_LLARGE_LI" + 8;
  if (v67)
  {
    v68 = v67;
    v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v68);
    v70 = objc_msgSend(v69, "ic_sanitizedFilenameString");

    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v73 = v72;

    v74 = v63[3];
    v75 = v63[4];
    sub_10004242C(v63, v74);
    v76 = (uint64_t)v196;
    (*(void (**)(uint64_t, uint64_t))(v75 + 40))(v74, v75);
    v77 = v203;
    v78 = v199;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v203 + 48))(v76, 1, v199) == 1)
    {
      sub_100036060(v76, (uint64_t *)&unk_1000EC2E0);
      v79 = v63[3];
      v80 = v63[4];
      sub_10004242C(v63, v79);
      v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 48))(v79, v80);
      if (v82 >> 60 == 15)
      {
        swift_bridgeObjectRelease(v73);
        v47 = v199;
        v35 = (_QWORD *)v203;
LABEL_29:
        v50 = "MEDIUM_GLARGE_GRSMALL_LIMEDIUM_LLARGE_LI";
        goto LABEL_30;
      }
      v88 = v81;
      v89 = v82;
      v90 = v195;
      URL.appendingPathComponent(_:isDirectory:)(v71, v73, 0);
      swift_bridgeObjectRelease(v73);
      v91 = v205;
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v90, v88, v89, v190, v200);
      v87 = v91;
      v47 = v199;
      if (!v91)
      {
        v205 = 0;
        v35 = (_QWORD *)v203;
        (*(void (**)(char *, uint64_t))(v203 + 8))(v90, v199);
        sub_100048E78(v88, v89);
        goto LABEL_29;
      }
      (*(void (**)(char *, uint64_t))(v203 + 8))(v90, v199);
      sub_100048E78(v88, v89);
      v205 = 0;
    }
    else
    {
      v83 = v186;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v186, v76, v78);
      v84 = v185;
      URL.appendingPathComponent(_:isDirectory:)(v71, v73, 0);
      swift_bridgeObjectRelease(v73);
      v85 = v205;
      dispatch thunk of ICFileManaging.copyItem(at:to:)(v83, v84, v190, v200);
      if (!v85)
      {
        v205 = 0;
        v102 = *(void (**)(char *, uint64_t))(v77 + 8);
        v102(v84, v78);
        v102(v83, v78);
        v47 = v78;
        v35 = (_QWORD *)v77;
        goto LABEL_29;
      }
      v86 = *(void (**)(char *, uint64_t))(v77 + 8);
      v86(v84, v78);
      v86(v83, v78);
      v87 = v85;
      v205 = 0;
      v47 = v78;
    }
    v50 = "MEDIUM_GLARGE_GRSMALL_LIMEDIUM_LLARGE_LI";
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v92 = type metadata accessor for Logger(0);
    sub_10003609C(v92, (uint64_t)qword_1000EC868);
    swift_errorRetain(v87);
    v93 = swift_errorRetain(v87);
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(12, -1);
      v97 = swift_slowAlloc(32, -1);
      v219 = v97;
      *(_DWORD *)v96 = 136315138;
      swift_getErrorValue(v87, v209, v206);
      v98 = Error.localizedDescription.getter(v207, v208);
      v100 = v99;
      v212 = sub_10005F12C(v98, v99, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v96 + 4, v96 + 12);
      swift_bridgeObjectRelease(v100);
      swift_errorRelease(v87);
      swift_errorRelease(v87);
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Cannot export attachment media file â€” skipping {error: %s}", v96, 0xCu);
      swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
      v101 = v97;
      v47 = v199;
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v96, -1, -1);

      swift_errorRelease(v87);
    }
    else
    {
      swift_errorRelease(v87);
      swift_errorRelease(v87);
      swift_errorRelease(v87);

    }
  }
  else
  {
    v47 = v199;
  }
  v35 = (_QWORD *)v203;
LABEL_30:
  v103 = v204[3];
  v104 = v204[4];
  sub_10004242C(v204, v103);
  v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 64))(v103, v104);
  if (v106 >> 60 != 15)
  {
    v46 = v105;
    v49 = v106;
    if (qword_1000EB640 != -1)
LABEL_94:
      swift_once(&qword_1000EB640, sub_10002F884);
    v107 = v187;
    URL.appendingPathComponent(_:isDirectory:)(qword_1000F6930, *(_QWORD *)algn_1000F6938, 0);
    v108 = v205;
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v107, v46, v49, v190, v200);
    v205 = v108;
    if (v108)
    {
      v109 = v107;
      v110 = v50;
      ((void (*)(char *, uint64_t))v35[1])(v109, v47);
      if (qword_1000EB6A8 != -1)
        swift_once(&qword_1000EB6A8, sub_10006DCE4);
      v111 = type metadata accessor for Logger(0);
      sub_10003609C(v111, (uint64_t)qword_1000EC868);
      v112 = v205;
      swift_errorRetain(v205);
      v113 = swift_errorRetain(v112);
      v114 = Logger.logObject.getter(v113);
      v115 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v114, v115))
      {
        v116 = (uint8_t *)swift_slowAlloc(12, -1);
        v117 = swift_slowAlloc(32, -1);
        v219 = v117;
        *(_DWORD *)v116 = *((_QWORD *)v110 + 43);
        v196 = (char *)(v116 + 4);
        swift_getErrorValue(v112, v211, v210);
        v118 = Error.localizedDescription.getter(v210[1], v210[2]);
        v120 = v119;
        v212 = sub_10005F12C(v118, v119, &v219);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v196, v116 + 12);
        swift_bridgeObjectRelease(v120);
        swift_errorRelease(v112);
        swift_errorRelease(v112);
        _os_log_impl((void *)&_mh_execute_header, v114, v115, "Cannot export attachment preview image file â€” skipping {error: %s}", v116, 0xCu);
        swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
        v121 = v117;
        v47 = v199;
        swift_slowDealloc(v121, -1, -1);
        swift_slowDealloc(v116, -1, -1);
        sub_100048E78(v46, v49);

        v50 = "SMALL_GRMEDIUM_GLARGE_GRSMALL_LIMEDIUM_LLARGE_LI" + 8;
        swift_errorRelease(v112);
        v205 = 0;
        v35 = (_QWORD *)v203;
      }
      else
      {
        sub_100048E78(v46, v49);
        swift_errorRelease(v112);
        swift_errorRelease(v112);
        swift_errorRelease(v112);

        v205 = 0;
        v35 = (_QWORD *)v203;
        v50 = v110;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t))v35[1])(v107, v47);
      sub_100048E78(v46, v49);
    }
  }
  v122 = v204[3];
  v123 = v204[4];
  sub_10004242C(v204, v122);
  v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 72))(v122, v123);
  if (v125 >> 60 != 15)
  {
    v126 = v124;
    v127 = v125;
    if (qword_1000EB648 != -1)
      swift_once(&qword_1000EB648, sub_10002F8B0);
    v128 = v188;
    URL.appendingPathComponent(_:isDirectory:)(qword_1000F6940, *(_QWORD *)algn_1000F6948, 0);
    v129 = v205;
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v128, v126, v127, v190, v200);
    v205 = v129;
    if (v129)
    {
      ((void (*)(uint64_t, uint64_t))v35[1])(v128, v47);
      if (qword_1000EB6A8 != -1)
        swift_once(&qword_1000EB6A8, sub_10006DCE4);
      v130 = type metadata accessor for Logger(0);
      sub_10003609C(v130, (uint64_t)qword_1000EC868);
      v131 = v205;
      swift_errorRetain(v205);
      v132 = swift_errorRetain(v131);
      v133 = Logger.logObject.getter(v132);
      v134 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v133, v134))
      {
        v135 = (uint8_t *)swift_slowAlloc(12, -1);
        v136 = swift_slowAlloc(32, -1);
        v219 = v136;
        *(_DWORD *)v135 = 136315138;
        v196 = (char *)(v135 + 4);
        swift_getErrorValue(v131, v214, v213);
        v137 = Error.localizedDescription.getter(v213[1], v213[2]);
        v139 = v138;
        v212 = sub_10005F12C(v137, v138, &v219);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v196, v135 + 12);
        swift_bridgeObjectRelease(v139);
        swift_errorRelease(v131);
        swift_errorRelease(v131);
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "Cannot export attachment fallback PDF file â€” skipping {error: %s}", v135, 0xCu);
        swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
        v140 = v136;
        v47 = v199;
        swift_slowDealloc(v140, -1, -1);
        swift_slowDealloc(v135, -1, -1);
        sub_100048E78(v126, v127);

        v50 = "SMALL_GRMEDIUM_GLARGE_GRSMALL_LIMEDIUM_LLARGE_LI" + 8;
        swift_errorRelease(v131);
        v205 = 0;
        v35 = (_QWORD *)v203;
      }
      else
      {
        sub_100048E78(v126, v127);
        swift_errorRelease(v131);
        swift_errorRelease(v131);
        swift_errorRelease(v131);

        v205 = 0;
        v35 = (_QWORD *)v203;
        v50 = "MEDIUM_GLARGE_GRSMALL_LIMEDIUM_LLARGE_LI";
      }
    }
    else
    {
      ((void (*)(uint64_t, uint64_t))v35[1])(v128, v47);
      sub_100048E78(v126, v127);
    }
  }
  v141 = v204[3];
  v142 = v204[4];
  sub_10004242C(v204, v141);
  v143 = (*(uint64_t (**)(uint64_t, uint64_t))(v142 + 56))(v141, v142);
  v46 = 0;
  v145 = *(_QWORD *)(v143 + 56);
  v195 = (char *)(v143 + 56);
  v204 = (_QWORD *)v143;
  v146 = 1 << *(_BYTE *)(v143 + 32);
  v147 = -1;
  if (v146 < 64)
    v147 = ~(-1 << v146);
  v49 = v147 & v145;
  v196 = (char *)((unint64_t)(v146 + 63) >> 6);
  *(_QWORD *)&v144 = *((_QWORD *)v50 + 43);
  v188 = v144;
  v187 = (char *)&type metadata for Any + 8;
  v148 = v201;
  v149 = v192;
  v50 = v205;
  while (1)
  {
    if (v49)
    {
      v151 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      v152 = v151 | (v46 << 6);
      goto LABEL_69;
    }
    if (__OFADD__(v46++, 1))
    {
      __break(1u);
      goto LABEL_91;
    }
    if (v46 >= (uint64_t)v196)
      break;
    v154 = *(_QWORD *)&v195[8 * v46];
    if (!v154)
    {
      v155 = v46 + 1;
      if (v46 + 1 >= (uint64_t)v196)
        break;
      v154 = *(_QWORD *)&v195[8 * v155];
      if (!v154)
      {
        v155 = v46 + 2;
        if (v46 + 2 >= (uint64_t)v196)
          break;
        v154 = *(_QWORD *)&v195[8 * v155];
        if (!v154)
        {
          v155 = v46 + 3;
          if (v46 + 3 >= (uint64_t)v196)
            break;
          v154 = *(_QWORD *)&v195[8 * v155];
          if (!v154)
          {
            v155 = v46 + 4;
            if (v46 + 4 >= (uint64_t)v196)
              break;
            v154 = *(_QWORD *)&v195[8 * v155];
            if (!v154)
            {
              while (1)
              {
                v46 = v155 + 1;
                if (__OFADD__(v155, 1))
                  goto LABEL_93;
                if (v46 >= (uint64_t)v196)
                  goto LABEL_81;
                v154 = *(_QWORD *)&v195[8 * v46];
                ++v155;
                if (v154)
                  goto LABEL_68;
              }
            }
          }
        }
      }
      v46 = v155;
    }
LABEL_68:
    v49 = (v154 - 1) & v154;
    v152 = __clz(__rbit64(v154)) + (v46 << 6);
LABEL_69:
    ((void (*)(char *, unint64_t, uint64_t))v35[2])(v148, v204[6] + v35[9] * v152, v47);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v35[7])(v148, 0, 1, v47);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v35[6])(v148, 1, v47) == 1)
      goto LABEL_82;
    v205 = (char *)v49;
    v157 = v46;
    v158 = ((uint64_t (*)(char *, char *, uint64_t))v35[4])(v149, v148, v47);
    v159 = URL.lastPathComponent.getter(v158);
    v161 = v160;
    v162 = v47;
    v163 = v193;
    URL.appendingPathComponent(_:isDirectory:)(v159, v160, 0);
    swift_bridgeObjectRelease(v161);
    dispatch thunk of ICFileManaging.copyItem(at:to:)(v149, v163, v190, v200);
    if (v50)
    {
      v164 = (void (*)(char *, uint64_t))v35[1];
      v164(v163, v162);
      v47 = v162;
      if (qword_1000EB6A8 != -1)
        swift_once(&qword_1000EB6A8, sub_10006DCE4);
      v165 = type metadata accessor for Logger(0);
      sub_10003609C(v165, (uint64_t)qword_1000EC868);
      swift_errorRetain(v50);
      v166 = swift_errorRetain(v50);
      v167 = Logger.logObject.getter(v166);
      v168 = static os_log_type_t.error.getter();
      v46 = v157;
      if (os_log_type_enabled(v167, v168))
      {
        v169 = swift_slowAlloc(12, -1);
        v170 = swift_slowAlloc(32, -1);
        v219 = v170;
        *(_DWORD *)v169 = v188;
        swift_getErrorValue(v50, v216, v215);
        v171 = Error.localizedDescription.getter(v215[1], v215[2]);
        v173 = v172;
        *(_QWORD *)(v169 + 4) = sub_10005F12C(v171, v172, &v219);
        swift_bridgeObjectRelease(v173);
        swift_errorRelease(v50);
        swift_errorRelease(v50);
        _os_log_impl((void *)&_mh_execute_header, v167, v168, "Cannot export attachment asset file â€” skipping {error: %s}", (uint8_t *)v169, 0xCu);
        swift_arrayDestroy(v170, 1, v187);
        swift_slowDealloc(v170, -1, -1);
        v174 = v169;
        v47 = v199;
        swift_slowDealloc(v174, -1, -1);

      }
      else
      {

        swift_errorRelease(v50);
        swift_errorRelease(v50);
      }
      swift_errorRelease(v50);
      v149 = v192;
      v164(v192, v47);
      v50 = 0;
      v35 = (_QWORD *)v203;
      v148 = v201;
    }
    else
    {
      v150 = (void (*)(char *, uint64_t))v35[1];
      v150(v163, v162);
      v150(v149, v162);
      v148 = v201;
      v47 = v162;
      v46 = v157;
    }
    v49 = (unint64_t)v205;
  }
LABEL_81:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v35[7])(v148, 1, 1, v47);
LABEL_82:
  swift_release(v204, v156);
  v175 = v197;
  v176 = v189;
  v177 = (char *)objc_msgSend(v189, "completedUnitCount");
  if (__OFADD__(v177, 1))
  {
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  objc_msgSend(v176, "setCompletedUnitCount:", v177 + 1);
  v178 = *(_QWORD *)(v175 + 16);
  if (v178)
  {
    v179 = *(_QWORD *)(sub_100030EE4(&qword_1000EB8F8) - 8);
    v180 = v175 + ((*(unsigned __int8 *)(v179 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80));
    v181 = *(_QWORD *)(v179 + 72);
    swift_bridgeObjectRetain(v175);
    while (1)
    {
      sub_100073194(v180, v198, v176);
      if (v50)
        break;
      v180 += v181;
      if (!--v178)
      {
        swift_bridgeObjectRelease(v175);
        goto LABEL_88;
      }
    }
    v205 = v50;
    swift_bridgeObjectRelease(v175);
    v183 = (void (*)(char *, uint64_t))v35[1];
    v183(v194, v47);
    v183(v198, v47);
  }
  else
  {
LABEL_88:
    v182 = (void (*)(char *, uint64_t))v35[1];
    v182(v194, v47);
    v182(v198, v47);
  }
}

void sub_10007A4DC(_QWORD *a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t ObjectType;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  NSString v70;
  id v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint8_t *v90;
  uint8_t *v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint8_t *v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  void (*v155)(char *, _QWORD *);
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, _QWORD *);
  uint64_t v174;
  uint64_t v175;
  NSObject *v176;
  os_log_type_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  void *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t AssociatedTypeWitness;
  uint64_t v193;
  uint64_t v194;
  uint64_t WitnessTable;
  void (*v196)(char *, uint64_t);
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  __int128 v202;
  char *v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _QWORD *v219;
  uint8_t *v220;
  char v221[8];
  uint64_t v222;
  uint64_t v223;
  char v224[8];
  _QWORD v225[3];
  char v226[8];
  uint64_t v227;
  _QWORD v228[3];
  char v229[8];
  _QWORD v230[3];
  char v231[8];
  _OWORD v232[2];
  _BYTE v233[21];
  unint64_t v234;

  v216 = a3;
  v209 = a2;
  v219 = a1;
  v210 = *v4;
  v6 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v7 = __chkstk_darwin(v6);
  v212 = (char *)&v198 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v208 = (char *)&v198 - v9;
  v213 = type metadata accessor for URL(0);
  v217 = *(_QWORD *)(v213 - 8);
  v10 = __chkstk_darwin(v213);
  v215 = (char *)&v198 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v211 = (char *)&v198 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v198 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v198 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v198 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v198 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v198 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v198 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v198 - v32;
  NSProgress.throwIfCancelled()();
  v220 = v34;
  if (v34)
    return;
  v200 = v25;
  v201 = v28;
  v199 = v22;
  *(_QWORD *)&v202 = v19;
  v203 = v16;
  v207 = v31;
  v204 = a4;
  v214 = v33;
  v35 = v219[3];
  v36 = v219[4];
  sub_10004242C(v219, v35);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
  if (v38)
  {
    v39 = v37;
    v40 = v38;
  }
  else
  {
    v41 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v41, "localizedStringForKey:value:table:", v42, 0, 0);

    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v40 = v44;

  }
  v45 = v218;
  v46 = (uint64_t)v207;
  v47 = (uint64_t)v220;
  sub_100076EA0(v39, v40, v216, 0x656D686361747461, 0xEA0000000000746ELL, (uint64_t)v214);
  v48 = v47;
  if (v47)
  {
    v220 = (uint8_t *)v47;
    swift_bridgeObjectRelease(v40);
    return;
  }
  swift_bridgeObjectRelease(v40);
  if (qword_1000EB638 != -1)
LABEL_91:
    swift_once(&qword_1000EB638, sub_10002F85C);
  v49 = (uint64_t)v214;
  URL.appendingPathComponent(_:isDirectory:)(qword_1000F6920, *(_QWORD *)algn_1000F6928, 0);
  v51 = *(_QWORD *)(v45 + 80);
  v50 = *(_QWORD *)(v45 + 88);
  v52 = v219[3];
  v53 = v219[4];
  sub_10004242C(v219, v52);
  v54 = *(_OWORD *)(v45 + 40);
  v232[0] = *(_OWORD *)(v45 + 24);
  v232[1] = v54;
  *(_OWORD *)v233 = *(_OWORD *)(v45 + 56);
  *(_QWORD *)&v233[13] = *(_QWORD *)(v45 + 69);
  v55 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v53 + 80))(v232, v52, v53);
  if (v48)
  {
    v220 = (uint8_t *)v48;
    v57 = *(void (**)(uint64_t, uint64_t))(v217 + 8);
    v58 = v213;
    v57(v46, v213);
    v59 = v49;
LABEL_10:
    v57(v59, v58);
    return;
  }
  v60 = v55;
  v61 = v56;
  ObjectType = swift_getObjectType(v51);
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v46, v60, v61, ObjectType, v50);
  v220 = 0;
  v216 = ObjectType;
  v206 = v50;
  sub_100040B10(v60, v61);
  v63 = sub_100036000(0, &qword_1000EC988, ICArchive_ptr);
  v64 = v219;
  v65 = v219[3];
  v66 = v219[4];
  v67 = sub_10004242C(v219, v65);
  sub_100030B90((uint64_t)v67, v63, v65, v66);
  v205 = v51;
  if (v68)
  {
    v69 = v68;
    v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v69);
    v71 = objc_msgSend(v70, "ic_sanitizedFilenameString");

    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v73 = v64;
    v75 = v74;

    v76 = v73[3];
    v77 = v73[4];
    sub_10004242C(v73, v76);
    v78 = (uint64_t)v208;
    (*(void (**)(uint64_t, uint64_t))(v77 + 40))(v76, v77);
    v79 = v217;
    v80 = v213;
    v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v217 + 48))(v78, 1, v213);
    v46 = v216;
    if (v81 == 1)
    {
      sub_100036060(v78, (uint64_t *)&unk_1000EC2E0);
      v82 = v73[3];
      v83 = v73[4];
      sub_10004242C(v73, v82);
      v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 48))(v82, v83);
      if (v85 >> 60 == 15)
      {
        swift_bridgeObjectRelease(v75);
LABEL_30:
        v64 = v219;
        goto LABEL_31;
      }
      v93 = v84;
      v94 = v85;
      v95 = v199;
      URL.appendingPathComponent(_:isDirectory:)(v72, v75, 0);
      swift_bridgeObjectRelease(v75);
      v96 = v220;
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v95, v93, v94, v46, v206);
      if (!v96)
      {
        v220 = 0;
        (*(void (**)(char *, uint64_t))(v217 + 8))(v95, v213);
        sub_100048E78(v93, v94);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v217 + 8))(v95, v213);
      sub_100048E78(v93, v94);
      v91 = v96;
    }
    else
    {
      v86 = v201;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v201, v78, v80);
      v87 = v200;
      URL.appendingPathComponent(_:isDirectory:)(v72, v75, 0);
      v88 = v75;
      v89 = v87;
      swift_bridgeObjectRelease(v88);
      v90 = v220;
      dispatch thunk of ICFileManaging.copyItem(at:to:)(v86, v87, v46, v206);
      v91 = v90;
      if (!v90)
      {
        v220 = 0;
        v106 = *(void (**)(char *, uint64_t))(v79 + 8);
        v106(v89, v80);
        v106(v86, v80);
        goto LABEL_30;
      }
      v92 = *(void (**)(char *, uint64_t))(v79 + 8);
      v92(v89, v80);
      v92(v86, v80);
    }
    v220 = 0;
    if (qword_1000EB6A8 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v97 = type metadata accessor for Logger(0);
    sub_10003609C(v97, (uint64_t)qword_1000EC868);
    swift_errorRetain(v91);
    v98 = swift_errorRetain(v91);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc(12, -1);
      v102 = swift_slowAlloc(32, -1);
      v234 = v102;
      *(_DWORD *)v101 = 136315138;
      swift_getErrorValue(v91, v224, v221);
      v103 = Error.localizedDescription.getter(v222, v223);
      v105 = v104;
      v227 = sub_10005F12C(v103, v104, (uint64_t *)&v234);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228, v101 + 4, v101 + 12);
      swift_bridgeObjectRelease(v105);
      swift_errorRelease(v91);
      swift_errorRelease(v91);
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "Cannot export attachment media file â€” skipping {error: %s}", v101, 0xCu);
      swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v101, -1, -1);

      swift_errorRelease(v91);
    }
    else
    {
      swift_errorRelease(v91);
      swift_errorRelease(v91);
      swift_errorRelease(v91);

    }
    v46 = v216;
    goto LABEL_30;
  }
  v46 = v216;
LABEL_31:
  v107 = v64[3];
  v108 = v64[4];
  sub_10004242C(v64, v107);
  v109 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 64))(v107, v108);
  if (v110 >> 60 == 15)
  {
    v111 = v217;
  }
  else
  {
    v48 = v109;
    v45 = v110;
    v111 = v217;
    if (qword_1000EB640 != -1)
LABEL_94:
      swift_once(&qword_1000EB640, sub_10002F884);
    v112 = v202;
    URL.appendingPathComponent(_:isDirectory:)(qword_1000F6930, *(_QWORD *)algn_1000F6938, 0);
    v113 = v220;
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v112, v48, v45, v46, v206);
    v220 = v113;
    if (v113)
    {
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v213);
      if (qword_1000EB6A8 != -1)
        swift_once(&qword_1000EB6A8, sub_10006DCE4);
      v114 = type metadata accessor for Logger(0);
      sub_10003609C(v114, (uint64_t)qword_1000EC868);
      v115 = v220;
      swift_errorRetain(v220);
      v116 = swift_errorRetain(v115);
      v117 = Logger.logObject.getter(v116);
      v118 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v117, v118))
      {
        v119 = (uint8_t *)swift_slowAlloc(12, -1);
        v120 = swift_slowAlloc(32, -1);
        v234 = v120;
        *(_DWORD *)v119 = 136315138;
        v208 = (char *)(v119 + 4);
        swift_getErrorValue(v115, v226, v225);
        v121 = Error.localizedDescription.getter(v225[1], v225[2]);
        v123 = v122;
        v227 = sub_10005F12C(v121, v122, (uint64_t *)&v234);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228, v208, v119 + 12);
        swift_bridgeObjectRelease(v123);
        swift_errorRelease(v115);
        swift_errorRelease(v115);
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "Cannot export attachment preview image file â€” skipping {error: %s}", v119, 0xCu);
        swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
        v124 = v120;
        v111 = v217;
        swift_slowDealloc(v124, -1, -1);
        v125 = v119;
        v64 = v219;
        swift_slowDealloc(v125, -1, -1);
        sub_100048E78(v48, v45);

        swift_errorRelease(v115);
      }
      else
      {
        sub_100048E78(v48, v45);
        swift_errorRelease(v115);
        swift_errorRelease(v115);
        swift_errorRelease(v115);

      }
      v220 = 0;
      v46 = v216;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v213);
      sub_100048E78(v48, v45);
    }
  }
  v126 = v64[3];
  v127 = v64[4];
  sub_10004242C(v64, v126);
  v128 = (*(uint64_t (**)(uint64_t, uint64_t))(v127 + 72))(v126, v127);
  if (v129 >> 60 == 15)
  {
    v48 = (uint64_t)v220;
  }
  else
  {
    v130 = v128;
    v131 = v129;
    if (qword_1000EB648 != -1)
      swift_once(&qword_1000EB648, sub_10002F8B0);
    v132 = v203;
    URL.appendingPathComponent(_:isDirectory:)(qword_1000F6940, *(_QWORD *)algn_1000F6948, 0);
    v133 = v220;
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v132, v130, v131, v46, v206);
    if (v133)
    {
      (*(void (**)(char *, uint64_t))(v111 + 8))(v132, v213);
      if (qword_1000EB6A8 != -1)
        swift_once(&qword_1000EB6A8, sub_10006DCE4);
      v134 = type metadata accessor for Logger(0);
      sub_10003609C(v134, (uint64_t)qword_1000EC868);
      swift_errorRetain(v133);
      v135 = swift_errorRetain(v133);
      v136 = Logger.logObject.getter(v135);
      v137 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v136, v137))
      {
        v138 = (uint8_t *)swift_slowAlloc(12, -1);
        v139 = swift_slowAlloc(32, -1);
        v234 = v139;
        *(_DWORD *)v138 = 136315138;
        v220 = v138 + 4;
        swift_getErrorValue(v133, v229, v228);
        v140 = Error.localizedDescription.getter(v228[1], v228[2]);
        v142 = v141;
        v227 = sub_10005F12C(v140, v141, (uint64_t *)&v234);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228, v220, v138 + 12);
        swift_bridgeObjectRelease(v142);
        swift_errorRelease(v133);
        swift_errorRelease(v133);
        _os_log_impl((void *)&_mh_execute_header, v136, v137, "Cannot export attachment fallback PDF file â€” skipping {error: %s}", v138, 0xCu);
        swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
        v143 = v139;
        v111 = v217;
        swift_slowDealloc(v143, -1, -1);
        v144 = v138;
        v64 = v219;
        swift_slowDealloc(v144, -1, -1);
        sub_100048E78(v130, v131);

        swift_errorRelease(v133);
      }
      else
      {
        sub_100048E78(v130, v131);
        swift_errorRelease(v133);
        swift_errorRelease(v133);
        swift_errorRelease(v133);

      }
      v48 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v111 + 8))(v132, v213);
      sub_100048E78(v130, v131);
      v48 = 0;
    }
  }
  v145 = v64[3];
  v146 = v64[4];
  sub_10004242C(v64, v145);
  v147 = (*(uint64_t (**)(uint64_t, uint64_t))(v146 + 56))(v145, v146);
  v46 = 0;
  v149 = *(_QWORD *)(v147 + 56);
  v203 = (char *)(v147 + 56);
  v219 = (_QWORD *)v147;
  v150 = 1 << *(_BYTE *)(v147 + 32);
  v151 = -1;
  if (v150 < 64)
    v151 = ~(-1 << v150);
  v152 = v151 & v149;
  v208 = (char *)((unint64_t)(v150 + 63) >> 6);
  *(_QWORD *)&v148 = 136315138;
  v202 = v148;
  v201 = (char *)&type metadata for Any + 8;
  v45 = (unint64_t)v212;
  v153 = v211;
  v64 = (_QWORD *)v213;
  while (1)
  {
    if (v152)
    {
      v156 = __clz(__rbit64(v152));
      v157 = (v152 - 1) & v152;
      v158 = v156 | (v46 << 6);
      goto LABEL_72;
    }
    if (__OFADD__(v46++, 1))
    {
      __break(1u);
      goto LABEL_91;
    }
    if (v46 >= (uint64_t)v208)
      break;
    v160 = *(_QWORD *)&v203[8 * v46];
    if (!v160)
    {
      v161 = v46 + 1;
      if (v46 + 1 >= (uint64_t)v208)
        break;
      v160 = *(_QWORD *)&v203[8 * v161];
      if (!v160)
      {
        v161 = v46 + 2;
        if (v46 + 2 >= (uint64_t)v208)
          break;
        v160 = *(_QWORD *)&v203[8 * v161];
        if (!v160)
        {
          v161 = v46 + 3;
          if (v46 + 3 >= (uint64_t)v208)
            break;
          v160 = *(_QWORD *)&v203[8 * v161];
          if (!v160)
          {
            while (1)
            {
              v46 = v161 + 1;
              if (__OFADD__(v161, 1))
                break;
              if (v46 >= (uint64_t)v208)
                goto LABEL_85;
              v160 = *(_QWORD *)&v203[8 * v46];
              ++v161;
              if (v160)
                goto LABEL_71;
            }
            __break(1u);
LABEL_93:
            __break(1u);
            goto LABEL_94;
          }
        }
      }
      v46 = v161;
    }
LABEL_71:
    v157 = (v160 - 1) & v160;
    v158 = __clz(__rbit64(v160)) + (v46 << 6);
LABEL_72:
    (*(void (**)(unint64_t, unint64_t, _QWORD *))(v111 + 16))(v45, v219[6] + *(_QWORD *)(v111 + 72) * v158, v64);
    (*(void (**)(unint64_t, _QWORD, uint64_t, _QWORD *))(v111 + 56))(v45, 0, 1, v64);
    if ((*(unsigned int (**)(unint64_t, uint64_t, _QWORD *))(v111 + 48))(v45, 1, v64) == 1)
    {
      swift_release(v219, v162);
      v184 = v204;
      v185 = v218;
      v186 = v210;
      v45 = v209;
      v46 = (uint64_t)v214;
      goto LABEL_86;
    }
    v220 = (uint8_t *)v157;
    v163 = (*(uint64_t (**)(char *, unint64_t, _QWORD *))(v111 + 32))(v153, v45, v64);
    v164 = v64;
    v165 = v153;
    v166 = URL.lastPathComponent.getter(v163);
    v167 = v111;
    v168 = v48;
    v170 = v169;
    v171 = v215;
    URL.appendingPathComponent(_:isDirectory:)(v166, v169, 0);
    swift_bridgeObjectRelease(v170);
    v172 = v168;
    dispatch thunk of ICFileManaging.copyItem(at:to:)(v165, v171, v216, v206);
    v48 = v168;
    if (v168)
    {
      v173 = *(void (**)(char *, _QWORD *))(v167 + 8);
      v173(v171, v164);
      v64 = v164;
      if (qword_1000EB6A8 != -1)
        swift_once(&qword_1000EB6A8, sub_10006DCE4);
      v174 = type metadata accessor for Logger(0);
      sub_10003609C(v174, (uint64_t)qword_1000EC868);
      swift_errorRetain(v168);
      v175 = swift_errorRetain(v168);
      v176 = Logger.logObject.getter(v175);
      v177 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v176, v177))
      {
        v178 = swift_slowAlloc(12, -1);
        v179 = swift_slowAlloc(32, -1);
        v234 = v179;
        *(_DWORD *)v178 = v202;
        swift_getErrorValue(v172, v231, v230);
        v180 = Error.localizedDescription.getter(v230[1], v230[2]);
        v182 = v181;
        *(_QWORD *)(v178 + 4) = sub_10005F12C(v180, v181, (uint64_t *)&v234);
        swift_bridgeObjectRelease(v182);
        swift_errorRelease(v172);
        swift_errorRelease(v172);
        _os_log_impl((void *)&_mh_execute_header, v176, v177, "Cannot export attachment asset file â€” skipping {error: %s}", (uint8_t *)v178, 0xCu);
        swift_arrayDestroy(v179, 1, v201);
        swift_slowDealloc(v179, -1, -1);
        v183 = v178;
        v64 = (_QWORD *)v213;
        swift_slowDealloc(v183, -1, -1);

      }
      else
      {

        swift_errorRelease(v172);
        swift_errorRelease(v172);
      }
      swift_errorRelease(v172);
      v153 = v211;
      v173(v211, v64);
      v48 = 0;
      v111 = v217;
      v45 = (unint64_t)v212;
    }
    else
    {
      v154 = v171;
      v155 = *(void (**)(char *, _QWORD *))(v167 + 8);
      v155(v154, v164);
      v155(v165, v164);
      v153 = v165;
      v64 = v164;
      v111 = v167;
    }
    v152 = (unint64_t)v220;
  }
LABEL_85:
  v184 = v204;
  v185 = v218;
  v186 = v210;
  v45 = v209;
  v46 = (uint64_t)v214;
  (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v111 + 56))(v212, 1, 1, v64);
  swift_release(v219, v187);
LABEL_86:
  v188 = (char *)objc_msgSend(v184, "completedUnitCount");
  if (__OFADD__(v188, 1))
    goto LABEL_93;
  v189 = objc_msgSend(v184, "setCompletedUnitCount:", v188 + 1);
  v234 = v45;
  __chkstk_darwin(v189);
  *(&v198 - 4) = v185;
  *(&v198 - 3) = v46;
  *(&v198 - 2) = (uint64_t)v184;
  v191 = *(_QWORD *)(v186 + 80);
  v190 = *(_QWORD *)(v186 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v190);
  swift_getAssociatedConformanceWitness(v190, v191, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v193 = type metadata accessor for ICObjectReferences(255);
  v194 = type metadata accessor for Array(0, v193);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v194);
  Sequence.forEach(_:)(sub_10007E1D4, &v198 - 6, v194, WitnessTable);
  if (v48)
  {
    v220 = (uint8_t *)v48;
    v57 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
    v58 = v213;
    v57((uint64_t)v207, v213);
    v59 = v46;
    goto LABEL_10;
  }
  v196 = *(void (**)(char *, uint64_t))(v111 + 8);
  v197 = v213;
  v196(v207, v213);
  v196((char *)v46, v197);
}

uint64_t sub_10007BAA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + a1 - 16);
  v5 = *(_QWORD *)(a2 + a1 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
  swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v7 = type metadata accessor for ICObjectReferences(0);
  result = ICObjectReferences.recursiveAttachmentCount.getter(v7);
  *a3 = result;
  return result;
}

void sub_10007BB34(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;

  v2 = v1;
  if ((*(_BYTE *)(v1 + 112) & 1) != 0 || (a1 & 0x1F) == 0)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = qword_1000EB6A8;
    swift_retain(*(_QWORD *)(v2 + 16));
    if (v4 != -1)
      swift_once(&qword_1000EB6A8, sub_10006DCE4);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10003609C(v5, (uint64_t)qword_1000EC868);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Resetting contextâ€¦", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = (void *)ICModernObjectProvider.context.getter();
    objc_msgSend(v10, "reset");
    swift_release(v3, v11);

    *(_BYTE *)(v2 + 112) = 0;
  }
}

void sub_10007BC50(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;

  v2 = v1;
  if ((*(_BYTE *)(v1 + 112) & 1) != 0 || (a1 & 0x1F) == 0)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = type metadata accessor for ICModernObjectProvider(0);
    if (swift_dynamicCastClass(v3, v4))
    {
      v5 = qword_1000EB6A8;
      swift_unknownObjectRetain(v3);
      if (v5 != -1)
        swift_once(&qword_1000EB6A8, sub_10006DCE4);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10003609C(v6, (uint64_t)qword_1000EC868);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Resetting contextâ€¦", v10, 2u);
        swift_slowDealloc(v10, -1, -1);
      }

      v11 = (void *)ICModernObjectProvider.context.getter();
      objc_msgSend(v11, "reset");
      swift_unknownObjectRelease(v3);

    }
    *(_BYTE *)(v2 + 112) = 0;
  }
}

uint64_t sub_10007BD88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    *(_BYTE *)(result + 112) = 1;
    return swift_release(result, v4);
  }
  return result;
}

uint64_t ICArchiveExporterConfiguration.creator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100031044(v1, a1, qword_1000EC898);
}

uint64_t ICArchiveExporterConfiguration.creator.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10004EFD0(a1, v1, qword_1000EC898);
}

uint64_t ICArchiveExporterConfiguration.exportsActivities.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ICArchiveExporterConfiguration.exportsActivities.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.exportsActivities.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveExporterConfiguration.exportsAttributions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t ICArchiveExporterConfiguration.exportsAttributions.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.exportsAttributions.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveExporterConfiguration.exportsViewDates.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t ICArchiveExporterConfiguration.exportsViewDates.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 50) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.exportsViewDates.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveExporterConfiguration.exportsInternalProperties.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 51);
}

uint64_t ICArchiveExporterConfiguration.exportsInternalProperties.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 51) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.exportsInternalProperties.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveExporterConfiguration.forPagesHandoff.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t ICArchiveExporterConfiguration.forPagesHandoff.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 52) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.forPagesHandoff.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

void sub_10007BEBC()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t IsAlexandriaDemoModeEnabled;
  char v12;
  uint64_t v13;
  uint64_t ObjectType;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  char v20;
  char v21;
  __int16 v22;

  v1 = (void *)objc_opt_self(ICNoteContext);
  v2 = v0;
  v3 = objc_msgSend(v1, "sharedContext");
  if (v3
    && (v4 = v3,
        v5 = objc_msgSend(v3, "snapshotManagedObjectContext"),
        v4,
        v5))
  {
    ObjectType = swift_getObjectType(v2);

    if (qword_1000EB6B8 != -1)
      swift_once(&qword_1000EB6B8, sub_10007E8F0);
    v6 = static ICArchiveCreator.default;
    v8 = qword_1000F6970;
    v7 = unk_1000F6978;
    v9 = xmmword_1000F6980;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_1000F6980 + 1));
    swift_bridgeObjectRetain(*((_QWORD *)&v6 + 1));
    v10 = swift_bridgeObjectRetain(v7);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v10);
    v12 = IsAlexandriaDemoModeEnabled;
    v13 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    v15 = v6;
    v16 = v8;
    v17 = v7;
    v18 = v9;
    v19 = v12;
    v20 = v13;
    v21 = ICInternalSettingsIsAlexandriaDemoModeEnabled(v13);
    v22 = 0;
    sub_10007E468(v5, (uint64_t)&v15);

    swift_deallocPartialClassInstance(v2, ObjectType, 16, 7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10007C2CC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ICArchiveExporterConfiguration(a2, a1);
  return a2;
}

uint64_t sub_10007C300(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[10];

  v3 = v2;
  v57 = a1;
  v67 = sub_100030EE4(&qword_1000EC998);
  __chkstk_darwin(v67);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = _s14descr1000DA8A1V3TagVMa(0);
  v64 = *(_QWORD *)(v60 - 8);
  v7 = __chkstk_darwin(v60);
  v69 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v55 = (uint64_t)&v54 - v9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100030EE4(&qword_1000EBA10);
  v15 = __chkstk_darwin(v14);
  v62 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v54 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v54 - v20;
  v56 = v3;
  v22 = *v3;
  Hasher.init(_seed:)(v70, *(_QWORD *)(*v3 + 40));
  v68 = a2;
  sub_100031044(a2, (uint64_t)v21, &qword_1000EBA10);
  v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v23 = v66(v21, 1, v10);
  v61 = v11;
  if (v23 == 1)
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v21, v10);
    Hasher._combine(_:)(1u);
    v24 = sub_100042114(&qword_1000EC9A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    swift_bridgeObjectRetain(v22);
    dispatch thunk of Hashable.hash(into:)(v70, v10, v24);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v25 = v13;
  v26 = (uint64_t)v62;
  v27 = (_QWORD *)(v68 + *(int *)(v60 + 20));
  v28 = *v27;
  v29 = v27[1];
  v59 = v27;
  swift_bridgeObjectRetain(v29);
  String.hash(into:)(v70, v28, v29);
  swift_bridgeObjectRelease(v29);
  v30 = Hasher._finalize()();
  v31 = -1 << *(_BYTE *)(v22 + 32);
  v32 = v30 & ~v31;
  v65 = v22 + 56;
  v33 = v22;
  if (((*(_QWORD *)(v22 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
  {
    v58 = v25;
    v63 = ~v31;
    v64 = *(_QWORD *)(v64 + 72);
    v34 = v69;
    do
    {
      v35 = v33;
      v36 = v64 * v32;
      sub_100042198(*(_QWORD *)(v33 + 48) + v64 * v32, v34);
      sub_100031044(v68, (uint64_t)v19, &qword_1000EBA10);
      v37 = v34;
      v38 = (uint64_t)&v6[*(int *)(v67 + 48)];
      sub_100031044(v37, (uint64_t)v6, &qword_1000EBA10);
      sub_100031044((uint64_t)v19, v38, &qword_1000EBA10);
      v39 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v66;
      if (v66(v6, 1, v10) == 1)
      {
        sub_100036060((uint64_t)v19, &qword_1000EBA10);
        if (v39(v38, 1, v10) != 1)
          goto LABEL_13;
        sub_100036060((uint64_t)v6, &qword_1000EBA10);
      }
      else
      {
        sub_100031044((uint64_t)v6, v26, &qword_1000EBA10);
        if (v39(v38, 1, v10) == 1)
        {
          sub_100036060((uint64_t)v19, &qword_1000EBA10);
          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v26, v10);
LABEL_13:
          sub_100036060((uint64_t)v6, &qword_1000EC998);
          goto LABEL_7;
        }
        v40 = v61;
        v41 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v58, v38, v10);
        v42 = sub_100042114(&qword_1000EC9A8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v43 = dispatch thunk of static Equatable.== infix(_:_:)(v62, v41, v10, v42);
        v44 = *(void (**)(char *, uint64_t))(v40 + 8);
        v44(v41, v10);
        sub_100036060((uint64_t)v19, &qword_1000EBA10);
        v44(v62, v10);
        v26 = (uint64_t)v62;
        sub_100036060((uint64_t)v6, &qword_1000EBA10);
        if ((v43 & 1) == 0)
          goto LABEL_7;
      }
      v45 = (_QWORD *)(v69 + *(int *)(v60 + 20));
      v46 = v45[1];
      v47 = v59[1];
      if (*v45 == *v59 && v46 == v47
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*v45, v46, *v59, v47, 0) & 1) != 0)
      {
        sub_100042220(v69, _s14descr1000DA8A1V3TagVMa);
        swift_bridgeObjectRelease(v35);
        sub_100042220(v68, _s14descr1000DA8A1V3TagVMa);
        sub_100042198(*(_QWORD *)(*v56 + 48) + v36, v57);
        return 0;
      }
LABEL_7:
      v34 = v69;
      sub_100042220(v69, _s14descr1000DA8A1V3TagVMa);
      v32 = (v32 + 1) & v63;
      v33 = v35;
    }
    while (((*(_QWORD *)(v65 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) != 0);
  }
  swift_bridgeObjectRelease(v33);
  v49 = v56;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v56);
  v51 = v68;
  v52 = v55;
  sub_100042198(v68, v55);
  v70[0] = *v49;
  *v49 = 0x8000000000000000;
  sub_10007CD00(v52, v32, isUniquelyReferenced_nonNull_native);
  v53 = *v49;
  *v49 = v70[0];
  swift_bridgeObjectRelease(v53);
  sub_1000421DC(v51, v57);
  return 1;
}

uint64_t sub_10007C8E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = _s14descr1000DA8A1V3TagVMa(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100030EE4(&qword_1000EC9B0);
  v10 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_28;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = (_QWORD *)(v8 + 56);
  v13 = -1;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  v14 = v13 & *(_QWORD *)(v8 + 56);
  v15 = (unint64_t)(v11 + 63) >> 6;
  result = swift_retain(v8);
  v18 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_8;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if (v21 >= v15)
      goto LABEL_24;
    v22 = v12[v21];
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_24;
      v22 = v12[v18];
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v15)
          goto LABEL_24;
        v22 = v12[v18];
        if (!v22)
          break;
      }
    }
LABEL_23:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_8:
    sub_1000421DC(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v5 + 72) * v20, (uint64_t)v7);
    result = sub_10007CB04((uint64_t)v7, v10);
  }
  v23 = v21 + 3;
  if (v23 < v15)
  {
    v22 = v12[v23];
    if (!v22)
    {
      while (1)
      {
        v18 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_30;
        if (v18 >= v15)
          goto LABEL_24;
        v22 = v12[v18];
        ++v23;
        if (v22)
          goto LABEL_23;
      }
    }
    v18 = v23;
    goto LABEL_23;
  }
LABEL_24:
  swift_release(v8, v17);
  v24 = 1 << *(_BYTE *)(v8 + 32);
  if (v24 > 63)
    bzero((void *)(v8 + 56), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v24;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_28:
  result = swift_release(v8, v9);
  *v2 = v10;
  return result;
}

uint64_t sub_10007CB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t result;
  _QWORD v20[9];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v8);
  v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v20, *(_QWORD *)(a2 + 40));
  sub_100031044(a1, (uint64_t)v10, &qword_1000EBA10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v11 = sub_100042114(&qword_1000EC9A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v20, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12 = _s14descr1000DA8A1V3TagVMa(0);
  v13 = (uint64_t *)(a1 + *(int *)(v12 + 20));
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(v20, v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = Hasher._finalize()();
  v17 = _HashTable.nextHole(atOrAfter:)(v16 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
  result = sub_1000421DC(a1, *(_QWORD *)(a2 + 48) + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v17);
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_10007CD00(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[10];

  v61 = a1;
  v60 = sub_100030EE4(&qword_1000EC998);
  __chkstk_darwin(v60);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = _s14descr1000DA8A1V3TagVMa(0);
  v51 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v55 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v52 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100030EE4(&qword_1000EBA10);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  __chkstk_darwin(v16);
  v19 = (char *)&v49 - v18;
  v20 = *(_QWORD *)(*v3 + 16);
  v21 = *(_QWORD *)(*v3 + 24);
  v49 = v3;
  if (v21 > v20 && (a3 & 1) != 0)
    goto LABEL_25;
  v22 = v20 + 1;
  v62 = v17;
  if ((a3 & 1) != 0)
  {
    sub_10007C8E8(v22);
  }
  else
  {
    if (v21 > v20)
    {
      sub_10007D288();
      goto LABEL_25;
    }
    sub_10007D480(v22);
  }
  v59 = *v3;
  Hasher.init(_seed:)(v63, *(_QWORD *)(v59 + 40));
  sub_100031044(v61, (uint64_t)v19, &qword_1000EBA10);
  v23 = v55;
  v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  if (v58(v19, 1, v10) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v24 = v52;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v52, v19, v10);
    Hasher._combine(_:)(1u);
    v25 = sub_100042114(&qword_1000EC9A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v63, v10, v25);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v10);
  }
  v26 = (_QWORD *)(v61 + *(int *)(v54 + 20));
  v27 = *v26;
  v28 = v26[1];
  v53 = v26;
  swift_bridgeObjectRetain(v28);
  String.hash(into:)(v63, v27, v28);
  swift_bridgeObjectRelease(v28);
  v29 = Hasher._finalize()();
  v30 = -1 << *(_BYTE *)(v59 + 32);
  a2 = v29 & ~v30;
  if (((*(_QWORD *)(v59 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v31 = v59 + 56;
    v57 = ~v30;
    v56 = *(_QWORD *)(v51 + 72);
    v50 = v9;
    v32 = v62;
    do
    {
      sub_100042198(*(_QWORD *)(v59 + 48) + v56 * a2, (uint64_t)v9);
      sub_100031044(v61, v32, &qword_1000EBA10);
      v33 = (uint64_t)&v7[*(int *)(v60 + 48)];
      sub_100031044((uint64_t)v9, (uint64_t)v7, &qword_1000EBA10);
      sub_100031044(v32, v33, &qword_1000EBA10);
      v34 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v58;
      if (v58(v7, 1, v10) == 1)
      {
        sub_100036060(v32, &qword_1000EBA10);
        if (v34(v33, 1, v10) != 1)
          goto LABEL_20;
        sub_100036060((uint64_t)v7, &qword_1000EBA10);
      }
      else
      {
        sub_100031044((uint64_t)v7, (uint64_t)v15, &qword_1000EBA10);
        if (v34(v33, 1, v10) == 1)
        {
          sub_100036060(v62, &qword_1000EBA10);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v10);
LABEL_20:
          sub_100036060((uint64_t)v7, &qword_1000EC998);
          goto LABEL_14;
        }
        v35 = v15;
        v36 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v52, v33, v10);
        v37 = sub_100042114(&qword_1000EC9A8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v38 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v36, v10, v37);
        v39 = *(void (**)(char *, uint64_t))(v55 + 8);
        v40 = v36;
        v15 = v35;
        v9 = v50;
        v39(v40, v10);
        sub_100036060(v62, &qword_1000EBA10);
        v39(v15, v10);
        sub_100036060((uint64_t)v7, &qword_1000EBA10);
        if ((v38 & 1) == 0)
          goto LABEL_14;
      }
      v41 = &v9[*(int *)(v54 + 20)];
      v42 = *((_QWORD *)v41 + 1);
      v43 = v53[1];
      if (*(_QWORD *)v41 == *v53 && v42 == v43
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v41, v42, *v53, v43, 0) & 1) != 0)
      {
        sub_100042220((uint64_t)v9, _s14descr1000DA8A1V3TagVMa);
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v54);
        __break(1u);
        break;
      }
LABEL_14:
      sub_100042220((uint64_t)v9, _s14descr1000DA8A1V3TagVMa);
      a2 = (a2 + 1) & v57;
    }
    while (((*(_QWORD *)(v31 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_25:
  v44 = *v49;
  *(_QWORD *)(*v49 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000421DC(v61, *(_QWORD *)(v44 + 48) + *(_QWORD *)(v51 + 72) * a2);
  v46 = *(_QWORD *)(v44 + 16);
  v47 = __OFADD__(v46, 1);
  v48 = v46 + 1;
  if (v47)
    __break(1u);
  else
    *(_QWORD *)(v44 + 16) = v48;
  return result;
}

void *sub_10007D288()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = _s14descr1000DA8A1V3TagVMa(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030EE4(&qword_1000EC9B0);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v9 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v6, v8);
    *v1 = v9;
    return result;
  }
  result = (void *)(v7 + 56);
  v11 = v6 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v6 || (unint64_t)result >= v6 + 56 + 8 * v12)
    result = memmove(result, (const void *)(v6 + 56), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + 16);
  v15 = 1 << *(_BYTE *)(v6 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v6 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v18)
        goto LABEL_28;
      v23 = *(_QWORD *)(v11 + 8 * v14);
      if (!v23)
      {
        v14 = v22 + 2;
        if (v22 + 2 >= v18)
          goto LABEL_28;
        v23 = *(_QWORD *)(v11 + 8 * v14);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v17 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v3 + 72) * v20;
    sub_100042198(*(_QWORD *)(v6 + 48) + v21, (uint64_t)v5);
    result = (void *)sub_1000421DC((uint64_t)v5, *(_QWORD *)(v9 + 48) + v21);
  }
  v24 = v22 + 3;
  if (v24 >= v18)
    goto LABEL_28;
  v23 = *(_QWORD *)(v11 + 8 * v24);
  if (v23)
  {
    v14 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10007D480(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = _s14descr1000DA8A1V3TagVMa(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100030EE4(&qword_1000EC9B0);
  v10 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8, v9);
LABEL_26:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = v8 + 56;
  v13 = -1;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  v14 = v13 & *(_QWORD *)(v8 + 56);
  v15 = (unint64_t)(v11 + 63) >> 6;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_8;
    }
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v15)
      goto LABEL_24;
    v21 = *(_QWORD *)(v12 + 8 * v20);
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v15)
        goto LABEL_24;
      v21 = *(_QWORD *)(v12 + 8 * v17);
      if (!v21)
      {
        v17 = v20 + 2;
        if (v20 + 2 >= v15)
          goto LABEL_24;
        v21 = *(_QWORD *)(v12 + 8 * v17);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v14 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_8:
    sub_100042198(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v5 + 72) * v19, (uint64_t)v7);
    result = sub_10007CB04((uint64_t)v7, v10);
  }
  v22 = v20 + 3;
  if (v22 >= v15)
  {
LABEL_24:
    result = swift_release_n(v8, 2);
    goto LABEL_26;
  }
  v21 = *(_QWORD *)(v12 + 8 * v22);
  if (v21)
  {
    v17 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v15)
      goto LABEL_24;
    v21 = *(_QWORD *)(v12 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_10007D668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v31 = a2;
  v30 = sub_100030EE4(&qword_1000EC9B8);
  __chkstk_darwin(v30);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000EB8F8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v35 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v29 = (char *)&v28 - v11;
  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v26))
  {
    v36 = v3;
    v34 = a1 & 0xC000000000000001;
    v13 = (char *)_swiftEmptyArrayStorage;
    v3 = 4;
    v32 = v12;
    v33 = a1;
    while (1)
    {
      v14 = v34 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      v15 = v14;
      v16 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v17 = objc_msgSend(v14, "managedObjectContext");
      if (v17)
      {
        v18 = v17;
        __chkstk_darwin(v17);
        v19 = v30;
        v20 = v31;
        *(&v28 - 2) = (uint64_t)v15;
        *(&v28 - 1) = v20;
        v21 = v36;
        NSManagedObjectContext.performAndWait<A>(_:)(sub_10007E414, &v28 - 4, v19);
        v36 = v21;

      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);

      }
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_100036060((uint64_t)v6, &qword_1000EC9B8);
      }
      else
      {
        v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v23 = v29;
        v22(v29, v6, v7);
        v22(v35, v23, v7);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          v13 = (char *)sub_1000338C4(0, *((_QWORD *)v13 + 2) + 1, 1, (unint64_t)v13);
        v25 = *((_QWORD *)v13 + 2);
        v24 = *((_QWORD *)v13 + 3);
        if (v25 >= v24 >> 1)
          v13 = (char *)sub_1000338C4(v24 > 1, v25 + 1, 1, (unint64_t)v13);
        *((_QWORD *)v13 + 2) = v25 + 1;
        v22(&v13[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v25], v35, v7);
      }
      ++v3;
      a1 = v33;
      if (v16 == v32)
      {
        swift_bridgeObjectRelease(v33);
        return v13;
      }
    }
    __break(1u);
LABEL_21:
    if (a1 < 0)
      v26 = a1;
    else
      v26 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return (char *)_swiftEmptyArrayStorage;
}

_QWORD *sub_10007D984(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10003F2BC(0, v2, 0);
    v5 = *(_QWORD *)(sub_100030EE4(&qword_1000EB8F8) - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      swift_getAtKeyPath(v6, a2);
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_10003F2BC(v8 > 1, v9 + 1, 1);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v11;
      v6 += v7;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10007DA8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = _s14descr1000DA8A1V3TagVMa(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100042114(&qword_1000EC990, v10, (uint64_t)&unk_1000B7EA8);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v16 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_100042198(v13, (uint64_t)v6);
      sub_10007C300((uint64_t)v8, (uint64_t)v6);
      sub_100042220((uint64_t)v8, _s14descr1000DA8A1V3TagVMa);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t sub_10007DBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;

  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
  *(_BYTE *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 32;
  *(_BYTE *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v4 + 69) = *(_QWORD *)(a2 + 45);
  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a3);
  sub_10006E04C();
  return v4;
}

uint64_t sub_10007DC18()
{
  return sub_10007E0AC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000702FC);
}

uint64_t sub_10007DC38(uint64_t a1)
{
  _QWORD v2[7];

  v2[0] = "\b";
  v2[1] = &unk_1000B6090;
  v2[2] = &unk_1000B60A8;
  v2[3] = &unk_1000B60C0;
  v2[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[5] = &unk_1000B60C0;
  v2[6] = &unk_1000B60D8;
  return swift_initClassMetadata2(a1, 0, 7, v2, a1 + 96);
}

uint64_t type metadata accessor for ICArchiveExporter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E734(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ICArchiveExporter);
}

uint64_t destroy for ICArchiveExporterConfiguration(_QWORD *a1)
{
  uint64_t result;

  result = a1[1];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[3]);
    return swift_bridgeObjectRelease(a1[5]);
  }
  return result;
}

uint64_t initializeWithCopy for ICArchiveExporterConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  return a1;
}

uint64_t assignWithCopy for ICArchiveExporterConfiguration(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 1);
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      v6 = *a2;
      v7 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)a1 = v6;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v10 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      v11 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      v12 = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 40) = v12;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
    }
  }
  else if (v5 == 1)
  {
    sub_1000527A8((_QWORD *)a1);
    v9 = a2[1];
    v8 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v8;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v13 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 3);
    v15 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v14;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease(v15);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    v16 = *((_QWORD *)a2 + 5);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRelease(v17);
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(_BYTE *)(a1 + 50) = *((_BYTE *)a2 + 50);
  *(_BYTE *)(a1 + 51) = *((_BYTE *)a2 + 51);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  return a1;
}

__n128 initializeWithTake for ICArchiveExporterConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ICArchiveExporterConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 != 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease(v4);
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v7;
      swift_bridgeObjectRelease(v8);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRelease(v10);
      goto LABEL_6;
    }
    sub_1000527A8((_QWORD *)a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_6:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveExporterConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 53))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveExporterConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 53) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 53) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveExporterConfiguration()
{
  return &type metadata for ICArchiveExporterConfiguration;
}

uint64_t type metadata accessor for ICArchiveExporterObjCBridge()
{
  return objc_opt_self(ICArchiveExporter);
}

uint64_t sub_10007E090()
{
  return sub_10007E0AC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006F7AC);
}

uint64_t sub_10007E0AC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t sub_10007E0D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC960;
  if (!qword_1000EC960)
  {
    v1 = sub_100030FF0(&qword_1000EC958);
    result = swift_getWitnessTable(&protocol conformance descriptor for ICObjectReferences<A>.Types, v1);
    atomic_store(result, (unint64_t *)&qword_1000EC960);
  }
  return result;
}

uint64_t sub_10007E11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EB6E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10007E164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC978;
  if (!qword_1000EC978)
  {
    v1 = sub_100036000(255, &qword_1000EC970, NSManagedObjectID_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000EC978);
  }
  return result;
}

uint64_t sub_10007E1BC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10007E1D4(uint64_t a1)
{
  return sub_10007E390(a1);
}

uint64_t sub_10007E1E8(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

uint64_t sub_10007E270(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  v1 = *a1;
  v2 = a1[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  return swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
}

uint64_t sub_10007E2D4()
{
  return 16;
}

__n128 sub_10007E2E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10007E2EC(uint64_t a1)
{
  uint64_t v1;

  return swift_getAtKeyPath(a1, *(_QWORD *)(v1 + 32));
}

BOOL sub_10007E314(uint64_t a1)
{
  uint64_t v1;

  return sub_100072ECC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10007E330(uint64_t a1, _QWORD *a2)
{
  return sub_10007E360(a1, a2);
}

uint64_t sub_10007E344(uint64_t a1)
{
  uint64_t v1;

  return sub_10007303C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_10007E360(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_10007E390(uint64_t a1)
{
  uint64_t v1;

  return sub_100074C9C(a1, *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10007E3B8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007E3DC(uint64_t a1)
{
  return sub_10007E3F0(a1);
}

uint64_t sub_10007E3F0(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of ICObjectProviding.object(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10007E414()
{
  uint64_t v0;

  return ICObjectReferences<>.init(object:recursivelyIncludeChildren:forPagesHandoff:)(*(id *)(v0 + 16), 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___ICArchiveExporter_exporter) + 76));
}

id sub_10007E468(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  objc_class *v10;
  char *v11;
  objc_super v13;

  v4 = type metadata accessor for ICModernObjectProvider(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = ICModernObjectProvider.init(context:)(a1);
  v6 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v7 = sub_100030EE4(&qword_1000EC9C0);
  v8 = swift_allocObject(v7, 152, 7);
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)a2;
  *(_BYTE *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 32;
  *(_BYTE *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 16) = v5;
  *(_OWORD *)(v8 + 40) = v9;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 69) = *(_QWORD *)(a2 + 45);
  *(_QWORD *)(v8 + 80) = v6;
  *(_QWORD *)(v8 + 88) = &protocol witness table for NSFileManager;
  sub_10006DF08();
  v10 = (objc_class *)type metadata accessor for ICArchiveExporterObjCBridge();
  v11 = (char *)objc_allocWithZone(v10);
  *(_QWORD *)&v11[OBJC_IVAR___ICArchiveExporter_exporter] = v8;
  v13.receiver = v11;
  v13.super_class = v10;
  return objc_msgSendSuper2(&v13, "init");
}

uint64_t sub_10007E57C(uint64_t a1)
{
  uint64_t v1;

  return sub_10007BD88(a1, v1);
}

uint64_t sub_10007E584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007E594(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_10007E59C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007E5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 32), a2);
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_10007E5E4(uint64_t a1)
{
  uint64_t v1;

  return sub_10007BD88(a1, *(_QWORD *)(v1 + 32));
}

void sub_10007E5F0()
{
  id v0;
  void *v1;
  id v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t IsAlexandriaDemoModeEnabled;
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  char v16;
  char v17;
  __int16 v18;

  v0 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v0
    && (v1 = v0,
        v2 = objc_msgSend(v0, "snapshotManagedObjectContext"),
        v1,
        v2))
  {
    if (qword_1000EB6B8 != -1)
      swift_once(&qword_1000EB6B8, sub_10007E8F0);
    v3 = static ICArchiveCreator.default;
    v5 = qword_1000F6970;
    v4 = unk_1000F6978;
    v6 = xmmword_1000F6980;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_1000F6980 + 1));
    swift_bridgeObjectRetain(*((_QWORD *)&v3 + 1));
    v7 = swift_bridgeObjectRetain(v4);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v7);
    v9 = IsAlexandriaDemoModeEnabled;
    v10 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    v11 = v3;
    v12 = v5;
    v13 = v4;
    v14 = v6;
    v15 = v9;
    v16 = v10;
    v17 = ICInternalSettingsIsAlexandriaDemoModeEnabled(v10);
    v18 = 256;
    sub_10007E468(v2, (uint64_t)&v11);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10007E71C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10007131C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10007E734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

__int128 *ICArchiveCreator.default.unsafeMutableAddressor()
{
  if (qword_1000EB6B8 != -1)
    swift_once(&qword_1000EB6B8, sub_10007E8F0);
  return &static ICArchiveCreator.default;
}

uint64_t ICArchiveCreator.softwareIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t ICArchiveCreator.softwareIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t ICArchiveCreator.softwareVersionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t ICArchiveCreator.softwareVersionName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ICArchiveCreator.softwareVersionName.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveCreator.softwareVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t ICArchiveCreator.softwareVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*ICArchiveCreator.softwareVersion.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

double sub_10007E8F0()
{
  double result;
  _OWORD v1[2];
  __int128 v2;

  sub_10007EC78((uint64_t *)v1);
  static ICArchiveCreator.default = v1[0];
  *(_OWORD *)&qword_1000F6970 = v1[1];
  result = *(double *)&v2;
  xmmword_1000F6980 = v2;
  return result;
}

uint64_t static ICArchiveCreator.default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_1000EB6B8 != -1)
    swift_once(&qword_1000EB6B8, sub_10007E8F0);
  v2 = *((_QWORD *)&xmmword_1000F6980 + 1);
  *(_QWORD *)a1 = static ICArchiveCreator.default;
  v3 = *((_QWORD *)&static ICArchiveCreator.default + 1);
  *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)&static ICArchiveCreator.default + 8);
  v4 = v3;
  v5 = unk_1000F6978;
  *(_OWORD *)(a1 + 24) = unk_1000F6978;
  v6 = v5;
  *(_QWORD *)(a1 + 40) = v2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10007E9B4(char a1)
{
  uint64_t result;

  result = 0xD000000000000012;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000013;
    else
      return 0x6572617774666F73;
  }
  return result;
}

uint64_t sub_10007EA1C()
{
  char *v0;

  return sub_10007E9B4(*v0);
}

uint64_t sub_10007EA24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10007EF4C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007EA48(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10007EA54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007EBE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007EA7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007EBE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ICArchiveCreator.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000EC9C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10007EBE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICArchiveCreator.CodingKeys, &type metadata for ICArchiveCreator.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v22 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v21 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v21, v5);
    v16 = v3[4];
    v17 = v3[5];
    v20 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10007EBE0()
{
  unint64_t result;

  result = qword_1000EC9D0;
  if (!qword_1000EC9D0)
  {
    result = swift_getWitnessTable(&unk_1000B62A4, &type metadata for ICArchiveCreator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC9D0);
  }
  return result;
}

double ICArchiveCreator.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_10007F0B0(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10007EC64(_QWORD *a1)
{
  return ICArchiveCreator.encode(to:)(a1);
}

uint64_t sub_10007EC78@<X0>(uint64_t *a1@<X8>)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4 = objc_msgSend(v3, "bundleIdentifier");

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = objc_msgSend(v2, "mainBundle");
  v9 = objc_msgSend(v8, "infoDictionary");

  if (!v9)
  {
    v29 = 0u;
    v30 = 0u;
    goto LABEL_16;
  }
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v10 + 16) || (v11 = sub_10005F8A4(0xD00000000000001ALL, 0x80000001000B00A0), (v12 & 1) == 0))
  {
    v29 = 0u;
    v30 = 0u;
    swift_bridgeObjectRelease(v10);
    goto LABEL_16;
  }
  sub_100030F24(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v29);
  swift_bridgeObjectRelease(v10);
  if (!*((_QWORD *)&v30 + 1))
  {
LABEL_16:
    sub_100030EA4((uint64_t)&v29);
    v14 = 0;
    v15 = 0;
    goto LABEL_17;
  }
  v13 = swift_dynamicCast(&v27, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (v13)
    v14 = v27;
  else
    v14 = 0;
  if (v13)
    v15 = v28;
  else
    v15 = 0;
LABEL_17:
  v16 = objc_msgSend(v2, "mainBundle");
  v17 = objc_msgSend(v16, "infoDictionary");

  if (!v17)
  {
    v29 = 0u;
    v30 = 0u;
    goto LABEL_27;
  }
  v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (kCFBundleVersionKey)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleVersionKey);
    v21 = v20;
    if (*(_QWORD *)(v18 + 16) && (v22 = sub_10005F8A4(v19, v20), (v23 & 1) != 0))
    {
      sub_100030F24(*(_QWORD *)(v18 + 56) + 32 * v22, (uint64_t)&v29);
    }
    else
    {
      v29 = 0u;
      v30 = 0u;
    }
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v18);
    if (*((_QWORD *)&v30 + 1))
    {
      result = swift_dynamicCast(&v27, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      v25 = v27;
      v26 = v28;
      if (!(_DWORD)result)
      {
        v25 = 0;
        v26 = 0;
      }
      goto LABEL_28;
    }
LABEL_27:
    result = sub_100030EA4((uint64_t)&v29);
    v25 = 0;
    v26 = 0;
LABEL_28:
    *a1 = v5;
    a1[1] = v7;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v25;
    a1[5] = v26;
    return result;
  }
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v15);
  __break(1u);
  return result;
}

uint64_t sub_10007EF4C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x80000001000B11A0;
    if (a2 == 0x80000001000B11A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000B11A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001000B11C0)
  {
    v6 = 0x80000001000B11C0;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000B11C0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6572617774666F73 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease(0xEF6E6F6973726556);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6572617774666F73, 0xEF6E6F6973726556, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10007F0B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v4 = sub_100030EE4(&qword_1000EC9F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = objc_msgSend(v8, "mainBundle");
  v10 = objc_msgSend(v9, "bundleIdentifier");

  v45 = v5;
  if (v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v52 = v11;

  }
  else
  {
    v52 = 0;
  }
  v46 = v4;
  v12 = objc_msgSend(v8, "mainBundle");
  v13 = objc_msgSend(v12, "infoDictionary");

  v44 = a2;
  if (!v13)
  {
    v50 = 0u;
    v51 = 0u;
    goto LABEL_13;
  }
  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v14 + 16) || (v15 = sub_10005F8A4(0xD00000000000001ALL, 0x80000001000B00A0), (v16 & 1) == 0))
  {
    v50 = 0u;
    v51 = 0u;
    swift_bridgeObjectRelease(v14);
    goto LABEL_13;
  }
  sub_100030F24(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v50);
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v51 + 1))
  {
LABEL_13:
    sub_100030EA4((uint64_t)&v50);
    v17 = 0;
    goto LABEL_14;
  }
  if (swift_dynamicCast(v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    v17 = v49;
  else
    v17 = 0;
LABEL_14:
  v18 = objc_msgSend(v8, "mainBundle", v44);
  v19 = objc_msgSend(v18, "infoDictionary");

  if (v19)
  {
    v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    if (!kCFBundleVersionKey)
    {
      swift_bridgeObjectRelease(v52);
      result = swift_bridgeObjectRelease(v17);
      __break(1u);
      return result;
    }
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleVersionKey);
    v23 = v22;
    if (*(_QWORD *)(v20 + 16) && (v24 = sub_10005F8A4(v21, v22), (v25 & 1) != 0))
    {
      sub_100030F24(*(_QWORD *)(v20 + 56) + 32 * v24, (uint64_t)&v50);
    }
    else
    {
      v50 = 0u;
      v51 = 0u;
    }
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v20);
    if (*((_QWORD *)&v51 + 1))
    {
      if (swift_dynamicCast(v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6))v26 = v49;
      else
        v26 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v50 = 0u;
    v51 = 0u;
  }
  sub_100030EA4((uint64_t)&v50);
  v26 = 0;
LABEL_26:
  v27 = v46;
  v28 = a1[3];
  v29 = a1[4];
  sub_10004242C(a1, v28);
  v30 = sub_10007EBE0();
  v31 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICArchiveCreator.CodingKeys, &type metadata for ICArchiveCreator.CodingKeys, v30, v28, v29);
  if (v31)
  {
    v32 = v52;
    sub_100035424(a1);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v32);
    return swift_bridgeObjectRelease(v17);
  }
  else
  {
    LOBYTE(v50) = 0;
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v27);
    v35 = v34;
    v47 = v33;
    swift_bridgeObjectRelease(v52);
    LOBYTE(v50) = 1;
    v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v27);
    v38 = v37;
    v52 = v36;
    swift_bridgeObjectRelease(v17);
    LOBYTE(v50) = 2;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v27);
    v42 = v41;
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v27);
    result = sub_100035424(a1);
    v43 = v44;
    *v44 = v47;
    v43[1] = v35;
    v43[2] = v52;
    v43[3] = v38;
    v43[4] = v40;
    v43[5] = v42;
  }
  return result;
}

uint64_t destroy for ICArchiveCreator(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for ICArchiveCreator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for ICArchiveCreator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for ICArchiveCreator(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for ICArchiveCreator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveCreator(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveCreator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveCreator()
{
  return &type metadata for ICArchiveCreator;
}

uint64_t storeEnumTagSinglePayload for ICArchiveCreator.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10007F7D8 + 4 * byte_1000B6175[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10007F80C + 4 * byte_1000B6170[v4]))();
}

uint64_t sub_10007F80C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007F814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007F81CLL);
  return result;
}

uint64_t sub_10007F828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007F830);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10007F834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007F83C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveCreator.CodingKeys()
{
  return &type metadata for ICArchiveCreator.CodingKeys;
}

unint64_t sub_10007F85C()
{
  unint64_t result;

  result = qword_1000EC9D8;
  if (!qword_1000EC9D8)
  {
    result = swift_getWitnessTable(&unk_1000B627C, &type metadata for ICArchiveCreator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC9D8);
  }
  return result;
}

unint64_t sub_10007F8A4()
{
  unint64_t result;

  result = qword_1000EC9E0;
  if (!qword_1000EC9E0)
  {
    result = swift_getWitnessTable(&unk_1000B61EC, &type metadata for ICArchiveCreator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC9E0);
  }
  return result;
}

unint64_t sub_10007F8EC()
{
  unint64_t result;

  result = qword_1000EC9E8;
  if (!qword_1000EC9E8)
  {
    result = swift_getWitnessTable(&unk_1000B6214, &type metadata for ICArchiveCreator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000EC9E8);
  }
  return result;
}

void sub_10007F930(void *a1)
{
  _QWORD *v1;
  Class isa;
  Class v4;
  Class v5;
  Class v6;
  id v7;

  objc_msgSend(a1, "setIsPasswordProtected:", 1);
  objc_msgSend(a1, "setCryptoIterationCount:", *v1);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCryptoSalt:", isa);

  v4 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCryptoInitializationVector:", v4);

  v5 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCryptoTag:", v5);

  v6 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCryptoWrappedKey:", v6);

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setPasswordHint:", v7);

}

uint64_t sub_10007FA34(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007FA6C + 4 * byte_1000B62F4[a1]))(0xD000000000000014, 0x80000001000B11E0);
}

uint64_t sub_10007FA6C()
{
  return 0x6F69746172657469;
}

uint64_t sub_10007FA90()
{
  return 1953259891;
}

uint64_t sub_10007FAA0()
{
  return 6775156;
}

uint64_t sub_10007FAB0()
{
  return 0x4B64657070617277;
}

uint64_t sub_10007FACC()
{
  return 0x64726F7773736170;
}

uint64_t sub_10007FAEC()
{
  return 1635017060;
}

uint64_t sub_10007FAFC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ECA08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100080BC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s13EncryptedDataV10CodingKeysON, &_s13EncryptedDataV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v19, v5);
  if (!v2)
  {
    v19 = *(_OWORD *)(v3 + 1);
    v18 = 1;
    v13 = sub_100051C28();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
    v19 = *(_OWORD *)(v3 + 3);
    v18 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
    v19 = *(_OWORD *)(v3 + 5);
    v18 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
    v19 = *(_OWORD *)(v3 + 7);
    v18 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
    v14 = v3[9];
    v15 = v3[10];
    LOBYTE(v19) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v19, v5);
    v19 = *(_OWORD *)(v3 + 11);
    v18 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10007FD44()
{
  unsigned __int8 *v0;

  return sub_10007FA34(*v0);
}

uint64_t sub_10007FD4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100080350(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007FD70(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10007FD7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100080BC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007FDA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100080BC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10007FDCC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_100080604(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10007FE28(_QWORD *a1)
{
  return sub_10007FAFC(a1);
}

void sub_10007FE3C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  if (objc_msgSend(a1, "isPasswordProtected"))
  {
    v36 = a3;
    v34 = objc_msgSend(a1, "cryptoIterationCount");
    v8 = objc_msgSend(a1, "cryptoSalt");
    if (v8)
    {
      v9 = v8;
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v32 = v11;
      v33 = v10;

    }
    else
    {
      v32 = 0xC000000000000000;
      v33 = 0;
    }
    v12 = objc_msgSend(a1, "cryptoInitializationVector");
    v35 = a2;
    if (v12)
    {
      v13 = v12;
      v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

    }
    else
    {
      v14 = 0;
      v16 = 0xC000000000000000;
    }
    v17 = objc_msgSend(a1, "cryptoTag");
    if (v17)
    {
      v18 = v17;
      v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v21 = v20;

    }
    else
    {
      v19 = 0;
      v21 = 0xC000000000000000;
    }
    v22 = objc_msgSend(a1, "cryptoWrappedKey");
    if (v22)
    {
      v23 = v22;
      v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v26 = v25;

    }
    else
    {
      v24 = 0;
      v26 = 0xC000000000000000;
    }
    v27 = objc_msgSend(a1, "passwordHint");
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

    }
    else
    {
      v29 = 0;
      v31 = 0xE000000000000000;
    }
    *a4 = v34;
    a4[1] = v33;
    a4[2] = v32;
    a4[3] = v14;
    a4[4] = v16;
    a4[5] = v19;
    a4[6] = v21;
    a4[7] = v24;
    a4[8] = v26;
    a4[9] = v29;
    a4[10] = v31;
    a4[11] = v35;
    a4[12] = v36;
  }
  else
  {
    __break(1u);
  }
}

uint64_t _s13EncryptedDataVwxx(_QWORD *a1)
{
  sub_100040B10(a1[1], a1[2]);
  sub_100040B10(a1[3], a1[4]);
  sub_100040B10(a1[5], a1[6]);
  sub_100040B10(a1[7], a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  return sub_100040B10(a1[11], a1[12]);
}

_QWORD *_s13EncryptedDataVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  sub_100049030(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  v6 = a2[3];
  v7 = a2[4];
  sub_100049030(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  v8 = a2[5];
  v9 = a2[6];
  sub_100049030(v8, v9);
  a1[5] = v8;
  a1[6] = v9;
  v10 = a2[7];
  v11 = a2[8];
  sub_100049030(v10, v11);
  a1[7] = v10;
  a1[8] = v11;
  v12 = a2[10];
  a1[9] = a2[9];
  a1[10] = v12;
  v14 = a2[11];
  v13 = a2[12];
  swift_bridgeObjectRetain(v12);
  sub_100049030(v14, v13);
  a1[11] = v14;
  a1[12] = v13;
  return a1;
}

_QWORD *_s13EncryptedDataVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_100049030(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_100040B10(v6, v7);
  v8 = a2[3];
  v9 = a2[4];
  sub_100049030(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_100040B10(v10, v11);
  v12 = a2[5];
  v13 = a2[6];
  sub_100049030(v12, v13);
  v14 = a1[5];
  v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_100040B10(v14, v15);
  v16 = a2[7];
  v17 = a2[8];
  sub_100049030(v16, v17);
  v18 = a1[7];
  v19 = a1[8];
  a1[7] = v16;
  a1[8] = v17;
  sub_100040B10(v18, v19);
  a1[9] = a2[9];
  v20 = a2[10];
  v21 = a1[10];
  a1[10] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v23 = a2[11];
  v22 = a2[12];
  sub_100049030(v23, v22);
  v24 = a1[11];
  v25 = a1[12];
  a1[11] = v23;
  a1[12] = v22;
  sub_100040B10(v24, v25);
  return a1;
}

__n128 _s13EncryptedDataVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t _s13EncryptedDataVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100040B10(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100040B10(v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100040B10(v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_100040B10(v10, v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_100040B10(v13, v14);
  return a1;
}

uint64_t _s13EncryptedDataVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s13EncryptedDataVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s13EncryptedDataVMa()
{
  return &_s13EncryptedDataVN;
}

uint64_t sub_100080350(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  char v7;

  v3 = a1 == 0x6F69746172657469 && a2 == 0xEE00746E756F436ELL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746172657469, 0xEE00746E756F436ELL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 1953259891 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1953259891, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0xD000000000000014)
  {
    v6 = 0x80000001000B11E0;
    if (a2 == 0x80000001000B11E0)
      goto LABEL_15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000B11E0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_15:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if (a1 == 6775156 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(6775156, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 0x4B64657070617277 && a2 == 0xEA00000000007965
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4B64657070617277, 0xEA00000000007965, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 0x64726F7773736170 && a2 == 0xEC000000746E6948
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x64726F7773736170, 0xEC000000746E6948, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 6;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_100080604@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;

  v5 = sub_100030EE4(&qword_1000EC9F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100080BC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s13EncryptedDataV10CodingKeysON, &_s13EncryptedDataV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_100035424(a1);
  LOBYTE(v55) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
  v57 = 1;
  v13 = sub_100051B64();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  v57 = 2;
  v50 = v56;
  v51 = v55;
  sub_100049030(v55, v56);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  v57 = 3;
  v53 = v56;
  v54 = v55;
  sub_100049030(v55, v56);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  v48 = v12;
  v14 = v55;
  v57 = 4;
  v49 = v56;
  sub_100049030(v55, v56);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  v52 = v14;
  v15 = v49;
  v16 = v55;
  LOBYTE(v55) = 5;
  v46 = v56;
  v47 = v16;
  sub_100049030(v16, v56);
  v44 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
  v45 = v17;
  v57 = 6;
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v55;
  v18 = v56;
  v42 = v56;
  v43 = v55;
  sub_100049030(v51, v50);
  sub_100049030(v54, v53);
  sub_100049030(v52, v15);
  v20 = v46;
  v21 = v47;
  sub_100049030(v47, v46);
  v22 = v45;
  swift_bridgeObjectRetain(v45);
  sub_100049030(v19, v18);
  swift_bridgeObjectRelease(v22);
  v23 = v21;
  v24 = v20;
  sub_100040B10(v23, v20);
  v25 = v52;
  sub_100040B10(v52, v15);
  v26 = v53;
  v27 = v54;
  sub_100040B10(v54, v53);
  v28 = v50;
  v29 = v51;
  sub_100040B10(v51, v50);
  sub_100035424(a1);
  sub_100040B10(v29, v28);
  sub_100040B10(v27, v26);
  v30 = v25;
  v31 = v49;
  sub_100040B10(v25, v49);
  v32 = v47;
  v33 = v24;
  sub_100040B10(v47, v24);
  v34 = v45;
  swift_bridgeObjectRelease(v45);
  v36 = v42;
  v35 = v43;
  result = sub_100040B10(v43, v42);
  v38 = v51;
  *a2 = v48;
  a2[1] = v38;
  v39 = v54;
  a2[2] = v50;
  a2[3] = v39;
  a2[4] = v53;
  a2[5] = v30;
  a2[6] = v31;
  a2[7] = v32;
  v40 = v44;
  a2[8] = v33;
  a2[9] = v40;
  a2[10] = v34;
  a2[11] = v35;
  a2[12] = v36;
  return result;
}

unint64_t sub_100080BC4()
{
  unint64_t result;

  result = qword_1000ECA00;
  if (!qword_1000ECA00)
  {
    result = swift_getWitnessTable(&unk_1000B6428, &_s13EncryptedDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECA00);
  }
  return result;
}

uint64_t _s13EncryptedDataV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100080C54 + 4 * byte_1000B6300[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100080C88 + 4 * byte_1000B62FB[v4]))();
}

uint64_t sub_100080C88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100080C90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100080C98);
  return result;
}

uint64_t sub_100080CA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100080CACLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100080CB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100080CB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s13EncryptedDataV10CodingKeysOMa()
{
  return &_s13EncryptedDataV10CodingKeysON;
}

unint64_t sub_100080CD8()
{
  unint64_t result;

  result = qword_1000ECA10;
  if (!qword_1000ECA10)
  {
    result = swift_getWitnessTable(&unk_1000B6400, &_s13EncryptedDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECA10);
  }
  return result;
}

unint64_t sub_100080D20()
{
  unint64_t result;

  result = qword_1000ECA18;
  if (!qword_1000ECA18)
  {
    result = swift_getWitnessTable(&unk_1000B6370, &_s13EncryptedDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECA18);
  }
  return result;
}

unint64_t sub_100080D68()
{
  unint64_t result;

  result = qword_1000ECA20;
  if (!qword_1000ECA20)
  {
    result = swift_getWitnessTable(&unk_1000B6398, &_s13EncryptedDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECA20);
  }
  return result;
}

char *sub_100080DAC(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  Class isa;
  void *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  id v31;
  id v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  Class v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int v64;
  char *v65;
  Class v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  char *v78;
  void *v79;
  id v80;
  int v81;
  id v82;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t (*v90)(char *, uint64_t, uint64_t, uint64_t);
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  _BYTE v102[24];
  _BYTE v103[24];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v94 = a6;
  v96 = (_QWORD *)a5;
  v91 = a4;
  v93 = a3;
  v92 = a2;
  v9 = _s14descr1000D9B91O14AudioRecordingV8FragmentVMa(0);
  v88 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v101 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100030EE4(&qword_1000EBBA0);
  v12 = __chkstk_darwin(v11);
  v87 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v89 = (char *)&v85 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v85 - v16;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v100 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v85 - v22;
  v24 = objc_msgSend(a1, "document");
  ((void (*)(void))UUID.init())();
  v25 = objc_allocWithZone((Class)ICTTAudioRecording);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v27 = v25;
  v28 = v18;
  v29 = a1;
  v30 = (char *)objc_msgSend(v27, "initWithDocument:identity:", v24, isa);

  v95 = *(void (**)(char *, uint64_t))(v19 + 8);
  v95(v23, v28);
  v31 = objc_msgSend(v29, "document");
  v32 = objc_msgSend(v31, "replica");

  v97 = v28;
  if (v32)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v33 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v33(v17, v23, v28);
    v90 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v90(v17, 0, 1, v28);
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v28);
    if ((_DWORD)v34 != 1)
    {
      v33(v100, v17, v28);
      v36 = v98;
      v35 = v99;
      goto LABEL_6;
    }
  }
  else
  {
    v90 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v34 = v90(v17, 1, 1, v28);
  }
  v36 = v98;
  v35 = v99;
  UUID.init()(v34);
  sub_100083484((uint64_t)v17);
LABEL_6:
  sub_1000490E8(v35, (uint64_t)v103, &qword_1000ECA28);
  sub_1000490E8((uint64_t)v103, (uint64_t)&v104, &qword_1000ECA28);
  v37 = v105;
  if (v105)
  {
    v38 = v104;
    v39 = v106;
    v40 = sub_10003018C((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_1000475B4(v40);
    v84 = v39;
    v42 = v94;
    v43 = sub_1000872B8(v41, v92, v93, v91 & 0x101, (uint64_t)v96, v94, a7, v38, v37, v84);
    if (v36)
    {
LABEL_18:
      swift_release(v41, v44);
      v95(v100, v97);

      swift_bridgeObjectRelease(v40);
      return v30;
    }
    v45 = v43;
    swift_bridgeObjectRelease(v40);
    swift_release(v41, v46);
    v47 = v89;
    v48 = v97;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v89, v100, v97);
    v90(v47, 0, 1, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v47, 1, v48) == 1)
    {
      v49 = 0;
    }
    else
    {
      v49 = UUID._bridgeToObjectiveC()().super.isa;
      v95(v47, v48);
    }
    v35 = v99;
    v50 = objc_msgSend(objc_allocWithZone((Class)ICTTMergeableAttributedString), "initWithReplicaID:", v49);

    objc_msgSend(v30, "setTopLineSummary:", v50);
    v89 = v30;
    v51 = objc_msgSend(v30, "topLineSummary");
    if (v51)
    {
      v52 = v51;
      ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)v45, 0);

    }
    v86 = v29;

  }
  else
  {
    v89 = v30;
    v86 = v29;
    v42 = v94;
  }
  sub_1000490E8(v35 + 24, (uint64_t)v102, &qword_1000ECA28);
  sub_1000490E8((uint64_t)v102, (uint64_t)&v107, &qword_1000ECA28);
  v53 = v108;
  v54 = (uint64_t)v96;
  if (v108)
  {
    v55 = v107;
    v56 = v42;
    v57 = v109;
    v40 = sub_10003018C((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_1000475B4(v40);
    v58 = sub_1000872B8(v41, v92, v93, v91 & 0x101, v54, v56, a7, v55, v53, v57);
    if (v36)
    {
      v30 = v89;
      goto LABEL_18;
    }
    v60 = v58;
    swift_bridgeObjectRelease(v40);
    swift_release(v41, v61);
    v62 = v87;
    v63 = v97;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v87, v100, v97);
    v90(v62, 0, 1, v63);
    v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v62, 1, v63);
    v35 = v99;
    v65 = v89;
    if (v64 == 1)
    {
      v66 = 0;
    }
    else
    {
      v66 = UUID._bridgeToObjectiveC()().super.isa;
      v95(v62, v63);
    }
    v67 = objc_msgSend(objc_allocWithZone((Class)ICTTMergeableAttributedString), "initWithReplicaID:", v66);

    objc_msgSend(v65, "setSummary:", v67);
    v68 = objc_msgSend(v65, "summary");
    if (v68)
    {
      v69 = v68;
      ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)v60, 0);

    }
    if ((*(_BYTE *)(v35 + 56) & 1) != 0)
      v70 = 0;
    else
      v70 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v35 + 48));
    v59 = (uint64_t)v101;
    objc_msgSend(v65, "setSummaryVersion:", v70);

  }
  else
  {
    v59 = (uint64_t)v101;
  }
  v71 = *(_QWORD *)(v35 + 64);
  if (v71)
    v72 = *(_QWORD **)(v35 + 64);
  else
    v72 = _swiftEmptyArrayStorage;
  v73 = v72[2];
  if (v73)
  {
    v98 = v36;
    v74 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
    v96 = v72;
    v75 = (uint64_t)v72 + v74;
    v76 = *(_QWORD *)(v88 + 72);
    swift_bridgeObjectRetain(v71);
    v77 = v86;
    v78 = v89;
    do
    {
      sub_10004BAD4(v75, v59, _s14descr1000D9B91O14AudioRecordingV8FragmentVMa);
      v79 = sub_100081E88(v77);
      v80 = objc_msgSend(v78, "fragments");
      objc_msgSend(v80, "addObject:", v79);

      v59 = (uint64_t)v101;
      sub_100042220(v59, _s14descr1000D9B91O14AudioRecordingV8FragmentVMa);
      v75 += v76;
      --v73;
    }
    while (v73);
    swift_bridgeObjectRelease(v96);
    v35 = v99;
    v30 = v78;
  }
  else
  {
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRelease(v72);
    v30 = v89;
  }
  v81 = *(unsigned __int8 *)(v35 + 72);
  if (v81 == 2)
    v82 = 0;
  else
    v82 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v81 & 1);
  objc_msgSend(v30, "setCallRecording:", v82);

  v95(v100, v97);
  return v30;
}

uint64_t sub_1000815EC(char a1)
{
  return *(_QWORD *)&aToplinessummar[8 * a1];
}

uint64_t sub_10008160C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  _BYTE v21[24];
  _BYTE v22[8];
  _BYTE v23[24];
  _BYTE v24[24];

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ECB88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100084F68();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000D9B91O14AudioRecordingV10CodingKeysON, &_s14descr1000D9B91O14AudioRecordingV10CodingKeysON, v11, v9, v10);
  sub_1000490E8(v3, (uint64_t)v24, &qword_1000ECA28);
  sub_1000490E8((uint64_t)v24, (uint64_t)v21, &qword_1000ECA28);
  v20 = 0;
  v12 = sub_10004B72C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &_s14descr1000DA611V16AttributedStringVN, v12);
  if (!v2)
  {
    sub_1000490E8(v3 + 24, (uint64_t)v23, &qword_1000ECA28);
    sub_1000490E8((uint64_t)v23, (uint64_t)v21, &qword_1000ECA28);
    v20 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &_s14descr1000DA611V16AttributedStringVN, v12);
    v13 = *(_QWORD *)(v3 + 48);
    v14 = *(unsigned __int8 *)(v3 + 56);
    v21[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v21, v5);
    sub_1000490E8(v3 + 64, (uint64_t)v22, &qword_1000ECB90);
    sub_1000490E8((uint64_t)v22, (uint64_t)v21, &qword_1000ECB90);
    v20 = 3;
    v15 = sub_100030EE4(&qword_1000ECB70);
    v16 = sub_100084FAC(&qword_1000ECB98, &qword_1000ECBA0, (uint64_t)&unk_1000B6520, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, v15, v16);
    v17 = *(unsigned __int8 *)(v3 + 72);
    v21[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100081870()
{
  char *v0;

  return sub_1000815EC(*v0);
}

uint64_t sub_100081878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000848E4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10008189C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000818A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100084F68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000818D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100084F68();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1000818F8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[3];
  _OWORD v7[2];

  sub_100084B30(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v7[0];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 57) = *(_OWORD *)((char *)v7 + 9);
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100081940(_QWORD *a1)
{
  return sub_10008160C(a1);
}

void sub_100081980(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  double v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  _QWORD *v70;

  v4 = _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa(0);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100030EE4(&qword_1000EBA10);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v57 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = 1;
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v69 = v13;
  v68(a2, 1, 1);
  v15 = _s14descr1000D9B91O14AudioRecordingV8FragmentVMa(0);
  v16 = *(int *)(v15 + 20);
  *(_QWORD *)(a2 + v16) = 0;
  v17 = a2 + *(int *)(v15 + 24);
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = objc_msgSend(a1, "createdDate");
  if (v18)
  {
    v19 = v18;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v14 = 0;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v68)(v12, v14, 1, v69);
  sub_100048A00((uint64_t)v12, a2);
  v20 = objc_msgSend(a1, "transcript");
  v21 = objc_msgSend(v20, "allObjects");

  v22 = type metadata accessor for ICTTTranscriptSegment(0);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v53 = v23;
    else
      v53 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v24 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(v23);
    if (v24)
      goto LABEL_5;
LABEL_30:
    swift_bridgeObjectRelease(v23);
    v26 = _swiftEmptyArrayStorage;
    goto LABEL_31;
  }
  v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v24)
    goto LABEL_30;
LABEL_5:
  v70 = _swiftEmptyArrayStorage;
  sub_10003F3C0(0, v24 & ~(v24 >> 63), 0);
  if (v24 < 0)
  {
    __break(1u);
    return;
  }
  v58 = v16;
  v59 = v17;
  v60 = a2;
  v61 = a1;
  v25 = 0;
  v62 = v23 & 0xC000000000000001;
  v63 = v24;
  v26 = v70;
  v64 = v23;
  v65 = v10;
  do
  {
    if (v62)
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v23);
    else
      v27 = *(id *)(v23 + 8 * v25 + 32);
    v28 = v27;
    v29 = v67;
    v30 = (uint64_t)v6 + *(int *)(v67 + 20);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v68)(v30, 1, 1, v69);
    v31 = (char *)v6 + *(int *)(v29 + 24);
    *(_QWORD *)v31 = 0;
    v31[8] = 1;
    v32 = (uint64_t *)((char *)v6 + *(int *)(v29 + 28));
    *v32 = 0;
    v32[1] = 0;
    v33 = objc_msgSend(v28, "text");
    if (v33)
    {
      v34 = v33;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v37 = v36;

    }
    else
    {
      v35 = 0;
      v37 = 0;
    }
    v38 = (uint64_t)v65;
    *v6 = v35;
    v6[1] = v37;
    v39 = objc_msgSend(v28, "timestamp");
    if (v39)
    {
      v40 = v39;
      objc_msgSend(v39, "doubleValue");
      Date.init(timeIntervalSince1970:)(v41);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v68)(v38, 0, 1, v69);

    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v68)(v38, 1, 1, v69);
    }
    sub_100048A00(v38, v30);
    v42 = objc_msgSend(v28, "duration");
    v43 = v42;
    if (v42)
    {
      objc_msgSend(v42, "doubleValue");
      v45 = v44;

    }
    else
    {
      v45 = 0;
    }
    *(_QWORD *)v31 = v45;
    v31[8] = v43 == 0;
    v46 = objc_msgSend(v28, "speaker");
    if (v46)
    {
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;

    }
    else
    {

      v48 = 0;
      v50 = 0;
    }
    swift_bridgeObjectRelease(v32[1]);
    *v32 = v48;
    v32[1] = v50;
    v70 = v26;
    v52 = v26[2];
    v51 = v26[3];
    if (v52 >= v51 >> 1)
    {
      sub_10003F3C0(v51 > 1, v52 + 1, 1);
      v26 = v70;
    }
    ++v25;
    v26[2] = v52 + 1;
    sub_100083440((uint64_t)v6, (uint64_t)v26+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v52, _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa);
    v23 = v64;
  }
  while (v63 != v25);
  swift_bridgeObjectRelease(v64);
  a2 = v60;
  a1 = v61;
  v16 = v58;
  v17 = v59;
LABEL_31:
  swift_bridgeObjectRelease(*(_QWORD *)(a2 + v16));
  *(_QWORD *)(a2 + v16) = v26;
  v54 = objc_msgSend(a1, "transcriptVersion");
  v55 = v54;
  if (v54)
  {
    v56 = objc_msgSend(v54, "integerValue");

  }
  else
  {
    v56 = 0;
  }

  *(_QWORD *)v17 = v56;
  *(_BYTE *)(v17 + 8) = v55 == 0;
}

void *sub_100081E88(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ICTTAudioRecording.Fragment(0);
  v14 = a1;
  UUID.init()();
  v15 = (void *)ICTTAudioRecording.Fragment.__allocating_init(document:identity:)(v14, v13);
  sub_1000834C4(v2, (uint64_t)v10);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v16);
  }
  objc_msgSend(v15, "setCreatedDate:", isa);

  v19 = _s14descr1000D9B91O14AudioRecordingV8FragmentVMa(0);
  v20 = *(_QWORD *)(v2 + *(int *)(v19 + 20));
  if (v20)
    v21 = *(_QWORD **)(v2 + *(int *)(v19 + 20));
  else
    v21 = _swiftEmptyArrayStorage;
  v22 = v21[2];
  if (v22)
  {
    v35 = v19;
    v36 = v2;
    v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v34 = v21;
    v24 = (uint64_t)v21 + v23;
    v25 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(v20);
    do
    {
      sub_10004BAD4(v24, (uint64_t)v7, _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa);
      v26 = sub_100082748(v14);
      v27 = v14;
      v28 = v15;
      v29 = objc_msgSend(v15, "transcript");
      objc_msgSend(v29, "addObject:", v26);

      v15 = v28;
      v14 = v27;
      sub_100042220((uint64_t)v7, _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa);
      v24 += v25;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease(v34);
    v19 = v35;
    v2 = v36;
  }
  else
  {
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v21);
  }
  v30 = v2 + *(int *)(v19 + 24);
  if ((*(_BYTE *)(v30 + 8) & 1) != 0)
    v31 = 0;
  else
    v31 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)v30);
  objc_msgSend(v15, "setTranscriptVersion:", v31);

  return v15;
}

uint64_t sub_100082154(char a1)
{
  if (!a1)
    return 0x4164657461657263;
  if (a1 == 1)
    return 0x697263736E617274;
  return 0xD000000000000011;
}

uint64_t sub_1000821B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ECBE8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100085074();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON, &_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON, v11, v9, v10);
  v25 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v25, v5, v12, v13);
  if (!v2)
  {
    v14 = _s14descr1000D9B91O14AudioRecordingV8FragmentVMa(0);
    v24 = *(_QWORD *)(v3 + *(int *)(v14 + 20));
    v23 = 1;
    v15 = sub_100030EE4(&qword_1000ECBD0);
    v16 = sub_1000850B8(&qword_1000ECBF0, &qword_1000ECBF8, (uint64_t)&unk_1000B6570, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, &v23, v5, v15, v16);
    v17 = (uint64_t *)(v3 + *(int *)(v14 + 24));
    v18 = *v17;
    v19 = *((unsigned __int8 *)v17 + 8);
    v22 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100082384@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  v31 = a2;
  v3 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v3);
  v33 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100030EE4(&qword_1000ECBC0);
  v32 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s14descr1000D9B91O14AudioRecordingV8FragmentVMa(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = *(int *)(v7 + 20);
  *(_QWORD *)&v9[v11] = 0;
  v12 = &v9[*(int *)(v7 + 24)];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = a1[3];
  v14 = a1[4];
  sub_10004242C(a1, v13);
  v15 = sub_100085074();
  v34 = v6;
  v16 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON, &_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON, v15, v13, v14);
  if (v16)
  {
    sub_100035424(a1);
  }
  else
  {
    v29 = (uint64_t *)v12;
    v30 = v11;
    v36 = a1;
    v17 = v32;
    v40 = 0;
    sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v18 = (uint64_t)v33;
    v19 = v34;
    v20 = v35;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v10, &v40, v35, v10);
    sub_100048A00(v18, (uint64_t)v9);
    v21 = sub_100030EE4(&qword_1000ECBD0);
    v39 = 1;
    sub_1000850B8(&qword_1000ECBD8, &qword_1000ECBE0, (uint64_t)&unk_1000B6598, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v39, v20, v21);
    v23 = v37;
    v24 = v30;
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v30]);
    *(_QWORD *)&v9[v24] = v23;
    v38 = 2;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v20);
    LOBYTE(v20) = v26;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v35);
    v27 = v29;
    *v29 = v25;
    *((_BYTE *)v27 + 8) = v20 & 1;
    sub_10004BAD4((uint64_t)v9, v31, _s14descr1000D9B91O14AudioRecordingV8FragmentVMa);
    sub_100035424(v36);
  }
  return sub_100042220((uint64_t)v9, _s14descr1000D9B91O14AudioRecordingV8FragmentVMa);
}

uint64_t sub_1000826A4()
{
  char *v0;

  return sub_100082154(*v0);
}

uint64_t sub_1000826AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100085628(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000826D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100085074();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000826F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100085074();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100082720@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100082384(a1, a2);
}

uint64_t sub_100082734(_QWORD *a1)
{
  return sub_1000821B8(a1);
}

void *sub_100082748(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  NSString v16;
  int *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ICTTTranscriptSegment(0);
  v14 = a1;
  UUID.init()();
  v15 = (void *)ICTTTranscriptSegment.__allocating_init(document:identity:)(v14, v13);
  if (*(_QWORD *)(v2 + 8))
    v16 = String._bridgeToObjectiveC()();
  else
    v16 = 0;
  objc_msgSend(v15, "setText:", v16);

  v17 = (int *)_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa(0);
  sub_1000834C4(v2 + v17[5], (uint64_t)v10);
  v18 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v18 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", Date.timeIntervalSince1970.getter(v19));
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  objc_msgSend(v15, "setTimestamp:", v18);

  v20 = v2 + v17[6];
  if ((*(_BYTE *)(v20 + 8) & 1) != 0)
    v21 = 0;
  else
    v21 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)v20);
  objc_msgSend(v15, "setDuration:", v21);

  if (*(_QWORD *)(v2 + v17[7] + 8))
    v22 = String._bridgeToObjectiveC()();
  else
    v22 = 0;
  objc_msgSend(v15, "setSpeaker:", v22);

  return v15;
}

uint64_t sub_1000829CC(char a1)
{
  return *(_QWORD *)&aText_2[8 * a1];
}

uint64_t sub_1000829EC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ECBB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100085030();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON, &_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v29 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v29, v5);
  if (!v2)
  {
    v14 = (int *)_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa(0);
    v15 = (char *)v3 + v14[5];
    v28 = 1;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v28, v5, v16, v17);
    v18 = (char *)v3 + v14[6];
    v19 = *(_QWORD *)v18;
    v20 = v18[8];
    v27 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v27, v5);
    v21 = (uint64_t *)((char *)v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    v26 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100082BA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v33 = a2;
  v3 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v3);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100030EE4(&qword_1000ECBA8);
  v35 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t **)((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = 0;
  v10[1] = 0;
  v11 = (uint64_t)v10 + *(int *)(v8 + 20);
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v34 = v11;
  v13(v11, 1, 1, v12);
  v14 = (_QWORD *)((char *)v10 + *(int *)(v7 + 24));
  *v14 = 0;
  *((_BYTE *)v14 + 8) = 1;
  v15 = (_QWORD *)((char *)v10 + *(int *)(v7 + 28));
  *v15 = 0;
  v15[1] = 0;
  v17 = a1[3];
  v16 = a1[4];
  sub_10004242C(a1, v17);
  v18 = sub_100085030();
  v37 = v6;
  v19 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON, &_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON, v18, v17, v16);
  if (v19)
  {
    sub_100035424(a1);
  }
  else
  {
    v39 = v14;
    v32 = v15;
    v20 = v35;
    v21 = (uint64_t)v36;
    v43 = 0;
    *v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v38);
    v10[1] = v22;
    v42 = 1;
    sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v12, &v42, v38, v12);
    sub_100048A00(v21, v34);
    v41 = 2;
    v24 = v37;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v38);
    v26 = v39;
    *v39 = v25;
    *((_BYTE *)v26 + 8) = v27 & 1;
    v40 = 3;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v38);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v38);
    v31 = v32;
    swift_bridgeObjectRelease(v32[1]);
    *v31 = v28;
    v31[1] = v30;
    sub_10004BAD4((uint64_t)v10, v33, _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa);
    sub_100035424(0);
  }
  return sub_100042220((uint64_t)v10, _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa);
}

uint64_t sub_100082EAC()
{
  char *v0;

  return sub_1000829CC(*v0);
}

uint64_t sub_100082EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100085778(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100082ED8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100085030();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100082F00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100085030();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100082F28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100082BA8(a1, a2);
}

uint64_t sub_100082F3C(_QWORD *a1)
{
  return sub_1000829EC(a1);
}

uint64_t sub_100082F50@<X0>(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  unsigned __int8 v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;

  v8 = _s14descr1000D9B91O14AudioRecordingV8FragmentVMa(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, "topLineSummary");
  if (v12)
  {
    v13 = a2;
    sub_100048ED0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048F08);
    v14 = sub_10008CA90(v12, v13, (uint64_t)a3);
    v12 = v15;
    v17 = v16;
    sub_100048ED0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
  }
  else
  {
    v14 = 0;
    v17 = 0;
  }
  v59 = (uint64_t)v12;
  sub_1000833C8((uint64_t)v14, (uint64_t)v12, v17);
  v18 = objc_msgSend(a1, "summary");
  v60 = a2;
  if (v18)
  {
    v18 = sub_10008CA90(v18, a2, (uint64_t)a3);
    v20 = v19;
    v22 = v21;
    sub_100048ED0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
    v23 = v22;
    v24 = v20;
  }
  else
  {
    sub_100048ED0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048A48);
    v24 = 0;
    v23 = 0;
  }
  v54 = v23;
  v55 = v24;
  sub_1000833C8((uint64_t)v18, v24, v23);
  v25 = objc_msgSend(a1, "summaryVersion");
  v58 = v17;
  v56 = (uint64_t)v18;
  v52 = v25;
  if (v25)
  {
    v26 = v25;
    v53 = objc_msgSend(v25, "integerValue");

  }
  else
  {
    v53 = 0;
  }
  v27 = v60;
  v57 = a1;
  v28 = objc_msgSend(a1, "fragments");
  v29 = objc_msgSend(v28, "allObjects");

  v30 = type metadata accessor for ICTTAudioRecording.Fragment(0);
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v39 = v31;
    else
      v39 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v32 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v31);
    if (v32)
      goto LABEL_12;
LABEL_25:
    swift_bridgeObjectRelease(v31);
    v35 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v32)
    goto LABEL_25;
LABEL_12:
  v61 = _swiftEmptyArrayStorage;
  result = sub_10003F34C(0, v32 & ~(v32 >> 63), 0);
  if (v32 < 0)
  {
    __break(1u);
    return result;
  }
  v50 = v14;
  v51 = a4;
  v34 = 0;
  v35 = v61;
  do
  {
    if ((v31 & 0xC000000000000001) != 0)
      v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v31);
    else
      v36 = *(id *)(v31 + 8 * v34 + 32);
    sub_100081980(v36, (uint64_t)v11);
    v61 = v35;
    v38 = v35[2];
    v37 = v35[3];
    if (v38 >= v37 >> 1)
    {
      sub_10003F34C(v37 > 1, v38 + 1, 1);
      v35 = v61;
    }
    ++v34;
    v35[2] = v38 + 1;
    sub_100083440((uint64_t)v11, (uint64_t)v35+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v38, _s14descr1000D9B91O14AudioRecordingV8FragmentVMa);
  }
  while (v32 != v34);
  swift_bridgeObjectRelease(v31);
  v14 = v50;
  a4 = v51;
  v27 = v60;
LABEL_26:
  swift_bridgeObjectRetain(v35);
  v40 = v57;
  v41 = objc_msgSend(v57, "callRecording");
  v42 = v58;
  if (v41)
  {
    v43 = v41;
    v44 = objc_msgSend(v41, "BOOLValue");

  }
  else
  {

    v44 = 2;
  }
  v45 = v52 == 0;
  v46 = v59;
  sub_1000833C8((uint64_t)v14, v59, v42);
  v48 = v55;
  v47 = v56;
  v49 = v54;
  sub_1000833C8(v56, v55, v54);
  sub_100048F48(v47, v48, v49);
  sub_100048F48((uint64_t)v14, v46, v42);
  sub_100048F48((uint64_t)v14, v46, v42);
  sub_100048F48(v47, v48, v49);
  result = swift_bridgeObjectRelease(v35);
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v46;
  *(_QWORD *)(a4 + 16) = v42;
  *(_QWORD *)(a4 + 24) = v47;
  *(_QWORD *)(a4 + 32) = v48;
  *(_QWORD *)(a4 + 40) = v49;
  *(_QWORD *)(a4 + 48) = v53;
  *(_BYTE *)(a4 + 56) = v45;
  *(_QWORD *)(a4 + 64) = v35;
  *(_BYTE *)(a4 + 72) = v44;
  return result;
}

uint64_t _s14descr1000D9B91O14AudioRecordingV8FragmentVMa(uint64_t a1)
{
  return sub_10008340C(a1, qword_1000ECB20, (uint64_t)&_s14descr1000D9B91O14AudioRecordingV8FragmentVMn);
}

uint64_t sub_1000833C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa(uint64_t a1)
{
  return sub_10008340C(a1, qword_1000ECA88, (uint64_t)&_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMn);
}

uint64_t sub_10008340C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100083440(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100083484(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100030EE4(&qword_1000EBBA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000834C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000EBA10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s14descr1000D9B91O14AudioRecordingVwxx(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[2]);
  }
  v3 = a1[4];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[5]);
  }
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t _s14descr1000D9B91O14AudioRecordingVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    if (v6)
      goto LABEL_3;
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6 = *(_QWORD *)(a2 + 32);
  if (!v6)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t _s14descr1000D9B91O14AudioRecordingVwca(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease(v4);
      v7 = *((_QWORD *)a2 + 2);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      sub_10004A754(a1);
      v11 = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = v11;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v9;
    v10 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 16) = v10;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v12;
  }
  v13 = (_OWORD *)(a1 + 24);
  v14 = (__int128 *)((char *)a2 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *((_QWORD *)a2 + 4);
  if (v15)
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v17 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v15);
      v18 = *((_QWORD *)a2 + 5);
      v19 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
    }
    else
    {
      sub_10004A754(a1 + 24);
      v22 = *((_QWORD *)a2 + 5);
      *v13 = *v14;
      *(_QWORD *)(a1 + 40) = v22;
    }
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v20 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v20;
    v21 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 40) = v21;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v23 = *v14;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *v13 = v23;
  }
  v24 = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v24;
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

__n128 _s14descr1000D9B91O14AudioRecordingVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s14descr1000D9B91O14AudioRecordingVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease(v4);
      v6 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRelease(v6);
      goto LABEL_6;
    }
    sub_10004A754(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_6:
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (!v8)
  {
    sub_10004A754(a1 + 24);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v9);
LABEL_11:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t _s14descr1000D9B91O14AudioRecordingVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s14descr1000D9B91O14AudioRecordingVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *_s14descr1000D9B91O14AudioRecordingVMa()
{
  return &_s14descr1000D9B91O14AudioRecordingVN;
}

uint64_t *sub_1000839B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11))
    {
      v14 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = a3[7];
    v18 = (char *)v4 + v16;
    v19 = (char *)a2 + v16;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = (uint64_t *)((char *)v4 + v17);
    v21 = (uint64_t *)((char *)a2 + v17);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain(v22);
  }
  return v4;
}

uint64_t sub_100083AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

_QWORD *sub_100083B6C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = (_QWORD *)((char *)a1 + v15);
  v19 = (_QWORD *)((char *)a2 + v15);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  return a1;
}

_QWORD *sub_100083C78(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  v21 = a3[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

_OWORD *sub_100083DF0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *sub_100083EE0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[6];
  v18 = a3[7];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = (_QWORD *)((char *)a1 + v18);
  v22 = (_QWORD *)((char *)a2 + v18);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_100084034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100084040);
}

uint64_t sub_100084040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100030EE4(&qword_1000EBA10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_1000840CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000840D8);
}

uint64_t sub_1000840D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_100030EE4(&qword_1000EBA10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_100084150(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000B64C8;
  sub_10004B4E4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1000B64E0;
    v4[3] = &unk_1000B64C8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t *sub_1000841D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100030EE4(&qword_1000EBA10);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = *(uint64_t *)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = v13;
    v14 = (char *)a1 + v12;
    v15 = (char *)a2 + v12;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_1000842D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

char *sub_10008433C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  v12 = &a1[v10];
  v13 = &a2[v10];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  swift_bridgeObjectRetain(v11);
  return a1;
}

char *sub_100084414(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  v14 = *(_QWORD *)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  return a1;
}

char *sub_100084548(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  return a1;
}

char *sub_10008461C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  return a1;
}

uint64_t sub_100084748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100084754);
}

uint64_t sub_100084754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100030EE4(&qword_1000EBA10);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000847E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000847EC);
}

uint64_t sub_1000847EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100030EE4(&qword_1000EBA10);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

void sub_100084868(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10004B4E4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_1000B64E0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1000848E4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x53656E694C706F74 && a2 == 0xEE007972616D6D75;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x53656E694C706F74, 0xEE007972616D6D75, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x7972616D6D7573 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7972616D6D7573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x567972616D6D7573 && a2 == 0xEE006E6F69737265
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x567972616D6D7573, 0xEE006E6F69737265, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0x746E656D67617266 && a2 == 0xE900000000000073
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656D67617266, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 0x65526C6C61437369 && a2 == 0xEF676E6964726F63)
  {
    swift_bridgeObjectRelease(0xEF676E6964726F63);
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65526C6C61437369, 0xEF676E6964726F63, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100084B30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v5 = sub_100030EE4(&qword_1000ECB60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100084F68();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000D9B91O14AudioRecordingV10CodingKeysON, &_s14descr1000D9B91O14AudioRecordingV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_100035424(a1);
    sub_100048F48(0, 0, 0);
    sub_100048F48(0, 0, 0);
    return swift_bridgeObjectRelease(0);
  }
  else
  {
    v36 = 0;
    sub_10004B904();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14descr1000DA611V16AttributedStringVN, &v36, v5, &_s14descr1000DA611V16AttributedStringVN);
    v12 = v32;
    v36 = 1;
    v30 = v33;
    v31 = v34;
    sub_1000833C8(v32, v33, v34);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14descr1000DA611V16AttributedStringVN, &v36, v5, &_s14descr1000DA611V16AttributedStringVN);
    v28 = a2;
    v29 = v12;
    v14 = v32;
    v13 = v33;
    LOBYTE(v32) = 2;
    v15 = v34;
    sub_1000833C8(v14, v33, v34);
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    v27 = v15;
    v35 = v16;
    v17 = sub_100030EE4(&qword_1000ECB70);
    v36 = 3;
    sub_100084FAC(&qword_1000ECB78, &qword_1000ECB80, (uint64_t)&unk_1000B6548, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v17, &v36, v5, v17);
    v18 = v32;
    LOBYTE(v32) = 4;
    swift_bridgeObjectRetain(v18);
    LODWORD(v17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = v29;
    v19 = v30;
    v21 = v31;
    sub_1000833C8(v29, v30, v31);
    HIDWORD(v25) = v17;
    v22 = v27;
    sub_1000833C8(v14, v13, v27);
    sub_100048F48(v14, v13, v22);
    sub_100048F48(v20, v19, v21);
    sub_100035424(a1);
    sub_100048F48(v20, v19, v21);
    sub_100048F48(v14, v13, v22);
    result = swift_bridgeObjectRelease(v18);
    v24 = v28;
    *v28 = v20;
    v24[1] = v19;
    v24[2] = v21;
    v24[3] = v14;
    v24[4] = v13;
    v24[5] = v22;
    v24[6] = v26;
    *((_BYTE *)v24 + 56) = v35 & 1;
    v24[8] = v18;
    *((_BYTE *)v24 + 72) = BYTE4(v25);
  }
  return result;
}

unint64_t sub_100084F68()
{
  unint64_t result;

  result = qword_1000ECB68;
  if (!qword_1000ECB68)
  {
    result = swift_getWitnessTable(&unk_1000B68E4, &_s14descr1000D9B91O14AudioRecordingV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECB68);
  }
  return result;
}

uint64_t sub_100084FAC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100030FF0(&qword_1000ECB70);
    sub_100042114(a2, _s14descr1000D9B91O14AudioRecordingV8FragmentVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100085030()
{
  unint64_t result;

  result = qword_1000ECBB0;
  if (!qword_1000ECBB0)
  {
    result = swift_getWitnessTable(&unk_1000B6894, &_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECBB0);
  }
  return result;
}

unint64_t sub_100085074()
{
  unint64_t result;

  result = qword_1000ECBC8;
  if (!qword_1000ECBC8)
  {
    result = swift_getWitnessTable(&unk_1000B6844, &_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECBC8);
  }
  return result;
}

uint64_t sub_1000850B8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100030FF0(&qword_1000ECBD0);
    sub_100042114(a2, _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100085188 + 4 * byte_1000B6485[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000851BC + 4 * byte_1000B6480[v4]))();
}

uint64_t sub_1000851BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000851C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000851CCLL);
  return result;
}

uint64_t sub_1000851D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000851E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000851E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000851EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysOMa()
{
  return &_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON;
}

uint64_t _s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100085254 + 4 * byte_1000B648F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100085288 + 4 * byte_1000B648A[v4]))();
}

uint64_t sub_100085288(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100085290(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100085298);
  return result;
}

uint64_t sub_1000852A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000852ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000852B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000852B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysOMa()
{
  return &_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON;
}

uint64_t _s14descr1000D9B91O14AudioRecordingV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100085320 + 4 * byte_1000B6499[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100085354 + 4 * byte_1000B6494[v4]))();
}

uint64_t sub_100085354(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008535C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100085364);
  return result;
}

uint64_t sub_100085370(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100085378);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10008537C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100085384(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000D9B91O14AudioRecordingV10CodingKeysOMa()
{
  return &_s14descr1000D9B91O14AudioRecordingV10CodingKeysON;
}

unint64_t sub_1000853A4()
{
  unint64_t result;

  result = qword_1000ECC00;
  if (!qword_1000ECC00)
  {
    result = swift_getWitnessTable(&unk_1000B66AC, &_s14descr1000D9B91O14AudioRecordingV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC00);
  }
  return result;
}

unint64_t sub_1000853EC()
{
  unint64_t result;

  result = qword_1000ECC08;
  if (!qword_1000ECC08)
  {
    result = swift_getWitnessTable(&unk_1000B6764, &_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC08);
  }
  return result;
}

unint64_t sub_100085434()
{
  unint64_t result;

  result = qword_1000ECC10;
  if (!qword_1000ECC10)
  {
    result = swift_getWitnessTable(&unk_1000B681C, &_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC10);
  }
  return result;
}

unint64_t sub_10008547C()
{
  unint64_t result;

  result = qword_1000ECC18;
  if (!qword_1000ECC18)
  {
    result = swift_getWitnessTable(&unk_1000B678C, &_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC18);
  }
  return result;
}

unint64_t sub_1000854C4()
{
  unint64_t result;

  result = qword_1000ECC20;
  if (!qword_1000ECC20)
  {
    result = swift_getWitnessTable(&unk_1000B67B4, &_s14descr1000D9B91O14AudioRecordingV8FragmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC20);
  }
  return result;
}

unint64_t sub_10008550C()
{
  unint64_t result;

  result = qword_1000ECC28;
  if (!qword_1000ECC28)
  {
    result = swift_getWitnessTable(&unk_1000B66D4, &_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC28);
  }
  return result;
}

unint64_t sub_100085554()
{
  unint64_t result;

  result = qword_1000ECC30;
  if (!qword_1000ECC30)
  {
    result = swift_getWitnessTable(&unk_1000B66FC, &_s14descr1000D9B91O14AudioRecordingV17TranscriptSegmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC30);
  }
  return result;
}

unint64_t sub_10008559C()
{
  unint64_t result;

  result = qword_1000ECC38;
  if (!qword_1000ECC38)
  {
    result = swift_getWitnessTable(&unk_1000B661C, &_s14descr1000D9B91O14AudioRecordingV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC38);
  }
  return result;
}

unint64_t sub_1000855E4()
{
  unint64_t result;

  result = qword_1000ECC40;
  if (!qword_1000ECC40)
  {
    result = swift_getWitnessTable(&unk_1000B6644, &_s14descr1000D9B91O14AudioRecordingV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECC40);
  }
  return result;
}

uint64_t sub_100085628(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x4164657461657263 && a2 == 0xE900000000000074;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x697263736E617274 && a2 == 0xEA00000000007470
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x697263736E617274, 0xEA00000000007470, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000B1200)
  {
    swift_bridgeObjectRelease(0x80000001000B1200);
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000B1200, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100085778(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0x72656B61657073 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72656B61657073, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100085910()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000ECC48);
  sub_10003609C(v0, (uint64_t)qword_1000ECC48);
  return static Logger.archiving.getter();
}

uint64_t sub_100085958(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v13 = _s14descr1000DA611V16AttributedStringV9AttributeVMa(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = a6;
  v18 = swift_bridgeObjectRetain(a1);
  sub_100085A94(v18, a2, a3, a6, a7, v16);
  v19 = *(_QWORD *)(a5 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  *(_QWORD *)(a5 + 16) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = sub_1000338D8(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
    *(_QWORD *)(a5 + 16) = v19;
  }
  v22 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  if (v22 >= v21 >> 1)
  {
    v19 = sub_1000338D8(v21 > 1, v22 + 1, 1, v19);
    *(_QWORD *)(a5 + 16) = v19;
  }
  *(_QWORD *)(v19 + 16) = v22 + 1;
  return sub_100083440((uint64_t)v16, v19+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v22, _s14descr1000DA611V16AttributedStringV9AttributeVMa);
}

void sub_100085A94(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(void);
  void (*v42)(void);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  char v52;
  void (*v53)(void);
  int v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void (*v60)(void);
  id v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  __int16 v80;
  unsigned int v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  unint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  unint64_t v99;
  unsigned int v100;
  int v101;
  int v102;
  __int16 v103;
  unsigned int v104;
  uint64_t v105;
  id v106;
  unint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  unint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  __int16 v120;
  unsigned int v121;
  uint64_t v122;
  id v123;
  unint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  unint64_t v133;
  unsigned int v134;
  int v135;
  int v136;
  __int16 v137;
  unsigned int v138;
  uint64_t v139;
  id v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  unint64_t v149;
  unsigned int v150;
  int v151;
  int v152;
  __int16 v153;
  unsigned int v154;
  uint64_t v155;
  id v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  unint64_t v165;
  unsigned int v166;
  int v167;
  int v168;
  __int16 v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  unint64_t v180;
  char v181;
  uint64_t v182;
  id v183;
  uint64_t v184;
  id v185;
  unint64_t v186;
  char v187;
  char v188;
  id v189;
  unint64_t v190;
  char v191;
  int v192;
  void (*v193)(char *, uint64_t, uint64_t);
  char *v194;
  uint64_t v195;
  id v196;
  unint64_t v197;
  char v198;
  unint64_t v199;
  char v200;
  id v201;
  unint64_t v202;
  char v203;
  unint64_t v204;
  char v205;
  id v206;
  unint64_t v207;
  char v208;
  uint64_t v209;
  void *v210;
  id v211;
  id v212;
  id v213;
  uint64_t *v214;
  id v215;
  void *v216;
  id v217;
  char *v218;
  uint64_t v219;
  void (*v220)(char *, char *, uint64_t);
  __int128 *v221;
  char *v222;
  uint64_t v223;
  uint64_t *v224;
  __int128 *v225;
  id v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  id v233;
  NSObject *v234;
  os_log_type_t v235;
  uint8_t *v236;
  _QWORD *v237;
  id v238;
  uint64_t v239;
  unsigned __int8 v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  int v247;
  uint64_t v248;
  char *v249;
  uint64_t *v250;
  void (*v251)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  char *v254;
  void (*v255)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void (*v264)(void);
  uint64_t v265;
  void *v266;
  _QWORD *v267;
  uint64_t v268;
  char *v269;
  CGColor *v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;

  v247 = a5;
  v266 = a4;
  v267 = a2;
  v268 = a3;
  v8 = sub_100030EE4(&qword_1000ECC60);
  __chkstk_darwin(v8);
  v246 = (uint64_t *)((char *)&v241 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v11 = __chkstk_darwin(v10);
  v243 = (char *)&v241 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v269 = (char *)&v241 - v13;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v242 = (char *)&v241 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v241 = (char *)&v241 - v19;
  __chkstk_darwin(v18);
  v259 = (char *)&v241 - v20;
  v21 = sub_100030EE4(&qword_1000ECC68);
  __chkstk_darwin(v21);
  v258 = (uint64_t)&v241 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v23);
  v254 = (char *)&v241 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100030EE4(&qword_1000EBBA0);
  __chkstk_darwin(v25);
  v27 = (char *)&v241 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v249 = (char *)&v241 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = (int *)_s14descr1000DA611V16AttributedStringV9AttributeVMa(0);
  v32 = *(void (**)(void))(v29 + 56);
  v248 = (uint64_t)a6 + v31[5];
  v264 = v32;
  v32();
  v33 = (uint64_t)a6 + v31[6];
  v34 = type metadata accessor for Date(0);
  v35 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v253 = v33;
  v252 = v34;
  v251 = v35;
  ((void (*)(uint64_t, uint64_t, uint64_t))v35)(v33, 1, 1);
  v36 = (char *)a6 + v31[7];
  *(_OWORD *)v36 = xmmword_1000B4D80;
  *((_OWORD *)v36 + 1) = 0u;
  *((_OWORD *)v36 + 2) = 0u;
  *((_OWORD *)v36 + 3) = 0u;
  *((_QWORD *)v36 + 8) = 0;
  v37 = (uint64_t)a6 + v31[8];
  v38 = _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  v39 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v257 = v37;
  v256 = v38;
  v255 = v39;
  ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v37, 1, 1);
  v260 = v31[9];
  *((_BYTE *)a6 + v260) = 5;
  v40 = (uint64_t)a6 + v31[10];
  v263 = v15;
  v41 = *(void (**)(void))(v15 + 56);
  v261 = v40;
  v265 = v14;
  v42 = v41;
  v41();
  v262 = v31[11];
  *((_BYTE *)a6 + v262) = 5;
  v43 = (_QWORD *)((char *)a6 + v31[12]);
  *v43 = 0;
  v43[1] = 0;
  v44 = (uint64_t)a6 + v31[13];
  v45 = _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v245 = v44;
  v244 = v45;
  v46(v44, 1, 1);
  v47 = v267;
  v267 = a6;
  v48 = v268;
  *a6 = v47;
  a6[1] = v48;
  v49 = *(_QWORD *)(a1 + 16);
  v250 = v43;
  if (!v49)
  {
    v273 = 0u;
    v274 = 0u;
LABEL_8:
    v53 = v264;
    goto LABEL_9;
  }
  v50 = ICTTAttributeNameReplicaID;
  v51 = sub_10005F9A0((uint64_t)v50);
  if ((v52 & 1) == 0)
  {
    v273 = 0u;
    v274 = 0u;

    goto LABEL_8;
  }
  sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v51, (uint64_t)&v273);

  v53 = v264;
  if (!*((_QWORD *)&v274 + 1))
  {
LABEL_9:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v53)(v27, 1, 1, v28);
    goto LABEL_10;
  }
  v54 = swift_dynamicCast(v27, &v273, (char *)&type metadata for Any + 8, v28, 6);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v53)(v27, v54 ^ 1u, 1, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) != 1)
  {
    v55 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v56 = v249;
    v55(v249, v27, v28);
    v57 = v248;
    sub_100036060(v248, &qword_1000EBBA0);
    v55((char *)v57, v56, v28);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v53)(v57, 0, 1, v28);
    goto LABEL_11;
  }
LABEL_10:
  sub_100036060((uint64_t)v27, &qword_1000EBBA0);
LABEL_11:
  v58 = v265;
  v59 = v266;
  v60 = v42;
  if (!*(_QWORD *)(a1 + 16))
  {
    v273 = 0u;
    v274 = 0u;
    goto LABEL_22;
  }
  v61 = ICTTAttributeNameTimestamp;
  v62 = sub_10005F9A0((uint64_t)v61);
  if ((v63 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v62, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (!*((_QWORD *)&v274 + 1))
  {
LABEL_22:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_20;
LABEL_23:
    v273 = 0u;
    v274 = 0u;
    goto LABEL_29;
  }
  if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
  {
    v64 = (uint64_t)v254;
    Date.init(timeIntervalSince1970:)(*(double *)&v271);
    v251(v64, 0, 1, v252);
    sub_10004EFD0(v64, v253, &qword_1000EBA10);
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_23;
LABEL_20:
  v65 = ICTTAttributeNameFont;
  v66 = sub_10005F9A0((uint64_t)v65);
  if ((v67 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v66, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (!*((_QWORD *)&v274 + 1))
  {
LABEL_29:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_40;
    goto LABEL_30;
  }
  v68 = sub_100036000(0, &qword_1000ECC80, ICTTFont_ptr);
  if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, v68, 6) & 1) == 0)
    goto LABEL_39;
  v69 = (void *)v271;
  v70 = *((_QWORD *)v36 + 1);
  if (v70 == 1)
  {
    v71 = 0;
    v70 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0uLL;
    v76 = 0x200000000;
    v77 = 1;
    v78 = 0x2000000;
    v79 = 0x20000;
    v80 = 512;
    v81 = 1;
  }
  else
  {
    v74 = *((_QWORD *)v36 + 8);
    v75 = *((_OWORD *)v36 + 3);
    v82 = *((_QWORD *)v36 + 3);
    v73 = *((_QWORD *)v36 + 4);
    v72 = *((_QWORD *)v36 + 2);
    v71 = *(_QWORD *)v36;
    v80 = v82 & 0xFF00;
    v79 = v82 & 0xFFFF0000;
    v78 = v82 & 0xFF000000;
    v76 = v82 & 0xFFFFFFFF00000000;
    v77 = v82 & 1;
    v81 = v36[40] & 1;
  }
  *(_QWORD *)v36 = v71;
  *((_QWORD *)v36 + 1) = v70;
  *((_QWORD *)v36 + 2) = v72;
  *((_QWORD *)v36 + 3) = (unsigned __int16)v80 & 0xFF00 | *(_QWORD *)&v79 & 0xFF0000 | v77 | v78 & 0xFF000000 | v76 & 0xFF00000000;
  *((_QWORD *)v36 + 4) = v73;
  *((_QWORD *)v36 + 5) = v81;
  *((_OWORD *)v36 + 3) = v75;
  *((_QWORD *)v36 + 8) = v74;
  v83 = objc_msgSend(v69, "fontName");
  if (v83)
  {
    v84 = v83;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    v87 = v86;

  }
  else
  {
    v85 = 0;
    v87 = 0;
  }
  swift_bridgeObjectRelease(*((_QWORD *)v36 + 1));
  *(_QWORD *)v36 = v85;
  *((_QWORD *)v36 + 1) = v87;
  if (v87 == 1
    || (objc_msgSend(v69, "pointSize"), *((_QWORD *)v36 + 2) = v88, v36[24] = 0, *((_QWORD *)v36 + 1) == 1)
    || (v36[25] = objc_msgSend(v69, "fontHints") & 1, *((_QWORD *)v36 + 1) == 1))
  {

LABEL_39:
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_40;
LABEL_30:
    v273 = 0u;
    v274 = 0u;
    goto LABEL_47;
  }
  v240 = objc_msgSend(v69, "fontHints");

  v36[26] = (v240 & 2) != 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_30;
LABEL_40:
  v89 = ICTTAttributeNameFontHints;
  v90 = sub_10005F9A0((uint64_t)v89);
  if ((v91 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v90, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (!*((_QWORD *)&v274 + 1))
  {
LABEL_47:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_52;
LABEL_48:
    v273 = 0u;
    v274 = 0u;
    goto LABEL_59;
  }
  if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6) & 1) != 0)
  {
    v92 = v271;
    v93 = *((_QWORD *)v36 + 1);
    if (v93 == 1)
    {
      v94 = 0;
      v93 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0uLL;
      v99 = 0x200000000;
      v100 = 1;
      v101 = 0x2000000;
      v102 = 0x20000;
      v103 = 512;
      v104 = 1;
    }
    else
    {
      v97 = *((_QWORD *)v36 + 8);
      v98 = *((_OWORD *)v36 + 3);
      v105 = *((_QWORD *)v36 + 3);
      v96 = *((_QWORD *)v36 + 4);
      v95 = *((_QWORD *)v36 + 2);
      v94 = *(_QWORD *)v36;
      v103 = v105 & 0xFF00;
      v102 = v105 & 0xFFFF0000;
      v101 = v105 & 0xFF000000;
      v99 = v105 & 0xFFFFFFFF00000000;
      v100 = v105 & 1;
      v104 = v36[40] & 1;
    }
    *(_QWORD *)v36 = v94;
    *((_QWORD *)v36 + 1) = v93;
    *((_QWORD *)v36 + 2) = v95;
    *((_QWORD *)v36 + 3) = (unsigned __int16)v103 & 0xFF00 | *(_QWORD *)&v102 & 0xFF0000 | v100 | v101 & 0xFF000000 | v99 & 0xFF00000000;
    *((_QWORD *)v36 + 4) = v96;
    *((_QWORD *)v36 + 5) = v104;
    *((_OWORD *)v36 + 3) = v98;
    *((_QWORD *)v36 + 8) = v97;
    v36[25] = v92 & 1;
    v36[26] = (v92 & 2) != 0;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_48;
LABEL_52:
  v106 = ICTTAttributeNameUnderline;
  v107 = sub_10005F9A0((uint64_t)v106);
  if ((v108 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v107, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (!*((_QWORD *)&v274 + 1))
  {
LABEL_59:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_64;
LABEL_60:
    v273 = 0u;
    v274 = 0u;
    goto LABEL_71;
  }
  if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
  {
    v109 = v271;
    v110 = *((_QWORD *)v36 + 1);
    if (v110 == 1)
    {
      v111 = 0;
      v110 = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v115 = 0uLL;
      v116 = 0x200000000;
      v117 = 1;
      v118 = 0x2000000;
      v119 = 0x20000;
      v120 = 512;
      v121 = 1;
    }
    else
    {
      v114 = *((_QWORD *)v36 + 8);
      v115 = *((_OWORD *)v36 + 3);
      v122 = *((_QWORD *)v36 + 3);
      v113 = *((_QWORD *)v36 + 4);
      v112 = *((_QWORD *)v36 + 2);
      v111 = *(_QWORD *)v36;
      v120 = v122 & 0xFF00;
      v119 = v122 & 0xFFFF0000;
      v118 = v122 & 0xFF000000;
      v116 = v122 & 0xFFFFFFFF00000000;
      v117 = v122 & 1;
      v121 = v36[40] & 1;
    }
    *(_QWORD *)v36 = v111;
    *((_QWORD *)v36 + 1) = v110;
    *((_QWORD *)v36 + 2) = v112;
    *((_QWORD *)v36 + 3) = (unsigned __int16)v120 & 0xFF00 | *(_QWORD *)&v119 & 0xFF0000 | v117 | v118 & 0xFF000000 | v116 & 0xFF00000000;
    *((_QWORD *)v36 + 4) = v113;
    *((_QWORD *)v36 + 5) = v121;
    *((_OWORD *)v36 + 3) = v115;
    *((_QWORD *)v36 + 8) = v114;
    v36[27] = v109;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_60;
LABEL_64:
  v123 = ICTTAttributeNameStrikethrough;
  v124 = sub_10005F9A0((uint64_t)v123);
  if ((v125 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v124, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (!*((_QWORD *)&v274 + 1))
  {
LABEL_71:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_76;
LABEL_72:
    v273 = 0u;
    v274 = 0u;
    goto LABEL_83;
  }
  if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
  {
    v126 = v271;
    v127 = *((_QWORD *)v36 + 1);
    if (v127 == 1)
    {
      v128 = 0;
      v127 = 0;
      v129 = 0;
      v130 = 0;
      v131 = 0;
      v132 = 0uLL;
      v133 = 0x200000000;
      v134 = 1;
      v135 = 0x2000000;
      v136 = 0x20000;
      v137 = 512;
      v138 = 1;
    }
    else
    {
      v131 = *((_QWORD *)v36 + 8);
      v132 = *((_OWORD *)v36 + 3);
      v139 = *((_QWORD *)v36 + 3);
      v130 = *((_QWORD *)v36 + 4);
      v129 = *((_QWORD *)v36 + 2);
      v128 = *(_QWORD *)v36;
      v137 = v139 & 0xFF00;
      v136 = v139 & 0xFFFF0000;
      v135 = v139 & 0xFF000000;
      v133 = v139 & 0xFFFFFFFF00000000;
      v134 = v139 & 1;
      v138 = v36[40] & 1;
    }
    *(_QWORD *)v36 = v128;
    *((_QWORD *)v36 + 1) = v127;
    *((_QWORD *)v36 + 2) = v129;
    *((_QWORD *)v36 + 3) = (unsigned __int16)v137 & 0xFF00 | *(_QWORD *)&v136 & 0xFF0000 | v134 | v135 & 0xFF000000 | v133 & 0xFF00000000;
    *((_QWORD *)v36 + 4) = v130;
    *((_QWORD *)v36 + 5) = v138;
    *((_OWORD *)v36 + 3) = v132;
    *((_QWORD *)v36 + 8) = v131;
    v36[28] = v126;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_72;
LABEL_76:
  v140 = ICTTAttributeNameSuperscript;
  v141 = sub_10005F9A0((uint64_t)v140);
  if ((v142 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v141, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (!*((_QWORD *)&v274 + 1))
  {
LABEL_83:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_88;
LABEL_84:
    v271 = 0u;
    v272 = 0u;
LABEL_94:
    sub_100036060((uint64_t)&v271, &qword_1000EB6E8);
    goto LABEL_97;
  }
  if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
  {
    v143 = v271;
    v144 = *((_QWORD *)v36 + 1);
    if (v144 == 1)
    {
      v145 = 0;
      v144 = 0;
      v146 = 0;
      v147 = 0;
      v148 = 0uLL;
      v149 = 0x200000000;
      v150 = 1;
      v151 = 0x2000000;
      v152 = 0x20000;
      v153 = 512;
      v154 = 1;
    }
    else
    {
      v147 = *((_QWORD *)v36 + 8);
      v148 = *((_OWORD *)v36 + 3);
      v146 = *((_QWORD *)v36 + 2);
      v155 = *((_QWORD *)v36 + 3);
      v145 = *(_QWORD *)v36;
      v153 = v155 & 0xFF00;
      v152 = v155 & 0xFFFF0000;
      v151 = v155 & 0xFF000000;
      v149 = v155 & 0xFFFFFFFF00000000;
      v150 = v155 & 1;
      v154 = v36[40] & 1;
    }
    *(_QWORD *)v36 = v145;
    *((_QWORD *)v36 + 1) = v144;
    *((_QWORD *)v36 + 2) = v146;
    *((_QWORD *)v36 + 3) = (unsigned __int16)v153 & 0xFF00 | *(_QWORD *)&v152 & 0xFF0000 | v150 | v151 & 0xFF000000 | v149 & 0xFF00000000;
    *((_OWORD *)v36 + 3) = v148;
    *((_QWORD *)v36 + 8) = v147;
    *((_QWORD *)v36 + 4) = v143;
    *((_QWORD *)v36 + 5) = v154;
    v36[40] = 0;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_84;
LABEL_88:
  v156 = ICTTAttributeNameForegroundColor;
  v157 = sub_10005F9A0((uint64_t)v156);
  if ((v158 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v157, (uint64_t)&v271);
  }
  else
  {
    v271 = 0u;
    v272 = 0u;
  }

  if (!*((_QWORD *)&v272 + 1))
    goto LABEL_94;
  sub_100031034(&v271, &v273);
  v159 = *((_QWORD *)v36 + 1);
  if (v159 == 1)
  {
    v160 = 0;
    v159 = 0;
    v161 = 0;
    v162 = 0;
    v163 = 0;
    v164 = 0uLL;
    v165 = 0x200000000;
    v166 = 1;
    v167 = 0x2000000;
    v168 = 0x20000;
    v169 = 512;
    v170 = 1;
  }
  else
  {
    v163 = *((_QWORD *)v36 + 8);
    v164 = *((_OWORD *)v36 + 3);
    v171 = *((_QWORD *)v36 + 3);
    v162 = *((_QWORD *)v36 + 4);
    v161 = *((_QWORD *)v36 + 2);
    v160 = *(_QWORD *)v36;
    v169 = v171 & 0xFF00;
    v168 = v171 & 0xFFFF0000;
    v167 = v171 & 0xFF000000;
    v165 = v171 & 0xFFFFFFFF00000000;
    v166 = v171 & 1;
    v170 = v36[40] & 1;
  }
  *(_QWORD *)v36 = v160;
  *((_QWORD *)v36 + 1) = v159;
  *((_QWORD *)v36 + 2) = v161;
  *((_QWORD *)v36 + 3) = (unsigned __int16)v169 & 0xFF00 | *(_QWORD *)&v168 & 0xFF0000 | v166 | v167 & 0xFF000000 | v165 & 0xFF00000000;
  *((_QWORD *)v36 + 4) = v162;
  *((_QWORD *)v36 + 5) = v170;
  *((_OWORD *)v36 + 3) = v164;
  *((_QWORD *)v36 + 8) = v163;
  sub_100030F24((uint64_t)&v273, (uint64_t)&v271);
  type metadata accessor for CGColor(0);
  swift_dynamicCast(&v270, &v271, (char *)&type metadata for Any + 8, v172, 7);
  v173 = sub_10008CFB8(v270);
  v175 = v174;
  v177 = v176;
  sub_100035424(&v273);
  sub_100048F48(*((_QWORD *)v36 + 6), *((_QWORD *)v36 + 7), *((_QWORD *)v36 + 8));
  *((_QWORD *)v36 + 6) = v173;
  *((_QWORD *)v36 + 7) = v175;
  *((_QWORD *)v36 + 8) = v177;
LABEL_97:
  v178 = (uint64_t)v269;
  if (!*(_QWORD *)(a1 + 16))
  {
    v273 = 0u;
    v274 = 0u;
    goto LABEL_114;
  }
  v179 = ICTTAttributeNameParagraphStyle;
  v180 = sub_10005F9A0((uint64_t)v179);
  if ((v181 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v180, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (!*((_QWORD *)&v274 + 1))
  {
LABEL_114:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_112;
LABEL_115:
    v273 = 0u;
    v274 = 0u;
LABEL_121:
    sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60)(v178, 1, 1, v58);
LABEL_122:
    sub_100036060(v178, (uint64_t *)&unk_1000EC2E0);
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_120;
    goto LABEL_123;
  }
  v182 = sub_100036000(0, &qword_1000ECC78, ICTTParagraphStyle_ptr);
  if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, v182, 6) & 1) != 0)
  {
    v183 = (id)v271;
    v184 = v258;
    sub_100089D00(v183, v258);
    v255(v184, 0, 1, v256);
    sub_10004EFD0(v184, v257, &qword_1000ECC68);
    v185 = objc_msgSend(v183, "writingDirection");

    v186 = (unint64_t)v185 + 1;
    if (v185 == (id)3)
      v187 = 4;
    else
      v187 = 5;
    if (v186 >= 4)
      v188 = v187;
    else
      v188 = 0x2030100u >> (8 * v186);
    *((_BYTE *)v267 + v262) = v188;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_115;
LABEL_112:
  v189 = ICTTNSLinkAttributeName;
  v190 = sub_10005F9A0((uint64_t)v189);
  if ((v191 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v190, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (!*((_QWORD *)&v274 + 1))
    goto LABEL_121;
  v192 = swift_dynamicCast(v178, &v273, (char *)&type metadata for Any + 8, v58, 6);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v60)(v178, v192 ^ 1u, 1, v58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v263 + 48))(v178, 1, v58) == 1)
    goto LABEL_122;
  v193 = *(void (**)(char *, uint64_t, uint64_t))(v263 + 32);
  v194 = v259;
  v193(v259, v178, v58);
  v195 = v261;
  sub_100036060(v261, (uint64_t *)&unk_1000EC2E0);
  v193((char *)v195, (uint64_t)v194, v58);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v60)(v195, 0, 1, v58);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_120:
    v273 = 0u;
    v274 = 0u;
    goto LABEL_137;
  }
LABEL_123:
  v196 = ICTTNSWritingDirectionAttributeName;
  v197 = sub_10005F9A0((uint64_t)v196);
  if ((v198 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v197, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (*((_QWORD *)&v274 + 1))
  {
    if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v199 = v271 + 1;
      if ((_QWORD)v271 == 3)
        v200 = 4;
      else
        v200 = 5;
      if (v199 < 4)
        v200 = 0x2030100u >> (8 * v199);
      *((_BYTE *)v267 + v262) = v200;
    }
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_138;
    goto LABEL_135;
  }
LABEL_137:
  sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_138:
    v273 = 0u;
    v274 = 0u;
    goto LABEL_146;
  }
LABEL_135:
  v201 = ICTTAttributeNameEmphasis;
  v202 = sub_10005F9A0((uint64_t)v201);
  if ((v203 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v202, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

  if (*((_QWORD *)&v274 + 1))
  {
    if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v204 = ICEmphasisColorTypeForTag(v271);
      v205 = sub_10008D4D0(v204);
      *((_BYTE *)v267 + v260) = v205;
    }
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_147;
    goto LABEL_144;
  }
LABEL_146:
  sub_100036060((uint64_t)&v273, &qword_1000EB6E8);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_147:
    v273 = 0u;
    v274 = 0u;
    goto LABEL_150;
  }
LABEL_144:
  v206 = ICTTNSAttachmentAttributeName;
  v207 = sub_10005F9A0((uint64_t)v206);
  if ((v208 & 1) != 0)
  {
    sub_100030F24(*(_QWORD *)(a1 + 56) + 32 * v207, (uint64_t)&v273);
  }
  else
  {
    v273 = 0u;
    v274 = 0u;
  }

LABEL_150:
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v274 + 1))
  {

    v224 = &qword_1000EB6E8;
    v225 = &v273;
LABEL_161:
    sub_100036060((uint64_t)v225, v224);
    return;
  }
  v209 = sub_100036000(0, (unint64_t *)&qword_1000EBBC8, ICTTAttachment_ptr);
  if ((swift_dynamicCast(&v271, &v273, (char *)&type metadata for Any + 8, v209, 6) & 1) == 0)
    goto LABEL_174;
  v210 = (void *)v271;
  if (!objc_msgSend((id)objc_opt_self(ICTTAttachment), "isInlineAttachment:", (_QWORD)v271))
  {
    v226 = objc_msgSend(v210, "attachmentIdentifier");
    if (v226)
    {
      v227 = v226;
      v228 = static String._unconditionallyBridgeFromObjectiveC(_:)(v226);
      v230 = v229;

    }
    else
    {

      v228 = 0;
      v230 = 0;
    }
    v231 = v250;
    swift_bridgeObjectRelease(v250[1]);
    *v231 = v228;
    v231[1] = v230;
    return;
  }
  if (!v59)
  {
LABEL_169:
    if (qword_1000EB6C0 != -1)
      swift_once(&qword_1000EB6C0, sub_100085910);
    v232 = type metadata accessor for Logger(0);
    sub_10003609C(v232, (uint64_t)qword_1000ECC48);
    v233 = v210;
    v234 = Logger.logObject.getter(v233);
    v235 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v234, v235))
    {
      v236 = (uint8_t *)swift_slowAlloc(12, -1);
      v237 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v236 = 138412290;
      *(_QWORD *)&v273 = v233;
      v238 = v233;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, (char *)&v273 + 8, v236 + 4, v236 + 12);
      *v237 = v233;

      _os_log_impl((void *)&_mh_execute_header, v234, v235, "Cannot resolve inline attachment â€” skipping {attachment: %@}", v236, 0xCu);
      v239 = sub_100030EE4(&qword_1000ECC70);
      swift_arrayDestroy(v237, 1, v239);
      swift_slowDealloc(v237, -1, -1);
      swift_slowDealloc(v236, -1, -1);

    }
    else
    {

    }
LABEL_174:

    return;
  }
  v211 = v59;
  v212 = objc_msgSend(v210, "inlineAttachmentInContext:", v211);
  if (!v212)
  {

    goto LABEL_169;
  }
  v213 = v212;
  v214 = v246;
  sub_10008AD94(v213, v246);
  ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v46)(v214, 0, 1, v244);
  sub_10004EFD0((uint64_t)v214, v245, &qword_1000ECC60);
  if ((v247 & 1) != 0)
  {
    v215 = objc_msgSend(v213, "tokenContentIdentifier");
    if (v215)
    {
      v216 = v215;
      v217 = (id)NotesAppURLForNoteIdentifierOrTokenContentIdentifier();

      if (v217)
      {
        v218 = v242;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v217);

        v219 = v263;
        v220 = *(void (**)(char *, char *, uint64_t))(v263 + 32);
        v221 = (__int128 *)v243;
        v220(v243, v218, v58);
        ((void (*)(__int128 *, _QWORD, uint64_t, uint64_t))v60)(v221, 0, 1, v58);
        if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v219 + 48))(v221, 1, v58) != 1)
        {
          v222 = v241;
          v220(v241, (char *)v221, v58);
          v223 = v261;
          sub_100036060(v261, (uint64_t *)&unk_1000EC2E0);
          v220((char *)v223, v222, v58);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v60)(v223, 0, 1, v58);
          return;
        }
      }
      else
      {

        v221 = (__int128 *)v243;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v60)(v243, 1, 1, v58);
      }
      v224 = (uint64_t *)&unk_1000EC2E0;
      v225 = v221;
      goto LABEL_161;
    }
  }

}

uint64_t sub_100087218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  type metadata accessor for Key(0);
  v11 = v10;
  v12 = sub_100042114(&qword_1000EB788, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000B39D0);
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, v11, (char *)&type metadata for Any + 8, v12);
  v9(v13, a3, a4, a5);
  return swift_bridgeObjectRelease(v13);
}

id sub_1000872B8(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSUInteger *v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  NSUInteger v26;
  NSUInteger v27;
  NSUInteger v28;
  NSRange v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSRange v41;
  NSRange v42;

  v39 = a5;
  v40 = a6;
  v37 = a2;
  v38 = a3;
  v36 = a1;
  v14 = _s14descr1000DA611V16AttributedStringV9AttributeVMa(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (NSUInteger *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = objc_allocWithZone((Class)NSMutableAttributedString);
  swift_bridgeObjectRetain(a9);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a9);
  v20 = objc_msgSend(v18, "initWithString:", v19);

  v21 = *(_QWORD *)(a10 + 16);
  if (v21)
  {
    v22 = a10 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v35 = a4 & 0x101;
    v34 = *(_QWORD *)(v15 + 72);
    v32 = a10;
    swift_bridgeObjectRetain(a10);
    v33 = (char *)&type metadata for Any + 8;
    while (1)
    {
      sub_10004BAD4(v22, (uint64_t)v17, _s14descr1000DA611V16AttributedStringV9AttributeVMa);
      sub_100087500(v36, v37, v38, v35, v39, v40, a7);
      if (v10)
        break;
      v24 = v23;
      type metadata accessor for Key(0);
      sub_100042114(&qword_1000EB788, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000B39D0);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v24);
      v27 = *v17;
      v26 = v17[1];
      v42.location = (NSUInteger)objc_msgSend(v20, "ic_range");
      v42.length = v28;
      v41.location = v27;
      v41.length = v26;
      v29 = NSIntersectionRange(v41, v42);
      objc_msgSend(v20, "addAttributes:range:", isa, v29.location, v29.length);

      sub_100042220((uint64_t)v17, _s14descr1000DA611V16AttributedStringV9AttributeVMa);
      v22 += v34;
      if (!--v21)
        goto LABEL_7;
    }

    sub_100042220((uint64_t)v17, _s14descr1000DA611V16AttributedStringV9AttributeVMa);
LABEL_7:
    swift_bridgeObjectRelease(v32);
  }
  return v20;
}

void sub_100087500(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  _QWORD *v41;
  id v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  double v50;
  char v51;
  uint64_t v52;
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int *v69;
  unint64_t v70;
  _OWORD v71[2];
  __int128 v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  char v78;
  char v79;
  char v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  uint64_t v84;

  v58 = a6;
  v54 = a4;
  v56 = a3;
  v55 = a2;
  v61 = a1;
  v10 = sub_100030EE4(&qword_1000ECC60);
  __chkstk_darwin(v10);
  v64 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v62 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v65 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v13);
  v67 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v53[1] = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100030EE4(&qword_1000ECC68);
  __chkstk_darwin(v16);
  v18 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v19);
  v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for Date(0);
  v66 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v53[0] = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100030EE4(&qword_1000EBBA0);
  __chkstk_darwin(v23);
  v25 = (char *)v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = (int *)_s14descr1000DA611V16AttributedStringV9AttributeVMa(0);
  v30 = v7;
  v31 = (uint64_t *)(v7 + v69[7]);
  v32 = v31[1];
  v57 = a5;
  if (v32 == 1)
  {
    v33 = sub_100030060((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v34 = v31[8];
    v35 = *((_DWORD *)v31 + 10);
    v37 = v31[3];
    v36 = v31[4];
    v38 = v31[2];
    v74 = *v31;
    v75 = v32;
    v76 = v38;
    v77 = v37 & 0xFF01;
    v78 = BYTE2(v37);
    v79 = BYTE3(v37);
    v80 = BYTE4(v37);
    v81 = v36;
    v82 = v35 & 1;
    v83 = *((_OWORD *)v31 + 3);
    v84 = v34;
    v33 = (unint64_t)sub_100088A20();
  }
  v39 = v33;
  sub_100031044(v7 + v69[5], (uint64_t)v25, &qword_1000EBBA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_100036060((uint64_t)v25, &qword_1000EBBA0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v25, v26);
    v40 = (void *)ICTTAttributeNameReplicaID;
    v73 = (void *)v26;
    v41 = sub_10008D5D4(&v72);
    (*(void (**)(_QWORD *, char *, uint64_t))(v27 + 16))(v41, v29, v26);
    sub_100031034(&v72, v71);
    v42 = v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    v70 = v39;
    sub_1000604AC(v71, v42, isUniquelyReferenced_nonNull_native);
    v39 = v70;

    swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  }
  v44 = v30;
  v45 = v69;
  v46 = v59;
  sub_100031044(v30 + v69[6], (uint64_t)v21, &qword_1000EBA10);
  v47 = v66;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v21, 1, v46) == 1)
  {
    sub_100036060((uint64_t)v21, &qword_1000EBA10);
  }
  else
  {
    v48 = v53[0];
    (*(void (**)(_QWORD, char *, uint64_t))(v47 + 32))(v53[0], v21, v46);
    v49 = ICTTAttributeNameTimestamp;
    v50 = Date.timeIntervalSince1970.getter();
    v73 = &type metadata for Double;
    *(double *)&v72 = v50 + a7;
    sub_100031034(&v72, v71);
    v51 = swift_isUniquelyReferenced_nonNull_native(v39);
    v70 = v39;
    sub_1000604AC(v71, v49, v51);

    v45 = v69;
    swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v46);
  }
  sub_100031044(v44 + v45[8], (uint64_t)v18, &qword_1000ECC68);
  v52 = _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v18, 1, v52) == 1)
  {
    sub_100036060((uint64_t)v18, &qword_1000ECC68);
    __asm { BR              X11 }
  }
  sub_10008A080();
  sub_100042220((uint64_t)v18, _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa);
  __asm { BR              X10 }
}

void sub_100087AE4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;

  objc_msgSend(v0, "setWritingDirection:", 0);
  v3 = (void *)ICTTAttributeNameParagraphStyle;
  *(_QWORD *)(v2 - 168) = sub_100036000(0, &qword_1000ECC98, ICTTMutableParagraphStyle_ptr);
  *(_QWORD *)(v2 - 192) = v0;
  sub_100031034((_OWORD *)(v2 - 192), (_OWORD *)(v2 - 224));
  v4 = v3;
  v5 = v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v2 - 232) = v1;
  sub_1000604AC((_OWORD *)(v2 - 224), v4, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x100087C24);
}

void sub_100087AEC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v2 = (void *)ICTTNSWritingDirectionAttributeName;
  *(_QWORD *)(v1 - 168) = &type metadata for Int;
  *(_QWORD *)(v1 - 192) = 2;
  sub_100031034((_OWORD *)(v1 - 192), (_OWORD *)(v1 - 224));
  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  *(_QWORD *)(v1 - 232) = v0;
  sub_1000604AC(v1 - 224, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x100087C24);
}

void sub_100087AF4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v2 = (void *)ICTTNSWritingDirectionAttributeName;
  *(_QWORD *)(v1 - 168) = &type metadata for Int;
  *(_QWORD *)(v1 - 192) = 1;
  sub_100031034((_OWORD *)(v1 - 192), (_OWORD *)(v1 - 224));
  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  *(_QWORD *)(v1 - 232) = v0;
  sub_1000604AC(v1 - 224, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x100087C24);
}

void sub_100087B68()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t isUniquelyReferenced_nonNull_native;

  objc_msgSend(v0, "setWritingDirection:", 2);
  v3 = (void *)ICTTAttributeNameParagraphStyle;
  *(_QWORD *)(v2 - 168) = sub_100036000(0, &qword_1000ECC98, ICTTMutableParagraphStyle_ptr);
  *(_QWORD *)(v2 - 192) = v0;
  sub_100031034((_OWORD *)(v2 - 192), (_OWORD *)(v2 - 224));
  v4 = v3;
  v5 = v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v2 - 232) = v1;
  sub_1000604AC(v2 - 224, v4, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x100087C24);
}

void sub_100087B70()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t isUniquelyReferenced_nonNull_native;

  objc_msgSend(v0, "setWritingDirection:", 1);
  v3 = (void *)ICTTAttributeNameParagraphStyle;
  *(_QWORD *)(v2 - 168) = sub_100036000(0, &qword_1000ECC98, ICTTMutableParagraphStyle_ptr);
  *(_QWORD *)(v2 - 192) = v0;
  sub_100031034((_OWORD *)(v2 - 192), (_OWORD *)(v2 - 224));
  v4 = v3;
  v5 = v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v2 - 232) = v1;
  sub_1000604AC(v2 - 224, v4, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x100087C24);
}

void sub_100087B78()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t isUniquelyReferenced_nonNull_native;

  objc_msgSend(v0, "setWritingDirection:", 3);
  v3 = (void *)ICTTAttributeNameParagraphStyle;
  *(_QWORD *)(v2 - 168) = sub_100036000(0, &qword_1000ECC98, ICTTMutableParagraphStyle_ptr);
  *(_QWORD *)(v2 - 192) = v0;
  sub_100031034((_OWORD *)(v2 - 192), (_OWORD *)(v2 - 224));
  v4 = v3;
  v5 = v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v2 - 232) = v1;
  sub_1000604AC(v2 - 224, v4, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x100087C24);
}

void sub_100087B80()
{
  void *v0;

  objc_msgSend(v0, "writingDirection");
  JUMPOUT(0x100087B94);
}

uint64_t sub_1000880E8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7475626972747461;
  else
    return 1954047348;
}

uint64_t sub_10008811C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100030EE4(&qword_1000ED0D8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10004242C(a1, v12);
  v14 = sub_10009341C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV10CodingKeysON, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_100030EE4(&qword_1000ED0C0);
    v16 = sub_100093460(&qword_1000ED0E0, &qword_1000ED0E8, (uint64_t)&unk_1000B6C14, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100088288()
{
  char *v0;

  return sub_1000880E8(*v0);
}

uint64_t sub_100088290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000921F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000882B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009341C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000882DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009341C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100088304@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000889D8((uint64_t (*)(void))sub_1000922D4, a1);
}

uint64_t sub_100088320(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10008811C(a1, *v1, v1[1], v1[2]);
}

CGColorRef sub_10008833C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __CFString *v6;
  CGColorSpace *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  CGColorRef v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  _QWORD *v33;

  v6 = (__CFString *)String._bridgeToObjectiveC()();
  v7 = CGColorSpaceCreateWithName(v6);

  if (!v7)
  {
    if (qword_1000EB6C0 != -1)
      swift_once(&qword_1000EB6C0, sub_100085910);
    v15 = type metadata accessor for Logger(0);
    sub_10003609C(v15, (uint64_t)qword_1000ECC48);
    swift_bridgeObjectRetain_n(a2, 2);
    v16 = swift_bridgeObjectRetain_n(a3, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (_QWORD *)swift_slowAlloc(32, -1);
      v33 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain(a2);
      v32 = sub_10005F12C(a1, a2, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Cannot create color space with name â€” returning nil {name: %s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }
    return 0;
  }
  v8 = *(_QWORD *)(a3 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v33 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a3);
    sub_10003F2D8(0, v8, 0);
    v10 = 0;
    v9 = _swiftEmptyArrayStorage;
    v11 = _swiftEmptyArrayStorage[2];
    do
    {
      v12 = *(_QWORD *)(a3 + 8 * v10 + 32);
      v33 = v9;
      v13 = v9[3];
      if (v11 >= v13 >> 1)
      {
        sub_10003F2D8(v13 > 1, v11 + 1, 1);
        v9 = v33;
      }
      ++v10;
      v9[2] = v11 + 1;
      v9[v11++ + 4] = v12;
    }
    while (v8 != v10);
    swift_bridgeObjectRelease(a3);
  }
  v14 = CGColorCreate(v7, (const CGFloat *)v9 + 4);
  swift_bridgeObjectRelease(v9);
  if (!v14)
  {
    if (qword_1000EB6C0 != -1)
      swift_once(&qword_1000EB6C0, sub_100085910);
    v21 = type metadata accessor for Logger(0);
    sub_10003609C(v21, (uint64_t)qword_1000ECC48);
    swift_bridgeObjectRetain_n(a3, 2);
    v22 = swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (_QWORD *)swift_slowAlloc(32, -1);
      v33 = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = swift_bridgeObjectRetain(a3);
      v28 = Array.description.getter(v27, &type metadata for Double);
      v30 = v29;
      swift_bridgeObjectRelease(a3);
      v32 = sub_10005F12C(v28, v30, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Cannot create color with components â€” returning nil {components: %s}", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }

    return 0;
  }

  return v14;
}

uint64_t sub_1000887A4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E656E6F706D6F63;
  else
    return 0x6563617073;
}

uint64_t sub_1000887DC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100030EE4(&qword_1000ECF88);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10004242C(a1, v12);
  v14 = sub_100092784();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_100030EE4(&qword_1000ECF78);
    v16 = sub_1000927C8(&qword_1000ECF90, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100088940()
{
  char *v0;

  return sub_1000887A4(*v0);
}

uint64_t sub_100088948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000924BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008896C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092784();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088994(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092784();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000889BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000889D8((uint64_t (*)(void))sub_1000925A4, a1);
}

uint64_t sub_1000889D8@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100088A04(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000887DC(a1, *v1, v1[1], v1[2]);
}

void *sub_100088A20()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  void *v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  double v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  char v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  char v23;
  void *v24;
  id v25;
  void *v26;
  char v27;
  void *v28;
  id v29;
  void *v30;
  char v31;
  CGColorRef v32;
  CGColorRef v33;
  void *v34;
  void *v35;
  id v36;
  CGColor *v37;
  void *v38;
  char v39;
  _OWORD v41[2];
  __int128 v42;
  void *v43;
  void *v44;
  _BYTE v45[24];
  _BYTE v46[14];
  char v47;
  char v48;
  _BYTE v49[12];
  char v50;
  char v51;
  char v52;
  char v53;
  double v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;

  v1 = v0;
  v44 = &_swiftEmptyDictionarySingleton;
  sub_1000490E8(v0 + 25, (uint64_t)&v51, &qword_1000ECCA0);
  sub_1000490E8((uint64_t)&v51, (uint64_t)&v52, &qword_1000ECCA0);
  v2 = v52 & 1;
  sub_1000490E8(v0 + 26, (uint64_t)&v50, &qword_1000ECCA0);
  sub_1000490E8((uint64_t)&v50, (uint64_t)&v53, &qword_1000ECCA0);
  v3 = v2 & 0xFFFFFFFD | (2 * (v53 & 1));
  v4 = *(_QWORD *)(v0 + 8);
  if (v4)
  {
    sub_1000490E8(v0 + 16, (uint64_t)v49, &qword_1000ECCA8);
    sub_1000490E8((uint64_t)v49, (uint64_t)&v54, &qword_1000ECCA8);
    if ((v55 & 1) != 0)
    {
      v5 = objc_allocWithZone((Class)ICTTFont);
      swift_bridgeObjectRetain(v4);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      v7 = objc_msgSend(v5, "initWithName:size:hints:", v6, v3, 0.0);
    }
    else
    {
      v11 = v54;
      v12 = objc_allocWithZone((Class)ICTTFont);
      swift_bridgeObjectRetain(v4);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      v7 = objc_msgSend(v12, "initWithName:size:hints:", v6, v3, v11);
    }
    v13 = v7;

    v14 = (void *)ICTTAttributeNameFont;
    if (!v13)
      goto LABEL_14;
    goto LABEL_12;
  }
  sub_1000490E8(v0 + 16, (uint64_t)v49, &qword_1000ECCA8);
  sub_1000490E8((uint64_t)v49, (uint64_t)&v54, &qword_1000ECCA8);
  if ((v55 & 1) != 0)
  {
    if (!(_DWORD)v3)
      goto LABEL_15;
    v8 = (void *)ICTTAttributeNameFontHints;
    v43 = &type metadata for UInt32;
    LODWORD(v42) = v3;
    sub_100031034(&v42, v41);
    v9 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v60 = &_swiftEmptyDictionarySingleton;
    sub_1000604AC(v41, v9, isUniquelyReferenced_nonNull_native);
    v44 = v60;

    goto LABEL_13;
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)ICTTFont), "initWithName:size:hints:", 0, v3, v54);
  v14 = (void *)ICTTAttributeNameFont;
  if (v15)
  {
    v13 = v15;
LABEL_12:
    v43 = (void *)sub_100036000(0, &qword_1000ECC80, ICTTFont_ptr);
    *(_QWORD *)&v42 = v13;
    sub_100031034(&v42, v41);
    v16 = v14;
    v17 = v13;
    v18 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v60 = &_swiftEmptyDictionarySingleton;
    sub_1000604AC(v41, v16, v18);
    v44 = v60;

LABEL_13:
    swift_bridgeObjectRelease(0x8000000000000000);
    goto LABEL_15;
  }
LABEL_14:
  v19 = v14;
  sub_100059268((uint64_t)v19, v41);

  sub_100036060((uint64_t)v41, &qword_1000EB6E8);
LABEL_15:
  sub_1000490E8(v0 + 27, (uint64_t)&v48, &qword_1000ECCA0);
  sub_1000490E8((uint64_t)&v48, (uint64_t)&v56, &qword_1000ECCA0);
  if ((v56 & 1) != 0)
  {
    v20 = (void *)ICTTAttributeNameUnderline;
    v43 = &type metadata for Bool;
    LOBYTE(v42) = 1;
    sub_100031034(&v42, v41);
    v21 = v20;
    v22 = v44;
    v23 = swift_isUniquelyReferenced_nonNull_native(v44);
    v60 = v22;
    sub_1000604AC(v41, v21, v23);
    v44 = v60;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_1000490E8(v1 + 28, (uint64_t)&v47, &qword_1000ECCA0);
  sub_1000490E8((uint64_t)&v47, (uint64_t)&v57, &qword_1000ECCA0);
  if ((v57 & 1) != 0)
  {
    v24 = (void *)ICTTAttributeNameStrikethrough;
    v43 = &type metadata for Bool;
    LOBYTE(v42) = 1;
    sub_100031034(&v42, v41);
    v25 = v24;
    v26 = v44;
    v27 = swift_isUniquelyReferenced_nonNull_native(v44);
    v60 = v26;
    sub_1000604AC(v41, v25, v27);
    v44 = v60;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_1000490E8(v1 + 32, (uint64_t)v46, &qword_1000ECCB0);
  sub_1000490E8((uint64_t)v46, (uint64_t)&v58, &qword_1000ECCB0);
  if ((v59 & 1) == 0)
  {
    v28 = (void *)ICTTAttributeNameSuperscript;
    v43 = &type metadata for Int;
    *(_QWORD *)&v42 = v58;
    sub_100031034(&v42, v41);
    v29 = v28;
    v30 = v44;
    v31 = swift_isUniquelyReferenced_nonNull_native(v44);
    v60 = v30;
    sub_1000604AC(v41, v29, v31);
    v44 = v60;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_1000490E8(v1 + 48, (uint64_t)v45, &qword_1000ECCB8);
  sub_1000490E8((uint64_t)v45, (uint64_t)&v60, &qword_1000ECCB8);
  if (v61)
  {
    v32 = sub_10008833C((uint64_t)v60, v61, v62);
    if (v32)
    {
      v33 = v32;
      v34 = (void *)ICTTAttributeNameForegroundColor;
      type metadata accessor for CGColor(0);
      v43 = v35;
      *(_QWORD *)&v42 = v33;
      sub_100031034(&v42, v41);
      v36 = v34;
      v37 = v33;
      v38 = v44;
      v39 = swift_isUniquelyReferenced_nonNull_native(v44);
      sub_1000604AC(v41, v36, v39);
      v44 = v38;

      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  return v44;
}

uint64_t sub_100088FB8(char a1)
{
  return *(_QWORD *)&aName_0[8 * a1];
}

uint64_t sub_100088FD8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  char v25;
  _BYTE v26[24];
  _BYTE v27[24];

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ED0A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100093350();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v26[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v26, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = *((unsigned __int8 *)v3 + 24);
    v26[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v26, v5);
    v16 = *((unsigned __int8 *)v3 + 25);
    v26[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v26, v5);
    v17 = *((unsigned __int8 *)v3 + 26);
    v26[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v26, v5);
    v18 = *((unsigned __int8 *)v3 + 27);
    v26[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v26, v5);
    v19 = *((unsigned __int8 *)v3 + 28);
    v26[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v26, v5);
    v20 = v3[4];
    v21 = *((unsigned __int8 *)v3 + 40);
    v26[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v26, v5);
    sub_1000490E8((uint64_t)(v3 + 6), (uint64_t)v27, &qword_1000ECCB8);
    sub_1000490E8((uint64_t)v27, (uint64_t)v26, &qword_1000ECCB8);
    v25 = 7;
    v22 = sub_1000933D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v25, v5, &_s14descr1000DA611V16AttributedStringV5ColorVN, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10008921C()
{
  char *v0;

  return sub_100088FB8(*v0);
}

uint64_t sub_100089224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100092CB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100089248(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100093350();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100089270(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100093350();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100089298@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_100092FE4(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1000892E8(_QWORD *a1)
{
  return sub_100088FD8(a1);
}

uint64_t sub_100089328(char a1)
{
  return *(_QWORD *)&aPurple_3[8 * a1];
}

uint64_t sub_100089348(char *a1, char *a2)
{
  return sub_100036940(*a1, *a2);
}

Swift::Int sub_100089354()
{
  char *v0;

  return sub_100053ECC(*v0);
}

uint64_t sub_10008935C(uint64_t a1)
{
  char *v1;

  return sub_1000545C8(a1, *v1);
}

Swift::Int sub_100089364(uint64_t a1)
{
  char *v1;

  return sub_1000546AC(a1, *v1);
}

unint64_t sub_10008936C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000D6F10;
  result = sub_1000944C0(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000893A0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100089328(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000893C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100094D54();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100089424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100094D54();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100089470(char a1)
{
  return *(_QWORD *)&aTitle_7[8 * a1];
}

uint64_t sub_100089490(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100089470(*a1);
  v5 = v4;
  v6 = sub_100089470(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100089518()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100089470(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100089578(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100089470(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000895B8(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100089470(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100089614@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100094044(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100089640@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100089470(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100089668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100094438();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000896C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100094438();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100089710(char a1)
{
  return *(_QWORD *)&aLeft_4[8 * a1];
}

uint64_t sub_100089730(char *a1, char *a2)
{
  return sub_1000369C4(*a1, *a2);
}

Swift::Int sub_10008973C()
{
  char *v0;

  return sub_100053F34(*v0);
}

uint64_t sub_100089744(uint64_t a1)
{
  char *v1;

  return sub_100054608(a1, *v1);
}

Swift::Int sub_10008974C(uint64_t a1)
{
  char *v1;

  return sub_100054648(a1, *v1);
}

unint64_t sub_100089754@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000D70B8;
  result = sub_1000944C0(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100089788@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100089710(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000897B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009447C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10008980C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009447C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100089858(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656E6F447369;
  else
    return 0x696669746E656469;
}

uint64_t sub_100089890(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ECFA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100092828();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON, v11, v9, v10);
  v18 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100042114(&qword_1000EBD70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v14 = *(unsigned __int8 *)(v3 + *(int *)(_s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0) + 20));
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v17, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000899E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD *, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v29 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  v33 = v5;
  __chkstk_darwin(v4);
  v30 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_100030EE4(&qword_1000ECF98);
  v7 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10004242C(a1, v14);
  v15 = sub_100092828();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON, v15, v14, v13);
  if (v2)
    return sub_100035424(a1);
  v27 = v10;
  v28 = v12;
  v16 = v7;
  v17 = v33;
  v35 = 0;
  v18 = sub_100042114(&qword_1000EBDE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v30;
  v20 = v31;
  v21 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v32, &v35, v31, v32, v18);
  v22 = *(void (**)(char *, _QWORD *, uint64_t))(v17 + 32);
  v23 = (uint64_t)v28;
  v22(v28, v19, v21);
  v34 = 1;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v20);
  *(_BYTE *)(v23 + *(int *)(v27 + 20)) = v24 & 1;
  sub_10004BAD4(v23, v29, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa);
  sub_100035424(a1);
  return sub_100042220(v23, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa);
}

uint64_t sub_100089C5C()
{
  char *v0;

  return sub_100089858(*v0);
}

uint64_t sub_100089C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009408C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100089C88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092828();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100089CB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092828();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100089CD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000899E0(a1, a2);
}

uint64_t sub_100089CEC(_QWORD *a1)
{
  return sub_100089890(a1);
}

uint64_t sub_100089D00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  char v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v4 = sub_100030EE4(&qword_1000EBBA0);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000ECC88);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  v11 = a2 + v10[8];
  v12 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v37 = v11;
  v36(v11, 1, 1, v12);
  v13 = a2 + v10[9];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a2 + v10[10];
  v15 = type metadata accessor for UUID(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v38 = v14;
  v16(v14, 1, 1, v15);
  v17 = sub_10008D290((int)objc_msgSend(a1, "style"));
  if (v17 == 10)
    v18 = 3;
  else
    v18 = v17;
  *(_BYTE *)a2 = v18;
  v19 = sub_10008D3F8((unint64_t)objc_msgSend(a1, "alignment"));
  if (v19 == 5)
    v20 = 4;
  else
    v20 = v19;
  *(_BYTE *)(a2 + 1) = v20;
  *(_QWORD *)(a2 + 8) = objc_msgSend(a1, "indent");
  v21 = sub_100089470(v18);
  v23 = v22;
  if (v21 == 0x44455245424D554ELL && v22 == 0xED00005453494C5FLL)
  {
    swift_bridgeObjectRelease(0xED00005453494C5FLL);
LABEL_11:
    v25 = objc_msgSend(a1, "startingItemNumber");
    v26 = 0;
    goto LABEL_13;
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x44455245424D554ELL, 0xED00005453494C5FLL, 0);
  swift_bridgeObjectRelease(v23);
  if ((v24 & 1) != 0)
    goto LABEL_11;
  v25 = 0;
  v26 = 1;
LABEL_13:
  *(_QWORD *)(a2 + 16) = v25;
  *(_BYTE *)(a2 + 24) = v26;
  v27 = objc_msgSend(a1, "todo");
  if (v27)
  {
    v28 = v27;
    v29 = objc_msgSend(v28, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

    LOBYTE(v29) = objc_msgSend(v28, "done");
    v9[*(int *)(v12 + 20)] = (char)v29;
    v36((uint64_t)v9, 0, 1, v12);

  }
  else
  {
    v36((uint64_t)v9, 1, 1, v12);
  }
  sub_10004EFD0((uint64_t)v9, v37, &qword_1000ECC88);
  *(_QWORD *)v13 = objc_msgSend(a1, "blockQuoteLevel");
  *(_BYTE *)(v13 + 8) = 0;
  v30 = objc_msgSend(a1, "uuid");
  if (v30)
  {
    v31 = v30;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    v32 = 0;
  }
  else
  {
    v32 = 1;
  }
  v33 = v38;

  v16((uint64_t)v6, v32, 1, v15);
  return sub_10004EFD0((uint64_t)v6, v33, &qword_1000EBBA0);
}

id sub_10008A080()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  int *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  Class isa;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v22;

  v1 = v0;
  v2 = sub_100030EE4(&qword_1000EBBA0);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100030EE4(&qword_1000ECC88);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(ICTTMutableParagraphStyle), "paragraphStyleNamed:", dword_1000B7C50[*v1]);
  objc_msgSend(v8, "setAlignment:", v1[1]);
  objc_msgSend(v8, "setIndent:", *((_QWORD *)v1 + 1));
  if (v1[24] == 1)
    v9 = objc_msgSend(v8, "startingItemNumber");
  else
    v9 = (id)*((_QWORD *)v1 + 2);
  objc_msgSend(v8, "setStartingItemNumber:", v9);
  v10 = (int *)_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  sub_100031044((uint64_t)&v1[v10[8]], (uint64_t)v7, &qword_1000ECC88);
  v11 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v7, 1, v11) == 1)
  {
    sub_100036060((uint64_t)v7, &qword_1000ECC88);
    v12 = 0;
  }
  else
  {
    v13 = v7[*(int *)(v11 + 20)];
    v14 = objc_allocWithZone((Class)ICTTTodo);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v12 = objc_msgSend(v14, "initWithIdentifier:done:", isa, v13);

    sub_100042220((uint64_t)v7, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa);
  }
  objc_msgSend(v8, "setTodo:", v12);

  v16 = &v1[v10[9]];
  if (v16[8])
    v17 = 0;
  else
    v17 = *(_QWORD *)v16;
  objc_msgSend(v8, "setBlockQuoteLevel:", v17);
  sub_100031044((uint64_t)&v1[v10[10]], (uint64_t)v4, &qword_1000EBBA0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v4, 1, v18) != 1)
  {
    v20 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v18);
  }
  objc_msgSend(v8, "setUuid:", v20);

  return v8;
}

uint64_t sub_10008A334(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10008A36C + 4 * byte_1000B69D0[a1]))(0xD000000000000012, 0x80000001000B1250);
}

uint64_t sub_10008A36C()
{
  return 1701667182;
}

uint64_t sub_10008A37C()
{
  return 0x6E656D6E67696C61;
}

uint64_t sub_10008A398()
{
  return 0x746E65646E69;
}

uint64_t sub_10008A3AC()
{
  return 0x73696C6B63656863;
}

uint64_t sub_10008A3D0()
{
  return 0x6F75516B636F6C62;
}

uint64_t sub_10008A3F4()
{
  return 1684632949;
}

uint64_t sub_10008A404(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ECFD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10009286C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON, v11, v9, v10);
  v36 = *v3;
  v35 = 0;
  v12 = sub_100092938();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v35, v5, &_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesON, v12);
  if (!v2)
  {
    v34 = v3[1];
    v33 = 1;
    v13 = sub_10009297C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v5, &_s14descr1000DA611V16AttributedStringV10AlignmentsON, v13);
    v14 = *((_QWORD *)v3 + 1);
    v32 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v32, v5);
    v15 = *((_QWORD *)v3 + 2);
    v16 = v3[24];
    v31 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v31, v5);
    v17 = (int *)_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
    v18 = &v3[v17[8]];
    v30 = 4;
    v19 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
    v20 = sub_100042114(&qword_1000ECFF0, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa, (uint64_t)&unk_1000B6D04);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v30, v5, v19, v20);
    v21 = (uint64_t *)&v3[v17[9]];
    v22 = *v21;
    v23 = *((unsigned __int8 *)v21 + 8);
    v29 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v29, v5);
    v24 = &v3[v17[10]];
    HIBYTE(v28) = 6;
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100042114(&qword_1000EBD70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, (char *)&v28 + 7, v5, v25, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10008A69C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;

  v39 = a2;
  v3 = sub_100030EE4(&qword_1000EBBA0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100030EE4(&qword_1000ECC88);
  __chkstk_darwin(v5);
  v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100030EE4(&qword_1000ECFB0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v12 + 2) = 0;
  v12[24] = 1;
  v13 = (uint64_t)&v12[*(int *)(v10 + 32)];
  v14 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v46 = v13;
  v15(v13, 1, 1, v14);
  v16 = &v12[*(int *)(v9 + 36)];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v17 = (uint64_t)&v12[*(int *)(v9 + 40)];
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v45 = v17;
  v19(v17, 1, 1, v18);
  v21 = a1[3];
  v20 = a1[4];
  v47 = a1;
  sub_10004242C(a1, v21);
  v22 = sub_10009286C();
  v44 = v8;
  v23 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON, v22, v21, v20);
  if (v23)
  {
    v30 = v46;
    v31 = v45;
    sub_100035424(v47);
    sub_100036060(v30, &qword_1000ECC88);
    return sub_100036060(v31, &qword_1000EBBA0);
  }
  else
  {
    v24 = v41;
    v25 = (uint64_t)v42;
    BYTE1(v55) = 0;
    v26 = sub_1000928B0();
    v27 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v55 + 2), &_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesON, (char *)&v55 + 1, v43, &_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesON, v26);
    *v12 = BYTE2(v55);
    v54 = 1;
    v28 = sub_1000928F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &_s14descr1000DA611V16AttributedStringV10AlignmentsON, &v54, v27, &_s14descr1000DA611V16AttributedStringV10AlignmentsON, v28);
    v12[1] = v55;
    v53 = 2;
    *((_QWORD *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v53, v27);
    v52 = 3;
    *((_QWORD *)v12 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v27);
    v12[24] = v29 & 1;
    v51 = 4;
    sub_100042114(&qword_1000ECFD0, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa, (uint64_t)&unk_1000B6D2C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, &v51, v27, v14);
    sub_10004EFD0(v25, v46, &qword_1000ECC88);
    v50 = 5;
    *(_QWORD *)v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v27);
    v16[8] = v32 & 1;
    v49 = 6;
    sub_100042114(&qword_1000EBDE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33 = v24;
    v34 = (uint64_t)v40;
    v35 = v44;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v49, v27, v18);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v27);
    v36 = v47;
    sub_10004EFD0(v34, v45, &qword_1000EBBA0);
    sub_10004BAD4((uint64_t)v12, v39, _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa);
    sub_100035424(v36);
    return sub_100042220((uint64_t)v12, _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa);
  }
}

uint64_t sub_10008AB1C()
{
  unsigned __int8 *v0;

  return sub_10008A334(*v0);
}

uint64_t sub_10008AB24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100094174(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008AB48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009286C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008AB70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009286C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008AB98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008A69C(a1, a2);
}

uint64_t sub_10008ABAC(_QWORD *a1)
{
  return sub_10008A404(a1);
}

uint64_t sub_10008ABC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10008ABF8 + 4 * byte_1000B69D7[a1]))(0xD000000000000016, 0x80000001000B0010);
}

uint64_t sub_10008ABF8()
{
  return 0x4C41525554414ELL;
}

uint64_t sub_10008AC10()
{
  return 0x5F4F545F5446454CLL;
}

uint64_t sub_10008AC34()
{
  return 0x4F545F5448474952;
}

void sub_10008AC6C(char *a1)
{
  sub_100036794(*a1);
}

void sub_10008AC78()
{
  char *v0;

  sub_100053F9C(*v0);
}

void sub_10008AC80(uint64_t a1)
{
  char *v1;

  sub_1000544FC(a1, *v1);
}

void sub_10008AC88(uint64_t a1)
{
  char *v1;

  sub_100054710(a1, *v1);
}

uint64_t sub_10008AC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100094D98();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10008ACEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100094D98();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10008AD38@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000D7150;
  result = sub_1000944C0(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10008AD6C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10008ABC0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10008AD94@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;

  v4 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v8 = (uint64_t)a2 + v7[6];
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v38 = v8;
  v10(v8, 1, 1, v9);
  v11 = (uint64_t *)((char *)a2 + v7[7]);
  *v11 = 0;
  v11[1] = 0;
  v12 = (uint64_t *)((char *)a2 + v7[8]);
  *v12 = 0;
  v12[1] = 0;
  v13 = objc_msgSend(a1, "typeUTI");
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  *a2 = v15;
  a2[1] = v17;
  v18 = objc_msgSend(a1, "identifier");
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0xE000000000000000;
  }
  a2[2] = v20;
  a2[3] = v22;
  v23 = objc_msgSend(a1, "creationDate");
  if (v23)
  {
    v24 = v23;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  v10((uint64_t)v6, v25, 1, v9);
  sub_10004EFD0((uint64_t)v6, v38, &qword_1000EBA10);
  v26 = objc_msgSend(a1, "tokenContentIdentifier");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  swift_bridgeObjectRelease(v11[1]);
  *v11 = v28;
  v11[1] = v30;
  v31 = objc_msgSend(a1, "altText");
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

  }
  else
  {

    v33 = 0;
    v35 = 0;
  }
  result = swift_bridgeObjectRelease(v12[1]);
  *v12 = v33;
  v12[1] = v35;
  return result;
}

void *sub_10008AFE0(uint64_t a1, uint64_t a2, __int16 a3, char *a4, uint64_t a5, double a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t ObjectType;
  uint64_t v23;
  void *v24;
  void *v25;
  NSString v26;
  id v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  NSDate v33;
  uint64_t v34;
  Class isa;
  NSString v36;
  NSString v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;

  v41 = a5;
  v7 = v6;
  v40 = a4;
  v12 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v39 - v20;
  ObjectType = swift_getObjectType(a1);
  v23 = (uint64_t)v42;
  v24 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t, uint64_t, double))(a2 + 48))(v7[2], v7[3], a3 & 0x101, v40, v41, ObjectType, a2, a6);
  v25 = v24;
  if (!v23)
  {
    v41 = 0;
    v42 = v14;
    v40 = v19;
    v26 = (NSString)v7[1];
    v27 = v24;
    if (v26)
      v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "setTypeUTI:", v26);

    v28 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
    v29 = (uint64_t)v42;
    sub_100031044((uint64_t)v7 + v28[6], (uint64_t)v42, &qword_1000EBA10);
    v30 = v15;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v29, 1, v15) == 1)
    {
      v31 = v40;
      Date.init()();
      sub_100036060(v29, &qword_1000EBA10);
    }
    else
    {
      v31 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v40, v29, v30);
    }
    static Date.+ infix(_:_:)(v31, a6);
    v32 = *(void (**)(char *, uint64_t))(v16 + 8);
    v32(v31, v30);
    v33.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v34 = v30;
    isa = v33.super.isa;
    v32(v21, v34);
    objc_msgSend(v25, "setCreationDate:", isa);

    if (*(_QWORD *)((char *)v7 + v28[7] + 8))
      v36 = String._bridgeToObjectiveC()();
    else
      v36 = 0;
    objc_msgSend(v25, "setTokenContentIdentifier:", v36);

    if (*(_QWORD *)((char *)v7 + v28[8] + 8))
      v37 = String._bridgeToObjectiveC()();
    else
      v37 = 0;
    objc_msgSend(v25, "setAltText:", v37);

  }
  return v25;
}

uint64_t sub_10008B2A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10008B2E0 + 4 * byte_1000B69DC[a1]))(0xD000000000000018, 0x80000001000B0E50);
}

uint64_t sub_10008B2E0()
{
  return 0x696669746E656469;
}

uint64_t sub_10008B2FC()
{
  return 0x4164657461657263;
}

unint64_t sub_10008B318()
{
  return 0xD000000000000011;
}

uint64_t sub_10008B334()
{
  return 0x74786554746C61;
}

uint64_t sub_10008B34C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ED008);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_1000929C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v32 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v31 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v31, v5);
    v16 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
    v17 = (char *)v3 + v16[6];
    v30 = 2;
    v18 = type metadata accessor for Date(0);
    v19 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v30, v5, v18, v19);
    v20 = (uint64_t *)((char *)v3 + v16[7]);
    v21 = *v20;
    v22 = v20[1];
    v29 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v29, v5);
    v23 = (uint64_t *)((char *)v3 + v16[8]);
    v24 = *v23;
    v25 = v23[1];
    v28 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v28, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10008B52C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v40 = a2;
  v3 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100030EE4(&qword_1000ECFF8);
  v6 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v12 = 0;
  v12[1] = 0;
  v13 = (char *)v12 + *(int *)(v10 + 24);
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v45 = (uint64_t)v13;
  v15(v13, 1, 1, v14);
  v16 = (_QWORD *)((char *)v12 + *(int *)(v9 + 28));
  *v16 = 0;
  v16[1] = 0;
  v42 = v16;
  v43 = a1;
  v17 = (_QWORD *)((char *)v12 + *(int *)(v9 + 32));
  *v17 = 0;
  v17[1] = 0;
  v44 = v17;
  v18 = a1[3];
  v19 = a1[4];
  sub_10004242C(a1, v18);
  v20 = sub_1000929C0();
  v21 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON, v20, v18, v19);
  if (v21)
  {
    v23 = v44;
    v24 = v45;
    v25 = v42;
    sub_100035424(v43);
    swift_bridgeObjectRelease(v12[1]);
    sub_100036060(v24, &qword_1000EBA10);
    swift_bridgeObjectRelease(v25[1]);
    return swift_bridgeObjectRelease(v23[1]);
  }
  else
  {
    v51 = 0;
    v22 = v41;
    *v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v41);
    v12[1] = v26;
    v50 = 1;
    v27 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v22);
    v28 = v45;
    v12[2] = v27;
    v12[3] = v29;
    v49 = 2;
    sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, &v49, v22, v14);
    sub_10004EFD0((uint64_t)v5, v28, &qword_1000EBA10);
    v48 = 3;
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v22);
    v32 = v31;
    v33 = v42;
    swift_bridgeObjectRelease(v42[1]);
    *v33 = v30;
    v33[1] = v32;
    v47 = 4;
    v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v22);
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
    v37 = v44;
    swift_bridgeObjectRelease(v44[1]);
    *v37 = v34;
    v37[1] = v36;
    sub_10004BAD4((uint64_t)v12, v40, _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa);
    sub_100035424(v43);
    return sub_100042220((uint64_t)v12, _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa);
  }
}

uint64_t sub_10008B8CC()
{
  unsigned __int8 *v0;

  return sub_10008B2A4(*v0);
}

uint64_t sub_10008B8D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100094504(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008B8F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000929C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B920(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000929C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B948@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008B52C(a1, a2);
}

uint64_t sub_10008B95C(_QWORD *a1)
{
  return sub_10008B34C(a1);
}

uint64_t sub_10008B970(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6874676E656CLL;
  else
    return 0x7441737472617473;
}

uint64_t sub_10008B9A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_100030EE4(&qword_1000ED1E8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10004242C(a1, v11);
  v13 = sub_100094D10();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v7);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10008BAC0()
{
  char *v0;

  return sub_10008B970(*v0);
}

uint64_t sub_10008BAC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100094718(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008BAEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100094D10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008BB14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100094D10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008BB3C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1000947F8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10008BB64(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10008B9A4(a1, *v1, v1[1]);
}

uint64_t sub_10008BB7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10008BBB4 + 4 * byte_1000B69E1[a1]))(0xD000000000000010, 0x80000001000B1290);
}

uint64_t sub_10008BBB4()
{
  return 0x65676E6172;
}

uint64_t sub_10008BBC8()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10008BBE4()
{
  return 1953394534;
}

uint64_t sub_10008BBF4()
{
  return 0x7061726761726170;
}

uint64_t sub_10008BC18()
{
  return 0x7369736168706D65;
}

uint64_t sub_10008BC3C()
{
  return 1802398060;
}

uint64_t sub_10008BC7C(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v40[4];
  uint64_t v41;
  char v42;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ED050);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100092A04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON, v11, v9, v10);
  v40[0] = *v3;
  v42 = 0;
  v12 = sub_100092BA4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v40, &v42, v5, &_s14descr1000DA611V16AttributedStringV14AttributeRangeVN, v12);
  if (!v2)
  {
    v13 = (int *)_s14descr1000DA611V16AttributedStringV9AttributeVMa(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v40[0]) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100042114(&qword_1000EBD70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, v40, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v40[0]) = 2;
    v18 = type metadata accessor for Date(0);
    v19 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, v40, v5, v18, v19);
    v20 = (char *)v3 + v13[7];
    v21 = *((_QWORD *)v20 + 8);
    v22 = *((_OWORD *)v20 + 1);
    v40[0] = *(_OWORD *)v20;
    v40[1] = v22;
    v23 = *((_OWORD *)v20 + 3);
    v40[2] = *((_OWORD *)v20 + 2);
    v40[3] = v23;
    v41 = v21;
    v42 = 3;
    v24 = sub_100092BE8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v42, v5, &_s14descr1000DA611V16AttributedStringV4FontVN, v24);
    v25 = (char *)v3 + v13[8];
    LOBYTE(v40[0]) = 4;
    v26 = _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
    v27 = sub_100042114(&qword_1000ED068, _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa, (uint64_t)&unk_1000B6CB4);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, v40, v5, v26, v27);
    LOBYTE(v40[0]) = *((_BYTE *)v3 + v13[9]);
    v42 = 5;
    v28 = sub_100092C2C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v42, v5, &_s14descr1000DA611V16AttributedStringV13EmphasisStyleON, v28);
    v29 = (char *)v3 + v13[10];
    LOBYTE(v40[0]) = 6;
    v30 = type metadata accessor for URL(0);
    v31 = sub_100042114(&qword_1000EC690, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, v40, v5, v30, v31);
    LOBYTE(v40[0]) = *((_BYTE *)v3 + v13[11]);
    v42 = 7;
    v32 = sub_100092C70();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v42, v5, &_s14descr1000DA611V16AttributedStringV17WritingDirectionsON, v32);
    v33 = (uint64_t *)((char *)v3 + v13[12]);
    v34 = *v33;
    v35 = v33[1];
    LOBYTE(v40[0]) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, v40, v5);
    v36 = (char *)v3 + v13[13];
    LOBYTE(v40[0]) = 9;
    v37 = _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
    v38 = sub_100042114(&qword_1000ED080, _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa, (uint64_t)&unk_1000B6C64);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, v40, v5, v37, v38);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10008C07C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  _OWORD v86[4];
  uint64_t v87;
  char v88;

  v85 = a1;
  v66 = a2;
  v2 = sub_100030EE4(&qword_1000ECC60);
  __chkstk_darwin(v2);
  v67 = (uint64_t)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  __chkstk_darwin(v4);
  v69 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100030EE4(&qword_1000ECC68);
  __chkstk_darwin(v6);
  v74 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v8);
  *(_QWORD *)&v73 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100030EE4(&qword_1000EBBA0);
  __chkstk_darwin(v10);
  *(_QWORD *)&v72 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100030EE4(&qword_1000ED010);
  v71 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v84 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)_s14descr1000DA611V16AttributedStringV9AttributeVMa(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t)&v16[*(int *)(v14 + 20)];
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v77 = v17;
  *(_QWORD *)&v70 = v18;
  v19(v17, 1, 1);
  v20 = (uint64_t)&v16[v13[6]];
  v21 = type metadata accessor for Date(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v83 = v20;
  v22(v20, 1, 1, v21);
  v23 = &v16[v13[7]];
  *(_OWORD *)v23 = xmmword_1000B4D80;
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *((_OWORD *)v23 + 3) = 0u;
  v76 = (uint64_t *)v23;
  *((_QWORD *)v23 + 8) = 0;
  v24 = (uint64_t)&v16[v13[8]];
  v25 = _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v82 = v24;
  v26(v24, 1, 1, v25);
  v68 = v13[9];
  v16[v68] = 5;
  v27 = (uint64_t)&v16[v13[10]];
  v28 = type metadata accessor for URL(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v81 = v27;
  v29(v27, 1, 1, v28);
  v30 = v13[11];
  v16[v30] = 5;
  v31 = &v16[v13[12]];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  v80 = v31;
  v32 = (uint64_t)&v16[v13[13]];
  v33 = _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  v78 = v32;
  v34(v32, 1, 1, v33);
  v36 = v85[3];
  v35 = v85[4];
  sub_10004242C(v85, v36);
  v37 = sub_100092A04();
  v38 = v79;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON, v37, v36, v35);
  if (v38)
  {
    v44 = v77;
    v45 = v83;
    v46 = v76;
    sub_100035424(v85);
    sub_100036060(v44, &qword_1000EBBA0);
    sub_100036060(v45, &qword_1000EBA10);
    sub_100092A48(*v46, v46[1], v46[2], v46[3], v46[4], v46[5], v46[6], v46[7], v46[8]);
    sub_100036060(v82, &qword_1000ECC68);
    sub_100036060(v81, (uint64_t *)&unk_1000EC2E0);
    swift_bridgeObjectRelease(*((_QWORD *)v80 + 1));
    return sub_100036060(v78, &qword_1000ECC60);
  }
  else
  {
    v39 = v72;
    v79 = v25;
    v40 = v73;
    v65 = v16;
    v64 = v28;
    v63 = v30;
    v62 = v33;
    v41 = (uint64_t)v74;
    v42 = v71;
    v88 = 0;
    v43 = sub_100092A94();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v86, &_s14descr1000DA611V16AttributedStringV14AttributeRangeVN, &v88, v75, &_s14descr1000DA611V16AttributedStringV14AttributeRangeVN, v43);
    *v65 = v86[0];
    LOBYTE(v86[0]) = 1;
    sub_100042114(&qword_1000EBDE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v70, v86, v75, v70);
    sub_10004EFD0(v39, v77, &qword_1000EBBA0);
    LOBYTE(v86[0]) = 2;
    sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, v86, v75, v21);
    sub_10004EFD0(v40, v83, &qword_1000EBA10);
    v88 = 3;
    sub_100092AD8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14descr1000DA611V16AttributedStringV4FontVN, &v88, v75, &_s14descr1000DA611V16AttributedStringV4FontVN);
    v47 = v76;
    v73 = v86[0];
    v72 = v86[1];
    v70 = v86[2];
    v61 = v86[3];
    v48 = v87;
    sub_100092A48(*v76, v76[1], v76[2], v76[3], v76[4], v76[5], v76[6], v76[7], v76[8]);
    v49 = v72;
    *(_OWORD *)v47 = v73;
    *((_OWORD *)v47 + 1) = v49;
    v50 = v61;
    *((_OWORD *)v47 + 2) = v70;
    *((_OWORD *)v47 + 3) = v50;
    v47[8] = v48;
    LOBYTE(v86[0]) = 4;
    sub_100042114(&qword_1000ED030, _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa, (uint64_t)&unk_1000B6CDC);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v79, v86, v75, v79);
    sub_10004EFD0(v41, v82, &qword_1000ECC68);
    v88 = 5;
    sub_100092B1C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14descr1000DA611V16AttributedStringV13EmphasisStyleON, &v88, v75, &_s14descr1000DA611V16AttributedStringV13EmphasisStyleON);
    *((_BYTE *)v65 + v68) = v86[0];
    LOBYTE(v86[0]) = 6;
    sub_100042114(&qword_1000EC6E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v51 = (uint64_t)v69;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v64, v86, v75, v64);
    sub_10004EFD0(v51, v81, (uint64_t *)&unk_1000EC2E0);
    v88 = 7;
    sub_100092B60();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14descr1000DA611V16AttributedStringV17WritingDirectionsON, &v88, v75, &_s14descr1000DA611V16AttributedStringV17WritingDirectionsON);
    v52 = v85;
    *((_BYTE *)v65 + v63) = v86[0];
    LOBYTE(v86[0]) = 8;
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v86, v75);
    v55 = v54;
    v56 = (uint64_t *)v80;
    swift_bridgeObjectRelease(*((_QWORD *)v80 + 1));
    *v56 = v53;
    v56[1] = v55;
    LOBYTE(v86[0]) = 9;
    sub_100042114(&qword_1000ED048, _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa, (uint64_t)&unk_1000B6C8C);
    v57 = v75;
    v58 = v84;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v62, v86, v75, v62);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v58, v57);
    sub_10004EFD0(v67, v78, &qword_1000ECC60);
    v59 = v65;
    sub_10004BAD4((uint64_t)v65, v66, _s14descr1000DA611V16AttributedStringV9AttributeVMa);
    sub_100035424(v52);
    return sub_100042220((uint64_t)v59, _s14descr1000DA611V16AttributedStringV9AttributeVMa);
  }
}

uint64_t sub_10008C9E0()
{
  unsigned __int8 *v0;

  return sub_10008BB7C(*v0);
}

uint64_t sub_10008C9E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100094948(a1, a2);
  *a3 = result;
  return result;
}

void sub_10008CA0C(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10008CA18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092A04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008CA40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092A04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008CA68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008C07C(a1, a2);
}

uint64_t sub_10008CA7C(_QWORD *a1)
{
  return sub_10008BC7C(a1);
}

id sub_10008CA90(void *a1, void *a2, uint64_t a3)
{
  char v6;
  id result;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **aBlock;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v57;
  uint64_t (*v58)();
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v6 = *(_BYTE *)(a3 + 49);
  result = objc_msgSend(a1, "attributedString");
  v8 = result;
  if ((v6 & 1) == 0)
  {
    if (!result)
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    v9 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", result);

    v10 = ICTTAttributeNameReplicaID;
    v11 = objc_msgSend(v9, "ic_range");
    objc_msgSend(v9, "removeAttribute:range:", v10, v11, v12);

    v13 = ICTTAttributeNameTimestamp;
    v14 = objc_msgSend(v9, "ic_range");
    objc_msgSend(v9, "removeAttribute:range:", v13, v14, v15);

    v16 = v9;
    v17 = objc_msgSend(a2, "managedObjectContext");
    v18 = *(_BYTE *)(a3 + 52);
    v62 = _swiftEmptyArrayStorage;
    v19 = objc_msgSend(v16, "string");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v60 = v20;
    v61 = v22;
    v23 = objc_msgSend(v16, "ic_range");
    v25 = v24;
    v26 = swift_allocObject(&unk_1000D9C58, 33, 7);
    *(_QWORD *)(v26 + 16) = &v60;
    *(_QWORD *)(v26 + 24) = v17;
    *(_BYTE *)(v26 + 32) = v18;
    v27 = swift_allocObject(&unk_1000D9C80, 32, 7);
    *(_QWORD *)(v27 + 16) = sub_10008CF38;
    *(_QWORD *)(v27 + 24) = v26;
    v58 = sub_1000490B0;
    v59 = v27;
    aBlock = _NSConcreteStackBlock;
    v55 = 1107296256;
    v56 = sub_100087218;
    v57 = &unk_1000D9C98;
    v28 = _Block_copy(&aBlock);
    v29 = v59;
    v30 = v17;
    swift_retain(v27);
    swift_release(v29, v31);
    objc_msgSend(v16, "enumerateAttributesInRange:options:usingBlock:", v23, v25, 0, v28);

    _Block_release(v28);
    LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v27, "", 120, 25, 93, 1);
    result = (id)swift_release(v27, v32);
    if ((v30 & 1) == 0)
    {
      v33 = v60;

LABEL_8:
      swift_release(v26, v53);
      return (id)v33;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (result)
  {
    v34 = objc_msgSend(result, "ic_range");
    v36 = v35;

    v37 = ICTTMergeableAttributedString.authorAttributedString(for:object:)(v34, v36, a2);
    v38 = objc_msgSend(a2, "managedObjectContext");
    v39 = *(_BYTE *)(a3 + 52);
    v62 = _swiftEmptyArrayStorage;
    v40 = objc_msgSend((id)v37, "string");
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v60 = v41;
    v61 = v43;
    v44 = objc_msgSend((id)v37, "ic_range");
    v46 = v45;
    v26 = swift_allocObject(&unk_1000D9CD0, 33, 7);
    *(_QWORD *)(v26 + 16) = &v60;
    *(_QWORD *)(v26 + 24) = v38;
    *(_BYTE *)(v26 + 32) = v39;
    v47 = swift_allocObject(&unk_1000D9CF8, 32, 7);
    *(_QWORD *)(v47 + 16) = sub_100094F80;
    *(_QWORD *)(v47 + 24) = v26;
    v58 = sub_10006BD8C;
    v59 = v47;
    aBlock = _NSConcreteStackBlock;
    v55 = 1107296256;
    v56 = sub_100087218;
    v57 = &unk_1000D9D10;
    v48 = _Block_copy(&aBlock);
    v49 = v59;
    v50 = v38;
    swift_retain(v47);
    swift_release(v49, v51);
    objc_msgSend((id)v37, "enumerateAttributesInRange:options:usingBlock:", v44, v46, 0, v48);

    _Block_release(v48);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation(v47, "", 120, 25, 93, 1);
    result = (id)swift_release(v47, v52);
    if ((v37 & 1) == 0)
    {
      v33 = v60;
      goto LABEL_8;
    }
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10008CF14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10008CF38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100085958(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24), *(unsigned __int8 *)(v4 + 32));
}

uint64_t sub_10008CF44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008CF54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008CF64(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_10008CF6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t _s14descr1000DA611V16AttributedStringV9AttributeVMa(uint64_t a1)
{
  return sub_10008340C(a1, (uint64_t *)&unk_1000ECF00, (uint64_t)&_s14descr1000DA611V16AttributedStringV9AttributeVMn);
}

uint64_t _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(uint64_t a1)
{
  return sub_10008340C(a1, (uint64_t *)&unk_1000ECDA8, (uint64_t)&_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMn);
}

uint64_t _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(uint64_t a1)
{
  return sub_10008340C(a1, qword_1000ECE60, (uint64_t)&_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMn);
}

uint64_t sub_10008CFB8(CGColor *a1)
{
  CGColorSpace *v2;
  CGColorSpace *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  CGColor *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;

  v2 = CGColorGetColorSpace(a1);
  if (v2)
  {
    v3 = v2;
    v4 = (__CFString *)CGColorSpaceCopyName(v2);

    if (v4)
    {
      v5 = CGColorRef.components.getter();
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)(v5 + 16);
        if (v7)
        {
          v27 = _swiftEmptyArrayStorage;
          sub_10003F3EC(0, v7, 0);
          v8 = 0;
          v9 = _swiftEmptyArrayStorage;
          v10 = _swiftEmptyArrayStorage[2];
          do
          {
            v11 = *(_QWORD *)(v6 + 8 * v8 + 32);
            v27 = v9;
            v12 = v9[3];
            if (v10 >= v12 >> 1)
            {
              sub_10003F3EC(v12 > 1, v10 + 1, 1);
              v9 = v27;
            }
            ++v8;
            v9[2] = v10 + 1;
            v9[v10++ + 4] = v11;
          }
          while (v7 != v8);
          swift_bridgeObjectRelease(v6);
        }
        else
        {
          swift_bridgeObjectRelease(v5);
        }
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

        return v24;
      }

    }
  }
  if (qword_1000EB6C0 != -1)
    swift_once(&qword_1000EB6C0, sub_100085910);
  v13 = type metadata accessor for Logger(0);
  sub_10003609C(v13, (uint64_t)qword_1000ECC48);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = (_QWORD *)swift_slowAlloc(32, -1);
    v26 = (uint64_t)v14;
    v27 = v18;
    *(_DWORD *)v17 = 136315138;
    type metadata accessor for CGColor(0);
    v20 = v19;
    v14 = v14;
    v21 = String.init<A>(describing:)(&v26, v20);
    v23 = v22;
    v26 = sub_10005F12C(v21, v22, (uint64_t *)&v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Cannot create color from CGColor â€” returning nil {cgColor: %s}", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_10008D290(int a1)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 5;
      break;
    case 5:
      result = 4;
      break;
    default:
      switch(a1)
      {
        case 'd':
          result = 6;
          break;
        case 'e':
          result = 7;
          break;
        case 'f':
          result = 8;
          break;
        case 'g':
          result = 9;
          break;
        default:
          if (qword_1000EB6C0 != -1)
            swift_once(&qword_1000EB6C0, sub_100085910);
          v4 = type metadata accessor for Logger(0);
          v5 = sub_10003609C(v4, (uint64_t)qword_1000ECC48);
          v6 = Logger.logObject.getter(v5);
          v7 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v6, v7))
          {
            v8 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v8 = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unknown named paragraph style â€” returning nil", v8, 2u);
            swift_slowDealloc(v8, -1, -1);
          }

          result = 10;
          break;
      }
      break;
  }
  return result;
}

unint64_t sub_10008D3F8(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (result >= 5)
  {
    if (qword_1000EB6C0 != -1)
      swift_once(&qword_1000EB6C0, sub_100085910);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10003609C(v1, (uint64_t)qword_1000ECC48);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unknown text alignment â€” returning nil", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    return 5;
  }
  return result;
}

unint64_t sub_10008D4D0(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 < 6)
    return 0x40302010005uLL >> (8 * a1);
  if (qword_1000EB6C0 != -1)
    swift_once(&qword_1000EB6C0, sub_100085910);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10003609C(v2, (uint64_t)qword_1000ECC48);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown emphasis color type â€” returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 5;
}

uint64_t _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(uint64_t a1)
{
  return sub_10008340C(a1, qword_1000ECD18, (uint64_t)&_s14descr1000DA611V16AttributedStringV13ChecklistItemVMn);
}

_QWORD *sub_10008D5D4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

__n128 _s14descr1000DA611V16AttributedStringV5ColorVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV5ColorVMa()
{
  return &_s14descr1000DA611V16AttributedStringV5ColorVN;
}

_QWORD *sub_10008D64C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10008D6D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10008D708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10008D764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10008D7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10008D81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10008D878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D884);
}

uint64_t sub_10008D884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10008D910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008D91C);
}

uint64_t sub_10008D91C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_10008D994(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000B6A40;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10008DA04(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v8 = a3[8];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100030EE4(&qword_1000ECC88);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v9, v10, v15);
      *((_BYTE *)v9 + *(int *)(v11 + 20)) = v10[*(int *)(v11 + 20)];
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[9];
    v17 = a3[10];
    v18 = (char *)v4 + v16;
    v19 = (uint64_t)a2 + v16;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = *(_BYTE *)(v19 + 8);
    v20 = (char *)v4 + v17;
    v21 = (char *)a2 + v17;
    v22 = type metadata accessor for UUID(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_100030EE4(&qword_1000EBBA0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return v4;
}

uint64_t sub_10008DBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 32);
  v5 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  v7 = a1 + *(int *)(a2 + 40);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

uint64_t sub_10008DC7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100030EE4(&qword_1000ECC88);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v8, v9, v13);
    *((_BYTE *)v8 + *(int *)(v10 + 20)) = *((_BYTE *)v9 + *(int *)(v10 + 20));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (void *)(a1 + v15);
  v19 = (const void *)(a2 + v15);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_10008DE0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[8];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
      v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100042220((uint64_t)v8, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa);
LABEL_6:
    v16 = sub_100030EE4(&qword_1000ECC88);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v31 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v8, v9, v31);
  v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
LABEL_7:
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  *(_BYTE *)(v18 + 8) = *((_BYTE *)v19 + 8);
  *(_QWORD *)v18 = v20;
  v21 = a3[10];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v29 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_10008E058(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100030EE4(&qword_1000ECC88);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    *((_BYTE *)v8 + *(int *)(v10 + 20)) = *((_BYTE *)v9 + *(int *)(v10 + 20));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (void *)(a1 + v15);
  v19 = (const void *)(a2 + v15);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_10008E1E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = a3[8];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v8, v9, v15);
      v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100042220((uint64_t)v8, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa);
LABEL_6:
    v16 = sub_100030EE4(&qword_1000ECC88);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v30 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v8, v9, v30);
  v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
LABEL_7:
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = (void *)(a1 + v18);
  v22 = (void *)(a2 + v18);
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v28 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_10008E420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008E42C);
}

uint64_t sub_10008E42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 251)
  {
    v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 5)
      return v4 - 4;
    else
      return 0;
  }
  else
  {
    v8 = sub_100030EE4(&qword_1000ECC88);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_100030EE4(&qword_1000EBBA0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10008E4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008E4D8);
}

uint64_t sub_10008E4D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 251)
  {
    *(_BYTE *)(result + 1) = a2 + 4;
  }
  else
  {
    v8 = sub_100030EE4(&qword_1000ECC88);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_100030EE4(&qword_1000EBBA0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10008E578(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_1000B6A68;
  v6[1] = &unk_1000B6A80;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[3] = &unk_1000B6A98;
  sub_100050F10(319, &qword_1000ECDB8, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_1000B6A98;
    sub_100050F10(319, (unint64_t *)&unk_1000ECDC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t *sub_10008E648(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[7];
    v18 = a3[8];
    v19 = (uint64_t *)((char *)v4 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (uint64_t *)((char *)v4 + v18);
    v23 = (uint64_t *)((char *)a2 + v18);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
  }
  return v4;
}

uint64_t sub_10008E790(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

_QWORD *sub_10008E82C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = (_QWORD *)((char *)a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)((char *)a1 + v16);
  v21 = (_QWORD *)((char *)a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  return a1;
}

_QWORD *sub_10008E948(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[8];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

_OWORD *sub_10008EAF0(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *sub_10008EBD0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  return a1;
}

uint64_t sub_10008ED38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008ED44);
}

uint64_t sub_10008ED44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10008EDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008EDD0);
}

uint64_t sub_10008EDD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_100030EE4(&qword_1000EBA10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_10008EE48(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1000B6AC8;
  v4[1] = &unk_1000B6AE0;
  sub_100050F10(319, (unint64_t *)&qword_1000EBC48, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000B6AC8;
    v4[4] = &unk_1000B6AC8;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

_QWORD *sub_10008EED8(_OWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  _WORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int *v64;
  uint64_t v65;
  unsigned int (*v66)(_QWORD *, uint64_t, int *);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD, uint64_t, int *);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  unsigned int (*v91)(char *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    v11 = *(_QWORD *)(v10 - 8);
    v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    v88 = v11;
    if (v89(v9, 1, v10))
    {
      v12 = sub_100030EE4(&qword_1000EBBA0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[6];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    v90 = v10;
    if (v19(v16, 1, v17))
    {
      v20 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v21 = a3[7];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = *(_QWORD *)((char *)a2 + v21 + 8);
    v91 = v19;
    if (v24 == 1)
    {
      v25 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v25;
      *((_QWORD *)v22 + 8) = *((_QWORD *)v23 + 8);
      v26 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v26;
    }
    else
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v24;
      *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
      v22[24] = v23[24];
      *(_DWORD *)(v22 + 25) = *(_DWORD *)(v23 + 25);
      *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
      v22[40] = v23[40];
      v27 = *((_QWORD *)v23 + 7);
      swift_bridgeObjectRetain(v24);
      if (v27)
      {
        *((_QWORD *)v22 + 6) = *((_QWORD *)v23 + 6);
        *((_QWORD *)v22 + 7) = v27;
        v28 = *((_QWORD *)v23 + 8);
        *((_QWORD *)v22 + 8) = v28;
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v28);
      }
      else
      {
        *((_OWORD *)v22 + 3) = *((_OWORD *)v23 + 3);
        *((_QWORD *)v22 + 8) = *((_QWORD *)v23 + 8);
      }
    }
    v29 = a3[8];
    v30 = (_WORD *)((char *)v4 + v29);
    v31 = (_WORD *)((char *)a2 + v29);
    v32 = (int *)_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
    v33 = *((_QWORD *)v32 - 1);
    if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100030EE4(&qword_1000ECC68);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v85 = v33;
      v86 = v18;
      v87 = v17;
      *v30 = *v31;
      v35 = *((_QWORD *)v31 + 2);
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      *((_QWORD *)v30 + 2) = v35;
      *((_BYTE *)v30 + 24) = *((_BYTE *)v31 + 24);
      v36 = v32[8];
      v37 = (char *)v30 + v36;
      v38 = (char *)v31 + v36;
      v39 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = sub_100030EE4(&qword_1000ECC88);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        v42 = v90;
      }
      else
      {
        v43 = v37;
        v84 = v37;
        v42 = v90;
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v43, v38, v90);
        v84[*(int *)(v39 + 20)] = v38[*(int *)(v39 + 20)];
        (*(void (**)(void))(v40 + 56))();
      }
      v44 = v32[9];
      v45 = (char *)v30 + v44;
      v46 = (char *)v31 + v44;
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      v47 = v32[10];
      v48 = (char *)v30 + v47;
      v49 = (char *)v31 + v47;
      v18 = v86;
      if (v89((char *)v31 + v47, 1, v42))
      {
        v50 = sub_100030EE4(&qword_1000EBBA0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v48, v49, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v48, 0, 1, v42);
      }
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v85 + 56))(v30, 0, 1, v32);
      v17 = v87;
    }
    v51 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v52 = (char *)v4 + v51;
    v53 = (char *)a2 + v51;
    v54 = type metadata accessor for URL(0);
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    v57 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v58 = (_QWORD *)((char *)v4 + v57);
    v59 = (_QWORD *)((char *)a2 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = a3[13];
    v62 = (_QWORD *)((char *)v4 + v61);
    v63 = (_QWORD *)((char *)a2 + v61);
    v64 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
    v65 = *((_QWORD *)v64 - 1);
    v66 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v65 + 48);
    swift_bridgeObjectRetain(v60);
    if (v66(v63, 1, v64))
    {
      v67 = sub_100030EE4(&qword_1000ECC60);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      v68 = v63[1];
      *v62 = *v63;
      v62[1] = v68;
      v69 = v63[3];
      v62[2] = v63[2];
      v62[3] = v69;
      v70 = v64[6];
      v71 = (char *)v62 + v70;
      v72 = (char *)v63 + v70;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v69);
      if (v91(v72, 1, v17))
      {
        v73 = sub_100030EE4(&qword_1000EBA10);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v71, v72, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v71, 0, 1, v17);
      }
      v74 = v64[7];
      v75 = (_QWORD *)((char *)v62 + v74);
      v76 = (_QWORD *)((char *)v63 + v74);
      v77 = v76[1];
      *v75 = *v76;
      v75[1] = v77;
      v78 = v64[8];
      v79 = (_QWORD *)((char *)v62 + v78);
      v80 = (_QWORD *)((char *)v63 + v78);
      v81 = v80[1];
      *v79 = *v80;
      v79[1] = v81;
      v82 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v65 + 56);
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v81);
      v82(v62, 0, 1, v64);
    }
  }
  return v4;
}

uint64_t sub_10008F4D4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v12 = (_QWORD *)(a1 + a2[7]);
  v13 = v12[1];
  if (v13 != 1)
  {
    swift_bridgeObjectRelease(v13);
    v14 = v12[7];
    if (v14)
    {
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v12[8]);
    }
  }
  v15 = a1 + a2[8];
  v16 = _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v28 = v10;
    v17 = v11;
    v18 = v15 + *(int *)(v16 + 32);
    v19 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
    v20 = v15 + *(int *)(v16 + 40);
    v11 = v17;
    v10 = v28;
    if (!v7(v20, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
  }
  v21 = a1 + a2[10];
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  v24 = a1 + a2[13];
  v25 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v25 - 1) + 48))(v24, 1, v25);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v24 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v24 + 24));
    v27 = v24 + v25[6];
    if (!v11(v27, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v27, v9);
    swift_bridgeObjectRelease(*(_QWORD *)(v24 + v25[7] + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(v24 + v25[8] + 8));
  }
  return result;
}

_OWORD *sub_10008F768(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  int *v62;
  uint64_t v63;
  unsigned int (*v64)(_QWORD *, uint64_t, int *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  void (*v80)(_QWORD *, _QWORD, uint64_t, int *);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v86 = v10;
  if (v87(v8, 1, v9))
  {
    v11 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v88 = v9;
  if (v17(v14, 1, v15))
  {
    v18 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)((char *)a2 + v19 + 8);
  v89 = v17;
  if (v22 == 1)
  {
    v23 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v23;
    *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
    v24 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v24;
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    v20[24] = v21[24];
    *(_DWORD *)(v20 + 25) = *(_DWORD *)(v21 + 25);
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    v20[40] = v21[40];
    v25 = *((_QWORD *)v21 + 7);
    swift_bridgeObjectRetain(v22);
    if (v25)
    {
      *((_QWORD *)v20 + 6) = *((_QWORD *)v21 + 6);
      *((_QWORD *)v20 + 7) = v25;
      v26 = *((_QWORD *)v21 + 8);
      *((_QWORD *)v20 + 8) = v26;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
    }
    else
    {
      *((_OWORD *)v20 + 3) = *((_OWORD *)v21 + 3);
      *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
    }
  }
  v27 = a3[8];
  v28 = (_WORD *)((char *)a1 + v27);
  v29 = (_WORD *)((char *)a2 + v27);
  v30 = (int *)_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_100030EE4(&qword_1000ECC68);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v83 = v31;
    v84 = v16;
    v85 = v15;
    *v28 = *v29;
    v33 = *((_QWORD *)v29 + 2);
    *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 2) = v33;
    *((_BYTE *)v28 + 24) = *((_BYTE *)v29 + 24);
    v34 = v30[8];
    v35 = (char *)v28 + v34;
    v36 = (char *)v29 + v34;
    v37 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = sub_100030EE4(&qword_1000ECC88);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      v40 = v88;
    }
    else
    {
      v41 = v35;
      v82 = v35;
      v40 = v88;
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v41, v36, v88);
      v82[*(int *)(v37 + 20)] = v36[*(int *)(v37 + 20)];
      (*(void (**)(void))(v38 + 56))();
    }
    v42 = v30[9];
    v43 = (char *)v28 + v42;
    v44 = (char *)v29 + v42;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v30[10];
    v46 = (char *)v28 + v45;
    v47 = (char *)v29 + v45;
    v16 = v84;
    if (v87((char *)v29 + v45, 1, v40))
    {
      v48 = sub_100030EE4(&qword_1000EBBA0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v46, v47, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v46, 0, 1, v40);
    }
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v83 + 56))(v28, 0, 1, v30);
    v15 = v85;
  }
  v49 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = type metadata accessor for URL(0);
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    v54 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v51, v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  }
  v55 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v56 = (_QWORD *)((char *)a1 + v55);
  v57 = (_QWORD *)((char *)a2 + v55);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = a3[13];
  v60 = (_QWORD *)((char *)a1 + v59);
  v61 = (_QWORD *)((char *)a2 + v59);
  v62 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v63 = *((_QWORD *)v62 - 1);
  v64 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v63 + 48);
  swift_bridgeObjectRetain(v58);
  if (v64(v61, 1, v62))
  {
    v65 = sub_100030EE4(&qword_1000ECC60);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v66 = v61[1];
    *v60 = *v61;
    v60[1] = v66;
    v67 = v61[3];
    v60[2] = v61[2];
    v60[3] = v67;
    v68 = v62[6];
    v69 = (char *)v60 + v68;
    v70 = (char *)v61 + v68;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v67);
    if (v89(v70, 1, v15))
    {
      v71 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v69, v70, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v69, 0, 1, v15);
    }
    v72 = v62[7];
    v73 = (_QWORD *)((char *)v60 + v72);
    v74 = (_QWORD *)((char *)v61 + v72);
    v75 = v74[1];
    *v73 = *v74;
    v73[1] = v75;
    v76 = v62[8];
    v77 = (_QWORD *)((char *)v60 + v76);
    v78 = (_QWORD *)((char *)v61 + v76);
    v79 = v78[1];
    *v77 = *v78;
    v77[1] = v79;
    v80 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v63 + 56);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v79);
    v80(v60, 0, 1, v62);
  }
  return a1;
}

_QWORD *sub_10008FD38(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, int *);
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  int v80;
  size_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int *v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t, int *);
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, _QWORD, uint64_t, int *);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  char *v156;
  int v157;
  int v158;
  uint64_t v159;
  _BYTE *__src;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(void *, uint64_t, uint64_t);
  uint64_t (*v167)(char *, uint64_t, uint64_t);
  _QWORD *v168;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  v164 = v10;
  v165 = v9;
  v166 = (uint64_t (*)(void *, uint64_t, uint64_t))v11;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  v163 = v19;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    v23 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_13:
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)((char *)a1 + v24 + 8);
  v28 = *(_QWORD *)((char *)a2 + v24 + 8);
  v167 = v20;
  if (v27 == 1)
  {
    if (v28 == 1)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
      v29 = *((_OWORD *)v26 + 1);
      v30 = *((_OWORD *)v26 + 2);
      v31 = *((_OWORD *)v26 + 3);
      *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
      *((_OWORD *)v25 + 2) = v30;
      *((_OWORD *)v25 + 3) = v31;
      *((_OWORD *)v25 + 1) = v29;
      goto LABEL_29;
    }
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v35 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v25 + 1) = v35;
    v36 = *((_QWORD *)v26 + 2);
    v25[24] = v26[24];
    *((_QWORD *)v25 + 2) = v36;
    v25[25] = v26[25];
    v25[26] = v26[26];
    v25[27] = v26[27];
    v25[28] = v26[28];
    v37 = *((_QWORD *)v26 + 4);
    v25[40] = v26[40];
    *((_QWORD *)v25 + 4) = v37;
    v38 = *((_QWORD *)v26 + 7);
    swift_bridgeObjectRetain(v35);
    if (!v38)
    {
      v39 = *((_OWORD *)v26 + 3);
      *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
      *((_OWORD *)v25 + 3) = v39;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  if (v28 == 1)
  {
    sub_100090988(v25);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v33 = *((_OWORD *)v26 + 2);
    v32 = *((_OWORD *)v26 + 3);
    v34 = *((_OWORD *)v26 + 1);
    *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
    *((_OWORD *)v25 + 2) = v33;
    *((_OWORD *)v25 + 3) = v32;
    *((_OWORD *)v25 + 1) = v34;
    goto LABEL_29;
  }
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v40 = *((_QWORD *)v26 + 1);
  *((_QWORD *)v25 + 1) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v27);
  v41 = *((_QWORD *)v26 + 2);
  v25[24] = v26[24];
  *((_QWORD *)v25 + 2) = v41;
  v25[25] = v26[25];
  v25[26] = v26[26];
  v25[27] = v26[27];
  v25[28] = v26[28];
  v42 = *((_QWORD *)v26 + 4);
  v25[40] = v26[40];
  *((_QWORD *)v25 + 4) = v42;
  v43 = v25 + 48;
  v44 = v26 + 48;
  v45 = *((_QWORD *)v25 + 7);
  v46 = *((_QWORD *)v26 + 7);
  if (v45)
  {
    if (v46)
    {
      *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
      v47 = *((_QWORD *)v26 + 7);
      *((_QWORD *)v25 + 7) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease(v45);
      v48 = *((_QWORD *)v26 + 8);
      v49 = *((_QWORD *)v25 + 8);
      *((_QWORD *)v25 + 8) = v48;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRelease(v49);
    }
    else
    {
      sub_100090958((uint64_t)(v25 + 48));
      v52 = *((_QWORD *)v26 + 8);
      *v43 = *v44;
      *((_QWORD *)v25 + 8) = v52;
    }
  }
  else
  {
    if (v46)
    {
LABEL_26:
      *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
      v50 = *((_QWORD *)v26 + 7);
      *((_QWORD *)v25 + 7) = v50;
      v51 = *((_QWORD *)v26 + 8);
      *((_QWORD *)v25 + 8) = v51;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v51);
      goto LABEL_29;
    }
    v53 = *v44;
    *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
    *v43 = v53;
  }
LABEL_29:
  v54 = a3[8];
  v168 = a1;
  v55 = (uint64_t)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = (int *)_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  v58 = *((_QWORD *)v57 - 1);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59((uint64_t)v56, 1, v57);
  if (!v60)
  {
    if (v61)
    {
      sub_100042220(v55, _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa);
      goto LABEL_35;
    }
    v162 = v18;
    *(_BYTE *)v55 = *v56;
    *(_BYTE *)(v55 + 1) = v56[1];
    *(_QWORD *)(v55 + 8) = *((_QWORD *)v56 + 1);
    v73 = *((_QWORD *)v56 + 2);
    *(_BYTE *)(v55 + 24) = v56[24];
    *(_QWORD *)(v55 + 16) = v73;
    v74 = v57[8];
    v75 = v55 + v74;
    v76 = &v56[v74];
    v77 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
    v78 = *(_QWORD *)(v77 - 8);
    v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
    v159 = v75;
    LODWORD(v75) = v79(v75, 1, v77);
    v80 = v79((uint64_t)v76, 1, v77);
    if ((_DWORD)v75)
    {
      if (v80)
      {
        v81 = *(_QWORD *)(*(_QWORD *)(sub_100030EE4(&qword_1000ECC88) - 8) + 64);
        v82 = (void *)v159;
LABEL_66:
        memcpy(v82, v76, v81);
        v18 = v162;
        v137 = v165;
LABEL_75:
        v150 = v57[9];
        v151 = v55 + v150;
        v152 = &v56[v150];
        v153 = *(_QWORD *)v152;
        *(_BYTE *)(v151 + 8) = v152[8];
        *(_QWORD *)v151 = v153;
        v154 = v57[10];
        v155 = (void *)(v55 + v154);
        v156 = &v56[v154];
        v157 = v166(v155, 1, v137);
        v158 = v166(v156, 1, v137);
        if (v157)
        {
          if (!v158)
          {
            (*(void (**)(void *, char *, uint64_t))(v164 + 16))(v155, v156, v137);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v155, 0, 1, v137);
            goto LABEL_45;
          }
        }
        else
        {
          if (!v158)
          {
            (*(void (**)(void *, char *, uint64_t))(v164 + 24))(v155, v156, v137);
            goto LABEL_45;
          }
          (*(void (**)(void *, uint64_t))(v164 + 8))(v155, v137);
        }
        v70 = *(_QWORD *)(*(_QWORD *)(sub_100030EE4(&qword_1000EBBA0) - 8) + 64);
        v71 = v155;
        v72 = v156;
LABEL_36:
        memcpy(v71, v72, v70);
        goto LABEL_45;
      }
      v137 = v165;
      (*(void (**)(uint64_t, char *, uint64_t))(v164 + 16))(v159, v76, v165);
      *(_BYTE *)(v159 + *(int *)(v77 + 20)) = v76[*(int *)(v77 + 20)];
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v159, 0, 1, v77);
    }
    else
    {
      if (v80)
      {
        sub_100042220(v159, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa);
        v81 = *(_QWORD *)(*(_QWORD *)(sub_100030EE4(&qword_1000ECC88) - 8) + 64);
        v82 = (void *)v159;
        goto LABEL_66;
      }
      v137 = v165;
      (*(void (**)(uint64_t, char *, uint64_t))(v164 + 24))(v159, v76, v165);
      *(_BYTE *)(v159 + *(int *)(v77 + 20)) = v76[*(int *)(v77 + 20)];
    }
    v18 = v162;
    goto LABEL_75;
  }
  if (v61)
  {
LABEL_35:
    v70 = *(_QWORD *)(*(_QWORD *)(sub_100030EE4(&qword_1000ECC68) - 8) + 64);
    v71 = (void *)v55;
    v72 = v56;
    goto LABEL_36;
  }
  v161 = v18;
  *(_BYTE *)v55 = *v56;
  *(_BYTE *)(v55 + 1) = v56[1];
  *(_QWORD *)(v55 + 8) = *((_QWORD *)v56 + 1);
  v62 = *((_QWORD *)v56 + 2);
  *(_BYTE *)(v55 + 24) = v56[24];
  *(_QWORD *)(v55 + 16) = v62;
  v63 = v57[8];
  v64 = (void *)(v55 + v63);
  v65 = &v56[v63];
  v66 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    v68 = sub_100030EE4(&qword_1000ECC88);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    v69 = v165;
  }
  else
  {
    v83 = v64;
    __src = v64;
    v69 = v165;
    (*(void (**)(void *, char *, uint64_t))(v164 + 16))(v83, v65, v165);
    __src[*(int *)(v66 + 20)] = v65[*(int *)(v66 + 20)];
    (*(void (**)(void))(v67 + 56))();
  }
  v84 = v57[9];
  v85 = v55 + v84;
  v86 = &v56[v84];
  v87 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = v86[8];
  *(_QWORD *)v85 = v87;
  v88 = v57[10];
  v89 = (void *)(v55 + v88);
  v90 = &v56[v88];
  v18 = v161;
  if (v166(&v56[v88], 1, v69))
  {
    v91 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v164 + 16))(v89, v90, v69);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v89, 0, 1, v69);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v58 + 56))(v55, 0, 1, v57);
LABEL_45:
  *((_BYTE *)v168 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v92 = a3[10];
  v93 = (char *)v168 + v92;
  v94 = (char *)a2 + v92;
  v95 = type metadata accessor for URL(0);
  v96 = *(_QWORD *)(v95 - 8);
  v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48);
  v98 = v97(v93, 1, v95);
  v99 = v97(v94, 1, v95);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v93, v94, v95);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v95);
LABEL_50:
    v100 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_51;
  }
  (*(void (**)(char *, char *, uint64_t))(v96 + 24))(v93, v94, v95);
LABEL_51:
  *((_BYTE *)v168 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v101 = a3[12];
  v102 = (_QWORD *)((char *)v168 + v101);
  v103 = (_QWORD *)((char *)a2 + v101);
  *v102 = *v103;
  v104 = v103[1];
  v105 = v102[1];
  v102[1] = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v105);
  v106 = a3[13];
  v107 = (char *)v168 + v106;
  v108 = (char *)a2 + v106;
  v109 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v110 = *((_QWORD *)v109 - 1);
  v111 = *(uint64_t (**)(char *, uint64_t, int *))(v110 + 48);
  LODWORD(v105) = v111(v107, 1, v109);
  v112 = v111(v108, 1, v109);
  if (!(_DWORD)v105)
  {
    if (v112)
    {
      sub_100042220((uint64_t)v107, _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa);
      goto LABEL_57;
    }
    *(_QWORD *)v107 = *(_QWORD *)v108;
    v120 = *((_QWORD *)v108 + 1);
    v121 = *((_QWORD *)v107 + 1);
    *((_QWORD *)v107 + 1) = v120;
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRelease(v121);
    *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
    v122 = *((_QWORD *)v108 + 3);
    v123 = *((_QWORD *)v107 + 3);
    *((_QWORD *)v107 + 3) = v122;
    swift_bridgeObjectRetain(v122);
    swift_bridgeObjectRelease(v123);
    v124 = v109[6];
    v125 = &v107[v124];
    v126 = &v108[v124];
    LODWORD(v123) = v167(&v107[v124], 1, v18);
    v127 = v167(v126, 1, v18);
    if ((_DWORD)v123)
    {
      if (!v127)
      {
        (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v125, v126, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v125, 0, 1, v18);
LABEL_70:
        v139 = v109[7];
        v140 = &v107[v139];
        v141 = &v108[v139];
        *(_QWORD *)v140 = *v141;
        v142 = v141[1];
        v143 = *((_QWORD *)v140 + 1);
        *((_QWORD *)v140 + 1) = v142;
        swift_bridgeObjectRetain(v142);
        swift_bridgeObjectRelease(v143);
        v144 = v109[8];
        v145 = &v107[v144];
        v146 = &v108[v144];
        *(_QWORD *)v145 = *v146;
        v147 = v146[1];
        v148 = *((_QWORD *)v145 + 1);
        *((_QWORD *)v145 + 1) = v147;
        swift_bridgeObjectRetain(v147);
        swift_bridgeObjectRelease(v148);
        return v168;
      }
    }
    else
    {
      if (!v127)
      {
        (*(void (**)(char *, char *, uint64_t))(v163 + 24))(v125, v126, v18);
        goto LABEL_70;
      }
      (*(void (**)(char *, uint64_t))(v163 + 8))(v125, v18);
    }
    v138 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    goto LABEL_70;
  }
  if (v112)
  {
LABEL_57:
    v119 = sub_100030EE4(&qword_1000ECC60);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    return v168;
  }
  *(_QWORD *)v107 = *(_QWORD *)v108;
  v113 = *((_QWORD *)v108 + 1);
  *((_QWORD *)v107 + 1) = v113;
  *((_QWORD *)v107 + 2) = *((_QWORD *)v108 + 2);
  v114 = *((_QWORD *)v108 + 3);
  *((_QWORD *)v107 + 3) = v114;
  v115 = v109[6];
  v116 = &v107[v115];
  v117 = &v108[v115];
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRetain(v114);
  if (v167(v117, 1, v18))
  {
    v118 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v116, v117, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v116, 0, 1, v18);
  }
  v128 = v109[7];
  v129 = &v107[v128];
  v130 = &v108[v128];
  *(_QWORD *)v129 = *v130;
  v131 = v130[1];
  *((_QWORD *)v129 + 1) = v131;
  v132 = v109[8];
  v133 = &v107[v132];
  v134 = &v108[v132];
  *(_QWORD *)v133 = *v134;
  v135 = v134[1];
  *((_QWORD *)v133 + 1) = v135;
  v136 = *(void (**)(char *, _QWORD, uint64_t, int *))(v110 + 56);
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRetain(v135);
  v136(v107, 0, 1, v109);
  return v168;
}

uint64_t sub_100090958(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return a1;
}

_QWORD *sub_100090988(_QWORD *a1)
{
  _s14descr1000DA611V16AttributedStringV4FontVwxx(a1);
  return a1;
}

_OWORD *sub_1000909B4(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  _WORD *v24;
  _WORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *__dst;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  unsigned int (*v67)(char *, uint64_t, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v65 = v10;
  if (v66(v8, 1, v9))
  {
    v11 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v67(v14, 1, v15))
  {
    v17 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
  v22 = *((_OWORD *)v21 + 3);
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  *((_OWORD *)v20 + 3) = v22;
  v23 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v23;
  v24 = (_WORD *)((char *)a1 + v19);
  v25 = (_WORD *)((char *)a2 + v19);
  v26 = (int *)_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  v27 = *((_QWORD *)v26 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_100030EE4(&qword_1000ECC68);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v61 = v27;
    v62 = v16;
    *v24 = *v25;
    v29 = *((_QWORD *)v25 + 2);
    *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
    *((_QWORD *)v24 + 2) = v29;
    *((_BYTE *)v24 + 24) = *((_BYTE *)v25 + 24);
    v30 = v26[8];
    v63 = v15;
    __dst = (char *)v24 + v30;
    v31 = (char *)v25 + v30;
    v32 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100030EE4(&qword_1000ECC88);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(__dst, v31, v9);
      __dst[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
      (*(void (**)(void))(v33 + 56))();
    }
    v35 = v26[9];
    v36 = (char *)v24 + v35;
    v37 = (char *)v25 + v35;
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v26[10];
    v39 = (char *)v24 + v38;
    v40 = (char *)v25 + v38;
    v16 = v62;
    if (v66((char *)v25 + v38, 1, v9))
    {
      v41 = sub_100030EE4(&qword_1000EBBA0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v39, v40, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v39, 0, 1, v9);
    }
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v61 + 56))(v24, 0, 1, v26);
    v15 = v63;
  }
  v42 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_OWORD *)((char *)a1 + v48) = *(_OWORD *)((char *)a2 + v48);
  v49 = a3[13];
  v50 = (_OWORD *)((char *)a1 + v49);
  v51 = (_OWORD *)((char *)a2 + v49);
  v52 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v53 = *((_QWORD *)v52 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v53 + 48))(v51, 1, v52))
  {
    v54 = sub_100030EE4(&qword_1000ECC60);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v55 = v51[1];
    *v50 = *v51;
    v50[1] = v55;
    v56 = v52[6];
    v57 = (char *)v50 + v56;
    v58 = (char *)v51 + v56;
    if (v67((char *)v51 + v56, 1, v15))
    {
      v59 = sub_100030EE4(&qword_1000EBA10);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    *(_OWORD *)((char *)v50 + v52[7]) = *(_OWORD *)((char *)v51 + v52[7]);
    *(_OWORD *)((char *)v50 + v52[8]) = *(_OWORD *)((char *)v51 + v52[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v53 + 56))(v50, 0, 1, v52);
  }
  return a1;
}

_OWORD *sub_100090EA4(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int *);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  size_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int *v89;
  uint64_t v90;
  uint64_t (*v91)(char *, uint64_t, int *);
  int v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  int v130;
  int v131;
  uint64_t v132;
  _BYTE *__src;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(void *, uint64_t, uint64_t);
  uint64_t (*v140)(char *, uint64_t, uint64_t);
  _OWORD *v141;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  v137 = v10;
  v138 = v9;
  v139 = (uint64_t (*)(void *, uint64_t, uint64_t))v11;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v140 = v20;
  v22 = v20(v17, 1, v18);
  v136 = v19;
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    v23 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_13:
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)((char *)a1 + v24 + 8);
  if (v27 == 1)
  {
LABEL_16:
    v29 = *((_OWORD *)v26 + 3);
    *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
    *((_OWORD *)v25 + 3) = v29;
    *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
    v30 = *((_OWORD *)v26 + 1);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v30;
    goto LABEL_17;
  }
  v28 = *((_QWORD *)v26 + 1);
  if (v28 == 1)
  {
    sub_100090988(v25);
    goto LABEL_16;
  }
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v28;
  swift_bridgeObjectRelease(v27);
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  v25[24] = v26[24];
  *(_DWORD *)(v25 + 25) = *(_DWORD *)(v26 + 25);
  *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
  v25[40] = v26[40];
  v50 = *((_QWORD *)v25 + 7);
  if (v50)
  {
    v51 = *((_QWORD *)v26 + 7);
    if (v51)
    {
      *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
      *((_QWORD *)v25 + 7) = v51;
      swift_bridgeObjectRelease(v50);
      v52 = *((_QWORD *)v25 + 8);
      *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
      swift_bridgeObjectRelease(v52);
      goto LABEL_17;
    }
    sub_100090958((uint64_t)(v25 + 48));
  }
  *((_OWORD *)v25 + 3) = *((_OWORD *)v26 + 3);
  *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
LABEL_17:
  v31 = a3[8];
  v141 = a1;
  v32 = (uint64_t)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = (int *)_s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa(0);
  v35 = *((_QWORD *)v34 - 1);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36((uint64_t)v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      sub_100042220(v32, _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa);
      goto LABEL_23;
    }
    v135 = v18;
    *(_WORD *)v32 = *(_WORD *)v33;
    v53 = *((_QWORD *)v33 + 2);
    *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
    *(_QWORD *)(v32 + 16) = v53;
    *(_BYTE *)(v32 + 24) = v33[24];
    v54 = v34[8];
    v55 = v32 + v54;
    v56 = &v33[v54];
    v57 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
    v132 = v55;
    LODWORD(v55) = v59(v55, 1, v57);
    v60 = v59((uint64_t)v56, 1, v57);
    if ((_DWORD)v55)
    {
      if (v60)
      {
        v61 = *(_QWORD *)(*(_QWORD *)(sub_100030EE4(&qword_1000ECC88) - 8) + 64);
        v62 = (void *)v132;
LABEL_61:
        memcpy(v62, v56, v61);
        v18 = v135;
        v109 = v138;
LABEL_70:
        v124 = v34[9];
        v125 = v32 + v124;
        v126 = &v33[v124];
        *(_QWORD *)v125 = *(_QWORD *)v126;
        *(_BYTE *)(v125 + 8) = v126[8];
        v127 = v34[10];
        v128 = (void *)(v32 + v127);
        v129 = &v33[v127];
        v130 = v139(v128, 1, v109);
        v131 = v139(v129, 1, v109);
        if (v130)
        {
          if (!v131)
          {
            (*(void (**)(void *, char *, uint64_t))(v137 + 32))(v128, v129, v109);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v128, 0, 1, v109);
            goto LABEL_38;
          }
        }
        else
        {
          if (!v131)
          {
            (*(void (**)(void *, char *, uint64_t))(v137 + 40))(v128, v129, v109);
            goto LABEL_38;
          }
          (*(void (**)(void *, uint64_t))(v137 + 8))(v128, v109);
        }
        v47 = *(_QWORD *)(*(_QWORD *)(sub_100030EE4(&qword_1000EBBA0) - 8) + 64);
        v48 = v128;
        v49 = v129;
LABEL_24:
        memcpy(v48, v49, v47);
        goto LABEL_38;
      }
      v109 = v138;
      (*(void (**)(uint64_t, char *, uint64_t))(v137 + 32))(v132, v56, v138);
      *(_BYTE *)(v132 + *(int *)(v57 + 20)) = v56[*(int *)(v57 + 20)];
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v132, 0, 1, v57);
    }
    else
    {
      if (v60)
      {
        sub_100042220(v132, _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa);
        v61 = *(_QWORD *)(*(_QWORD *)(sub_100030EE4(&qword_1000ECC88) - 8) + 64);
        v62 = (void *)v132;
        goto LABEL_61;
      }
      v109 = v138;
      (*(void (**)(uint64_t, char *, uint64_t))(v137 + 40))(v132, v56, v138);
      *(_BYTE *)(v132 + *(int *)(v57 + 20)) = v56[*(int *)(v57 + 20)];
    }
    v18 = v135;
    goto LABEL_70;
  }
  if (v38)
  {
LABEL_23:
    v47 = *(_QWORD *)(*(_QWORD *)(sub_100030EE4(&qword_1000ECC68) - 8) + 64);
    v48 = (void *)v32;
    v49 = v33;
    goto LABEL_24;
  }
  v134 = v18;
  *(_WORD *)v32 = *(_WORD *)v33;
  v39 = *((_QWORD *)v33 + 2);
  *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
  *(_QWORD *)(v32 + 16) = v39;
  *(_BYTE *)(v32 + 24) = v33[24];
  v40 = v34[8];
  v41 = (void *)(v32 + v40);
  v42 = &v33[v40];
  v43 = _s14descr1000DA611V16AttributedStringV13ChecklistItemVMa(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    v45 = sub_100030EE4(&qword_1000ECC88);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    v46 = v138;
  }
  else
  {
    v63 = v41;
    __src = v41;
    v46 = v138;
    (*(void (**)(void *, char *, uint64_t))(v137 + 32))(v63, v42, v138);
    __src[*(int *)(v43 + 20)] = v42[*(int *)(v43 + 20)];
    (*(void (**)(void))(v44 + 56))();
  }
  v64 = v34[9];
  v65 = v32 + v64;
  v66 = &v33[v64];
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_BYTE *)(v65 + 8) = v66[8];
  v67 = v34[10];
  v68 = (void *)(v32 + v67);
  v69 = &v33[v67];
  v18 = v134;
  if (v139(&v33[v67], 1, v46))
  {
    v70 = sub_100030EE4(&qword_1000EBBA0);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v137 + 32))(v68, v69, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v68, 0, 1, v46);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
LABEL_38:
  v71 = a3[10];
  *((_BYTE *)v141 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v72 = (char *)v141 + v71;
  v73 = (char *)a2 + v71;
  v74 = type metadata accessor for URL(0);
  v75 = *(_QWORD *)(v74 - 8);
  v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
  v77 = v76(v72, 1, v74);
  v78 = v76(v73, 1, v74);
  if (v77)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v72, v73, v74);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v78)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v72, v74);
LABEL_43:
    v79 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 40))(v72, v73, v74);
LABEL_44:
  v80 = a3[12];
  *((_BYTE *)v141 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v81 = (_QWORD *)((char *)v141 + v80);
  v82 = (uint64_t *)((char *)a2 + v80);
  v84 = *v82;
  v83 = v82[1];
  v85 = v81[1];
  *v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease(v85);
  v86 = a3[13];
  v87 = (char *)v141 + v86;
  v88 = (_QWORD *)((char *)a2 + v86);
  v89 = (int *)_s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa(0);
  v90 = *((_QWORD *)v89 - 1);
  v91 = *(uint64_t (**)(char *, uint64_t, int *))(v90 + 48);
  v92 = v91(v87, 1, v89);
  v93 = v91((char *)v88, 1, v89);
  if (!v92)
  {
    if (v93)
    {
      sub_100042220((uint64_t)v87, _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa);
      goto LABEL_50;
    }
    v100 = v88[1];
    v101 = *((_QWORD *)v87 + 1);
    *(_QWORD *)v87 = *v88;
    *((_QWORD *)v87 + 1) = v100;
    swift_bridgeObjectRelease(v101);
    v102 = v88[3];
    v103 = *((_QWORD *)v87 + 3);
    *((_QWORD *)v87 + 2) = v88[2];
    *((_QWORD *)v87 + 3) = v102;
    swift_bridgeObjectRelease(v103);
    v104 = v89[6];
    v105 = &v87[v104];
    v106 = (char *)v88 + v104;
    v107 = v140(&v87[v104], 1, v18);
    v108 = v140(v106, 1, v18);
    if (v107)
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v105, v106, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v105, 0, 1, v18);
LABEL_65:
        v111 = v89[7];
        v112 = &v87[v111];
        v113 = (_QWORD *)((char *)v88 + v111);
        v115 = *v113;
        v114 = v113[1];
        v116 = *((_QWORD *)v112 + 1);
        *(_QWORD *)v112 = v115;
        *((_QWORD *)v112 + 1) = v114;
        swift_bridgeObjectRelease(v116);
        v117 = v89[8];
        v118 = &v87[v117];
        v119 = (_QWORD *)((char *)v88 + v117);
        v121 = *v119;
        v120 = v119[1];
        v122 = *((_QWORD *)v118 + 1);
        *(_QWORD *)v118 = v121;
        *((_QWORD *)v118 + 1) = v120;
        swift_bridgeObjectRelease(v122);
        return v141;
      }
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v136 + 40))(v105, v106, v18);
        goto LABEL_65;
      }
      (*(void (**)(char *, uint64_t))(v136 + 8))(v105, v18);
    }
    v110 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    goto LABEL_65;
  }
  if (v93)
  {
LABEL_50:
    v99 = sub_100030EE4(&qword_1000ECC60);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    return v141;
  }
  v94 = *((_OWORD *)v88 + 1);
  *(_OWORD *)v87 = *(_OWORD *)v88;
  *((_OWORD *)v87 + 1) = v94;
  v95 = v89[6];
  v96 = &v87[v95];
  v97 = (char *)v88 + v95;
  if (v140((char *)v88 + v95, 1, v18))
  {
    v98 = sub_100030EE4(&qword_1000EBA10);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v96, v97, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v96, 0, 1, v18);
  }
  *(_OWORD *)&v87[v89[7]] = *(_OWORD *)((char *)v88 + v89[7]);
  *(_OWORD *)&v87[v89[8]] = *(_OWORD *)((char *)v88 + v89[8]);
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v90 + 56))(v87, 0, 1, v89);
  return v141;
}

uint64_t sub_1000918C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000918D4);
}

uint64_t sub_1000918D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = sub_100030EE4(&qword_1000EBBA0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100030EE4(&qword_1000EBA10);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_100030EE4(&qword_1000ECC68);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = sub_100030EE4(&qword_1000ECC60);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(_QWORD *)(a1 + a3[12] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t sub_100091A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100091A14);
}

uint64_t sub_100091A14(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = sub_100030EE4(&qword_1000EBBA0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = sub_100030EE4(&qword_1000EBA10);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      v13 = sub_100030EE4(&qword_1000ECC68);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[8];
      }
      else
      {
        result = sub_100030EE4((uint64_t *)&unk_1000EC2E0);
        v9 = *(_QWORD *)(result - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = result;
          v11 = a4[10];
        }
        else
        {
          if (a3 == 2147483646)
          {
            *(_QWORD *)(a1 + a4[12] + 8) = a2;
            return result;
          }
          v10 = sub_100030EE4(&qword_1000ECC60);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[13];
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_100091B38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[10];

  v12[0] = &unk_1000B6B08;
  sub_100050F10(319, (unint64_t *)&unk_1000ECDC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v12[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100050F10(319, (unint64_t *)&qword_1000EBC48, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v4 - 8) + 64;
      v12[3] = &unk_1000B6B20;
      sub_100050F10(319, &qword_1000ECF10, _s14descr1000DA611V16AttributedStringV14ParagraphStyleVMa);
      if (v7 <= 0x3F)
      {
        v12[4] = *(_QWORD *)(v6 - 8) + 64;
        v12[5] = &unk_1000B6B38;
        sub_100050F10(319, (unint64_t *)&unk_1000EC598, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
        if (v9 <= 0x3F)
        {
          v12[6] = *(_QWORD *)(v8 - 8) + 64;
          v12[7] = &unk_1000B6B38;
          v12[8] = &unk_1000B6AC8;
          sub_100050F10(319, (unint64_t *)&unk_1000ECF18, _s14descr1000DA611V16AttributedStringV16InlineAttachmentVMa);
          if (v11 <= 0x3F)
          {
            v12[9] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 10, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t _s14descr1000DA611V16AttributedStringV4FontVwxx(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  result = a1[7];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[8]);
  }
  return result;
}

uint64_t _s14descr1000DA611V16AttributedStringV4FontVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t _s14descr1000DA611V16AttributedStringV4FontVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v7 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = (_OWORD *)(a1 + 48);
  v9 = (_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a2 + 56);
  if (v10)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v12 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v10);
      v13 = *(_QWORD *)(a2 + 64);
      v14 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_100090958(a1 + 48);
      v17 = *(_QWORD *)(a2 + 64);
      *v8 = *v9;
      *(_QWORD *)(a1 + 64) = v17;
    }
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v15;
    v16 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v16;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
  }
  else
  {
    v18 = *v9;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *v8 = v18;
  }
  return a1;
}

__n128 _s14descr1000DA611V16AttributedStringV4FontVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s14descr1000DA611V16AttributedStringV4FontVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  if (!v6)
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 56);
  if (!v7)
  {
    sub_100090958(a1 + 48);
LABEL_5:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    return a1;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v6);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s14descr1000DA611V16AttributedStringV4FontVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s14descr1000DA611V16AttributedStringV4FontVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV4FontVMa()
{
  return &_s14descr1000DA611V16AttributedStringV4FontVN;
}

uint64_t _s14descr1000DA611V16AttributedStringV5ColorVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s14descr1000DA611V16AttributedStringV5ColorVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *_s14descr1000DA611V16AttributedStringV5ColorVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *_s14descr1000DA611V16AttributedStringV5ColorVwta_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s14descr1000DA611V16AttributedStringV5ColorVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000921A4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringVMa()
{
  return &_s14descr1000DA611V16AttributedStringVN;
}

uint64_t sub_1000921F4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7475626972747461, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000922D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v3 = sub_100030EE4(&qword_1000ED0B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10004242C(a1, v7);
  v9 = sub_10009341C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV10CodingKeysON, v9, v7, v8);
  if (v1)
  {
    sub_100035424(a1);
  }
  else
  {
    v19 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    v12 = v11;
    v13 = sub_100030EE4(&qword_1000ED0C0);
    v17 = 1;
    v14 = sub_100093460(&qword_1000ED0C8, &qword_1000ED0D0, (uint64_t)&unk_1000B6C3C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v18;
    swift_bridgeObjectRetain(v18);
    sub_100035424(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

uint64_t sub_1000924BC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6563617073 && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563617073, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6E656E6F706D6F63 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease(0xEA00000000007374);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656E6F706D6F63, 0xEA00000000007374, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000925A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v3 = sub_100030EE4(&qword_1000ECF68);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10004242C(a1, v7);
  v9 = sub_100092784();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON, v9, v7, v8);
  if (v1)
  {
    sub_100035424(a1);
  }
  else
  {
    v19 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    v12 = v11;
    v13 = sub_100030EE4(&qword_1000ECF78);
    v17 = 1;
    v14 = sub_1000927C8(&qword_1000ECF80, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v18;
    swift_bridgeObjectRetain(v18);
    sub_100035424(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

unint64_t sub_100092784()
{
  unint64_t result;

  result = qword_1000ECF70;
  if (!qword_1000ECF70)
  {
    result = swift_getWitnessTable(&unk_1000B7908, &_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECF70);
  }
  return result;
}

uint64_t sub_1000927C8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100030FF0(&qword_1000ECF78);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100092828()
{
  unint64_t result;

  result = qword_1000ECFA0;
  if (!qword_1000ECFA0)
  {
    result = swift_getWitnessTable(&unk_1000B78B8, &_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECFA0);
  }
  return result;
}

unint64_t sub_10009286C()
{
  unint64_t result;

  result = qword_1000ECFB8;
  if (!qword_1000ECFB8)
  {
    result = swift_getWitnessTable(&unk_1000B7868, &_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ECFB8);
  }
  return result;
}

unint64_t sub_1000928B0()
{
  unint64_t result;

  result = qword_1000ECFC0;
  if (!qword_1000ECFC0)
  {
    result = swift_getWitnessTable(&unk_1000B7840, &_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesON);
    atomic_store(result, (unint64_t *)&qword_1000ECFC0);
  }
  return result;
}

unint64_t sub_1000928F4()
{
  unint64_t result;

  result = qword_1000ECFC8;
  if (!qword_1000ECFC8)
  {
    result = swift_getWitnessTable(&unk_1000B7818, &_s14descr1000DA611V16AttributedStringV10AlignmentsON);
    atomic_store(result, (unint64_t *)&qword_1000ECFC8);
  }
  return result;
}

unint64_t sub_100092938()
{
  unint64_t result;

  result = qword_1000ECFE0;
  if (!qword_1000ECFE0)
  {
    result = swift_getWitnessTable(&unk_1000B77F0, &_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesON);
    atomic_store(result, (unint64_t *)&qword_1000ECFE0);
  }
  return result;
}

unint64_t sub_10009297C()
{
  unint64_t result;

  result = qword_1000ECFE8;
  if (!qword_1000ECFE8)
  {
    result = swift_getWitnessTable(&unk_1000B77C8, &_s14descr1000DA611V16AttributedStringV10AlignmentsON);
    atomic_store(result, (unint64_t *)&qword_1000ECFE8);
  }
  return result;
}

unint64_t sub_1000929C0()
{
  unint64_t result;

  result = qword_1000ED000;
  if (!qword_1000ED000)
  {
    result = swift_getWitnessTable(&unk_1000B7778, &_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED000);
  }
  return result;
}

unint64_t sub_100092A04()
{
  unint64_t result;

  result = qword_1000ED018;
  if (!qword_1000ED018)
  {
    result = swift_getWitnessTable(&unk_1000B7728, &_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED018);
  }
  return result;
}

uint64_t sub_100092A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    return sub_100048F48(a7, a8, a9);
  }
  return result;
}

unint64_t sub_100092A94()
{
  unint64_t result;

  result = qword_1000ED020;
  if (!qword_1000ED020)
  {
    result = swift_getWitnessTable(&unk_1000B7700, &_s14descr1000DA611V16AttributedStringV14AttributeRangeVN);
    atomic_store(result, (unint64_t *)&qword_1000ED020);
  }
  return result;
}

unint64_t sub_100092AD8()
{
  unint64_t result;

  result = qword_1000ED028;
  if (!qword_1000ED028)
  {
    result = swift_getWitnessTable(&unk_1000B6BEC, &_s14descr1000DA611V16AttributedStringV4FontVN);
    atomic_store(result, (unint64_t *)&qword_1000ED028);
  }
  return result;
}

unint64_t sub_100092B1C()
{
  unint64_t result;

  result = qword_1000ED038;
  if (!qword_1000ED038)
  {
    result = swift_getWitnessTable(&unk_1000B76D8, &_s14descr1000DA611V16AttributedStringV13EmphasisStyleON);
    atomic_store(result, (unint64_t *)&qword_1000ED038);
  }
  return result;
}

unint64_t sub_100092B60()
{
  unint64_t result;

  result = qword_1000ED040;
  if (!qword_1000ED040)
  {
    result = swift_getWitnessTable(&unk_1000B76B0, &_s14descr1000DA611V16AttributedStringV17WritingDirectionsON);
    atomic_store(result, (unint64_t *)&qword_1000ED040);
  }
  return result;
}

unint64_t sub_100092BA4()
{
  unint64_t result;

  result = qword_1000ED058;
  if (!qword_1000ED058)
  {
    result = swift_getWitnessTable(&unk_1000B7688, &_s14descr1000DA611V16AttributedStringV14AttributeRangeVN);
    atomic_store(result, (unint64_t *)&qword_1000ED058);
  }
  return result;
}

unint64_t sub_100092BE8()
{
  unint64_t result;

  result = qword_1000ED060;
  if (!qword_1000ED060)
  {
    result = swift_getWitnessTable(&unk_1000B6BC4, &_s14descr1000DA611V16AttributedStringV4FontVN);
    atomic_store(result, (unint64_t *)&qword_1000ED060);
  }
  return result;
}

unint64_t sub_100092C2C()
{
  unint64_t result;

  result = qword_1000ED070;
  if (!qword_1000ED070)
  {
    result = swift_getWitnessTable(&unk_1000B7660, &_s14descr1000DA611V16AttributedStringV13EmphasisStyleON);
    atomic_store(result, (unint64_t *)&qword_1000ED070);
  }
  return result;
}

unint64_t sub_100092C70()
{
  unint64_t result;

  result = qword_1000ED078;
  if (!qword_1000ED078)
  {
    result = swift_getWitnessTable(&unk_1000B7638, &_s14descr1000DA611V16AttributedStringV17WritingDirectionsON);
    atomic_store(result, (unint64_t *)&qword_1000ED078);
  }
  return result;
}

uint64_t sub_100092CB4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x7A6953746E696F70 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7A6953746E696F70, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x646C6F427369 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x646C6F427369, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0x63696C6174497369 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C6174497369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 0x6C7265646E557369 && a2 == 0xEB00000000656E69
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C7265646E557369, 0xEB00000000656E69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 0x656B697274537369 && a2 == 0xEF6867756F726874
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656B697274537369, 0xEF6867756F726874, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  else if (a1 == 0x7263737265707573 && a2 == 0xEB00000000747069
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7263737265707573, 0xEB00000000747069, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F63, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_100092FE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;

  v5 = sub_100030EE4(&qword_1000ED088);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100093350();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_100035424(a1);
    swift_bridgeObjectRelease(0);
    return sub_100048F48(0, 0, 0);
  }
  else
  {
    LOBYTE(v30) = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    v14 = v13;
    LOBYTE(v30) = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    v33 = v16;
    v29 = v15;
    LOBYTE(v30) = 2;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    LOBYTE(v30) = 3;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    LOBYTE(v30) = 4;
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    LOBYTE(v30) = 5;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    LOBYTE(v30) = 6;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    HIDWORD(v23) = v18;
    v24 = v17;
    v34 = 7;
    sub_100093394();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s14descr1000DA611V16AttributedStringV5ColorVN, &v34, v5, &_s14descr1000DA611V16AttributedStringV5ColorVN);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v19 = v30;
    v20 = v31;
    v21 = v32;
    sub_1000833C8(v30, v31, v32);
    sub_100048F48(0, 0, 0);
    swift_bridgeObjectRetain(v14);
    sub_1000833C8(v19, v20, v21);
    sub_100048F48(v19, v20, v21);
    swift_bridgeObjectRelease(v14);
    sub_100035424(a1);
    swift_bridgeObjectRelease(v14);
    result = sub_100048F48(v19, v20, v21);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = v29;
    *(_BYTE *)(a2 + 24) = v33 & 1;
    *(_BYTE *)(a2 + 25) = v28;
    *(_BYTE *)(a2 + 26) = v27;
    *(_BYTE *)(a2 + 27) = v26;
    *(_BYTE *)(a2 + 28) = v25;
    *(_QWORD *)(a2 + 32) = v24;
    *(_BYTE *)(a2 + 40) = BYTE4(v23) & 1;
    *(_QWORD *)(a2 + 48) = v19;
    *(_QWORD *)(a2 + 56) = v20;
    *(_QWORD *)(a2 + 64) = v21;
  }
  return result;
}

unint64_t sub_100093350()
{
  unint64_t result;

  result = qword_1000ED090;
  if (!qword_1000ED090)
  {
    result = swift_getWitnessTable(&unk_1000B75E8, &_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED090);
  }
  return result;
}

unint64_t sub_100093394()
{
  unint64_t result;

  result = qword_1000ED098;
  if (!qword_1000ED098)
  {
    result = swift_getWitnessTable(&unk_1000B6D7C, &_s14descr1000DA611V16AttributedStringV5ColorVN);
    atomic_store(result, (unint64_t *)&qword_1000ED098);
  }
  return result;
}

unint64_t sub_1000933D8()
{
  unint64_t result;

  result = qword_1000ED0A8;
  if (!qword_1000ED0A8)
  {
    result = swift_getWitnessTable(&unk_1000B6D54, &_s14descr1000DA611V16AttributedStringV5ColorVN);
    atomic_store(result, (unint64_t *)&qword_1000ED0A8);
  }
  return result;
}

unint64_t sub_10009341C()
{
  unint64_t result;

  result = qword_1000ED0B8;
  if (!qword_1000ED0B8)
  {
    result = swift_getWitnessTable(&unk_1000B7598, &_s14descr1000DA611V16AttributedStringV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED0B8);
  }
  return result;
}

uint64_t sub_100093460(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100030FF0(&qword_1000ED0C0);
    sub_100042114(a2, _s14descr1000DA611V16AttributedStringV9AttributeVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV10CodingKeysOMa()
{
  return &_s14descr1000DA611V16AttributedStringV10CodingKeysON;
}

uint64_t _s14descr1000DA611V16AttributedStringV4FontV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100093548 + 4 * byte_1000B69FA[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10009357C + 4 * byte_1000B69F5[v4]))();
}

uint64_t sub_10009357C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009358CLL);
  return result;
}

uint64_t sub_100093598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000935A0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1000935A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000935AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysOMa()
{
  return &_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysOMa()
{
  return &_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysOMa()
{
  return &_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON;
}

uint64_t _s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100093644 + 4 * byte_1000B6A04[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100093678 + 4 * byte_1000B69FF[v4]))();
}

uint64_t sub_100093678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100093688);
  return result;
}

uint64_t sub_100093694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009369CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000936A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000936A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysOMa()
{
  return &_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysOMa()
{
  return &_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysOMa()
{
  return &_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV10AlignmentsOMa()
{
  return &_s14descr1000DA611V16AttributedStringV10AlignmentsON;
}

uint64_t _s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1000937D0 + 4 * byte_1000B6A0E[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100093804 + 4 * byte_1000B6A09[v4]))();
}

uint64_t sub_100093804(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009380C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100093814);
  return result;
}

uint64_t sub_100093820(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100093828);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10009382C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093834(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesOMa()
{
  return &_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesON;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV17WritingDirectionsOMa()
{
  return &_s14descr1000DA611V16AttributedStringV17WritingDirectionsON;
}

uint64_t _s14descr1000DA611V16AttributedStringV10AlignmentsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000938AC + 4 * byte_1000B6A18[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000938E0 + 4 * byte_1000B6A13[v4]))();
}

uint64_t sub_1000938E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000938E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000938F0);
  return result;
}

uint64_t sub_1000938FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100093904);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100093908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100093910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV13EmphasisStyleOMa()
{
  return &_s14descr1000DA611V16AttributedStringV13EmphasisStyleON;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV14AttributeRangeVMa()
{
  return &_s14descr1000DA611V16AttributedStringV14AttributeRangeVN;
}

unint64_t sub_100093940()
{
  unint64_t result;

  result = qword_1000ED0F0;
  if (!qword_1000ED0F0)
  {
    result = swift_getWitnessTable(&unk_1000B6E88, &_s14descr1000DA611V16AttributedStringV13EmphasisStyleON);
    atomic_store(result, (unint64_t *)&qword_1000ED0F0);
  }
  return result;
}

unint64_t sub_100093988()
{
  unint64_t result;

  result = qword_1000ED0F8;
  if (!qword_1000ED0F8)
  {
    result = swift_getWitnessTable(&unk_1000B6F28, &_s14descr1000DA611V16AttributedStringV17WritingDirectionsON);
    atomic_store(result, (unint64_t *)&qword_1000ED0F8);
  }
  return result;
}

unint64_t sub_1000939D0()
{
  unint64_t result;

  result = qword_1000ED100;
  if (!qword_1000ED100)
  {
    result = swift_getWitnessTable(&unk_1000B6FC8, &_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesON);
    atomic_store(result, (unint64_t *)&qword_1000ED100);
  }
  return result;
}

unint64_t sub_100093A18()
{
  unint64_t result;

  result = qword_1000ED108;
  if (!qword_1000ED108)
  {
    result = swift_getWitnessTable(&unk_1000B7068, &_s14descr1000DA611V16AttributedStringV10AlignmentsON);
    atomic_store(result, (unint64_t *)&qword_1000ED108);
  }
  return result;
}

unint64_t sub_100093A60()
{
  unint64_t result;

  result = qword_1000ED110;
  if (!qword_1000ED110)
  {
    result = swift_getWitnessTable(&unk_1000B7120, &_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED110);
  }
  return result;
}

unint64_t sub_100093AA8()
{
  unint64_t result;

  result = qword_1000ED118;
  if (!qword_1000ED118)
  {
    result = swift_getWitnessTable(&unk_1000B71D8, &_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED118);
  }
  return result;
}

unint64_t sub_100093AF0()
{
  unint64_t result;

  result = qword_1000ED120;
  if (!qword_1000ED120)
  {
    result = swift_getWitnessTable(&unk_1000B7290, &_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED120);
  }
  return result;
}

unint64_t sub_100093B38()
{
  unint64_t result;

  result = qword_1000ED128;
  if (!qword_1000ED128)
  {
    result = swift_getWitnessTable(&unk_1000B7348, &_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED128);
  }
  return result;
}

unint64_t sub_100093B80()
{
  unint64_t result;

  result = qword_1000ED130;
  if (!qword_1000ED130)
  {
    result = swift_getWitnessTable(&unk_1000B7400, &_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED130);
  }
  return result;
}

unint64_t sub_100093BC8()
{
  unint64_t result;

  result = qword_1000ED138;
  if (!qword_1000ED138)
  {
    result = swift_getWitnessTable(&unk_1000B74B8, &_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED138);
  }
  return result;
}

unint64_t sub_100093C10()
{
  unint64_t result;

  result = qword_1000ED140;
  if (!qword_1000ED140)
  {
    result = swift_getWitnessTable(&unk_1000B7570, &_s14descr1000DA611V16AttributedStringV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED140);
  }
  return result;
}

unint64_t sub_100093C58()
{
  unint64_t result;

  result = qword_1000ED148;
  if (!qword_1000ED148)
  {
    result = swift_getWitnessTable(&unk_1000B74E0, &_s14descr1000DA611V16AttributedStringV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED148);
  }
  return result;
}

unint64_t sub_100093CA0()
{
  unint64_t result;

  result = qword_1000ED150;
  if (!qword_1000ED150)
  {
    result = swift_getWitnessTable(&unk_1000B7508, &_s14descr1000DA611V16AttributedStringV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED150);
  }
  return result;
}

unint64_t sub_100093CE8()
{
  unint64_t result;

  result = qword_1000ED158;
  if (!qword_1000ED158)
  {
    result = swift_getWitnessTable(&unk_1000B7428, &_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED158);
  }
  return result;
}

unint64_t sub_100093D30()
{
  unint64_t result;

  result = qword_1000ED160;
  if (!qword_1000ED160)
  {
    result = swift_getWitnessTable(&unk_1000B7450, &_s14descr1000DA611V16AttributedStringV4FontV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED160);
  }
  return result;
}

unint64_t sub_100093D78()
{
  unint64_t result;

  result = qword_1000ED168;
  if (!qword_1000ED168)
  {
    result = swift_getWitnessTable(&unk_1000B7370, &_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED168);
  }
  return result;
}

unint64_t sub_100093DC0()
{
  unint64_t result;

  result = qword_1000ED170;
  if (!qword_1000ED170)
  {
    result = swift_getWitnessTable(&unk_1000B7398, &_s14descr1000DA611V16AttributedStringV9AttributeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED170);
  }
  return result;
}

unint64_t sub_100093E08()
{
  unint64_t result;

  result = qword_1000ED178;
  if (!qword_1000ED178)
  {
    result = swift_getWitnessTable(&unk_1000B72B8, &_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED178);
  }
  return result;
}

unint64_t sub_100093E50()
{
  unint64_t result;

  result = qword_1000ED180;
  if (!qword_1000ED180)
  {
    result = swift_getWitnessTable(&unk_1000B72E0, &_s14descr1000DA611V16AttributedStringV16InlineAttachmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED180);
  }
  return result;
}

unint64_t sub_100093E98()
{
  unint64_t result;

  result = qword_1000ED188;
  if (!qword_1000ED188)
  {
    result = swift_getWitnessTable(&unk_1000B7200, &_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED188);
  }
  return result;
}

unint64_t sub_100093EE0()
{
  unint64_t result;

  result = qword_1000ED190;
  if (!qword_1000ED190)
  {
    result = swift_getWitnessTable(&unk_1000B7228, &_s14descr1000DA611V16AttributedStringV14ParagraphStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED190);
  }
  return result;
}

unint64_t sub_100093F28()
{
  unint64_t result;

  result = qword_1000ED198;
  if (!qword_1000ED198)
  {
    result = swift_getWitnessTable(&unk_1000B7148, &_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED198);
  }
  return result;
}

unint64_t sub_100093F70()
{
  unint64_t result;

  result = qword_1000ED1A0;
  if (!qword_1000ED1A0)
  {
    result = swift_getWitnessTable(&unk_1000B7170, &_s14descr1000DA611V16AttributedStringV13ChecklistItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED1A0);
  }
  return result;
}

unint64_t sub_100093FB8()
{
  unint64_t result;

  result = qword_1000ED1A8;
  if (!qword_1000ED1A8)
  {
    result = swift_getWitnessTable(&unk_1000B7090, &_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED1A8);
  }
  return result;
}

unint64_t sub_100094000()
{
  unint64_t result;

  result = qword_1000ED1B0;
  if (!qword_1000ED1B0)
  {
    result = swift_getWitnessTable(&unk_1000B70B8, &_s14descr1000DA611V16AttributedStringV5ColorV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED1B0);
  }
  return result;
}

unint64_t sub_100094044(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D6FA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t sub_10009408C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x656E6F447369 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F447369, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100094174(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  char v7;

  v3 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656D6E67696C61, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0x746E65646E69 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65646E69, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  if (a1 == 0xD000000000000012)
  {
    v6 = 0x80000001000B1250;
    if (a2 == 0x80000001000B1250)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000B1250, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v6);
    return 3;
  }
  if (a1 == 0x73696C6B63656863 && a2 == 0xED00006D65744974
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73696C6B63656863, 0xED00006D65744974, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 0x6F75516B636F6C62 && a2 == 0xEF6C6576654C6574
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F75516B636F6C62, 0xEF6C6576654C6574, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  else if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 6;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1684632949, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_100094438()
{
  unint64_t result;

  result = qword_1000ED1B8;
  if (!qword_1000ED1B8)
  {
    result = swift_getWitnessTable(&unk_1000B6F50, &_s14descr1000DA611V16AttributedStringV19ParagraphStyleNamesON);
    atomic_store(result, (unint64_t *)&qword_1000ED1B8);
  }
  return result;
}

unint64_t sub_10009447C()
{
  unint64_t result;

  result = qword_1000ED1C0;
  if (!qword_1000ED1C0)
  {
    result = swift_getWitnessTable(&unk_1000B6FF0, &_s14descr1000DA611V16AttributedStringV10AlignmentsON);
    atomic_store(result, (unint64_t *)&qword_1000ED1C0);
  }
  return result;
}

unint64_t sub_1000944C0(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 5)
    return 5;
  else
    return v5;
}

uint64_t sub_100094504(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000018 && a2 == 0x80000001000B0E50)
  {
    v4 = 0x80000001000B0E50;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001000B0E50, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  if (a1 == 0xD000000000000011)
  {
    v6 = 0x80000001000B1270;
    if (a2 == 0x80000001000B1270)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000B1270, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v6);
    return 3;
  }
  if (a1 == 0x74786554746C61 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74786554746C61, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100094718(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7441737472617473 && a2 == 0xE800000000000000;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7441737472617473, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6874676E656CLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000947F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  v3 = sub_100030EE4(&qword_1000ED1C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10004242C(a1, v7);
  v9 = sub_100094D10();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON, &_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON, v9, v7, v8);
  if (!v1)
  {
    v13 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    v12 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100035424(a1);
  return v7;
}

uint64_t sub_100094948(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v3 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6172, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v6 = 0x80000001000B1290;
    if (a2 == 0x80000001000B1290)
      goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000B1290, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  if (a1 == 1953394534 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1953394534, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  if (a1 == 0x7061726761726170 && a2 == 0xEE00656C79745368
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7061726761726170, 0xEE00656C79745368, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  if (a1 == 0x7369736168706D65 && a2 == 0xED0000656C797453
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7369736168706D65, 0xED0000656C797453, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  if (a1 == 1802398060 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1802398060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x80000001000B12B0;
    if (a2 == 0x80000001000B12B0)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000B12B0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v7);
    return 7;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001000B12D0)
  {
    v8 = 0x80000001000B12D0;
LABEL_42:
    swift_bridgeObjectRelease(v8);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000B12D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001000B12F0)
  {
    swift_bridgeObjectRelease(0x80000001000B12F0);
    return 9;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000B12F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

unint64_t sub_100094D10()
{
  unint64_t result;

  result = qword_1000ED1D0;
  if (!qword_1000ED1D0)
  {
    result = swift_getWitnessTable(&unk_1000B7A10, &_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED1D0);
  }
  return result;
}

unint64_t sub_100094D54()
{
  unint64_t result;

  result = qword_1000ED1D8;
  if (!qword_1000ED1D8)
  {
    result = swift_getWitnessTable(&unk_1000B6E10, &_s14descr1000DA611V16AttributedStringV13EmphasisStyleON);
    atomic_store(result, (unint64_t *)&qword_1000ED1D8);
  }
  return result;
}

unint64_t sub_100094D98()
{
  unint64_t result;

  result = qword_1000ED1E0;
  if (!qword_1000ED1E0)
  {
    result = swift_getWitnessTable(&unk_1000B6EB0, &_s14descr1000DA611V16AttributedStringV17WritingDirectionsON);
    atomic_store(result, (unint64_t *)&qword_1000ED1E0);
  }
  return result;
}

uint64_t _s14descr1000DA611V16AttributedStringV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100094E28 + 4 * byte_1000B6A22[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100094E5C + 4 * byte_1000B6A1D[v4]))();
}

uint64_t sub_100094E5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100094E64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100094E6CLL);
  return result;
}

uint64_t sub_100094E78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100094E80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100094E84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100094E8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysOMa()
{
  return &_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON;
}

unint64_t sub_100094EAC()
{
  unint64_t result;

  result = qword_1000ED1F0;
  if (!qword_1000ED1F0)
  {
    result = swift_getWitnessTable(&unk_1000B79E8, &_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED1F0);
  }
  return result;
}

unint64_t sub_100094EF4()
{
  unint64_t result;

  result = qword_1000ED1F8;
  if (!qword_1000ED1F8)
  {
    result = swift_getWitnessTable(&unk_1000B7958, &_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED1F8);
  }
  return result;
}

unint64_t sub_100094F3C()
{
  unint64_t result;

  result = qword_1000ED200;
  if (!qword_1000ED200)
  {
    result = swift_getWitnessTable(&unk_1000B7980, &_s14descr1000DA611V16AttributedStringV14AttributeRangeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED200);
  }
  return result;
}

uint64_t sub_100094F98(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100095F80(a1, a2, a3 & 1);
}

id sub_100094FB0(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  id result;
  void *v8;
  uint64_t v9;
  void *ObjCClassFromMetadata;
  NSString v11;
  id v12;

  result = objc_msgSend(v3, "managedObjectContext");
  if (result)
  {
    v8 = result;
    if ((a3 & 1) == 0
      || (v9 = sub_100036000(0, &qword_1000ED218, ICAccount_ptr),
          ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v9),
          v11 = String._bridgeToObjectiveC()(),
          v12 = objc_msgSend(ObjCClassFromMetadata, "cloudObjectWithIdentifier:context:", v11, v8),
          v11,
          !v12))
    {
      v12 = sub_100095888(a1, a2, a3 & 1);
    }

    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10009509C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100095888(a1, a2, a3 & 1);
}

id sub_1000950B4()
{
  void *v0;
  void *v1;
  id v2;
  id v3;

  v1 = (void *)objc_opt_self(ICNote);
  v2 = objc_msgSend(v0, "defaultFolder");
  v3 = objc_msgSend(v1, "newEmptyNoteInFolder:", v2);

  return v3;
}

uint64_t sub_100095128()
{
  return sub_10009580C();
}

id sub_10009513C(uint64_t a1, uint64_t a2, id a3, void *a4)
{
  void *v4;
  void *v5;
  id result;
  void *v11;
  unsigned int v12;
  id v13;
  uint64_t v14;
  void *ObjCClassFromMetadata;
  NSString v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  char v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  void *v28;
  NSString v29;
  id v30;

  v5 = v4;
  result = objc_msgSend(v5, "managedObjectContext");
  if (result)
  {
    v11 = result;
    v12 = objc_msgSend(v5, "canAddSubfolder");
    if ((a3 & 1) == 0)
    {
      if (v12)
      {
        v13 = objc_msgSend((id)objc_opt_self(ICFolder), "newFolderInParentFolder:", v5);
LABEL_18:
        v27 = v13;

        return v27;
      }
      v23 = objc_msgSend(v5, "account");
      a3 = sub_100095888(a1, a2, 0);

      return a3;
    }
    if (!v12)
    {
      v24 = sub_1000360B4();
      v25 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v24, 0, 0);
      *v26 = 2;
      swift_willThrow(v25);

      return a3;
    }
    if (!objc_msgSend(v5, "canAddSubfolder"))
    {
      v13 = v5;
      goto LABEL_18;
    }
    v14 = sub_100036000(0, &qword_1000ED210, ICFolder_ptr);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v14);
    v16 = String._bridgeToObjectiveC()();
    a3 = objc_msgSend(ObjCClassFromMetadata, "cloudObjectWithIdentifier:context:", v16, v11);

    if (a3)
    {
      if ((static NSObject.== infix(_:_:)(a3, v5) & 1) != 0)
        goto LABEL_26;
      v17 = objc_msgSend(v5, "objectID");
      v18 = v17;
      if (a4)
      {
        v19 = objc_msgSend(a4, "objectID");
        v20 = v19;
        if (v18)
        {
          if (v19)
          {
            sub_100036000(0, &qword_1000EC970, NSManagedObjectID_ptr);
            v21 = v18;
            v22 = static NSObject.== infix(_:_:)(v21, v20);

            if ((v22 & 1) != 0)
              goto LABEL_26;
            goto LABEL_24;
          }
        }
        else
        {
          v18 = v19;
          if (!v19)
            goto LABEL_26;
        }
      }
      else if (!v17)
      {
        goto LABEL_26;
      }

LABEL_24:
      if (objc_msgSend(a3, "isMovable"))
      {
        objc_msgSend(a3, "unmarkForDeletion");
        objc_msgSend(a3, "setParent:", v5);

        return a3;
      }
LABEL_26:
      objc_msgSend(a3, "unmarkForDeletion");

      return a3;
    }
    v28 = (void *)objc_opt_self(ICFolder);
    v29 = String._bridgeToObjectiveC()();
    v30 = objc_msgSend(v28, "newFolderWithIdentifier:parentFolder:", v29, v5);

    return v30;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10009544C(uint64_t a1, uint64_t a2, __int16 a3, void *a4, id a5, double a6)
{
  void *v6;
  void *v7;
  id result;
  void *v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  void *ObjCClassFromMetadata;
  NSString v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  char v26;
  id v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  NSString v33;

  v7 = v6;
  result = objc_msgSend(v7, "managedObjectContext");
  if (result)
  {
    v15 = result;
    v16 = objc_msgSend(v7, "canMoveAddOrDeleteContents");
    if ((a3 & 1) == 0)
    {
      if (v16)
      {
        v17 = objc_msgSend((id)objc_opt_self(ICNote), "newEmptyNoteInFolder:", v7);

        return v17;
      }
      v27 = objc_msgSend(v7, "account");
      v28 = objc_msgSend(v27, "defaultFolder");

      a5 = (id)sub_10009544C(a1, a2, a3 & 0x100, a4, a5, a6);
      return a5;
    }
    if (!v16)
    {
      v29 = sub_1000360B4();
      v30 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v29, 0, 0);
      *v31 = 2;
      swift_willThrow(v30);

      return a5;
    }
    v18 = sub_100036000(0, &qword_1000EB970, ICNote_ptr);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v18);
    v20 = String._bridgeToObjectiveC()();
    a5 = objc_msgSend(ObjCClassFromMetadata, "cloudObjectWithIdentifier:context:", v20, v15);

    if (!a5)
    {
      v32 = (void *)objc_opt_self(ICNote);
      v33 = String._bridgeToObjectiveC()();
      v17 = objc_msgSend(v32, "newEmptyNoteWithIdentifier:folder:", v33, v7);

      return v17;
    }
    v21 = objc_msgSend(v7, "objectID");
    v22 = v21;
    if (a4)
    {
      v23 = objc_msgSend(a4, "objectID");
      v24 = v23;
      if (v22)
      {
        if (v23)
        {
          sub_100036000(0, &qword_1000EC970, NSManagedObjectID_ptr);
          v25 = v22;
          v26 = static NSObject.== infix(_:_:)(v25, v24);

          if ((v26 & 1) != 0)
            goto LABEL_22;
          goto LABEL_20;
        }
      }
      else
      {
        v22 = v23;
        if (!v23)
          goto LABEL_22;
      }
    }
    else if (!v21)
    {
      goto LABEL_22;
    }

LABEL_20:
    if (objc_msgSend(a5, "isMovable"))
    {
      objc_msgSend(a5, "unmarkForDeletion");
      objc_msgSend(a5, "setFolder:", v7);
LABEL_23:

      return a5;
    }
LABEL_22:
    objc_msgSend(a5, "unmarkForDeletion");
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10009575C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100095DE0(a1, a2, a3 & 1);
}

id sub_100095774(uint64_t a1, uint64_t a2, __int16 a3, void *a4)
{
  return sub_10009513C(a1, a2, (id)(a3 & 0x101), a4);
}

id sub_100095790(uint64_t a1, uint64_t a2, __int16 a3, void *a4, void *a5, double a6)
{
  return sub_10009544C(a1, a2, a3 & 0x101, a4, a5, a6);
}

uint64_t sub_1000957AC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100095C04(a1, a2, a3 & 1);
}

id sub_1000957C4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000967F0(a1, a2, a3 & 1);
}

id sub_1000957DC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10009634C(a1, a2, a3 & 1);
}

uint64_t sub_1000957F4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100095A04(a1, a2, a3 & 1);
}

uint64_t sub_10009580C()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v0 = sub_1000360B4();
  v1 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v0, 0, 0);
  *v2 = 1;
  return swift_willThrow(v1);
}

id sub_100095858(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100096570(a1, a2, a3 & 1);
}

id sub_100095870(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000960FC(a1, a2, a3 & 1);
}

id sub_100095888(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  id result;
  void *v7;
  uint64_t v8;
  void *ObjCClassFromMetadata;
  NSString v10;
  id v11;
  void *v12;
  NSString v13;

  v4 = v3;
  result = objc_msgSend(v3, "managedObjectContext");
  if (result)
  {
    v7 = result;
    if ((a3 & 1) != 0)
    {
      v8 = sub_100036000(0, &qword_1000ED210, ICFolder_ptr);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v8);
      v10 = String._bridgeToObjectiveC()();
      v11 = objc_msgSend(ObjCClassFromMetadata, "cloudObjectWithIdentifier:context:", v10, v7);

      if (v11)
      {
        if (objc_msgSend(v11, "isMovable"))
          objc_msgSend(v11, "setParent:", 0);
        else
          objc_msgSend(v11, "unmarkForDeletion");
      }
      else
      {
        v12 = (void *)objc_opt_self(ICFolder);
        v13 = String._bridgeToObjectiveC()();
        v11 = objc_msgSend(v12, "newFolderWithIdentifier:account:", v13, v4);

        v7 = v13;
      }
    }
    else
    {
      v11 = objc_msgSend((id)objc_opt_self(ICFolder), "newFolderInAccount:", v4);
    }

    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100095A04(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  id v4;
  void *v5;
  id v8;
  void *v9;
  id v10;
  NSString v11;
  NSString v12;
  NSString v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;

  v5 = v3;
  v8 = objc_msgSend(v5, "note");
  if (!v8 || (v9 = v8, v4 = objc_msgSend(v8, "account"), v9, !v4))
  {
    v14 = sub_1000360B4();
    v15 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v14, 0, 0);
    *v16 = 1;
    swift_willThrow(v15);
    return (uint64_t)v4;
  }
  swift_bridgeObjectRetain(a2);
  v10 = v4;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v4 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagWithDisplayText:account:createIfNecessary:", v11, v10, 1);

  if (v4)
  {
    if ((a3 & 1) != 0)
    {
      v12 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "setDisplayText:", v12);

      objc_msgSend(v4, "unmarkForDeletion");
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "updateChangeCountWithReason:", v13);

    }
    else
    {

    }
    return (uint64_t)v4;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001000B0690, "com_apple_mobilenotes_SharingExtension/ICImportableObject.swift", 63, 2, 37, 0);
  __break(1u);
  return result;
}

uint64_t sub_100095C04(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  id v4;
  id v7;
  void *v8;
  id v9;
  NSString v10;
  NSString v11;
  NSString v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;

  v7 = objc_msgSend(v3, "account");
  if (!v7)
  {
    v13 = sub_1000360B4();
    v14 = swift_allocError(&type metadata for ICArchiveImporter.Errors, v13, 0, 0);
    *v15 = 1;
    swift_willThrow(v14);
    return (uint64_t)v4;
  }
  v8 = v7;
  swift_bridgeObjectRetain(a2);
  v9 = v8;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v4 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagWithDisplayText:account:createIfNecessary:", v10, v9, 1);

  if (v4)
  {
    if ((a3 & 1) != 0)
    {
      v11 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "setDisplayText:", v11);

      objc_msgSend(v4, "unmarkForDeletion");
      v12 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "updateChangeCountWithReason:", v12);

    }
    else
    {

    }
    return (uint64_t)v4;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001000B0690, "com_apple_mobilenotes_SharingExtension/ICImportableObject.swift", 63, 2, 37, 0);
  __break(1u);
  return result;
}

uint64_t sub_100095DE0(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  id v6;
  id v7;
  NSString v8;
  id v9;
  NSString v10;
  NSString v11;
  uint64_t result;

  v6 = objc_msgSend(v3, "account");
  swift_bridgeObjectRetain(a2);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v9 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagWithDisplayText:account:createIfNecessary:", v8, v7, 1);

  if (v9)
  {
    if ((a3 & 1) != 0)
    {
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v9, "setDisplayText:", v10);

      objc_msgSend(v9, "unmarkForDeletion");
      v11 = String._bridgeToObjectiveC()();
      objc_msgSend(v9, "updateChangeCountWithReason:", v11);

      v7 = v11;
    }

    return (uint64_t)v9;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001000B0690, "com_apple_mobilenotes_SharingExtension/ICImportableObject.swift", 63, 2, 37, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100095F80(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  id v6;
  NSString v7;
  id v8;
  NSString v9;
  NSString v10;
  uint64_t result;

  swift_bridgeObjectRetain(a2);
  v6 = v3;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagWithDisplayText:account:createIfNecessary:", v7, v6, 1);

  if (v8)
  {
    if ((a3 & 1) != 0)
    {
      v9 = String._bridgeToObjectiveC()();
      objc_msgSend(v8, "setDisplayText:", v9);

      objc_msgSend(v8, "unmarkForDeletion");
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v8, "updateChangeCountWithReason:", v10);

    }
    return (uint64_t)v8;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001000B0690, "com_apple_mobilenotes_SharingExtension/ICImportableObject.swift", 63, 2, 37, 0);
    __break(1u);
  }
  return result;
}

id sub_1000960FC(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id result;
  void *v11;
  void *v12;
  uint64_t v13;
  void *ObjCClassFromMetadata;
  NSString v15;
  id v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  id v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v3, "managedObjectContext");
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  v11 = result;
  result = objc_msgSend(v3, "note");
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v12 = result;
  if ((a3 & 1) != 0)
  {
    v13 = sub_100036000(0, &qword_1000EBEB0, ICInlineAttachment_ptr);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v13);
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(ObjCClassFromMetadata, "cloudObjectWithIdentifier:context:", v15, v11);

    if (v16)
    {
      objc_msgSend(v16, "setNote:", v12);
      objc_msgSend(v16, "setParentAttachment:", v3);
      objc_msgSend(v16, "unmarkForDeletion");
      v17 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "updateChangeCountWithReason:", v17);

      return v16;
    }
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v4, "addInlineAttachmentWithIdentifier:", v21);
  }
  else
  {
    v18 = UUID.init()(result);
    UUID.uuidString.getter(v18);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v22 = objc_msgSend(v4, "addInlineAttachmentWithIdentifier:", v21);
  }
  v23 = v22;

  return v23;
}

id sub_10009634C(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id result;
  void *v11;
  uint64_t v12;
  void *ObjCClassFromMetadata;
  NSString v14;
  id v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  id v21;
  id v22;
  uint64_t v23;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v3, "managedObjectContext");
  if (result)
  {
    v11 = result;
    if ((a3 & 1) != 0)
    {
      v12 = sub_100036000(0, &qword_1000EBEB0, ICInlineAttachment_ptr);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v12);
      v14 = String._bridgeToObjectiveC()();
      v15 = objc_msgSend(ObjCClassFromMetadata, "cloudObjectWithIdentifier:context:", v14, v11);

      if (v15)
      {
        objc_msgSend(v15, "setNote:", v3);
        objc_msgSend(v15, "setParentAttachment:", 0);
        objc_msgSend(v15, "unmarkForDeletion");
        v16 = String._bridgeToObjectiveC()();
        objc_msgSend(v15, "updateChangeCountWithReason:", v16);

        return v15;
      }
      v20 = String._bridgeToObjectiveC()();
      v21 = objc_msgSend(v4, "addInlineAttachmentWithIdentifier:", v20);
    }
    else
    {
      v17 = UUID.init()(result);
      UUID.uuidString.getter(v17);
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v19);
      v21 = objc_msgSend(v4, "addInlineAttachmentWithIdentifier:", v20);
    }
    v22 = v21;

    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100096570(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id result;
  void *v11;
  void *v12;
  uint64_t v13;
  void *ObjCClassFromMetadata;
  NSString v15;
  id v16;
  NSString v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  void *v23;
  NSString v24;
  uint64_t v25;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v4, "managedObjectContext");
  if (result)
  {
    v11 = result;
    result = objc_msgSend(v4, "note");
    if (result)
    {
      v12 = result;
      if ((a3 & 1) != 0)
      {
        v13 = sub_100036000(0, &qword_1000ED208, ICAttachment_ptr);
        ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v13);
        v15 = String._bridgeToObjectiveC()();
        v16 = objc_msgSend(ObjCClassFromMetadata, "cloudObjectWithIdentifier:context:", v15, v11);

        if (v16)
        {
          objc_msgSend(v16, "setNote:", v12);
          objc_msgSend(v16, "setParentAttachment:", v4);
          objc_msgSend(v16, "unmarkForDeletion");
          v17 = String._bridgeToObjectiveC()();
          objc_msgSend(v16, "updateChangeCountWithReason:", v17);

          return v16;
        }
        v23 = (void *)objc_opt_self(ICAttachment);
        v24 = String._bridgeToObjectiveC()();
        v16 = objc_msgSend(v23, "newAttachmentWithIdentifier:note:", v24, v12);

      }
      else
      {
        v18 = (void *)objc_opt_self(ICAttachment);
        v19 = UUID.init()(v18);
        UUID.uuidString.getter(v19);
        v21 = v20;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v21);
        v16 = objc_msgSend(v18, "newAttachmentWithIdentifier:note:", v22, v12);

      }
      objc_msgSend(v16, "setParentAttachment:", v4);

      return v16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1000967F0(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id result;
  void *v11;
  uint64_t v12;
  void *ObjCClassFromMetadata;
  NSString v14;
  id v15;
  NSString v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSString v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v3, "managedObjectContext");
  if (result)
  {
    v11 = result;
    if ((a3 & 1) != 0)
    {
      v12 = sub_100036000(0, &qword_1000ED208, ICAttachment_ptr);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v12);
      v14 = String._bridgeToObjectiveC()();
      v15 = objc_msgSend(ObjCClassFromMetadata, "cloudObjectWithIdentifier:context:", v14, v11);

      if (!v15)
      {
        v21 = (void *)objc_opt_self(ICAttachment);
        v22 = String._bridgeToObjectiveC()();
        v23 = objc_msgSend(v21, "newAttachmentWithIdentifier:note:", v22, v4);

        return v23;
      }
      objc_msgSend(v15, "setNote:", v3);
      objc_msgSend(v15, "setParentAttachment:", 0);
      objc_msgSend(v15, "unmarkForDeletion");
      v16 = String._bridgeToObjectiveC()();
      objc_msgSend(v15, "updateChangeCountWithReason:", v16);
    }
    else
    {
      v17 = (void *)objc_opt_self(ICAttachment);
      v18 = UUID.init()(v17);
      UUID.uuidString.getter(v18);
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      v15 = objc_msgSend(v17, "newAttachmentWithIdentifier:note:", v16, v4);
    }

    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100096A34()
{
  return sub_100042114(&qword_1000EC0F0, _s14descr1000DA8A1V3TagVMa, (uint64_t)&unk_1000B7D74);
}

uint64_t _s14descr1000DA8A1V3TagVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1000ED288;
  if (!qword_1000ED288)
    return swift_getSingletonMetadata(a1, &_s14descr1000DA8A1V3TagVMn);
  return result;
}

uint64_t sub_100096A9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000834C4(v2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v11 = sub_100042114(&qword_1000EC9A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12 = (uint64_t *)(v2 + *(int *)(_s14descr1000DA8A1V3TagVMa(0) + 20));
  v13 = *v12;
  v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_100096C0C(char a1)
{
  if ((a1 & 1) != 0)
    return 1954047348;
  else
    return 0x4164657461657263;
}

uint64_t sub_100096C40(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ED2E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_100097504();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14descr1000DA8A1V3TagV10CodingKeysON, &_s14descr1000DA8A1V3TagV10CodingKeysON, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100042114(&qword_1000EBD30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = (uint64_t *)(v3 + *(int *)(_s14descr1000DA8A1V3TagVMa(0) + 20));
    v15 = *v14;
    v16 = v14[1];
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100096D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[9];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v6);
  v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v15, 0);
  sub_1000834C4(v1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    v9 = sub_100042114(&qword_1000EC9A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v15, v2, v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v10 = (uint64_t *)(v1 + *(int *)(_s14descr1000DA8A1V3TagVMa(0) + 20));
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(v15, v11, v12);
  swift_bridgeObjectRelease(v12);
  return Hasher._finalize()();
}

uint64_t sub_100096F18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;

  v24 = a2;
  v3 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v3);
  v26 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100030EE4(&qword_1000ED220);
  v5 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s14descr1000DA8A1V3TagVMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v13 = a1[3];
  v12 = a1[4];
  sub_10004242C(a1, v13);
  v14 = sub_100097504();
  v27 = v7;
  v15 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14descr1000DA8A1V3TagV10CodingKeysON, &_s14descr1000DA8A1V3TagV10CodingKeysON, v14, v13, v12);
  if (v15)
  {
    sub_100035424(a1);
    return sub_100036060((uint64_t)v10, &qword_1000EBA10);
  }
  else
  {
    v16 = v24;
    v30 = 0;
    sub_100042114(&qword_1000EBDA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v17 = v25;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v11, &v30, v25, v11);
    sub_100048A00(v26, (uint64_t)v10);
    v29 = 1;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v17);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v17);
    v21 = (uint64_t *)&v10[*(int *)(v8 + 20)];
    *v21 = v18;
    v21[1] = v20;
    sub_100042198((uint64_t)v10, v16);
    sub_100035424(a1);
    return sub_100061B94((uint64_t)v10);
  }
}

uint64_t sub_10009717C()
{
  char *v0;

  return sub_100096C0C(*v0);
}

uint64_t sub_100097184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000980E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000971A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100097504();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000971D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100097504();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000971F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100096F18(a1, a2);
}

uint64_t sub_10009720C(_QWORD *a1)
{
  return sub_100096C40(a1);
}

Swift::Int sub_100097228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[9];

  v4 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100030EE4(&qword_1000EBA10);
  __chkstk_darwin(v10);
  v12 = (char *)&v19[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v19, a1);
  sub_1000834C4(v4, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    Hasher._combine(_:)(1u);
    v13 = sub_100042114(&qword_1000EC9A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v19, v6, v13);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v14 = (uint64_t *)(v4 + *(int *)(a2 + 20));
  v15 = *v14;
  v16 = v14[1];
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(v19, v15, v16);
  swift_bridgeObjectRelease(v16);
  return Hasher._finalize()();
}

uint64_t sub_1000973B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;

  v0 = _s14descr1000DA8A1V3TagVMa(0);
  sub_1000360F8(v0, qword_1000F6990);
  v1 = sub_10003609C(v0, (uint64_t)qword_1000F6990);
  v2 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v4 = (_QWORD *)(v1 + *(int *)(v0 + 20));
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  return result;
}

uint64_t sub_100097430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  if (qword_1000EB6C8 != -1)
    swift_once(&qword_1000EB6C8, sub_1000973B8);
  v4 = sub_10003609C(a1, (uint64_t)qword_1000F6990);
  return sub_100042198(v4, a2);
}

uint64_t sub_10009748C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 1, 1, v8);
  v9 = (_QWORD *)(a4 + *(int *)(a3 + 20));
  *v9 = a1;
  v9[1] = a2;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 0, 1, a3);
}

unint64_t sub_100097504()
{
  unint64_t result;

  result = qword_1000ED228;
  if (!qword_1000ED228)
  {
    result = swift_getWitnessTable(&unk_1000B7F10, &_s14descr1000DA8A1V3TagV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED228);
  }
  return result;
}

uint64_t sub_100097548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100030EE4(&qword_1000EC998);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100030EE4(&qword_1000EBA10);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v32 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v32 - v18;
  sub_1000834C4(a1, (uint64_t)&v32 - v18);
  v33 = a2;
  sub_1000834C4(a2, (uint64_t)v17);
  v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1000834C4((uint64_t)v19, (uint64_t)v10);
  sub_1000834C4((uint64_t)v17, v20);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) != 1)
  {
    sub_1000834C4((uint64_t)v10, (uint64_t)v14);
    if (v21(v20, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v20, v4);
      v22 = sub_100042114(&qword_1000EC9A8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v22);
      v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v7, v4);
      sub_100036060((uint64_t)v17, &qword_1000EBA10);
      sub_100036060((uint64_t)v19, &qword_1000EBA10);
      v24(v14, v4);
      sub_100036060((uint64_t)v10, &qword_1000EBA10);
      if ((v23 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v30 = 0;
      return v30 & 1;
    }
    sub_100036060((uint64_t)v17, &qword_1000EBA10);
    sub_100036060((uint64_t)v19, &qword_1000EBA10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_6:
    sub_100036060((uint64_t)v10, &qword_1000EC998);
    goto LABEL_11;
  }
  sub_100036060((uint64_t)v17, &qword_1000EBA10);
  sub_100036060((uint64_t)v19, &qword_1000EBA10);
  if (v21(v20, 1, v4) != 1)
    goto LABEL_6;
  sub_100036060((uint64_t)v10, &qword_1000EBA10);
LABEL_8:
  v25 = *(int *)(_s14descr1000DA8A1V3TagVMa(0) + 20);
  v26 = *(_QWORD *)(a1 + v25);
  v27 = *(_QWORD *)(a1 + v25 + 8);
  v28 = (_QWORD *)(v33 + v25);
  v29 = v28[1];
  if (v26 == *v28 && v27 == v29)
    v30 = 1;
  else
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, *v28, v29, 0);
  return v30 & 1;
}

uint64_t _s14descr1000DA8A1V3TagV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000978AC + 4 * byte_1000B7D2D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000978E0 + 4 * asc_1000B7D28[v4]))();
}

uint64_t sub_1000978E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000978E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000978F0);
  return result;
}

uint64_t sub_1000978FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100097904);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100097908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100097910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1000DA8A1V3TagV10CodingKeysOMa()
{
  return &_s14descr1000DA8A1V3TagV10CodingKeysON;
}

uint64_t *sub_10009792C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100030EE4(&qword_1000EBA10);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_100097A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

char *sub_100097A8C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

char *sub_100097B54(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v16 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

char *sub_100097C7C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_100097D38(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100030EE4(&qword_1000EBA10);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_100097E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100097E5C);
}

uint64_t sub_100097E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100030EE4(&qword_1000EBA10);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100097EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100097EEC);
}

uint64_t sub_100097EEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100030EE4(&qword_1000EBA10);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_100097F6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10004B4E4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000B7DB0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

unint64_t sub_100097FE0()
{
  unint64_t result;

  result = qword_1000ED2C0;
  if (!qword_1000ED2C0)
  {
    result = swift_getWitnessTable(&unk_1000B7E80, &_s14descr1000DA8A1V3TagV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED2C0);
  }
  return result;
}

uint64_t sub_100098024()
{
  return sub_100042114(&qword_1000ED2C8, _s14descr1000DA8A1V3TagVMa, (uint64_t)&unk_1000B7DC8);
}

unint64_t sub_100098054()
{
  unint64_t result;

  result = qword_1000ED2D0;
  if (!qword_1000ED2D0)
  {
    result = swift_getWitnessTable(&unk_1000B7DF0, &_s14descr1000DA8A1V3TagV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED2D0);
  }
  return result;
}

unint64_t sub_10009809C()
{
  unint64_t result;

  result = qword_1000ED2D8;
  if (!qword_1000ED2D8)
  {
    result = swift_getWitnessTable(&unk_1000B7E18, &_s14descr1000DA8A1V3TagV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000ED2D8);
  }
  return result;
}

uint64_t sub_1000980E0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x4164657461657263 && a2 == 0xE900000000000074;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1000981C4()
{
  unint64_t result;

  result = qword_1000ED300;
  if (!qword_1000ED300)
  {
    result = swift_getWitnessTable(&unk_1000B7FDC, &type metadata for ICFolderArchiveModel.Sorting);
    atomic_store(result, (unint64_t *)&qword_1000ED300);
  }
  return result;
}

void *sub_100098208(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t ObjectType;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  NSString v30;
  unint64_t v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a5;
  v7 = v6;
  v37 = a4;
  v36 = a3;
  v35 = type metadata accessor for ICQueryType(0);
  v11 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ICQueryEntity(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100030EE4(&qword_1000ED390);
  __chkstk_darwin(v18);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType(a1);
  v22 = v39;
  v23 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, double))(a2 + 24))(v7[1], v7[2], v36 & 0x101, v37, v38, ObjectType, a2, a6);
  if (!v22)
  {
    v39 = 0;
    v24 = v17;
    v38 = type metadata accessor for ICFolderArchiveModel(0);
    sub_10009C2B4((uint64_t)v7 + *(int *)(v38 + 44), (uint64_t)v20);
    v25 = type metadata accessor for ICFolderArchiveModel.Query(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v20, 1, v25) == 1)
    {
      sub_100036060((uint64_t)v20, &qword_1000ED390);
      v26 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v20, v14);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v20[*(int *)(v25 + 20)], v35);
      v27 = objc_allocWithZone((Class)type metadata accessor for ICQuery(0));
      v26 = (void *)ICQuery.init(entity:type:)(v24, v13);
      sub_100042220((uint64_t)v20, type metadata accessor for ICFolderArchiveModel.Query);
    }
    objc_msgSend(v23, "setSmartFolderQueryObjC:", v26);

    if (objc_msgSend(v23, "isRenamable"))
    {
      v28 = v7[9];
      if (v28)
        v29 = v7[9];
      else
        v29 = 0xE000000000000000;
      swift_bridgeObjectRetain(v28);
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
      objc_msgSend(v23, "setTitle:", v30);

    }
    if (objc_msgSend(v23, "supportsCustomNoteSortType"))
    {
      v31 = *(unsigned __int16 *)((char *)v7 + *(int *)(v38 + 48));
      if ((v31 & 0xFF00) == 0x200)
        v32 = 0;
      else
        v32 = objc_msgSend((id)objc_opt_self(ICFolderCustomNoteSortType), "folderNoteSortTypeWithOrder:direction:", qword_1000B8988[(char)v31], (v31 >> 8) & 1);
      objc_msgSend(v23, "setCustomNoteSortType:", v32);

    }
  }
  return v23;
}

id sub_10009852C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id result;
  uint64_t i;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;

  v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ICFolderArchiveModel(0) + 52));
  if (!v5)
    return 0;
  swift_bridgeObjectRetain(a2);
  v6 = (uint64_t)sub_100040980(v5, a2);
  swift_bridgeObjectRelease(a2);
  v7 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  objc_msgSend(v7, "removeAllObjects");

  v8 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  v9 = v8;
  if (!((unint64_t)v6 >> 62))
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v8;
    result = (id)swift_bridgeObjectRetain(v6);
    if (v10)
      goto LABEL_4;
LABEL_15:

    swift_bridgeObjectRelease_n(v6, 2);
    objc_msgSend(a1, "setSubFolderOrderMergeableDataDirty:", 1);
    objc_msgSend(a1, "saveSubFolderMergeableDataIfNeeded");
    return objc_msgSend(a1, "subFolderIdentifiersOrderedSetDocument");
  }
  if (v6 < 0)
    v16 = v6;
  else
    v16 = v6 & 0xFFFFFFFFFFFFFF8;
  v17 = v8;
  swift_bridgeObjectRetain(v6);
  result = (id)_CocoaArrayWrapper.endIndex.getter(v16);
  v10 = (uint64_t)result;
  if (!result)
    goto LABEL_15;
LABEL_4:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v14 = *(id *)(v6 + 8 * i + 32);
      v15 = v14;
      objc_msgSend(v9, "addObject:", v14);

    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000986F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t IsAlexandriaDemoModeEnabled;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v40[3];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;

  v3 = v2;
  v5 = sub_100030EE4(&qword_1000EBBB0);
  __chkstk_darwin(v5);
  v45 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000EBBB8);
  __chkstk_darwin(v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PersistedActivityEvent(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v42 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = _s14descr1000D81A9V8ActivityVMa(0);
  v13 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ICFolderArchiveModel(0) + 56));
  if (!v16)
    return 0;
  v48 = (unint64_t)_swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    goto LABEL_13;
  v40[1] = a1;
  v40[2] = v3;
  v18 = v16 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v44 = *(_QWORD *)(v13 + 72);
  v40[0] = v16;
  swift_bridgeObjectRetain(v16);
  v47 = v15;
  do
  {
    v46 = v17;
    v33 = sub_10004BAD4(v18, (uint64_t)v15, _s14descr1000D81A9V8ActivityVMa);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v33);
    ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    sub_10004F014((uint64_t)v9, 0.0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100036060((uint64_t)v9, &qword_1000EBBB8);
      v43 = sub_100036000(0, (unint64_t *)&qword_1000EB810, ICCloudSyncingObject_ptr);
      v19 = &v15[*(int *)(v41 + 44)];
      v20 = v10;
      v22 = *(_QWORD *)v19;
      v21 = *((_QWORD *)v19 + 1);
      v23 = v11;
      v24 = v9;
      v25 = v45;
      sub_10004F5B4(v45, 0.0);
      v26 = v22;
      v10 = v20;
      v27 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(forData:fallback:)(v26, v21, v25);
      v28 = v25;
      v9 = v24;
      v11 = v23;
      v15 = v47;
      sub_100036060(v28, &qword_1000EBBB0);
      v29 = sub_100042220((uint64_t)v15, _s14descr1000D81A9V8ActivityVMa);
    }
    else
    {
      v35 = v42;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v9, v10);
      sub_100036000(0, (unint64_t *)&qword_1000EB810, ICCloudSyncingObject_ptr);
      v36 = v45;
      sub_10004F5B4(v45, 0.0);
      v27 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(for:fallback:)(v35, v36);
      sub_100036060(v36, &qword_1000EBBB0);
      v37 = v35;
      v15 = v47;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v10);
      v29 = sub_100042220((uint64_t)v15, _s14descr1000D81A9V8ActivityVMa);
      if (!v27)
        goto LABEL_8;
    }
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v31 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v30 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v31 >= v30 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
    v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v27);
    specialized Array._endMutation()(v32);
LABEL_8:
    v18 += v44;
    v17 = v46 - 1;
  }
  while (v46 != 1);
  swift_bridgeObjectRelease(v40[0]);
LABEL_13:
  v38 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.setter();
  return ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter(v38);
}

void sub_100098AC8(id a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  unsigned __int8 v31;
  __int16 v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  id v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  id v84;
  uint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;

  v86 = a2;
  v5 = _s14descr1000D81A9V8ActivityVMa(0);
  v88 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v83 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100030EE4(&qword_1000ED390);
  __chkstk_darwin(v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)a3 = 2;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_BYTE *)(a3 + 56) = 2;
  *(_BYTE *)(a3 + 80) = 3;
  v10 = (int *)type metadata accessor for ICFolderArchiveModel(0);
  v11 = a3 + v10[11];
  v12 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v14 = v10[12];
  *(_WORD *)(a3 + v14) = 512;
  v85 = v10[13];
  *(_QWORD *)(a3 + v85) = 0;
  v15 = v10[14];
  v87 = (_QWORD *)a3;
  v82 = v15;
  *(_QWORD *)(a3 + v15) = 0;
  v16 = objc_msgSend(a1, "identifier");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0xE000000000000000;
  }
  v21 = v87;
  v87[1] = v18;
  v21[2] = v20;
  v22 = objc_msgSend(a1, "title");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v21[8] = v23;
  v21[9] = v25;
  v26 = objc_msgSend(a1, "smartFolderQueryObjC");
  if (v26)
  {
    v27 = v26;
    v28 = dispatch thunk of ICQuery.entity.getter();
    dispatch thunk of ICQuery.type.getter(v28);

    v13((uint64_t)v9, 0, 1, v12);
  }
  else
  {
    v13((uint64_t)v9, 1, 1, v12);
  }
  sub_10009C26C((uint64_t)v9, v11);
  v29 = objc_msgSend(a1, "customNoteSortType");
  if (!v29)
    goto LABEL_11;
  v30 = v29;
  if (objc_msgSend(v29, "isDefault")
    || (v31 = sub_10009B078((uint64_t)objc_msgSend(v30, "order")), v31 == 3))
  {

LABEL_11:
    v32 = 512;
    goto LABEL_12;
  }
  v48 = v31;
  v49 = sub_10009B208((uint64_t)objc_msgSend(v30, "direction"));

  if (v49 == 2)
    goto LABEL_11;
  v32 = v48 | ((v49 & 1) << 8);
LABEL_12:
  *(_WORD *)((char *)v87 + v14) = v32;
  v33 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  v34 = objc_msgSend(v33, "allObjects");

  v35 = sub_100036000(0, (unint64_t *)&qword_1000EBB98, NSString_ptr);
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

  if ((unint64_t)v36 >> 62)
  {
    if (v36 < 0)
      v50 = v36;
    else
      v50 = v36 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v36);
    v37 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v36);
    v84 = a1;
    if (v37)
      goto LABEL_14;
LABEL_29:
    swift_bridgeObjectRelease(v36);
    v39 = _swiftEmptyArrayStorage;
    goto LABEL_30;
  }
  v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  v84 = a1;
  if (!v37)
    goto LABEL_29;
LABEL_14:
  v89 = _swiftEmptyArrayStorage;
  sub_10003F268(0, v37 & ~(v37 >> 63), 0);
  if (v37 < 0)
  {
    __break(1u);
    goto LABEL_45;
  }
  v38 = 0;
  v39 = v89;
  do
  {
    if ((v36 & 0xC000000000000001) != 0)
      v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
    else
      v40 = *(id *)(v36 + 8 * v38 + 32);
    v41 = v40;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

    v89 = v39;
    v46 = v39[2];
    v45 = v39[3];
    if (v46 >= v45 >> 1)
    {
      sub_10003F268(v45 > 1, v46 + 1, 1);
      v39 = v89;
    }
    ++v38;
    v39[2] = v46 + 1;
    v47 = &v39[2 * v46];
    v47[4] = v42;
    v47[5] = v44;
  }
  while (v37 != v38);
  swift_bridgeObjectRelease(v36);
LABEL_30:
  v51 = v87;
  v52 = v85;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v87 + v85));
  *(_QWORD *)((char *)v51 + v52) = v39;
  v53 = v86;
  if ((v86[6] & 1) == 0)
  {
    sub_100055B20(v86);
    a1 = v84;
    if ((*((_BYTE *)v53 + 51) & 1) == 0)
    {
LABEL_32:

      return;
    }
    goto LABEL_51;
  }
  a1 = v84;
  v54 = v84;
  v36 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter(v54);

  if ((unint64_t)v36 >> 62)
  {
LABEL_45:
    if (v36 < 0)
      v62 = v36;
    else
      v62 = v36 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v36);
    v55 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease(v36);
    v56 = (uint64_t)v83;
    if (v55)
      goto LABEL_35;
    goto LABEL_49;
  }
  v55 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  v56 = (uint64_t)v83;
  if (v55)
  {
LABEL_35:
    v89 = _swiftEmptyArrayStorage;
    sub_10003F2F4(0, v55 & ~(v55 >> 63), 0);
    if (v55 < 0)
    {
      __break(1u);
      return;
    }
    v57 = 0;
    v58 = v89;
    do
    {
      if ((v36 & 0xC000000000000001) != 0)
        v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v57, v36);
      else
        v59 = *(id *)(v36 + 8 * v57 + 32);
      sub_10004E12C(v59, v56);
      v89 = v58;
      v61 = v58[2];
      v60 = v58[3];
      if (v61 >= v60 >> 1)
      {
        sub_10003F2F4(v60 > 1, v61 + 1, 1);
        v58 = v89;
      }
      ++v57;
      v58[2] = v61 + 1;
      sub_100048E8C(v56, (uint64_t)v58+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(_QWORD *)(v88 + 72) * v61);
    }
    while (v55 != v57);
    swift_bridgeObjectRelease(v36);
    goto LABEL_50;
  }
LABEL_49:
  swift_bridgeObjectRelease(v36);
  v58 = _swiftEmptyArrayStorage;
LABEL_50:
  v63 = v87;
  v64 = v82;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v87 + v82));
  v65 = v86;
  sub_100055B20(v86);
  *(_QWORD *)((char *)v63 + v64) = v58;
  if ((*((_BYTE *)v65 + 51) & 1) == 0)
    goto LABEL_32;
LABEL_51:
  v66 = objc_msgSend(a1, "parent");
  if (v66
    && (v67 = v66, v68 = objc_msgSend(v66, "identifier"), v67, v68)
    || (v69 = objc_msgSend(a1, "account"),
        v68 = objc_msgSend(v69, "identifier"),
        v69,
        v68))
  {
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    v72 = v71;

  }
  else
  {
    v70 = 0;
    v72 = 0;
  }
  v73 = v87;
  swift_bridgeObjectRelease(v87[4]);
  v73[3] = v70;
  v73[4] = v72;
  v74 = objc_msgSend(a1, "parent");
  if (v74)
  {
    v75 = v74;
    v76 = objc_msgSend(v74, "title");
  }
  else
  {
    v75 = objc_msgSend(a1, "account");
    v76 = objc_msgSend(v75, "localizedName");
  }
  v77 = v76;

  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
  v80 = v79;

  v81 = v87;
  swift_bridgeObjectRelease(v87[6]);
  v81[5] = v78;
  v81[6] = v80;
  *((_BYTE *)v81 + 56) = objc_msgSend(a1, "markedForDeletion");
  LOBYTE(v78) = sub_10009B304((unsigned __int16)objc_msgSend(a1, "folderType"));

  *((_BYTE *)v81 + 80) = v78;
}

uint64_t sub_10009922C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000360F8(v0, qword_1000ED2E8);
  sub_10003609C(v0, (uint64_t)qword_1000ED2E8);
  return static Logger.archiving.getter();
}

uint64_t sub_100099274(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000992AC + 4 * byte_1000B7F60[a1]))(0xD000000000000010, 0x80000001000B0770);
}

uint64_t sub_1000992AC()
{
  return 0x6E65644965707974;
}

uint64_t sub_1000992D0()
{
  return 0x696669746E656469;
}

uint64_t sub_1000992EC()
{
  return 0x6954746E65726170;
}

uint64_t sub_10009930C(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_10009936C()
{
  return 0x6974697669746361;
}

uint64_t sub_10009938C()
{
  return 0x74726F5365746F6ELL;
}

uint64_t sub_1000993AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ED580);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10009D8E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.CodingKeys, &type metadata for ICFolderArchiveModel.CodingKeys, v11, v9, v10);
  LOBYTE(v33) = *(_BYTE *)v3;
  v34 = 0;
  v12 = sub_10004B5D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v34, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    LOBYTE(v33) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v33, v5);
    v15 = *(_QWORD *)(v3 + 24);
    v16 = *(_QWORD *)(v3 + 32);
    LOBYTE(v33) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v33, v5);
    v17 = *(_QWORD *)(v3 + 40);
    v18 = *(_QWORD *)(v3 + 48);
    LOBYTE(v33) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v33, v5);
    v19 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v33) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v33, v5);
    v20 = *(_QWORD *)(v3 + 64);
    v21 = *(_QWORD *)(v3 + 72);
    LOBYTE(v33) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v33, v5);
    LOBYTE(v33) = *(_BYTE *)(v3 + 80);
    v34 = 6;
    v22 = sub_10009D928();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, &type metadata for ICFolderArchiveModel.Types, v22);
    v23 = (int *)type metadata accessor for ICFolderArchiveModel(0);
    v24 = v3 + v23[11];
    LOBYTE(v33) = 7;
    v25 = type metadata accessor for ICFolderArchiveModel.Query(0);
    v26 = sub_100042114(&qword_1000ED598, type metadata accessor for ICFolderArchiveModel.Query, (uint64_t)&unk_1000B8198);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v33, v5, v25, v26);
    LOWORD(v33) = *(_WORD *)(v3 + v23[12]);
    v34 = 8;
    v27 = sub_10009D96C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, &type metadata for ICFolderArchiveModel.Sorting, v27);
    v33 = *(_QWORD *)(v3 + v23[13]);
    v34 = 9;
    v28 = sub_100030EE4(&qword_1000EC0F8);
    v29 = sub_1000536E4(&qword_1000EC128, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, v28, v29);
    v33 = *(_QWORD *)(v3 + v23[14]);
    v34 = 10;
    v30 = sub_100030EE4(&qword_1000EBD78);
    v31 = sub_10004B9CC(&qword_1000EBD80, &qword_1000EBD88, (uint64_t)&unk_1000B4A30, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, v30, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100099740@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v39 = a2;
  v3 = sub_100030EE4(&qword_1000ED390);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100030EE4(&qword_1000ED5A8);
  v5 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for ICFolderArchiveModel(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v11 = 2;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v11[56] = 2;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  v11[80] = 3;
  v12 = (uint64_t)&v11[*(int *)(v9 + 44)];
  v13 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v46 = v12;
  v14(v12, 1, 1, v13);
  v15 = v8[12];
  *(_WORD *)&v11[v15] = 512;
  v45 = v8[13];
  *(_QWORD *)&v11[v45] = 0;
  v16 = v8[14];
  v42 = a1;
  v43 = v16;
  *(_QWORD *)&v11[v16] = 0;
  v17 = a1[3];
  v18 = a1[4];
  sub_10004242C(a1, v17);
  v19 = sub_10009D8E4();
  v20 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.CodingKeys, &type metadata for ICFolderArchiveModel.CodingKeys, v19, v17, v18);
  if (v20)
  {
    sub_100035424(v42);
    v24 = v46;
    v25 = v43;
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 4));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 6));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 9));
    sub_100036060(v24, &qword_1000ED390);
    swift_bridgeObjectRelease(*(_QWORD *)&v11[v45]);
    return swift_bridgeObjectRelease(*(_QWORD *)&v11[v25]);
  }
  else
  {
    v21 = (uint64_t)v40;
    v44 = v5;
    v48 = 0;
    v22 = sub_1000312F0();
    v23 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for ICArchiveModels, &v48, v41, &type metadata for ICArchiveModels, v22);
    *v11 = v47;
    LOBYTE(v47) = 1;
    *((_QWORD *)v11 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v47, v23);
    *((_QWORD *)v11 + 2) = v26;
    LOBYTE(v47) = 2;
    *((_QWORD *)v11 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v23);
    *((_QWORD *)v11 + 4) = v27;
    LOBYTE(v47) = 3;
    *((_QWORD *)v11 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v23);
    *((_QWORD *)v11 + 6) = v28;
    LOBYTE(v47) = 4;
    v11[56] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v23);
    LOBYTE(v47) = 5;
    *((_QWORD *)v11 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v23);
    *((_QWORD *)v11 + 9) = v29;
    v48 = 6;
    sub_10009D9B0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICFolderArchiveModel.Types, &v48, v23, &type metadata for ICFolderArchiveModel.Types);
    v11[80] = v47;
    LOBYTE(v47) = 7;
    sub_100042114(&qword_1000ED308, type metadata accessor for ICFolderArchiveModel.Query, (uint64_t)&unk_1000B8044);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v13, &v47, v23, v13);
    sub_10009C26C(v21, v46);
    v48 = 8;
    sub_1000981C4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICFolderArchiveModel.Sorting, &v48, v23, &type metadata for ICFolderArchiveModel.Sorting);
    *(_WORD *)&v11[v15] = v47;
    v30 = sub_100030EE4(&qword_1000EC0F8);
    v48 = 9;
    sub_1000536E4(&qword_1000EC100, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, &v48, v23, v30);
    v31 = v47;
    v32 = v45;
    swift_bridgeObjectRelease(*(_QWORD *)&v11[v45]);
    *(_QWORD *)&v11[v32] = v31;
    v33 = sub_100030EE4(&qword_1000EBD78);
    v48 = 10;
    sub_10004B9CC(&qword_1000EBDE8, &qword_1000EBDF0, (uint64_t)&unk_1000B4A58, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v34 = v41;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &v48, v41, v33);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v34);
    v35 = v47;
    v36 = v43;
    swift_bridgeObjectRelease(*(_QWORD *)&v11[v43]);
    *(_QWORD *)&v11[v36] = v35;
    sub_10004BAD4((uint64_t)v11, v39, type metadata accessor for ICFolderArchiveModel);
    sub_100035424(v42);
    return sub_100042220((uint64_t)v11, type metadata accessor for ICFolderArchiveModel);
  }
}

uint64_t sub_100099CF8()
{
  unsigned __int8 *v0;

  return sub_100099274(*v0);
}

uint64_t sub_100099D00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009B49C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100099D24(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100099D30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009D8E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100099D58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009D8E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100099D80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100099740(a1, a2);
}

uint64_t sub_100099D94(_QWORD *a1)
{
  return sub_1000993AC(a1);
}

uint64_t sub_100099DA8(char a1)
{
  return *(_QWORD *)&aNormal_3[8 * a1];
}

uint64_t sub_100099DC8(char *a1, char *a2)
{
  return sub_100036300(*a1, *a2);
}

Swift::Int sub_100099DD4()
{
  char *v0;

  return sub_100054098(*v0);
}

uint64_t sub_100099DDC(uint64_t a1)
{
  char *v1;

  return sub_1000542AC(a1, *v1);
}

Swift::Int sub_100099DE4(uint64_t a1)
{
  char *v1;

  return sub_100054AF8(a1, *v1);
}

unint64_t sub_100099DEC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000D71E8;
  result = sub_10009BB78(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100099E20@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100099DA8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100099E48(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D7250;
}

uint64_t sub_100099E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009DDEC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100099EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009DDEC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100099F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000474B8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10009DE30, (uint64_t (*)(void))sub_10009DDEC);
}

uint64_t sub_100099F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047544(a1, a2, a3, a4, (uint64_t (*)(void))sub_10009DE30, (uint64_t (*)(void))sub_10009DDEC);
}

uint64_t sub_100099F28(char a1)
{
  if ((a1 & 1) != 0)
    return 1701869940;
  else
    return 0x797469746E65;
}

uint64_t sub_100099F54(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_100030EE4(&qword_1000ED5B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10009B034();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.Query.CodingKeys, &type metadata for ICFolderArchiveModel.Query.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for ICQueryEntity(0);
  v13 = sub_100042114(&qword_1000ED5C0, (uint64_t (*)(uint64_t))&type metadata accessor for ICQueryEntity, (uint64_t)&protocol conformance descriptor for ICQueryEntity);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for ICFolderArchiveModel.Query(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for ICQueryType(0);
    v16 = sub_100042114(&qword_1000ED5C8, (uint64_t (*)(uint64_t))&type metadata accessor for ICQueryType, (uint64_t)&protocol conformance descriptor for ICQueryType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10009A0D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v26 = a2;
  v28 = type metadata accessor for ICQueryType(0);
  v25 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ICQueryEntity(0);
  v4 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_100030EE4(&qword_1000ED310);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ICFolderArchiveModel.Query(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_10004242C(a1, v13);
  v14 = sub_10009B034();
  v31 = v8;
  v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.Query.CodingKeys, &type metadata for ICFolderArchiveModel.Query.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_100035424(a1);
  v16 = v6;
  v17 = (uint64_t)v11;
  v18 = a1;
  v19 = v27;
  v20 = v28;
  v35 = 0;
  v21 = sub_100042114(&qword_1000ED320, (uint64_t (*)(uint64_t))&type metadata accessor for ICQueryEntity, (uint64_t)&protocol conformance descriptor for ICQueryEntity);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v30, &v35, v32, v30, v21);
  v33 = v4;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v17, v29, v30);
  v34 = 1;
  v22 = sub_100042114(&qword_1000ED328, (uint64_t (*)(uint64_t))&type metadata accessor for ICQueryType, (uint64_t)&protocol conformance descriptor for ICQueryType);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20, &v34, v32, v20, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v31, v32);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v17 + *(int *)(v9 + 20), v19, v20);
  sub_10004BAD4(v17, v26, type metadata accessor for ICFolderArchiveModel.Query);
  sub_100035424(v18);
  return sub_100042220(v17, type metadata accessor for ICFolderArchiveModel.Query);
}

uint64_t sub_10009A3B8()
{
  char *v0;

  return sub_100099F28(*v0);
}

uint64_t sub_10009A3C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009B8DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009A3E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009B034();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009A40C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009B034();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009A434@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009A0D8(a1, a2);
}

uint64_t sub_10009A448(_QWORD *a1)
{
  return sub_100099F54(a1);
}

void sub_10009A45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[2];

  v0 = type metadata accessor for ICQueryType(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (_QWORD *)((char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for ICQueryEntity(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v24[1] = v8;
  sub_1000360F8(v8, qword_1000F69A8);
  v24[0] = sub_10003609C(v8, (uint64_t)qword_1000F69A8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ICQueryEntity.note(_:), v4);
  v9 = swift_allocObject(&unk_1000DA958, 24, 7);
  v10 = sub_100030EE4(&qword_1000ED368);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(unsigned __int8 *)(v1 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v10, v13 + 2 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1000B3840;
  v15 = (uint64_t *)(v14 + v13);
  v16 = swift_allocObject(&unk_1000DA980, 17, 7);
  *(_BYTE *)(v16 + 16) = 1;
  *v15 = v16;
  v17 = enum case for ICQueryType.deleted(_:);
  v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 104);
  v18(v15, enum case for ICQueryType.deleted(_:), v0);
  v19 = (uint64_t *)((char *)v15 + v11);
  v20 = swift_allocObject(&unk_1000DA980, 17, 7);
  *(_BYTE *)(v20 + 16) = 0;
  *v19 = v20;
  v18(v19, v17, v0);
  *(_QWORD *)(v9 + 16) = v14;
  *v3 = v9;
  v18(v3, enum case for ICQueryType.or(_:), v0);
  v21 = objc_allocWithZone((Class)type metadata accessor for ICQuery(0));
  v22 = (void *)ICQuery.init(entity:type:)(v7, v3);
  v23 = dispatch thunk of ICQuery.entity.getter(v22);
  dispatch thunk of ICQuery.type.getter(v23);

}

uint64_t sub_10009A67C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;

  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v8);
  v11 = String.data(using:allowLossyConversion:)(v10, 0, a1, a2);
  v13 = v12;
  swift_bridgeObjectRelease(a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v13 >> 60 == 15)
  {
    v18 = type metadata accessor for ICFolderArchiveModel.Query(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
  else
  {
    v14 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v15 = JSONDecoder.init()();
    v16 = type metadata accessor for ICQuery(0);
    v17 = sub_100042114(&qword_1000ED360, (uint64_t (*)(uint64_t))&type metadata accessor for ICQuery, (uint64_t)&protocol conformance descriptor for ICQuery);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v25, v16, v11, v13, v16, v17);
    v20 = swift_release(v15, v19);
    v21 = v25;
    dispatch thunk of ICQuery.entity.getter(v20);
    v22 = type metadata accessor for ICFolderArchiveModel.Query(0);
    dispatch thunk of ICQuery.type.getter(v22);

    sub_100048E78(v11, v13);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 0, 1, v22);
  }
}

uint64_t sub_10009A844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  if (qword_1000EB6D8 != -1)
    swift_once(&qword_1000EB6D8, sub_10009A45C);
  v4 = sub_10003609C(a1, (uint64_t)qword_1000F69A8);
  return sub_10004BAD4(v4, a2, type metadata accessor for ICFolderArchiveModel.Query);
}

uint64_t sub_10009A8B0(uint64_t a1, uint64_t a2)
{
  return sub_10009C064(a1, a2);
}

uint64_t sub_10009A8C4(char a1)
{
  return *(_QWORD *)&aCreatedModifie_1[8 * a1];
}

uint64_t sub_10009A8E4(char *a1, char *a2)
{
  return sub_10003642C(*a1, *a2);
}

Swift::Int sub_10009A8F0()
{
  char *v0;

  return sub_100054100(*v0);
}

uint64_t sub_10009A8F8(uint64_t a1)
{
  char *v1;

  return sub_10005434C(a1, *v1);
}

Swift::Int sub_10009A900(uint64_t a1)
{
  char *v1;

  return sub_100054A10(a1, *v1);
}

unint64_t sub_10009A908@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000D7278;
  result = sub_10009BB78(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10009A93C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10009A8C4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10009A964(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D72E0;
}

uint64_t sub_10009A974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009BA34();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10009A9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009BA34();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10009AA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000474B8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10009B9F0, (uint64_t (*)(void))sub_10009BA34);
}

uint64_t sub_10009AA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047544(a1, a2, a3, a4, (uint64_t (*)(void))sub_10009B9F0, (uint64_t (*)(void))sub_10009BA34);
}

uint64_t sub_10009AA44(char a1)
{
  if ((a1 & 1) != 0)
    return 0x49444E4543534544;
  else
    return 0x4E49444E45435341;
}

uint64_t sub_10009AA84(char *a1, char *a2)
{
  return sub_100036384(*a1, *a2);
}

Swift::Int sub_10009AA90()
{
  char *v0;

  return sub_100054168(*v0);
}

uint64_t sub_10009AA98(uint64_t a1)
{
  char *v1;

  return sub_1000542EC(a1, *v1);
}

Swift::Int sub_10009AAA0(uint64_t a1)
{
  char *v1;

  return sub_100054A74(a1, *v1);
}

uint64_t sub_10009AAA8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000D7308, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10009AB04@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10009AA44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10009AB2C(_QWORD *a1@<X8>)
{
  *a1 = &off_1000D7358;
}

uint64_t sub_10009AB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009BB00();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10009AB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009BB00();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10009ABE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10009BABC();
  v5 = sub_10009BB00();
  return static ArgumentDecodable<>.defaultArgument.getter(a1, a2, v4, v5, &protocol witness table for String);
}

uint64_t sub_10009AC40(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6F69746365726964;
  else
    return 0x726564726FLL;
}

uint64_t sub_10009AC78(_QWORD *a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v5 = sub_100030EE4(&qword_1000ED5D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10004242C(a1, v9);
  v11 = sub_10009BE2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.Sorting.CodingKeys, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys, v11, v9, v10);
  v19 = a2;
  v18 = 0;
  v12 = sub_10009D9F4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for ICFolderArchiveModel.SortingOrders, v12);
  if (!v2)
  {
    v17 = HIBYTE(a2) & 1;
    v16 = 1;
    v13 = sub_10009DA38();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for ICFolderArchiveModel.SortingDirections, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10009ADB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000474B8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10009BABC, (uint64_t (*)(void))sub_10009BB00);
}

uint64_t sub_10009ADCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047544(a1, a2, a3, a4, (uint64_t (*)(void))sub_10009BABC, (uint64_t (*)(void))sub_10009BB00);
}

uint64_t sub_10009ADE0()
{
  char *v0;

  return sub_10009AC40(*v0);
}

uint64_t sub_10009ADE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009BBBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009AE0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009BE2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009AE34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009BE2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009AE5C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10009BCA4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_10009AE8C(_QWORD *a1)
{
  unsigned __int8 *v1;
  __int16 v2;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_10009AC78(a1, v2 | *v1);
}

void sub_10009AEB8()
{
  id v0;
  char v1;
  char v2;
  char v3;
  char v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)ICFolderCustomNoteSortType), "init");
  if (objc_msgSend(v0, "isDefault") || (v1 = sub_10009B078((uint64_t)objc_msgSend(v0, "order")), v1 == 3))
  {

  }
  else
  {
    v2 = v1;
    v4 = sub_10009B208((uint64_t)objc_msgSend(v0, "direction"));

    if (v4 != 2)
    {
      v3 = v4 & 1;
      goto LABEL_5;
    }
  }
  v2 = 0;
  v3 = 0;
LABEL_5:
  byte_1000F69C0 = v2;
  byte_1000F69C1 = v3;
}

uint64_t sub_10009AF74@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  if (qword_1000EB6E0 != -1)
    result = swift_once(&qword_1000EB6E0, sub_10009AEB8);
  v2 = byte_1000F69C1;
  *a1 = byte_1000F69C0;
  a1[1] = v2;
  return result;
}

uint64_t sub_10009AFD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result;

  result = sub_10009BEF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009AFF4()
{
  return sub_100042114(&qword_1000ED308, type metadata accessor for ICFolderArchiveModel.Query, (uint64_t)&unk_1000B8044);
}

uint64_t type metadata accessor for ICFolderArchiveModel.Query(uint64_t a1)
{
  return sub_10008340C(a1, qword_1000ED4B0, (uint64_t)&nominal type descriptor for ICFolderArchiveModel.Query);
}

unint64_t sub_10009B034()
{
  unint64_t result;

  result = qword_1000ED318;
  if (!qword_1000ED318)
  {
    result = swift_getWitnessTable(&unk_1000B86BC, &type metadata for ICFolderArchiveModel.Query.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED318);
  }
  return result;
}

uint64_t sub_10009B078(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  result = 1;
  switch(a1)
  {
    case 0:
      if (qword_1000EB6D0 != -1)
        swift_once(&qword_1000EB6D0, sub_10009922C);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_10003609C(v3, (uint64_t)qword_1000ED2E8);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_11;
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "Cannot serialize default note sort order â€” returning nil";
      goto LABEL_10;
    case 1:
      return result;
    case 2:
      result = 0;
      break;
    case 3:
      result = 2;
      break;
    default:
      if (qword_1000EB6D0 != -1)
        swift_once(&qword_1000EB6D0, sub_10009922C);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10003609C(v9, (uint64_t)qword_1000ED2E8);
      v5 = Logger.logObject.getter(v10);
      v6 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v7 = 0;
        v8 = "Unknown note sort order â€” returning nil";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
        swift_slowDealloc(v7, -1, -1);
      }
LABEL_11:

      result = 3;
      break;
  }
  return result;
}

uint64_t sub_10009B208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (!a1)
    return 0;
  if (a1 == 1)
    return 1;
  if (qword_1000EB6D0 != -1)
    swift_once(&qword_1000EB6D0, sub_10009922C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10003609C(v2, (uint64_t)qword_1000ED2E8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v1 = 2;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown note sort direction â€” returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    return 2;
  }
  return v1;
}

uint64_t sub_10009B304(unsigned __int16 a1)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1;
  result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      if (qword_1000EB6D0 != -1)
        swift_once(&qword_1000EB6D0, sub_10009922C);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10003609C(v9, (uint64_t)qword_1000ED2E8);
      v5 = Logger.logObject.getter(v10);
      v6 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_13;
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "Deprecated folder type â€” returning nil";
      goto LABEL_12;
    default:
      if (qword_1000EB6D0 != -1)
        swift_once(&qword_1000EB6D0, sub_10009922C);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_10003609C(v3, (uint64_t)qword_1000ED2E8);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v7 = 0;
        v8 = "Unknown folder type â€” returning nil";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
        swift_slowDealloc(v7, -1, -1);
      }
LABEL_13:

      result = 3;
      break;
  }
  return result;
}

uint64_t sub_10009B49C(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v3 = a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v6 = 0x80000001000B0770;
    if (a2 == 0x80000001000B0770)
      goto LABEL_15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000B0770, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_15:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if (a1 == 0x6954746E65726170 && a2 == 0xEB00000000656C74
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6954746E65726170, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001000B0790)
  {
    v7 = 0x80000001000B0790;
LABEL_25:
    swift_bridgeObjectRelease(v7);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000B0790, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6;
  }
  if (a1 == 0x7972657571 && a2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7972657571, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7;
  }
  if (a1 == 0x74726F5365746F6ELL && a2 == 0xEB00000000676E69
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x74726F5365746F6ELL, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001000B1310)
  {
    v8 = 0x80000001000B1310;
LABEL_47:
    swift_bridgeObjectRelease(v8);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000B1310, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x6974697669746361 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 10;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6974697669746361, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_10009B8DC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x797469746E65 && a2 == 0xE600000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E65, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_10009B9AC()
{
  unint64_t result;

  result = qword_1000ED330;
  if (!qword_1000ED330)
  {
    result = swift_getWitnessTable(&unk_1000B867C, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1000ED330);
  }
  return result;
}

unint64_t sub_10009B9F0()
{
  unint64_t result;

  result = qword_1000ED338;
  if (!qword_1000ED338)
  {
    result = swift_getWitnessTable(&unk_1000B8644, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1000ED338);
  }
  return result;
}

unint64_t sub_10009BA34()
{
  unint64_t result;

  result = qword_1000ED340;
  if (!qword_1000ED340)
  {
    result = swift_getWitnessTable(&unk_1000B860C, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1000ED340);
  }
  return result;
}

unint64_t sub_10009BA78()
{
  unint64_t result;

  result = qword_1000ED348;
  if (!qword_1000ED348)
  {
    result = swift_getWitnessTable(&unk_1000B85CC, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1000ED348);
  }
  return result;
}

unint64_t sub_10009BABC()
{
  unint64_t result;

  result = qword_1000ED350;
  if (!qword_1000ED350)
  {
    result = swift_getWitnessTable(&unk_1000B8594, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1000ED350);
  }
  return result;
}

unint64_t sub_10009BB00()
{
  unint64_t result;

  result = qword_1000ED358;
  if (!qword_1000ED358)
  {
    result = swift_getWitnessTable(&unk_1000B855C, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1000ED358);
  }
  return result;
}

uint64_t sub_10009BB44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009BB68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10009BB78(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

uint64_t sub_10009BBBC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x726564726FLL && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x726564726FLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease(0xE90000000000006ELL);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746365726964, 0xE90000000000006ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10009BCA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v3 = sub_100030EE4(&qword_1000ED370);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10004242C(a1, v7);
  v9 = sub_10009BE2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.Sorting.CodingKeys, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100035424(a1);
  BYTE1(v18) = 0;
  v10 = sub_10009BE70();
  KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v18 + 2), &type metadata for ICFolderArchiveModel.SortingOrders, (char *)&v18 + 1, v3, &type metadata for ICFolderArchiveModel.SortingOrders, v10);
  v11 = BYTE2(v18);
  v17 = 1;
  v12 = sub_10009BEB4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for ICFolderArchiveModel.SortingDirections, &v17, v3, &type metadata for ICFolderArchiveModel.SortingDirections, v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = v18;
  sub_100035424(a1);
  if (v14)
    v15 = 256;
  else
    v15 = 0;
  return v15 | v11;
}

unint64_t sub_10009BE2C()
{
  unint64_t result;

  result = qword_1000ED378;
  if (!qword_1000ED378)
  {
    result = swift_getWitnessTable(&unk_1000B850C, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED378);
  }
  return result;
}

unint64_t sub_10009BE70()
{
  unint64_t result;

  result = qword_1000ED380;
  if (!qword_1000ED380)
  {
    result = swift_getWitnessTable(&unk_1000B84E4, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1000ED380);
  }
  return result;
}

unint64_t sub_10009BEB4()
{
  unint64_t result;

  result = qword_1000ED388;
  if (!qword_1000ED388)
  {
    result = swift_getWitnessTable(&unk_1000B84BC, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1000ED388);
  }
  return result;
}

uint64_t sub_10009BEF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v20 = a2;
  v18[0] = 44;
  v18[1] = 0xE100000000000000;
  v3 = sub_100030F60();
  v4 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v18, &type metadata for String, &type metadata for String, v3, v3);
  swift_bridgeObjectRelease(a2);
  if (v4[2] != 2)
    goto LABEL_3;
  v5 = v4[4];
  v6 = v4[5];
  v7 = sub_10009B9AC();
  v8 = sub_10009B9F0();
  v9 = sub_10009BA34();
  swift_bridgeObjectRetain(v6);
  result = ArgumentDecodable<>.init(fromArgument:)(v5, v6, &type metadata for ICFolderArchiveModel.SortingOrders, v7, v8, v9, &protocol witness table for String);
  v11 = v19;
  if (v19 == 3)
  {
LABEL_3:
    swift_bridgeObjectRelease(v4);
    return 512;
  }
  if (v4[2] >= 2uLL)
  {
    v13 = v4[6];
    v14 = v4[7];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease(v4);
    v15 = sub_10009BA78();
    v16 = sub_10009BABC();
    v17 = sub_10009BB00();
    ArgumentDecodable<>.init(fromArgument:)(v13, v14, &type metadata for ICFolderArchiveModel.SortingDirections, v15, v16, v17, &protocol witness table for String);
    if (v19 != 2)
      return v11 & 0xFFFFFEFF | ((v19 & 1) << 8);
    return 512;
  }
  __break(1u);
  return result;
}

uint64_t sub_10009C064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  void (*v10)(char *, uint64_t);
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  void *object;
  uint64_t v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  void *v22;
  _QWORD v24[2];

  v4 = type metadata accessor for AnsiStylings(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = 0;
  v24[1] = 0xE000000000000000;
  v8 = enum case for AnsiStylings.cyan(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for AnsiStylings.cyan(_:), v4);
  DefaultStringInterpolation.appendInterpolation(ansi:)(v7);
  v10 = *(void (**)(char *, uint64_t))(v5 + 8);
  v10(v7, v4);
  v11 = sub_10009B9AC();
  v12 = sub_10009B9F0();
  v13 = sub_10009BA34();
  v14._countAndFlagsBits = static ArgumentDecodable<>.typeSummary(forName:)(a1, a2, &type metadata for ICFolderArchiveModel.SortingOrders, v11, v12, v13, &protocol witness table for String);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16 = enum case for AnsiStylings.reset(_:);
  v9(v7, enum case for AnsiStylings.reset(_:), v4);
  DefaultStringInterpolation.appendInterpolation(ansi:)(v7);
  v10(v7, v4);
  v17._countAndFlagsBits = 44;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v9(v7, v8, v4);
  DefaultStringInterpolation.appendInterpolation(ansi:)(v7);
  v10(v7, v4);
  v18 = sub_10009BA78();
  v19 = sub_10009BABC();
  v20 = sub_10009BB00();
  v21._countAndFlagsBits = static ArgumentDecodable<>.typeSummary(forName:)(a1, a2, &type metadata for ICFolderArchiveModel.SortingDirections, v18, v19, v20, &protocol witness table for String);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v9(v7, v16, v4);
  DefaultStringInterpolation.appendInterpolation(ansi:)(v7);
  v10(v7, v4);
  return v24[0];
}

uint64_t type metadata accessor for ICFolderArchiveModel(uint64_t a1)
{
  return sub_10008340C(a1, (uint64_t *)&unk_1000ED3F0, (uint64_t)&nominal type descriptor for ICFolderArchiveModel);
}

uint64_t sub_10009C26C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000ED390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009C2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100030EE4(&qword_1000ED390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.Sorting.CodingKeys()
{
  return &type metadata for ICFolderArchiveModel.Sorting.CodingKeys;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.SortingDirections()
{
  return &type metadata for ICFolderArchiveModel.SortingDirections;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.SortingOrders()
{
  return &type metadata for ICFolderArchiveModel.SortingOrders;
}

_QWORD *sub_10009C338(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = a2[8];
    v11 = a2[9];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v12 = a3[11];
    __dst = (char *)(a1 + v12);
    v13 = (char *)a2 + v12;
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = v11;
    v14 = type metadata accessor for ICFolderArchiveModel.Query(0);
    v28 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    if (v15(v13, 1, v14))
    {
      v16 = sub_100030EE4(&qword_1000ED390);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v18 = type metadata accessor for ICQueryEntity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(__dst, v13, v18);
      v19 = *(int *)(v14 + 20);
      v20 = &__dst[v19];
      v21 = &v13[v19];
      v22 = type metadata accessor for ICQueryType(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v14);
    }
    v23 = a3[13];
    *(_WORD *)((char *)v4 + a3[12]) = *(_WORD *)((char *)a2 + a3[12]);
    v24 = *(uint64_t *)((char *)a2 + v23);
    *(_QWORD *)((char *)v4 + v23) = v24;
    v25 = a3[14];
    v26 = *(uint64_t *)((char *)a2 + v25);
    *(_QWORD *)((char *)v4 + v25) = v26;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
  }
  return v4;
}

uint64_t sub_10009C504(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  v4 = (char *)a1 + a2[11];
  v5 = type metadata accessor for ICFolderArchiveModel.Query(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for ICQueryEntity(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = &v4[*(int *)(v5 + 20)];
    v8 = type metadata accessor for ICQueryType(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[13]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[14]));
}

uint64_t sub_10009C5D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = a3[11];
  __dst = (char *)(a1 + v11);
  v12 = (char *)(a2 + v11);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v13 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v26 = *(_QWORD *)(v13 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (v14(v12, 1, v13))
  {
    v15 = sub_100030EE4(&qword_1000ED390);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for ICQueryEntity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(__dst, v12, v16);
    v17 = *(int *)(v13 + 20);
    v18 = &__dst[v17];
    v19 = &v12[v17];
    v20 = type metadata accessor for ICQueryType(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v13);
  }
  v21 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v22 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  v23 = a3[14];
  v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t sub_10009C770(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v14 = a3[11];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      v35 = type metadata accessor for ICQueryEntity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v15, v16, v35);
      v36 = *(int *)(v17 + 20);
      v37 = &v15[v36];
      v38 = &v16[v36];
      v39 = type metadata accessor for ICQueryType(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
      goto LABEL_7;
    }
    sub_100042220((uint64_t)v15, type metadata accessor for ICFolderArchiveModel.Query);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v27 = sub_100030EE4(&qword_1000ED390);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v22 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v15, v16, v22);
  v23 = *(int *)(v17 + 20);
  v24 = &v15[v23];
  v25 = &v16[v23];
  v26 = type metadata accessor for ICQueryType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v28 = a3[13];
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a2 + v28);
  *(_QWORD *)(a1 + v28) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v29);
  v31 = a3[14];
  v32 = *(_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a2 + v31);
  *(_QWORD *)(a1 + v31) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_10009C9CC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = a3[11];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  *(_OWORD *)(a1 + 64) = v6;
  v10 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100030EE4(&qword_1000ED390);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for ICQueryEntity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    v14 = *(int *)(v10 + 20);
    v15 = &v8[v14];
    v16 = &v9[v14];
    v17 = type metadata accessor for ICQueryType(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v18 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10009CB20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v14 = a3[11];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      v33 = type metadata accessor for ICQueryEntity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v15, v16, v33);
      v34 = *(int *)(v17 + 20);
      v35 = &v15[v34];
      v36 = &v16[v34];
      v37 = type metadata accessor for ICQueryType(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
      goto LABEL_7;
    }
    sub_100042220((uint64_t)v15, type metadata accessor for ICFolderArchiveModel.Query);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v27 = sub_100030EE4(&qword_1000ED390);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v22 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v15, v16, v22);
  v23 = *(int *)(v17 + 20);
  v24 = &v15[v23];
  v25 = &v16[v23];
  v26 = type metadata accessor for ICQueryType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v28 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v29 = *(_QWORD *)(a1 + v28);
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[14];
  v31 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_10009CD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009CD34);
}

uint64_t sub_10009CD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100030EE4(&qword_1000ED390);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_10009CDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009CDC0);
}

uint64_t sub_10009CDC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100030EE4(&qword_1000ED390);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

void sub_10009CE38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = &unk_1000B80B8;
  v4[1] = &unk_1000B80D0;
  v4[2] = &unk_1000B80E8;
  v4[3] = &unk_1000B80E8;
  v4[4] = &unk_1000B8100;
  v4[5] = &unk_1000B80E8;
  v4[6] = &unk_1000B8118;
  sub_10009CEEC(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_1000B8130;
    v4[9] = &unk_1000B8148;
    v4[10] = &unk_1000B8148;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
  }
}

void sub_10009CEEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED400)
  {
    v2 = type metadata accessor for ICFolderArchiveModel.Query(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED400);
  }
}

uint64_t _s38com_apple_mobilenotes_SharingExtension20ICFolderArchiveModelV17SortingDirectionsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10009CF8C + 4 * byte_1000B7F78[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009CFC0 + 4 * byte_1000B7F73[v4]))();
}

uint64_t sub_10009CFC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009CFC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009CFD0);
  return result;
}

uint64_t sub_10009CFDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009CFE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10009CFE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009CFF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.Query.CodingKeys()
{
  return &type metadata for ICFolderArchiveModel.Query.CodingKeys;
}

uint64_t *sub_10009D00C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for ICQueryEntity(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ICQueryType(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10009D0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for ICQueryType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10009D110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ICQueryType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10009D18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ICQueryType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10009D208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ICQueryType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10009D284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ICQueryType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10009D300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009D30C);
}

uint64_t sub_10009D30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for ICQueryType(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10009D380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009D38C);
}

uint64_t sub_10009D38C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for ICQueryEntity(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for ICQueryType(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10009D408(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for ICQueryEntity(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ICQueryType(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for ICFolderArchiveModel.Sorting(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ICFolderArchiveModel.Sorting(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICFolderArchiveModel.Sorting(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10009D578 + 4 * byte_1000B7F82[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_10009D5AC + 4 * byte_1000B7F7D[v4]))();
}

uint64_t sub_10009D5AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10009D5B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x10009D5BCLL);
  return result;
}

uint64_t sub_10009D5C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x10009D5D0);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_10009D5D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10009D5DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.Sorting()
{
  return &type metadata for ICFolderArchiveModel.Sorting;
}

unint64_t sub_10009D5FC()
{
  unint64_t result;

  result = qword_1000ED4E8;
  if (!qword_1000ED4E8)
  {
    result = swift_getWitnessTable(&unk_1000B8250, &type metadata for ICFolderArchiveModel.Query.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED4E8);
  }
  return result;
}

uint64_t sub_10009D640(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100042114(&qword_1000EBB28, type metadata accessor for ICFolderArchiveModel, (uint64_t)&unk_1000B846C);
  result = sub_100042114(&qword_1000EBEC0, type metadata accessor for ICFolderArchiveModel, (uint64_t)&unk_1000B8494);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10009D6A0()
{
  unint64_t result;

  result = qword_1000ED528;
  if (!qword_1000ED528)
  {
    result = swift_getWitnessTable(&unk_1000B82FC, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1000ED528);
  }
  return result;
}

unint64_t sub_10009D6E8()
{
  unint64_t result;

  result = qword_1000ED530;
  if (!qword_1000ED530)
  {
    result = swift_getWitnessTable(&unk_1000B838C, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1000ED530);
  }
  return result;
}

unint64_t sub_10009D730()
{
  unint64_t result;

  result = qword_1000ED538;
  if (!qword_1000ED538)
  {
    result = swift_getWitnessTable(&unk_1000B8444, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED538);
  }
  return result;
}

unint64_t sub_10009D778()
{
  unint64_t result;

  result = qword_1000ED540;
  if (!qword_1000ED540)
  {
    result = swift_getWitnessTable(&unk_1000B83B4, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED540);
  }
  return result;
}

unint64_t sub_10009D7C0()
{
  unint64_t result;

  result = qword_1000ED548;
  if (!qword_1000ED548)
  {
    result = swift_getWitnessTable(&unk_1000B83DC, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED548);
  }
  return result;
}

uint64_t sub_10009D804()
{
  return sub_10004C19C(&qword_1000ED550, &qword_1000ED558);
}

uint64_t sub_10009D82C()
{
  return sub_10004C19C(&qword_1000ED560, &qword_1000ED568);
}

unint64_t sub_10009D858()
{
  unint64_t result;

  result = qword_1000ED570;
  if (!qword_1000ED570)
  {
    result = swift_getWitnessTable(&unk_1000B81C0, &type metadata for ICFolderArchiveModel.Query.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED570);
  }
  return result;
}

unint64_t sub_10009D8A0()
{
  unint64_t result;

  result = qword_1000ED578;
  if (!qword_1000ED578)
  {
    result = swift_getWitnessTable(&unk_1000B81E8, &type metadata for ICFolderArchiveModel.Query.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED578);
  }
  return result;
}

unint64_t sub_10009D8E4()
{
  unint64_t result;

  result = qword_1000ED588;
  if (!qword_1000ED588)
  {
    result = swift_getWitnessTable(&unk_1000B8934, &type metadata for ICFolderArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED588);
  }
  return result;
}

unint64_t sub_10009D928()
{
  unint64_t result;

  result = qword_1000ED590;
  if (!qword_1000ED590)
  {
    result = swift_getWitnessTable(&unk_1000B890C, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000ED590);
  }
  return result;
}

unint64_t sub_10009D96C()
{
  unint64_t result;

  result = qword_1000ED5A0;
  if (!qword_1000ED5A0)
  {
    result = swift_getWitnessTable(&unk_1000B8170, &type metadata for ICFolderArchiveModel.Sorting);
    atomic_store(result, (unint64_t *)&qword_1000ED5A0);
  }
  return result;
}

unint64_t sub_10009D9B0()
{
  unint64_t result;

  result = qword_1000ED5B0;
  if (!qword_1000ED5B0)
  {
    result = swift_getWitnessTable(&unk_1000B88E4, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000ED5B0);
  }
  return result;
}

unint64_t sub_10009D9F4()
{
  unint64_t result;

  result = qword_1000ED5D8;
  if (!qword_1000ED5D8)
  {
    result = swift_getWitnessTable(&unk_1000B8294, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1000ED5D8);
  }
  return result;
}

unint64_t sub_10009DA38()
{
  unint64_t result;

  result = qword_1000ED5E0;
  if (!qword_1000ED5E0)
  {
    result = swift_getWitnessTable(&unk_1000B8324, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1000ED5E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ICFolderArchiveModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICFolderArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10009DB58 + 4 * byte_1000B7F8C[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10009DB8C + 4 * byte_1000B7F87[v4]))();
}

uint64_t sub_10009DB8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009DB94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009DB9CLL);
  return result;
}

uint64_t sub_10009DBA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009DBB0);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10009DBB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009DBBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.CodingKeys()
{
  return &type metadata for ICFolderArchiveModel.CodingKeys;
}

uint64_t _s38com_apple_mobilenotes_SharingExtension20ICFolderArchiveModelV5TypesOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10009DC24 + 4 * byte_1000B7F96[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10009DC58 + 4 * byte_1000B7F91[v4]))();
}

uint64_t sub_10009DC58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009DC60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009DC68);
  return result;
}

uint64_t sub_10009DC74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009DC7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10009DC80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009DC88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.Types()
{
  return &type metadata for ICFolderArchiveModel.Types;
}

uint64_t sub_10009DCA8()
{
  return sub_10004C19C(&qword_1000ED5E8, &qword_1000ED5F0);
}

unint64_t sub_10009DCD0()
{
  unint64_t result;

  result = qword_1000ED5F8;
  if (!qword_1000ED5F8)
  {
    result = swift_getWitnessTable(&unk_1000B8804, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000ED5F8);
  }
  return result;
}

unint64_t sub_10009DD18()
{
  unint64_t result;

  result = qword_1000ED600;
  if (!qword_1000ED600)
  {
    result = swift_getWitnessTable(&unk_1000B88BC, &type metadata for ICFolderArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED600);
  }
  return result;
}

unint64_t sub_10009DD60()
{
  unint64_t result;

  result = qword_1000ED608;
  if (!qword_1000ED608)
  {
    result = swift_getWitnessTable(&unk_1000B882C, &type metadata for ICFolderArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED608);
  }
  return result;
}

unint64_t sub_10009DDA8()
{
  unint64_t result;

  result = qword_1000ED610;
  if (!qword_1000ED610)
  {
    result = swift_getWitnessTable(&unk_1000B8854, &type metadata for ICFolderArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000ED610);
  }
  return result;
}

unint64_t sub_10009DDEC()
{
  unint64_t result;

  result = qword_1000ED618;
  if (!qword_1000ED618)
  {
    result = swift_getWitnessTable(&unk_1000B878C, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000ED618);
  }
  return result;
}

unint64_t sub_10009DE30()
{
  unint64_t result;

  result = qword_1000ED620;
  if (!qword_1000ED620)
  {
    result = swift_getWitnessTable(&unk_1000B8754, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1000ED620);
  }
  return result;
}

uint64_t sub_10009DE74()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC38com_apple_mobilenotes_SharingExtensionP33_B1BCC819264CC6286C5205954882378019ResourceBundleClass);
}

void sub_10009DEA4(char a1, uint64_t a2, os_log_t log)
{
  const __CFString *v3;
  int v4;
  const __CFString *v5;
  __int16 v6;
  uint64_t v7;

  v3 = CFSTR("YES");
  if ((a1 & 1) == 0)
    v3 = CFSTR("NO");
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Background sync task scheduled {success: %@, error: %@}", (uint8_t *)&v4, 0x16u);
}

void sub_10009DF40(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error loading item: %@", (uint8_t *)&v4, 0xCu);

}

void sub_10009DFD4(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Attempting to move notes into a folder that doesn't allow moving contents in or out: %@", (uint8_t *)&v4, 0xCu);

}

void sub_10009E068(void *a1, void *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortLoggingDescription"));
  v9 = 138412802;
  v10 = a1;
  v11 = 2112;
  v12 = v7;
  v13 = 2112;
  v14 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Moving note from unowned, shared folder to folder %@ in account %@ for note %@", (uint8_t *)&v9, 0x20u);

}

void sub_10009E14C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Couldn't get image source reference to generate a preview", v1, 2u);
}

void sub_10009E18C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  sub_10000E1D0((void *)&_mh_execute_header, a3, (uint64_t)a3, "Extracting media file: Error loading file representation for content type %@ - error: %@", (uint8_t *)&v4);
  sub_10000E1C8();
}

void sub_10009E208(uint64_t a1, NSObject *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeFileURL, "identifier"));
  v5 = *(_QWORD *)(a1 + 40);
  v7 = 138412546;
  v8 = v4;
  v9 = 2112;
  v10 = v5;
  sub_10000E1D0((void *)&_mh_execute_header, a2, v6, "Extracting URL: Error loading item for type identifier %@ - error: %@", (uint8_t *)&v7);

}

void sub_10009E2BC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Provided item is nil.", v1, 2u);
}

void sub_10009E2FC(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "registeredTypeIdentifiers"));
  v5 = 138412290;
  v6 = v3;
  sub_10000E1BC((void *)&_mh_execute_header, a2, v4, "Error: could not find extension in %@", (uint8_t *)&v5);

}

void sub_10009E38C(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_10000E1BC((void *)&_mh_execute_header, a2, a3, "Error loading item: %@", (uint8_t *)&v4);
  sub_10000E1C8();
}

void sub_10009E3F8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_10000E1BC((void *)&_mh_execute_header, a2, a3, "Cannot save temporary file to disk: %@", (uint8_t *)&v3);
  sub_10000E1C8();
}

void sub_10009E460(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid account type for account: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10009E4D4(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v6 = 138412546;
  v7 = v5;
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error %@ at URL (getting type identifier) during import notes process: %@", (uint8_t *)&v6, 0x16u);

}

void sub_10009E580(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000125B4((void *)&_mh_execute_header, a1, a3, "Must have an account to import notes.", a5, a6, a7, a8, 0);
  sub_1000125E4();
}

void sub_10009E5B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000125B4((void *)&_mh_execute_header, a1, a3, "Cannot import with nil account even though we have an account.objectID.", a5, a6, a7, a8, 0);
  sub_1000125E4();
}

void sub_10009E5E0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_1000125A0((void *)&_mh_execute_header, v2, v3, "Error on saving imported notes: %@", v4, v5, v6, v7, 2u);

  sub_1000125EC();
}

void sub_10009E65C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Cannot cancel import process because it is not in progress.", v1, 2u);
  sub_1000125E4();
}

void sub_10009E698(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_1000125D0(a1, a2), "localizedDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_10001258C((void *)&_mh_execute_header, v6, v7, "Error removing file from temporary directory: %@");

  sub_1000125C4();
}

void sub_10009E6E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_1000125D0(a1, a2), "localizedDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_10001258C((void *)&_mh_execute_header, v6, v7, "Error copying file to temporary directory: %@");

  sub_1000125C4();
}

void sub_10009E738(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unexpected search result type for determining share extension cell identifier", v1, 2u);
}

void sub_10009E778(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "representedItem"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error selecting Create New Note - unknown folder %@", (uint8_t *)&v4, 0xCu);

}

void sub_10009E80C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unexpected sharing extension search result type in cellForRowAtIndexPath", v1, 2u);
}

void sub_10009E84C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001C580();
  sub_10001C564((void *)&_mh_execute_header, v0, v1, "Can't start parsing since parsing is currently in progress.", v2, v3, v4, v5, v6);
  sub_1000125E4();
}

void sub_10009E878()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10001C580();
  sub_10001C574((void *)&_mh_execute_header, v0, v1, "New note is nil.", v2);
  sub_1000125E4();
}

void sub_10009E8A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001C580();
  sub_10001C564((void *)&_mh_execute_header, v0, v1, "Can't cancel process since parsing isn't running.", v2, v3, v4, v5, v6);
  sub_1000125E4();
}

void sub_10009E8D4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error creating bookmark data from url: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10009E948(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10001C574((void *)&_mh_execute_header, a3, (uint64_t)a3, "Couldn't build a text attachment.", a1);
}

void sub_10009E97C(void *a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Undoably setting folder %@ to note %@.", (uint8_t *)&v7, 0x16u);

}

void sub_10009EA3C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Tried to set the folder to be a smart folder, which really shouldn't contain notes per se. Reverted to the owning account's default folder.", v1, 2u);
}

void sub_10009EA7C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trashFolder"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  v11 = 138412802;
  v12 = v4;
  v13 = 2112;
  v14 = v7;
  v15 = 2112;
  v16 = v9;
  sub_10001CFA4((void *)&_mh_execute_header, a2, v10, "Undoably moving note %@ to the recently deleted folder %@ in account %@", (uint8_t *)&v11);

  sub_10001CF8C();
}

void sub_10009EB7C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "trashFolder"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v11 = 138412802;
  v12 = v6;
  v13 = 2112;
  v14 = v8;
  v15 = 2112;
  v16 = v9;
  sub_10001CFA4((void *)&_mh_execute_header, a2, v10, "Moving shared note as a participant to recently deleted folder %@ in account %@ for note %@", (uint8_t *)&v11);

  sub_10001CF8C();
}

void sub_10009EC7C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  sub_1000215D4();
  sub_1000215C0((void *)&_mh_execute_header, v2, v3, "Undoably deleting note %@", v4, v5, v6, v7, v8);

  sub_1000125EC();
}

void sub_10009ECF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001C580();
  sub_1000125B4((void *)&_mh_execute_header, v0, v1, "Attempting to delete undeletable notes", v2, v3, v4, v5, v6);
  sub_1000125E4();
}

void sub_10009ED20()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_1000215D4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "attempting to delete an undeletable folder %@", v1, 0xCu);
}

void sub_10009ED90(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  sub_1000215D4();
  sub_1000215C0((void *)&_mh_execute_header, v2, v3, "Not authenticated to copy note %@ across accounts", v4, v5, v6, v7, v8);

  sub_1000125EC();
}

void sub_10009EE08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001C580();
  sub_1000125B4((void *)&_mh_execute_header, v0, v1, "Error while saving after processing notes.", v2, v3, v4, v5, v6);
  sub_1000125E4();
}

void sub_10009EE34(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  sub_1000215D4();
  sub_1000125A0((void *)&_mh_execute_header, v2, v3, "Unable to find destination folder when moving note: %@", v4, v5, v6, v7, v8);

  sub_1000125EC();
}

void sub_10009EEAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10001C580();
  sub_1000125B4((void *)&_mh_execute_header, v0, v1, "Unable to find copied note to delete", v2, v3, v4, v5, v6);
  sub_1000125E4();
}

void sub_10009EED8()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_10001C580();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Tried to set the folder to be a smart folder, which really shouldn't contain notes per se. Reverted to the owning account's default folder.", v1, 2u);
  sub_1000125E4();
}

void sub_10009EF10(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  sub_1000215D4();
  sub_1000125A0((void *)&_mh_execute_header, v2, v3, "Unable to find folder to move note to: %@", v4, v5, v6, v7, v8);

  sub_1000125EC();
}

void sub_10009EF88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000125B4((void *)&_mh_execute_header, a1, a3, "Attempting to add contents to non-editable folder through Push UI", a5, a6, a7, a8, 0);
}

void sub_10009EFBC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000125B4((void *)&_mh_execute_header, a1, a3, "Attempting to add contents to non-editable note through Push UI", a5, a6, a7, a8, 0);
}

void sub_10009EFF0()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_1000215D4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Extracting attachments from input items: %@", v1, 0xCu);
  sub_10000E1C8();
}

void sub_10009F05C(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeURL, "identifier"));
  sub_10002C654();
  sub_10000E1D0((void *)&_mh_execute_header, a2, v4, "Can't load item for type identifier %@: %@", v5);

  sub_10002C66C();
}

void sub_10009F0F0(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeRTF, "identifier"));
  sub_10002C654();
  sub_10000E1D0((void *)&_mh_execute_header, a2, v4, "Can't load item for type identifier %@: %@", v5);

  sub_10002C66C();
}

void sub_10009F184(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypePlainText, "identifier"));
  sub_10002C654();
  sub_10000E1D0((void *)&_mh_execute_header, a2, v4, "Can't load item for type identifier %@: %@", v5);

  sub_10002C66C();
}

void sub_10009F218()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000215D4();
  sub_10002C67C((void *)&_mh_execute_header, v0, v1, "Error unarchiving data: %@", v2, v3, v4, v5, v6);
  sub_10000E1C8();
}

void sub_10009F278()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 138412546;
  sub_10002C68C();
  sub_10000E1D0((void *)&_mh_execute_header, v0, v1, "Can't load item for type identifier %@: %@", (uint8_t *)v2);
  sub_10000E1C8();
}

void sub_10009F2E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000215D4();
  sub_10002C67C((void *)&_mh_execute_header, v0, v1, "Can't determine how to handle url that is not a string or a URL %@", v2, v3, v4, v5, v6);
  sub_10000E1C8();
}

void sub_10009F348()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 138412546;
  sub_10002C68C();
  sub_10000E1D0((void *)&_mh_execute_header, v0, v1, "Can't load item for type identifier %@: %@", (uint8_t *)v2);
  sub_10000E1C8();
}

void sub_10009F3B8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002C67C((void *)&_mh_execute_header, a2, a3, "Couldn't get modification date from file url: %@", a5, a6, a7, a8, 2u);
}

void sub_10009F420(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002C67C((void *)&_mh_execute_header, a2, a3, "Couldn't get creation date from file url: %@", a5, a6, a7, a8, 2u);
}

void sub_10009F488(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10002EA50();
  sub_10002EA3C((void *)&_mh_execute_header, v2, v3, "Error: %@ while getting contents of URL: %@", v4, v5, v6, v7, v8);

  sub_10002C66C();
}

void sub_10009F510(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_10002EA50();
  sub_10002EA3C((void *)&_mh_execute_header, v2, v3, "Error %@ at URL (getting type identifier) during import notes process: %@", v4, v5, v6, v7, v8);

  sub_10002C66C();
}

uint64_t _s38com_apple_mobilenotes_SharingExtension23ICArchiveNotesPreviewerC4NoteV4hash4intoys6HasherVz_tF_0()
{
  return URL.hash(into:)();
}

id objc_msgSend_ICBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICBackgroundColor");
}

id objc_msgSend_ICDarkenedTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICDarkenedTintColor");
}

id objc_msgSend_ICTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTintColor");
}

id objc_msgSend_ICTintedSelectionColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTintedSelectionColor");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByDeletingLastPathComponent");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__scaledValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scaledValueForValue:");
}

id objc_msgSend__setHidesShadow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHidesShadow:");
}

id objc_msgSend__setShowsBackButtonIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShowsBackButtonIndicator:");
}

id objc_msgSend__shouldReverseLayoutDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldReverseLayoutDirection");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accessibilityCellForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityCellForRowAtIndexPath:");
}

id objc_msgSend_accessibilityExpansionAccessoryImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityExpansionAccessoryImageView");
}

id objc_msgSend_accessibilityLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityLabel");
}

id objc_msgSend_accessibilitySharedViaICloudStringForNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilitySharedViaICloudStringForNote:");
}

id objc_msgSend_accessibilityTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityTraits");
}

id objc_msgSend_accessoryView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryView");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account");
}

id objc_msgSend_accountAccessoryImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountAccessoryImageView");
}

id objc_msgSend_accountId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountId");
}

id objc_msgSend_accountItemAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountItemAtIndex:");
}

id objc_msgSend_accountLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountLabel");
}

id objc_msgSend_accountName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountName");
}

id objc_msgSend_accountObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountObjectID");
}

id objc_msgSend_accountPickerBackButtonTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPickerBackButtonTitle");
}

id objc_msgSend_accountTitleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTitleLabel");
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountType");
}

id objc_msgSend_accountUtilities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountUtilities");
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accounts");
}

id objc_msgSend_actionWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithHandler:");
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:handler:");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_activityIndicatorBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityIndicatorBarButtonItem");
}

id objc_msgSend_activityIndicatorView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityIndicatorView");
}

id objc_msgSend_addAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccount:");
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAction:");
}

id objc_msgSend_addAttachmentWithUTI_data_filename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttachmentWithUTI:data:filename:");
}

id objc_msgSend_addAttachmentsInContent_forEvernoteResource_forNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttachmentsInContent:forEvernoteResource:forNote:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addChildItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildItem:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConstraints:");
}

id objc_msgSend_addFolderListItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFolderListItem:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addHashtagToNoteBodyIfMissing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addHashtagToNoteBodyIfMissing:");
}

id objc_msgSend_addKeyCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeyCommand:");
}

id objc_msgSend_addLegacyTombstoneForFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLegacyTombstoneForFolder:");
}

id objc_msgSend_addLegacyTombstoneForNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLegacyTombstoneForNote:");
}

id objc_msgSend_addNewNoteByCopyingNote_toFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNewNoteByCopyingNote:toFolder:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOrDeleteLocalAccountIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrDeleteLocalAccountIfNecessary");
}

id objc_msgSend_addSizeConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSizeConstraint");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forControlEvents:");
}

id objc_msgSend_addTitleInContent_forEvernoteNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTitleInContent:forEvernoteNote:");
}

id objc_msgSend_addTitleInContent_titleString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTitleInContent:titleString:");
}

id objc_msgSend_addTodoListsIfNeededInContent_forEvernoteNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTodoListsIfNeededInContent:forEvernoteNote:");
}

id objc_msgSend_addURLAttachmentWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addURLAttachmentWithURL:");
}

id objc_msgSend_addURLs_toImportFolder_shouldPreserveFolders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addURLs:toImportFolder:shouldPreserveFolders:");
}

id objc_msgSend_adjustFrame_forKeyboardFrame_topLayoutGuideHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustFrame:forKeyboardFrame:topLayoutGuideHeight:");
}

id objc_msgSend_adjustedDestinationFolderForNoteContainer_sourceFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedDestinationFolderForNoteContainer:sourceFolder:");
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithTitle:message:preferredStyle:");
}

id objc_msgSend_allActiveAccountsInContextSortedByAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allActiveAccountsInContextSortedByAccountType:");
}

id objc_msgSend_allFolders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allFolders");
}

id objc_msgSend_allItemsFolderLocalizedTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allItemsFolderLocalizedTitle");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allowedContentTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowedContentTypes");
}

id objc_msgSend_allowsNewTextLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsNewTextLength:");
}

id objc_msgSend_alternateConstraintsForAXLargerTextSizes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateConstraintsForAXLargerTextSizes");
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:");
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:completion:");
}

id objc_msgSend_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:");
}

id objc_msgSend_appSessionDidTerminate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appSessionDidTerminate");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendAttributedString_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:error:");
}

id objc_msgSend_appendLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendLock");
}

id objc_msgSend_appendMediaItemWithItemProvider_attachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendMediaItemWithItemProvider:attachments:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appendString_toNote_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:toNote:error:");
}

id objc_msgSend_applicationDocumentsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDocumentsURL");
}

id objc_msgSend_archiveEvernoteNotesFromBookmarkData_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveEvernoteNotesFromBookmarkData:completionBlock:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_arrowImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrowImageView");
}

id objc_msgSend_attachment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachment");
}

id objc_msgSend_attachmentBrickView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentBrickView");
}

id objc_msgSend_attachmentDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentDidChange");
}

id objc_msgSend_attachmentExceedsMaxSizeAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentExceedsMaxSizeAllowed:");
}

id objc_msgSend_attachmentModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentModel");
}

id objc_msgSend_attachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachments");
}

id objc_msgSend_attachmentsFromExtensionContext_note_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentsFromExtensionContext:note:");
}

id objc_msgSend_attribute_atIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attribute:atIndex:effectiveRange:");
}

id objc_msgSend_attributeSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeSet");
}

id objc_msgSend_attributedContentText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedContentText");
}

id objc_msgSend_attributedStringContentFromFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringContentFromFileURL:error:");
}

id objc_msgSend_attributedStringFromHTMLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringFromHTMLString:");
}

id objc_msgSend_attributedStringFromHTMLString_baseURL_readerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringFromHTMLString:baseURL:readerDelegate:");
}

id objc_msgSend_attributedStringWithAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringWithAttachment:");
}

id objc_msgSend_attributedText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedText");
}

id objc_msgSend_attributedTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedTitle");
}

id objc_msgSend_backBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backBarButtonItem");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeFirstResponder");
}

id objc_msgSend_beginUndoGrouping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginUndoGrouping");
}

id objc_msgSend_beginUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginUpdates");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_boldSystemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boldSystemFontOfSize:");
}

id objc_msgSend_bookmarkDataFromFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookmarkDataFromFileURL:");
}

id objc_msgSend_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bottomTextView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomTextView");
}

id objc_msgSend_bottomTextViewCollapsed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomTextViewCollapsed");
}

id objc_msgSend_bottomTextviewCollapsibleZeroHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomTextviewCollapsibleZeroHeightConstraint");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_brickCollapsibleZeroHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brickCollapsibleZeroHeightConstraint");
}

id objc_msgSend_brickContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brickContainer");
}

id objc_msgSend_brickContainerHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brickContainerHeightConstraint");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_buttonWithConfiguration_primaryAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonWithConfiguration:primaryAction:");
}

id objc_msgSend_canAddAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAddAttachments:");
}

id objc_msgSend_canHandleFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canHandleFileURL:");
}

id objc_msgSend_canMoveAddOrDeleteContents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canMoveAddOrDeleteContents");
}

id objc_msgSend_canShareToFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canShareToFolder:");
}

id objc_msgSend_canShareToNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canShareToNote:");
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperations");
}

id objc_msgSend_cancelButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelButton");
}

id objc_msgSend_cancelEverythingWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelEverythingWithCompletionHandler:");
}

id objc_msgSend_cancelIndexingOperationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelIndexingOperationsWithCompletionHandler:");
}

id objc_msgSend_cancelParsing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelParsing");
}

id objc_msgSend_cancelProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelProcess");
}

id objc_msgSend_cancelRequestWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelRequestWithError:");
}

id objc_msgSend_capsuleShape(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capsuleShape");
}

id objc_msgSend_caretRectForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caretRectForPosition:");
}

id objc_msgSend_cellHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellHeight");
}

id objc_msgSend_cellIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellIdentifier");
}

id objc_msgSend_centerYAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerYAnchor");
}

id objc_msgSend_changeLinkDestinationFromNote_toNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeLinkDestinationFromNote:toNote:");
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "children");
}

id objc_msgSend_cleanupArchiveId_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupArchiveId:completionBlock:");
}

id objc_msgSend_cleanupTemporaryImageFilesIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupTemporaryImageFilesIfNecessary");
}

id objc_msgSend_cleanupTemporaryNewNoteIfNecesary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupTemporaryNewNoteIfNecesary");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_collapseFolderListItem_atIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collapseFolderListItem:atIndexPath:");
}

id objc_msgSend_collapsedAccountIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collapsedAccountIdentifiers");
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithAlphaComponent:");
}

id objc_msgSend_commonInit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commonInit");
}

id objc_msgSend_completeExtensionRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeExtensionRequest:");
}

id objc_msgSend_completeRequestReturningItems_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeRequestReturningItems:completionHandler:");
}

id objc_msgSend_computedSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computedSize");
}

id objc_msgSend_configureTableViewNibs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureTableViewNibs:");
}

id objc_msgSend_configureUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureUI");
}

id objc_msgSend_conformsToType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToType:");
}

id objc_msgSend_consolidateDuplicateAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consolidateDuplicateAttachments:");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_constraintEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:constant:");
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToAnchor:constant:");
}

id objc_msgSend_constraintGreaterThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToConstant:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:constant:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:multiplier:");
}

id objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:");
}

id objc_msgSend_constraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraints");
}

id objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintsWithVisualFormat:options:metrics:views:");
}

id objc_msgSend_containerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerView");
}

id objc_msgSend_containerViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerViewController");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsOnlyRawImageDataInProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsOnlyRawImageDataInProvider:");
}

id objc_msgSend_containsOnlyRawImagesInExtensionContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsOnlyRawImagesInExtensionContext:");
}

id objc_msgSend_containsUndeletableNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsUndeletableNotes:");
}

id objc_msgSend_containsUnduplicatableNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsUnduplicatableNotes:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "content");
}

id objc_msgSend_contentParseQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentParseQueue");
}

id objc_msgSend_contentScaleFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentScaleFactor");
}

id objc_msgSend_contentSizeCategoryDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSizeCategoryDidChange");
}

id objc_msgSend_contentViewContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentViewContainer");
}

id objc_msgSend_contentViewTopSeparator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentViewTopSeparator");
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_contextContainsOnlyRawImages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextContainsOnlyRawImages");
}

id objc_msgSend_convertRect_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromView:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyFolder_toFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyFolder:toFolder:");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyNotes_toFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyNotes:toFolder:");
}

id objc_msgSend_copyValuesToNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyValuesToNote:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countEvernoteNotesFromBookmarkData_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countEvernoteNotesFromBookmarkData:completionBlock:");
}

id objc_msgSend_countLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countLabel");
}

id objc_msgSend_countOfAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfAccounts");
}

id objc_msgSend_countOfItemsInAccountAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfItemsInAccountAtIndex:");
}

id objc_msgSend_countOfNonTrashFolderVisibleInlineAttachmentsForHashtagStandardizedContent_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfNonTrashFolderVisibleInlineAttachmentsForHashtagStandardizedContent:account:");
}

id objc_msgSend_countOfVisibleDescendants(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfVisibleDescendants");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createNewNoteToolbar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewNoteToolbar");
}

id objc_msgSend_createNewNoteToolbarBottomConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewNoteToolbarBottomConstraint");
}

id objc_msgSend_createNewNoteToolbarHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewNoteToolbarHeightConstraint");
}

id objc_msgSend_createTempFileFromImage_populateAttachmentInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createTempFileFromImage:populateAttachmentInfo:");
}

id objc_msgSend_created(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "created");
}

id objc_msgSend_currentErrorFileURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentErrorFileURLs");
}

id objc_msgSend_currentSelectedFolderForTableViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSelectedFolderForTableViewController:");
}

id objc_msgSend_currentSelectedNoteForTableViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSelectedNoteForTableViewController:");
}

id objc_msgSend_customNoteSortType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customNoteSortType");
}

id objc_msgSend_darkGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "darkGrayColor");
}

id objc_msgSend_dashContainerZeroWidthConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dashContainerZeroWidthConstraint");
}

id objc_msgSend_dashLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dashLabel");
}

id objc_msgSend_dashLabelZeroWidthConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dashLabelZeroWidthConstraint");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateLabel");
}

id objc_msgSend_dbWriteLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dbWriteLock");
}

id objc_msgSend_dbWriteLockfd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dbWriteLockfd");
}

id objc_msgSend_dbWriteUnlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dbWriteUnlock");
}

id objc_msgSend_deactivateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateConstraints:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_deduplicatingTitle_forFolder_forNewFolderParent_ofAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deduplicatingTitle:forFolder:forNewFolderParent:ofAccount:");
}

id objc_msgSend_deduplicatingTitle_forFolder_ofAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deduplicatingTitle:forFolder:ofAccount:");
}

id objc_msgSend_defaultAccountInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultAccountInContext:");
}

id objc_msgSend_defaultBrickSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBrickSize");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultConstraints");
}

id objc_msgSend_defaultConstraintsForRegularTextSizes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultConstraintsForRegularTextSizes");
}

id objc_msgSend_defaultExpansionAccessoryImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultExpansionAccessoryImageView");
}

id objc_msgSend_defaultFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultFolder");
}

id objc_msgSend_defaultFolderInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultFolderInContext:");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultMetrics");
}

id objc_msgSend_defaultSystemImageName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSystemImageName");
}

id objc_msgSend_defaultTitleForEmptyNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTitleForEmptyNote");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAttachment:");
}

id objc_msgSend_deleteNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteNote:");
}

id objc_msgSend_deleteRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_deleteTemporaryImageFileIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteTemporaryImageFileIfNecessary");
}

id objc_msgSend_deleteUnusedHashtagsWithStandardizedContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteUnusedHashtagsWithStandardizedContent:");
}

id objc_msgSend_dequeueReusableCellWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithIdentifier:");
}

id objc_msgSend_dequeueReusableCellWithIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:");
}

id objc_msgSend_dequeueReusableHeaderFooterViewWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableHeaderFooterViewWithIdentifier:");
}

id objc_msgSend_deselectRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deselectRowAtIndexPath:animated:");
}

id objc_msgSend_destinationViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationViewController");
}

id objc_msgSend_deviceIsVision(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIsVision");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didDisppearInContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didDisppearInContainer:");
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMoveToParentViewController:");
}

id objc_msgSend_dimmingView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dimmingView");
}

id objc_msgSend_disableConstraintsBySettingPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableConstraintsBySettingPriority:");
}

id objc_msgSend_disclosureAccessoryImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disclosureAccessoryImageView");
}

id objc_msgSend_dismissRootViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissRootViewController");
}

id objc_msgSend_dismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerAnimated:completion:");
}

id objc_msgSend_dismissWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissWithCompletion:");
}

id objc_msgSend_duplicateNote_intoFolder_isPasswordProtected_removeOriginalNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duplicateNote:intoFolder:isPasswordProtected:removeOriginalNote:");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_enableConstraintsBySettingPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableConstraintsBySettingPriority:");
}

id objc_msgSend_endSessionSynchronously_endReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionSynchronously:endReason:");
}

id objc_msgSend_endUndoGrouping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endUndoGrouping");
}

id objc_msgSend_endUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endUpdates");
}

id objc_msgSend_enumerateAttribute_inRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_errorFileURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorFileURLs");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_eventReporter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventReporter");
}

id objc_msgSend_existingObjectWithID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingObjectWithID:error:");
}

id objc_msgSend_expandCollapseHitView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expandCollapseHitView");
}

id objc_msgSend_expandFolderListItem_atIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expandFolderListItem:atIndexPath:");
}

id objc_msgSend_expandedFolderIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expandedFolderIdentifiers");
}

id objc_msgSend_expansionAccessoryImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expansionAccessoryImageView");
}

id objc_msgSend_extensionContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extensionContext");
}

id objc_msgSend_extractAttachmentsFromInputItems_note_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractAttachmentsFromInputItems:note:");
}

id objc_msgSend_extractDataWithProvider_forUTI_useTempFile_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractDataWithProvider:forUTI:useTempFile:withCompletion:");
}

id objc_msgSend_extractMediaFileURLWithProvider_contentType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractMediaFileURLWithProvider:contentType:completion:");
}

id objc_msgSend_extractURLWithProvider_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractURLWithProvider:withCompletion:");
}

id objc_msgSend_fileName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileName");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_fileURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLs");
}

id objc_msgSend_fileWrapper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileWrapper");
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filename");
}

id objc_msgSend_filenameFromUTI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filenameFromUTI:");
}

id objc_msgSend_fillOutTitleAndSummaryForAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillOutTitleAndSummaryForAttachments:");
}

id objc_msgSend_findSizeLayoutConstraintIfExists(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findSizeLayoutConstraintIfExists");
}

id objc_msgSend_finishRemainingOperationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishRemainingOperationsWithCompletionHandler:");
}

id objc_msgSend_firstAttribute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstAttribute");
}

id objc_msgSend_firstItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstItem");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_fixupAfterEditing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixupAfterEditing");
}

id objc_msgSend_flattenedChildItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flattenedChildItems");
}

id objc_msgSend_folder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folder");
}

id objc_msgSend_folderIcon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderIcon");
}

id objc_msgSend_folderIconSpacingZeroWidthConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderIconSpacingZeroWidthConstraint");
}

id objc_msgSend_folderIconView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderIconView");
}

id objc_msgSend_folderIconZeroHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderIconZeroHeightConstraint");
}

id objc_msgSend_folderIconZeroWidthConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderIconZeroWidthConstraint");
}

id objc_msgSend_folderLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderLabel");
}

id objc_msgSend_folderLabelZeroHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderLabelZeroHeightConstraint");
}

id objc_msgSend_folderLabelZeroWidthConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderLabelZeroWidthConstraint");
}

id objc_msgSend_folderListItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderListItem");
}

id objc_msgSend_folderListItemAccountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderListItemAccountType");
}

id objc_msgSend_folderListViewState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderListViewState");
}

id objc_msgSend_folderPickerBackButtonTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderPickerBackButtonTitle");
}

id objc_msgSend_folderPickerTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderPickerTitle");
}

id objc_msgSend_folderTableViewItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderTableViewItems");
}

id objc_msgSend_folderTitleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "folderTitleLabel");
}

id objc_msgSend_font(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "font");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_frameOfPresentedViewInContainerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameOfPresentedViewInContainerView");
}

id objc_msgSend_frameOfPresentedViewInContainerView_withKeyboardFrame_topLayoutGuideLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameOfPresentedViewInContainerView:withKeyboardFrame:topLayoutGuideLength:");
}

id objc_msgSend_functionWithControlPoints__::(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithControlPoints::::");
}

id objc_msgSend_generateImagePreviewUsingAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateImagePreviewUsingAttachment:");
}

id objc_msgSend_generatePreviewWithAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generatePreviewWithAttachments:");
}

id objc_msgSend_generatePreviewsInOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generatePreviewsInOperation:");
}

id objc_msgSend_generateVideoPreviewUsingAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateVideoPreviewUsingAttachment:");
}

id objc_msgSend_getAttachmentInfoWithImage_useTempFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAttachmentInfoWithImage:useTempFile:");
}

id objc_msgSend_getModernAccountFolderListType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getModernAccountFolderListType:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getTypeIdentifierForFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTypeIdentifierForFileURL:");
}

id objc_msgSend_getURLWithoutQueryAndFragmentFromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getURLWithoutQueryAndFragmentFromURL:");
}

id objc_msgSend_handleFailedAssertWithCondition_functionName_simulateCrash_showAlert_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:");
}

id objc_msgSend_hasAnyCustomFoldersIncludingSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAnyCustomFoldersIncludingSystem:");
}

id objc_msgSend_hasItemConformingToTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasItemConformingToTypeIdentifier:");
}

id objc_msgSend_hasMultipleAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMultipleAccounts");
}

id objc_msgSend_hasSetUpSizeConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSetUpSizeConstraint");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hashtagWithDisplayText_account_createIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashtagWithDisplayText:account:createIfNecessary:");
}

id objc_msgSend_hashtagWithStandardizedContent_onlyVisible_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashtagWithStandardizedContent:onlyVisible:account:");
}

id objc_msgSend_headerItemWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerItemWithAccount:");
}

id objc_msgSend_headerType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerType");
}

id objc_msgSend_heightAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightAnchor");
}

id objc_msgSend_hideUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideUI");
}

id objc_msgSend_horizontalMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalMargin");
}

id objc_msgSend_ic_JPEGData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_JPEGData");
}

id objc_msgSend_ic_PNGData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_PNGData");
}

id objc_msgSend_ic_accessibilityListAccessoryViewImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_accessibilityListAccessoryViewImage");
}

id objc_msgSend_ic_addNonNilObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_addNonNilObject:");
}

id objc_msgSend_ic_animateWithDuration_timingFunction_animations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_animateWithDuration:timingFunction:animations:");
}

id objc_msgSend_ic_applyRoundedCorners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_applyRoundedCorners");
}

id objc_msgSend_ic_arrayByAddingObjectsFromNonNilArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_arrayByAddingObjectsFromNonNilArray:");
}

id objc_msgSend_ic_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_becomeFirstResponder");
}

id objc_msgSend_ic_briefFormattedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_briefFormattedDate");
}

id objc_msgSend_ic_briefFormattedDateForAccessibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_briefFormattedDateForAccessibility");
}

id objc_msgSend_ic_colorWith256Red_green_blue_unitAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_colorWith256Red:green:blue:unitAlpha:");
}

id objc_msgSend_ic_cropRectZeroAlpha(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_cropRectZeroAlpha");
}

id objc_msgSend_ic_defaultListAccessoryViewImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_defaultListAccessoryViewImage");
}

id objc_msgSend_ic_enumerateAttachmentsInContext_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_enumerateAttachmentsInContext:usingBlock:");
}

id objc_msgSend_ic_existingObjectWithID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_existingObjectWithID:context:");
}

id objc_msgSend_ic_filledTintedButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_filledTintedButtonConfiguration");
}

id objc_msgSend_ic_fontWithSingleLineA(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_fontWithSingleLineA");
}

id objc_msgSend_ic_imageFromRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_imageFromRect:");
}

id objc_msgSend_ic_isFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isFirstResponder");
}

id objc_msgSend_ic_isMainThreadContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isMainThreadContext");
}

id objc_msgSend_ic_isUndoingOrRedoing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isUndoingOrRedoing");
}

id objc_msgSend_ic_isVision(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isVision");
}

id objc_msgSend_ic_isiPad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isiPad");
}

id objc_msgSend_ic_keyCommandWithInput_modifierFlags_action_discoverabilityTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_keyCommandWithInput:modifierFlags:action:discoverabilityTitle:");
}

id objc_msgSend_ic_largeSystemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_largeSystemImageNamed:");
}

id objc_msgSend_ic_loggingDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_loggingDescription");
}

id objc_msgSend_ic_managedObjectIDForURIString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_managedObjectIDForURIString:");
}

id objc_msgSend_ic_objectsFromObjectIDs_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectsFromObjectIDs:context:");
}

id objc_msgSend_ic_objectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectsPassingTest:");
}

id objc_msgSend_ic_permanentObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_permanentObjectID");
}

id objc_msgSend_ic_permanentObjectIDsFromObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_permanentObjectIDsFromObjects:");
}

id objc_msgSend_ic_postNotificationOnMainThreadAfterSaveWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_postNotificationOnMainThreadAfterSaveWithName:");
}

id objc_msgSend_ic_postNotificationOnMainThreadWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_postNotificationOnMainThreadWithName:");
}

id objc_msgSend_ic_presentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_presentationController");
}

id objc_msgSend_ic_previewImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_previewImage");
}

id objc_msgSend_ic_quotedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_quotedString");
}

id objc_msgSend_ic_refreshObject_mergeChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_refreshObject:mergeChanges:");
}

id objc_msgSend_ic_safeAreaLayoutGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_safeAreaLayoutGuide");
}

id objc_msgSend_ic_safeURLAssetWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_safeURLAssetWithURL:");
}

id objc_msgSend_ic_save(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_save");
}

id objc_msgSend_ic_saveWithLogDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_saveWithLogDescription:");
}

id objc_msgSend_ic_scaledImageMinDimension_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_scaledImageMinDimension:scale:");
}

id objc_msgSend_ic_searchResultType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_searchResultType");
}

id objc_msgSend_ic_smallSystemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_smallSystemImageNamed:");
}

id objc_msgSend_ic_systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_systemImageNamed:");
}

id objc_msgSend_ic_trimmedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_trimmedString");
}

id objc_msgSend_ic_truncatedStringWithMaxLength_truncated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_truncatedStringWithMaxLength:truncated:");
}

id objc_msgSend_iconView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconView");
}

id objc_msgSend_iconViewBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconViewBaselineConstraint");
}

id objc_msgSend_iconViewCenterYConstraintForAXLargerTextSizes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconViewCenterYConstraintForAXLargerTextSizes");
}

id objc_msgSend_iconViewContainerMinHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconViewContainerMinHeightConstraint");
}

id objc_msgSend_iconViewLeadingConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconViewLeadingConstraint");
}

id objc_msgSend_idealFrameForMainViewControllerWithoutKeyboardForContainerView_topLayoutGuideHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idealFrameForMainViewControllerWithoutKeyboardForContainerView:topLayoutGuideHeight:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageCollapsibleZeroWidthConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageCollapsibleZeroWidthConstraint");
}

id objc_msgSend_imageFlippedForRightToLeftLayoutDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageFlippedForRightToLeftLayoutDirection");
}

id objc_msgSend_imageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageView");
}

id objc_msgSend_imageViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageViews");
}

id objc_msgSend_imagesView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imagesView");
}

id objc_msgSend_importCompletedForNoteProcessor_destinationFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importCompletedForNoteProcessor:destinationFolder:");
}

id objc_msgSend_importDocumentsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importDocumentsURL");
}

id objc_msgSend_importNoteFileParsers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importNoteFileParsers");
}

id objc_msgSend_importNoteProcessor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importNoteProcessor");
}

id objc_msgSend_importNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importNotes");
}

id objc_msgSend_importRootViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importRootViewController");
}

id objc_msgSend_importStartedForNoteProcessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importStartedForNoteProcessor:");
}

id objc_msgSend_importedFromLegacy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importedFromLegacy");
}

id objc_msgSend_importedTypeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "importedTypeWithIdentifier:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexPathForCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForCell:");
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRow:inSection:");
}

id objc_msgSend_indexesOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexesOfObjectsPassingTest:");
}

id objc_msgSend_inhibitSearchCancelAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inhibitSearchCancelAnimation");
}

id objc_msgSend_initWithActivityIndicatorStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityIndicatorStyle:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBarButtonSystemItem_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarButtonSystemItem:menu:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCustomView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCustomView:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:scale:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:");
}

id objc_msgSend_initWithFolder_toParentObject_isCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFolder:toParentObject:isCopy:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithFrame_showMovieDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:showMovieDuration:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithName_target_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:target:selector:");
}

id objc_msgSend_initWithNote_toFolder_isCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNote:toFolder:isCopy:");
}

id objc_msgSend_initWithObject_fromParentObject_toParentObject_isCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObject:fromParentObject:toParentObject:isCopy:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithPresentedViewController_presentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPresentedViewController:presentingViewController:");
}

id objc_msgSend_initWithRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootViewController:");
}

id objc_msgSend_initWithScreenScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScreenScale:");
}

id objc_msgSend_initWithSearchSuggestionsResponder_searchString_performNLSearch_performTopHitSearch_tokens_modernResultsOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSearchSuggestionsResponder:searchString:performNLSearch:performTopHitSearch:tokens:modernResultsOnly:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithStyle_reuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:reuseIdentifier:");
}

id objc_msgSend_initWithSubTrackerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubTrackerName:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithURL_options_documentAttributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:options:documentAttributes:error:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithViewState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithViewState:");
}

id objc_msgSend_initWithWithImage_videoDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWithImage:videoDuration:");
}

id objc_msgSend_inlineAttachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inlineAttachments");
}

id objc_msgSend_inputItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputItems");
}

id objc_msgSend_insertAttributedString_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertAttributedString:atIndex:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_installBrickForAttachmentInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installBrickForAttachmentInfo:");
}

id objc_msgSend_installImagesViewForAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installImagesViewForAttachments:");
}

id objc_msgSend_instantiateInitialViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instantiateInitialViewController");
}

id objc_msgSend_instantiateViewControllerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instantiateViewControllerWithIdentifier:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_isAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccount");
}

id objc_msgSend_isAccountFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountFolder");
}

id objc_msgSend_isAccountHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountHeader");
}

id objc_msgSend_isAccountPicker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountPicker");
}

id objc_msgSend_isAccountPickerController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountPickerController");
}

id objc_msgSend_isAppStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppStore");
}

id objc_msgSend_isAuthenticated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthenticated");
}

id objc_msgSend_isAutoResizing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAutoResizing");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isChecked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isChecked");
}

id objc_msgSend_isCollapsed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCollapsed");
}

id objc_msgSend_isCollapsible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCollapsible");
}

id objc_msgSend_isCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCopy");
}

id objc_msgSend_isDefaultFolderForAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDefaultFolderForAccount");
}

id objc_msgSend_isDeletable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeletable");
}

id objc_msgSend_isDeleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeleted");
}

id objc_msgSend_isDeletedOrInTrash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeletedOrInTrash");
}

id objc_msgSend_isDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDirectory");
}

id objc_msgSend_isDuplicatable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDuplicatable");
}

id objc_msgSend_isEditable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEditable");
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEmpty");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFileURL");
}

id objc_msgSend_isFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFirstResponder");
}

id objc_msgSend_isFolderPickerController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFolderPickerController");
}

id objc_msgSend_isHashtagAttachment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHashtagAttachment");
}

id objc_msgSend_isHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHeader");
}

id objc_msgSend_isInFolderList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInFolderList");
}

id objc_msgSend_isLandscape(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLandscape");
}

id objc_msgSend_isManaged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isManaged");
}

id objc_msgSend_isMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMap");
}

id objc_msgSend_isNews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNews");
}

id objc_msgSend_isNonEmpty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonEmpty");
}

id objc_msgSend_isNotePickerController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNotePickerController");
}

id objc_msgSend_isOptedInForAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOptedInForAnalytics");
}

id objc_msgSend_isOwnedByCurrentUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOwnedByCurrentUser");
}

id objc_msgSend_isParsing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isParsing");
}

id objc_msgSend_isPasswordProtected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPasswordProtected");
}

id objc_msgSend_isPinned(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPinned");
}

id objc_msgSend_isPodcasts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPodcasts");
}

id objc_msgSend_isPortrait(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPortrait");
}

id objc_msgSend_isRegularFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRegularFile");
}

id objc_msgSend_isRootController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRootController");
}

id objc_msgSend_isSaving(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSaving");
}

id objc_msgSend_isSearchResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSearchResult");
}

id objc_msgSend_isSelectable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSelectable");
}

id objc_msgSend_isSharedRootObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedRootObject");
}

id objc_msgSend_isSharedViaICloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedViaICloud");
}

id objc_msgSend_isSharedViaICloudFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedViaICloudFolder");
}

id objc_msgSend_isShowingPlaceholderText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShowingPlaceholderText");
}

id objc_msgSend_isShowingSearchResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShowingSearchResults");
}

id objc_msgSend_isShowingTableContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShowingTableContainer");
}

id objc_msgSend_isSmartFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSmartFolder");
}

id objc_msgSend_isSystemFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemFolder");
}

id objc_msgSend_isSystemPaper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemPaper");
}

id objc_msgSend_isSystemPaperFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemPaperFolder");
}

id objc_msgSend_isTrashFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTrashFolder");
}

id objc_msgSend_isURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isURL");
}

id objc_msgSend_isUndoing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUndoing");
}

id objc_msgSend_isVideoPreview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isVideoPreview");
}

id objc_msgSend_isVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isVisible");
}

id objc_msgSend_isiTunes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isiTunes");
}

id objc_msgSend_item(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "item");
}

id objc_msgSend_itemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemAtIndexPath:");
}

id objc_msgSend_itemForIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemForIndexPath:");
}

id objc_msgSend_itemsForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemsForSection:");
}

id objc_msgSend_keyCommandWithInput_modifierFlags_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyCommandWithInput:modifierFlags:action:");
}

id objc_msgSend_keyboardFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardFrame");
}

id objc_msgSend_keyboardMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardMargin");
}

id objc_msgSend_labelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelColor");
}

id objc_msgSend_largerTextSizeConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largerTextSizeConstraints");
}

id objc_msgSend_lastAccessibilityAnnouncementDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastAccessibilityAnnouncementDate");
}

id objc_msgSend_lastNoteSavedTo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastNoteSavedTo");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_layoutFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutFrame");
}

id objc_msgSend_layoutIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutIfNeeded");
}

id objc_msgSend_layoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMargins");
}

id objc_msgSend_layoutMarginsGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMarginsGuide");
}

id objc_msgSend_layoutType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutType");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingAnchor");
}

id objc_msgSend_legacyContentHashAtImport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legacyContentHashAtImport");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "level");
}

id objc_msgSend_linkItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkItemAtURL:toURL:error:");
}

id objc_msgSend_loadAccountsAndAttachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAccountsAndAttachments");
}

id objc_msgSend_loadFileRepresentationForContentType_openInPlace_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFileRepresentationForContentType:openInPlace:completionHandler:");
}

id objc_msgSend_loadItemForTypeIdentifier_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadItemForTypeIdentifier:options:completionHandler:");
}

id objc_msgSend_loadNibNamed_owner_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadNibNamed:owner:options:");
}

id objc_msgSend_localizedCaseInsensitiveContainsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCaseInsensitiveContainsString:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_localizedTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedTitle");
}

id objc_msgSend_localizedUppercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedUppercaseString");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainContainerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainContainerView");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_mainViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainViewController");
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectContext");
}

id objc_msgSend_markAsCallNoteIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAsCallNoteIfNeeded:");
}

id objc_msgSend_markAsMathNoteIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAsMathNoteIfNeeded:");
}

id objc_msgSend_markAsSystemPaperIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAsSystemPaperIfNeeded:");
}

id objc_msgSend_markForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markForDeletion");
}

id objc_msgSend_markNoteAndAttachmentsForDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markNoteAndAttachmentsForDeletion:");
}

id objc_msgSend_markShareDirtyIfNeededWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markShareDirtyIfNeededWithReason:");
}

id objc_msgSend_markedForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markedForDeletion");
}

id objc_msgSend_matchingFoldersForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchingFoldersForString:");
}

id objc_msgSend_maxAttachmentsPerNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxAttachmentsPerNote");
}

id objc_msgSend_maxNoteAttachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxNoteAttachments");
}

id objc_msgSend_maxNoteTextLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxNoteTextLength");
}

id objc_msgSend_maxSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxSize");
}

id objc_msgSend_maximumAttachmentSizeMB(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumAttachmentSizeMB");
}

id objc_msgSend_md5Hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "md5Hash");
}

id objc_msgSend_media(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "media");
}

id objc_msgSend_mediaData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaData");
}

id objc_msgSend_mediaURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaURL");
}

id objc_msgSend_mediaUTI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaUTI");
}

id objc_msgSend_mediaUTIs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaUTIs");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_mime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mime");
}

id objc_msgSend_modificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modificationDate");
}

id objc_msgSend_moveObject_toIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveObject:toIndex:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_navigationBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBar");
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController");
}

id objc_msgSend_navigationItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationItem");
}

id objc_msgSend_needToGeneratePreviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needToGeneratePreviews");
}

id objc_msgSend_newEmptyNoteInFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newEmptyNoteInFolder:");
}

id objc_msgSend_newFolderInAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newFolderInAccount:");
}

id objc_msgSend_newFolderInParentFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newFolderInParentFolder:");
}

id objc_msgSend_newFolderWithTitle_parentFolder_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newFolderWithTitle:parentFolder:forAccount:");
}

id objc_msgSend_newNoteTitleView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newNoteTitleView");
}

id objc_msgSend_newNoteWithString_inFolder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newNoteWithString:inFolder:error:");
}

id objc_msgSend_newOperationQueueWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newOperationQueueWithName:");
}

id objc_msgSend_nibWithNibName_bundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nibWithNibName:bundle:");
}

id objc_msgSend_nonPinnedNoteItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonPinnedNoteItems");
}

id objc_msgSend_note(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "note");
}

id objc_msgSend_noteContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteContainer");
}

id objc_msgSend_noteContainerAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteContainerAccount");
}

id objc_msgSend_noteItemsForContainer_hideNonSystemPaperNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteItemsForContainer:hideNonSystemPaperNotes:");
}

id objc_msgSend_noteLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteLabel");
}

id objc_msgSend_noteSortTypeDefaultAscending(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteSortTypeDefaultAscending");
}

id objc_msgSend_noteTitleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteTitleLabel");
}

id objc_msgSend_noteWithIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteWithIdentifier:context:");
}

id objc_msgSend_notes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notes");
}

id objc_msgSend_notesForCopying(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notesForCopying");
}

id objc_msgSend_notesImporterClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notesImporterClient");
}

id objc_msgSend_notifyAttachmentsNoteWillMoveToRecentlyDeletedFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyAttachmentsNoteWillMoveToRecentlyDeletedFolder");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "now");
}

id objc_msgSend_numberOfRowsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfRowsInSection:");
}

id objc_msgSend_numberOfSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSections");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectID");
}

id objc_msgSend_objectWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithID:");
}

id objc_msgSend_objectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsPassingTest:");
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_overrideCollapsed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideCollapsed");
}

id objc_msgSend_overrideCollapsedFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideCollapsedFolder");
}

id objc_msgSend_paragraphRangeForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paragraphRangeForRange:");
}

id objc_msgSend_paragraphStyleNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paragraphStyleNamed:");
}

id objc_msgSend_parent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parent");
}

id objc_msgSend_parseFileURL_newNoteBlock_updatedNoteBlock_errorBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseFileURL:newNoteBlock:updatedNoteBlock:errorBlock:completionBlock:");
}

id objc_msgSend_parseHTMLStringFromEvernoteContentString_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseHTMLStringFromEvernoteContentString:completionBlock:");
}

id objc_msgSend_parseTitleFromHTMLString_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseTitleFromHTMLString:completionBlock:");
}

id objc_msgSend_parserForFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserForFileURL:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performSearchForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSearchForString:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithoutAnimation:");
}

id objc_msgSend_persistDeleteActivityEventForObject_fromParentObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistDeleteActivityEventForObject:fromParentObject:");
}

id objc_msgSend_persistRenameActivityEventForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistRenameActivityEventForObject:");
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreCoordinator");
}

id objc_msgSend_pinnedNoteItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pinnedNoteItems");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_popViewControllerAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popViewControllerAnimated:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_preferSingleLine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferSingleLine");
}

id objc_msgSend_preferredBackgroundType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredBackgroundType");
}

id objc_msgSend_preferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredContentSizeCategory");
}

id objc_msgSend_preferredFilenameExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFilenameExtension");
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:");
}

id objc_msgSend_prefersSystemPaper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefersSystemPaper");
}

id objc_msgSend_prepareWithInvocationTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithInvocationTarget:");
}

id objc_msgSend_presentViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:animated:completion:");
}

id objc_msgSend_presentedView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedView");
}

id objc_msgSend_presentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedViewController");
}

id objc_msgSend_previewImages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previewImages");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priority");
}

id objc_msgSend_processAllCloudObjectsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processAllCloudObjectsWithCompletionHandler:");
}

id objc_msgSend_processURLs_shouldPreserveFolders_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processURLs:shouldPreserveFolders:account:");
}

id objc_msgSend_progressAlertController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressAlertController");
}

id objc_msgSend_progressUpdatedForImportNoteProcessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressUpdatedForImportNoteProcessor:");
}

id objc_msgSend_progressViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressViewController");
}

id objc_msgSend_purgeAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeAttachment:");
}

id objc_msgSend_purgeAttachmentPreviewImages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeAttachmentPreviewImages");
}

id objc_msgSend_purgeAttachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeAttachments");
}

id objc_msgSend_pushFolderViewForNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushFolderViewForNote:");
}

id objc_msgSend_pushViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushViewController:animated:");
}

id objc_msgSend_queryOperationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryOperationQueue");
}

id objc_msgSend_queryRequestIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryRequestIndex");
}

id objc_msgSend_rangeOfFirstMatchInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfFirstMatchInString:options:range:");
}

id objc_msgSend_rangeOfString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:range:");
}

id objc_msgSend_readLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readLock");
}

id objc_msgSend_reapplyInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reapplyInsets");
}

id objc_msgSend_rebuildTableItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rebuildTableItems");
}

id objc_msgSend_recursivelyAddChildFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recursivelyAddChildFolder:");
}

id objc_msgSend_refreshAll(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAll");
}

id objc_msgSend_refreshAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAllObjects");
}

id objc_msgSend_refreshAllOfNoteWithIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAllOfNoteWithIdentifier:context:");
}

id objc_msgSend_refreshManagedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshManagedObjects");
}

id objc_msgSend_refreshTableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshTableView");
}

id objc_msgSend_regenerateTitle_snippet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regenerateTitle:snippet:");
}

id objc_msgSend_registerClass_forCellReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forCellReuseIdentifier:");
}

id objc_msgSend_registerClass_forHeaderFooterViewReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forHeaderFooterViewReuseIdentifier:");
}

id objc_msgSend_registerNib_forCellReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerNib:forCellReuseIdentifier:");
}

id objc_msgSend_registerUndoForCloudSyncingObjectActivityEvent_cloudSyncingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUndoForCloudSyncingObjectActivityEvent:cloudSyncingObject:");
}

id objc_msgSend_registerUndoWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUndoWithTarget:selector:object:");
}

id objc_msgSend_registeredTypeIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredTypeIdentifiers");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_regularFileContents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularFileContents");
}

id objc_msgSend_reloadData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadData");
}

id objc_msgSend_removeAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAccounts");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLegacyTombstoneForFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLegacyTombstoneForFolder:");
}

id objc_msgSend_removeLegacyTombstoneForNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLegacyTombstoneForNote:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_replaceCharactersInRange_withAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withAttributedString:");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_representedItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "representedItem");
}

id objc_msgSend_requestIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestIndex");
}

id objc_msgSend_requiresLegacyTombstoneAfterDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresLegacyTombstoneAfterDeletion");
}

id objc_msgSend_resignFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resignFirstResponder");
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "results");
}

id objc_msgSend_rootViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootViewController");
}

id objc_msgSend_row(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "row");
}

id objc_msgSend_safeAreaInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeAreaInsets");
}

id objc_msgSend_save(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save");
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save:");
}

id objc_msgSend_saveAttachments_toNote_textBefore_textAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAttachments:toNote:textBefore:textAfter:");
}

id objc_msgSend_saveAttachmentsToNewNote_inFolder_isSystemPaper_textBefore_textAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAttachmentsToNewNote:inFolder:isSystemPaper:textBefore:textAfter:");
}

id objc_msgSend_saveSubFolderMergeableDataIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveSubFolderMergeableDataIfNeeded");
}

id objc_msgSend_saveToHeaderLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveToHeaderLabel");
}

id objc_msgSend_saveToNoteBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveToNoteBarButtonItem");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scaledFontForFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaledFontForFont:");
}

id objc_msgSend_scheduleTask_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleTask:completion:");
}

id objc_msgSend_screen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screen");
}

id objc_msgSend_screenScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenScale");
}

id objc_msgSend_scrollRectToVisible_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollRectToVisible:animated:");
}

id objc_msgSend_scrollTextToVisibleForTextView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollTextToVisibleForTextView:");
}

id objc_msgSend_scrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollView");
}

id objc_msgSend_scrollViewResizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewResizer");
}

id objc_msgSend_searchBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBar");
}

id objc_msgSend_searchBarActiveTopConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBarActiveTopConstraint");
}

id objc_msgSend_searchBarZeroHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBarZeroHeightConstraint");
}

id objc_msgSend_searchCancelButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchCancelButton");
}

id objc_msgSend_searchCancelButtonMaxWidthConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchCancelButtonMaxWidthConstraint");
}

id objc_msgSend_searchCancelTrailingConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchCancelTrailingConstraint");
}

id objc_msgSend_searchString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchString");
}

id objc_msgSend_searchTableViewItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchTableViewItems");
}

id objc_msgSend_secondItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondItem");
}

id objc_msgSend_secondaryLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabel");
}

id objc_msgSend_secondaryLabelBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelBaselineConstraint");
}

id objc_msgSend_secondaryLabelBelowTitleLabelConstraintForAXLargerTextSizes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelBelowTitleLabelConstraintForAXLargerTextSizes");
}

id objc_msgSend_secondaryLabelCenterVerticallyConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelCenterVerticallyConstraint");
}

id objc_msgSend_secondaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelColor");
}

id objc_msgSend_secondaryLabelLeadingConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelLeadingConstraint");
}

id objc_msgSend_secondaryLabelLeadingConstraintForAXLargerTextSizes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryLabelLeadingConstraintForAXLargerTextSizes");
}

id objc_msgSend_secondaryTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryTitle");
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "section");
}

id objc_msgSend_selectNote_orFolder_prefersSystemPaper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectNote:orFolder:prefersSystemPaper:");
}

id objc_msgSend_selectedFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedFolder");
}

id objc_msgSend_selectedNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedNote");
}

id objc_msgSend_selectedTextRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedTextRange");
}

id objc_msgSend_sendNotificationAfterDeletingOrUndeletingNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendNotificationAfterDeletingOrUndeletingNotes");
}

id objc_msgSend_sendNotificationBeforeDeletingOrUndeletingNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendNotificationBeforeDeletingOrUndeletingNotes:");
}

id objc_msgSend_separatorColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "separatorColor");
}

id objc_msgSend_seperatorInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seperatorInsets");
}

id objc_msgSend_setAccessibilityElementsHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityElementsHidden:");
}

id objc_msgSend_setAccessibilityIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityIdentifier:");
}

id objc_msgSend_setAccessibilityTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityTraits:");
}

id objc_msgSend_setAccessoryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryType:");
}

id objc_msgSend_setAccessoryView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryView:");
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountId:");
}

id objc_msgSend_setAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccounts:");
}

id objc_msgSend_setActionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionName:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActivityIndicatorBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityIndicatorBarButtonItem:");
}

id objc_msgSend_setActivityIndicatorView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityIndicatorView:");
}

id objc_msgSend_setActivityIndicatorViewStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityIndicatorViewStyle:");
}

id objc_msgSend_setAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlpha:");
}

id objc_msgSend_setAnalyticsObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsObserver:");
}

id objc_msgSend_setAppendLock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppendLock:");
}

id objc_msgSend_setAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachment:");
}

id objc_msgSend_setAttachmentBrickView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachmentBrickView:");
}

id objc_msgSend_setAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachments:");
}

id objc_msgSend_setAttributedContentText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedContentText:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBackgroundImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundImage:");
}

id objc_msgSend_setBackgroundView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundView:");
}

id objc_msgSend_setBarTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarTintColor:");
}

id objc_msgSend_setBottomTextViewCollapsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBottomTextViewCollapsed:");
}

id objc_msgSend_setBrickViewCollapsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrickViewCollapsed:");
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClipsToBounds:");
}

id objc_msgSend_setCollapsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollapsed:");
}

id objc_msgSend_setCollapsible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollapsible:");
}

id objc_msgSend_setCompletedUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletedUnitCount:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConstant:");
}

id objc_msgSend_setContainerViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerViewController:");
}

id objc_msgSend_setContentCompressionResistancePriority_forAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentCompressionResistancePriority:forAxis:");
}

id objc_msgSend_setContentInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInset:");
}

id objc_msgSend_setContentMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentMode:");
}

id objc_msgSend_setContentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentViewController:");
}

id objc_msgSend_setContextContainsOnlyRawImages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextContainsOnlyRawImages:");
}

id objc_msgSend_setConvertAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConvertAttributes:");
}

id objc_msgSend_setCornerStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCornerStyle:");
}

id objc_msgSend_setCountLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCountLabel:");
}

id objc_msgSend_setCountLabelText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCountLabelText:");
}

id objc_msgSend_setCreateNewNoteButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreateNewNoteButton:");
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationDate:");
}

id objc_msgSend_setCurrentErrorFileURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentErrorFileURLs:");
}

id objc_msgSend_setCurrentURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentURL:");
}

id objc_msgSend_setCustomNoteSortType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomNoteSortType:");
}

id objc_msgSend_setDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSource:");
}

id objc_msgSend_setDateForLastTitleModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateForLastTitleModification:");
}

id objc_msgSend_setDbWriteLockfd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDbWriteLockfd:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDidCancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidCancel:");
}

id objc_msgSend_setDimmingView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDimmingView:");
}

id objc_msgSend_setDismissCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDismissCompletionBlock:");
}

id objc_msgSend_setDismissDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDismissDuration:");
}

id objc_msgSend_setDismissing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDismissing:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEstimatedRowHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedRowHeight:");
}

id objc_msgSend_setExpandCollapseHitView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpandCollapseHitView:");
}

id objc_msgSend_setFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFolder:");
}

id objc_msgSend_setFolderLabelVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFolderLabelVisible:");
}

id objc_msgSend_setFolderListItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFolderListItem:");
}

id objc_msgSend_setFolderListItemAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFolderListItemAccountType:");
}

id objc_msgSend_setFolderListViewState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFolderListViewState:");
}

id objc_msgSend_setFolderModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFolderModificationDate:");
}

id objc_msgSend_setFolderTableViewItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFolderTableViewItems:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setForceFullHeightInLandscape_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceFullHeightInLandscape:");
}

id objc_msgSend_setFragment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFragment:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setHasSetUpSizeConstraint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasSetUpSizeConstraint:");
}

id objc_msgSend_setHeaderType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeaderType:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHidesBackButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesBackButton:");
}

id objc_msgSend_setHoverStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHoverStyle:");
}

id objc_msgSend_setIc_debugName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIc_debugName:");
}

id objc_msgSend_setIc_presentationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIc_presentationController:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setImage_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:atIndex:");
}

id objc_msgSend_setImage_movieDuration_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:movieDuration:atIndex:");
}

id objc_msgSend_setImageViewCollapsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageViewCollapsed:");
}

id objc_msgSend_setImageViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageViews:");
}

id objc_msgSend_setImportNoteFileParsers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportNoteFileParsers:");
}

id objc_msgSend_setImportNoteProcessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportNoteProcessor:");
}

id objc_msgSend_setImportRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportRootViewController:");
}

id objc_msgSend_setInhibitSearchCancelAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInhibitSearchCancelAnimation:");
}

id objc_msgSend_setIsAccessibilityElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccessibilityElement:");
}

id objc_msgSend_setIsAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccount:");
}

id objc_msgSend_setIsAccountFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccountFolder:");
}

id objc_msgSend_setIsAccountHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccountHeader:");
}

id objc_msgSend_setIsAccountPicker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccountPicker:");
}

id objc_msgSend_setIsDefaultFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDefaultFolder:");
}

id objc_msgSend_setIsInFolderList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInFolderList:");
}

id objc_msgSend_setIsParsing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsParsing:");
}

id objc_msgSend_setIsPinned_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPinned:");
}

id objc_msgSend_setIsSaving_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSaving:");
}

id objc_msgSend_setIsSearchResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSearchResult:");
}

id objc_msgSend_setIsShowingSearchResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsShowingSearchResults:");
}

id objc_msgSend_setIsShowingSearchResults_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsShowingSearchResults:animated:");
}

id objc_msgSend_setIsShowingTableContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsShowingTableContainer:");
}

id objc_msgSend_setIsSystemPaperFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSystemPaperFolder:");
}

id objc_msgSend_setItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItem:");
}

id objc_msgSend_setItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItems:");
}

id objc_msgSend_setLastAccessibilityAnnouncementDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAccessibilityAnnouncementDate:");
}

id objc_msgSend_setLastNotifiedTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastNotifiedTimestamp:");
}

id objc_msgSend_setLastSelectedFolderIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSelectedFolderIdentifier:");
}

id objc_msgSend_setLastSelectedNoteIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSelectedNoteIdentifier:");
}

id objc_msgSend_setLayoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLayoutType:");
}

id objc_msgSend_setLeftBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftBarButtonItem:");
}

id objc_msgSend_setLeftBarButtonItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftBarButtonItems:");
}

id objc_msgSend_setLeftItemsSupplementBackButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftItemsSupplementBackButton:");
}

id objc_msgSend_setLineFragmentPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineFragmentPadding:");
}

id objc_msgSend_setMainViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMainViewController:");
}

id objc_msgSend_setManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManagedObjectContext:");
}

id objc_msgSend_setMediaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaData:");
}

id objc_msgSend_setMediaFilenameExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaFilenameExtension:");
}

id objc_msgSend_setMediaPreview_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaPreview:atIndex:");
}

id objc_msgSend_setMediaURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaURL:");
}

id objc_msgSend_setMediaUTI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaUTI:");
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadata:");
}

id objc_msgSend_setModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModificationDate:");
}

id objc_msgSend_setMovieDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMovieDuration:");
}

id objc_msgSend_setNavigationBarHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationBarHidden:");
}

id objc_msgSend_setNavigationBarHidden_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationBarHidden:animated:");
}

id objc_msgSend_setNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationController:");
}

id objc_msgSend_setNeedsInitialFetchFromCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsInitialFetchFromCloud:");
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsLayout");
}

id objc_msgSend_setNeedsRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsRefresh:");
}

id objc_msgSend_setNeedsUpdateConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsUpdateConstraints");
}

id objc_msgSend_setNonPinnedNoteItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNonPinnedNoteItems:");
}

id objc_msgSend_setNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNote:");
}

id objc_msgSend_setNote_folder_hasMultipleAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNote:folder:hasMultipleAccounts:");
}

id objc_msgSend_setNoteContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNoteContainer:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOverrideCollapsedFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideCollapsedFolder:");
}

id objc_msgSend_setParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParent:");
}

id objc_msgSend_setParentModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentModificationDate:");
}

id objc_msgSend_setPinnedNoteItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPinnedNoteItems:");
}

id objc_msgSend_setPreferredBackgroundType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredBackgroundType:");
}

id objc_msgSend_setPrefersSystemPaper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrefersSystemPaper:");
}

id objc_msgSend_setPreviewUpdateDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviewUpdateDate:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProgressAlertController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressAlertController:");
}

id objc_msgSend_setProgressStringBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressStringBlock:");
}

id objc_msgSend_setProgressViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressViewController:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuery:");
}

id objc_msgSend_setQueryOperationQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryOperationQueue:");
}

id objc_msgSend_setQueryRequestIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryRequestIndex:");
}

id objc_msgSend_setRegulatoryLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegulatoryLogger:");
}

id objc_msgSend_setRepresentedItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepresentedItem:");
}

id objc_msgSend_setRequestIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestIndex:");
}

id objc_msgSend_setRightBarButtonItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItem:");
}

id objc_msgSend_setRightBarButtonItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightBarButtonItems:");
}

id objc_msgSend_setRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRootViewController:");
}

id objc_msgSend_setRowHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRowHeight:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setScrollEdgeAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollEdgeAppearance:");
}

id objc_msgSend_setScrollIndicatorInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollIndicatorInsets:");
}

id objc_msgSend_setScrollViewResizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollViewResizer:");
}

id objc_msgSend_setSearchBarHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchBarHidden:");
}

id objc_msgSend_setSearchString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchString:");
}

id objc_msgSend_setSearchTableViewItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchTableViewItems:");
}

id objc_msgSend_setSecondaryTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryTitle:");
}

id objc_msgSend_setSectionHeaderHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectionHeaderHeight:");
}

id objc_msgSend_setSelectedBackgroundView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedBackgroundView:");
}

id objc_msgSend_setSelectedFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedFolder:");
}

id objc_msgSend_setSelectedNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedNote:");
}

id objc_msgSend_setSelectionToNote_folder_prefersSystemPaper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionToNote:folder:prefersSystemPaper:");
}

id objc_msgSend_setSeparatorColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparatorColor:");
}

id objc_msgSend_setSeparatorInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparatorInset:");
}

id objc_msgSend_setSeparatorStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeparatorStyle:");
}

id objc_msgSend_setShareExtensionAttachmentInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShareExtensionAttachmentInfo:");
}

id objc_msgSend_setShouldCancelImportProcess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCancelImportProcess:");
}

id objc_msgSend_setShouldCancelParsingProcess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCancelParsingProcess:");
}

id objc_msgSend_setShowAccountName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowAccountName:");
}

id objc_msgSend_setShowAsMovie_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowAsMovie:");
}

id objc_msgSend_setShowingPlaceholderText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowingPlaceholderText:");
}

id objc_msgSend_setSmartFolderQueryJSON_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmartFolderQueryJSON:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStoredConstraintPriorities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoredConstraintPriorities:");
}

id objc_msgSend_setStyler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStyler:");
}

id objc_msgSend_setSubFolderOrderMergeableDataDirty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubFolderOrderMergeableDataDirty:");
}

id objc_msgSend_setSubtitleLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitleLabel:");
}

id objc_msgSend_setSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSummary:");
}

id objc_msgSend_setTableFooterView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableFooterView:");
}

id objc_msgSend_setTableViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableViewController:");
}

id objc_msgSend_setTableViewHidesEmptyCells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableViewHidesEmptyCells:");
}

id objc_msgSend_setTableViewItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableViewItem:");
}

id objc_msgSend_setTableViewItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableViewItems:");
}

id objc_msgSend_setTableViewType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableViewType:");
}

id objc_msgSend_setTemporaryNewNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemporaryNewNote:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextAlignment:");
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextColor:");
}

id objc_msgSend_setTextContainerInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextContainerInset:");
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTintColor:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTitleLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleLabel:");
}

id objc_msgSend_setTitlePositionAdjustment_forBarMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitlePositionAdjustment:forBarMetrics:");
}

id objc_msgSend_setTitleTextAttributesTransformer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleTextAttributesTransformer:");
}

id objc_msgSend_setTitleView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleView:");
}

id objc_msgSend_setTitleViewTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleViewTapped:");
}

id objc_msgSend_setTodo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodo:");
}

id objc_msgSend_setTotalNoteFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalNoteFound:");
}

id objc_msgSend_setTotalNoteImported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalNoteImported:");
}

id objc_msgSend_setTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalUnitCount:");
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransform:");
}

id objc_msgSend_setTransitioningDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitioningDelegate:");
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:");
}

id objc_msgSend_setTypeLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypeLabel:");
}

id objc_msgSend_setTypeLabelText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypeLabelText:");
}

id objc_msgSend_setUpForHeaderItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpForHeaderItem:");
}

id objc_msgSend_setUpForIsShowingSearchResults_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpForIsShowingSearchResults:animated:");
}

id objc_msgSend_setUpForIsShowingTableContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpForIsShowingTableContainer:");
}

id objc_msgSend_setUpForLayoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpForLayoutType:");
}

id objc_msgSend_setUpForTableViewItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpForTableViewItem:");
}

id objc_msgSend_setUpHeightConstraintIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpHeightConstraintIfNecessary");
}

id objc_msgSend_setUpNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpNavigationController:");
}

id objc_msgSend_setUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrl:");
}

id objc_msgSend_setUserInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInteractionEnabled:");
}

id objc_msgSend_setUserTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserTitle:");
}

id objc_msgSend_setUsesTemporaryFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesTemporaryFile:");
}

id objc_msgSend_setWantsUndoCommands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsUndoCommands:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setupFileParsers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupFileParsers");
}

id objc_msgSend_setupSearchResultsWithSearchString_notes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSearchResultsWithSearchString:notes:");
}

id objc_msgSend_setupUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupUI");
}

id objc_msgSend_shapeByApplyingInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shapeByApplyingInset:");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shared");
}

id objc_msgSend_sharedConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedConfiguration");
}

id objc_msgSend_sharedContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedContext");
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedController");
}

id objc_msgSend_sharedIndexer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedIndexer");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedObserver");
}

id objc_msgSend_sharedOwnerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedOwnerName");
}

id objc_msgSend_sharedReachabilityForInternetConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedReachabilityForInternetConnection");
}

id objc_msgSend_sharedRootObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedRootObject");
}

id objc_msgSend_sharedScheduler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedScheduler");
}

id objc_msgSend_shortLoggingDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortLoggingDescription");
}

id objc_msgSend_shouldCancelImportProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCancelImportProcess");
}

id objc_msgSend_shouldCancelParsingProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCancelParsingProcess");
}

id objc_msgSend_shouldCopyThenDeleteWhenMovingObject_toNoteContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCopyThenDeleteWhenMovingObject:toNoteContainer:");
}

id objc_msgSend_shouldImportNotesWithURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldImportNotesWithURLs:");
}

id objc_msgSend_shouldRetrieveLastSelectedNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRetrieveLastSelectedNote");
}

id objc_msgSend_showAccountName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAccountName");
}

id objc_msgSend_showActivityIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showActivityIndicator");
}

id objc_msgSend_showOrHideCreateNewNoteButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showOrHideCreateNewNoteButton");
}

id objc_msgSend_showOrHideEmptyTableCellsIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showOrHideEmptyTableCellsIfNecessary");
}

id objc_msgSend_showPlaceholderText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showPlaceholderText:");
}

id objc_msgSend_showSaveButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSaveButton");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sizeLayoutAttribute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeLayoutAttribute");
}

id objc_msgSend_smartFolderQuery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartFolderQuery");
}

id objc_msgSend_smartFolderQueryJSON(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartFolderQueryJSON");
}

id objc_msgSend_snapshotManagedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotManagedObjectContext");
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortDescriptorWithKey_ascending_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:selector:");
}

id objc_msgSend_sortDescriptorsForCurrentTypeIncludingPinnedNotes_folderNoteSortType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorsForCurrentTypeIncludingPinnedNotes:folderNoteSortType:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startAnimating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAnimating");
}

id objc_msgSend_startAppSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAppSession");
}

id objc_msgSend_startAutoResizing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAutoResizing");
}

id objc_msgSend_startSessionWithReferralURL_referralApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionWithReferralURL:referralApplication:");
}

id objc_msgSend_startSharedContextWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSharedContextWithOptions:");
}

id objc_msgSend_startTask_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTask:completionBlock:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_statusActivityIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusActivityIndicator");
}

id objc_msgSend_statusLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusLabel");
}

id objc_msgSend_stopAutoResizing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAutoResizing");
}

id objc_msgSend_storedConstraintPriorities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storedConstraintPriorities");
}

id objc_msgSend_storyboard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storyboard");
}

id objc_msgSend_storyboardWithName_bundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storyboardWithName:bundle:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByScrubbingStringForFolderName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByScrubbingStringForFolderName:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForTitleFooter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForTitleFooter");
}

id objc_msgSend_stringFromByteCount_countStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromByteCount:countStyle:");
}

id objc_msgSend_stringWithContentsOfURL_encoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithContentsOfURL:encoding:error:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_styleWithShape_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "styleWithShape:");
}

id objc_msgSend_subFolderIdentifiersOrderedSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
}

id objc_msgSend_subFolders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subFolders");
}

id objc_msgSend_subfoldersForCopying(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subfoldersForCopying");
}

id objc_msgSend_submitAttachmentAddEventForAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitAttachmentAddEventForAttachment:");
}

id objc_msgSend_submitEverNoteImportEventWithCount_isSuccessful_intoAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEverNoteImportEventWithCount:isSuccessful:intoAccount:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subtitleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subtitleLabel");
}

id objc_msgSend_subviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subviews");
}

id objc_msgSend_summary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summary");
}

id objc_msgSend_syncChangesToCloudWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncChangesToCloudWithCompletionHandler:");
}

id objc_msgSend_systemBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemBackgroundColor");
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:");
}

id objc_msgSend_systemFontOfSize_weight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:weight:");
}

id objc_msgSend_systemGroupedBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGroupedBackgroundColor");
}

id objc_msgSend_systemImageName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageName");
}

id objc_msgSend_systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageNamed:");
}

id objc_msgSend_tableCellGroupedBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableCellGroupedBackgroundColor");
}

id objc_msgSend_tableController_didSelectNote_folder_prefersSystemPaper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableController:didSelectNote:folder:prefersSystemPaper:");
}

id objc_msgSend_tableSeparatorLightColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableSeparatorLightColor");
}

id objc_msgSend_tableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView");
}

id objc_msgSend_tableView_shouldHighlightRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableView:shouldHighlightRowAtIndexPath:");
}

id objc_msgSend_tableViewCell_setCollapsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewCell:setCollapsed:");
}

id objc_msgSend_tableViewContainerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewContainerView");
}

id objc_msgSend_tableViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewController");
}

id objc_msgSend_tableViewItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewItem");
}

id objc_msgSend_tableViewItemFromObject_selectedNote_selectedFolder_isSearchResult_isAccountPicker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewItemFromObject:selectedNote:selectedFolder:isSearchResult:isAccountPicker:");
}

id objc_msgSend_tableViewItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewItems");
}

id objc_msgSend_tableViewItemsForObjects_selectedNote_selectedFolder_isSearchResult_noteContainer_isAccountPicker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewItemsForObjects:selectedNote:selectedFolder:isSearchResult:noteContainer:isAccountPicker:");
}

id objc_msgSend_tableViewType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewType");
}

id objc_msgSend_tagIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagIdentifiers");
}

id objc_msgSend_tagSelectionWithManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagSelectionWithManagedObjectContext:");
}

id objc_msgSend_tags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tags");
}

id objc_msgSend_temporaryDirectoryURLForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temporaryDirectoryURLForAccountIdentifier:");
}

id objc_msgSend_temporaryNewNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temporaryNewNote");
}

id objc_msgSend_tertiaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tertiaryLabelColor");
}

id objc_msgSend_tertiarySystemGroupedBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tertiarySystemGroupedBackgroundColor");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "text");
}

id objc_msgSend_textAfter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textAfter");
}

id objc_msgSend_textAttachmentWithAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textAttachmentWithAttachment:");
}

id objc_msgSend_textBefore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textBefore");
}

id objc_msgSend_textContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textContainer");
}

id objc_msgSend_textLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textLabel");
}

id objc_msgSend_textStorage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textStorage");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestamp");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_titleFooterLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleFooterLabel");
}

id objc_msgSend_titleFooterView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleFooterView");
}

id objc_msgSend_titleFooterViewHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleFooterViewHeightConstraint");
}

id objc_msgSend_titleForCopying(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleForCopying");
}

id objc_msgSend_titleForTableViewCell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleForTableViewCell");
}

id objc_msgSend_titleFromExtensionItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleFromExtensionItem:");
}

id objc_msgSend_titleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabel");
}

id objc_msgSend_titleLabelBaselineConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabelBaselineConstraint");
}

id objc_msgSend_titleLabelCenterConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabelCenterConstraint");
}

id objc_msgSend_titleLabelTopConstraintForAXLargerTextSizes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabelTopConstraintForAXLargerTextSizes");
}

id objc_msgSend_titleLeadingMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLeadingMargin");
}

id objc_msgSend_titleView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleView");
}

id objc_msgSend_titleViewContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleViewContainer");
}

id objc_msgSend_titleViewMinHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleViewMinHeightConstraint");
}

id objc_msgSend_titleViewTapped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleViewTapped");
}

id objc_msgSend_todo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todo");
}

id objc_msgSend_todoWithDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todoWithDone:");
}

id objc_msgSend_tokenContentIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenContentIdentifier");
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topAnchor");
}

id objc_msgSend_topTextView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topTextView");
}

id objc_msgSend_topTextViewMinHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topTextViewMinHeightConstraint");
}

id objc_msgSend_totalNoteFound(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalNoteFound");
}

id objc_msgSend_totalNoteImported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalNoteImported");
}

id objc_msgSend_totalNotesFoundAtFileURL_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalNotesFoundAtFileURL:completionBlock:");
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingAnchor");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_transitionCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionCoordinator");
}

id objc_msgSend_trashFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trashFolder");
}

id objc_msgSend_traverseImportFolder_forAccount_shouldImportNotes_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traverseImportFolder:forAccount:shouldImportNotes:completionBlock:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_typeLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeLabel");
}

id objc_msgSend_typeUTIIsPlayableMovie_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeUTIIsPlayableMovie:");
}

id objc_msgSend_typeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeWithIdentifier:");
}

id objc_msgSend_typeWithMIMEType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeWithMIMEType:");
}

id objc_msgSend_unarchiveEvernoteNoteFromArchiveId_noteArchiveId_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchiveEvernoteNoteFromArchiveId:noteArchiveId:completionBlock:");
}

id objc_msgSend_unarchiveEvernoteResourceFromArchiveId_resourceArchiveId_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchiveEvernoteResourceFromArchiveId:resourceArchiveId:completionBlock:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_undeleteAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undeleteAttachment:");
}

id objc_msgSend_undoablyAddFolderToAccount_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyAddFolderToAccount:moveAction:actionName:");
}

id objc_msgSend_undoablyCopyAndDeleteFromFolder_destinationFolder_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyCopyAndDeleteFromFolder:destinationFolder:moveAction:actionName:");
}

id objc_msgSend_undoablyCopyFolder_toAccount_copyingNotes_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyCopyFolder:toAccount:copyingNotes:moveAction:actionName:");
}

id objc_msgSend_undoablyCopyNote_toFolder_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyCopyNote:toFolder:moveAction:actionName:");
}

id objc_msgSend_undoablyCopyNotes_toFolder_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyCopyNotes:toFolder:actionName:");
}

id objc_msgSend_undoablyDeleteAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyDeleteAttachment:");
}

id objc_msgSend_undoablyDeleteFolder_markNotesForDeletion_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyDeleteFolder:markNotesForDeletion:moveAction:actionName:");
}

id objc_msgSend_undoablyDeleteNote_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyDeleteNote:moveAction:actionName:");
}

id objc_msgSend_undoablyDeleteUnusedHashtags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyDeleteUnusedHashtags");
}

id objc_msgSend_undoablyDeleteUnusedTagsForSmartFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyDeleteUnusedTagsForSmartFolder:");
}

id objc_msgSend_undoablyMarkForDeletion_standardizedContent_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMarkForDeletion:standardizedContent:account:");
}

id objc_msgSend_undoablyMarkNotes_asCallNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMarkNotes:asCallNotes:");
}

id objc_msgSend_undoablyMarkNotes_asMathNotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMarkNotes:asMathNotes:");
}

id objc_msgSend_undoablyMarkNotes_asSystemPaper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMarkNotes:asSystemPaper:");
}

id objc_msgSend_undoablyMoveFolder_toNoteContainer_toAccount_moveAction_noteMovedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMoveFolder:toNoteContainer:toAccount:moveAction:noteMovedBlock:");
}

id objc_msgSend_undoablyMoveNote_toFolder_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMoveNote:toFolder:moveAction:actionName:");
}

id objc_msgSend_undoablyMoveNoteIDs_toFolderIDs_actionName_workerContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMoveNoteIDs:toFolderIDs:actionName:workerContext:completionHandler:");
}

id objc_msgSend_undoablyMoveNotes_toNoteContainer_actionName_workerContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMoveNotes:toNoteContainer:actionName:workerContext:completionHandler:");
}

id objc_msgSend_undoablyMoveNotes_toVirtualSmartFolderType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyMoveNotes:toVirtualSmartFolderType:completionHandler:");
}

id objc_msgSend_undoablyPersistActivityEventsForMoveAction_oldObject_newObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyPersistActivityEventsForMoveAction:oldObject:newObject:");
}

id objc_msgSend_undoablyPersistDeleteEventForObject_fromParentObject_sharedRootObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyPersistDeleteEventForObject:fromParentObject:sharedRootObject:");
}

id objc_msgSend_undoablyProcessNoteIDs_progressStringBlock_workerContext_processNoteBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyProcessNoteIDs:progressStringBlock:workerContext:processNoteBlock:completionHandler:");
}

id objc_msgSend_undoablyRemoveFromOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyRemoveFromOrder:");
}

id objc_msgSend_undoablySetFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablySetFolder:");
}

id objc_msgSend_undoablySetOrder_ofChild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablySetOrder:ofChild:");
}

id objc_msgSend_undoablySetParentFolder_moveAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablySetParentFolder:moveAction:");
}

id objc_msgSend_undoablySetTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablySetTitle:");
}

id objc_msgSend_undoablySetTitle_isUserDefined_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablySetTitle:isUserDefined:");
}

id objc_msgSend_undoablyTrashOrDeleteWithMoveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyTrashOrDeleteWithMoveAction:actionName:");
}

id objc_msgSend_undoablyUndeleteFolder_didMarkNotesForDeletion_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyUndeleteFolder:didMarkNotesForDeletion:moveAction:actionName:");
}

id objc_msgSend_undoablyUndeleteNote_moveAction_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyUndeleteNote:moveAction:actionName:");
}

id objc_msgSend_undoablyUndeleteUnusedTagsForSmartFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyUndeleteUnusedTagsForSmartFolder:");
}

id objc_msgSend_undoablyUnmoveNoteIDs_toFolderIDs_originalToCopyNoteIDs_actionName_noteToFolderIDsForRedo_workerContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undoablyUnmoveNoteIDs:toFolderIDs:originalToCopyNoteIDs:actionName:noteToFolderIDsForRedo:workerContext:");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_universalTypeIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "universalTypeIdentifier");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlock");
}

id objc_msgSend_unmarkForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unmarkForDeletion");
}

id objc_msgSend_unmarkNoteAndAttachmentsForDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unmarkNoteAndAttachmentsForDeletion:");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_updateAccessoryView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAccessoryView");
}

id objc_msgSend_updateAttachmentPreviewImageWithImage_scale_scaleWhenDrawing_metadata_sendNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAttachmentPreviewImageWithImage:scale:scaleWhenDrawing:metadata:sendNotification:");
}

id objc_msgSend_updateBrickContainerHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBrickContainerHeightConstraint");
}

id objc_msgSend_updateChangeCountRecursivelyWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateChangeCountRecursivelyWithReason:");
}

id objc_msgSend_updateChangeCountWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateChangeCountWithReason:");
}

id objc_msgSend_updateCollapsedDisclosure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCollapsedDisclosure");
}

id objc_msgSend_updateConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateConstraints");
}

id objc_msgSend_updateFonts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFonts");
}

id objc_msgSend_updateImportProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateImportProgress");
}

id objc_msgSend_updateSubFolderMergeableDataChangeCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSubFolderMergeableDataChangeCount");
}

id objc_msgSend_updateTextViewsForContentSizeChangeIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTextViewsForContentSizeChangeIfNecessary");
}

id objc_msgSend_updateTitleFooter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTitleFooter");
}

id objc_msgSend_updateTitleViewHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTitleViewHeightConstraint");
}

id objc_msgSend_updated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updated");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "url");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_verticalMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalMargin");
}

id objc_msgSend_videoDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "videoDuration");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_viewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllers");
}

id objc_msgSend_viewState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewState");
}

id objc_msgSend_visibleCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCells");
}

id objc_msgSend_visibleFolders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleFolders");
}

id objc_msgSend_visibleNoteContainerChildren(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleNoteContainerChildren");
}

id objc_msgSend_visibleNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleNotes");
}

id objc_msgSend_visibleNotesCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleNotesCount");
}

id objc_msgSend_visibleSubFolders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleSubFolders");
}

id objc_msgSend_visibleTopLevelAttachmentsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleTopLevelAttachmentsCount");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceAndNewlineCharacterSet");
}

id objc_msgSend_widthAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widthAnchor");
}

id objc_msgSend_willAppearInContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willAppearInContainer:");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "window");
}

id objc_msgSend_workerManagedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workerManagedObjectContext");
}

id objc_msgSend_writeLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeLock");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}
