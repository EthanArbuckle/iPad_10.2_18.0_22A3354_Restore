uint64_t sub_1005CEE4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1005CF56C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005CF5D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005D0E78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005D0FCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005D1060(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005D1B08(id a1, RAPReport *a2, RAPLookAroundDetailsEditorViewController *a3)
{
  RAPLookAroundDetailsEditorViewController *v4;
  _BOOL8 v5;
  UIBarButtonItem *sendButtonItem;

  v4 = a3;
  v5 = -[RAPReport canCreateSubmittableProblem](a2, "canCreateSubmittableProblem");
  sendButtonItem = v4->_sendButtonItem;

  -[UIBarButtonItem setEnabled:](sendButtonItem, "setEnabled:", v5);
}

void sub_1005D1C70(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  id v8;

  v6 = a4;
  if (a2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    if (v7)
    {
      v8 = v6;
      (*(void (**)(void))(v7 + 16))();
      v6 = v8;
    }
  }

}

void sub_1005D2D58(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1005D2D78(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "setComment:", a2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "commentHeaderView"));
    objc_msgSend(v4, "updateRemainingCharacters");

    WeakRetained = v5;
  }

}

void sub_1005D2DD0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "setComment:", a2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "commentHeaderView"));
    objc_msgSend(v4, "updateRemainingCharacters");

    WeakRetained = v5;
  }

}

void sub_1005D3088(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D2A48;
  qword_1014D2A48 = (uint64_t)v1;

}

id sub_1005D3F60(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sendUpdates");
}

BOOL sub_1005D4560(uint64_t a1, uint64_t a2)
{
  return (a2 & ~*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40)) == 0;
}

id sub_1005D4574()
{
  if (qword_1014D2A60 != -1)
    dispatch_once(&qword_1014D2A60, &stru_1011BD178);
  return (id)qword_1014D2A58;
}

void sub_1005D45B4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v21 = a2;
  objc_msgSend(v21, "setGuidanceState:", objc_msgSend(v3, "guidanceState"));
  objc_msgSend(v21, "setManeuverState:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "maneuverState"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "currentRoadNameVariants"));
  v5 = objc_msgSend(v4, "copy");
  objc_msgSend(v21, "setCurrentRoadNameVariants:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "destinationNameVariants"));
  v7 = objc_msgSend(v6, "copy");
  objc_msgSend(v21, "setDestinationNameVariants:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "estimatedTimeOfArrival"));
  objc_msgSend(v21, "setEstimatedTimeOfArrival:", v8);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "timeRemaining");
  objc_msgSend(v21, "setTimeRemaining:");
  objc_msgSend(v21, "setDestinationTimeZoneOffsetMinutes:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "destinationTimeZoneOffsetMinutes"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "distanceRemaining"));
  objc_msgSend(v21, "setDistanceRemaining:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "distanceRemainingDisplay"));
  objc_msgSend(v21, "setDistanceRemainingDisplay:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "distanceRemainingToNextManeuver"));
  objc_msgSend(v21, "setDistanceRemainingToNextManeuver:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "distanceRemainingToNextManeuverDisplay"));
  objc_msgSend(v21, "setDistanceRemainingToNextManeuverDisplay:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "sourceName"));
  v14 = objc_msgSend(v13, "copy");
  objc_msgSend(v21, "setSourceName:", v14);

  objc_msgSend(v21, "setSourceSupportsRouteGuidance:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "sourceSupportsRouteGuidance"));
  objc_msgSend(v21, "setBeingShownInApp:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "beingShownInApp"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "currentManeuvers"));
  v16 = objc_msgSend(v15, "copy");
  objc_msgSend(v21, "setCurrentManeuvers:", v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "currentManeuverIndexes"));
  v18 = objc_msgSend(v17, "copy");
  objc_msgSend(v21, "setCurrentManeuverIndexes:", v18);

  objc_msgSend(v21, "setTotalManeuverCount:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "totalManeuverCount"));
  objc_msgSend(v21, "setLaneGuidanceShowing:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "laneGuidanceShowing"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "currentLaneGuidance"));
  v20 = objc_msgSend(v19, "copy");
  objc_msgSend(v21, "setCurrentLaneGuidance:", v20);

  objc_msgSend(v21, "setCurrentLaneGuidanceIndex:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "currentLaneGuidanceIndex"));
  objc_msgSend(v21, "setTotalLaneGuidanceCount:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "totalLaneGuidanceCount"));

}

void sub_1005D4A18(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_setNeedsUpdateOfType:", 1);
    objc_storeStrong(v3 + 6, *(id *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_1005D4C20(id *a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_setNeedsUpdateOfType:", 6);
    objc_storeStrong(v3 + 7, a1[4]);
    objc_storeStrong(v3 + 8, a1[5]);
    WeakRetained = v3;
  }

}

void sub_1005D4E50(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:userInfo:", CFSTR("MapsExternalNavigationOwnershipUpdatedNotification"), 0, 0);

}

void sub_1005D5498(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarMetadataConnectionManager");
  v2 = (void *)qword_1014D2A58;
  qword_1014D2A58 = (uint64_t)v1;

}

void sub_1005D5860(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1005D588C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "webView"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[WKContentWorld pageWorld](WKContentWorld, "pageWorld"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1005D5944;
    v5[3] = &unk_1011BD1B8;
    v5[4] = v2;
    objc_msgSend(v3, "callAsyncJavaScript:arguments:inFrame:inContentWorld:completionHandler:", CFSTR("return rapGetData()"), 0, 0, v4, v5);

  }
}

void sub_1005D5944(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v3 = objc_opt_class(NSString);
  if ((objc_opt_isKindOfClass(v7, v3) & 1) != 0)
  {
    v4 = v7;
    v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedString:options:", v4, 0);

    v6 = objc_msgSend(objc_alloc((Class)GEORPFeedbackDynamicForm), "initWithData:", v5);
    objc_msgSend(*(id *)(a1 + 32), "_uploadForm:", v6);

  }
}

void sub_1005D59F4(uint64_t a1, int a2)
{
  id WeakRetained;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && a2)
  {
    v5 = WeakRetained;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    WeakRetained = v5;
  }

}

void sub_1005D5E54(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1005D5E78(id a1, id a2, id a3)
{
  (*((void (**)(id, uint64_t))a3 + 2))(a3, 1);
}

void sub_1005D5E88(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "startAnimating");
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "webView"));
    objc_msgSend(v2, "resignFirstResponder");

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "navigationBar"));
    objc_msgSend(v4, "setUserInteractionEnabled:", 0);

    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationItem"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "rightBarButtonItem"));
    objc_msgSend(v7, "setCustomView:", v5);

  }
}

void sub_1005D5F44(id *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  UGCCommunityAcknowledgementViewController *v12;
  void *v13;
  UGCCommunityAcknowledgementViewController *v14;
  void *v15;
  void *v16;
  void *v17;
  char *v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[5];
  _QWORD v28[5];

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    objc_msgSend(a1[4], "stopAnimating");
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "navigationBar"));
    objc_msgSend(v7, "setUserInteractionEnabled:", 1);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationItem"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "rightBarButtonItem"));
    objc_msgSend(v9, "setCustomView:", 0);

    if (a3)
    {
      v10 = sub_1008587A8();
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v11, 1, 0);

    }
    else
    {
      if (MapsFeature_IsEnabled_RAPSydney())
      {
        v12 = [UGCCommunityAcknowledgementViewController alloc];
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[RAPAcknowledgementOptions defaultOptions](RAPAcknowledgementOptions, "defaultOptions"));
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_1005D6224;
        v28[3] = &unk_1011AC860;
        v28[4] = WeakRetained;
        v14 = -[UGCCommunityAcknowledgementViewController initWithOptions:completion:](v12, "initWithOptions:completion:", v13, v28);

        v15 = (void *)objc_claimAutoreleasedReturnValue(-[UGCCommunityAcknowledgementViewController navigationItem](v14, "navigationItem"));
        objc_msgSend(v15, "setHidesBackButton:", 1);

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
        objc_msgSend(v16, "pushViewController:animated:", v14, 1);

        if (sub_1002A8AA0(a1[5]) == 5)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "webBundleQuestion"));
          v18 = (char *)objc_msgSend(v17, "questionType") - 13;

          if ((unint64_t)v18 <= 7)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(-[UGCCommunityAcknowledgementViewController view](v14, "view"));
            objc_msgSend(v19, "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
            v21 = v20;

            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
            objc_msgSend(v22, "updateCardHeight:", v21);

          }
        }
        v23 = (void *)objc_claimAutoreleasedReturnValue(-[UGCCommunityAcknowledgementViewController transitionCoordinator](v14, "transitionCoordinator"));
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_1005D622C;
        v27[3] = &unk_1011AEDC8;
        v27[4] = WeakRetained;
        objc_msgSend(v23, "animateAlongsideTransition:completion:", 0, v27);

      }
      else
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
        v14 = (UGCCommunityAcknowledgementViewController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "window"));

        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("[RAP Web UI] Thanks for your report"), CFSTR("localized string not found"), 0));

        +[ActionValidationController presentDefaultValidationActionWithTitle:inWindow:](ActionValidationController, "presentDefaultValidationActionWithTitle:inWindow:", v26, v14);
        objc_msgSend(WeakRetained, "_reportSent");

      }
      +[RAPAnalyticsManager captureRAPSendActionFromReport:](RAPAnalyticsManager, "captureRAPSendActionFromReport:", WeakRetained[17]);
    }
  }

}

id sub_1005D6224(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reportSent");
}

void sub_1005D622C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v1, "enableDismissByGesture:", 1);

}

void sub_1005D681C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005D6840(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  RAPPlaceViewController *v12;
  int v13;
  uint64_t v14;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (a3 || !objc_msgSend(v5, "count"))
    {
      v7 = sub_10043292C();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_QWORD *)(a1 + 32);
        v13 = 138412290;
        v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "No POI to show for id: %@", (uint8_t *)&v13, 0xCu);
      }

    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      v11 = objc_msgSend(objc_alloc((Class)MKMapItem), "initWithGeoMapItem:isPlaceHolderPlace:", v10, 0);
      v12 = -[RAPPlaceViewController initWithMapItem:]([RAPPlaceViewController alloc], "initWithMapItem:", v11);
      objc_msgSend(WeakRetained, "presentAccessoryViewController:", v12);

    }
  }

}

void sub_1005D6BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005D6C04(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  _QWORD v8[5];

  v7 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1005D6CB4;
    v8[3] = &unk_1011BD228;
    v8[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v8);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1005D6CB4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "image"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));

  objc_msgSend(v2, "saveImageData:withIdentifier:", v5, v4);
}

NSString *__cdecl sub_1005D7BFC(id a1, MSPSharedTripContact *a2, unint64_t a3)
{
  return (NSString *)-[MSPSharedTripContact stringValue](a2, "stringValue", a3);
}

id sub_1005D7CFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startTestAndPerformScrollTest");
}

id sub_1005D7D9C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_selectAndScrollPublisherCollections");
}

void sub_1005D7E18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pptTestScrollView"));

  v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D7EA8;
  v5[3] = &unk_1011AC860;
  v5[4] = v4;
  objc_msgSend(v4, "_performScrollTestOfScrollView:completion:", v3, v5);

}

id sub_1005D7EA8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

uint64_t sub_1005D7F44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1005D8178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005D81C4(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
      (*(void (**)(void))(v2 + 16))();
  }

}

BOOL sub_1005DBF90(id a1)
{
  void *v1;
  void *v2;

  +[SARAnalytics captureResumePreviousNavigation](SARAnalytics, "captureResumePreviousNavigation");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v1, "resumeOriginalDestination");

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("NavModeControllerResumeOriginalDestinationNotification"), 0);

  return 1;
}

void sub_1005DC7F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1005DC814(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_becomeTopContextInChromeViewController:animated:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));

}

void sub_1005DCF60(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1005DCF7C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_resignTopContextInChromeViewController:", *(_QWORD *)(a1 + 32));

}

uint64_t sub_1005DEEF4(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_dismissTrafficIncidentMapDisplay");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  objc_msgSend(v4, "updateLayoutAnimated:", 1);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

id sub_1005DFA94(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startNavigationCameraMotionAnimated:", 1);
}

id sub_1005E0E80(void *a1, uint64_t a2, double a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "artwork"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "icon"));

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "styleAttributes"));
  if (!v8
    || (v9 = objc_msgSend(objc_alloc((Class)GEOFeatureStyleAttributes), "initWithGEOStyleAttributes:", v8),
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForStyle:size:forScale:format:](MKIconManager, "imageForStyle:size:forScale:format:", v9, a2, 0, a3)), v9, v8, !v10))
  {
    v11 = sub_1005E0F68((unint64_t)objc_msgSend(v5, "type"), a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v11);
  }

  return v10;
}

id sub_1005E0F68(unint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForTrafficIncidentType:size:forScale:](MKIconManager, "imageForTrafficIncidentType:size:forScale:", a1, a2));
  if (!v3)
  {
    if (a1 > 0xE)
      v3 = 0;
    else
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", off_1011BD310[a1]));
  }
  return v3;
}

id sub_1005E0FCC(void *a1, uint64_t a2, double a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "artwork"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "icon"));

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "styleAttributes"));
  if (!v8
    || (v9 = objc_msgSend(objc_alloc((Class)GEOFeatureStyleAttributes), "initWithGEOStyleAttributes:", v8),
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForStyle:size:forScale:format:](MKIconManager, "imageForStyle:size:forScale:format:", v9, a2, 0, a3)), v9, v8, !v10))
  {
    v11 = sub_1005E0F68((unint64_t)+[VKTrafficIncidentFeature incidentTypeForGeoRouteIncident:](VKTrafficIncidentFeature, "incidentTypeForGeoRouteIncident:", v5), a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v11);
  }

  return v10;
}

id sub_1005E10BC(void *a1, unint64_t a2, uint64_t a3, double a4)
{
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "artwork"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "icon"));

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "styleAttributes"));
  if (!v9
    || (v10 = objc_msgSend(objc_alloc((Class)GEOFeatureStyleAttributes), "initWithGEOStyleAttributes:", v9), v11 = (void *)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForStyle:size:forScale:format:](MKIconManager, "imageForStyle:size:forScale:format:", v10, a3, 0, a4)), v10, v9, !v11))
  {
    v12 = sub_1005E0F68(a2, a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v12);
  }

  return v11;
}

uint64_t sub_1005E1854(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1005E1864(uint64_t a1)
{

}

void sub_1005E186C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005E18FC;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

void sub_1005E18FC(uint64_t a1)
{
  _QWORD *v2;
  id v3;

  v2 = sub_10089D054(*(void **)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, 0, *(_QWORD *)(a1 + 32));

}

void sub_1005E1944(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  __int128 v5;
  _QWORD block[4];
  id v7;
  __int128 v8;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005E19E4;
  block[3] = &unk_1011B8030;
  v7 = a2;
  v5 = *(_OWORD *)(a1 + 32);
  v3 = (id)v5;
  v8 = v5;
  v4 = v7;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1005E19E4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  id v6;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "isCancelled") & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v6 = objc_msgSend(objc_alloc((Class)GEOComposedWaypointToRoute), "initWithRoute:", *(_QWORD *)(a1 + 32));
      if (objc_msgSend(*(id *)(a1 + 32), "source") == (id)2)
        v2 = objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes curatedRouteStyleAttributes](GEOFeatureStyleAttributes, "curatedRouteStyleAttributes"));
      else
        v2 = objc_claimAutoreleasedReturnValue(+[GEOFeatureStyleAttributes customSavedRouteStyleAttributes](GEOFeatureStyleAttributes, "customSavedRouteStyleAttributes"));
      v3 = (void *)v2;
      objc_msgSend(v6, "setStyleAttributes:", v2);

    }
    else
    {
      v6 = 0;
    }
    v4 = sub_10089D054(*(void **)(a1 + 40));
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(v4);
    ((void (**)(_QWORD, id, _QWORD))v5)[2](v5, v6, 0);

  }
}

void sub_1005E1B3C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](a2, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Line Segment Integration"), CFSTR("MapsElevationGraphLineSegmentIntegralBucketingKey"));
}

void sub_1005E26D4(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[5];

  v3[0] = UIContentSizeCategoryAccessibilityMedium;
  v3[1] = UIContentSizeCategoryAccessibilityLarge;
  v3[2] = UIContentSizeCategoryAccessibilityExtraLarge;
  v3[3] = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  v3[4] = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 5));
  v2 = (void *)qword_1014D2A68;
  qword_1014D2A68 = v1;

}

id sub_1005E2984()
{
  if (qword_1014D2A80 != -1)
    dispatch_once(&qword_1014D2A80, &stru_1011BD418);
  return (id)qword_1014D2A78;
}

id sub_1005E2AE0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setAlpha:", *(double *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", *(double *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", *(double *)(a1 + 40));
}

void sub_1005E3148(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSafetyView");
  v2 = (void *)qword_1014D2A78;
  qword_1014D2A78 = (uint64_t)v1;

}

void sub_1005E35D8(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2A88;
  qword_1014D2A88 = (uint64_t)v1;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2A88, "setLocale:", v3);

}

void sub_1005E3A90(id a1)
{
  NSDateFormatter *v1;
  void *v2;
  void *v3;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_1014D2A98;
  qword_1014D2A98 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D2A98, "setLocale:", v3);

  objc_msgSend((id)qword_1014D2A98, "setTimeStyle:", 1);
}

void sub_1005E4C50(id a1)
{
  NSLengthFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSLengthFormatter);
  v2 = (void *)qword_1014D2AA8;
  qword_1014D2AA8 = (uint64_t)v1;

}

void sub_1005E4C78(id a1)
{
  NSLengthFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSLengthFormatter);
  v2 = (void *)qword_1014D2AB8;
  qword_1014D2AB8 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2AB8, "setUnitStyle:", 3);
}

uint64_t sub_1005E4DE8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_containingAppIdentifer"));
  LODWORD(a1) = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)a1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "extensionPointIdentifier"));
    v6 = (uint64_t)objc_msgSend(v5, "isEqual:", INIntentsUIServiceExtensionPointName);

    if ((_DWORD)v6)
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[_MXExtensionManager _maps_ridesharingIntentClassesForUIInteraction](_MXExtensionManager, "_maps_ridesharingIntentClassesForUIInteraction", 0));
      v6 = (uint64_t)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
      {
        v8 = *(_QWORD *)v12;
        while (2)
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v12 != v8)
              objc_enumerationMutation(v7);
            if ((objc_msgSend(v3, "canSupportIntentClass:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i)) & 1) != 0)
            {
              v6 = 1;
              goto LABEL_14;
            }
          }
          v6 = (uint64_t)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
          if (v6)
            continue;
          break;
        }
      }
LABEL_14:

    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1005E5570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005E55AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  char *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  _QWORD v31[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = DefaultLoggingSubsystem;
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RideBooking");
    v10 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Shared/RidesharingConfirmedRideViewController.m");
      v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Submit handler was tapped in feedback view. Rating: %@, tip: %@"), v5, v6);
      *(_DWORD *)buf = 136315394;
      v29 = v11;
      v30 = 2112;
      v31[0] = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{RBInfo}{%s}: %@", buf, 0x16u);

    }
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[34], "identifier"));
    if (-[NSObject length](v13, "length"))
    {
      v14 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 2 * (_QWORD)objc_msgSend(v5, "integerValue")));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
      objc_msgSend(v15, "captureUserAction:onTarget:eventValue:", 14009, 1406, 0);

      objc_msgSend(WeakRetained[39], "sendFeedbackForRideStatus:feedbackRating:feedbackTip:completion:", WeakRetained[34], v14, v6, &stru_1011BD500);
      v16 = objc_loadWeakRetained(WeakRetained + 33);
      objc_msgSend(v16, "viewControllerSendFeedbackAction");
    }
    else
    {
      v18 = GEOFindOrCreateLog(v8, "RideBooking");
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = basename("/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Shared/RidesharingConfirmedRideViewController.m");
        v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Trying to submit feedback, but the rideIdentifier is invalid. rideIdentifier: %@"), v13);
        *(_DWORD *)buf = 136315394;
        v29 = v20;
        v30 = 2112;
        v31[0] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{RBError}{%s}: %@", buf, 0x16u);

      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("ridesharing submit feedback error title"), CFSTR("localized string not found"), 0));

      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "localizedStringForKey:value:table:", CFSTR("ridesharing submit feedback error message"), CFSTR("localized string not found"), 0));

      v24 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v14, v16, 1));
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("ridesharing submit feedback error button ok"), CFSTR("localized string not found"), 0));
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v26, 1, 0));
      objc_msgSend(v24, "addAction:", v27);

      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v24, 1, 0);
    }

  }
  else
  {
    v17 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingConfirmedRideViewController");
    v14 = (id)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v29 = "RidesharingConfirmedRideViewController.m";
      v30 = 1026;
      LODWORD(v31[0]) = 191;
      WORD2(v31[0]) = 2082;
      *(_QWORD *)((char *)v31 + 6) = "-[RidesharingConfirmedRideViewController viewDidLoad]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }
    v13 = v14;
  }

}

void sub_1005E59F0(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  uint64_t Log;
  NSObject *v4;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_openAppTapped");
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingConfirmedRideViewController");
    v4 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "RidesharingConfirmedRideViewController.m";
      v7 = 1026;
      v8 = 222;
      v9 = 2082;
      v10 = "-[RidesharingConfirmedRideViewController viewDidLoad]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void sub_1005E5BAC(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  void *v4;
  uint64_t Log;
  NSObject *v6;
  int v7;
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
    v4 = (void *)WeakRetained[42];
    WeakRetained[42] = v3;

    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 249) = 0;
    objc_msgSend(WeakRetained, "_updateFromRideStatus:", WeakRetained[34]);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingConfirmedRideViewController");
    v6 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136446722;
      v8 = "RidesharingConfirmedRideViewController.m";
      v9 = 1026;
      v10 = 237;
      v11 = 2082;
      v12 = "-[RidesharingConfirmedRideViewController extensionManager:didUpdateAvailableExtensions:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v7, 0x1Cu);
    }

  }
}

void sub_1005E5EB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005E5F70;
  block[3] = &unk_1011B5ED8;
  v7 = *(id *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_1005E5F70(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1005E603C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "updateLayout");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

}

void sub_1005E62F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1005E6314(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  uint64_t Log;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = WeakRetained;
  if (WeakRetained)
  {
    if (v9)
    {
      objc_msgSend(WeakRetained, "_cleanupWithRideStatus:", *(_QWORD *)(a1 + 32));
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "application"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "name"));
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1005E6558;
      v17[3] = &unk_1011B0E90;
      objc_copyWeak(&v20, (id *)(a1 + 40));
      v18 = *(id *)(a1 + 32);
      v19 = 0;
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_cancelConfirmationAlertControllerForApp:withFee:threshold:continueBlock:", v15, v7, v8, v17));

      objc_msgSend(v11, "presentViewController:animated:completion:", v16, 1, 0);
      objc_destroyWeak(&v20);
    }
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingConfirmedRideViewController");
    v13 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v22 = "RidesharingConfirmedRideViewController.m";
      v23 = 1026;
      v24 = 301;
      v25 = 2082;
      v26 = "-[RidesharingConfirmedRideViewController _cancelTapped:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1005E6538(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1005E6558(id *a1, char a2)
{
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  uint64_t Log;
  NSObject *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;

  v4 = a1 + 6;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v6 = WeakRetained;
  if (WeakRetained)
  {
    if ((a2 & 1) != 0)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "rideStatusObserverProxy"));
      v8 = a1[4];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1005E6754;
      v12[3] = &unk_1011AE5B8;
      objc_copyWeak(&v15, v4);
      v13 = a1[5];
      v14 = a1[4];
      objc_msgSend(v7, "cancelRideWithRideStatus:completion:", v8, v12);

      objc_destroyWeak(&v15);
    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cancelButton"));
      objc_msgSend(v11, "setSpinnerHidden:", 1);

    }
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingConfirmedRideViewController");
    v10 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v17 = "RidesharingConfirmedRideViewController.m";
      v18 = 1026;
      v19 = 309;
      v20 = 2082;
      v21 = "-[RidesharingConfirmedRideViewController _cancelTapped:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_1005E6738(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1005E6754(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t Log;
  NSObject *v7;
  int v8;
  char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (!WeakRetained)
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingConfirmedRideViewController");
    v7 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = 136446722;
      v9 = "RidesharingConfirmedRideViewController.m";
      v10 = 1026;
      v11 = 317;
      v12 = 2082;
      v13 = "-[RidesharingConfirmedRideViewController _cancelTapped:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf3 went away in %{public}s", (uint8_t *)&v8, 0x1Cu);
    }

    goto LABEL_8;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "coordinator"));
    -[NSObject viewController:minimizeConfirmation:](v7, "viewController:minimizeConfirmation:", v5, 0);
LABEL_8:

    goto LABEL_9;
  }
  objc_msgSend(WeakRetained, "_cleanupWithRideStatus:", *(_QWORD *)(a1 + 40));
LABEL_9:

}

uint64_t sub_1005E6F9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1005E6FAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1005E7CF4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v9 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "coordinator"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "containerViewController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chromeViewController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_maps_mapsSceneDelegate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "topMostPresentedViewController"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "coordinator"));
    objc_msgSend(v8, "viewController:presentErrorAlertIfNeeded:", v7, *(_QWORD *)(a1 + 32));

    WeakRetained = v9;
  }

}

void sub_1005E7DAC(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;

  v12 = a2;
  v6 = a3;
  v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  v8 = (id *)(*(_QWORD *)(a1 + 32) + 256);
  if (!*v8)
  {
    objc_storeStrong(v8, a2);
    v9 = 22;
    +[ExtensionsViewComposer composeBannerView:forRidesharingCurrentRideViewController:rideBookingRideStatus:](ExtensionsViewComposer, "composeBannerView:forRidesharingCurrentRideViewController:rideBookingRideStatus:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v10 = *(_QWORD **)(a1 + 32);
    if (!v10[32])
      v9 = 23;
    objc_msgSend(v10, "_setBannerViewContainerContentView:", v10[v9]);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
    objc_msgSend(v11, "updateHeightForCurrentLayout");

  }
  objc_sync_exit(v7);

}

void sub_1005E7E8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005E7EA4(uint64_t a1, int a2, void *a3)
{
  id v6;
  id v7;

  v7 = a3;
  v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  if (a2)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 240), a3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 288), "setEnabled:", 1);
  }
  objc_sync_exit(v6);

}

void sub_1005E7F34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1005E94CC(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  NSMutableDictionary *v8;
  NSMutableArray *v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  _QWORD v23[4];

  v4 = objc_msgSend(*(id *)(a1 + 32), "getRequestCountForType:andApp:", a2, *(_QWORD *)(a1 + 40));
  if (v4)
  {
    v5 = v4;
    v6 = GEODataRequestKindAsString(a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v7));
    if (!v8)
    {
      v8 = objc_opt_new(NSMutableDictionary);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", &off_10126DF00, CFSTR("xmitB"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", &off_10126DF00, CFSTR("recvB"));
      v9 = objc_opt_new(NSMutableArray);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v9, CFSTR("apps"));

      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v8, v7);
      objc_msgSend(*(id *)(a1 + 56), "addObject:", v7);
    }
    v10 = (char *)objc_msgSend(*(id *)(a1 + 64), "xmitBytesForType:", a2);
    v11 = (char *)objc_msgSend(*(id *)(a1 + 64), "recvBytesForType:", a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", CFSTR("xmitB")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", &v10[(_QWORD)objc_msgSend(v12, "unsignedIntegerValue")]));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v13, CFSTR("xmitB"));

    v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", CFSTR("recvB")));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", &v11[(_QWORD)objc_msgSend(v14, "unsignedIntegerValue")]));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v15, CFSTR("recvB"));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSByteCountFormatter stringFromByteCount:countStyle:](NSByteCountFormatter, "stringFromByteCount:countStyle:", v10, 3));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSByteCountFormatter stringFromByteCount:countStyle:](NSByteCountFormatter, "stringFromByteCount:countStyle:", v11, 3));
    v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", CFSTR("apps")));
    v23[0] = *(_QWORD *)(a1 + 40);
    v22[0] = CFSTR("name");
    v22[1] = CFSTR("count");
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "stringValue"));
    v23[1] = v20;
    v23[2] = v16;
    v22[2] = CFSTR("xmitB");
    v22[3] = CFSTR("recvB");
    v23[3] = v17;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 4));
    objc_msgSend(v18, "addObject:", v21);

  }
}

id sub_1005EA0FC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateETACalloutFromDetailsPickingProviderAndMapMoving");
  return _objc_msgSend(*(id *)(a1 + 32), "_moveMapToNewStartWaypointIfNeededAnimated:", 0);
}

void sub_1005EA46C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "setNeedsLayout");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v3, "layoutIfNeeded");

}

void sub_1005EA818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005EA840(uint64_t a1)
{
  _QWORD v2[5];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1005EA8C4;
  v2[3] = &unk_1011AD1E8;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  v2[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
  objc_destroyWeak(&v3);
}

void sub_1005EA8C4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    *((_BYTE *)WeakRetained + 452) = 1;
    objc_msgSend(*(id *)(a1 + 32), "_updateETACalloutFromDetailsPickingProviderAndMapMoving");
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RidesharingContainerViewController");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "RidesharingContainerViewController.m";
      v8 = 1026;
      v9 = 210;
      v10 = 2082;
      v11 = "-[RidesharingContainerViewController requestRideStatusDidChange:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

BOOL sub_1005EC254()
{
  void *v0;
  double v1;
  _BOOL8 v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v0, "bounds");
  v2 = v1 == 320.0;

  return v2;
}

double sub_1005EC29C()
{
  void *v0;
  id v1;
  double result;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  result = 10.0;
  if (v1 == (id)5)
    return 13.0;
  return result;
}

void sub_1005EC2E4()
{
  void *v0;
  id v1;
  _BOOL4 v2;
  void *v3;
  double v4;
  double v5;

  if (!GEOConfigGetBOOL(MapsConfig_EnableHalfHeightChromeCards, off_1014B5598))
  {
    v2 = sub_1005EC254();
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v3, "bounds");
    if (!v2)
    {

      return;
    }
    v5 = 0.330000013;
LABEL_7:
    UIRoundToScreenScale(v3, v4 * v5);

    return;
  }
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 != (id)1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v3, "bounds");
    v5 = 0.449999988;
    goto LABEL_7;
  }
}

void sub_1005EC44C(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D2AC8;
  qword_1014D2AC8 = (uint64_t)v1;

}

id sub_1005EC7C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  objc_class *v12;
  NSString *v13;
  void *v14;
  void *v15;
  void *v16;
  __CFString *v17;
  void *v18;
  uint8_t buf[4];
  __CFString *v21;
  __int16 v22;
  id v23;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v6 = *(void **)(a1 + 32);

  if (v5 == v6)
  {
    v8 = sub_10043364C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
LABEL_13:

      v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subarrayWithRange:", 0, (char *)objc_msgSend(v4, "count") - 1));
      goto LABEL_14;
    }
    v10 = *(id *)(a1 + 32);
    v11 = v10;
    if (!v10)
    {
      v17 = CFSTR("<nil>");
      goto LABEL_12;
    }
    v12 = (objc_class *)objc_opt_class(v10);
    v13 = NSStringFromClass(v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    if ((objc_opt_respondsToSelector(v11, "accessibilityIdentifier") & 1) != 0)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "performSelector:", "accessibilityIdentifier"));
      v16 = v15;
      if (v15 && !objc_msgSend(v15, "isEqualToString:", v14))
      {
        v17 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v14, v11, v16));

        goto LABEL_10;
      }

    }
    v17 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v14, v11));
LABEL_10:

LABEL_12:
    *(_DWORD *)buf = 138412546;
    v21 = v17;
    v22 = 2112;
    v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Will pop mode (%@) And all contexts: %@", buf, 0x16u);

    goto LABEL_13;
  }
  v7 = v4;
LABEL_14:
  v18 = v7;

  return v18;
}

NSArray *__cdecl sub_1005ECEF0(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  id v16;
  NSObject *v17;
  CarRouteGeniusModeController *v18;
  void *v19;
  void *v20;
  CarRouteGeniusModeController *v21;
  NSArray *v22;
  id v23;
  NSObject *v24;
  void *v25;
  objc_class *v26;
  NSString *v27;
  void *v28;
  id v29;
  int v31;
  void *v32;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v4, "lastObject"));
  v6 = objc_opt_class(CarMapBrowsingModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  if ((isKindOfClass & 1) == 0)
  {
    v23 = sub_10043364C();
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v4, "lastObject"));
      v26 = (objc_class *)objc_opt_class(v25);
      v27 = NSStringFromClass(v26);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      v31 = 138412290;
      v32 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Will not push CarRouteGeniusModeController, topContext=%@", (uint8_t *)&v31, 0xCu);

    }
    goto LABEL_13;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  v9 = objc_msgSend(v8, "isActive");

  if ((v9 & 1) == 0)
  {
    v29 = sub_10043364C();
    v24 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v31) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Will not push CarRouteGeniusModeController, reason: RouteGenius Not running.", (uint8_t *)&v31, 2u);
    }
LABEL_13:

    v22 = v4;
    goto LABEL_18;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "suggestion"));

  v12 = sub_10043364C();
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
  v15 = v14;
  if (v11)
  {

    if (v15)
    {
      v16 = sub_10043364C();
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v31 = 138412290;
        v32 = v11;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Will push CarRouteGeniusModeController with suggestion:[%@]", (uint8_t *)&v31, 0xCu);
      }

    }
    v18 = [CarRouteGeniusModeController alloc];
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "suggestion"));
    v21 = -[CarRouteGeniusModeController initWithSuggestion:](v18, "initWithSuggestion:", v20);

    v22 = (NSArray *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v4, "arrayByAddingObject:", v21));
  }
  else
  {
    if (v14)
    {
      LOWORD(v31) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Will not push CarRouteGeniusModeController, reason: predicted destination is nil.", (uint8_t *)&v31, 2u);
    }

    v22 = v4;
  }

LABEL_18:
  return v22;
}

NSArray *__cdecl sub_1005ED1A8(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  ChromeViewController *v5;
  NSArray *v6;
  uint64_t v7;
  ChromeViewController *v8;
  ChromeViewController *v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  objc_class *v14;
  NSString *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  uint64_t v21;
  char isKindOfClass;
  void *v23;
  void *v24;
  CarMapWidgetRouteGeniusModeController *v25;
  void *v26;
  void *v27;
  CarMapWidgetRouteGeniusModeController *v28;
  NSArray *v29;
  id v30;
  objc_class *v31;
  NSString *v32;
  id v34;
  int v35;
  void *v36;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_class(CarChromeViewController);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    v8 = v5;
  else
    v8 = 0;
  v9 = v8;
  v10 = -[ChromeViewController sceneType](v9, "sceneType");

  if ((unint64_t)v10 >= 4)
  {
    v11 = sub_1004335DC();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v6, "lastObject"));
      v14 = (objc_class *)objc_opt_class(v13);
      v15 = NSStringFromClass(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v35 = 138412290;
      v36 = v16;
      v17 = "Will not push CarMapWidgetRouteGeniusModeController as RG is not supported for this sceneType, topContext=%@";
      v18 = v12;
      v19 = OS_LOG_TYPE_INFO;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, (uint8_t *)&v35, 0xCu);

      goto LABEL_13;
    }
    goto LABEL_13;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v6, "lastObject"));
  v21 = objc_opt_class(CarMapWidgetMapBrowsingModeController);
  isKindOfClass = objc_opt_isKindOfClass(v20, v21);

  if ((isKindOfClass & 1) == 0)
  {
    v30 = sub_1004335DC();
    v12 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v6, "lastObject"));
      v31 = (objc_class *)objc_opt_class(v13);
      v32 = NSStringFromClass(v31);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v32);
      v35 = 138412290;
      v36 = v16;
      v17 = "Will not push CarMapWidgetRouteGeniusModeController, topContext=%@";
      v18 = v12;
      v19 = OS_LOG_TYPE_DEBUG;
      goto LABEL_12;
    }
LABEL_13:

    v29 = v6;
    goto LABEL_14;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "suggestion"));

  if (!v24)
  {
    v34 = sub_1004335DC();
    v12 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v35) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Will not push CarMapWidgeRouteGeniusModeController, reason: predicted destination is nil.", (uint8_t *)&v35, 2u);
    }
    goto LABEL_13;
  }
  v25 = [CarMapWidgetRouteGeniusModeController alloc];
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "suggestion"));
  v28 = -[CarBasicRouteGeniusModeController initWithSuggestion:](v25, "initWithSuggestion:", v27);

  v29 = (NSArray *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v6, "arrayByAddingObject:", v28));
LABEL_14:

  return v29;
}

NSArray *__cdecl sub_1005ED44C(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  ChromeViewController *v5;
  NSArray *v6;
  uint64_t v7;
  ChromeViewController *v8;
  ChromeViewController *v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  objc_class *v14;
  NSString *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  uint64_t v21;
  char isKindOfClass;
  void *v23;
  void *v24;
  CarSmallWidgetRouteGeniusModeController *v25;
  void *v26;
  void *v27;
  CarSmallWidgetRouteGeniusModeController *v28;
  NSArray *v29;
  id v30;
  objc_class *v31;
  NSString *v32;
  id v34;
  int v35;
  void *v36;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_class(CarSmallWidgetChromeViewController);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    v8 = v5;
  else
    v8 = 0;
  v9 = v8;
  v10 = -[ChromeViewController sceneType](v9, "sceneType");

  if ((unint64_t)v10 >= 4)
  {
    v11 = sub_1004335DC();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v6, "lastObject"));
      v14 = (objc_class *)objc_opt_class(v13);
      v15 = NSStringFromClass(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v35 = 138412290;
      v36 = v16;
      v17 = "Will not push CarSmallWidgetRouteGeniusModeController as RG is not supported for this sceneType, topContext=%@";
      v18 = v12;
      v19 = OS_LOG_TYPE_INFO;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, (uint8_t *)&v35, 0xCu);

      goto LABEL_13;
    }
    goto LABEL_13;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v6, "lastObject"));
  v21 = objc_opt_class(CarSmallWidgetBrowsingModeController);
  isKindOfClass = objc_opt_isKindOfClass(v20, v21);

  if ((isKindOfClass & 1) == 0)
  {
    v30 = sub_10043379C();
    v12 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v6, "lastObject"));
      v31 = (objc_class *)objc_opt_class(v13);
      v32 = NSStringFromClass(v31);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v32);
      v35 = 138412290;
      v36 = v16;
      v17 = "Will not push CarSmallWidgetRouteGeniusModeController, topContext=%@";
      v18 = v12;
      v19 = OS_LOG_TYPE_DEBUG;
      goto LABEL_12;
    }
LABEL_13:

    v29 = v6;
    goto LABEL_14;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "suggestion"));

  if (!v24)
  {
    v34 = sub_10043379C();
    v12 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v35) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Will not push CarSmallWidgetRouteGeniusModeController, reason: predicted destination is nil.", (uint8_t *)&v35, 2u);
    }
    goto LABEL_13;
  }
  v25 = [CarSmallWidgetRouteGeniusModeController alloc];
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[CarRouteGeniusService sharedService](CarRouteGeniusService, "sharedService"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "suggestion"));
  v28 = -[CarSmallWidgetRouteGeniusModeController initWithSuggestion:](v25, "initWithSuggestion:", v27);

  v29 = (NSArray *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v6, "arrayByAddingObject:", v28));
LABEL_14:

  return v29;
}

NSArray *__cdecl sub_1005ED70C(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSArray *v10;
  uint8_t v12[16];

  v4 = a3;
  v5 = -[NSArray _maps_lastContextOfClass:](v4, "_maps_lastContextOfClass:", objc_opt_class(CarRouteGeniusModeController));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = sub_10043364C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Removing RouteGenius mode", v12, 2u);
    }

    v9 = -[NSArray mutableCopy](v4, "mutableCopy");
    objc_msgSend(v9, "removeObject:", v6);
    v10 = (NSArray *)objc_msgSend(v9, "copy");

  }
  else
  {
    v10 = v4;
  }

  return v10;
}

NSArray *__cdecl sub_1005ED7E0(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSArray *v10;
  uint8_t v12[16];

  v4 = a3;
  v5 = -[NSArray _maps_lastContextOfClass:](v4, "_maps_lastContextOfClass:", objc_opt_class(CarMapWidgetRouteGeniusModeController));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = sub_1004335DC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Removing RouteGenius mode", v12, 2u);
    }

    v9 = -[NSArray mutableCopy](v4, "mutableCopy");
    objc_msgSend(v9, "removeObject:", v6);
    v10 = (NSArray *)objc_msgSend(v9, "copy");

  }
  else
  {
    v10 = v4;
  }

  return v10;
}

NSArray *__cdecl sub_1005ED8B4(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSArray *v10;
  uint8_t v12[16];

  v4 = a3;
  v5 = -[NSArray _maps_lastContextOfClass:](v4, "_maps_lastContextOfClass:", objc_opt_class(CarSmallWidgetRouteGeniusModeController));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = sub_10043379C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Removing RouteGenius mode", v12, 2u);
    }

    v9 = -[NSArray mutableCopy](v4, "mutableCopy");
    objc_msgSend(v9, "removeObject:", v6);
    v10 = (NSArray *)objc_msgSend(v9, "copy");

  }
  else
  {
    v10 = v4;
  }

  return v10;
}

NSArray *__cdecl sub_1005ED9A4(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  CarMapBrowsingModeController *v11;
  CarMapBrowsingModeController **v12;
  void *v13;
  __int16 v15;
  CarMapBrowsingModeController *v16;
  CarMapBrowsingModeController *v17;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
  v6 = objc_opt_class(CarMapBrowsingModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_10043364C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will pop to existing CarMapBrowsingModeController", (uint8_t *)&v15, 2u);
    }

    v11 = (CarMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
    v17 = v11;
    v12 = &v17;
  }
  else
  {
    if (v10)
    {
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will replace all contexts with CarMapBrowsingModeController", (uint8_t *)&v15, 2u);
    }

    v11 = objc_alloc_init(CarMapBrowsingModeController);
    v16 = v11;
    v12 = &v16;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v12, 1));

  return (NSArray *)v13;
}

NSArray *__cdecl sub_1005EDAF8(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  CarMapWidgetMapBrowsingModeController *v11;
  CarMapWidgetMapBrowsingModeController **v12;
  void *v13;
  __int16 v15;
  CarMapWidgetMapBrowsingModeController *v16;
  CarMapWidgetMapBrowsingModeController *v17;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
  v6 = objc_opt_class(CarMapWidgetMapBrowsingModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_1004335DC();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will pop to existing CarMapWidgetMapBrowsingModeController", (uint8_t *)&v15, 2u);
    }

    v11 = (CarMapWidgetMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
    v17 = v11;
    v12 = &v17;
  }
  else
  {
    if (v10)
    {
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will replace all contexts with CarMapWidgetMapBrowsingModeController", (uint8_t *)&v15, 2u);
    }

    v11 = objc_alloc_init(CarMapWidgetMapBrowsingModeController);
    v16 = v11;
    v12 = &v16;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v12, 1));

  return (NSArray *)v13;
}

NSArray *__cdecl sub_1005EDC4C(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  CarSmallWidgetBrowsingModeController *v11;
  CarSmallWidgetBrowsingModeController **v12;
  void *v13;
  __int16 v15;
  CarSmallWidgetBrowsingModeController *v16;
  CarSmallWidgetBrowsingModeController *v17;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
  v6 = objc_opt_class(CarSmallWidgetBrowsingModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_10043379C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will pop to existing CarSmallWidgetBrowsingModeController", (uint8_t *)&v15, 2u);
    }

    v11 = (CarSmallWidgetBrowsingModeController *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
    v17 = v11;
    v12 = &v17;
  }
  else
  {
    if (v10)
    {
      v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will replace all contexts with CarSmallWidgetBrowsingModeController", (uint8_t *)&v15, 2u);
    }

    v11 = objc_alloc_init(CarSmallWidgetBrowsingModeController);
    v16 = v11;
    v12 = &v16;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v12, 1));

  return (NSArray *)v13;
}

id sub_1005EDF40(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  id v7;
  CarMapBrowsingModeController *v8;
  void *v9;
  CarMapBrowsingModeController *v11;

  v6 = a3;
  v7 = objc_msgSend(v6, "_maps_lastContextOfClass:", objc_opt_class(CarMapBrowsingModeController));
  v8 = (CarMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(v7);

  if (!v8)
    v8 = objc_alloc_init(CarMapBrowsingModeController);
  -[CarBasicMapBrowsingModeController setVisibleMapRegion:animated:](v8, "setVisibleMapRegion:animated:", *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
  if (a4)
    *a4 = *(_BYTE *)(a1 + 64);
  v11 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));

  return v9;
}

id sub_1005EE02C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  id v7;
  CarMapWidgetMapBrowsingModeController *v8;
  void *v9;
  CarMapWidgetMapBrowsingModeController *v11;

  v6 = a3;
  v7 = objc_msgSend(v6, "_maps_lastContextOfClass:", objc_opt_class(CarMapWidgetMapBrowsingModeController));
  v8 = (CarMapWidgetMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(v7);

  if (!v8)
    v8 = objc_alloc_init(CarMapWidgetMapBrowsingModeController);
  -[CarBasicMapBrowsingModeController setVisibleMapRegion:animated:](v8, "setVisibleMapRegion:animated:", *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
  if (a4)
    *a4 = *(_BYTE *)(a1 + 64);
  v11 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));

  return v9;
}

NSArray *__cdecl sub_1005EE12C(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  NSObject *v6;
  CarMapPanningModeController *v7;
  void *v8;
  uint8_t v10[16];

  v4 = a3;
  v5 = sub_10043364C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Will push CarMapPanningModeController", v10, 2u);
  }

  v7 = objc_alloc_init(CarMapPanningModeController);
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v4, "arrayByAddingObject:", v7));

  return (NSArray *)v8;
}

NSArray *__cdecl sub_1005EE1E4(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  CarMapBrowsingModeController *v9;
  CarMapBrowsingModeController *v10;
  CarDestinationsModeController *v11;
  void *v12;
  uint8_t v14[8];
  _QWORD v15[2];

  v4 = a3;
  v5 = sub_10043364C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Will push CarDestinationsModeController onto existing CarMapBrowsingModeController", v14, 2u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
  v8 = objc_opt_class(CarMapBrowsingModeController);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    v9 = (CarMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
  else
    v9 = objc_opt_new(CarMapBrowsingModeController);
  v10 = v9;

  v11 = objc_alloc_init(CarDestinationsModeController);
  v15[0] = v10;
  v15[1] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v15, 2));

  return (NSArray *)v12;
}

void sub_1005EE5CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  SearchResult *v8;
  void *v9;
  SearchResult *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = v5;
  if (v11)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", v11));
  }
  else if (v5)
  {
    v8 = [SearchResult alloc];
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItem"));
    v10 = -[SearchResult initWithMapItem:](v8, "initWithMapItem:", v9);

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", v10));
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id sub_1005EE748(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "startSearch:", a2);
}

id sub_1005EEA50(id *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  objc_class *v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  __CFString *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  NSObject *v26;
  _BOOL4 v27;
  id v28;
  objc_class *v29;
  NSString *v30;
  void *v31;
  void *v32;
  void *v33;
  __CFString *v34;
  id v35;
  NSObject *v36;
  __CFString *v37;
  __CFString *v38;
  __CFString *v39;
  __CFString *v40;
  void *v41;
  id v42;
  NSObject *v43;
  __CFString *v44;
  __CFString *v45;
  __CFString *v46;
  __CFString *v47;
  id v48;
  id v49;
  id v50;
  NSObject *v51;
  _BOOL4 v52;
  void *v53;
  id v54;
  id v55;
  NSObject *v56;
  id v57;
  NSObject *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  _BOOL4 v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  __objc2_class *v69;
  uint8_t buf[4];
  __CFString *v72;
  __int16 v73;
  __CFString *v74;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  if (objc_msgSend(a1[4], "isOptionsLowFuel") && !objc_msgSend(a1[4], "origin"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapsSuggestionsController"));
    objc_msgSend(v7, "setAllowLowFuelAlert:", 0);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "results"));
  if (objc_msgSend(v8, "count") == (id)1 || (objc_msgSend(a1[5], "shouldPreserveResults") & 1) != 0)
  {
    v9 = 0;
  }
  else if (objc_msgSend(a1[4], "isOptionsLowFuel"))
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "results"));
    v9 = objc_msgSend(v22, "count") == 0;

  }
  else
  {
    v9 = 1;
  }

  if (!objc_msgSend(a1[5], "shouldPreserveResults"))
    goto LABEL_32;
  v10 = objc_msgSend(v4, "_maps_lastContextOfClass:", objc_opt_class(CarNavigationSearchResultsModeController));
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (!v11)
  {
    v23 = objc_msgSend(v4, "_maps_lastContextOfClass:", objc_opt_class(CarRoutePlanningModeController));
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    v25 = sub_10043364C();
    v26 = objc_claimAutoreleasedReturnValue(v25);
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG);
    if (v24)
    {
      if (!v27)
      {
LABEL_27:

        objc_msgSend(v24, "setSearchSession:", a1[4]);
        goto LABEL_43;
      }
      v28 = v24;
      v29 = (objc_class *)objc_opt_class(v28);
      v30 = NSStringFromClass(v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      if ((objc_opt_respondsToSelector(v28, "accessibilityIdentifier") & 1) != 0)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "performSelector:", "accessibilityIdentifier"));
        v33 = v32;
        if (v32 && !objc_msgSend(v32, "isEqualToString:", v31))
        {
          v34 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v31, v28, v33));

          goto LABEL_26;
        }

      }
      v34 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v31, v28));
LABEL_26:

      *(_DWORD *)buf = 138412290;
      v72 = v34;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Will reuse existing %@ (shouldPreserveResults)", buf, 0xCu);

      goto LABEL_27;
    }
    if (v27)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Should preserve results, but no existing search mode to reuse", buf, 2u);
    }

LABEL_32:
    if (objc_msgSend(v5, "isCarAppSceneHostingNavigation")
      && objc_msgSend(a1[5], "isSearchAlongRoute"))
    {
      v35 = sub_10043364C();
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        if (objc_msgSend(a1[5], "isSearchAlongRoute"))
          v37 = CFSTR("YES");
        else
          v37 = CFSTR("NO");
        v38 = v37;
        if (objc_msgSend(a1[5], "shouldPreserveResults"))
          v39 = CFSTR("YES");
        else
          v39 = CFSTR("NO");
        v40 = v39;
        *(_DWORD *)buf = 138412546;
        v72 = v38;
        v73 = 2112;
        v74 = v40;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Will show results as SAR, we're currently navigating (isSearchAlongRoute:%@, shouldPreserveResults:%@)", buf, 0x16u);

      }
      objc_msgSend(a1[6], "_displaySearchAlongTheRouteForSearchSession:", a1[4]);
      goto LABEL_43;
    }
    if ((objc_msgSend(v5, "isCarAppSceneHostingNavigation") | v9) == 1)
    {
      v42 = sub_10043364C();
      v43 = objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        if (objc_msgSend(v5, "isCarAppSceneHostingNavigation"))
          v44 = CFSTR("YES");
        else
          v44 = CFSTR("NO");
        v45 = v44;
        if (v9)
          v46 = CFSTR("YES");
        else
          v46 = CFSTR("NO");
        v47 = v46;
        *(_DWORD *)buf = 138412546;
        v72 = v45;
        v73 = 2112;
        v74 = v47;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Will show CarSearchResultsModeController (isHostingNavigation:%@, preferListOnly:%@)", buf, 0x16u);

      }
      v48 = objc_msgSend(v4, "_maps_lastContextOfClass:", objc_opt_class(CarSearchResultsModeController));
      v49 = (id)objc_claimAutoreleasedReturnValue(v48);
      v50 = sub_10043364C();
      v51 = objc_claimAutoreleasedReturnValue(v50);
      v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG);
      if (v49)
      {
        if (v52)
        {
          *(_WORD *)buf = 0;
LABEL_69:
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Reuse existing CarSearchResultsModeController", buf, 2u);
          goto LABEL_70;
        }
        goto LABEL_70;
      }
      if (v52)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Create new CarSearchResultsModeController", buf, 2u);
      }
    }
    else
    {
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "results"));
      v54 = objc_msgSend(v53, "count");

      if (v54 == (id)1)
      {
        if (!objc_msgSend(a1[4], "origin")
          && +[UIApplication _maps_isAnySceneForegroundForRole:](UIApplication, "_maps_isAnySceneForegroundForRole:", UIWindowSceneSessionRoleApplication))
        {
          v55 = sub_10043364C();
          v56 = objc_claimAutoreleasedReturnValue(v55);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "Ignoring search with one result that originated on the phone. (until user gets to route routePlanning)", buf, 2u);
          }

          goto LABEL_43;
        }
        v67 = sub_10043364C();
        v68 = objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "Will show CarRoutePlanningModeController, only one search result", buf, 2u);
        }

        v69 = CarRoutePlanningModeController;
        goto LABEL_80;
      }
      v57 = sub_10043364C();
      v58 = objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Will show CarSearchResultsModeController, because there are multiple results and are not currently navigating", buf, 2u);
      }

      v59 = objc_msgSend(v4, "_maps_lastContextOfClass:", objc_opt_class(CarSearchResultsModeController));
      v49 = (id)objc_claimAutoreleasedReturnValue(v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "searchInfo"));
      v61 = objc_msgSend(v60, "selectedIndex");
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "currentResults"));
      v63 = objc_msgSend(v62, "count");

      if (v61 >= v63)
        objc_msgSend(a1[4], "setSelectedResultIndex:", 0);
      v64 = sub_10043364C();
      v51 = objc_claimAutoreleasedReturnValue(v64);
      v65 = os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG);
      if (v49)
      {
        if (v65)
        {
          *(_WORD *)buf = 0;
          goto LABEL_69;
        }
LABEL_70:

        objc_msgSend(v49, "setSearchInfo:", a1[5]);
        v66 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_maps_subarrayToIndex:", objc_msgSend(v4, "indexOfObject:", v49)));
LABEL_81:
        v41 = (void *)v66;

        goto LABEL_82;
      }
      if (v65)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Create new CarSearchResultsModeController", buf, 2u);
      }
    }

    v69 = CarSearchResultsModeController;
LABEL_80:
    v49 = objc_msgSend([v69 alloc], "initWithSearchSession:", a1[4]);
    v66 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "_replaceTopmostSearchResultContexts:withContext:", v4, v49));
    goto LABEL_81;
  }
  v12 = (void *)v11;
  v13 = sub_10043364C();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v15 = v12;
    v16 = (objc_class *)objc_opt_class(v15);
    v17 = NSStringFromClass(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    if ((objc_opt_respondsToSelector(v15, "accessibilityIdentifier") & 1) != 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "performSelector:", "accessibilityIdentifier"));
      v20 = v19;
      if (v19 && !objc_msgSend(v19, "isEqualToString:", v18))
      {
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v18, v15, v20));

        goto LABEL_15;
      }

    }
    v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v18, v15));
LABEL_15:

    *(_DWORD *)buf = 138412290;
    v72 = v21;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Will reuse existing %@ (shouldPreserveResults)", buf, 0xCu);

  }
  objc_msgSend(v12, "setSearchSession:", a1[4]);

LABEL_43:
  v41 = 0;
LABEL_82:

  return v41;
}

id sub_1005EF39C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  CarNavigationSearchResultsModeController *v12;
  id v13;
  uint64_t v14;
  void *v15;
  int v17;
  uint64_t v18;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v6 = objc_opt_class(CarNavigationSearchResultsModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_10043364C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 32);
      v17 = 138412290;
      v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will update existing SAR mode for %@ category", (uint8_t *)&v17, 0xCu);
    }

    v12 = (CarNavigationSearchResultsModeController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
    -[CarNavigationSearchResultsModeController setCategory:](v12, "setCategory:", *(_QWORD *)(a1 + 32));
    v13 = 0;
  }
  else
  {
    if (v10)
    {
      v14 = *(_QWORD *)(a1 + 32);
      v17 = 138412290;
      v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will push SAR mode for %@ category", (uint8_t *)&v17, 0xCu);
    }

    v12 = -[CarNavigationSearchResultsModeController initWithCategory:]([CarNavigationSearchResultsModeController alloc], "initWithCategory:", *(_QWORD *)(a1 + 32));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_replaceTopmostSearchResultContexts:withContext:", v4, v12));

    v13 = objc_msgSend(v15, "copy");
    v4 = v15;
  }

  return v13;
}

id sub_1005EF638(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  CarNavigationSearchResultsModeController *v12;
  id v13;
  void *v14;
  void *v15;
  int v17;
  void *v18;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v6 = objc_opt_class(CarNavigationSearchResultsModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_10043364C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count")));
      v17 = 138412290;
      v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will update existing SAR mode for %@ results", (uint8_t *)&v17, 0xCu);

    }
    v12 = (CarNavigationSearchResultsModeController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
    -[CarNavigationSearchResultsModeController setSearchSession:](v12, "setSearchSession:", *(_QWORD *)(a1 + 40));
    v13 = 0;
  }
  else
  {
    if (v10)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count")));
      v17 = 138412290;
      v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will push SAR mode for %@ results", (uint8_t *)&v17, 0xCu);

    }
    v12 = -[CarNavigationSearchResultsModeController initWithSearchSession:]([CarNavigationSearchResultsModeController alloc], "initWithSearchSession:", *(_QWORD *)(a1 + 40));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_replaceTopmostSearchResultContexts:withContext:", v4, v12));

    v13 = objc_msgSend(v15, "copy");
    v4 = v15;
  }

  return v13;
}

id sub_1005EF908(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  CarNavigationSearchResultsModeController *v12;
  void *v13;
  void *v14;
  int v16;
  void *v17;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v6 = objc_opt_class(CarNavigationSearchResultsModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_10043364C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count")));
      v16 = 138412290;
      v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will update existing SAR mode for %@ results", (uint8_t *)&v16, 0xCu);

    }
    v12 = (CarNavigationSearchResultsModeController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));

    -[CarNavigationSearchResultsModeController setMapItems:selectedItemIndex:](v12, "setMapItems:selectedItemIndex:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v13 = 0;
  }
  else
  {
    if (v10)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count")));
      v16 = 138412290;
      v17 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will push SAR mode for %@ results", (uint8_t *)&v16, 0xCu);

    }
    v12 = -[CarNavigationSearchResultsModeController initWithMapItems:selectedItemIndex:]([CarNavigationSearchResultsModeController alloc], "initWithMapItems:selectedItemIndex:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "arrayByAddingObject:", v12));

  }
  return v13;
}

id sub_1005EFBB8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  CarMapBrowsingModeController *v8;
  id v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  objc_class *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  id v27;
  void *v28;
  __CFString *v29;
  id v30;
  objc_class *v31;
  NSString *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  CarMapBrowsingModeController *v38;
  uint8_t buf[4];
  __CFString *v40;
  __int16 v41;
  void *v42;

  v4 = a3;
  v5 = objc_claimAutoreleasedReturnValue(+[SearchSession currentSearchSession](SearchSession, "currentSearchSession"));
  v6 = (void *)v5;
  if (v5 && v5 != *(_QWORD *)(a1 + 32))
  {
    v7 = sub_10043364C();
    v8 = (CarMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(&v8->super.super, OS_LOG_TYPE_DEBUG))
    {
LABEL_31:
      v28 = 0;
      goto LABEL_32;
    }
    v9 = *(id *)(a1 + 32);
    v10 = v9;
    if (!v9)
    {
      v16 = CFSTR("<nil>");
LABEL_25:

      v29 = v16;
      v30 = v6;
      v31 = (objc_class *)objc_opt_class(v30);
      v32 = NSStringFromClass(v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      if ((objc_opt_respondsToSelector(v30, "accessibilityIdentifier") & 1) != 0)
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "performSelector:", "accessibilityIdentifier"));
        v35 = v34;
        if (v34 && !objc_msgSend(v34, "isEqualToString:", v33))
        {
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v33, v30, v35));

          goto LABEL_30;
        }

      }
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v33, v30));
LABEL_30:

      *(_DWORD *)buf = 138412546;
      v40 = v29;
      v41 = 2112;
      v42 = v36;
      _os_log_impl((void *)&_mh_execute_header, &v8->super.super, OS_LOG_TYPE_DEBUG, "Will not end displaying SearchSession, a new one has come in that we're about to display (try to end: %@, expected incoming: %@)", buf, 0x16u);

      goto LABEL_31;
    }
    v11 = (objc_class *)objc_opt_class(v9);
    v12 = NSStringFromClass(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if ((objc_opt_respondsToSelector(v10, "accessibilityIdentifier") & 1) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "performSelector:", "accessibilityIdentifier"));
      v15 = v14;
      if (v14 && !objc_msgSend(v14, "isEqualToString:", v13))
      {
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v13, v10, v15));

        goto LABEL_10;
      }

    }
    v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v13, v10));
LABEL_10:

    goto LABEL_25;
  }
  v17 = sub_10043364C();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(id *)(a1 + 32);
    v20 = v19;
    if (!v19)
    {
      v26 = CFSTR("<nil>");
      goto LABEL_20;
    }
    v21 = (objc_class *)objc_opt_class(v19);
    v22 = NSStringFromClass(v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    if ((objc_opt_respondsToSelector(v20, "accessibilityIdentifier") & 1) != 0)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "performSelector:", "accessibilityIdentifier"));
      v25 = v24;
      if (v24 && !objc_msgSend(v24, "isEqualToString:", v23))
      {
        v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v23, v20, v25));

        goto LABEL_18;
      }

    }
    v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v23, v20));
LABEL_18:

LABEL_20:
    *(_DWORD *)buf = 138412290;
    v40 = v26;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Will pop down to map browsing to stop displaying SearchSession %@", buf, 0xCu);

  }
  v27 = objc_msgSend(v4, "_maps_lastContextOfClass:", objc_opt_class(CarMapBrowsingModeController));
  v8 = (CarMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(v27);
  if (!v8)
    v8 = objc_alloc_init(CarMapBrowsingModeController);
  v38 = v8;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v38, 1));
LABEL_32:

  return v28;
}

id sub_1005F0028(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  CarIncidentReportModeController *v9;
  _BOOL4 v10;
  id v11;
  void *v12;
  uint8_t v14[16];
  uint8_t buf[16];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v6 = objc_opt_class(CarIncidentReportModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_10043364C();
  v9 = (CarIncidentReportModeController *)objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(&v9->super, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, &v9->super, OS_LOG_TYPE_DEBUG, "Already showing CarIncidentReportModeController", buf, 2u);
    }
    v11 = 0;
  }
  else
  {
    if (v10)
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, &v9->super, OS_LOG_TYPE_DEBUG, "Will push CarIncidentReportModeController", v14, 2u);
    }

    v9 = objc_alloc_init(CarIncidentReportModeController);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_replaceTopmostSearchResultContexts:withContext:", v4, v9));

    v11 = objc_msgSend(v12, "copy");
    v4 = v12;
  }

  return v11;
}

id sub_1005F020C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  CarIncidentReportModeController *v11;
  id v12;
  void *v13;
  uint8_t v15[16];
  uint8_t buf[16];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
  v6 = objc_opt_class(CarIncidentReportModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_10043364C();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Already showing CarIncidentReportModeController", buf, 2u);
    }

    v11 = (CarIncidentReportModeController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
    -[CarIncidentReportModeController setIncidentLayoutItem:report:](v11, "setIncidentLayoutItem:report:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v12 = 0;
  }
  else
  {
    if (v10)
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Will push CarIncidentReportModeController", v15, 2u);
    }

    v11 = objc_alloc_init(CarIncidentReportModeController);
    -[CarIncidentReportModeController setIncidentLayoutItem:report:](v11, "setIncidentLayoutItem:report:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_replaceTopmostSearchResultContexts:withContext:", v4, v11));

    v12 = objc_msgSend(v13, "copy");
    v4 = v13;
  }

  return v12;
}

void sub_1005F04BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005F04D4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  objc_class *v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  __CFString *v21;
  uint8_t buf[4];
  __CFString *v23;

  v7 = a2;
  v8 = objc_opt_class(CarRoutePlanningModeController);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) == 0)
  {
    v9 = objc_opt_class(CarNavigationSearchResultsModeController);
    if ((objc_opt_isKindOfClass(v7, v9) & 1) == 0)
    {
      v10 = objc_opt_class(CarRouteGeniusModeController);
      if ((objc_opt_isKindOfClass(v7, v10) & 1) == 0)
      {
        v11 = objc_opt_class(CarSearchResultsModeController);
        if ((objc_opt_isKindOfClass(v7, v11) & 1) == 0 || *(_BYTE *)(a1 + 40))
        {
          v12 = sub_10043364C();
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
LABEL_16:

            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
            *a4 = 1;
            goto LABEL_17;
          }
          v14 = v7;
          v15 = v14;
          if (!v14)
          {
            v21 = CFSTR("<nil>");
            goto LABEL_15;
          }
          v16 = (objc_class *)objc_opt_class(v14);
          v17 = NSStringFromClass(v16);
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          if ((objc_opt_respondsToSelector(v15, "accessibilityIdentifier") & 1) != 0)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "performSelector:", "accessibilityIdentifier"));
            v20 = v19;
            if (v19 && !objc_msgSend(v19, "isEqualToString:", v18))
            {
              v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v18, v15, v20));

              goto LABEL_13;
            }

          }
          v21 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v18, v15));
LABEL_13:

LABEL_15:
          *(_DWORD *)buf = 138412290;
          v23 = v21;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Found top-most non-search mode %@", buf, 0xCu);

          goto LABEL_16;
        }
      }
    }
  }
LABEL_17:

}

NSArray *__cdecl sub_1005F0710(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  NSObject *v6;
  CarSearchCategoriesModeController *v7;
  void *v8;
  uint8_t v10[16];

  v4 = a3;
  v5 = sub_10043364C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Will push CarSearchModeController.", v10, 2u);
  }

  v7 = objc_alloc_init(CarSearchCategoriesModeController);
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v4, "arrayByAddingObject:", v7));

  return (NSArray *)v8;
}

id sub_1005F0BAC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char isKindOfClass;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  __CFString *v15;
  __CFString *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  CarKeyboardModeController *v22;
  void *v23;
  int v25;
  __CFString *v26;

  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
  v9 = objc_opt_class(CarKeyboardModeController);
  isKindOfClass = objc_opt_isKindOfClass(v8, v9);

  if ((isKindOfClass & 1) != 0)
  {
    v11 = sub_10043364C();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v25) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Will remove existing CarKeyboardModeController", (uint8_t *)&v25, 2u);
    }

    objc_msgSend(v7, "removeLastObject");
  }
  v13 = sub_10043364C();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 48))
      v15 = CFSTR("YES");
    else
      v15 = CFSTR("NO");
    v16 = v15;
    v25 = 138412290;
    v26 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Will push CarKeyboardModeController (animated:%@)", (uint8_t *)&v25, 0xCu);

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
  if ((objc_opt_respondsToSelector(v17, "currentUsageTarget") & 1) != 0)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
    v19 = objc_msgSend(v18, "currentUsageTarget");

  }
  else
  {
    v19 = 0;
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "chromeViewController"));
  objc_msgSend(v21, "captureUserAction:onTarget:", 9019, v19);

  if (a4)
    *a4 = *(_BYTE *)(a1 + 48);
  v22 = -[CarKeyboardModeController initWithRequestedInteractionModel:resultsProvider:]([CarKeyboardModeController alloc], "initWithRequestedInteractionModel:resultsProvider:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "arrayByAddingObject:", v22));

  return v23;
}

NSArray *__cdecl sub_1005F0E04(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  id v8;
  CarSearchCategoriesModeController *v9;
  _BOOL4 v10;
  void *v11;
  uint8_t v13[16];
  uint8_t buf[16];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v4, "lastObject"));
  v6 = objc_opt_class(CarNavigationModeController);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  v8 = sub_10043364C();
  v9 = (CarSearchCategoriesModeController *)objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(&v9->super, OS_LOG_TYPE_DEBUG);
  if ((isKindOfClass & 1) != 0)
  {
    if (v10)
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, &v9->super, OS_LOG_TYPE_DEBUG, "Will push CarSearchCategoriesModeController onto CarNavigationModeController", v13, 2u);
    }

    v9 = objc_alloc_init(CarSearchCategoriesModeController);
    v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v4, "arrayByAddingObject:", v9));
  }
  else
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, &v9->super, OS_LOG_TYPE_DEBUG, "Will not push CarNavigationSearchModeController, current top mode is not CarNavigationModeController", buf, 2u);
    }
    v11 = 0;
  }

  return (NSArray *)v11;
}

id sub_1005F0FA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  CarSearchResultsModeController *v7;
  void *v8;
  uint8_t v10[16];

  v4 = a3;
  v5 = sub_10043364C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Will push BlaBlaSearchResults.", v10, 2u);
  }

  v7 = -[CarSearchResultsModeController initWithCategory:]([CarSearchResultsModeController alloc], "initWithCategory:", *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "arrayByAddingObject:", v7));

  return v8;
}

NSArray *__cdecl sub_1005F1068(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  NSObject *v6;
  CarCollectionListModeController *v7;
  void *v8;
  uint8_t v10[16];

  v4 = a3;
  v5 = sub_10043364C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Will push CarCollectionListModeController.", v10, 2u);
  }

  v7 = objc_alloc_init(CarCollectionListModeController);
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v4, "arrayByAddingObject:", v7));

  return (NSArray *)v8;
}

id sub_1005F11A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  CarSearchResultsModeController *v7;
  void *v8;
  uint8_t v10[16];

  v4 = a3;
  v5 = sub_10043364C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Will push LegacyCarSearchResultsModeController.", v10, 2u);
  }

  v7 = -[CarSearchResultsModeController initWithCollection:]([CarSearchResultsModeController alloc], "initWithCollection:", *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "arrayByAddingObject:", v7));

  return v8;
}

id sub_1005F13A0(id *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  SearchFieldItem *v9;
  SearchFieldItem *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  SearchResult *v16;
  void *v17;
  id v18;
  void *v19;
  CarRoutePlanningModeController *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  const __CFString *v30;
  void *v31;

  v4 = a3;
  v5 = a1[4];
  v6 = objc_opt_class(MapsSuggestionsEntry);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    v7 = a1[4];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "MKMapItem"));
    if (v8)
    {

    }
    else if (objc_msgSend(v7, "type") == (id)10)
    {
      v9 = (SearchFieldItem *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringForKey:", CFSTR("MapsSuggestionsCarPlayEnergyQueryString")));
      v10 = objc_alloc_init(SearchFieldItem);
      -[SearchFieldItem setSearchString:](v10, "setSearchString:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
      v30 = CFSTR("LowFuel");
      v31 = &__kCFBooleanTrue;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
      v13 = objc_msgSend(v11, "processSearchFieldItem:searchInfo:userInfo:", v10, 0, v12);

LABEL_11:
      v19 = 0;
      goto LABEL_19;
    }
    if (objc_msgSend(v7, "type") == (id)12)
    {
      v9 = objc_alloc_init(SearchFieldItem);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringForKey:", CFSTR("MapsSuggestionsAppConnectionValueKey")));
      -[SearchFieldItem setAddressString:](v9, "setAddressString:", v14);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "MKMapItem"));
      if (v15)
      {
        v10 = (SearchFieldItem *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "MKMapItem"));
        if (!v10)
        {
LABEL_10:
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
          v18 = objc_msgSend(v11, "processSearchFieldItem:searchInfo:userInfo:", v9, 0, 0);
          goto LABEL_11;
        }
      }
      else
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URLForKey:", CFSTR("MapsSuggestionsAppConnectionMapItemURL")));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "absoluteString"));
        v28 = objc_msgSend(v27, "length");

        if (v28)
        {
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapItem mapItemsFromURL:options:](MKMapItem, "mapItemsFromURL:options:", v26, 0));
          v10 = (SearchFieldItem *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "firstObject"));

        }
        else
        {
          v10 = 0;
        }

        if (!v10)
          goto LABEL_10;
      }
      v16 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v10);
      -[SearchFieldItem setSearchResult:](v9, "setSearchResult:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue(-[SearchFieldItem searchResult](v9, "searchResult"));
      objc_msgSend(v17, "setHasIncompleteMetadata:", 1);

      goto LABEL_10;
    }

  }
  v20 = -[CarRoutePlanningModeController initWithDestination:userInfo:]([CarRoutePlanningModeController alloc], "initWithDestination:userInfo:", a1[4], a1[5]);
  if (v20)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", CFSTR("isOriginalDestination")));
    v22 = objc_msgSend(v21, "BOOLValue");

    -[CarRoutePlanningModeController setIsOriginalDestination:](v20, "setIsOriginalDestination:", v22);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "_replaceTopmostSearchResultContexts:withContext:", v4, v20));
  }
  else
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", a1[4]));
    if (v23)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
      objc_msgSend(v24, "processItem:userInfo:", a1[4], a1[5]);

    }
    v19 = 0;
  }

LABEL_19:
  return v19;
}

id *sub_1005F1728(id *result, int a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "_scheduleCoordinatedContextChangeWithCarBlock:dashboardMapBlock:smallWidgetsBlock:", result[5], 0, 0);
  return result;
}

id sub_1005F17BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  CarRoutePlanningModeController *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  id v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  __CFString *v22;
  id v23;
  void *v24;
  uint8_t buf[4];
  __CFString *v27;

  v4 = a3;
  v5 = -[CarRoutePlanningModeController initWithExistingRouteLoading]([CarRoutePlanningModeController alloc], "initWithExistingRouteLoading");
  v6 = sub_10043364C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    if (!v8)
    {
LABEL_16:

      v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_replaceTopmostSearchResultContexts:withContext:", v4, v5));
      goto LABEL_21;
    }
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));
    v10 = v9;
    if (!v9)
    {
      v16 = CFSTR("<nil>");
      goto LABEL_15;
    }
    v11 = (objc_class *)objc_opt_class(v9);
    v12 = NSStringFromClass(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if ((objc_opt_respondsToSelector(v10, "accessibilityIdentifier") & 1) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "performSelector:", "accessibilityIdentifier"));
      v15 = v14;
      if (v14 && !objc_msgSend(v14, "isEqualToString:", v13))
      {
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v13, v10, v15));

        goto LABEL_9;
      }

    }
    v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v13, v10));
LABEL_9:

LABEL_15:
    *(_DWORD *)buf = 138412290;
    v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Will push CarRoutePlanningModeController onto %@", buf, 0xCu);

    goto LABEL_16;
  }
  if (v8)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "platformController"));
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "sessionStack"));
    v20 = v19;
    if (v19)
    {
      if (objc_msgSend(v19, "count"))
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "componentsJoinedByString:", CFSTR(", ")));
        v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v20, v21));

      }
      else
      {
        v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v20));
      }
    }
    else
    {
      v22 = CFSTR("<nil>");
    }

    *(_DWORD *)buf = 138412290;
    v27 = v22;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Tried to push routePlanning for existing route, but routePlanning session is not the current session. Session stack: %@", buf, 0xCu);

  }
  v23 = v4;
LABEL_21:
  v24 = v23;

  return v24;
}

NSArray *__cdecl sub_1005F1AA8(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  void *v17;
  uint8_t buf[4];
  __CFString *v20;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v4, "lastObject"));
  v6 = objc_opt_class(CarRoutePlanningModeController);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    v7 = sub_10043364C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
LABEL_13:

      v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray subarrayWithRange:](v4, "subarrayWithRange:", 0, (char *)-[NSArray count](v4, "count") - 1));
      goto LABEL_14;
    }
    v9 = v5;
    v10 = v9;
    if (!v9)
    {
      v16 = CFSTR("<nil>");
      goto LABEL_12;
    }
    v11 = (objc_class *)objc_opt_class(v9);
    v12 = NSStringFromClass(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if ((objc_opt_respondsToSelector(v10, "accessibilityIdentifier") & 1) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "performSelector:", "accessibilityIdentifier"));
      v15 = v14;
      if (v14 && !objc_msgSend(v14, "isEqualToString:", v13))
      {
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v13, v10, v15));

        goto LABEL_9;
      }

    }
    v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v13, v10));
LABEL_9:

LABEL_12:
    *(_DWORD *)buf = 138412290;
    v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Will pop topmost CarRoutePlanningModeController %@", buf, 0xCu);

    goto LABEL_13;
  }
  v17 = 0;
LABEL_14:

  return (NSArray *)v17;
}

id sub_1005F21C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  char *v11;
  char *v12;
  __objc2_class **v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  objc_class *v19;
  NSString *v20;
  char *v21;
  id v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  char *v26;
  id v27;
  id v28;
  id v29;
  char v30;
  id v31;
  NSObject *v32;
  id v33;
  objc_class *v34;
  NSString *v35;
  void *v36;
  void *v37;
  void *v38;
  char *v39;
  const __CFString *v40;
  id v41;
  NSObject *v42;
  id v43;
  void *v44;
  __CFString *v45;
  objc_class *v46;
  NSString *v47;
  void *v48;
  void *v49;
  void *v50;
  const __CFString *v51;
  const __CFString *v52;
  __CFString *v53;
  __CFString *v54;
  const __CFString *v55;
  __CFString *v56;
  __CFString *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  char isKindOfClass;
  CarMapBrowsingModeController *v62;
  CarMapBrowsingModeController *v63;
  char *v65;
  char *v66;
  uint8_t buf[4];
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const __CFString *v72;
  __int16 v73;
  __CFString *v74;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "platformController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentSession"));

  v8 = objc_opt_class(NavigationSession);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    v9 = v7;
  else
    v9 = 0;
  v10 = v9;

  if (v10)
  {
    v11 = (char *)objc_msgSend(v10, "navigationType");
    v12 = (char *)objc_msgSend(v10, "currentTransportType");
    if (objc_msgSend(v10, "isCarNavigationCompatible"))
    {
      +[CarSearchCategoriesModeController prepareNearbySAR](CarSearchCategoriesModeController, "prepareNearbySAR");
      v13 = off_101196098;
    }
    else
    {
      v13 = off_101196080;
    }
    v28 = objc_msgSend(v4, "_maps_lastContextOfClass:", objc_opt_class(*v13));
    v29 = (id)objc_claimAutoreleasedReturnValue(v28);
    if (!v29)
    {
      v29 = objc_alloc_init(*v13);
      if (!v29)
      {
        v30 = 1;
LABEL_30:
        v41 = sub_10043364C();
        v42 = objc_claimAutoreleasedReturnValue(v41);
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
LABEL_49:

          v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_maps_subarrayToIndex:", objc_msgSend(v4, "indexOfObject:", v29)));
LABEL_62:

          goto LABEL_63;
        }
        v43 = v29;
        v44 = v43;
        if ((v30 & 1) != 0)
        {
          v45 = CFSTR("<nil>");
LABEL_39:

          if ((unint64_t)(v11 - 1) > 3)
            v51 = CFSTR("None");
          else
            v51 = *(&off_1011BDB80 + (_QWORD)(v11 - 1));
          if ((unint64_t)(v12 - 1) > 4)
            v52 = CFSTR("Undefined");
          else
            v52 = *(&off_1011BDBA0 + (_QWORD)(v12 - 1));
          if (*(_BYTE *)(a1 + 32))
            v53 = CFSTR("YES");
          else
            v53 = CFSTR("NO");
          v54 = v53;
          *(_DWORD *)buf = 138413058;
          v68 = (const char *)v45;
          v69 = 2112;
          v70 = (const char *)v51;
          v71 = 2112;
          v72 = v52;
          v73 = 2112;
          v74 = v54;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Will pop to existing %@ (navigationType:%@, transportType:%@, animated:%@)", buf, 0x2Au);

          goto LABEL_49;
        }
        v66 = v12;
        v46 = (objc_class *)objc_opt_class(v43);
        v47 = NSStringFromClass(v46);
        v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
        if ((objc_opt_respondsToSelector(v44, "accessibilityIdentifier") & 1) != 0)
        {
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "performSelector:", "accessibilityIdentifier"));
          v50 = v49;
          if (v49 && !objc_msgSend(v49, "isEqualToString:", v48))
          {
            v45 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v48, v44, v50));

            goto LABEL_38;
          }

        }
        v45 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v48, v44));
LABEL_38:

        v12 = v66;
        goto LABEL_39;
      }
    }
    if ((objc_msgSend(v4, "containsObject:", v29) & 1) != 0)
    {
      v30 = 0;
      goto LABEL_30;
    }
    v31 = sub_10043364C();
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
LABEL_58:

      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 2));
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
      v60 = objc_opt_class(CarMapBrowsingModeController);
      isKindOfClass = objc_opt_isKindOfClass(v59, v60);

      if ((isKindOfClass & 1) != 0)
        v62 = (CarMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
      else
        v62 = objc_opt_new(CarMapBrowsingModeController);
      v63 = v62;
      objc_msgSend(v58, "addObject:", v62);

      objc_msgSend(v58, "addObject:", v29);
      v27 = objc_msgSend(v58, "copy");

      goto LABEL_62;
    }
    v65 = v12;
    v33 = v29;
    v34 = (objc_class *)objc_opt_class(v33);
    v35 = NSStringFromClass(v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    if ((objc_opt_respondsToSelector(v33, "accessibilityIdentifier") & 1) != 0)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "performSelector:", "accessibilityIdentifier"));
      v38 = v37;
      if (v37 && !objc_msgSend(v37, "isEqualToString:", v36))
      {
        v39 = (char *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v36, v33, v38));

        goto LABEL_27;
      }

    }
    v39 = (char *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v36, v33));
LABEL_27:

    if ((unint64_t)(v11 - 1) > 3)
      v40 = CFSTR("None");
    else
      v40 = *(&off_1011BDB80 + (_QWORD)(v11 - 1));
    if ((unint64_t)(v65 - 1) > 4)
      v55 = CFSTR("Undefined");
    else
      v55 = *(&off_1011BDBA0 + (_QWORD)(v65 - 1));
    if (*(_BYTE *)(a1 + 32))
      v56 = CFSTR("YES");
    else
      v56 = CFSTR("NO");
    v57 = v56;
    *(_DWORD *)buf = 138413058;
    v68 = v39;
    v69 = 2112;
    v70 = (const char *)v40;
    v71 = 2112;
    v72 = v55;
    v73 = 2112;
    v74 = v57;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Will push %@ onto CarMapBrowsingModeController (navigationType:%@, transportType:%@, animated:%@)", buf, 0x2Au);

    goto LABEL_58;
  }
  v14 = sub_10043364C();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "platformController"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "currentSession"));
    v19 = (objc_class *)objc_opt_class(v18);
    v20 = NSStringFromClass(v19);
    v21 = (char *)objc_claimAutoreleasedReturnValue(v20);
    *(_DWORD *)buf = 138412290;
    v68 = v21;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Coordinator tried to display navigation, but current session was of class: %@", buf, 0xCu);

  }
  v22 = sub_1004318FC();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v68 = "-[CarChromeModeCoordinator _displayNavigationAnimated:]_block_invoke";
    v69 = 2080;
    v70 = "CarChromeModeCoordinator.m";
    v71 = 1024;
    LODWORD(v72) = 1074;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
  }

  if (sub_100A70734())
  {
    v24 = sub_1004318FC();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
      *(_DWORD *)buf = 138412290;
      v68 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

    }
  }
  v27 = v4;
LABEL_63:

  return v27;
}

id sub_1005F28D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  char *v13;
  char *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  __objc2_class **v22;
  id v23;
  NSObject *v24;
  id v25;
  NSObject *v26;
  id v27;
  NSObject *v28;
  char *v29;
  id v30;
  id v31;
  NSObject *v32;
  id v33;
  char v34;
  id v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  char *v39;
  id v40;
  void *v41;
  __CFString *v42;
  id v43;
  NSObject *v44;
  id v45;
  objc_class *v46;
  NSString *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  const __CFString *v54;
  objc_class *v55;
  NSString *v56;
  void *v57;
  void *v58;
  void *v59;
  const __CFString *v60;
  const __CFString *v61;
  __CFString *v62;
  __CFString *v63;
  const __CFString *v64;
  __CFString *v65;
  __CFString *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  char isKindOfClass;
  CarMapWidgetMapBrowsingModeController *v71;
  CarMapWidgetMapBrowsingModeController *v72;
  id v74;
  NSObject *v75;
  id v76;
  NSObject *v77;
  char *v78;
  char *v79;
  id v80;
  id v81;
  id v82;
  uint8_t buf[4];
  const char *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  _BYTE v88[18];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "platformController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentSession"));

  v10 = objc_opt_class(NavigationSession);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
    v11 = v9;
  else
    v11 = 0;
  v12 = v11;

  if (v12)
  {
    v13 = (char *)objc_msgSend(v12, "navigationType");
    v14 = (char *)objc_msgSend(v12, "currentTransportType");
    if (objc_msgSend(v12, "isCarNavigationCompatible"))
    {
      v15 = v5;
      v16 = objc_opt_class(CarChromeViewController);
      if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
        v17 = v15;
      else
        v17 = 0;
      v18 = v17;

      if (!v18)
      {
        v74 = sub_1004318FC();
        v75 = objc_claimAutoreleasedReturnValue(v74);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v84 = "-[CarChromeModeCoordinator _displayNavigationAnimated:]_block_invoke";
          v85 = 2080;
          v86 = "CarChromeModeCoordinator.m";
          v87 = 1024;
          *(_DWORD *)v88 = 1128;
          *(_WORD *)&v88[4] = 2080;
          *(_QWORD *)&v88[6] = "carChromeViewController != nil";
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", buf, 0x26u);
        }

        if (sub_100A70734())
        {
          v76 = sub_1004318FC();
          v77 = objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
          {
            v78 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
            *(_DWORD *)buf = 138412290;
            v84 = v78;
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

          }
        }
      }
      if (objc_msgSend(v18, "sceneType") == (id)7)
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "view"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "window"));
        v21 = objc_msgSend(v20, "_car_hybridInstrumentClusterLayout");

        if (v21)
          v22 = off_101196078;
        else
          v22 = off_1011960C8;
      }
      else
      {
        v22 = off_101196090;
      }
      v35 = objc_msgSend(v6, "_maps_lastContextOfClass:", objc_opt_class(*v22));
      v33 = (id)objc_claimAutoreleasedReturnValue(v35);
      if (v33)
      {

        goto LABEL_31;
      }
      v33 = objc_alloc_init(*v22);

      if (v33)
      {
LABEL_31:
        if ((objc_msgSend(v6, "containsObject:", v33) & 1) != 0)
        {
          v34 = 0;
LABEL_33:
          v36 = sub_1004335DC();
          v37 = objc_claimAutoreleasedReturnValue(v36);
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
LABEL_60:

            v30 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_maps_subarrayToIndex:", objc_msgSend(v6, "indexOfObject:", v33)));
LABEL_73:

            goto LABEL_74;
          }
          v81 = v5;
          v38 = a1;
          v39 = v14;
          v40 = v33;
          v41 = v40;
          v80 = v6;
          if ((v34 & 1) != 0)
          {
            v42 = CFSTR("<nil>");
LABEL_50:

            if ((unint64_t)(v13 - 1) > 3)
              v60 = CFSTR("None");
            else
              v60 = *(&off_1011BDB80 + (_QWORD)(v13 - 1));
            if ((unint64_t)(v39 - 1) > 4)
              v61 = CFSTR("Undefined");
            else
              v61 = *(&off_1011BDBA0 + (_QWORD)(v39 - 1));
            if (*(_BYTE *)(v38 + 32))
              v62 = CFSTR("YES");
            else
              v62 = CFSTR("NO");
            v63 = v62;
            *(_DWORD *)buf = 138413058;
            v84 = (const char *)v42;
            v85 = 2112;
            v86 = (const char *)v60;
            v87 = 2112;
            *(_QWORD *)v88 = v61;
            *(_WORD *)&v88[8] = 2112;
            *(_QWORD *)&v88[10] = v63;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Will pop to existing %@ (navigationType:%@, transportType:%@, animated:%@)", buf, 0x2Au);

            v6 = v80;
            v5 = v81;
            goto LABEL_60;
          }
          v55 = (objc_class *)objc_opt_class(v40);
          v56 = NSStringFromClass(v55);
          v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
          if ((objc_opt_respondsToSelector(v41, "accessibilityIdentifier") & 1) != 0)
          {
            v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "performSelector:", "accessibilityIdentifier"));
            v59 = v58;
            if (v58 && !objc_msgSend(v58, "isEqualToString:", v57))
            {
              v42 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v57, v41, v59));

              goto LABEL_49;
            }

          }
          v42 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v57, v41));
LABEL_49:

          goto LABEL_50;
        }
        v43 = sub_1004335DC();
        v44 = objc_claimAutoreleasedReturnValue(v43);
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
LABEL_69:

          v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 2));
          v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
          v69 = objc_opt_class(CarMapWidgetMapBrowsingModeController);
          isKindOfClass = objc_opt_isKindOfClass(v68, v69);

          if ((isKindOfClass & 1) != 0)
            v71 = (CarMapWidgetMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
          else
            v71 = objc_opt_new(CarMapWidgetMapBrowsingModeController);
          v72 = v71;
          objc_msgSend(v67, "addObject:", v71);

          objc_msgSend(v67, "addObject:", v33);
          v30 = objc_msgSend(v67, "copy");

          goto LABEL_73;
        }
        v79 = v13;
        v45 = v33;
        v46 = (objc_class *)objc_opt_class(v45);
        v47 = NSStringFromClass(v46);
        v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
        v82 = v5;
        if ((objc_opt_respondsToSelector(v45, "accessibilityIdentifier") & 1) != 0)
        {
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "performSelector:", "accessibilityIdentifier"));
          v50 = v49;
          if (v49 && !objc_msgSend(v49, "isEqualToString:", v48))
          {
            v51 = a1;
            v52 = v14;
            v53 = (char *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v48, v45, v50));

            goto LABEL_42;
          }

        }
        v51 = a1;
        v52 = v14;
        v53 = (char *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v48, v45));
LABEL_42:

        if ((unint64_t)(v79 - 1) > 3)
          v54 = CFSTR("None");
        else
          v54 = *(&off_1011BDB80 + (_QWORD)(v79 - 1));
        if ((unint64_t)(v52 - 1) > 4)
          v64 = CFSTR("Undefined");
        else
          v64 = *(&off_1011BDBA0 + (_QWORD)(v52 - 1));
        if (*(_BYTE *)(v51 + 32))
          v65 = CFSTR("YES");
        else
          v65 = CFSTR("NO");
        v66 = v65;
        *(_DWORD *)buf = 138413058;
        v84 = v53;
        v85 = 2112;
        v86 = (const char *)v54;
        v87 = 2112;
        *(_QWORD *)v88 = v64;
        *(_WORD *)&v88[8] = 2112;
        *(_QWORD *)&v88[10] = v66;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Will push %@ onto CarMapWidgetMapBrowsingModeController (navigationType:%@, transportType:%@, animated:%@)", buf, 0x2Au);

        v5 = v82;
        goto LABEL_69;
      }
    }
    else
    {
      v31 = sub_1004335DC();
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Mode coordinator will not create navigation incompatible mode for the map widget, because we don't support that yet.", buf, 2u);
      }

      v33 = 0;
    }
    v34 = 1;
    goto LABEL_33;
  }
  v23 = sub_1004335DC();
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Tried to display navigation mode, but currentSession was not a navigation session.", buf, 2u);
  }

  v25 = sub_1004318FC();
  v26 = objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v84 = "-[CarChromeModeCoordinator _displayNavigationAnimated:]_block_invoke";
    v85 = 2080;
    v86 = "CarChromeModeCoordinator.m";
    v87 = 1024;
    *(_DWORD *)v88 = 1118;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
  }

  if (sub_100A70734())
  {
    v27 = sub_1004318FC();
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
      *(_DWORD *)buf = 138412290;
      v84 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

    }
  }
  v30 = v6;
LABEL_74:

  return v30;
}

id sub_1005F3188(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  __objc2_class **v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  objc_class *v19;
  NSString *v20;
  char *v21;
  id v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  char *v26;
  id v27;
  unsigned __int8 v28;
  id v29;
  NSObject *v30;
  _BOOL4 v31;
  id v32;
  void *v33;
  objc_class *v34;
  NSString *v35;
  void *v36;
  void *v37;
  void *v38;
  __CFString *v39;
  id v40;
  void *v41;
  objc_class *v42;
  NSString *v43;
  void *v44;
  void *v45;
  void *v46;
  __CFString *v47;
  __CFString *v48;
  __CFString *v49;
  __CFString *v50;
  __CFString *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  char isKindOfClass;
  CarSmallWidgetBrowsingModeController *v56;
  CarSmallWidgetBrowsingModeController *v57;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "platformController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentSession"));

  v8 = objc_opt_class(NavigationSession);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    v9 = v7;
  else
    v9 = 0;
  v10 = v9;

  if (v10)
  {
    if (objc_msgSend(v10, "isCarNavigationCompatible"))
    {
      v11 = off_1011960C8;
      v12 = objc_msgSend(v4, "_maps_lastContextOfClass:", objc_opt_class(CarSmallWidgetNavigationModeController));
      v13 = (id)objc_claimAutoreleasedReturnValue(v12);
      if (v13)
        goto LABEL_19;
    }
    else
    {
      v11 = off_1011960C0;
    }
    v13 = objc_alloc_init(*v11);
LABEL_19:
    v28 = objc_msgSend(v4, "containsObject:", v13);
    v29 = sub_10043379C();
    v30 = objc_claimAutoreleasedReturnValue(v29);
    v31 = os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
    if ((v28 & 1) != 0)
    {
      if (!v31)
      {
LABEL_41:

        v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_maps_subarrayToIndex:", objc_msgSend(v4, "indexOfObject:", v13)));
LABEL_51:

        goto LABEL_52;
      }
      v32 = v13;
      v33 = v32;
      if (!v32)
      {
        v39 = CFSTR("<nil>");
        goto LABEL_37;
      }
      v34 = (objc_class *)objc_opt_class(v32);
      v35 = NSStringFromClass(v34);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      if ((objc_opt_respondsToSelector(v33, "accessibilityIdentifier") & 1) != 0)
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "performSelector:", "accessibilityIdentifier"));
        v38 = v37;
        if (v37 && !objc_msgSend(v37, "isEqualToString:", v36))
        {
          v39 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v36, v33, v38));

          goto LABEL_27;
        }

      }
      v39 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v36, v33));
LABEL_27:

LABEL_37:
      if (*(_BYTE *)(a1 + 32))
        v48 = CFSTR("YES");
      else
        v48 = CFSTR("NO");
      v49 = v48;
      *(_DWORD *)buf = 138412546;
      v60 = (const char *)v39;
      v61 = 2112;
      v62 = (const char *)v49;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Will pop to existing %@ (animated:%@)", buf, 0x16u);

      goto LABEL_41;
    }
    if (!v31)
    {
LABEL_47:

      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 2));
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
      v54 = objc_opt_class(CarSmallWidgetBrowsingModeController);
      isKindOfClass = objc_opt_isKindOfClass(v53, v54);

      if ((isKindOfClass & 1) != 0)
        v56 = (CarSmallWidgetBrowsingModeController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
      else
        v56 = objc_alloc_init(CarSmallWidgetBrowsingModeController);
      v57 = v56;
      objc_msgSend(v52, "addObject:", v56);

      objc_msgSend(v52, "addObject:", v13);
      v27 = objc_msgSend(v52, "copy");

      goto LABEL_51;
    }
    v40 = v13;
    v41 = v40;
    if (!v40)
    {
      v47 = CFSTR("<nil>");
      goto LABEL_43;
    }
    v42 = (objc_class *)objc_opt_class(v40);
    v43 = NSStringFromClass(v42);
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    if ((objc_opt_respondsToSelector(v41, "accessibilityIdentifier") & 1) != 0)
    {
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "performSelector:", "accessibilityIdentifier"));
      v46 = v45;
      if (v45 && !objc_msgSend(v45, "isEqualToString:", v44))
      {
        v47 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v44, v41, v46));

        goto LABEL_35;
      }

    }
    v47 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v44, v41));
LABEL_35:

LABEL_43:
    if (*(_BYTE *)(a1 + 32))
      v50 = CFSTR("YES");
    else
      v50 = CFSTR("NO");
    v51 = v50;
    *(_DWORD *)buf = 138412546;
    v60 = (const char *)v47;
    v61 = 2112;
    v62 = (const char *)v51;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Will push %@ onto CarSmallWidgetBrowsingModeController (animated:%@)", buf, 0x16u);

    goto LABEL_47;
  }
  v14 = sub_10043379C();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "platformController"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "currentSession"));
    v19 = (objc_class *)objc_opt_class(v18);
    v20 = NSStringFromClass(v19);
    v21 = (char *)objc_claimAutoreleasedReturnValue(v20);
    *(_DWORD *)buf = 138412290;
    v60 = v21;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Coordinator tried to display navigation, but current session was of class: %@", buf, 0xCu);

  }
  v22 = sub_1004318FC();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v60 = "-[CarChromeModeCoordinator _displayNavigationAnimated:]_block_invoke";
    v61 = 2080;
    v62 = "CarChromeModeCoordinator.m";
    v63 = 1024;
    v64 = 1176;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
  }

  if (sub_100A70734())
  {
    v24 = sub_1004318FC();
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
      *(_DWORD *)buf = 138412290;
      v60 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

    }
  }
  v27 = v4;
LABEL_52:

  return v27;
}

NSArray *__cdecl sub_1005F37BC(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  _BYTE *v5;
  void *v6;
  void *v7;
  _BYTE *v8;
  id v9;
  NSObject *v10;
  CarMapBrowsingModeController *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v17;
  void *v18;
  CarMapBrowsingModeController *v19;

  v4 = a3;
  v5 = -[NSArray count](v4, "count");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", &stru_1011BD9E0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray filteredArrayUsingPredicate:](v4, "filteredArrayUsingPredicate:", v6));

  v8 = objc_msgSend(v7, "count");
  if (!objc_msgSend(v7, "count"))
  {
    v9 = sub_10043364C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v17) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Didn't find CarMapBrowsingModeController in the mode stack, creating a fresh one.", (uint8_t *)&v17, 2u);
    }

    v11 = objc_alloc_init(CarMapBrowsingModeController);
    v19 = v11;
    v12 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));

    v7 = (void *)v12;
  }
  v13 = sub_10043364C();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5 - v8));
    v17 = 138412290;
    v18 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Will end navigation by removing %@ navigation-related contexts", (uint8_t *)&v17, 0xCu);

  }
  return (NSArray *)v7;
}

BOOL sub_1005F3968(id a1, ChromeContext *a2, NSDictionary *a3)
{
  ChromeContext *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;

  v3 = a2;
  v5 = objc_opt_class(CarNavigationModeController, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0
    || (v7 = objc_opt_class(CarIncompatibleNavigationModeController, v6),
        (objc_opt_isKindOfClass(v3, v7) & 1) != 0)
    || (v9 = objc_opt_class(CarNavigationSearchResultsModeController, v8),
        (objc_opt_isKindOfClass(v3, v9) & 1) != 0))
  {
    v11 = 0;
  }
  else
  {
    v13 = objc_opt_class(CarDestinationsModeController, v10);
    v11 = objc_opt_isKindOfClass(v3, v13) ^ 1;
  }

  return v11 & 1;
}

NSArray *__cdecl sub_1005F3A08(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  char isKindOfClass;
  CarMapWidgetMapBrowsingModeController *v10;
  CarMapWidgetMapBrowsingModeController **v11;
  id v12;
  NSObject *v13;
  void *v14;
  __int16 v16;
  CarMapWidgetMapBrowsingModeController *v17;
  CarMapWidgetMapBrowsingModeController *v18;

  v4 = a3;
  v5 = sub_1004335DC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Will end navigation by moving to CarMapWidgetMapBrowsingModeController.", (uint8_t *)&v16, 2u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
  v8 = objc_opt_class(CarMapWidgetMapBrowsingModeController);
  isKindOfClass = objc_opt_isKindOfClass(v7, v8);

  if ((isKindOfClass & 1) != 0)
  {
    v10 = (CarMapWidgetMapBrowsingModeController *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
    v18 = v10;
    v11 = &v18;
  }
  else
  {
    v12 = sub_1004335DC();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Didn't find CarMapWidgetMapBrowsingModeController in the mode stack, creating a fresh one.", (uint8_t *)&v16, 2u);
    }

    v10 = objc_alloc_init(CarMapWidgetMapBrowsingModeController);
    v17 = v10;
    v11 = &v17;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v11, 1));

  return (NSArray *)v14;
}

NSArray *__cdecl sub_1005F3B74(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  char isKindOfClass;
  CarSmallWidgetBrowsingModeController *v10;
  CarSmallWidgetBrowsingModeController **v11;
  id v12;
  NSObject *v13;
  void *v14;
  __int16 v16;
  CarSmallWidgetBrowsingModeController *v17;
  CarSmallWidgetBrowsingModeController *v18;

  v4 = a3;
  v5 = sub_10043379C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Will end navigation by moving to CarSmallWidgetBrowsingModeController.", (uint8_t *)&v16, 2u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
  v8 = objc_opt_class(CarSmallWidgetBrowsingModeController);
  isKindOfClass = objc_opt_isKindOfClass(v7, v8);

  if ((isKindOfClass & 1) != 0)
  {
    v10 = (CarSmallWidgetBrowsingModeController *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](v4, "firstObject"));
    v18 = v10;
    v11 = &v18;
  }
  else
  {
    v12 = sub_10043379C();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Didn't find CarSmallWidgetBrowsingModeController in the mode stack, creating a fresh one.", (uint8_t *)&v16, 2u);
    }

    v10 = objc_alloc_init(CarSmallWidgetBrowsingModeController);
    v17 = v10;
    v11 = &v17;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v11, 1));

  return (NSArray *)v14;
}

void sub_1005F3DA0(id a1, ChromeViewController *a2)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  void *v5;
  ChromeViewController *v6;

  v6 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v6, "topContext"));
  v3 = objc_opt_class(CarNavigationModeController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  if ((isKindOfClass & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v6, "topContext"));
    objc_msgSend(v5, "setCameraStyle:animated:", 1, 1);

  }
}

void sub_1005F3E1C(id a1, ChromeViewController *a2)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  void *v5;
  uint64_t v6;
  char v7;
  ChromeViewController *v8;

  v8 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v8, "topContext"));
  v3 = objc_opt_class(CarMapWidgetNavigationModeController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v8, "topContext"));
  if ((isKindOfClass & 1) != 0)
    goto LABEL_4;
  v6 = objc_opt_class(CarHybridInstrumentClusterNavigationModeController);
  v7 = objc_opt_isKindOfClass(v5, v6);

  if ((v7 & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v8, "topContext"));
LABEL_4:
    objc_msgSend(v5, "setCameraStyle:animated:", 1, 1);

  }
}

void sub_1005F3F90(id a1, ChromeViewController *a2)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  void *v5;
  ChromeViewController *v6;

  v6 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v6, "topContext"));
  v3 = objc_opt_class(CarNavigationModeController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  if ((isKindOfClass & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v6, "topContext"));
    objc_msgSend(v5, "setCameraStyle:animated:", 2, 1);

  }
}

void sub_1005F400C(id a1, ChromeViewController *a2)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  void *v5;
  uint64_t v6;
  char v7;
  ChromeViewController *v8;

  v8 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v8, "topContext"));
  v3 = objc_opt_class(CarMapWidgetNavigationModeController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v8, "topContext"));
  if ((isKindOfClass & 1) != 0)
    goto LABEL_4;
  v6 = objc_opt_class(CarHybridInstrumentClusterNavigationModeController);
  v7 = objc_opt_isKindOfClass(v5, v6);

  if ((v7 & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[ChromeViewController topContext](v8, "topContext"));
LABEL_4:
    objc_msgSend(v5, "setCameraStyle:animated:", 2, 1);

  }
}

NSArray *__cdecl sub_1005F4104(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  CarSharedTripsContext *v5;
  void *v6;

  v4 = a3;
  v5 = objc_alloc_init(CarSharedTripsContext);
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v4, "arrayByAddingObject:", v5));

  return (NSArray *)v6;
}

id sub_1005F4200(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  CarSharedTripsContext *v5;
  void *v6;

  v4 = a3;
  v5 = -[SharedTripsContext initWithInitialSelectedSharedTrip:]([CarSharedTripsContext alloc], "initWithInitialSelectedSharedTrip:", *(_QWORD *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "arrayByAddingObject:", v5));

  return v6;
}

NSArray *__cdecl sub_1005F42AC(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  CarNavigationShareTripModeController *v9;
  NSArray *v10;

  v4 = a3;
  v5 = objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v5, "platformController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentSession"));

  v8 = objc_opt_class(NavigationSession);
  LOBYTE(v5) = objc_opt_isKindOfClass(v7, v8);

  if ((v5 & 1) != 0 && v7)
  {
    v9 = objc_alloc_init(CarNavigationShareTripModeController);
    v10 = (NSArray *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v4, "arrayByAddingObject:", v9));

  }
  else
  {
    v10 = v4;
  }

  return v10;
}

void sub_1005F4464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005F4484(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  v1 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "keyboardMode"));
  objc_msgSend(v1, "popFromContext:", v2);

}

NSArray *__cdecl sub_1005F4664(id a1, ChromeViewController *a2, NSArray *a3, BOOL *a4)
{
  NSArray *v4;
  void *v5;
  unsigned int v6;
  id v7;
  NSObject *v8;
  const char *v9;
  id v10;
  id v11;
  NSArray *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  NSArray *v16;
  int v18;
  uint64_t v19;
  __int16 v20;
  NSUInteger v21;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
  v6 = objc_msgSend(v5, "isCurrentlyConnectedToAnyCarScene");

  if (v6)
  {
    v7 = sub_10043364C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18) = 0;
      v9 = "Currently connected, will not purge contexts.";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)&v18, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v10 = -[NSArray indexOfObjectPassingTest:](v4, "indexOfObjectPassingTest:", &stru_1011BDB60);
  if (v10 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = sub_10043364C();
    v8 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18) = 0;
      v9 = "No contexts invalid after disconnect.";
      goto LABEL_7;
    }
LABEL_8:

    v12 = v4;
    goto LABEL_15;
  }
  if ((unint64_t)v10 <= 1)
    v13 = 1;
  else
    v13 = (uint64_t)v10;
  v14 = sub_10043364C();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v18 = 134218240;
    v19 = v13;
    v20 = 2048;
    v21 = -[NSArray count](v4, "count");
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%lu/%lu contexts valid after disconnect.", (uint8_t *)&v18, 0x16u);
  }

  v12 = (NSArray *)objc_claimAutoreleasedReturnValue(-[NSArray subarrayWithRange:](v4, "subarrayWithRange:", 0, v13));
LABEL_15:
  v16 = v12;

  return v16;
}

BOOL sub_1005F4808(id a1, CarChromeContext *a2, unint64_t a3, BOOL *a4)
{
  CarChromeContext *v5;
  BOOL v6;

  v5 = a2;
  if ((objc_opt_respondsToSelector(v5, "invalidAfterDisconnect") & 1) != 0
    && -[CarChromeContext invalidAfterDisconnect](v5, "invalidAfterDisconnect"))
  {
    v6 = 1;
    *a4 = 1;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1005F751C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "window"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rootViewController"));
  if (v3)
  {
    v4 = (void *)v3;
    v5 = objc_msgSend(*(id *)(a1 + 32), "hasCardFinishedTransitioning");

    if (!v5)
      return;
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "window"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rootViewController"));
    sub_1009C5D44(v6);

  }
}

void sub_1005F9450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  id *v40;

  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005F9500(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_callDestination");

  v5 = objc_loadWeakRetained(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "placeCardDidDismissAlert:", v4);

}

void sub_1005F9574(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "placeCardDidSelectHandoff:", v4);

  v7 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "delegate"));
  v6 = objc_loadWeakRetained(v1);
  objc_msgSend(v5, "placeCardDidDismissAlert:", v6);

}

void sub_1005F9618(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v2, "placeCardDidDismissAlert:", v3);

}

void sub_1005F9678(uint64_t a1)
{
  id *v2;
  void *v3;
  id v4;
  id WeakRetained;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v3, "placeCard:didPresentAlert:", v4, *(_QWORD *)(a1 + 32));

}

void sub_1005F98A0(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "callPhoneNumber:completion:", v1, &stru_1011BDBD8);

}

void sub_1005F98F8(id a1, BOOL a2)
{
  _BOOL4 v2;
  id v3;
  NSObject *v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  __CFString *v8;

  v2 = a2;
  v3 = sub_10043364C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = CFSTR("NO");
    if (v2)
      v5 = CFSTR("YES");
    v6 = v5;
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CarPlaceCard called mapItem with success: %@", (uint8_t *)&v7, 0xCu);

  }
}

void sub_1005FA5E8(id a1)
{
  UGCThirdPartyPhotoSharingPreferencesManager *v1;
  void *v2;

  v1 = objc_alloc_init(UGCThirdPartyPhotoSharingPreferencesManager);
  v2 = (void *)qword_1014D2AD8;
  qword_1014D2AD8 = (uint64_t)v1;

}

void sub_1005FA74C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id buf[2];

  v2 = sub_1005FA9A4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fetching third party photo sharing preferences", (uint8_t *)buf, 2u);
  }

  v4 = objc_alloc_init((Class)GEORPFeedbackRequestParameters);
  v5 = objc_alloc_init((Class)GEORPFeedbackQueryParameters);
  objc_msgSend(v4, "setQueryParameters:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "queryParameters"));
  objc_msgSend(v6, "addFeedbackComponentType:", 6);

  v7 = objc_alloc_init((Class)GEORPFeedbackUserInfo);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GEORPUserCredentials _credentialsForPrimaryICloudAccount](GEORPUserCredentials, "_credentialsForPrimaryICloudAccount"));
  objc_msgSend(v7, "setUserCredentials:", v8);

  objc_initWeak(buf, *(id *)(a1 + 32));
  v9 = objc_alloc((Class)GEORPFeedbackRequest);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "defaultTraits"));
  v12 = objc_msgSend(v9, "initWithFeedbackRequestParameters:userInfo:traits:", v4, v7, v11);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "defaultTraits"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ticketForFeedbackRequest:traits:", v12, v15));

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1005FA9E4;
  v17[3] = &unk_1011BDC20;
  objc_copyWeak(&v19, buf);
  v18 = *(id *)(a1 + 40);
  objc_msgSend(v16, "submitWithHandler:networkActivity:", v17, 0);

  objc_destroyWeak(&v19);
  objc_destroyWeak(buf);

}

void sub_1005FA97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1005FA9A4()
{
  if (qword_1014D2AF0 != -1)
    dispatch_once(&qword_1014D2AF0, &stru_1011BDCD0);
  return (id)qword_1014D2AE8;
}

void sub_1005FA9E4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  id v20;

  v6 = a2;
  v7 = a4;
  if (v7)
  {
    v8 = sub_1005FA9A4();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Preferences fetch failed with error %@", buf, 0xCu);
    }

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GEORPThirdPartyPhotoSharingPreference thirdPartyPhotoSharingPreferenceFromResponse:](GEORPThirdPartyPhotoSharingPreference, "thirdPartyPhotoSharingPreferenceFromResponse:", v6));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1005FAB60;
  v14[3] = &unk_1011B3488;
  objc_copyWeak(&v18, (id *)(a1 + 40));
  v15 = v10;
  v11 = *(id *)(a1 + 32);
  v16 = v7;
  v17 = v11;
  v12 = v7;
  v13 = v10;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v14);

  objc_destroyWeak(&v18);
}

void sub_1005FAB60(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_setDefaultsKeyForPreferences:", *(_QWORD *)(a1 + 32));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1005FAC48(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1005FAC64(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "version"));

  objc_msgSend(WeakRetained, "_updateThirdPartyPhotoSharingPreferences:versionID:eraseServerSavedSetting:completion:", 0, v4, 1, &stru_1011BDC60);
}

void sub_1005FAD98(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  _QWORD v33[4];
  id v34;
  id v35;
  id buf[2];

  v2 = sub_1005FA9A4();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Updating third party photo sharing preferences", (uint8_t *)buf, 2u);
  }

  v4 = objc_alloc_init((Class)GEORPThirdPartyPhotoSharingPreference);
  v5 = v4;
  if (!*(_BYTE *)(a1 + 56))
    objc_msgSend(v4, "setOptIn:", *(unsigned __int8 *)(a1 + 57));
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(v5, "setVersion:");
  v6 = objc_alloc_init((Class)GEORPThirdPartyPhotoSharingPreferenceUpdate);
  objc_msgSend(v6, "setPreference:", v5);
  v7 = objc_alloc_init((Class)GEORPFeedbackDetails);
  objc_msgSend(v7, "setThirdPartyPhotoSharingPreferenceUpdate:", v6);
  v8 = objc_alloc_init((Class)GEORPFeedbackSubmissionParameters);
  objc_msgSend(v8, "setType:", 18);
  v31 = v7;
  objc_msgSend(v8, "setDetails:", v7);
  v9 = objc_alloc_init((Class)GEORPFeedbackRequestParameters);
  objc_msgSend(v9, "setSubmissionParameters:", v8);
  v10 = objc_alloc_init((Class)GEORPFeedbackUserInfo);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GEORPUserCredentials _credentialsForPrimaryICloudAccount](GEORPUserCredentials, "_credentialsForPrimaryICloudAccount"));
  objc_msgSend(v10, "setUserCredentials:", v11);

  objc_initWeak(buf, *(id *)(a1 + 40));
  v12 = objc_alloc((Class)GEORPFeedbackRequest);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultTraits"));
  v32 = objc_msgSend(v12, "initWithFeedbackRequestParameters:userInfo:traits:", v9, v10, v14);
  v27 = v6;
  v29 = v5;

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "defaultTraits"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "ticketForFeedbackRequest:traits:", v32, v17));

  v19 = sub_1005FA9A4();
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "submissionParameters"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "clientSubmissionUuid"));
  if (objc_msgSend(v22, "length"))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "submissionParameters", v27, v29));
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "clientSubmissionUuid"));
  }
  else
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID", v27, v29));
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "UUIDString"));
  }
  v25 = (void *)v24;

  v26 = &_dispatch_main_q;
  MSPUGCPerformLogDiscardForCurrentSessionWithCompletion(&_dispatch_main_q, 0, v20, v25, 0);

  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1005FB128;
  v33[3] = &unk_1011BDC20;
  objc_copyWeak(&v35, buf);
  v34 = *(id *)(a1 + 48);
  objc_msgSend(v18, "submitWithHandler:networkActivity:", v33, 0);

  objc_destroyWeak(&v35);
  objc_destroyWeak(buf);

}

void sub_1005FB0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1005FB128(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD block[4];
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint8_t buf[4];
  id v30;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = sub_1005FA9A4();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Update to third party photo settings failed with error %@", buf, 0xCu);
    }

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "feedbackResult"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "submissionResult"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "thirdPartyPhotoSharingPreferenceUpdateResult"));

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "preference"));
  if (objc_msgSend(v14, "errorsCount"))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    if (objc_msgSend(v14, "errorsCount"))
    {
      v17 = 0;
      do
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v14, "errorsAtIndex:", v17)));
        objc_msgSend(v16, "addObject:", v18);

        ++v17;
      }
      while (v17 < (unint64_t)objc_msgSend(v14, "errorsCount"));
    }
  }
  else
  {
    v16 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005FB38C;
  block[3] = &unk_1011B3398;
  objc_copyWeak(&v28, (id *)(a1 + 40));
  v24 = v15;
  v19 = *(id *)(a1 + 32);
  v26 = v16;
  v27 = v19;
  v25 = v9;
  v20 = v16;
  v21 = v9;
  v22 = v15;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v28);
}

void sub_1005FB38C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_setDefaultsKeyForPreferences:", *(_QWORD *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = objc_msgSend(*(id *)(a1 + 48), "copy");
  (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v4 + 16))(v4, v2, v3, v5);

}

void sub_1005FB4AC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ThirdPartyPhotoSharingPreferencesManager");
  v2 = (void *)qword_1014D2AE8;
  qword_1014D2AE8 = (uint64_t)v1;

}

void sub_1005FD458(uint64_t a1, void *a2, void *a3)
{
  id v6;
  void *v7;
  double v8;
  double v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  double v48;
  double v49;
  id v50;
  void *v51;
  double v52;
  double v53;
  void *v54;
  void *v55;
  id v56;
  CGRect v57;
  CGRect v58;

  v56 = a2;
  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 104), a2);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 112), a3);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "metadata"));
    objc_msgSend(v7, "timestamp");
    v9 = v8;

    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", v9));
    v11 = objc_alloc_init((Class)NSDateFormatter);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone systemTimeZone](NSTimeZone, "systemTimeZone"));
    objc_msgSend(v11, "setTimeZone:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
    objc_msgSend(v11, "setLocale:", v13);

    objc_msgSend(v11, "setDateStyle:", 1);
    objc_msgSend(v11, "setTimeStyle:", 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringFromDate:", v10));
    v15 = objc_alloc_init((Class)UILabel);
    +[UIFont systemFontSize](UIFont, "systemFontSize");
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:](UIFont, "systemFontOfSize:"));
    objc_msgSend(v15, "setFont:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
    objc_msgSend(v15, "setTextColor:", v17);

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(v15, "setBackgroundColor:", v18);

    objc_msgSend(v15, "setTextAlignment:", 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Last updated %@"), v14));
    objc_msgSend(v15, "setText:", v19);

    objc_msgSend(v15, "sizeToFit");
    objc_msgSend(v15, "frame");
    objc_msgSend(v15, "setFrame:");
  }
  else
  {
    v10 = objc_alloc_init((Class)UILabel);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont boldSystemFontOfSize:](UIFont, "boldSystemFontOfSize:", 18.0));
    objc_msgSend(v10, "setFont:", v20);

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor infoTextOverPinStripeTextColor](UIColor, "infoTextOverPinStripeTextColor"));
    objc_msgSend(v10, "setTextColor:", v21);

    v22 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
    objc_msgSend(v10, "setShadowColor:", v22);

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(v10, "setBackgroundColor:", v23);

    objc_msgSend(v10, "setTextAlignment:", 1);
    objc_msgSend(v10, "setText:", CFSTR("No Resource Manifest"));
    objc_msgSend(v10, "sizeToFit");
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    objc_msgSend(v24, "bounds");
    v26 = v25;
    objc_msgSend(v10, "frame");
    v28 = (v26 - v27) * 0.5;
    objc_msgSend(v10, "frame");
    v30 = v29;
    objc_msgSend(v10, "frame");
    objc_msgSend(v10, "setFrame:", v28, 20.0, v30);

    v11 = objc_alloc_init((Class)UILabel);
    +[UIFont systemFontSize](UIFont, "systemFontSize");
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:](UIFont, "systemFontOfSize:"));
    objc_msgSend(v11, "setFont:", v31);

    v32 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
    objc_msgSend(v11, "setTextColor:", v32);

    v33 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(v11, "setBackgroundColor:", v33);

    objc_msgSend(v11, "setNumberOfLines:", 0);
    objc_msgSend(v11, "setTextAlignment:", 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error: %@"), v6));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));
    v35 = GEOErrorDomain(v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v37 = objc_msgSend(v34, "isEqualToString:", v36);

    if (v37)
    {
      v38 = GEOStringForError(objc_msgSend(v6, "code"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "stringByAppendingFormat:", CFSTR(" (%@)"), v39));

      v14 = (void *)v40;
    }
    objc_msgSend(v11, "setText:", v14);
    objc_msgSend(v11, "sizeToFit");
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    objc_msgSend(v41, "frame");
    objc_msgSend(v11, "textRectForBounds:limitedToNumberOfLines:", 0, 0.0, 0.0, v42 + -40.0, 1.79769313e308);
    v44 = v43;
    v46 = v45;

    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    objc_msgSend(v47, "bounds");
    v49 = (v48 - v44) * 0.5;
    objc_msgSend(v10, "frame");
    objc_msgSend(v11, "setFrame:", v49, CGRectGetMaxY(v57) + 20.0, v44, v46);

    v50 = objc_alloc((Class)UIView);
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
    objc_msgSend(v51, "frame");
    v53 = v52;
    objc_msgSend(v11, "frame");
    v15 = objc_msgSend(v50, "initWithFrame:", 0.0, 0.0, v53, CGRectGetMaxY(v58));

    objc_msgSend(v15, "addSubview:", v10);
    objc_msgSend(v15, "addSubview:", v11);
  }
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v54, "setTableHeaderView:", v15);

  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v55, "reloadData");

}

void sub_100601274(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v2;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v3 = (void *)WeakRetained[1];
    WeakRetained[1] = v2;

  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MKLocationManagerAdapter");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "MapsSuggestionsMKLocationManagerAdapter.m";
      v8 = 1026;
      v9 = 36;
      v10 = 2082;
      v11 = "-[MapsSuggestionsMKLocationManagerAdapter init]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_100601420(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  NSObject *v3;
  uint64_t Log;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "considerMyAllowanceAsLimited:", objc_msgSend(WeakRetained[1], "isAuthorizedForPreciseLocation") ^ 1);
    objc_msgSend(v2[1], "startLocationUpdateWithObserver:", v2);
    v3 = objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    -[NSObject addObserver:selector:name:object:](v3, "addObserver:selector:name:object:", v2, "locationManagerApprovalDidChange:", MKLocationManagerApprovalDidChangeNotification, 0);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MKLocationManagerAdapter");
    v3 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "MapsSuggestionsMKLocationManagerAdapter.m";
      v7 = 1026;
      v8 = 49;
      v9 = 2082;
      v10 = "-[MapsSuggestionsMKLocationManagerAdapter onStartImplementation]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void sub_100601604(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  NSObject *v3;
  uint64_t Log;
  int v5;
  char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[1], "stopLocationUpdateWithObserver:", WeakRetained);
    v3 = objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    -[NSObject removeObserver:name:object:](v3, "removeObserver:name:object:", v2, MKLocationManagerApprovalDidChangeNotification, 0);
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MKLocationManagerAdapter");
    v3 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136446722;
      v6 = "MapsSuggestionsMKLocationManagerAdapter.m";
      v7 = 1026;
      v8 = 60;
      v9 = 2082;
      v10 = "-[MapsSuggestionsMKLocationManagerAdapter onStopImplementation]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v5, 0x1Cu);
    }

  }
}

void sub_100601CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100601CFC()
{
  if (qword_1014D2B00 != -1)
    dispatch_once(&qword_1014D2B00, &stru_1011BDE68);
  return (id)qword_1014D2AF8;
}

void sub_100601D3C(uint64_t a1, void *a2)
{
  id v3;
  const char *label;
  const char *v5;
  BOOL v6;
  id v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  char *v17;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;

  v3 = a2;
  label = dispatch_queue_get_label((dispatch_queue_t)&_dispatch_main_q);
  v5 = dispatch_queue_get_label(0);
  if (label != v5)
  {
    v6 = !label || v5 == 0;
    if (v6 || strcmp(label, v5))
    {
      v13 = sub_1004318FC();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v18 = 136316418;
        v19 = "-[VLFSessionAppLaunchDelayMonitor _startTimer]_block_invoke";
        v20 = 2080;
        v21 = "VLFSessionAppLaunchDelayMonitor.m";
        v22 = 1024;
        v23 = 69;
        v24 = 2080;
        v25 = "dispatch_get_main_queue()";
        v26 = 2080;
        v27 = dispatch_queue_get_label((dispatch_queue_t)&_dispatch_main_q);
        v28 = 2080;
        v29 = dispatch_queue_get_label(0);
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion on queue failed: %s/%s; actual queue: %s",
          (uint8_t *)&v18,
          0x3Au);

      }
      if (sub_100A70734())
      {
        v15 = sub_1004318FC();
        v16 = objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v17 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          v18 = 138412290;
          v19 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v18, 0xCu);

        }
      }
    }
  }
  v7 = sub_100601CFC();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Timeout timer fired", (uint8_t *)&v18, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10 = WeakRetained;
  if (WeakRetained)
  {
    if ((objc_msgSend(WeakRetained, "isInBackground") & 1) != 0)
    {
      v11 = sub_100601CFC();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v18) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Completion called while backgrounded; not updating state",
          (uint8_t *)&v18,
          2u);
      }

    }
    else
    {
      objc_msgSend(v10, "setState:", 2);
    }
    objc_msgSend(v10, "setTimeoutTimer:", 0);
  }

}

void sub_100602650(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionAppLaunchDelayMonitor");
  v2 = (void *)qword_1014D2AF8;
  qword_1014D2AF8 = (uint64_t)v1;

}

id sub_100602B8C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_displayID"));
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5;
}

id sub_100602BEC()
{
  if (qword_1014D2B10 != -1)
    dispatch_once(&qword_1014D2B10, &stru_1011BDEB0);
  return (id)qword_1014D2B08;
}

void sub_100603160(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UIScreenCarExtras");
  v2 = (void *)qword_1014D2B08;
  qword_1014D2B08 = (uint64_t)v1;

}

void sub_10060336C(uint64_t a1)
{
  void *v2;
  double v3;
  void *v4;
  double v5;
  uint64_t v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  id v12;
  void *v13;
  id v14;
  double v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  _QWORD v32[4];
  _QWORD v33[4];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MKCatalystButton catalystButton](MKCatalystButton, "catalystButton"));
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v2, "setTitle:forState:", CFSTR("Back"), 0);
  objc_msgSend(v2, "setIsPrimaryButton:", 0);
  LODWORD(v3) = 1148846080;
  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 0, v3);
  objc_msgSend(v2, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 32), "_pop", 64);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKCatalystButton catalystButton](MKCatalystButton, "catalystButton"));
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v4, "setTitle:forState:", CFSTR("Not Root"), 0);
  objc_msgSend(v4, "setTitle:forState:", CFSTR("Root"), 4);
  objc_msgSend(v4, "setIsPrimaryButton:", 1);
  LODWORD(v5) = 1148846080;
  objc_msgSend(v4, "setContentCompressionResistancePriority:forAxis:", 0, v5);
  objc_msgSend(v4, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 32), "_toggleWantsControl", 64);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v4;
  v31 = v4;

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MKCatalystButton catalystButton](MKCatalystButton, "catalystButton"));
  objc_msgSend(v8, "setTitle:forState:", CFSTR("Pop"), 0);
  objc_msgSend(v8, "setIsPrimaryButton:", 1);
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  LODWORD(v9) = 1148846080;
  objc_msgSend(v8, "setContentCompressionResistancePriority:forAxis:", 0, v9);
  objc_msgSend(v8, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 32), "_popSidebarController", 64);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[MKCatalystButton catalystButton](MKCatalystButton, "catalystButton"));
  objc_msgSend(v10, "setTitle:forState:", CFSTR("Push"), 0);
  objc_msgSend(v10, "setIsPrimaryButton:", 1);
  objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  LODWORD(v11) = 1148846080;
  objc_msgSend(v10, "setContentCompressionResistancePriority:forAxis:", 0, v11);
  objc_msgSend(v10, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 32), "_pushSidebarController", 64);
  v12 = objc_alloc((Class)UIStackView);
  v33[0] = v2;
  v33[1] = v31;
  v27 = v2;
  v33[2] = v8;
  v33[3] = v10;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v33, 4));
  v14 = objc_msgSend(v12, "initWithArrangedSubviews:", v13);

  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v14, "setAxis:", 0);
  objc_msgSend(v14, "setDistribution:", 1);
  objc_msgSend(v14, "setAlignment:", 0);
  objc_msgSend(v14, "setSpacing:", 1.17549435e-38);
  LODWORD(v15) = 1148846080;
  objc_msgSend(v14, "setContentCompressionResistancePriority:forAxis:", 0, v15);
  objc_msgSend(*(id *)(a1 + 40), "addSubview:", v14);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 16);
  *(_QWORD *)(v16 + 16) = v14;
  v18 = v14;

  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "centerXAnchor"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "centerXAnchor"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "constraintEqualToAnchor:", v29));
  v32[0] = v28;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bottomAnchor"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "bottomAnchor"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "constraintEqualToAnchor:constant:", v19, 60.0));
  v32[1] = v20;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "widthAnchor"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "constraintEqualToConstant:", 100.0));
  v32[2] = v22;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "heightAnchor"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "constraintEqualToConstant:", 32.0));
  v32[3] = v24;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v32, 4));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v25);

}

void sub_100603810(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeFromSuperview");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

}

uint64_t sub_100604738(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 200) = 1;
  return result;
}

void sub_100604800(uint64_t a1, void *a2)
{
  id v3;
  RAPTransitLine *v4;
  id v5;
  id v6;

  v3 = a2;
  v4 = [RAPTransitLine alloc];
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lineItem"));
  v5 = -[RAPTransitLine _initWithTransitLine:](v4, "_initWithTransitLine:", v6);
  objc_msgSend(v3, "setReportedLine:", v5);

}

id sub_100604FC8()
{
  if (qword_1014D2B20 != -1)
    dispatch_once(&qword_1014D2B20, &stru_1011BDED8);
  return (id)qword_1014D2B18;
}

void sub_100605348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10060536C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id *v5;
  id v6;
  id v7;
  int v8;
  id v9;

  v2 = sub_100604FC8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v8 = 134349056;
    v9 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Delay timer fired; updating state now",
      (uint8_t *)&v8,
      0xCu);

  }
  v5 = (id *)(a1 + 32);
  v6 = objc_loadWeakRetained(v5);
  objc_msgSend(v6, "updateState");

  v7 = objc_loadWeakRetained(v5);
  objc_msgSend(v7, "setAuthorizedDelayTimer:", 0);

}

void sub_1006058E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionCoarseLocationMonitor");
  v2 = (void *)qword_1014D2B18;
  qword_1014D2B18 = (uint64_t)v1;

}

void sub_100605FB0(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSOperationQueue);
  v2 = (void *)qword_1014D2B28;
  qword_1014D2B28 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2B28, "setName:", CFSTR("com.apple.Maps.ImageProcessingQueue"));
  objc_msgSend((id)qword_1014D2B28, "setQualityOfService:", 25);
  objc_msgSend((id)qword_1014D2B28, "setMaxConcurrentOperationCount:", 4);
}

void sub_1006060BC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_maps_composedImageScale:isRTL:", *(unsigned __int8 *)(a1 + 56), *(double *)(a1 + 48)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

id sub_100606860(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "count");
  if (result)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "addObject:", &off_10126DF78);
  return result;
}

void sub_100606A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100606AB8(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_handleMenuAction:entryPoint:sceneDelegate:", *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_100607764(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  _QWORD v13[4];
  _QWORD v14[4];
  _QWORD v15[4];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[4];
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[3];
  _QWORD v31[3];

  v30[0] = &off_10126DF90;
  v28[0] = &off_10126DF90;
  v26[0] = &off_10126DFA8;
  v26[1] = &off_10126DFD8;
  v27[0] = &off_10126DFC0;
  v27[1] = &off_10126DFF0;
  v26[2] = &off_10126E008;
  v26[3] = &off_10126E038;
  v27[2] = &off_10126E020;
  v27[3] = &off_10126E050;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 4));
  v28[1] = &off_10126E068;
  v29[0] = v11;
  v24[0] = &off_10126DFA8;
  v24[1] = &off_10126DFD8;
  v25[0] = &off_10126E080;
  v25[1] = &off_10126E098;
  v24[2] = &off_10126E008;
  v24[3] = &off_10126E038;
  v25[2] = &off_10126E020;
  v25[3] = &off_10126E050;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 4));
  v29[1] = v10;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 2));
  v31[0] = v9;
  v30[1] = &off_10126E068;
  v21[3] = &off_10126E050;
  v22[0] = &off_10126DF90;
  v20[0] = &off_10126DFA8;
  v20[1] = &off_10126DFD8;
  v21[0] = &off_10126DFC0;
  v21[1] = &off_10126E0B0;
  v20[2] = &off_10126E008;
  v20[3] = &off_10126E038;
  v21[2] = &off_10126E0C8;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 4));
  v22[1] = &off_10126E068;
  v23[0] = v8;
  v18[0] = &off_10126DFA8;
  v18[1] = &off_10126DFD8;
  v19[0] = &off_10126E080;
  v19[1] = &off_10126E0E0;
  v18[2] = &off_10126E008;
  v18[3] = &off_10126E038;
  v19[2] = &off_10126E0C8;
  v19[3] = &off_10126E050;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 4));
  v23[1] = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 2));
  v31[1] = v2;
  v30[2] = &off_10126E0F8;
  v15[3] = &off_10126E050;
  v16[0] = &off_10126DF90;
  v14[0] = &off_10126DFA8;
  v14[1] = &off_10126DFD8;
  v15[0] = &off_10126DFC0;
  v15[1] = &off_10126E110;
  v14[2] = &off_10126E008;
  v14[3] = &off_10126E038;
  v15[2] = &off_10126E0C8;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 4));
  v16[1] = &off_10126E068;
  v17[0] = v3;
  v12[0] = &off_10126DFA8;
  v12[1] = &off_10126DFD8;
  v13[0] = &off_10126E080;
  v13[1] = &off_10126E128;
  v12[2] = &off_10126E008;
  v12[3] = &off_10126E038;
  v13[2] = &off_10126E0C8;
  v13[3] = &off_10126E050;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 4));
  v17[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
  v31[2] = v5;
  v6 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v31, v30, 3));
  v7 = (void *)qword_1014D2B38;
  qword_1014D2B38 = v6;

}

void sub_100607BF0(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[7];
  _QWORD v10[7];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[8];
  _QWORD v18[8];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[6];
  _QWORD v22[6];

  v21[0] = &off_10126E140;
  v21[1] = &off_10126E050;
  v22[0] = CFSTR("NotSet");
  v22[1] = CFSTR("km");
  v21[2] = &off_10126E158;
  v21[3] = &off_10126E170;
  v22[2] = CFSTR("miles");
  v22[3] = CFSTR("m");
  v21[4] = &off_10126E188;
  v21[5] = &off_10126E1A0;
  v22[4] = CFSTR("yards");
  v22[5] = CFSTR("ft");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 6));
  v19[0] = &off_10126E140;
  v19[1] = &off_10126E050;
  v20[0] = CFSTR("NotSet");
  v20[1] = CFSTR("Continue");
  v19[2] = &off_10126E158;
  v19[3] = &off_10126E170;
  v20[2] = CFSTR("Initial");
  v20[3] = CFSTR("Prepare");
  v19[4] = &off_10126E188;
  v20[4] = CFSTR("Execute");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 5));
  v17[0] = &off_10126E140;
  v17[1] = &off_10126E050;
  v18[0] = CFSTR("NotSet");
  v18[1] = CFSTR("NotActive");
  v17[2] = &off_10126E158;
  v17[3] = &off_10126E170;
  v18[2] = CFSTR("Active");
  v18[3] = CFSTR("Arrived");
  v17[4] = &off_10126E188;
  v17[5] = &off_10126E1A0;
  v18[4] = CFSTR("Loading");
  v18[5] = CFSTR("Locating");
  v17[6] = &off_10126E1B8;
  v17[7] = &off_10126E1D0;
  v18[6] = CFSTR("Rerouting");
  v18[7] = CFSTR("ProceedToRoute");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 8));
  v15[0] = &__kCFBooleanTrue;
  v15[1] = &__kCFBooleanFalse;
  v16[0] = CFSTR("YES");
  v16[1] = CFSTR("NO");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2));
  v13[0] = &__kCFBooleanTrue;
  v13[1] = &__kCFBooleanFalse;
  v14[0] = CFSTR("YES");
  v14[1] = CFSTR("NO");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 2));
  v11[0] = &__kCFBooleanTrue;
  v11[1] = &__kCFBooleanFalse;
  v12[0] = CFSTR("YES");
  v12[1] = CFSTR("NO");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 2));
  v9[0] = CFSTR("routeGuidanceState");
  v9[1] = CFSTR("maneuverState");
  v10[0] = v3;
  v10[1] = v2;
  v9[2] = CFSTR("distanceRemainingDisplayUnits");
  v9[3] = CFSTR("distanceRemainingToNextManeuverDisplayUnits");
  v10[2] = v1;
  v10[3] = v1;
  v9[4] = CFSTR("beingShownInApp");
  v9[5] = CFSTR("sourceSupportsRouteGuidance");
  v10[4] = v4;
  v10[5] = v5;
  v9[6] = CFSTR("laneGuidanceShowing");
  v10[6] = v6;
  v7 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 7));
  v8 = (void *)qword_1014D2B50;
  qword_1014D2B50 = v7;

}

void sub_100607F30(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[22];
  _QWORD v4[22];

  v3[0] = &off_10126DFA8;
  v3[1] = &off_10126DFD8;
  v4[0] = CFSTR("navigationRouteGuidanceDisplayComponentID");
  v4[1] = CFSTR("routeGuidanceState");
  v3[2] = &off_10126E008;
  v3[3] = &off_10126E038;
  v4[2] = CFSTR("maneuverState");
  v4[3] = CFSTR("currentRoadName");
  v3[4] = &off_10126E1E8;
  v3[5] = &off_10126E200;
  v4[4] = CFSTR("destinationName");
  v4[5] = CFSTR("estimatedTimeOfArrival");
  v3[6] = &off_10126E218;
  v3[7] = &off_10126E230;
  v4[6] = CFSTR("timeRemainingToDestination");
  v4[7] = CFSTR("distanceRemaining");
  v3[8] = &off_10126E248;
  v3[9] = &off_10126E260;
  v4[8] = CFSTR("distanceRemainingDisplayString");
  v4[9] = CFSTR("distanceRemainingDisplayUnits");
  v3[10] = &off_10126E278;
  v3[11] = &off_10126E290;
  v4[10] = CFSTR("distanceRemainingToNextManeuver");
  v4[11] = CFSTR("distanceRemainingToNextManeuverDisplayString");
  v3[12] = &off_10126E2A8;
  v3[13] = &off_10126E2C0;
  v4[12] = CFSTR("distanceRemainingToNextManeuverDisplayUnits");
  v4[13] = CFSTR("routeGuidanceManeuverCurrentList");
  v3[14] = &off_10126E2D8;
  v3[15] = &off_10126E2F0;
  v4[14] = CFSTR("routeGuidanceManeuverCount");
  v4[15] = CFSTR("beingShownInApp");
  v3[16] = &off_10126E308;
  v3[17] = &off_10126E320;
  v4[16] = CFSTR("laneGuidanceCurrentIndex");
  v4[17] = CFSTR("laneGuidanceTotalCount");
  v3[18] = &off_10126E338;
  v3[19] = &off_10126E350;
  v4[18] = CFSTR("laneGuidanceShowing");
  v4[19] = CFSTR("sourceName");
  v3[20] = &off_10126E368;
  v3[21] = &off_10126E380;
  v4[20] = CFSTR("sourceSupportsRouteGuidance");
  v4[21] = CFSTR("destinationTimeZoneOffsetMinutes");
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 22));
  v2 = (void *)qword_1014D2B60;
  qword_1014D2B60 = v1;

}

void sub_100608978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100608B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

id sub_100608B6C()
{
  if (qword_1014D2B70 != -1)
    dispatch_once(&qword_1014D2B70, &stru_1011BE008);
  return (id)qword_1014D2B68;
}

void sub_100608D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100608DC8(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_100608B6C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Initializing timer fired", v4, 2u);
    }

    objc_msgSend(WeakRetained, "setInitializingTimer:", 0);
    objc_msgSend(WeakRetained, "setCurrentState:", 2);
    objc_msgSend(WeakRetained, "_recalculateState");
  }

}

void sub_1006091FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  _Unwind_Resume(exception_object);
}

void sub_1006094BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  _Unwind_Resume(exception_object);
}

void sub_1006097C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1006098C8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFScanningStateManager");
  v2 = (void *)qword_1014D2B68;
  qword_1014D2B68 = (uint64_t)v1;

}

void sub_1006099B8(id a1)
{
  void *v1;
  id v2;
  char BOOL;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2 == (id)5)
    BOOL = GEOConfigGetBOOL(MapsConfig_UseUIKitCardsOnMac, off_1014B41C8);
  else
    BOOL = 1;
  byte_1014D2B78 = BOOL;
  v4 = sub_10043196C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", byte_1014D2B78));
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "UIKitCardsAreAvailable: %@", (uint8_t *)&v7, 0xCu);

  }
}

uint64_t sub_100609AB8()
{
  if (qword_1014D2B88 != -1)
    dispatch_once(&qword_1014D2B88, &stru_1011BE068);
  return byte_1014D2B79;
}

void sub_100609AF8(id a1)
{
  char BOOL;
  id v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  if (qword_1014D2B80 != -1)
    dispatch_once(&qword_1014D2B80, &stru_1011BE048);
  if (byte_1014D2B78)
    BOOL = GEOConfigGetBOOL(MapsConfig_ShouldOptimizeAnimationsForSheetPresentation, off_1014B5108);
  else
    BOOL = 0;
  byte_1014D2B79 = BOOL;
  v2 = sub_10043196C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", byte_1014D2B79));
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ShouldOptimizeSheetPresentationAnimations: %@", (uint8_t *)&v5, 0xCu);

  }
}

void sub_10060A938(uint64_t a1, void *a2, void *a3)
{
  id v6;
  uint64_t v7;
  id WeakRetained;
  id v9;

  v9 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    objc_storeStrong((id *)(v7 + 24), a2);
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
    objc_msgSend(WeakRetained, "venueCategoryContentDownloader:didChangeMapItem:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(v7 + 16));
    objc_msgSend(WeakRetained, "venueCategoryContentDownloader:didFailToFetchMapItemWithError:", *(_QWORD *)(a1 + 32), v6);
  }

}

void sub_10060AB18(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a3;
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v6, v5);

  }
}

void sub_10060BA98(void *a1)
{
  void (**v1)(id, CGContext *);
  CGContext *CurrentContext;

  if (a1)
  {
    v1 = a1;
    CurrentContext = UIGraphicsGetCurrentContext();
    CGContextSaveGState(CurrentContext);
    v1[2](v1, CurrentContext);

    CGContextRestoreGState(CurrentContext);
  }
}

id sub_10060BAE4(uint64_t a1, CGContextRef c)
{
  __int128 v3;
  CGAffineTransform v5;

  v3 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&v5.a = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&v5.c = v3;
  *(_OWORD *)&v5.tx = *(_OWORD *)(a1 + 88);
  CGContextConcatCTM(c, &v5);
  objc_msgSend(*(id *)(a1 + 32), "addClip");
  return objc_msgSend(*(id *)(a1 + 40), "drawIntersectionFill:", *(_QWORD *)(a1 + 48));
}

id sub_10060BB3C(uint64_t a1, CGContextRef c)
{
  __int128 v3;
  CGAffineTransform v5;

  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v5.a = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v5.c = v3;
  *(_OWORD *)&v5.tx = *(_OWORD *)(a1 + 96);
  CGContextConcatCTM(c, &v5);
  objc_msgSend(*(id *)(a1 + 32), "addClip");
  return objc_msgSend(*(id *)(a1 + 40), "drawIntersectionStroke:forFill:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

id sub_10060BB94(uint64_t a1, CGContextRef c)
{
  __int128 v3;
  CGAffineTransform v5;

  v3 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&v5.a = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&v5.c = v3;
  *(_OWORD *)&v5.tx = *(_OWORD *)(a1 + 88);
  CGContextConcatCTM(c, &v5);
  return objc_msgSend(*(id *)(a1 + 32), "drawArrow:stroke:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10060CFE4(uint64_t a1, CGContextRef c)
{
  __int128 v3;
  id v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  uint64_t v11;
  CGAffineTransform transform;

  v3 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&transform.a = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&transform.c = v3;
  *(_OWORD *)&transform.tx = *(_OWORD *)(a1 + 88);
  CGContextConcatCTM(c, &transform);
  v6 = _NSConcreteStackBlock;
  v7 = 3221225472;
  v8 = sub_10060D084;
  v9 = &unk_1011BE0E0;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10 = v4;
  v11 = v5;
  sub_10060BA98(&v6);
  objc_msgSend(*(id *)(a1 + 40), "drawArrow:stroke:", *(_QWORD *)(a1 + 48), 0, v6, v7, v8, v9);

}

void sub_10060D084(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "drawArrow:stroke:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), 0, (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_10060D3BC(uint64_t a1, CGContextRef c)
{
  __int128 v3;
  id v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  uint64_t v11;
  CGAffineTransform transform;

  v3 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&transform.a = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&transform.c = v3;
  *(_OWORD *)&transform.tx = *(_OWORD *)(a1 + 88);
  CGContextConcatCTM(c, &transform);
  v6 = _NSConcreteStackBlock;
  v7 = 3221225472;
  v8 = sub_10060D45C;
  v9 = &unk_1011BE0E0;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10 = v4;
  v11 = v5;
  sub_10060BA98(&v6);
  objc_msgSend(*(id *)(a1 + 40), "drawArrow:stroke:", *(_QWORD *)(a1 + 48), 0, v6, v7, v8, v9);

}

void sub_10060D45C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "drawArrow:stroke:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), 0, (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

CGFloat sub_10060DBF0(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v9;
  void *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGRect v16;
  CGRect v17;

  v9 = a1;
  v10 = v9;
  if (v9 && (objc_msgSend(v9, "isEmpty") & 1) == 0)
  {
    objc_msgSend(v10, "pathBounds");
    v17.origin.x = v11;
    v17.origin.y = v12;
    v17.size.width = v13;
    v17.size.height = v14;
    v16.origin.x = a2;
    v16.origin.y = a3;
    v16.size.width = a4;
    v16.size.height = a5;
    *(_QWORD *)&a2 = (unint64_t)CGRectUnion(v16, v17);
  }

  return a2;
}

id sub_10060DF34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setupTrayLayoutAndPerformScrollTest");
}

id sub_10060DFC0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performScrollTest");
}

void sub_10060E1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10060E1F4(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testName"));
    objc_msgSend(WeakRetained, "finishedSubTest:", v2);

    objc_msgSend(WeakRetained, "finishedTest");
  }

}

id sub_10060E300(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performResizingTest");
}

id sub_10060E3A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_10060E45C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performRotationTest");
}

id sub_10060E4C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_10060EFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10060EFC8(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

void sub_10060F11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;
  uint64_t v20;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v20 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10060F158(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10060F168(uint64_t a1)
{

}

void sub_10060F170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id WeakRetained;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(_QWORD *)(v7 + 24);
  if (v8 == *(_QWORD *)(a1 + 56))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "substringToIndex:", a3));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    *a7 = 1;
  }
  else
  {
    *(_QWORD *)(v7 + 24) = v8 + 1;
  }
}

void sub_10060F6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10060F714(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_setComplete:allowInvokingDidChange:", objc_msgSend(WeakRetained, "_isNowComplete"), 1);
    WeakRetained = v2;
  }

}

void sub_1006105C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006105DC(uint64_t a1, void *a2)
{
  id *WeakRetained;
  UGCUserInformationViewModel *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = objc_alloc_init(UGCUserInformationViewModel);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("[UGC] Contribution Name"), CFSTR("localized string not found"), 0));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userName"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v6, v7));
    -[UGCUserInformationViewModel setUserName:](v4, "setUserName:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userEmail"));
    -[UGCUserInformationViewModel setUserEmail:](v4, "setUserEmail:", v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userIcon"));
    -[UGCUserInformationViewModel setUserIcon:](v4, "setUserIcon:", v10);

    -[UGCUserInformationViewModel setUserCurrentLocation:](v4, "setUserCurrentLocation:", v13);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_legalDisclosureString"));
    -[UGCUserInformationViewModel setLegalDisclosureString:](v4, "setLegalDisclosureString:", v11);

    objc_msgSend(WeakRetained[1], "setViewModel:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v12, "sectionControllerDidUpdateRowItems:", WeakRetained);

  }
}

id sub_100610E40()
{
  if (qword_1014D2B98 != -1)
    dispatch_once(&qword_1014D2B98, &stru_1011BE1B8);
  return (id)qword_1014D2B90;
}

void sub_100611584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006115B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  void *v9;
  int v10;
  id v11;

  v5 = a3;
  if (v5)
  {
    v6 = sub_100610E40();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to determine pocket state: %@", (uint8_t *)&v10, 0xCu);
    }

  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "analyticsCapturer"));
    objc_msgSend(v9, "recordPocketState:", a2);

  }
}

void sub_100611F90(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100611FAC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  id WeakRetained;
  id v8;
  void *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;

  v3 = a2;
  v4 = sub_100610E40();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      v10 = 134349314;
      v11 = WeakRetained;
      v12 = 2112;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%{public}p] Error saving ARKit recording: %@", (uint8_t *)&v10, 0x16u);

    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v8 = objc_loadWeakRetained((id *)(a1 + 40));
    v9 = *(void **)(a1 + 32);
    v10 = 134349314;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%{public}p] ARKit recording finished recording at file: %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_100613474(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v4 = objc_msgSend(WeakRetained, "mode");
    v3 = v6;
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 40);
      if (!v5)
      {
        objc_msgSend(v6, "stopLocationUpdates");
        goto LABEL_7;
      }
      if (v5 == 1)
      {
        objc_msgSend(v6, "startLocationUpdates");
LABEL_7:
        v3 = v6;
      }
    }
  }

}

void sub_1006137A8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  void *v8;
  double v9;
  void *v10;
  id v11;
  NSObject *v12;
  int v13;
  void *v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if ((objc_msgSend(WeakRetained, "hasNotifiedFirstFrame") & 1) == 0)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      objc_msgSend(v4, "postNotificationName:object:", CFSTR("VLFSessionDidGetFirstFrameNotification"), 0);

      objc_msgSend(v3, "setNotifiedFirstFrame:", 1);
    }
    if ((objc_msgSend(v3, "shouldObserveFrames") & 1) != 0)
    {
      if (objc_msgSend(v3, "shouldUpdateCameraFocusLensPosition"))
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        objc_msgSend(v5, "floatForKey:", CFSTR("PedestrianARAutoFocusDistanceKey"));
        v7 = v6;

        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "session"));
        LODWORD(v9) = v7;
        objc_msgSend(v8, "updateCameraFocusLensPosition:", v9);

        objc_msgSend(v3, "setShouldUpdateCameraFocusLensPosition:", 0);
      }
      if (*(_QWORD *)(a1 + 32))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "analyticsCapturer"));
        objc_msgSend(v10, "recordGeoTrackingStatusIfNecessary:", *(_QWORD *)(a1 + 32));

      }
      objc_msgSend(v3, "_processVLDebugInfo:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      v11 = sub_100610E40();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = 134349056;
        v14 = v3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[%{public}p] Got a frame but ignoring it because geo tracking has not initialized yet", (uint8_t *)&v13, 0xCu);
      }

    }
  }

}

void sub_100613C38(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "registerFailureWithResult:error:initializationFailureDetails:", 1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100613F18(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  void *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "analyticsCapturer"));
    objc_msgSend(v4, "recordGeoTrackingStatusIfNecessary:", *(_QWORD *)(a1 + 32));

    v5 = objc_msgSend(*(id *)(a1 + 32), "state");
    if (v5 == (id)3)
    {
      objc_msgSend(v3, "_processVLDebugInfo:", *(_QWORD *)(a1 + 40));
      if (!objc_msgSend(v3, "mode"))
        objc_msgSend(v3, "registerSuccessWithVLFLocation:", 0);
    }
    else if (v5 == (id)1 && (objc_msgSend(v3, "shouldObserveFrames") & 1) == 0)
    {
      v6 = sub_100610E40();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = 134349056;
        v9 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[%{public}p] Geo tracking is initializing; start observing frames now",
          (uint8_t *)&v8,
          0xCu);
      }

      objc_msgSend(v3, "setShouldObserveFrames:", 1);
    }
  }

}

void sub_100614400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100614424(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  void *v6;
  int v7;
  id v8;

  v2 = sub_100610E40();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v7 = 134349056;
    v8 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[%{public}p] Timeout timer fired", (uint8_t *)&v7, 0xCu);

  }
  v5 = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.Maps.VLFSession"), 1, 0));
  objc_msgSend(v5, "registerFailureWithResult:error:initializationFailureDetails:", 3, v6, 0);

}

void sub_100614D88(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v2 = sub_100610E40();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 48);
    v8 = 134349312;
    v9 = v4;
    v10 = 2050;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%{public}p] Updated pocket state: %{public}llu", (uint8_t *)&v8, 0x16u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "analyticsCapturer"));
  objc_msgSend(v7, "recordPocketState:", *(_QWORD *)(a1 + 48));

}

void sub_10061501C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSession");
  v2 = (void *)qword_1014D2B90;
  qword_1014D2B90 = (uint64_t)v1;

}

id sub_1006155C8()
{
  if (qword_1014D2BA8 != -1)
    dispatch_once(&qword_1014D2BA8, &stru_1011BE1D8);
  return (id)qword_1014D2BA0;
}

void sub_100615F78(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionChromeStackMonitor");
  v2 = (void *)qword_1014D2BA0;
  qword_1014D2BA0 = (uint64_t)v1;

}

void sub_1006162B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006162CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006162DC(uint64_t a1)
{

}

void sub_1006162E4(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_1006163AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006163C4(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_100616454(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  id v7;
  void *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  id v15;
  void *v16;
  objc_class *v17;
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint8_t buf[4];
  __CFString *v27;

  v2 = *(void **)(a1 + 32);
  if (v2 == *(void **)(*(_QWORD *)(a1 + 40) + 16))
    v3 = 1;
  else
    v3 = objc_msgSend(v2, "isEqual:");
  v4 = sub_100616744();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (!v6)
    {
LABEL_23:

      return;
    }
    v7 = *(id *)(a1 + 40);
    v8 = v7;
    if (!v7)
    {
      v14 = CFSTR("<nil>");
      goto LABEL_22;
    }
    v9 = (objc_class *)objc_opt_class(v7);
    v10 = NSStringFromClass(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if ((objc_opt_respondsToSelector(v8, "accessibilityIdentifier") & 1) != 0)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "performSelector:", "accessibilityIdentifier"));
      v13 = v12;
      if (v12 && !objc_msgSend(v12, "isEqualToString:", v11))
      {
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v11, v8, v13));

        goto LABEL_12;
      }

    }
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v11, v8));
LABEL_12:

LABEL_22:
    *(_DWORD *)buf = 138543362;
    v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%{public}@] values are equal, ignoring", buf, 0xCu);

    goto LABEL_23;
  }
  if (v6)
  {
    v15 = *(id *)(a1 + 40);
    v16 = v15;
    if (!v15)
    {
      v22 = CFSTR("<nil>");
      goto LABEL_25;
    }
    v17 = (objc_class *)objc_opt_class(v15);
    v18 = NSStringFromClass(v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if ((objc_opt_respondsToSelector(v16, "accessibilityIdentifier") & 1) != 0)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "performSelector:", "accessibilityIdentifier"));
      v21 = v20;
      if (v20 && !objc_msgSend(v20, "isEqualToString:", v19))
      {
        v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v19, v16, v21));

        goto LABEL_20;
      }

    }
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v19, v16));
LABEL_20:

LABEL_25:
    *(_DWORD *)buf = 138543362;
    v27 = v22;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%{public}@] value updated", buf, 0xCu);

  }
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 16), *(id *)(a1 + 32));
  v23 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v24 = *(_QWORD *)(a1 + 40);
  v25 = *(void **)(v24 + 24);
  *(_QWORD *)(v24 + 24) = v23;

  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 40) = 1;
  objc_msgSend(*(id *)(a1 + 40), "_dispatchIfNeeded");
}

id sub_100616744()
{
  if (qword_1014D2BB8 != -1)
    dispatch_once(&qword_1014D2BB8, &stru_1011BE220);
  return (id)qword_1014D2BB0;
}

void sub_100616B4C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_run");

}

void sub_100616EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  id *v31;

  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_100616F3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
  v2 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 41) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 42) = 1;
}

void sub_100616FA8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[7];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = *((_QWORD *)WeakRetained + 1);
    v8[1] = 3221225472;
    v8[2] = sub_100617024;
    v8[3] = &unk_1011B3B68;
    v6 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v8[5] = v3;
    v8[6] = v5;
    v8[4] = v6;
    v7 = v3;
    v8[0] = _NSConcreteStackBlock;
    geo_isolate_sync(v4, v8);
    v3 = v7;
  }

}

_QWORD *sub_100617024(_QWORD *result)
{
  _QWORD *v1;
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint8_t buf[4];
  __CFString *v13;

  if (!*(_BYTE *)(*(_QWORD *)(result[6] + 8) + 24))
  {
    v1 = result;
    v2 = sub_100616744();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
LABEL_12:

      *(_BYTE *)(*(_QWORD *)(v1[6] + 8) + 24) = 1;
      *(_BYTE *)(v1[5] + 42) = 0;
      return objc_msgSend((id)v1[5], "_dispatchIfNeeded");
    }
    v4 = (id)v1[4];
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_11;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_9;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_9:

LABEL_11:
    *(_DWORD *)buf = 138543362;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%{public}@] completion handler called", buf, 0xCu);

    goto LABEL_12;
  }
  return result;
}

void sub_100617248(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsThrottler");
  v2 = (void *)qword_1014D2BB0;
  qword_1014D2BB0 = (uint64_t)v1;

}

id sub_1006174BC(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 265) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "updateContentState");
}

void sub_100617C98(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100617CB4(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "updateDataSource");
    WeakRetained = v2;
  }

}

void sub_100617E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100617E48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "containerViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chromeViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentTraits"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ticketForSearchFieldOfflinePlaceholderWithTraits:", v6));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100617F7C;
  v9[3] = &unk_1011BE270;
  objc_copyWeak(&v11, (id *)(a1 + 48));
  v8 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v8;
  objc_msgSend(v7, "submitWithHandler:networkActivity:", v9, 0);

  objc_destroyWeak(&v11);
}

void sub_100617F68(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100617F7C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  _BYTE *WeakRetained;
  _QWORD *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  id v25;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[424] = 0;
    v8 = sub_10043222C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218242;
      v23 = a2;
      v24 = 2112;
      v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Offline Search Capability received: %ld. Error: %@", buf, 0x16u);
    }

    if (!v5)
    {
      v10 = a2 & 1;
      if ((_DWORD)v10 != *((unsigned __int8 *)v7 + 352))
      {
        v11 = (void *)v7[19];
        v7[19] = 0;

      }
      objc_msgSend(v7, "logOfflineBrowseMode:", v10);
      *((_BYTE *)v7 + 425) = 1;
      *((_BYTE *)v7 + 352) = v10;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("Browse Offline Maps"), CFSTR("localized string not found"), 0));

      if (*((_BYTE *)v7 + 352))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("Search Offline Maps"), CFSTR("localized string not found"), 0));

        v13 = (void *)v15;
      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale preferredLanguages](NSLocale, "preferredLanguages"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "firstObject"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), CFSTR("__internal__searchBarOfflinePlaceholder"), v17));

      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v19, "setObject:forKey:", v13, v18);

      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v20, "synchronize");

    }
    objc_msgSend(*(id *)(a1 + 32), "_setupOfflinePlaceholder");
    v21 = *(_QWORD *)(a1 + 40);
    if (v21)
      (*(void (**)(void))(v21 + 16))();
  }

}

void sub_1006184A0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100618510;
  block[3] = &unk_1011AC860;
  block[4] = *(_QWORD *)(a1 + 32);
  if (qword_1014D2BC0 != -1)
    dispatch_once(&qword_1014D2BC0, block);
}

void sub_100618510(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ticketForSearchFieldPlaceholderWithTraits:", 0));

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1006185AC;
  v4[3] = &unk_1011BE2C0;
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "submitWithHandler:networkActivity:", v4, 0);

}

void sub_1006185AC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (!a3)
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      v5 = v3;
      v6 = a2;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale preferredLanguages](NSLocale, "preferredLanguages"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
      v11 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), CFSTR("__internal__searchBarPlaceholderV2"), v8));

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v9, "setObject:forKey:", v6, v11);

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v10, "synchronize");

      objc_msgSend(v5, "_setPlaceHolder");
    }
  }
}

void sub_100618AE0(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  unsigned __int8 v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    if (!WeakRetained[25])
    {
      v4 = WeakRetained;
      v3 = objc_msgSend(WeakRetained[23], "isActive");
      v2 = v4;
      if ((v3 & 1) == 0)
      {
        objc_msgSend(v4[23], "scrollContentToOriginalPosition");
        v2 = v4;
      }
    }
  }

}

id sub_10061A7F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "searchBarBecomeFirstResponder");
}

void sub_10061C108(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "clearSearch");

  objc_msgSend(*(id *)(a1 + 32), "endEditing");
  objc_msgSend(*(id *)(a1 + 32), "updateContentState");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  v4 = objc_msgSend(v3, "containerStyle");

  if (v4 == (id)1)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
    objc_msgSend(v5, "wantsLayout:", 2);

  }
}

uint64_t sub_10061C4A4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 307) = 0;
  return result;
}

void sub_10061C9A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10061C9BC(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[23], "showCollection:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_10061CABC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10061CAD8(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[23], "editCollection:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

uint64_t sub_10061CC40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10061D3EC(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = sub_100B3A5D4();
  v5 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "oneInsights"));
  objc_msgSend(v3, "isTouristHere");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 280) = v4;

}

void sub_10061D740(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10061D75C(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id *v5;
  void *v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10061D828;
      v7[3] = &unk_1011AC8B0;
      v7[4] = WeakRetained;
      v8 = v3;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

    }
    else
    {
      objc_msgSend(WeakRetained, "cleanSearch");
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5[20], "searchDataProvider"));
      objc_msgSend(v6, "clearMKLocalSearchCompleterQueryState");

    }
  }

}

id sub_10061D828(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "restoreSearchItem:", *(_QWORD *)(a1 + 40));
}

void sub_10061E488(uint64_t a1)
{
  unsigned __int8 v2;
  double v3;
  double v4;
  id v5;

  if (!*(_BYTE *)(a1 + 40)
    || (v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "shouldBeVisible"),
        v3 = 0.0,
        (v2 & 1) == 0))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "frame");
    v3 = v4;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 256), "setConstant:", v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v5, "updateHeightForCurrentLayout");

}

_QWORD *sub_10061E514(_QWORD *result)
{
  _QWORD *v1;
  char v2;
  void *v3;

  v1 = result;
  if (*((_BYTE *)result + 40))
  {
    v2 = 1;
  }
  else
  {
    objc_msgSend(*(id *)(result[4] + 168), "willMoveToParentViewController:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1[4] + 168), "view"));
    objc_msgSend(v3, "removeFromSuperview");

    objc_msgSend(*(id *)(v1[4] + 168), "removeFromParentViewController");
    result = objc_msgSend(*(id *)(v1[4] + 240), "layoutIfNeeded");
    v2 = *((_BYTE *)v1 + 40);
  }
  *(_BYTE *)(v1[4] + 264) = v2;
  return result;
}

void sub_10061E820(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;

  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a1 + 49))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "layoutIfNeeded");
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cardPresentationController"));
  objc_msgSend(v2, "heightForLayout:", objc_msgSend(v3, "containeeLayout"));
  v5 = v4;

  v6 = 0.0;
  if (!*(_BYTE *)(a1 + 49))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "frame", 0.0);
    v6 = v7;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 256), "setConstant:", v6);
  if (*(double *)(a1 + 40) != v5)
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
    objc_msgSend(v8, "updateHeightForCurrentLayout");

  }
}

_QWORD *sub_10061E918(_QWORD *result)
{
  if (*((_BYTE *)result + 40))
  {
    if (!*((_BYTE *)result + 41))
      return objc_msgSend(*(id *)(result[4] + 240), "layoutIfNeeded");
  }
  return result;
}

void sub_10062145C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1006214F0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id *WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v4, "viewController:enterFlyoverForMapItem:", WeakRetained, v3);

  objc_msgSend(WeakRetained[15], "resignFirstResponder");
}

void sub_100621560(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  void *v5;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  if (sub_1002A8AA0(WeakRetained) == 5)
    objc_msgSend(WeakRetained, "clearRetainedSearchQuery");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MKLookAroundEntryPoint entryPointWithMapItem:](MKLookAroundEntryPoint, "entryPointWithMapItem:", v3));

  objc_msgSend(v4, "enterLookAroundWithEntryPoint:lookAroundView:showsFullScreen:originFrame:", v5, 0, 1, CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  objc_msgSend(WeakRetained, "endEditing");

}

void sub_100621618(id a1, MKMapItem *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  MKMapItem *v6;

  v6 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[MKMapItem phoneNumber](v6, "phoneNumber"));
  v3 = objc_msgSend(v2, "length");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[MKMapItem phoneNumber](v6, "phoneNumber"));
    objc_msgSend(v4, "callPhoneNumber:completion:", v5, 0);

  }
}

void sub_10062169C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "url"));
    objc_msgSend(v5, "viewController:openURL:", v4, v6);

  }
}

void sub_100621720(uint64_t a1, void *a2)
{
  id WeakRetained;
  SearchResult *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v7 && WeakRetained)
  {
    v4 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v7);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v5, "viewController:openSearchResult:", *(_QWORD *)(a1 + 32), v4);

    objc_msgSend(WeakRetained, "showDropDown:", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
    objc_msgSend(v6, "endEditing:", 1);

  }
}

void sub_1006217D8(uint64_t a1)
{
  id *WeakRetained;
  HomeDeselectionReason *v2;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    if (sub_1002A8AA0(WeakRetained) == 5)
    {
      v2 = -[HomeDeselectionReason initWithAction:]([HomeDeselectionReason alloc], "initWithAction:", 1);
      objc_msgSend(v3[23], "clearSelectionWithReason:", v2);

    }
    else
    {
      objc_msgSend(v3, "searchBarBecomeFirstResponder");
    }
    WeakRetained = v3;
  }

}

void sub_100621BA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_geoMapItem"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "offlineDownloadRegion"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKUserLocation title](MKUserLocation, "title"));
  v7 = objc_msgSend(v5, "isEqualToString:", v6);

  if (v7)
  {

    v5 = 0;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v8, "viewController:showOfflineMapRegionSelectorForRegion:name:", *(_QWORD *)(a1 + 32), v9, v5);

}

void sub_100621C64(uint64_t a1, void *a2)
{
  SearchResult *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v6);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 416);
  *(_QWORD *)(v4 + 416) = v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100621E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100621E98(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)WeakRetained[41];
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
        (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

        v5 = (void *)v4[41];
      }
      v4[41] = 0;

    }
  }

}

void sub_1006220E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10062210C(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)WeakRetained[41];
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
        (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

        v5 = (void *)v4[41];
      }
      v4[41] = 0;

    }
  }

}

id sub_100622FFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateContentState");
}

id sub_1006239A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 248), "alpha");
}

id sub_1006239B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 248), "setAlpha:");
}

uint64_t sub_100623F4C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 426) = 0;
  return result;
}

void sub_10062429C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "view"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_100624D24(id a1)
{
  UGCPhotoAttributionPreferencesManager *v1;
  void *v2;

  v1 = objc_alloc_init(UGCPhotoAttributionPreferencesManager);
  v2 = (void *)qword_1014D2BC8;
  qword_1014D2BC8 = (uint64_t)v1;

}

void sub_100624E5C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchedPreferences"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dateOfFetchedPreferences"));
  v4 = v3;
  if (v2 && (objc_msgSend(v3, "timeIntervalSinceNow"), v5 < 86400.0))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateError"));
    v7 = sub_100624FEC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v15 = v2;
      v16 = 2112;
      v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using stored preferences: %@ fetched at: %@", buf, 0x16u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10062502C;
    block[3] = &unk_1011B5ED8;
    v13 = *(id *)(a1 + 40);
    v11 = v2;
    v12 = v6;
    v9 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_fetchPhotoAttributionPreferencesWithCompletion:", *(_QWORD *)(a1 + 40));
  }

}

id sub_100624FEC()
{
  if (qword_1014D2BE0 != -1)
    dispatch_once(&qword_1014D2BE0, &stru_1011BE530);
  return (id)qword_1014D2BD8;
}

uint64_t sub_10062502C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], 0, a1[5]);
}

void sub_10062542C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100625458(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32), 0);
}

void sub_100625470(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  NSObject **WeakRetained;
  NSObject **v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  NSObject **v14;
  id v15;

  v6 = a2;
  v7 = a4;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = WeakRetained[3];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100625544;
    v11[3] = &unk_1011B4320;
    v12 = v6;
    v13 = v7;
    v14 = v9;
    v15 = *(id *)(a1 + 32);
    dispatch_async(v10, v11);

  }
}

void sub_100625544(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  id v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v2 = sub_100624FEC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v13 = v4;
    v14 = 2112;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Fetched response %@ with error %@", buf, 0x16u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GEORPPhotoAttributionPreferences photoAttributionPreferencesFromResponse:](GEORPPhotoAttributionPreferences, "photoAttributionPreferencesFromResponse:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(*(id *)(a1 + 48), "_storeFetchedPreferences:", v6);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100625694;
  block[3] = &unk_1011B5ED8;
  v11 = *(id *)(a1 + 56);
  v9 = v6;
  v10 = *(id *)(a1 + 40);
  v7 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100625694(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void sub_10062575C(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  _BOOL8 v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  _QWORD block[4];
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  id v40;

  v2 = objc_alloc_init((Class)GEORPFeedbackRequestParameters);
  v3 = objc_alloc_init((Class)GEORPFeedbackSubmissionParameters);
  objc_msgSend(v2, "setSubmissionParameters:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "submissionParameters"));
  objc_msgSend(v4, "setType:", 19);

  v5 = objc_alloc_init((Class)GEORPFeedbackDetails);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "submissionParameters"));
  objc_msgSend(v6, "setDetails:", v5);

  v7 = objc_alloc_init((Class)GEORPPhotoAttributionPreferencesUpdate);
  objc_msgSend(v5, "setPhotoAttributionPreferencesUpdate:", v7);

  v31 = objc_alloc_init((Class)GEORPPhotoAttributionPreferences);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "photoAttributionPreferencesUpdate"));
  objc_msgSend(v8, "setPreferences:", v31);

  v9 = *(_BYTE *)(a1 + 56) != 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "photoAttributionPreferencesUpdate"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "preferences"));
  objc_msgSend(v11, "setAttributePhotos:", v9);

  v12 = *(_QWORD *)(a1 + 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "photoAttributionPreferencesUpdate"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "preferences"));
  objc_msgSend(v14, "setAttributionName:", v12);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fetchedPreferences"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "version"));

  if (v16)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fetchedPreferences"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "version"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "photoAttributionPreferencesUpdate"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "preferences"));
    objc_msgSend(v20, "setVersion:", v18);

  }
  v21 = sub_100624FEC();
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v40 = v2;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Submitting photo attribution update: %@", buf, 0xCu);
  }

  v38 = 0;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[UGCCredentialsBuilder buildICloudUserCredentialsWithError:](UGCCredentialsBuilder, "buildICloudUserCredentialsWithError:", &v38));
  v24 = v38;
  if (v24)
  {
    v25 = sub_100624FEC();
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v40 = v24;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to create iCloud user info with error %@.  Will not perform submission lookup.", buf, 0xCu);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100625BD0;
    block[3] = &unk_1011ACAD0;
    v37 = *(id *)(a1 + 48);
    v36 = v24;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  else
  {
    objc_initWeak((id *)buf, *(id *)(a1 + 40));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "submissionManager"));

    v29 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "defaultTraits"));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100625BE8;
    v32[3] = &unk_1011BE4C0;
    objc_copyWeak(&v34, (id *)buf);
    v33 = *(id *)(a1 + 48);
    objc_msgSend(v28, "submitOrEnqueueFeedback:userInfo:traits:debugSettings:uploadPolicy:feedbackObjectToUpdate:completion:", v2, v23, v30, 0, 0, 0, v32);

    objc_destroyWeak(&v34);
    objc_destroyWeak((id *)buf);
  }

}

void sub_100625BA4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_100625BD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32), 0);
}

void sub_100625BE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject **WeakRetained;
  NSObject **v8;
  id v9;
  NSObject *v10;
  id *v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  _QWORD v15[2];
  void *v16;
  id v17;
  _QWORD block[4];
  id v19;
  id v20;
  uint8_t buf[4];
  id v22;

  v5 = a2;
  v6 = a3;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      v9 = sub_100624FEC();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed Sundew call with server error %@", buf, 0xCu);
      }

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100625DA0;
      block[3] = &unk_1011ACAD0;
      v11 = &v20;
      v20 = *(id *)(a1 + 32);
      v19 = v6;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      v12 = v19;
    }
    else
    {
      v13 = WeakRetained[3];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100625DB8;
      v14[3] = &unk_1011B4320;
      v11 = (id *)v15;
      v15[0] = v5;
      v15[1] = v8;
      v16 = 0;
      v17 = *(id *)(a1 + 32);
      dispatch_async(v13, v14);

      v12 = v16;
    }

  }
}

uint64_t sub_100625DA0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32), 0);
}

void sub_100625DB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feedbackResult"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "submissionResult"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "photoAttributionPreferencesUpdateResult"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "preferences"));

  objc_msgSend(*(id *)(a1 + 40), "_storeFetchedPreferences:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_errorsInResponse:", *(_QWORD *)(a1 + 32)));
  if (v5)
  {
    v6 = 0;
    v7 = v5;
  }
  else
  {
    v6 = v4;
    v7 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "_finishWithPreferences:serverError:errorAsString:callback:", v6, *(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 56));

}

uint64_t sub_100625F58(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_100626264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10062627C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10062628C(uint64_t a1)
{

}

void sub_100626294(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  if (!v2)
  {
    v3 = objc_msgSend(objc_alloc((Class)GEOObserverHashTable), "initWithProtocol:queue:", &OBJC_PROTOCOL___UGCPhotoAttributionPreferencesObserver, &_dispatch_main_q);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v3;

    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v2);
}

void sub_10062643C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCPhotoAttributionPreferencesManager");
  v2 = (void *)qword_1014D2BD8;
  qword_1014D2BD8 = (uint64_t)v1;

}

void sub_1006266A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1006266C8(uint64_t a1, char a2)
{
  _QWORD block[5];
  id v3;
  char v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10062674C;
  block[3] = &unk_1011BE558;
  v4 = a2;
  block[4] = *(_QWORD *)(a1 + 32);
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v3);
}

void sub_10062674C(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v2, "postNotificationName:object:", off_1014B72C0, *(_QWORD *)(a1 + 32));

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_contactsAuthorizationDismissed");

}

void sub_100626D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100626D80(id a1, NSNumber *a2, RouteLoadingTask *a3, BOOL *a4)
{
  -[RouteLoadingTask cancel](a3, "cancel");
}

void sub_100626E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100626ED8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100626FF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100627090(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10062735C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100627390(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  os_signpost_id_t v10;
  id v11;
  NSObject *v12;
  id WeakRetained;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  _QWORD block[4];
  id v24;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = sub_10043214C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "RouteLoading", "", buf, 2u);
  }

  v11 = sub_10043214C();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "RouteLoadingController received results", buf, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activeTasksSync"));
  objc_sync_enter(v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activeTasks"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 48)));
  objc_msgSend(v15, "removeObjectForKey:", v16);

  objc_sync_exit(v14);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "routesResultsSync"));
  objc_sync_enter(v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mutableRoutesResults"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 48)));
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v5, v19);

  objc_sync_exit(v17);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006275FC;
  block[3] = &unk_1011AC860;
  v20 = v5;
  v24 = v20;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v21, "routeLoadingController:didReceiveRoutesResult:forTransportType:advisoryInfo:", WeakRetained, v20, *(_QWORD *)(a1 + 48), v6);

  v22 = *(id *)(a1 + 48);
  if (v22 == objc_msgSend(WeakRetained, "transportTypeForRealtimeUpdates"))
    objc_msgSend(WeakRetained, "_updateTaskForRealtimeUpdates");

}

void sub_1006275E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1006275FC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = objc_msgSend(v2, "isRunningTest");

  if (v3)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = sub_100627740;
    v13 = sub_100627750;
    v14 = 0;
    v4 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100627758;
    v8[3] = &unk_1011B57F0;
    v8[4] = &v9;
    objc_msgSend(v4, "withValue:orError:", v8, &stru_1011BE5E0);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GEONotificationPreferenceManager sharedManager](GEONotificationPreferenceManager, "sharedManager"));
    v6 = objc_msgSend(v5, "isEnabledForSubTestWithName:", CFSTR("GEOPPTTest_RouteManager_DirectionsRequest"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      objc_msgSend(v7, "postNotificationName:object:", CFSTR("GEOPPTTest_RouteManager_DirectionsRequestEND"), v10[5]);

    }
    _Block_object_dispose(&v9, 8);

  }
}

void sub_100627728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100627740(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100627750(uint64_t a1)
{

}

void sub_100627758(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1006277F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100627A0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100627A20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id location;

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeLoadingTaskFactory"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "taskForRoutes:", v3));

    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeTasksSync"));
      objc_sync_enter(v6);
      objc_msgSend(*(id *)(a1 + 32), "setRouteUpdatingTask:", v5);
      objc_sync_exit(v6);

      objc_initWeak(&location, *(id *)(a1 + 32));
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100627B4C;
      v7[3] = &unk_1011B07A0;
      objc_copyWeak(&v8, &location);
      objc_msgSend(v5, "startWithUpdateHandler:", v7);
      objc_destroyWeak(&v8);
      objc_destroyWeak(&location);
    }

  }
}

void sub_100627B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100627B4C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleResults:", v3);

}

void sub_100627E88(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  id (*v19)(uint64_t, void *);
  void *v20;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;

  v3 = a2;
  v17 = _NSConcreteStackBlock;
  v18 = 3221225472;
  v19 = sub_100628064;
  v20 = &unk_1011B1A50;
  v21 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "indexOfObjectPassingTest:", &v17);
  if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v4, v17, v18, v19, v20));
    v6 = sub_10043214C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);

    if (v8)
    {
      v9 = sub_10043214C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uniqueRouteID"));
        v12 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412547;
        v24 = v11;
        v25 = 2113;
        v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Update came in for %@: %{private}@", buf, 0x16u);

      }
    }
    v22 = *(_QWORD *)(a1 + 40);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v22, 1));
    objc_msgSend(v5, "applyUpdatesToTransitRoute:", v13);

    objc_msgSend(*(id *)(a1 + 48), "addObject:", v5);
    v14 = *(void **)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 40);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uniqueRouteID"));
    objc_msgSend(v14, "setObject:forKey:", v15, v16);

  }
}

id sub_100628064(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uniqueRouteID"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_100628494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006284AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006284BC(uint64_t a1)
{

}

void sub_1006284C4(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;

  v19 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "place"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "address"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "structuredAddress"));

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "locality"));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "title"));
  LODWORD(v7) = objc_msgSend(v12, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

  if ((_DWORD)v7)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "place"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "address"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "structuredAddress"));
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_cellContent_subtitleWithTitle:", *(_QWORD *)(a1 + 32)));
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

  }
  *a4 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "length") != 0;

}

void sub_1006285F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (!v7)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }

}

id sub_1006289DC(void *a1)
{
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  _QWORD v7[4];
  id v8;
  id v9;

  v1 = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100628AB8;
  v7[3] = &unk_1011BE710;
  v2 = objc_msgSend(objc_alloc((Class)NSMutableString), "initWithFormat:", CFSTR("<%@:%p\n"), objc_opt_class(v1), v1);
  v8 = v2;
  v9 = v1;
  v3 = v1;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v7);
  objc_msgSend(v2, "appendString:", CFSTR("\n>"));
  v4 = v9;
  v5 = v2;

  return v5;
}

id sub_100628AB8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  char isKindOfClass;
  void *v8;
  uint64_t v9;
  void *v10;
  id result;

  v5 = a2;
  v6 = objc_opt_class(GEOComposedWaypoint);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);
  v8 = *(void **)(a1 + 32);
  if ((isKindOfClass & 1) != 0)
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortDescription"));
  else
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
  v10 = (void *)v9;

  objc_msgSend(v8, "appendString:", v10);
  result = objc_msgSend(*(id *)(a1 + 40), "count");
  if (a3 + 1 < (unint64_t)result)
    return objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(",\n"));
  return result;
}

UIColor *__cdecl sub_100629324(id a1, MapsTheme *a2)
{
  return -[MapsTheme keyColor](a2, "keyColor");
}

UIColor *__cdecl sub_10062932C(id a1, MapsTheme *a2)
{
  return -[MapsTheme controlBackgroundColor](a2, "controlBackgroundColor");
}

void sub_100629694(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD v57[16];
  _QWORD v58[16];
  _QWORD v59[16];
  _QWORD v60[16];

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_1014D2BE8;
  qword_1014D2BE8 = v1;

  v59[0] = CFSTR("ControlBackgroundColorKey");
  v53 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.968627453, 1.0));
  v60[0] = v53;
  v59[1] = CFSTR("controlTintColorKey");
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor _maps_keyColor](UIColor, "_maps_keyColor"));
  v60[1] = v51;
  v59[2] = CFSTR("HairLineColorKey");
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.200000003));
  v60[2] = v49;
  v59[3] = CFSTR("GreenButtonColorKey");
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:"));
  v60[3] = v47;
  v59[4] = CFSTR("GreenButtonHighlightedColorKey");
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.268235296, 0.765882313, 0.352941185, 1.0));
  v60[4] = v45;
  v59[5] = CFSTR("GroupTableViewBackgroundColorKey");
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.937254906, 0.937254906, 0.956862748, 1.0));
  v60[5] = v43;
  v59[6] = CFSTR("GroupTableViewCellBackgroundColorKey");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 1.0));
  v60[6] = v41;
  v59[7] = CFSTR("BlueButtonHighlightedColorKey");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor _maps_keyColor](UIColor, "_maps_keyColor"));
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0));
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "_colorBlendedWithColor:", v38));
  v60[7] = v37;
  v59[8] = CFSTR("kNavEndButtonBackgroundColor");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 0.282352954, 0.282352954, 1.0));
  v60[8] = v3;
  v59[9] = CFSTR("NavResumeButtonHighlightedColor");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.0500000007));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.100000001));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_colorBlendedWithColor:", v5));
  v60[9] = v6;
  v59[10] = CFSTR("kNavTraySecondaryTextColor");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.392156869, 0.392156869, 0.392156869, 1.0));
  v60[10] = v7;
  v59[11] = CFSTR("VibrantTopColorKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.203921571, 0.223529413, 0.313725501, 0.150000006));
  v60[11] = v8;
  v59[12] = CFSTR("VibrantBackgroundColorKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.479999989, 1.0));
  v60[12] = v9;
  v60[13] = kCAFilterPlusD;
  v59[13] = CFSTR("VibrantTopFilterKey");
  v59[14] = CFSTR("VibrantBackgroundFilterKey");
  v60[14] = kCAFilterColorBurnBlendMode;
  v59[15] = CFSTR("StatusIndicatorHighlightedColorKey");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.0, 0.419607848, 0.874509811, 1.0));
  v60[15] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v60, v59, 16));

  objc_msgSend((id)qword_1014D2BE8, "setObject:forKeyedSubscript:", v11, CFSTR("StandardTheme"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D2BE8, "objectForKeyedSubscript:", CFSTR("StandardTheme")));
  v13 = objc_msgSend(v12, "copy");

  objc_msgSend((id)qword_1014D2BE8, "setObject:forKeyedSubscript:", v13, CFSTR("StandardThemeWithoutVisualEffect"));
  v57[0] = CFSTR("ControlBackgroundColorKey");
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.172549024, 0.168627456, 0.168627456, 1.0));
  v58[0] = v54;
  v57[1] = CFSTR("controlTintColorKey");
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v58[1] = v52;
  v57[2] = CFSTR("HairLineColorKey");
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.150000006));
  v58[2] = v50;
  v57[3] = CFSTR("GreenButtonColorKey");
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.298039228, 0.850980401, 0.392156869, 1.0));
  v58[3] = v56;
  v57[4] = CFSTR("GreenButtonHighlightedColorKey");
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.268235296, 0.765882313, 0.352941185, 1.0));
  v58[4] = v55;
  v57[5] = CFSTR("GroupTableViewBackgroundColorKey");
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.752941191, 0.768627465, 0.78039217, 1.0));
  v58[5] = v48;
  v57[6] = CFSTR("GroupTableViewCellBackgroundColorKey");
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.811764717, 0.827450991, 0.843137264, 1.0));
  v58[6] = v46;
  v57[7] = CFSTR("BlueButtonHighlightedColorKey");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor _maps_keyColor](UIColor, "_maps_keyColor"));
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.100000001));
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "_colorBlendedWithColor:", v42));
  v58[7] = v40;
  v57[8] = CFSTR("kNavEndButtonBackgroundColor");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 0.23137255, 0.188235298, 1.0));
  v58[8] = v14;
  v57[9] = CFSTR("NavResumeButtonHighlightedColor");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.0500000007));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.100000001));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_colorBlendedWithColor:", v16));
  v58[9] = v17;
  v57[10] = CFSTR("kNavTraySecondaryTextColor");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.392156869, 0.392156869, 0.392156869, 1.0));
  v58[10] = v18;
  v57[11] = CFSTR("VibrantTopColorKey");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.0399999991));
  v58[11] = v19;
  v57[12] = CFSTR("VibrantBackgroundColorKey");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.519999981));
  v58[12] = v20;
  v58[13] = kCAFilterPlusL;
  v57[13] = CFSTR("VibrantTopFilterKey");
  v57[14] = CFSTR("VibrantBackgroundFilterKey");
  v58[14] = kCAFilterOverlayBlendMode;
  v57[15] = CFSTR("StatusIndicatorHighlightedColorKey");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.0235294122, 0.360784322, 0.698039234, 1.0));
  v58[15] = v21;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 16));

  objc_msgSend((id)qword_1014D2BE8, "setObject:forKeyedSubscript:", v22, CFSTR("DarkTheme"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D2BE8, "objectForKeyedSubscript:", CFSTR("DarkTheme")));
  v24 = objc_msgSend(v23, "mutableCopy");

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.152941182, 0.184313729, 0.215686277, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v25, CFSTR("ControlBackgroundColorKey"));

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.278431386, 0.305882365, 0.333333343, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v26, CFSTR("HairLineColorKey"));

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.113725491, 0.686274529, 0.925490201, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v27, CFSTR("controlTintColorKey"));

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 1.0, 1.0, 0.439999998));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v28, CFSTR("kNavTraySecondaryTextColor"));

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.90196079, 0.20784314, 0.168627456, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v29, CFSTR("kNavEndButtonBackgroundColor"));

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.278431386, 0.31764707, 0.360784322, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v30, CFSTR("VibrantBackgroundColorKey"));

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.278431386, 0.31764707, 0.360784322, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v31, CFSTR("VibrantTopColorKey"));

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.243137255, 0.776470602, 0.333333343, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v32, CFSTR("GreenButtonColorKey"));

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.218823522, 0.698823512, 0.300000012, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v33, CFSTR("GreenButtonHighlightedColorKey"));

  v34 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.125490203, 0.152941182, 0.180392161, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v34, CFSTR("GroupTableViewBackgroundColorKey"));

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.152941182, 0.184313729, 0.215686277, 1.0));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v35, CFSTR("GroupTableViewCellBackgroundColorKey"));

  v36 = objc_msgSend(v24, "copy");
  objc_msgSend((id)qword_1014D2BE8, "setObject:forKeyedSubscript:", v36, CFSTR("DarkThemeWithoutVisualEffect"));

}

void sub_10062A2C4(id a1)
{
  MapsTheme *v1;
  void *v2;

  v1 = -[MapsTheme initWithMapsThemeStyle:visualEffectStyle:]([MapsTheme alloc], "initWithMapsThemeStyle:visualEffectStyle:", 0, 0);
  v2 = (void *)qword_1014D2BF8;
  qword_1014D2BF8 = (uint64_t)v1;

  +[MKInfoCardThemeManager setTintColorProvider:](MKInfoCardThemeManager, "setTintColorProvider:", &stru_1011BE868);
}

UIColor *__cdecl sub_10062A30C(id a1)
{
  return (UIColor *)objc_msgSend((id)qword_1014D2BF8, "keyColor");
}

id sub_10062A588(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", *(_QWORD *)(a1 + 40)));
  v4 = v3;
  if (v2)
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_flatImageWithColor:", *(_QWORD *)(a1 + 32)));
  else
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "imageWithRenderingMode:", 2));
  v6 = (void *)v5;

  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(*(_QWORD *)(a1 + 48) + 24))
  {
    v7 = objc_retainAutorelease(v6);
    v8 = objc_msgSend(v7, "CGImage");
    objc_msgSend(v7, "scale");
    v9 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageWithCGImage:scale:orientation:](UIImage, "imageWithCGImage:scale:orientation:", v8, 4));
  }
  else
  {
    v9 = v6;
  }
  v10 = v9;

  return v10;
}

void sub_10062AF64(id a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[UITraitCollection _currentTraitCollection](UITraitCollection, "_currentTraitCollection"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithUserInterfaceStyle:](UITraitCollection, "traitCollectionWithUserInterfaceStyle:", 2));
  +[UITraitCollection _setCurrentTraitCollection:](UITraitCollection, "_setCurrentTraitCollection:", v1);

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor systemGray5Color](UIColor, "systemGray5Color")));
  v3 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", objc_msgSend(v2, "CGColor")));
  v4 = (void *)qword_1014D2C08;
  qword_1014D2C08 = v3;

  +[UITraitCollection _setCurrentTraitCollection:](UITraitCollection, "_setCurrentTraitCollection:", v5);
}

void sub_10062B288(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v2 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "globalThemes");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mapsThemeStyleKey:", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));

  v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "globalThemes");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mapsThemeStyleKey:", 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ControlBackgroundColorKey")));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10062B3FC;
  v15[3] = &unk_1011BE8D8;
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("ControlBackgroundColorKey")));
  v17 = v10;
  v11 = v10;
  v12 = v16;
  v13 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithDynamicProvider:](UIColor, "colorWithDynamicProvider:", v15));
  v14 = (void *)qword_1014D2C18;
  qword_1014D2C18 = v13;

}

id sub_10062B3FC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a2, "userInterfaceStyle");
  v4 = 40;
  if (v3 == (id)2)
    v4 = 32;
  return *(id *)(a1 + v4);
}

void sub_10062B4D8(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v2 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "globalThemes");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mapsThemeStyleKey:", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));

  v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "globalThemes");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mapsThemeStyleKey:", 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("HairLineColorKey")));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10062B64C;
  v15[3] = &unk_1011BE8D8;
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("HairLineColorKey")));
  v17 = v10;
  v11 = v10;
  v12 = v16;
  v13 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithDynamicProvider:](UIColor, "colorWithDynamicProvider:", v15));
  v14 = (void *)qword_1014D2C28;
  qword_1014D2C28 = v13;

}

id sub_10062B64C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a2, "userInterfaceStyle");
  v4 = 40;
  if (v3 == (id)2)
    v4 = 32;
  return *(id *)(a1 + v4);
}

uint64_t sub_10062F724(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10062FC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10062FCBC(uint64_t a1)
{
  id *WeakRetained;
  id v2;
  void *v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *((_BYTE *)WeakRetained + 32))
  {
    v4 = WeakRetained;
    v2 = objc_loadWeakRetained(WeakRetained + 21);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "item"));
    objc_msgSend(v3, "center");
    objc_msgSend(v2, "_updatePanWithTranslation:");

    WeakRetained = v4;
  }

}

void sub_100631B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100631B48(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t result;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentState"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapRegion"));
  v8 = GEOMapRectForMapRegion(v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13;

  objc_msgSend(v4, "coordinate");
  objc_msgSend(v4, "coordinate");

  v16 = GEOMapPointForCoordinate(v15);
  result = GEOMapRectContainsPoint(v8, v10, v12, v14, v16, v17);
  if ((_DWORD)result)
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

void sub_100631CC8(id a1)
{
  char *v1;

  if (dlopen((const char *)objc_msgSend(CFSTR("/System/Library/Frameworks/MessageUI.framework/MessageUI"), "fileSystemRepresentation"), 4))
  {
    qword_1014D2C38 = (uint64_t)NSClassFromString(CFSTR("MFMailComposeViewController"));
    if (!qword_1014D2C38)
      NSLog(CFSTR("Could not find MFMailComposeViewController\n"));
  }
  else
  {
    v1 = dlerror();
    NSLog(CFSTR("Could not load MessageUI from %@ (%s)"), CFSTR("/System/Library/Frameworks/MessageUI.framework/MessageUI"), v1);
  }
}

void sub_100632534(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "debugController:choseTraceAtPath:startNav:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120), 0);

}

void sub_100632584(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  _QWORD v12[15];
  void *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120)));
  v13 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
  v4 = objc_msgSend(objc_alloc((Class)UIActivityViewController), "initWithActivityItems:applicationActivities:", v3, 0);
  v12[0] = UIActivityTypePostToFacebook;
  v12[1] = UIActivityTypePostToWeibo;
  v12[2] = UIActivityTypePrint;
  v12[3] = UIActivityTypeAssignToContact;
  v12[4] = UIActivityTypeSaveToCameraRoll;
  v12[5] = UIActivityTypeAddToReadingList;
  v12[6] = UIActivityTypePostToFlickr;
  v12[7] = UIActivityTypePostToVimeo;
  v12[8] = UIActivityTypePostToTencentWeibo;
  v12[9] = UIActivityTypeOpenInIBooks;
  v12[10] = UIActivityTypeMarkupAsPDF;
  v12[11] = UIActivityTypeSharePlay;
  v12[12] = UIActivityTypeCollaborationInviteWithLink;
  v12[13] = UIActivityTypeCollaborationCopyLink;
  v12[14] = UIActivityTypeAddToHomeScreen;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v12, 15));
  objc_msgSend(v4, "setExcludedActivityTypes:", v5);
  objc_msgSend(v4, "setTitle:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
  if ((objc_opt_respondsToSelector(v4, "popoverPresentationController") & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "popoverPresentationController"));
    objc_msgSend(v7, "setSourceView:", v6);

  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100632808;
  v9[3] = &unk_1011AC8B0;
  v8 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 32);
  v11 = v8;
  objc_msgSend(v10, "presentViewController:animated:completion:", v4, 1, v9);

}

void sub_100632808(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "deselectRowAtIndexPath:animated:", *(_QWORD *)(a1 + 40), 0);

}

id sub_10063284C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_showDeleteFileSheet");
}

void sub_100632854(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "deselectRowAtIndexPath:animated:", *(_QWORD *)(a1 + 40), 0);

}

id sub_100632C1C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v2, "deselectRowAtIndexPath:animated:", *(_QWORD *)(a1 + 40), 1);

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(id *)(a1 + 48);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[TraceManager sharedManager](TraceManager, "sharedManager", (_QWORD)v11));
        objc_msgSend(v9, "deleteUserTraceWithPath:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  return objc_msgSend(*(id *)(a1 + 32), "reloadTraces");
}

void sub_100632D5C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v2, "deselectRowAtIndexPath:animated:", *(_QWORD *)(a1 + 40), 1);

}

void sub_100632F4C(id a1)
{
  id v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  id v5;
  id v6;
  id v7;
  __int16 v8;
  uint8_t buf[2];
  __int16 v10;
  __int16 v11;

  if ((MGGetBoolAnswer(CFSTR("arkit")) & 1) != 0)
  {
    if (MGGetSInt32Answer(CFSTR("DeviceClassNumber"), 0xFFFFFFFFLL) == 1)
    {
      if ((MGGetBoolAnswer(CFSTR("DeviceSupportsMapsOpticalHeading")) & 1) != 0)
      {
        v1 = sub_1006330A8();
        v2 = objc_claimAutoreleasedReturnValue(v1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        {
          v8 = 0;
          v3 = "VIO is supported on the current device";
          v4 = (uint8_t *)&v8;
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
        }
      }
      else
      {
        byte_1014D56C8 = 1;
        v7 = sub_1006330A8();
        v2 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v3 = "VIO is not supported because the current device does not support the DeviceSupportsMapsOpticalHeading gestalt key";
          v4 = buf;
          goto LABEL_12;
        }
      }
    }
    else
    {
      byte_1014D56C8 = 1;
      v6 = sub_1006330A8();
      v2 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 0;
        v3 = "VIO is not supported because the current device is not an iPhone";
        v4 = (uint8_t *)&v10;
        goto LABEL_12;
      }
    }
  }
  else
  {
    byte_1014D56C8 = 1;
    v5 = sub_1006330A8();
    v2 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v3 = "VIO is not supported because the current device does not support ARKit";
      v4 = (uint8_t *)&v11;
      goto LABEL_12;
    }
  }

}

id sub_1006330A8()
{
  if (qword_1014D2C50 != -1)
    dispatch_once(&qword_1014D2C50, &stru_1011BE960);
  return (id)qword_1014D2C48;
}

void sub_1006330E8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOAvailability");
  v2 = (void *)qword_1014D2C48;
  qword_1014D2C48 = (uint64_t)v1;

}

NSString *__cdecl sub_1006335EC(id a1, GEOSharedNavState *a2, unint64_t a3)
{
  return (NSString *)-[GEOSharedNavState _transportTypeStringForAnalytics](a2, "_transportTypeStringForAnalytics", a3);
}

BOOL sub_1006339D4(id a1, MapsSuggestionsEntry *a2)
{
  MapsSuggestionsEntry *v2;
  id v3;
  void *v4;
  BOOL v5;

  v2 = a2;
  v3 = -[MapsSuggestionsEntry type](v2, "type");
  if (!v3 || v3 == (id)6)
  {
    v5 = 0;
  }
  else if (v3 == (id)5)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[MapsSuggestionsEntry geoMapItem](v2, "geoMapItem"));
    v5 = v4 != 0;

  }
  else
  {
    v5 = 1;
  }

  return v5;
}

HomeOutlineSectionControllerConfiguration *sub_100633E34(uint64_t a1, void *a2)
{
  id v3;
  HomeOutlineSectionControllerConfiguration *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HomeOutlineSectionControllerConfiguration *v13;

  v3 = a2;
  v4 = [HomeOutlineSectionControllerConfiguration alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collectionView"));
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "configuration"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "actionCoordinator"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "homeActionDelegate"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_storage"));
  v13 = -[HomeOutlineSectionControllerConfiguration initWithCollectionView:sectionIdentifier:delegate:actionCoordinator:homeActionDelegate:storage:](v4, "initWithCollectionView:sectionIdentifier:delegate:actionCoordinator:homeActionDelegate:storage:", v6, v3, v7, v9, v11, v12);

  return v13;
}

void sub_100634110(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_100634148(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_expandItem:", v3);

  return 0;
}

uint64_t sub_10063418C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_collapseItem:", v3);

  return 0;
}

NSString *__cdecl sub_100634C70(id a1, id a2, unint64_t a3)
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class(a2, a2);
  return NSStringFromClass(v3);
}

void sub_100634F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100634F54(uint64_t a1)
{
  id WeakRetained;

  if (*(_BYTE *)(a1 + 40))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_didCompleteInitialUpdate");

  }
}

void sub_100635CA8(uint64_t a1)
{
  double v1;
  void *v2;
  id v3;

  v1 = *(double *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "collectionView"));
  objc_msgSend(v2, "setAlpha:", v1);

}

uint64_t sub_100635D00(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100635D14(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
  {
    result = *(_QWORD *)(result + 32);
    if (result)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

NSString *__cdecl sub_100635D30(id a1, HomeOutlineSectionController *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[HomeOutlineSectionController configuration](a2, "configuration", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sectionIdentifier"));

  return (NSString *)v4;
}

NSString *__cdecl sub_100635D6C(id a1, MapsUIDiffableDataSourceOutlineNodeSnapshot *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot identifierPath](a2, "identifierPath", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "visualDescription"));

  return (NSString *)v4;
}

NSString *__cdecl sub_100635DA8(id a1, MapsUIDiffableDataSourceOutlineNodeSnapshot *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot identifierPath](a2, "identifierPath", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "visualDescription"));

  return (NSString *)v4;
}

NSString *__cdecl sub_100635DE4(id a1, MapsUIDiffableDataSourceOutlineNodeSnapshot *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot identifierPath](a2, "identifierPath", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "visualDescription"));

  return (NSString *)v4;
}

NSString *__cdecl sub_100635E20(id a1, MapsUIDiffableDataSourceOutlineNodeSnapshot *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot identifierPath](a2, "identifierPath", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "visualDescription"));

  return (NSString *)v4;
}

NSString *__cdecl sub_100635E5C(id a1, MapsUIDiffableDataSourceOutlineNodeSnapshot *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot identifierPath](a2, "identifierPath", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "visualDescription"));

  return (NSString *)v4;
}

NSString *__cdecl sub_100635E98(id a1, MapsUIDiffableDataSourceOutlineNodeSnapshot *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot identifierPath](a2, "identifierPath", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "visualDescription"));

  return (NSString *)v4;
}

id sub_100637BE4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_identifierPathForIndexPath:", a2);
}

void sub_100637E80(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "collectionView:didSelectItemAtIndexPath:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

id sub_1006386B0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_completeFocusAfterScrollingWithSuccess:", a2);
}

void sub_100638768(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateFocusAfterScrolling");

}

void sub_1006396A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006396B8(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  void *v24;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "clientImageUuid"));
  v7 = a1[5];
  v8 = *(void **)(a1[4] + 16);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rawImageData"));

  v10 = objc_msgSend(v8, "saveImageWithSubmissionIdentifier:imageIdentifier:imageData:", v7, v6, v9);
  v11 = *(_QWORD *)(a1[6] + 8);
  if (*(_BYTE *)(v11 + 24))
    v12 = v10;
  else
    v12 = 0;
  *(_BYTE *)(v11 + 24) = v12;
  v13 = sub_100431FFC();
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = v14;
  if (v10)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v16 = a1[5];
      v21 = 138412546;
      v22 = v16;
      v23 = 2112;
      v24 = v6;
      v17 = "Successfully saved image at path %@/%@";
      v18 = v15;
      v19 = OS_LOG_TYPE_INFO;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, (uint8_t *)&v21, 0x16u);
    }
  }
  else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v20 = a1[5];
    v21 = 138412546;
    v22 = v20;
    v23 = 2112;
    v24 = v6;
    v17 = "Failed to save image at path %@/%@";
    v18 = v15;
    v19 = OS_LOG_TYPE_ERROR;
    goto LABEL_9;
  }

}

void sub_10063991C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1006399EC;
  v4[3] = &unk_1011BEBC8;
  objc_copyWeak(&v6, &location);
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v3, "getTasksWithCompletionHandler:", v4);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);

}

void sub_1006399D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1006399EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  _BYTE v24[128];

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v16 = a1;
    v17 = v4;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    if (!v7)
      goto LABEL_17;
    v8 = v7;
    v9 = *(_QWORD *)v19;
    while (1)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v11, "state", v16, v17) == (id)3)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "taskDescription"));
          v13 = sub_100788894(v12);

          if (v13 == 2)
          {
            v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "error"));
            objc_msgSend(WeakRetained, "_handleCorrectionsUploadTask:withSessionError:", v11, v14);
          }
          else
          {
            if (v13 != 1)
              continue;
            v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "error"));
            objc_msgSend(WeakRetained, "_handleImageUploadTask:withSessionError:", v11, v14);
          }
        }
        else
        {
          v15 = sub_100431FFC();
          v14 = objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v23 = v11;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Not handling task %@", buf, 0xCu);
          }
        }

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
      if (!v8)
      {
LABEL_17:

        a1 = v16;
        v4 = v17;
        break;
      }
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_100639C74(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:](NSURLSessionConfiguration, "backgroundSessionConfigurationWithIdentifier:", CFSTR("com.apple.Maps.rap.submission")));
    objc_msgSend(v2, "set_allowsExpensiveAccess:", 1);
    objc_msgSend(v2, "setAllowsCellularAccess:", 1);
    objc_msgSend(v2, "set_requiresPowerPluggedIn:", 0);
    objc_msgSend(v2, "setSessionSendsLaunchEvents:", 1);
    v3 = objc_claimAutoreleasedReturnValue(+[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v2, *(_QWORD *)(a1 + 32), 0));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100639F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100639F54(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[3], "removeImageUploadObjectsForSubmissionIdentifier:", *(_QWORD *)(a1 + 32));
    if (objc_msgSend(v4, "_saveCorrections:submissionIdentifier:addARPCHeaders:", v5, *(_QWORD *)(a1 + 32), 1))objc_msgSend(v4, "_dispatchCorrectionsUploadForSubmissionIdentifier:newRetryCount:isPOIEnrichment:", *(_QWORD *)(a1 + 32), 0, objc_msgSend(v5, "isPOIEnrichment"));
  }

}

void sub_10063B13C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uploadTaskWithRequest:fromFile:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v4 = sub_100788D1C(*(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64), *(_QWORD *)(a1 + 80));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setTaskDescription:", v5);

  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BackgroundFeedbackUploader resubmissionDateWithRetryCount:](BackgroundFeedbackUploader, "resubmissionDateWithRetryCount:"));
    objc_msgSend(v3, "setEarliestBeginDate:", v6);

  }
  v7 = sub_100431FFC();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 80);
    v13 = 138413058;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    v19 = 2048;
    v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Starting image upload with clientId %@ and imageId %@ to url %@ with retry count %ld", (uint8_t *)&v13, 0x2Au);
  }

  objc_msgSend(v3, "resume");
}

void sub_10063B450(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uploadTaskWithRequest:fromFile:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v4 = sub_100788E20(*(void **)(a1 + 48), *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setTaskDescription:", v5);

  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[BackgroundFeedbackUploader resubmissionDateWithRetryCount:](BackgroundFeedbackUploader, "resubmissionDateWithRetryCount:"));
    v7 = sub_100431FFC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v13 = 138412290;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Creating earliest begin date %@", (uint8_t *)&v13, 0xCu);
    }

    objc_msgSend(v3, "setEarliestBeginDate:", v6);
  }
  v9 = sub_100431FFC();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = *(void **)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = 138412546;
    v14 = v11;
    v15 = 2112;
    v16 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Starting corrections upload %@ to url %@", (uint8_t *)&v13, 0x16u);
  }

  objc_msgSend(v3, "resume");
}

id sub_10063CB94()
{
  if (qword_1014D2C60 != -1)
    dispatch_once(&qword_1014D2C60, &stru_1011BEC88);
  return (id)qword_1014D2C58;
}

void sub_10063CE4C(uint64_t a1)
{
  id WeakRetained;
  unsigned int v2;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v2 = objc_msgSend(WeakRetained, "isBatteryLevelTooLow");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stateManager"));
    v4 = v3;
    if (v2)
      objc_msgSend(v3, "recordSessionDisableEvent:", 1);
    else
      objc_msgSend(v3, "resetSessionDisableEvent:", 1);

    WeakRetained = v5;
  }

}

void sub_10063CEF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionBatteryLevelMonitor");
  v2 = (void *)qword_1014D2C58;
  qword_1014D2C58 = (uint64_t)v1;

}

uint64_t sub_10063E714(uint64_t a1)
{
  uint64_t v1;

  v1 = 12;
  if ((a1 & 1) == 0)
    v1 = 15;
  if ((a1 & 2) != 0)
    v1 &= 0xAu;
  if ((a1 & 4) != 0)
    v1 &= 3u;
  if ((a1 & 8) != 0)
    v1 &= 0x5555555555555555uLL;
  if (a1)
    return v1;
  else
    return -1;
}

void sub_10063E920(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 120));
  if (WeakRetained)
  {

  }
  else if (objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &OBJC_PROTOCOL___CarCardStyleProviding))
  {
    objc_msgSend(*(id *)(a1 + 32), "setStyleProvider:", *(_QWORD *)(a1 + 40));
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v4, "bounds");
  objc_msgSend(v3, "setFrame:");

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v5, "addSubview:", v3);

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "topAnchor"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessoryContainerView"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "bottomAnchor"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "constraintEqualToAnchor:", v20));
  v23[0] = v19;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "leftAnchor"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "leftAnchor"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "constraintEqualToAnchor:", v16));
  v23[1] = v15;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bottomAnchor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bottomAnchor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "constraintEqualToAnchor:", v8));
  v23[2] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rightAnchor"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "rightAnchor"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "constraintEqualToAnchor:", v12));
  v23[3] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 4));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v14);

}

void sub_10063EF54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10063EF6C(v1);
  _Unwind_Resume(a1);
}

void sub_10063EF6C(uint64_t a1)
{

}

void sub_10063F010(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10063EF6C(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10063F028(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_OWORD *)(a1 + 44) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  objc_storeStrong((id *)(a1 + 64), *((id *)a2 + 8));
  objc_storeStrong((id *)(a1 + 72), *((id *)a2 + 9));
  result = (__n128)a2[5];
  v8 = a2[6];
  v9 = a2[7];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

id sub_10063F5FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setHighlighted:", 0);
}

void sub_100640F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  uint64_t v19;

  if (!v19)
  {

  }
  _Unwind_Resume(exception_object);
}

void sub_1006412AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100641358(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10063EF6C(v1);
  _Unwind_Resume(a1);
}

UIColor *__cdecl sub_1006421F4(id a1, UITraitCollection *a2)
{
  void *v2;

  if ((id)-[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle") == (id)2)
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemWhiteColor](UIColor, "systemWhiteColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
  return (UIColor *)v2;
}

void sub_100642358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100642378(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  id v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_updateMenu");
    v3 = v2[13];
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1006424B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006424D4(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v14 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));

    *((_DWORD *)v14 + 30) = objc_msgSend(v3, "_applicationState");
    objc_msgSend(v3, "_setApplicationState:", 9);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "iosBasedChromeViewController"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "acquireExploreMapHikingMapToken"));
    v6 = (void *)*((_QWORD *)v14 + 16);
    *((_QWORD *)v14 + 16) = v5;

    if (objc_msgSend(v3, "_isPitched"))
      objc_msgSend(v3, "_exit3DMode");
    *((_BYTE *)v14 + 124) = objc_msgSend(v3, "isPitchEnabled");
    objc_msgSend(v3, "setPitchEnabled:", 0);
    objc_msgSend(v3, "addSubview:", *((_QWORD *)v14 + 14));
    objc_msgSend(v14, "_insertEditStackButtons");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "composedRoute"));
    objc_msgSend(*((id *)v14 + 1), "setRoute:", v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v14 + 5), "lastObject"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "anchorPoints"));
    v10 = objc_msgSend(v9, "count");

    if ((unint64_t)v10 <= 1)
      objc_msgSend(v14, "_requeryStateWithAction:shouldRecenterOnCompletion:", 0, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "chromeViewController"));
    v12 = sub_1002A8AA0(v11);

    if (v12 == 5)
      objc_msgSend(v3, "_setScaleVisibility:", 1);
    else
      objc_msgSend(v14, "_updateScaleAndCompass");
    objc_msgSend(v14, "_updateCoachingPillWithIgnoreChromeTransitioning:", 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v13, "captureUserAction:onTarget:eventValue:", 21, 131, 0);

    WeakRetained = v14;
  }

}

void sub_100642810(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_10064284C(uint64_t a1)
{
  id *WeakRetained;
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1004320DC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Will stop ripple animation (resign)", v9, 2u);
    }

    +[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:](NSObject, "cancelPreviousPerformRequestsWithTarget:selector:object:", WeakRetained, "_removeRippleView", 0);
    objc_msgSend(WeakRetained, "_removeRippleView");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mapView"));

    objc_msgSend(v5, "_setApplicationState:", *((unsigned int *)WeakRetained + 30));
    objc_msgSend(v5, "setPitchEnabled:", *((unsigned __int8 *)WeakRetained + 124));
    objc_msgSend(WeakRetained[14], "removeFromSuperview");
    objc_msgSend(WeakRetained, "_removeEditStackButtons");
    objc_msgSend(WeakRetained[17], "dismissAnimated:completion:", 1, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v7 = sub_1002A8AA0(v6);

    if (v7 == 5)
    {
      if (+[MapsSettings alwaysShowScale](MapsSettings, "alwaysShowScale"))
        v8 = 2;
      else
        v8 = 0;
      objc_msgSend(v5, "_setScaleVisibility:", v8);
    }
    else
    {
      objc_msgSend(v5, "setShowsScale:", 1);
      objc_msgSend(v5, "setShowsCompass:", 1);
    }

  }
}

void sub_1006429AC(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[16];
    WeakRetained[16] = 0;
    v3 = WeakRetained;

    WeakRetained = v3;
  }

}

void sub_1006429E4(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[16];
    WeakRetained[16] = 0;
    v3 = WeakRetained;

    WeakRetained = v3;
  }

}

id sub_1006436A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_moveContextMenuToPoint:anchorPoint:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
}

id sub_100643EEC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setAlpha:", 1.0);
}

void sub_1006443F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100644420(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  char v15;
  char v16;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100644508;
  block[3] = &unk_1011BED10;
  objc_copyWeak(&v14, (id *)(a1 + 40));
  v11 = v5;
  v15 = *(_BYTE *)(a1 + 48);
  v7 = *(id *)(a1 + 32);
  v16 = *(_BYTE *)(a1 + 49);
  v12 = v7;
  v13 = v6;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v14);
}

void sub_100644508(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  double v24;
  double v25;
  void *v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  id v36;
  void *v37;
  int v38;
  uint64_t v39;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = WeakRetained[6];
    WeakRetained[6] = 0;

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[5], "lastObject"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "anchorPoints"));
    v7 = objc_msgSend(v6, "count");

    if (!v7)
    {
      v8 = sub_1004320DC();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v38) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Will stop ripple animation (map item)", (uint8_t *)&v38, 2u);
      }

      +[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:](NSObject, "cancelPreviousPerformRequestsWithTarget:selector:object:", v3, "_removeRippleView", 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[19], "rippleView"));
      objc_msgSend(v10, "timeUntilAnimationStop");
      v12 = v11;

      objc_msgSend(v3, "performSelector:withObject:afterDelay:", "_removeRippleView", 0, v12);
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
    if (v13)
    {
      if (*(_BYTE *)(a1 + 64))
      {
        objc_msgSend(*(id *)(a1 + 40), "_coordinate");
        v15 = v14;
        v17 = v16;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_geoMapItem"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "name"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[GEOComposedRouteAnchorPoint anchorPointWithCoordinate:isCurrentLocation:name:](GEOComposedRouteAnchorPoint, "anchorPointWithCoordinate:isCurrentLocation:name:", 1, v19, v15, v17, 1.79769313e308));

      }
      else
      {
        if (*(_BYTE *)(a1 + 65))
        {
          objc_msgSend(*(id *)(a1 + 40), "_coordinate");
          v32 = v31;
          v34 = v33;
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_geoMapItem"));
          v35 = (id)objc_claimAutoreleasedReturnValue(+[GEOComposedRouteAnchorPoint anchorPointWithMapItem:coordinate:](GEOComposedRouteAnchorPoint, "anchorPointWithMapItem:coordinate:", v18, v32, v34, 1.79769313e308));
        }
        else
        {
          v36 = objc_alloc((Class)GEOComposedRouteAnchorPoint);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_geoMapItem"));
          v35 = objc_msgSend(v36, "initWithMapItem:", v18);
        }
        v20 = v35;
      }

      objc_msgSend(v20, "setIsCurrentLocation:", *(unsigned __int8 *)(a1 + 64));
    }
    else
    {
      v21 = sub_1004320DC();
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_QWORD *)(a1 + 48);
        v38 = 138543362;
        v39 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to refine map item for anchor point. error: %{public}@", (uint8_t *)&v38, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 40), "_coordinate");
      v26 = *(void **)(a1 + 40);
      if (!v26 || (v27 = v24, v28 = v25, v25 < -180.0) || v25 > 180.0 || v24 < -90.0 || v24 > 90.0)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_errorMessageForError:directionsError:request:isOffline:shouldBackoutEdit:", *(_QWORD *)(a1 + 48), 0, 0, 0, 0));
        objc_msgSend(v3, "_presentPopupViewForMessage:timeout:isError:ignoreChromeTransitioning:", v20, 1, 0, 10.0);
LABEL_26:

        goto LABEL_27;
      }
      if (*(_BYTE *)(a1 + 64))
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "_geoMapItem"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "name"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[GEOComposedRouteAnchorPoint anchorPointWithCoordinate:isCurrentLocation:name:](GEOComposedRouteAnchorPoint, "anchorPointWithCoordinate:isCurrentLocation:name:", 1, v30, v27, v28, 1.79769313e308));

LABEL_25:
        objc_msgSend(v3, "_appendAnchorPoint:", v20);
        goto LABEL_26;
      }
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[GEOComposedRouteAnchorPoint anchorPointWithCoordinate:](GEOComposedRouteAnchorPoint, "anchorPointWithCoordinate:", v24, v25, 1.79769313e308));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_geoMapItem"));
      objc_msgSend(v20, "refineWithMapItem:", v37);

    }
    objc_msgSend(v20, "setIsCoordinate:", *(unsigned __int8 *)(a1 + 65));
    goto LABEL_25;
  }
LABEL_27:

}

void sub_100644A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100644A78(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      v6 = sub_1004320DC();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 138412290;
        v12 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Validation failed for anchor point: %@", (uint8_t *)&v11, 0xCu);
      }

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_errorMessageForError:directionsError:request:isOffline:shouldBackoutEdit:", v3, 0, 0, 0, 0));
      objc_msgSend(v5, "_presentPopupViewForMessage:timeout:isError:ignoreChromeTransitioning:", v8, 1, 0, 10.0);

    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[5], "lastObject"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "instanceByAddingAnchorPoint:", *(_QWORD *)(a1 + 32)));
      objc_msgSend(v5, "_pushEditState:shouldRecenterOnCompletion:", v10, 0);

    }
  }

}

void sub_100645770(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;

  v9 = a2;
  v5 = a3;
  if (v9 | v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
    objc_msgSend(v6, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v7, *(_QWORD *)(a1 + 40), v9, v5);

  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(void))(v8 + 16))();

}

void sub_1006459F8(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;

  v9 = a2;
  v5 = a3;
  if (v9 | v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storageID"));
    objc_msgSend(v6, "interruptConvertToNavigableSavedRouteID:routeName:error:directionsError:", v7, *(_QWORD *)(a1 + 40), v9, v5);

  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(void))(v8 + 16))();

}

void sub_100645E04(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  SearchResult *v6;
  void *v7;
  SearchFieldItem *v8;
  void *v9;
  SearchFieldItem *v10;
  DirectionItem *v11;
  void *v12;
  DirectionItem *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionCoordinator"));
  v3 = objc_opt_class(ActionCoordinator);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    v4 = v2;
  else
    v4 = 0;
  v5 = v4;

  v6 = objc_opt_new(SearchResult);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "routeData"));
  -[SearchResult setRouteData:](v6, "setRouteData:", v7);

  v8 = objc_opt_new(SearchFieldItem);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
  -[SearchFieldItem setSearchResult:](v8, "setSearchResult:", v9);

  v10 = objc_opt_new(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v10, "setSearchResult:", v6);
  v11 = [DirectionItem alloc];
  v18[0] = v8;
  v18[1] = v10;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2));
  v13 = -[DirectionItem initWithItems:transportType:](v11, "initWithItems:transportType:", v12, 0);

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v16[0] = CFSTR("DirectionsSessionInitiatorKey");
  v16[1] = CFSTR("DirectionsRoutePlanningSessionSourceKey");
  v17[0] = &off_10126E530;
  v17[1] = &off_10126E548;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
  objc_msgSend(v5, "viewController:doDirectionItem:withUserInfo:", v14, v13, v15);

}

void sub_1006463F0(uint64_t a1)
{
  uint64_t v1;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 96))
  {
    _objc_msgSend(*(id *)(v1 + 112), "performPrimaryAction");
  }
  else
  {
    v2 = sub_1004320DC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "_anchorPointAttachedToMenu was unset after the context menu was requested", v4, 2u);
    }

  }
}

id sub_1006465E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setAlpha:", 0.0);
}

void sub_10064678C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006467B0(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapSelectionManager"));
    objc_msgSend(v3, "clearSelection");

    objc_msgSend(v4, "_setMenuAttachedAnchorPoint:", 0);
    WeakRetained = v4;
  }

}

void sub_100646814(uint64_t a1)
{
  dispatch_time_t v2;

  v2 = dispatch_time(0, 100000000);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, *(dispatch_block_t *)(a1 + 32));
}

void sub_100646D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100646D3C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  id *WeakRetained;
  id *v12;
  id v13;
  NSObject *v14;
  id v15;
  const char *v16;
  void *v17;
  void *v18;
  char *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  unsigned int v26;
  id v27;
  NSObject *v28;
  void *v29;
  double v30;
  double v31;
  id v32;
  NSObject *v33;
  id v34;
  char *v35;
  void *v36;
  id v37;
  char v38;
  _QWORD block[5];
  char v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v12 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_21;
  if (v8)
  {
    v13 = sub_1004320DC();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "anchorPoints"));
      v37 = v9;
      v15 = v10;
      v16 = (const char *)objc_msgSend(v36, "count");
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "anchorPoints"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "anchorPoints"));
      v19 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "componentsJoinedByString:", CFSTR("\n")));
      *(_DWORD *)buf = 134218242;
      v42 = v16;
      v10 = v15;
      v43 = 2112;
      v44 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Received route with %lu anchor points:\n%@", buf, 0x16u);

      v9 = v37;
    }

    objc_msgSend(v8, "updateCustomRouteStartEndCaptions");
    objc_msgSend(v8, "updateMyLocationAnchorNames");
    v20 = v12[21];
    objc_storeStrong(v12 + 21, a2);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "chromeViewController"));
    objc_msgSend(v21, "setNeedsUpdateComponent:animated:", CFSTR("routeAnnotations"), 1);

    objc_msgSend(v12[1], "setRoute:", v8);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "chromeViewController"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "mapSelectionManager"));
    objc_msgSend(v23, "clearSelection");

    objc_msgSend(v12, "_insertRecenterButtonIfNeeded");
    if (!v20)
      objc_msgSend(v12, "_showRecenterButton");
    objc_msgSend(*(id *)(a1 + 32), "updateWithSuccessfulRoute:", v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1006471B0;
    block[3] = &unk_1011ACE58;
    v40 = *(_BYTE *)(a1 + 56);
    block[4] = v12;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    goto LABEL_21;
  }
  if (v9)
  {
    v38 = 0;
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_errorMessageForError:directionsError:request:isOffline:shouldBackoutEdit:", v9, v10, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 57), &v38));
    objc_msgSend(v12, "_presentPopupViewForMessage:timeout:isError:ignoreChromeTransitioning:", v24, 1, 0, 10.0);
    if (v38)
      objc_msgSend(v12, "_backoutLastState");
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12[19], "rippleView"));
    v26 = objc_msgSend(v25, "isAnimating");

    if (v26)
    {
      v27 = sub_1004320DC();
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Will stop ripple animation (route failure)", buf, 2u);
      }

      +[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:](NSObject, "cancelPreviousPerformRequestsWithTarget:selector:object:", v12, "_removeRippleView", 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12[19], "rippleView"));
      objc_msgSend(v29, "timeUntilAnimationStop");
      v31 = v30;

      objc_msgSend(v12, "performSelector:withObject:afterDelay:", "_removeRippleView", 0, v31);
    }
LABEL_20:

    goto LABEL_21;
  }
  v32 = sub_1004318FC();
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v42 = "-[MapsRouteCreationContext _requeryStateWithAction:shouldRecenterOnCompletion:]_block_invoke";
    v43 = 2080;
    v44 = "MapsRouteCreationContext.m";
    v45 = 1024;
    v46 = 1203;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
  }

  if (sub_100A70734())
  {
    v34 = sub_1004318FC();
    v24 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v35 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
      *(_DWORD *)buf = 138412290;
      v42 = v35;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

    }
    goto LABEL_20;
  }
LABEL_21:

}

void sub_1006471B0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  NSObject *v5;
  void *v6;
  double v7;
  double v8;
  uint8_t v9[16];

  if (*(_BYTE *)(a1 + 40))
    objc_msgSend(*(id *)(a1 + 32), "_centerOnCurrentRouteAnimated:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "rippleView"));
  v3 = objc_msgSend(v2, "isAnimating");

  if (v3)
  {
    v4 = sub_1004320DC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Will stop ripple animation (route success)", v9, 2u);
    }

    +[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:](NSObject, "cancelPreviousPerformRequestsWithTarget:selector:object:", *(_QWORD *)(a1 + 32), "_removeRippleView", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "rippleView"));
    objc_msgSend(v6, "timeUntilAnimationStop");
    v8 = v7;

    objc_msgSend(*(id *)(a1 + 32), "performSelector:withObject:afterDelay:", "_removeRippleView", 0, v8);
  }
}

uint64_t sub_1006478D0(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 32);
  if (v1)
    *v1 = 1;
  return result;
}

void sub_100647AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100647B20(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  unsigned __int8 v8;
  MapsPopupMessageView *v9;
  uint64_t v10;
  double v11;
  MapsPopupMessageView *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  _QWORD v21[4];
  id v22;
  uint8_t buf[16];

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if ((*(_BYTE *)(a1 + 56)
       || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController")),
           v6 = objc_msgSend(v5, "isTransitioning"),
           v5,
           (v6 & 1) == 0))
      && (v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chromeViewController")),
          v8 = objc_msgSend(v7, "isTopContext:", v4),
          v7,
          (v8 & 1) != 0))
    {
      v9 = [MapsPopupMessageView alloc];
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(double *)(a1 + 48);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100647D48;
      v21[3] = &unk_1011AD260;
      objc_copyWeak(&v22, v2);
      v12 = -[MapsPopupMessageView initWithMessage:timeout:timeoutHandler:](v9, "initWithMessage:timeout:timeoutHandler:", v10, v21, v11);
      v13 = (void *)*((_QWORD *)v4 + 17);
      *((_QWORD *)v4 + 17) = v12;

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chromeViewController"));
      v15 = sub_1002A8AA0(v14);

      v16 = (void *)*((_QWORD *)v4 + 17);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chromeViewController"));
      if (v15 == 1)
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "passThroughView"));
      else
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "viewport"));
      objc_msgSend(v16, "presentFromView:animated:", v18, 1);

      objc_msgSend(v4, "_updateScaleAndCompass");
      if (*(_BYTE *)(a1 + 57))
        objc_msgSend(*((id *)v4 + 18), "notificationOccurred:", 2);
      objc_destroyWeak(&v22);
    }
    else
    {
      v19 = sub_1004320DC();
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Ignoring popup presentation due to context dismissing", buf, 2u);
      }

    }
  }

}

void sub_100647D30(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100647D48(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateScaleAndCompass");
    objc_msgSend(v2, "_updateCoachingPillWithIgnoreChromeTransitioning:", 0);
    WeakRetained = v2;
  }

}

void sub_100648E8C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 176));
  _Unwind_Resume(a1);
}

void sub_100648F98(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[12])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "pressedReverse");
    WeakRetained = v2;
  }

}

void sub_100648FD0(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[12])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "pressedOutAndBack");
    WeakRetained = v2;
  }

}

void sub_100649008(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[12])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "pressedCloseLoop");
    WeakRetained = v2;
  }

}

void sub_100649040(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[12])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_deleteFirstAnchorPointMatchingAnchorPoint:");
    WeakRetained = v2;
  }

}

void sub_100649078(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[12])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_deleteLastAnchorPointMatchingAnchorPoint:");
    WeakRetained = v2;
  }

}

void sub_1006490B0(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[12])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_deleteFirstAnchorPointMatchingAnchorPoint:");
    WeakRetained = v2;
  }

}

void sub_100649378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100649394(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateScaleAndCompass");
    WeakRetained = v2;
  }

}

void sub_10064AF04(id a1)
{
  MapsScreenLayoutMonitor *v1;
  void *v2;

  v1 = objc_opt_new(MapsScreenLayoutMonitor);
  v2 = (void *)qword_1014D2C70;
  qword_1014D2C70 = (uint64_t)v1;

}

id sub_10064B114()
{
  if (qword_1014D2C88 != -1)
    dispatch_once(&qword_1014D2C88, &stru_1011BEDF8);
  return (id)qword_1014D2C80;
}

id sub_10064B2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_layoutMonitor:didUpdateDisplayLayout:withContext:", a2, a3, a4);
}

void sub_10064B3F0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_10064B4FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10064B9EC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *i;
  void *v9;
  unsigned __int8 v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "elements", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v14;
    v7 = FBSDisplayLayoutElementLockScreenIdentifier;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v2);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i), "identifier"));
        v10 = objc_msgSend(v9, "isEqualToString:", v7);

        v5 |= v10;
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  objc_msgSend(*(id *)(a1 + 40), "setLocked:", v5 & 1);
  objc_msgSend(*(id *)(a1 + 40), "setIsScreenFullyOn:", objc_msgSend(*(id *)(a1 + 32), "displayBacklightLevel") == (id)100);
  objc_msgSend(*(id *)(a1 + 40), "setIsScreenOn:", objc_msgSend(*(id *)(a1 + 32), "displayBacklightLevel") != 0);
  objc_msgSend(*(id *)(a1 + 40), "setIsOurAppActive:", objc_msgSend(*(id *)(a1 + 40), "_isMapsActiveInLayout:", *(_QWORD *)(a1 + 32)));
  v11 = objc_msgSend(*(id *)(a1 + 40), "_changeReasonWithNewLayout:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "setChangeReason:", v11);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 16), *(id *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "_notifyObserversWithReason:", v11);
}

void sub_10064BC20(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsScreenLayoutMonitor");
  v2 = (void *)qword_1014D2C80;
  qword_1014D2C80 = (uint64_t)v1;

}

const __CFString *sub_10064BC50(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("Unavailable");
  else
    return *(&off_1011BEE18 + a1 - 1);
}

id sub_10064CF8C()
{
  if (qword_1014D2C98 != -1)
    dispatch_once(&qword_1014D2C98, &stru_1011BEE40);
  return (id)qword_1014D2C90;
}

void sub_10064DD30(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarRouteInfoView");
  v2 = (void *)qword_1014D2C90;
  qword_1014D2C90 = (uint64_t)v1;

}

id sub_10064E6B0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "configureForType:", 0);
}

void sub_10064E6BC(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "application"));
  objc_msgSend(v2, "configureWithDisabledRideBookingApplication:showActionButton:", v3, objc_msgSend(*(id *)(a1 + 48), "shouldShowEnableAppsCell") ^ 1);

}

void sub_10064F778(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10064F79C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v9)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", 0, v9, 1));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("OK [Photo Credit alert acceptance]"), CFSTR("localized string not found"), 0));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v7, 0, 0));

      objc_msgSend(v5, "addAction:", v8);
      objc_msgSend(v4, "_maps_topMostPresentViewController:animated:completion:", v5, 1, 0);

    }
    else
    {
      objc_msgSend(WeakRetained, "handleDismissAction:", *(_QWORD *)(a1 + 32));
    }
  }

}

id sub_10064FE38(id a1, TransitClusteredVehicleInfoItem *a2, unint64_t a3)
{
  return -[TransitClusteredVehicleInfoItem routeDetailArtworks](a2, "routeDetailArtworks", a3);
}

id sub_100650960()
{
  if (qword_1014D2CA8 != -1)
    dispatch_once(&qword_1014D2CA8, &stru_1011BEEA0);
  return (id)qword_1014D2CA0;
}

void sub_100650DB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARMuteSpeechOverrideTask");
  v2 = (void *)qword_1014D2CA0;
  qword_1014D2CA0 = (uint64_t)v1;

}

void sub_100651418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10065143C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "markAsShown");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_dismiss");

}

void sub_100651A9C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  if (*(_BYTE *)(a1 + 56))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastObject"));
    v6 = objc_opt_class(RoutePlanningRouteCreationOutlineSection);
    isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  }
  else
  {
    isKindOfClass = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v11);
  v8 = *(void **)(*(_QWORD *)(a1 + 40) + 144);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "route"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v9));

  if (v10)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
  objc_msgSend(v11, "setFirstRoute:", 0);
  objc_msgSend(v11, "setLastRoute:", *(_QWORD *)(a1 + 48) - 1 == a3);
  if (a3)
  {
    if ((isKindOfClass & 1) != 0)
      objc_msgSend(v11, "setFirstRoute:", 1);
  }
  else
  {
    objc_msgSend(v11, "setFirstRoute:", 1);
    if (*(_BYTE *)(a1 + 56))
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 128));
      objc_msgSend(v11, "setLastRoute:", 1);
    }
  }

}

void sub_100651D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100651D70(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  char isKindOfClass;

  v6 = a2;
  v8 = objc_opt_class(RoutePlanningFeatureDiscoverOutlineSection, v7);
  isKindOfClass = objc_opt_isKindOfClass(v6, v8);

  if ((isKindOfClass & 1) != 0)
  {
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_1006521E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006521F8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  char isKindOfClass;

  v6 = a2;
  v8 = objc_opt_class(RoutePlanningRouteStepsOutlineSection, v7);
  isKindOfClass = objc_opt_isKindOfClass(v6, v8);

  if ((isKindOfClass & 1) != 0)
  {
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_100652320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100652338(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v6 = objc_opt_class(RoutePlanningRouteStepsOutlineSection);
  if ((objc_opt_isKindOfClass(v9, v6) & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "route"));
    v8 = *(void **)(a1 + 32);

    if (v7 == v8)
    {
      *a4 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    }
  }

}

void sub_100652F50(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "willChangeValueForKey:", CFSTR("hasExpandedSteps"));
  objc_msgSend(*(id *)(a1 + 32), "prepareOutlineSections");
  v2 = *(void **)(a1 + 32);
  if (*(_QWORD *)(a1 + 48) == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = objc_msgSend(v2, "sectionIndexForOutlineSection:", *(_QWORD *)(a1 + 40));
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", v3));
    objc_msgSend(v5, "insertSections:", v4);
  }
  else
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "collectionView"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", *(_QWORD *)(a1 + 48)));
    objc_msgSend(v5, "deleteSections:", v4);
  }

}

id sub_10065301C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didChangeValueForKey:", CFSTR("hasExpandedSteps"));
}

void sub_100653EFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  RoutePlanningRouteOverviewOutlineSection *v6;
  void *v7;
  void *v8;
  void *v9;
  RoutePlanningRouteOverviewOutlineSection *v10;
  uint64_t v11;
  void *v12;
  id v13;
  RoutePlanningRouteOverviewOutlineSection *v14;
  _QWORD v15[4];
  RoutePlanningRouteOverviewOutlineSection *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  __int16 v22;

  v5 = a2;
  v6 = [RoutePlanningRouteOverviewOutlineSection alloc];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routeCollection"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Route%lu"), objc_msgSend(v8, "indexOfRoute:", v5)));
  v10 = -[RoutePlanningRouteOverviewOutlineSection initWithCollectionView:sectionIdentifier:](v6, "initWithCollectionView:sectionIdentifier:", v7, v9);

  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_100654080;
  v15[3] = &unk_1011BEF18;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(a1 + 40);
  v17 = v5;
  v18 = v11;
  v22 = *(_WORD *)(a1 + 64);
  v15[1] = 3221225472;
  v16 = v10;
  v19 = v12;
  v21 = a3;
  v20 = *(id *)(a1 + 48);
  v13 = v5;
  v14 = v10;
  -[RoutePlanningRouteOverviewOutlineSection performWhileSuppressingCellReloads:](v14, "performWhileSuppressingCellReloads:", v15);
  objc_msgSend(*(id *)(a1 + 56), "addObject:", v14);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "setObject:forKey:", v14, v13);

}

void sub_100654080(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "setRoute:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "routeCellDelegate"));
  objc_msgSend(*(id *)(a1 + 32), "setRouteCellDelegate:", v2);

  objc_msgSend(*(id *)(a1 + 32), "setShowDetailButton:", *(unsigned __int8 *)(a1 + 80));
  objc_msgSend(*(id *)(a1 + 32), "setAllowPersistentHighlight:", *(unsigned __int8 *)(a1 + 81));
  objc_msgSend(*(id *)(a1 + 32), "setCurrentRoute:", *(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "setFirstRoute:", *(_QWORD *)(a1 + 72) == 0);
  objc_msgSend(*(id *)(a1 + 32), "setLastRoute:", *(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 64));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "automaticSharingContacts"));
  objc_msgSend(*(id *)(a1 + 32), "setAutomaticSharingContacts:", v3);

  objc_msgSend(*(id *)(a1 + 32), "setExpanded:", objc_msgSend(*(id *)(a1 + 48), "_hasExpandedStepsForRoute:", *(_QWORD *)(a1 + 40)));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "dataCoordinator"));
  objc_msgSend(*(id *)(a1 + 32), "setDataCoordinator:", v4);

}

void sub_1006545A0(uint64_t a1)
{
  _BOOL4 v2;
  id v3;
  NSObject *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  int v11;
  __CFString *v12;
  __int16 v13;
  __CFString *v14;
  __int16 v15;
  __CFString *v16;

  v2 = !*(_BYTE *)(a1 + 40) || *(_BYTE *)(a1 + 41) || *(_BYTE *)(a1 + 42) == 0;
  v3 = sub_100432FBC();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (v2)
      v5 = CFSTR("YES");
    else
      v5 = CFSTR("NO");
    v6 = v5;
    if (*(_BYTE *)(a1 + 40))
      v7 = CFSTR("YES");
    else
      v7 = CFSTR("NO");
    v8 = v7;
    if (*(_BYTE *)(a1 + 41))
      v9 = CFSTR("YES");
    else
      v9 = CFSTR("NO");
    v10 = v9;
    v11 = 138412802;
    v12 = v6;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "needsReload: %@ (routeCollectionEqual: %@, featureDiscoveryNeedsReload: %@)", (uint8_t *)&v11, 0x20u);

  }
  if (*(_BYTE *)(a1 + 40))
  {
    if (!v2)
      return;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_createRouteSectionsForCurrentRoutes");
    if (!v2)
      return;
  }
  objc_msgSend(*(id *)(a1 + 32), "prepareOutlineSections");
}

void sub_100655200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  id *v18;
  id *v19;
  uint64_t v20;

  objc_destroyWeak(v19);
  _Block_object_dispose(&a18, 8);
  objc_destroyWeak(v18);
  objc_destroyWeak((id *)(v20 - 72));
  _Unwind_Resume(a1);
}

void sub_100655230(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void sub_10065523C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_100655244(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  id v4;
  _QWORD *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained[21];
    v5 = WeakRetained;
    v4 = objc_loadWeakRetained((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

    WeakRetained = v5;
  }

}

void sub_100655654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100655670(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_requireReload");

}

void sub_100655E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double sub_100655E98(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  double top;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (objc_msgSend(WeakRetained, "isLastRoute"))
  {

  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
    v4 = objc_msgSend(v3, "userInterfaceIdiom");

    if (v4 != (id)5)
    {
      top = NSDirectionalEdgeInsetsZero.top;
      +[RouteOverviewCell horizontalContentInset](RouteOverviewCell, "horizontalContentInset");
      +[RouteOverviewCell horizontalBackgroundInset](RouteOverviewCell, "horizontalBackgroundInset");
      return top;
    }
  }
  return *(double *)_UICollectionViewListSectionSeparatorInsetHidden;
}

id sub_1006560D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_configureCell:", *(_QWORD *)(a1 + 40));
}

void sub_100656A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double sub_100656A30(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  double v5;
  double v6;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_separatorInsetsForIndexPath:", v3);
  v6 = v5;

  return v6;
}

void sub_100656E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100656E8C(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;
  void *v3;
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  _QWORD *v10;
  __int16 v11;
  void *v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "host"));
    v4 = objc_msgSend(v3, "sectionIndexForOutlineSection:", v2);

    if (v4 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = sub_10043214C();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "route"));
        v9 = 138412546;
        v10 = v2;
        v11 = 2112;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Couldn't find index matching: %@, for route: %@", (uint8_t *)&v9, 0x16u);

      }
    }
    else
    {
      v8 = (void *)v2[1];
      v6 = objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", v4));
      objc_msgSend(v8, "reloadSections:", v6);
    }

  }
}

id sub_100657778(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointSubstitutedComposedStringForString:waypoint:useWaypointAddress:", a2, *(_QWORD *)(a1 + 40), 1));
  v4 = objc_msgSend(objc_alloc((Class)MKServerFormattedString), "initWithComposedString:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "multiPartAttributedStringWithAttributes:", *(_QWORD *)(a1 + 48)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributedString"));

  return v6;
}

void sub_1006577FC(uint64_t a1, uint64_t a2, char *a3)
{
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "appendAttributedString:", a2);
  if ((char *)objc_msgSend(*(id *)(a1 + 40), "count") - 1 > a3)
  {
    v5 = *(void **)(a1 + 32);
    v6 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", CFSTR("\n"));
    objc_msgSend(v5, "appendAttributedString:", v6);

  }
}

void sub_100659530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10065956C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
    objc_msgSend(v2, "parkedCarFooterActionsSectionControllerDidRemoveParkedCar:", v3);

    WeakRetained = v3;
  }

}

void sub_10065AE74(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_10065AEA0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_saveMapViewConfiguration");
    WeakRetained = v2;
  }

}

void sub_10065AED0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_setupMapView");
    WeakRetained = v2;
    *((_BYTE *)v2 + 48) = 0;
  }

}

void sub_10065B038(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10065B058(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  void *v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "overlayController"));
    objc_msgSend(v3, "removeOverlay:", v4[2]);

    objc_msgSend(v4, "_restoreMapView");
    WeakRetained = v4;
  }

}

void sub_10065B0C4(uint64_t a1)
{
  void *v2;
  void (**v3)(void);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "postDismissalBlock"));

  if (v2)
  {
    v3 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "postDismissalBlock"));
    v3[2]();

  }
}

void sub_10065B480(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  char v4;
  id v5;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2[104])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "downloadDelegate"));
    v4 = objc_opt_respondsToSelector(v3, "didStartDownloadFromAutocomplete");

    if ((v4 & 1) != 0)
    {
      v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "downloadDelegate"));
      objc_msgSend(v5, "didStartDownloadFromAutocomplete");

    }
  }
}

void sub_10065C0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  uint64_t v10;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v10 - 200));
  _Block_object_dispose((const void *)(v10 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_10065C100(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && v5 && !v6)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
      objc_msgSend(v8, "resumeDownloadForSubscriptionWithIdentifier:mode:", v5, 1);

    }
    *((_BYTE *)WeakRetained + 104) = 1;
    objc_storeStrong((id *)WeakRetained + 4, *(id *)(a1 + 32));
    v9 = (void *)*((_QWORD *)WeakRetained + 2);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10065C224;
    v10[3] = &unk_1011AD4F0;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    objc_msgSend(v9, "animateForDownloadWithCompletion:", v10);
    objc_destroyWeak(&v11);
  }

}

void sub_10065C210(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10065C224(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "dismiss");
    WeakRetained = v2;
  }

}

void sub_10065C254(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  id v11;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10065C338;
    v10[3] = &unk_1011BF0D8;
    v9 = *(id *)(a1 + 48);
    v10[4] = *(_QWORD *)(a1 + 32);
    v11 = v9;
    objc_msgSend(v6, "updateRegion:forSubscriptionInfo:completion:", v7, v8, v10);

  }
  else
  {
    objc_msgSend(v5, "addSubscriptionWithRegion:name:completion:", *(_QWORD *)(a1 + 40), v3, *(_QWORD *)(a1 + 48));

  }
}

void sub_10065C338(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void (*v7)(uint64_t, _QWORD);
  id v8;

  v3 = *(_QWORD *)(a1 + 40);
  if ((a2 & 1) != 0)
  {
    v4 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
    v5 = a3;
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscription"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    (*(void (**)(uint64_t, void *, id))(v3 + 16))(v3, v6, v5);

  }
  else
  {
    v7 = *(void (**)(uint64_t, _QWORD))(v3 + 16);
    v8 = a3;
    v7(v3, 0);
  }

}

void sub_10065C3D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  __int128 v11;
  _QWORD v12[4];
  id v13;
  __int128 v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
  v5 = objc_msgSend(v4, "cellularBehaviorForDownloadOfSize:forForcedDownload:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), 0);

  if (v5 == (id)2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    if (v5 == (id)1)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10065C538;
      v12[3] = &unk_1011BF128;
      v11 = *(_OWORD *)(a1 + 40);
      v8 = (id)v11;
      v14 = v11;
      v13 = v3;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "alertControllerForCellularDownloadConfirmationForRegionName:size:actionHandler:", v13, v7, v12));

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
      objc_msgSend(v10, "_maps_topMostPresentViewController:animated:completion:", v9, 1, 0);

      goto LABEL_8;
    }
    if (v5)
      goto LABEL_8;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_8:

}

uint64_t sub_10065C538(_QWORD *a1, char a2)
{
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = a2;
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[4]);
}

void sub_10065C554(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  __int16 v22;
  uint64_t v23;

  v5 = a2;
  v6 = a3;
  if (*(_BYTE *)(a1 + 56))
    v7 = *(void **)(a1 + 32);
  else
    v7 = 0;
  v8 = v7;
  if (v6)
  {
    v9 = sub_100431D5C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v20 = 138543362;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error fetching suggested name for region: %{public}@", (uint8_t *)&v20, 0xCu);
    }
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "name"));

    v12 = -[NSObject length](v10, "length");
    v13 = sub_100431D5C();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = v14;
    if (v12)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v16 = *(_QWORD *)(a1 + 40);
        v20 = 138478083;
        v21 = v10;
        v22 = 2113;
        v23 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Fetched suggested name '%{private}@' for region %{private}@", (uint8_t *)&v20, 0x16u);
      }

      v15 = v8;
      v8 = v10;
    }
    else if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v17 = *(NSObject **)(a1 + 40);
      v20 = 138477827;
      v21 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Attempt to fetch suggested name for region succeeded, but no name was provided (%{private}@)", (uint8_t *)&v20, 0xCu);
    }

  }
  if (!-[NSObject length](v8, "length"))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("Offline Map"), CFSTR("localized string not found"), CFSTR("Offline")));

    v8 = v19;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10065C9A0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_10065C9D8(uint64_t a1, void *a2, void *a3)
{
  id *WeakRetained;
  id *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  id *v14;
  id v15;

  v15 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (WeakRetained && WeakRetained[7] == *(id *)(a1 + 48))
  {
    objc_msgSend(WeakRetained[8], "invalidate");
    v7 = v6[8];
    v6[8] = 0;

    v8 = v6[15];
    v6[15] = 0;

    *((_BYTE *)v6 + 49) = 1;
    if (!v15)
    {
      v6[12] = a2;
      objc_msgSend(v6[1], "setEstimatedDiskSizeLabel:", a2);
      v14 = *(id **)(a1 + 32);
      v13 = 1;
LABEL_11:
      objc_msgSend(v14[1], "setState:", v13);
      goto LABEL_12;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "domain"));
    v10 = GEOErrorDomain(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (objc_msgSend(v9, "isEqualToString:", v11))
    {
      v12 = objc_msgSend(v15, "code");

      if (v12 == (id)-6)
      {
        v13 = 2;
LABEL_10:
        v14 = v6;
        goto LABEL_11;
      }
    }
    else
    {

    }
    v13 = 4;
    goto LABEL_10;
  }
LABEL_12:

}

void sub_10065CAE8(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  int v10;
  uint64_t v11;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained && WeakRetained[8] == v3 && WeakRetained[7] == *(id *)(a1 + 40))
  {
    v6 = sub_100431D5C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 48);
      v10 = 134349056;
      v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Calculating region size/support took longer than %{public}.1f seconds. Changing UI to 'Calculating...' state", (uint8_t *)&v10, 0xCu);
    }

    objc_msgSend(v5[1], "setState:", 0);
    v9 = v5[8];
    v5[8] = 0;

  }
}

UIFont *__cdecl sub_10065D850(id a1)
{
  UIFont *v1;
  void *v2;
  void *v3;

  v1 = sub_100BA53E4(&stru_1011E7A78);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 34.0));

  return (UIFont *)v3;
}

void sub_10065E6EC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSByteCountFormatter);
  v2 = (void *)qword_1014D2CB0;
  qword_1014D2CB0 = (uint64_t)v1;

}

void sub_10065E714(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  void *v9;
  void *v10;
  id v11;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoUpdateDisclaimerLabel"));
  v4 = v3;
  if (v2)
  {
    objc_msgSend(v3, "setHidden:", 0);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoUpdateDisclaimerLabel"));
    objc_msgSend(v5, "setAlpha:", 1.0);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentStackView"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sizeLabel"));
    v8 = 3.40282347e38;
  }
  else
  {
    objc_msgSend(v3, "setHidden:", 1);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoUpdateDisclaimerLabel"));
    objc_msgSend(v9, "setAlpha:", 0.0);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentStackView"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sizeLabel"));
    v8 = 12.0;
  }
  objc_msgSend(v6, "setCustomSpacing:afterView:", v7, v8);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v10, "updateHeightForCurrentLayout");

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v11, "layoutIfNeeded");

}

void sub_100660810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100660834(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100660844(uint64_t a1)
{

}

void sub_10066084C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100660884(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

id sub_1006618BC()
{
  if (qword_1014D2CC8 != -1)
    dispatch_once(&qword_1014D2CC8, &stru_1011BF318);
  return (id)qword_1014D2CC0;
}

void sub_100662A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100662AA4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v3 = objc_claimAutoreleasedReturnValue(+[MKMapItem _itemWithGeoMapItem:](MKMapItem, "_itemWithGeoMapItem:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1006633E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100663424(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "query"));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setSearchString:", v3);

}

void sub_100663470(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_100663484(uint64_t a1, void *a2)
{
  void *v3;
  SearchResult *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geoMapItem"));
  v5 = (id)objc_claimAutoreleasedReturnValue(+[MKMapItem _itemWithGeoMapItem:](MKMapItem, "_itemWithGeoMapItem:", v3));

  v4 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v5);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setSearchResult:", v4);

}

SearchFieldItem *__cdecl sub_100664010(id a1, GEOComposedWaypoint *a2, unint64_t a3)
{
  return +[SearchFieldItem searchFieldItemWithObject:](SearchFieldItem, "searchFieldItemWithObject:", a2);
}

id sub_100664020(id a1, SearchFieldItem *a2, unint64_t a3)
{
  return -[SearchFieldItem title](a2, "title", a3);
}

id sub_100664028(id a1, SearchFieldItem *a2, unint64_t a3)
{
  return -[SearchFieldItem title](a2, "title", a3);
}

void sub_100664030(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SearchFieldItem");
  v2 = (void *)qword_1014D2CC0;
  qword_1014D2CC0 = (uint64_t)v1;

}

void sub_100664060(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1006641E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_100664E3C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "anonymousId"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tdmUserInfo"));
    objc_msgSend(v5, "setAnonymousUserId:", v4);

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[ServerEvaluationStatusMapsSync shared](_TtC4Maps30ServerEvaluationStatusMapsSync, "shared"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100664F34;
    v7[3] = &unk_1011BF340;
    v8 = *(id *)(a1 + 32);
    v9 = *(id *)(a1 + 40);
    objc_msgSend(v6, "fetchARPStatusWithCompletion:", v7);

  }
}

uint64_t sub_100664F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tdmUserInfo"));
  objc_msgSend(v6, "setIsBlocked:", a2);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tdmUserInfo"));
  objc_msgSend(v7, "setIsTrusted:", a3);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100665484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006654A0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "present");

}

id sub_10066680C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hideSideBar:animated:completion:", 1, *(unsigned __int8 *)(a1 + 40), &stru_1011BF390);
}

id sub_10066682C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "prepareForExitWithCompletion:", &stru_1011BF3B0);
}

void sub_100666840(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[2];

  if ((objc_opt_respondsToSelector(a1[4], "fullscreenViewController") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "fullscreenViewController"));
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, "willMoveToParentViewController:", 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
      objc_msgSend(v4, "removeFromSuperview");

      objc_msgSend(v3, "removeFromParentViewController");
    }
  }
  if ((objc_opt_respondsToSelector(a1[5], "fullscreenViewController") & 1) != 0)
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "fullscreenViewController"));
  else
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "fallbackDetailViewController"));
  v6 = (void *)v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "detailViewController"));

  if (v6 != v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "detailViewController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "view"));
    objc_msgSend(v9, "frame");
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "view"));
    objc_msgSend(v18, "setFrame:", v11, v13, v15, v17);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "view"));
    objc_msgSend(v19, "layoutIfNeeded");

    objc_msgSend(a1[6], "setDetailViewController:", v6);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "masterViewController"));
    v24[0] = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "detailViewController"));
    v24[1] = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v24, 2));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "splitViewController"));
    objc_msgSend(v23, "setViewControllers:", v22);

  }
}

void sub_100666A48(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 984), "keyEnumerator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", v9, (_QWORD)v10) & 1) == 0)
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 984), "removeObjectForKey:", v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

id sub_100666D4C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toolbarController"));
  objc_msgSend(v3, "setLocationButtonEnabled:", v2);

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toolbarController"));
  objc_msgSend(v5, "setToggleSidebarButtonEnabled:", v4);

  v6 = *(unsigned __int8 *)(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toolbarController"));
  objc_msgSend(v7, "setMapModeButtonEnabled:", v6);

  v8 = *(unsigned __int8 *)(a1 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toolbarController"));
  objc_msgSend(v9, "setRoutePlanningButtonEnabled:", v8);

  v10 = *(unsigned __int8 *)(a1 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toolbarController"));
  objc_msgSend(v11, "setAddSubmenusEnabled:", v10);

  v12 = objc_msgSend(*(id *)(a1 + 32), "canEnter3dMode");
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toolbarController"));
  objc_msgSend(v13, "setThirdDimensionButtonEnabled:", v12);

  v14 = *(unsigned __int8 *)(a1 + 41);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "toolbarController"));
  objc_msgSend(v15, "setLookAroundActive:", v14);

  return objc_msgSend(*(id *)(a1 + 32), "_updateShareButton");
}

id sub_100666E5C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didCompleteModeTransition");
}

void sub_10066703C(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double left;
  double top;
  double bottom;
  double right;
  void *v12;
  id v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_currentContainerViewController"));
  if (v2)
  {
    v21 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapView"));
    objc_msgSend(v3, "_edgeInsets");
    v5 = v4;
    v7 = v6;

    if ((objc_msgSend(v21, "isContaineeStackEmpty") & 1) != 0)
    {
      top = UIEdgeInsetsZero.top;
      left = UIEdgeInsetsZero.left;
      bottom = UIEdgeInsetsZero.bottom;
      right = UIEdgeInsetsZero.right;
    }
    else
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
      v13 = objc_msgSend(v12, "effectiveUserInterfaceLayoutDirection");

      v14 = -v5;
      v15 = -v7;
      bottom = 0.0;
      if (v13 == (id)1)
        left = v14;
      else
        left = 0.0;
      if (v13 == (id)1)
        right = 0.0;
      else
        right = v15;
      top = 0.0;
    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floatingControlsOverlay"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "floatingControlsViewController"));

    v18 = objc_opt_class(MacFloatingControlsViewController);
    if ((objc_opt_isKindOfClass(v17, v18) & 1) != 0)
      v19 = v17;
    else
      v19 = 0;
    v20 = v19;

    objc_msgSend(v20, "setAdditionalCompassEdgeInsets:", top, left, bottom, right);
    v2 = v21;
  }

}

void sub_100667408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10066742C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "topContext"));
    if ((objc_opt_respondsToSelector(v2, "sidebarDidUpdate") & 1) != 0)
      objc_msgSend(v2, "sidebarDidUpdate");

    WeakRetained = v3;
  }

}

id sub_1006676D4(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];
  char v7;

  v2 = 0.200000003;
  if (!*(_BYTE *)(a1 + 56))
    v2 = 0.0;
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_100667774;
  v6[3] = &unk_1011AFB78;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = v4;
  v7 = *(_BYTE *)(a1 + 57);
  v6[1] = 3221225472;
  +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v6, v3, v2);
  return objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateComponent:animated:", CFSTR("mapInsets"), 1);
}

void sub_100667774(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  int v8;
  double v9;
  void *v10;
  int v11;
  double v12;
  double v13;
  void *v14;
  id v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewController"));
  objc_msgSend(v2, "setPreferredDisplayMode:", *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 32), "_updateDividerFrame");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "detailViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v4, "layoutIfNeeded");

  v5 = 0.0;
  if (*(_BYTE *)(a1 + 48))
    v6 = 0.0;
  else
    v6 = 1.0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dividerView"));
  objc_msgSend(v7, "setAlpha:", v6);

  v8 = *(unsigned __int8 *)(a1 + 48);
  if (!*(_BYTE *)(a1 + 48))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewController"));
    objc_msgSend(v7, "primaryColumnWidth");
    v5 = v9;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewportSideBarWidthConstraint"));
  objc_msgSend(v10, "setConstant:", v5);

  if (!v8)
  v11 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    v12 = 0.0;
  }
  else
  {
    v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewController"));
    objc_msgSend(v15, "primaryColumnWidth");
    v12 = v13;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapViewInsetsSideBarWidthConstraint"));
  objc_msgSend(v14, "setConstant:", v12);

  if (!v11)
}

void sub_100668184(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topContext"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "actionCoordinator"));
  objc_msgSend(v1, "viewControllerPresentSearchEditing");

}

void sub_1006685CC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1006685EC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004315EC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "error creating collection from toolbar:%@", (uint8_t *)&v9, 0xCu);
    }

  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "appCoordinator"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "baseActionCoordinator"));
    objc_msgSend(v8, "viewController:editCollection:", 0, *(_QWORD *)(a1 + 32));

  }
}

void sub_100669C30(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100669C4C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  id *v13;
  id WeakRetained;
  id v15;
  void *v16;
  objc_class *v17;
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  __CFString *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  _QWORD v35[4];
  void *v36;
  _QWORD v37[5];
  id v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];

  v34 = objc_alloc_init((Class)NSMutableArray);
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contexts"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "reverseObjectEnumerator"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v41;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v41 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
        if ((objc_opt_respondsToSelector(v8, "desiredSidebarContentControllers") & 1) != 0)
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "desiredSidebarContentControllers"));
        else
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 984), "objectForKey:", v8));
        v10 = v9;
        if (objc_msgSend(v9, "count"))
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", 0, objc_msgSend(v10, "count")));
          objc_msgSend(v34, "insertObjects:atIndexes:", v10, v11);

        }
        if ((objc_opt_respondsToSelector(v8, "wantsSidebarControl") & 1) == 0)
        {

          goto LABEL_17;
        }
        v12 = objc_msgSend(v8, "wantsSidebarControl");

        if ((v12 & 1) != 0)
          goto LABEL_17;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_17:

  v13 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v15 = *(id *)(a1 + 32);
  v16 = v15;
  if (v15)
  {
    v17 = (objc_class *)objc_opt_class(v15);
    v18 = NSStringFromClass(v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if ((objc_opt_respondsToSelector(v16, "accessibilityIdentifier") & 1) != 0)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "performSelector:", "accessibilityIdentifier"));
      v21 = v20;
      if (v20 && !objc_msgSend(v20, "isEqualToString:", v19))
      {
        v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v19, v16, v21));

        goto LABEL_23;
      }

    }
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v19, v16));
LABEL_23:

    goto LABEL_25;
  }
  v22 = CFSTR("<nil>");
LABEL_25:

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: sidebar show/hide animation"), v22));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "addCompletionWaitBlockWithReason:", v23));

  v25 = objc_msgSend(v34, "count");
  v26 = *(void **)(a1 + 32);
  if (v25)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSidebarViewControllers:", v34);
    v27 = *(void **)(a1 + 32);
    v28 = objc_msgSend(v27, "_shouldHideSidebar");
    v29 = objc_loadWeakRetained(v13);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_10066A084;
    v35[3] = &unk_1011B1B90;
    v36 = v24;
    v30 = v24;
    objc_msgSend(v27, "hideSideBar:animation:completion:", v28, v29, v35);

    v31 = v36;
  }
  else
  {
    v32 = objc_loadWeakRetained((id *)(a1 + 40));
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10066A04C;
    v37[3] = &unk_1011BF400;
    v37[4] = *(_QWORD *)(a1 + 32);
    v38 = v34;
    v39 = v24;
    v33 = v24;
    objc_msgSend(v26, "hideSideBar:animation:completion:", 1, v32, v37);

    v31 = v38;
  }

}

uint64_t sub_10066A04C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setSidebarViewControllers:", *(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t sub_10066A084(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10066B10C(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  BOOL v5;
  id v6;
  id v7;
  uint64_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "valueForKey:", CFSTR("__internal__PlaceCardHardCodedMUID")));

  if (!v3)
    goto LABEL_8;
  v4 = objc_msgSend(objc_alloc((Class)NSScanner), "initWithString:", v3);
  v9 = 0;
  if (objc_msgSend(v4, "scanUnsignedLongLong:", &v9))
    v5 = v9 == 0;
  else
    v5 = 1;
  if (v5)
  {

LABEL_8:
    v7 = v1;
    goto LABEL_9;
  }
  v6 = objc_alloc((Class)MKMapItemIdentifier);
  v7 = objc_msgSend(v6, "initWithMUID:resultProviderID:coordinate:", v9, 0, MKCoordinateInvalid[0], MKCoordinateInvalid[1]);

LABEL_9:
  return v7;
}

void sub_10066B6D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  SearchResult *v12;
  void *v13;
  SearchResult *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v5 = a2;
  v6 = a3;
  if (v6 || !objc_msgSend(v5, "count"))
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = *(id *)(a1 + 32);
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v7);
          (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i) + 16))(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i));
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v9);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "removeObjectForKey:", *(_QWORD *)(a1 + 40), (_QWORD)v15);
  }
  else
  {
    v12 = [SearchResult alloc];
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v14 = -[SearchResult initWithMapItem:searchResultType:resultIndex:](v12, "initWithMapItem:searchResultType:resultIndex:", v13, *(unsigned int *)(a1 + 56), 0);

    objc_msgSend(*(id *)(a1 + 48), "_cacheAndHandleSearchResult:identifier:completionHandlers:", v14, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  }

}

id sub_10066B860(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_setLoading:forIdentifier:", a2, *(_QWORD *)(a1 + 40));
}

double sub_10066C0E8(id a1)
{
  return 19.0;
}

id sub_10066CFAC()
{
  if (qword_1014D2CD8 != -1)
    dispatch_once(&qword_1014D2CD8, &stru_1011BF4B0);
  return (id)qword_1014D2CD0;
}

void sub_10066D7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10066D81C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10066D82C(uint64_t a1)
{

}

void sub_10066D834(uint64_t a1, void *a2, unint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  SearchResult *v8;
  SearchResult *v9;
  id v10;

  v10 = a2;
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") <= a3)
    v5 = 0;
  else
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));

  if (!v5 || v5 == v6)
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "waypointPlaceholder"));
    v8 = (SearchResult *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "displayableMarker"));
  }
  else
  {
    v7 = v5;
    v8 = -[SearchResult initWithComposedWaypoint:]([SearchResult alloc], "initWithComposedWaypoint:", v7);
  }
  v9 = v8;

  if (v9)
  {
    if (a3)
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);
    else
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v9);
  }

}

id sub_10066EB60(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *i;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "steps", 0));
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v3)
          objc_enumerationMutation(v1);
        v5 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        v6 = objc_opt_class(GEOComposedTransitRouteStep);
        if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
        {
          v7 = v5;
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "vehicleEntries"));

          if (v8)
          {
            v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "vehicleEntries"));

            goto LABEL_13;
          }

        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_13:

  return v2;
}

id sub_10066EF28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateRouteAnnotationsController");
}

void sub_10066F014(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningMapController");
  v2 = (void *)qword_1014D2CD0;
  qword_1014D2CD0 = (uint64_t)v1;

}

void sub_10066F1D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10066F1EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10066F1FC(uint64_t a1)
{

}

void sub_10066F204(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "entryForHistorySearch:", a2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10066F240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "entryForHistoryRoute:", a2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10066F27C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "entryForHistoryPlace:", a2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

NanoDirectionWaypoint *__cdecl sub_10066FD40(id a1, GEOCompanionWaypoint *a2, unint64_t a3)
{
  return (NanoDirectionWaypoint *)+[NanoDirectionWaypoint directionWaypointForCompanionWaypoint:](NanoDirectionWaypoint, "directionWaypointForCompanionWaypoint:", a2);
}

GEOCompanionWaypoint *__cdecl sub_10066FE2C(id a1, NanoDirectionWaypoint *a2, unint64_t a3)
{
  return (GEOCompanionWaypoint *)-[NanoDirectionWaypoint companionWaypoint](a2, "companionWaypoint", a3);
}

NanoDirectionWaypoint *__cdecl sub_100670154(id a1, GEOComposedWaypoint *a2, unint64_t a3)
{
  return (NanoDirectionWaypoint *)+[NanoDirectionWaypoint directionWaypointForComposedWaypoint:](NanoDirectionWaypoint, "directionWaypointForComposedWaypoint:", a2);
}

id sub_100671B40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateGroupedManeuverCounts");
}

uint64_t sub_100671DC4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;

  result = (uint64_t)objc_msgSend(a2, "integerValue");
  if (result >= 1)
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", &off_10126E590, a3);
  return result;
}

uint64_t sub_100671E10(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;

  result = (uint64_t)objc_msgSend(a2, "integerValue");
  if (result >= 1)
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", &off_10126E590, a3);
  return result;
}

uint64_t sub_100671E5C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;

  result = (uint64_t)objc_msgSend(a2, "integerValue");
  if (result >= 1)
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", &off_10126E590, a3);
  return result;
}

id sub_100671EA8(uint64_t a1, void *a2, uint64_t a3)
{
  id result;

  result = objc_msgSend(a2, "integerValue");
  if (a3)
  {
    if (!result)
      return objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", &off_10126E560, a3);
  }
  return result;
}

void sub_100672648(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  id v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 56);
    v8 = v3;
    v6 = objc_msgSend(v4, "count");
    v3 = v8;
    if (v5 < (unint64_t)v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v8, "rampType")));
      objc_msgSend(*(id *)(a1 + 40), "setObject:atIndexedSubscript:", v7, *(_QWORD *)(a1 + 56));

      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      v3 = v8;
    }
  }

}

void sub_1006727C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006727E0(uint64_t a1, void *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  double v6;
  double v7;
  char *v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  id v20;

  v20 = a2;
  if (objc_msgSend(v20, "travelDirection") != 6
    && objc_msgSend(v20, "travelDirection") != 2
    && objc_msgSend(v20, "coordinateCount") != (id)1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (char *)objc_msgSend(v20, "coordinates3d");
      v6 = *(double *)&v5[v3];
      v7 = *(double *)&v5[v3 + 8];
      v8 = (char *)objc_msgSend(v20, "coordinates3d");
      v9 = *(double *)&v8[v3 + 24];
      v10 = *(double *)&v8[v3 + 32];
      v11 = GEOBearingFromCoordinateToCoordinate(v6, v7, v9, v10);
      v12 = GEOWrapAngleDegrees(v11);
      v13 = GEOClosestCoordinateOnLineSegmentFromCoordinate(v6, v7, v9, v10, *(double *)(a1 + 48), *(double *)(a1 + 56));
      v16 = GEOCalculateDistance(v13, v14, v15, *(double *)(a1 + 48), *(double *)(a1 + 56));
      v17 = fabs(GEOAngleDifferenceDegrees(v12, *(double *)(a1 + 64)));
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (v17 <= *(double *)(v18 + 24) && v16 <= 5.0)
      {
        *(double *)(v18 + 24) = v17;
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
      ++v4;
      v3 += 24;
    }
    while (v4 < (char *)objc_msgSend(v20, "coordinateCount") - 1);
  }

}

id sub_100673EEC()
{
  if (qword_1014D2CE8 != -1)
    dispatch_once(&qword_1014D2CE8, &stru_1011BF698);
  return (id)qword_1014D2CE0;
}

void sub_1006757E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavCameraController");
  v2 = (void *)qword_1014D2CE0;
  qword_1014D2CE0 = (uint64_t)v1;

}

void sub_100675F18(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Maps"), 0, 0);
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataContainerURL"));
  v2 = (void *)qword_1014D2CF0;
  qword_1014D2CF0 = v1;

}

void sub_10067636C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionNetworkReachabilityMonitor");
  v2 = (void *)qword_1014D2D00;
  qword_1014D2D00 = (uint64_t)v1;

}

id sub_10067639C(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "subviews"));
  v4 = objc_msgSend(v3, "mutableCopy");

  if (objc_msgSend(v4, "count"))
  {
    v5 = 0;
    while (1)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", v5));
      if ((objc_opt_isKindOfClass(v6, a2) & 1) != 0)
        break;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subviews"));
      v8 = objc_msgSend(v7, "count");

      if (v8)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subviews"));
        objc_msgSend(v4, "addObjectsFromArray:", v9);

      }
      if (++v5 >= (unint64_t)objc_msgSend(v4, "count"))
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v6 = 0;
  }

  return v6;
}

void sub_100676990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006769AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_startTestPresentWithSearchResult:", *(_QWORD *)(a1 + 32));

}

void sub_100676AAC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  objc_msgSend(v2, "pptTestPresentPlaceCardForSearchResult:animated:", *(_QWORD *)(a1 + 40), 1);

}

id sub_100676AF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_100676CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100676D08(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "startPlacecardTest");

}

void sub_10067740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100677434(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "finishedSubTest:checkAllFinished:", CFSTR("PlaceCardReposition medium to small"), 0);

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_mediumizePlaceCard");

}

void sub_10067761C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100677644(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "finishedSubTest:checkAllFinished:", CFSTR("PlaceCardReposition small to medium"), 0);

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_maxiumizePlaceCard");

}

void sub_1006777E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100677808(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "finishedSubTest:checkAllFinished:", CFSTR("PlaceCardReposition medium to big"), 0);

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_mediumizePlaceCardFromBig");

}

void sub_100677FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100677FC8(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;

  v2 = dispatch_time(0, 2000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100678064;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v4);
}

void sub_100678064(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  unsigned int v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "testCoordinator"));
  v4 = objc_msgSend(v3, "pptTestIsTrayType:", 1);

  v5 = objc_loadWeakRetained(v1);
  v6 = v5;
  if (v4)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10067815C;
    v7[3] = &unk_1011AD260;
    objc_copyWeak(&v8, v1);
    objc_msgSend(v6, "dismissTrayWithAssertTrayType:completion:", 1, v7);

    objc_destroyWeak(&v8);
  }
  else
  {
    objc_msgSend(v5, "startPlacecardTest");

  }
}

void sub_100678148(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10067815C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "startPlacecardTest");

}

void sub_1006783A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006783CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006783DC(uint64_t a1)
{

}

void sub_1006783E4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "object"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "object"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "searchInfo"));

    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "results"));
    v9 = objc_msgSend(v8, "count");

    if (!v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "startedTest");
      objc_msgSend(*(id *)(a1 + 32), "failedTest");
    }
  }

}

void sub_10067849C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  dispatch_time_t v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "results"));
  v3 = objc_msgSend(v2, "count");

  if (v3 != (id)1)
  {
    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "results"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));

      v6 = dispatch_time(0, 5000000000);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1006785B4;
      v8[3] = &unk_1011AC8B0;
      v8[4] = *(_QWORD *)(a1 + 32);
      v9 = v5;
      v7 = v5;
      dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, v8);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "startedTest");
      objc_msgSend(*(id *)(a1 + 32), "failedTest");
    }
  }
}

void sub_1006785B4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  objc_msgSend(v2, "pptTestPresentPlaceCardForSearchResult:animated:", *(_QWORD *)(a1 + 40), 1);

}

void sub_1006785F8(uint64_t a1)
{
  void *v2;
  id v3;
  dispatch_time_t v4;
  _QWORD block[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "results"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = dispatch_time(0, 1000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1006786C0;
    block[3] = &unk_1011AC860;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "startedTest");
    objc_msgSend(*(id *)(a1 + 32), "failedTest");
  }
}

void sub_1006786C0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placecardChromeDelegate"));
  objc_msgSend(v1, "placecardDidPresent");

}

void sub_1006786F0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 80), v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "results"));
  v5 = objc_msgSend(v4, "count");

  v6 = *(void **)(a1 + 32);
  if (v5)
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "placecardChromeDelegate"));
    objc_msgSend(v7, "placecardDidPresent");

  }
  else
  {
    objc_msgSend(v6, "startedTest");
    objc_msgSend(*(id *)(a1 + 32), "failedTest");
  }
}

id sub_100678910(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  _QWORD v5[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "canUpdateTrayLayout");
  v3 = *(void **)(a1 + 32);
  if (!v2)
    return _objc_msgSend(v3, "_scrollingTest");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100678998;
  v5[3] = &unk_1011AC860;
  v5[4] = v3;
  return objc_msgSend(v3, "updateTrayLayout:animated:completion:", 2, 1, v5);
}

id sub_100678998(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_scrollingTest");
}

void sub_100678C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100678C48(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "finishedSubTest:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "finishedTest");
    WeakRetained = v3;
  }

}

id sub_100678D4C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performResizingTest");
}

id sub_100678DF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_100678F1C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_100679DC0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "closeButtonHeightConstraint"));
  objc_msgSend(v2, "setActive:", 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentHeightCollapsedConstraint"));
  objc_msgSend(v3, "setActive:", 1);

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_100679ED8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentHeightCollapsedConstraint"));
  objc_msgSend(v2, "setActive:", 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "closeButtonHeightConstraint"));
  objc_msgSend(v3, "setActive:", 1);

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_10067D294(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionOfflineMonitor");
  v2 = (void *)qword_1014D2D10;
  qword_1014D2D10 = (uint64_t)v1;

}

void sub_10067D488(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[RAPImageResponseStorage baseFilePathWithSubmissionIdentifier:](RAPImageResponseStorage, "baseFilePathWithSubmissionIdentifier:", v3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByAppendingPathComponent:", v4));
  v8 = (id)objc_claimAutoreleasedReturnValue(+[RAPFileManager dataAtFileURL:](RAPFileManager, "dataAtFileURL:", v6));

  v7 = +[GEORPImageUpdate newImageUpdateWithClientImageId:responseData:](GEORPImageUpdate, "newImageUpdateWithClientImageId:responseData:", v4, v8);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);

}

void sub_10067D5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10067D604(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  BOOL v4;

  result = +[RAPFileManager removeItemAtFilePath:](RAPFileManager, "removeItemAtFilePath:");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v3 + 24))
    v4 = result;
  else
    v4 = 0;
  *(_BYTE *)(v3 + 24) = v4;
  return result;
}

void sub_10067E0E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10067E108(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  id v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "artwork"));
  v12 = (id)objc_claimAutoreleasedReturnValue(+[UIImage _mapkit_transitArtworkImageWithDataSource:size:scale:](UIImage, "_mapkit_transitArtworkImageWithDataSource:size:scale:", v3, 6, *(double *)(a1 + 48)));

  v4 = *(void **)(a1 + 32);
  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    objc_msgSend(v4, "addObject:", v5);

  }
  v6 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  objc_msgSend(v12, "size");
  v7 = MKTransitArtworkIncidentBadgeTrailingOffset;
  if (v6 <= v8 + MKTransitArtworkIncidentBadgeTrailingOffset)
  {
    objc_msgSend(v12, "size");
    v10 = v7 + v11;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(double *)(v9 + 24);
  }
  *(double *)(v9 + 24) = v10;

}

void sub_10067E20C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  double v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;

  v22 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v7 = objc_msgSend(v5, "isEqual:", v6);

  if ((v7 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "artwork"));
    v10 = objc_msgSend(v9, "hasRoutingIncidentBadge");

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
    v12 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    if (v10)
    {
      v13 = MKTransitIncidentIcon(*(double *)(a1 + 64));
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage _compositeImageFromImage:paddedToWidth:badge:badgeOffset:](UIImage, "_compositeImageFromImage:paddedToWidth:badge:badgeOffset:", v11, v14, v12, MKTransitArtworkIncidentBadgeTrailingOffset, MKTransitArtworkIncidentBadgeBottomOffset));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "imageWithRenderingMode:", 1));

    if (v10)
  }
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "name"));
  v17 = (void *)v16;
  if (v16)
    v18 = (const __CFString *)v16;
  else
    v18 = &stru_1011EB268;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", a3));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction _actionWithTitle:image:style:handler:shouldDismissHandler:](UIAlertAction, "_actionWithTitle:image:style:handler:shouldDismissHandler:", v18, v8, 0, v19, &stru_1011BF810));

  objc_msgSend(v20, "_setTitleTextAlignment:", 4);
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  objc_msgSend(v20, "_setTitleTextColor:", v21);

  objc_msgSend(*(id *)(a1 + 48), "addObject:", v20);
}

BOOL sub_10067E410(id a1)
{
  return 1;
}

uint64_t sub_10067EEEC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10067EEFC(uint64_t a1)
{

}

void sub_10067EF04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "objectForKey:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10067EFF8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKey:", *(_QWORD *)(a1 + 40)));
  if (v2)
    objc_msgSend(v2, "removeObserver:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 48), "addObserver:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_10067F36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  id *v22;
  id *v23;
  uint64_t v24;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  _Block_object_dispose(&a22, 8);
  objc_destroyWeak((id *)(v24 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_10067F3AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10067F3BC(uint64_t a1)
{

}

void sub_10067F3C4(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(v5, "addTarget:action:forControlEvents:", WeakRetained, "_textFieldValueDidChange:", 0x20000);
    objc_msgSend(v5, "setAutocapitalizationType:", 0);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  }

}

void sub_10067F44C(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5 = WeakRetained;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "text"));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);

    WeakRetained = v5;
  }

}

void sub_10068144C(id a1, RAPDirectionsWhichOneQuestion *a2, RAPDirectionsCategoryQuestion *a3)
{
  RAPDirectionsWhichOneQuestion *v4;
  uint64_t v5;
  RAPUserDirectionRequest *selectedValue;
  RAPDirectionsCategoryQuestion *v7;

  v7 = a3;
  v4 = a2;
  -[RAPDirectionsCategoryQuestion resetBadRouteSuggestionsQuestion](v7, "resetBadRouteSuggestionsQuestion");
  v5 = objc_claimAutoreleasedReturnValue(-[RAPDirectionsWhichOneQuestion selectedValue](v4, "selectedValue"));

  selectedValue = v7->_selectedValue;
  v7->_selectedValue = (RAPUserDirectionRequest *)v5;

  -[RAPQuestion _didChange](v7, "_didChange");
}

void sub_100681A48(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100681A64(id *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  id v8;
  id v9;
  id obj;
  _QWORD v11[5];
  id v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  obj = a1[4];
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v8 = objc_msgSend(a1[5], "objectForKeyedSubscript:", v7);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_100681C08;
        v11[3] = &unk_1011BF8C8;
        v11[4] = v7;
        v12[1] = v8;
        objc_copyWeak(v12, a1 + 6);
        v9 = objc_msgSend(v3, "addNavigationRowWithTitle:action:", v7, v11);
        objc_destroyWeak(v12);
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }

}

void sub_100681BEC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100681C08(uint64_t a1)
{
  id WeakRetained;
  GEOConfigKeysDebugController *v3;

  v3 = -[GEOConfigKeysDebugController initWithName:geoConfigDebugClass:]([GEOConfigKeysDebugController alloc], "initWithName:geoConfigDebugClass:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "segueToViewController:", v3);

}

id sub_1006820D0()
{
  if (qword_1014D2D30 != -1)
    dispatch_once(&qword_1014D2D30, &stru_1011BFA90);
  return (id)qword_1014D2D28;
}

void sub_100682258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100682270(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
  if (objc_msgSend(v6, "localizedCaseInsensitiveContainsString:", *(_QWORD *)(a1 + 32)))
  {

LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
    goto LABEL_5;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "comment"));
  v8 = objc_msgSend(v7, "localizedCaseInsensitiveContainsString:", *(_QWORD *)(a1 + 32));

  if (v8)
    goto LABEL_4;
LABEL_5:

}

void sub_10068240C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100682428(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1006824D8;
  v6[3] = &unk_1011AEAC8;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", v4, v6);
  objc_destroyWeak(&v7);

}

void sub_1006824C4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1006824D8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "addGEOConfigRowsInSection:", v3);

}

void sub_1006825C0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;

  v3 = a2;
  v4 = objc_msgSend(v3, "key");
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "debugControlOptions"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("name")));
  v9 = v8;
  if (v8)
    v10 = v8;
  else
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
  v11 = v10;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "debugControlType"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1006826FC;
  v18[3] = &unk_1011BF968;
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(a1 + 40);
  v19 = v12;
  v20 = v13;
  v21 = v3;
  v22 = v11;
  v23 = v14;
  v15 = v11;
  v16 = v3;
  v17 = v12;
  GEOConfigGetPropertiesForKey(v4, v6, v18);

}

void sub_1006826FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  void *v10;
  id v11;

  v11 = a2;
  v9 = a5;
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("slider")))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "addSliderRowFor:withName:keyType:defaultValue:inSection:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a4, v9, *(_QWORD *)(a1 + 64)));
    if (v10)
      goto LABEL_8;
  }
  else if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("selection")))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "addSelectionRowFor:withName:keyType:defaultValue:inSection:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a4, v9, *(_QWORD *)(a1 + 64)));
    if (v10)
      goto LABEL_8;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "addGenericRowFor:withName:keyStr:keyType:defaultValue:configOptions:inSection:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v11, a4, v9, a3, *(_QWORD *)(a1 + 64)));
  if (!v10)
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "addReadOnlyRowWithTitle:value:", *(_QWORD *)(a1 + 56), CFSTR("Unsupported type")));
LABEL_8:

}

void sub_10068296C(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100682A08;
  v6[3] = &unk_1011BF9E0;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v5 = objc_msgSend(a2, "addSectionWithTitle:content:", v4, v6);

}

void sub_100682A08(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "key");
  v6 = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100682AC0;
  v8[3] = &unk_1011BF9B8;
  v9 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v7 = objc_msgSend(v3, "addCheckmarkRowsGroupForConfigKey:content:", v4, v6, v8);

}

void sub_100682AC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "debugControlOptionsOrderedKeys", 0));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "debugControlOptions"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v9));

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addRowWithTitle:value:", v9, v11));
        if (objc_msgSend(v11, "isEqual:", *(_QWORD *)(a1 + 40)))
          objc_msgSend(v12, "setSubtitle:", CFSTR("(default)"));

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

}

void sub_10068342C(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1006834B8;
  v8[3] = &unk_1011BF9E0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  v7 = objc_msgSend(a2, "addSectionWithTitle:content:", v4, v8);

}

void sub_1006834B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100683534;
  v6[3] = &unk_1011BE710;
  v4 = *(void **)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v6);

}

void sub_100683534(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v9 = a2;
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "description"));
  v8 = objc_msgSend(v5, "addRowNamed:forValue:inSection:", v7, v9, *(_QWORD *)(a1 + 40));

}

void sub_100683678(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100683704;
  v8[3] = &unk_1011BF9E0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  v7 = objc_msgSend(a2, "addSectionWithTitle:content:", v4, v8);

}

void sub_100683704(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1006837A0;
  v6[3] = &unk_1011BE710;
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v6);

}

id sub_1006837A0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addRowNamed:forValue:inSection:", &stru_1011EB268, a2, *(_QWORD *)(a1 + 40));
}

void sub_10068388C(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100683918;
  v8[3] = &unk_1011BF9E0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  v7 = objc_msgSend(a2, "addSectionWithTitle:content:", v4, v8);

}

void sub_100683918(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100683994;
  v6[3] = &unk_1011BFA30;
  v4 = *(void **)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6);

}

id sub_100683994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "addRowNamed:forValue:inSection:", a2, a3, *(_QWORD *)(a1 + 40));
}

void sub_100683BCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  id v6;
  uint64_t v7;
  void (**v8)(id, uint64_t);

  v5 = *(void **)(a1 + 32);
  v8 = a4;
  v6 = objc_msgSend(v5, "key");
  _GEOConfigRemoveValue(v6, v7);
  objc_msgSend(*(id *)(a1 + 40), "performSelector:withObject:afterDelay:", "reloadData", 0, 0.5);
  v8[2](v8, 1);

}

uint64_t sub_100683E3C(uint64_t a1)
{
  return MapsFeature_IsEnabled(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100683E48(uint64_t a1, uint64_t a2)
{
  return MapsFeature_SetEnabled(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2);
}

void sub_10068429C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  _BYTE v22[128];
  void *v23;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 39));
  v23 = v1;
  v2 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
  v3 = (void *)qword_1014D2D28;
  qword_1014D2D28 = v2;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "builtInPlugInsPath"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contentsOfDirectoryAtPath:error:", v5, 0));

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v18;
    while (2)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v13, "hasSuffix:", CFSTR(".bundle"), (_QWORD)v17)
          && objc_msgSend(v13, "rangeOfString:", CFSTR("Debug")) != (id)0x7FFFFFFFFFFFFFFFLL
          && objc_msgSend(v13, "rangeOfString:", CFSTR("Config")) != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v21 = v5;
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v21, 1));
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "arrayByAddingObjectsFromArray:", qword_1014D2D28));
          v16 = (void *)qword_1014D2D28;
          qword_1014D2D28 = v15;

          goto LABEL_13;
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_13:

}

void sub_100684840(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D2D38;
  qword_1014D2D38 = (uint64_t)v1;

}

void sub_100685DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100685DC4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100685DD4(uint64_t a1)
{

}

void sub_100685DDC(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1006862A4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 40));
  objc_msgSend(WeakRetained, "pushManager:receivedFixedProblemNotification:manifestToken:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

}

void sub_100686628(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 40));
  objc_msgSend(WeakRetained, "pushManager:receivedPhotoLivenessMUID:title:message:actionURL:", a1[4], a1[5], a1[6], a1[7], a1[8]);

}

void sub_100686924(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t Log;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  id v13;

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setServicesState:", a2);
  if (v5)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsRAPStatus");
    v7 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Services state: %@", buf, 0xCu);
    }

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GEORPLegacyProblemRequester sharedRequester](GEORPLegacyProblemRequester, "sharedRequester"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100686A7C;
  v10[3] = &unk_1011BFAE0;
  v9 = *(_QWORD *)(a1 + 32);
  v10[4] = *(_QWORD *)(a1 + 40);
  v11 = *(id *)(a1 + 48);
  objc_msgSend(v8, "startStatusRequest:finished:networkActivity:error:", v9, v10, 0, &stru_1011BFB00);

}

void sub_100686A7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t Log;
  NSObject *v5;
  id WeakRetained;
  int v7;
  id v8;

  v3 = a2;
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsRAPStatus");
  v5 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Problem status response: %@", (uint8_t *)&v7, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 40));
  objc_msgSend(WeakRetained, "pushManager:receivedFixedProblemNotification:manifestToken:", *(_QWORD *)(a1 + 32), v3, *(_QWORD *)(a1 + 40));

}

void sub_100686B64(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t Log;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsRAPStatus");
  v4 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Problem status: %@", (uint8_t *)&v5, 0xCu);
  }

}

NSUUID *__cdecl sub_1006886BC(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return (NSUUID *)-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3);
}

void sub_100688A2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_100688BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_100688CFC(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = objc_alloc_init((Class)NSDateFormatter);
  v3 = (void *)qword_1014D2D48;
  qword_1014D2D48 = (uint64_t)v2;

  v4 = (void *)qword_1014D2D48;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend(v4, "setLocale:", v5);

  objc_msgSend((id)qword_1014D2D48, "setLocalizedDateFormatFromTemplate:", CFSTR("jma"));
  objc_msgSend((id)qword_1014D2D48, "setAMSymbol:", &stru_1011EB268);
  objc_msgSend((id)qword_1014D2D48, "setPMSymbol:", &stru_1011EB268);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timeZone"));
  objc_msgSend((id)qword_1014D2D48, "setTimeZone:", v6);

}

void sub_100688DFC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateComponentsFormatter);
  v2 = (void *)qword_1014D2D58;
  qword_1014D2D58 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2D58, "setAllowedUnits:", 64);
  objc_msgSend((id)qword_1014D2D58, "setUnitsStyle:", 2);
}

void sub_100689F9C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = objc_alloc_init((Class)NSDateFormatter);
  v3 = (void *)qword_1014D2D68;
  qword_1014D2D68 = (uint64_t)v2;

  v4 = (void *)qword_1014D2D68;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend(v4, "setLocale:", v5);

  objc_msgSend((id)qword_1014D2D68, "setLocalizedDateFormatFromTemplate:", CFSTR("jma"));
  objc_msgSend((id)qword_1014D2D68, "setAMSymbol:", &stru_1011EB268);
  objc_msgSend((id)qword_1014D2D68, "setPMSymbol:", &stru_1011EB268);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timeZone"));
  objc_msgSend((id)qword_1014D2D68, "setTimeZone:", v6);

}

void sub_10068ACA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10068ACF4(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v2, "selectDeparture:", *(_QWORD *)(a1 + 32));

}

id sub_10068B404(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateDimmingViewsWithAlpha:", *(double *)(a1 + 40));
}

void sub_10068B4D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 296))
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 304);
    *(_QWORD *)(v4 + 304) = v3;

  }
  else
  {
    objc_msgSend(*(id *)(v1 + 288), "setAlpha:");
  }
}

id sub_10068C3A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateDimming");
}

void sub_10068E9BC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "createAnimation");

}

id sub_10068F098(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

void sub_10068FEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10068FEF8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "thumbnailGenerator"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10068FFA0;
    v7[3] = &unk_1011BFC30;
    v8 = v3;
    objc_msgSend(v6, "loadThumbnailIfNeededWithCompletion:", v7);

  }
}

void sub_10068FFA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10069005C;
  block[3] = &unk_1011B5ED8;
  v7 = *(id *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10069005C(uint64_t a1)
{
  uint64_t v1;
  NSData *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v3 = UIImagePNGRepresentation(*(UIImage **)(a1 + 32));
    v4 = (id)objc_claimAutoreleasedReturnValue(v3);
    (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v4, *(_QWORD *)(a1 + 40));

  }
}

id sub_1006900C0(id a1, MKMapItem *a2, unint64_t a3)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MKMapItem _cnPostalAddress](a2, "_cnPostalAddress", a3));
  v4 = objc_msgSend(v3, "copy");

  return v4;
}

void sub_1006900F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKAppImageManager sharedImageManager](MKAppImageManager, "sharedImageManager"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "url"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1006901AC;
    v6[3] = &unk_1011B2D20;
    v7 = v3;
    objc_msgSend(v4, "loadAppImageAtURL:completionHandler:", v5, v6);

  }
}

void sub_1006901AC(uint64_t a1, UIImage *image, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  NSData *v6;
  id v7;

  v5 = *(_QWORD *)(a1 + 32);
  if (image)
  {
    v6 = UIImagePNGRepresentation(image);
    v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, id, _QWORD))(v5 + 16))(v5, v7, 0);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v5 + 16))(*(_QWORD *)(a1 + 32), 0, a5);
  }
}

void sub_100690EA8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100690EC4(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void ***v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t, double, double, double, double);
  void *v10;
  id v11;
  id v12;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_100690FCC;
  v10 = &unk_1011BFCC8;
  objc_copyWeak(&v12, v1);
  v11 = WeakRetained;
  v3 = objc_retainBlock(&v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sign", v7, v8, v9, v10));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "step"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cameraFramer"));
  objc_msgSend(v6, "rectForStep:currentStepIndex:handler:", v5, objc_msgSend(v5, "stepIndex"), v3);

  objc_destroyWeak(&v12);
}

void sub_100690FB8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100690FCC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double x;
  double y;
  double width;
  double height;
  id v10;
  id WeakRetained;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[5];
  MKMapRect v19;

  v19 = MKMapRectInset(*(MKMapRect *)&a2, a4 * -0.1, a5 * -0.1);
  x = v19.origin.x;
  y = v19.origin.y;
  width = v19.size.width;
  height = v19.size.height;
  v10 = objc_alloc_init((Class)MKMapSnapshotOptions);
  objc_msgSend(v10, "setMapRect:", x, y, width, height);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v10, "setMapType:", objc_msgSend(WeakRetained, "mapType"));

  objc_msgSend(v10, "setSize:", 163.0, 163.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithDisplayScale:](UITraitCollection, "traitCollectionWithDisplayScale:", 2.0));
  objc_msgSend(v10, "setTraitCollection:", v12);

  v13 = objc_msgSend(objc_alloc((Class)MKMapSnapshotter), "initWithOptions:", v10);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 80);
  *(_QWORD *)(v14 + 80) = v13;

  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 80);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100691114;
  v18[3] = &unk_1011B51F8;
  v18[4] = v16;
  objc_msgSend(v17, "startWithCompletionHandler:", v18);

}

void sub_100691114(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 72), a2);
}

void sub_1006911E4(id a1)
{
  MapsSuggestionsNavdMapsAppLocationManager *v1;
  dispatch_queue_attr_t v2;
  dispatch_queue_t v3;
  MapsSuggestionsNavdMapsAppLocationManager *v4;
  void *v5;
  NSObject *v6;

  v1 = [MapsSuggestionsNavdMapsAppLocationManager alloc];
  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = objc_claimAutoreleasedReturnValue(v2);
  v3 = dispatch_queue_create("MapsSuggestionsNavdMapsAppLocationManagerQueue", v6);
  v4 = -[MapsSuggestionsNavdMapsAppLocationManager initWithName:queue:](v1, "initWithName:queue:", CFSTR("MapsSuggestionsNavdMapsAppLocationManager"), v3);
  v5 = (void *)qword_1014D2D78;
  qword_1014D2D78 = (uint64_t)v4;

}

void sub_100691380(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  unsigned __int8 v4;
  int v5;
  void *v6;
  id v7;
  uint64_t Log;
  NSObject *v9;
  id v10;
  unsigned __int8 v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  id v15;

  v1 = objc_claimAutoreleasedReturnValue(+[MNFilePaths navdCacheDirectoryPath](MNFilePaths, "navdCacheDirectoryPath"));
  v2 = (void *)qword_1014D2D88;
  qword_1014D2D88 = v1;

  v11 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v4 = objc_msgSend(v3, "fileExistsAtPath:isDirectory:", qword_1014D2D88, &v11);
  v5 = v11;

  if ((v4 & 1) == 0 && !v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v10 = 0;
    objc_msgSend(v6, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", qword_1014D2D88, 1, 0, &v10);
    v7 = v10;

    if (v7)
    {
      Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "NavdPaths");
      v9 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543618;
        v13 = qword_1014D2D88;
        v14 = 2114;
        v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Cannot create cache dir at: %{public}@, error: %{public}@", buf, 0x16u);
      }

    }
  }
}

void sub_100691CBC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100691CD8(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
  objc_msgSend(v1, "reloadData");

}

void sub_100692238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100692254(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  id WeakRetained;
  uint8_t buf[4];
  uint64_t v7;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "updateAddresses");

  }
  else
  {
    if (qword_1014D2DA0 != -1)
      dispatch_once(&qword_1014D2DA0, &stru_1011BFD28);
    v3 = qword_1014D2D98;
    if (os_log_type_enabled((os_log_t)qword_1014D2D98, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to save shortcut %@. with refined coordinate", buf, 0xCu);
    }
  }
}

void sub_1006923E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "HomeWorkShortcutSelection");
  v2 = (void *)qword_1014D2D98;
  qword_1014D2D98 = (uint64_t)v1;

}

id sub_100696424(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  if (*(_BYTE *)(a1 + 40))
    v2 = 1.0;
  else
    v2 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 216), "setAlpha:", v2);
  if (*(_BYTE *)(a1 + 40))
    v3 = 1.0;
  else
    v3 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "setAlpha:", v3);
  if (*(_BYTE *)(a1 + 40))
    v4 = 0.0;
  else
    v4 = 1.0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setAlpha:", v4);
}

void sub_100696FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100697020(id a1, UIImageView *a2, UIImage *a3, BOOL a4)
{
  _BOOL4 v4;
  UIImageView *v6;
  UIImage *v7;
  double v8;
  UIImage *v9;
  UIImageView *v10;
  _QWORD v11[4];
  UIImageView *v12;
  UIImage *v13;

  v4 = a4;
  v6 = a2;
  v7 = a3;
  if (v4)
    v8 = 0.300000012;
  else
    v8 = 0.0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1006970F8;
  v11[3] = &unk_1011AC8B0;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  +[UIView transitionWithView:duration:options:animations:completion:](UIView, "transitionWithView:duration:options:animations:completion:", v10, 5242882, v11, 0, v8);

}

id sub_1006970F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setImage:", *(_QWORD *)(a1 + 40));
}

void sub_100697100(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && v6 && !a3)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100697BA4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100697BAC(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100697BB4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_100697D78(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100697D80(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100697D88(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_100697F98(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100697FA0(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100697FA8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_1006982CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006982E4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  id *v4;
  void *v5;

  v2 = a1[4];
  v3 = (void *)a1[5];
  v5 = *(void **)(v2 + 80);
  v4 = (id *)(v2 + 80);
  if (v5 != v3)
  {
    objc_storeStrong(v4, v3);
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
}

uint64_t sub_1006983DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006983EC(uint64_t a1)
{

}

void sub_1006983F4(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 80));
}

void sub_1006984DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006984F4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  id *v4;
  void *v5;

  v2 = a1[4];
  v3 = (void *)a1[5];
  v5 = *(void **)(v2 + 88);
  v4 = (id *)(v2 + 88);
  if (v5 != v3)
  {
    objc_storeStrong(v4, v3);
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
}

void sub_1006985EC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 88));
}

void sub_1006986C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1006986E0(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "containsObject:", *(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    objc_msgSend(*(id *)(a1 + 40), "addObserver:", *(_QWORD *)(a1 + 32));
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addObject:", *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_100698804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10069881C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "containsObject:", *(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    objc_msgSend(*(id *)(a1 + 40), "removeObserver:", *(_QWORD *)(a1 + 32));
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObject:", *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_100698910(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *j;
  id v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  __CFString *v26;
  __CFString *v27;
  id v28;
  void *v29;
  void *v30;
  __CFString *v31;
  __CFString *v32;
  id v33;
  void *v34;
  void *v35;
  __CFString *v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t buf[4];
  __CFString *v47;
  __int16 v48;
  __CFString *v49;
  __int16 v50;
  __CFString *v51;
  _BYTE v52[128];
  _BYTE v53[128];

  v2 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", *(_QWORD *)(a1 + 32));
  v3 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithArray:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  objc_msgSend(v3, "minusSet:", v2);
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v4 = objc_msgSend(v3, "copy");
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v42, v53, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v43 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i), "removeObserver:", *(_QWORD *)(a1 + 40));
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v42, v53, 16);
    }
    while (v6);
  }

  v9 = objc_msgSend(v2, "mutableCopy");
  v10 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  objc_msgSend(v9, "minusSet:", v10);

  v11 = objc_msgSend(v9, "copy");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));
  v13 = objc_msgSend(v12, "mutableCopy");
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(void **)(v14 + 24);
  *(_QWORD *)(v14 + 24) = v13;

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v16 = v11;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v38, v52, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v39;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(_QWORD *)v39 != v19)
          objc_enumerationMutation(v16);
        objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)j), "addObserver:", *(_QWORD *)(a1 + 40));
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v38, v52, 16);
    }
    while (v18);
  }

  v21 = sub_100698DB0();
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    v23 = *(id *)(*(_QWORD *)(a1 + 40) + 24);
    v24 = v23;
    if (v23)
    {
      if (objc_msgSend(v23, "count"))
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "componentsJoinedByString:", CFSTR(", ")));
        v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v24, v25));

      }
      else
      {
        v26 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v24));
      }
    }
    else
    {
      v26 = CFSTR("<nil>");
    }

    v27 = v26;
    v28 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allObjects"));
    v29 = v28;
    v37 = v2;
    if (v28)
    {
      if (objc_msgSend(v28, "count"))
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "componentsJoinedByString:", CFSTR(", ")));
        v31 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v29, v30));

      }
      else
      {
        v31 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v29));
      }
    }
    else
    {
      v31 = CFSTR("<nil>");
    }

    v32 = v31;
    v33 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allObjects"));
    v34 = v33;
    if (v33)
    {
      if (objc_msgSend(v33, "count"))
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "componentsJoinedByString:", CFSTR(", ")));
        v36 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v34, v35));

      }
      else
      {
        v36 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v34));
      }
    }
    else
    {
      v36 = CFSTR("<nil>");
    }

    *(_DWORD *)buf = 138412802;
    v47 = v27;
    v48 = 2112;
    v49 = v32;
    v50 = 2112;
    v51 = v36;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "-> itemSources: %@\n   outgoing: %@\n   incoming: %@", buf, 0x20u);

    v2 = v37;
  }

}

id sub_100698DB0()
{
  if (qword_1014D2DB0 != -1)
    dispatch_once(&qword_1014D2DB0, &stru_1011BFEF8);
  return (id)qword_1014D2DA8;
}

void sub_100698E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100698EA8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v4;
  BOOL v5;
  _DWORD v6[2];

  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 78) != *(unsigned __int8 *)(a1 + 48))
  {
    v2 = sub_100698DB0();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(unsigned __int8 *)(a1 + 48);
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Setting updates paused: %d", (uint8_t *)v6, 8u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 78) = *(_BYTE *)(a1 + 48);
    if (*(_BYTE *)(a1 + 48))
      v5 = 0;
    else
      v5 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 76) != 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v5;
  }
}

void sub_100699000(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = sub_100698DB0();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Forcing recalculation", v4, 2u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 76) = 1;
}

void sub_100699288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 248), 8);
  _Unwind_Resume(a1);
}

void sub_1006992C8(_QWORD *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;

  v2 = a1[4];
  if (*(_BYTE *)(v2 + 76) && !*(_BYTE *)(v2 + 78))
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    *(_BYTE *)(a1[4] + 76) = 0;
    v7 = (unsigned int *)(a1[4] + 72);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 + 1;
    }
    while (__stlxr(v9, v7));
    *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v9;
    v10 = a1[4];
    if (!*(_BYTE *)(v10 + 77))
    {
      *(_BYTE *)(v10 + 77) = 1;
      v11 = objc_msgSend(*(id *)(a1[4] + 32), "copy");
      v12 = *(_QWORD *)(a1[7] + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

    }
  }
  else
  {
    v3 = sub_100698DB0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = a1[4];
      v6 = *(unsigned __int8 *)(v5 + 76);
      LODWORD(v5) = *(unsigned __int8 *)(v5 + 78);
      v14[0] = 67109376;
      v14[1] = v6;
      v15 = 1024;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Not recalculating, _needsRecalculation: %d _updatesPaused: %d", (uint8_t *)v14, 0xEu);
    }

  }
}

void sub_100699428(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD v5[5];
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  __int128 v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1006994E8;
  v8[3] = &unk_1011BFE08;
  v9 = *(_OWORD *)(a1 + 32);
  v2 = objc_retainBlock(v8);
  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100699510;
  v5[3] = &unk_1011BFE58;
  v5[4] = v3;
  v6 = v2;
  v7 = *(_QWORD *)(a1 + 48);
  v4 = v2;
  objc_msgSend(v3, "_gatherItemsWithShouldCancel:completion:", v4, v5);

}

BOOL sub_1006994E8(uint64_t a1)
{
  int v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v2 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 72);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3, v2));
  return v1 != v3;
}

void sub_100699510(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  char v7;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD block[5];
  id v46;
  id v47;
  __int128 v48;
  _BYTE *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  _BYTE v57[128];
  _BYTE v58[128];
  uint8_t v59[128];
  _BYTE buf[24];
  uint64_t (*v61)(uint64_t, uint64_t);
  void (*v62)(uint64_t);
  id v63;

  v5 = a2;
  v6 = a3;
  v7 = (*(uint64_t (**)(void))(a1[5] + 16))();
  v8 = sub_100698DB0();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
  if ((v7 & 1) != 0)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Reset counter has been reset, abandoning update", buf, 2u);
    }

  }
  else
  {
    if (v10)
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Notifying observers of new items: %@ itemGroups: %@", buf, 0x16u);
    }

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v61 = sub_1006983DC;
    v62 = sub_1006983EC;
    v63 = 0;
    v51 = 0;
    v52 = &v51;
    v53 = 0x3032000000;
    v54 = sub_1006983DC;
    v55 = sub_1006983EC;
    v56 = 0;
    v11 = a1[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100699988;
    block[3] = &unk_1011BFE30;
    v32 = *(_OWORD *)(a1 + 5);
    v12 = *(NSObject **)(v11 + 8);
    v13 = (id)v32;
    v48 = v32;
    block[4] = a1[4];
    v14 = v5;
    v46 = v14;
    v15 = v6;
    v47 = v15;
    v49 = buf;
    v50 = &v51;
    dispatch_sync(v12, block);
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v16 = *(id *)(*(_QWORD *)(a1[6] + 8) + 40);
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v41, v59, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v42;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v42 != v18)
            objc_enumerationMutation(v16);
          objc_msgSend(*(id *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v19), "personalizedItemManager:didChangeItems:itemGroups:", a1[4], v14, v15, v32);
          v19 = (char *)v19 + 1;
        }
        while (v17 != v19);
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v41, v59, 16);
      }
      while (v17);
    }

    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v20 = *(id *)(*(_QWORD *)&buf[8] + 40);
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v37, v58, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v38;
      do
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v38 != v22)
            objc_enumerationMutation(v20);
          v24 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v23);
          v25 = objc_msgSend(v14, "copy", v32);
          (*(void (**)(uint64_t, id))(v24 + 16))(v24, v25);

          v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v37, v58, 16);
      }
      while (v21);
    }

    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v26 = (id)v52[5];
    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v33, v57, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v34;
      do
      {
        v29 = 0;
        do
        {
          if (*(_QWORD *)v34 != v28)
            objc_enumerationMutation(v26);
          v30 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v29);
          v31 = objc_msgSend(v15, "copy", v32, (_QWORD)v33);
          (*(void (**)(uint64_t, id))(v30 + 16))(v30, v31);

          v29 = (char *)v29 + 1;
        }
        while (v27 != v29);
        v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v33, v57, 16);
      }
      while (v27);
    }

    _Block_object_dispose(&v51, 8);
    _Block_object_dispose(buf, 8);

  }
}

void sub_10069993C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100699988(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t result;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  if ((result & 1) == 0)
  {
    v5 = objc_msgSend(*(id *)(a1 + 40), "copy");
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = objc_msgSend(*(id *)(a1 + 48), "copy");
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(v9 + 48);
    *(_QWORD *)(v9 + 48) = v8;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 77) = 0;
    v11 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "copy");
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

    v14 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "copy");
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

    v17 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "copy");
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "removeAllObjects");
    return (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "removeAllObjects");
  }
  return result;
}

id sub_100699AFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_100699B84(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeObject:", *(_QWORD *)(a1 + 40));
}

void sub_100699C44(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 77);
  if (*(_BYTE *)(v2 + 77))
    v4 = &__NSArray0__struct;
  else
    v4 = objc_msgSend(*(id *)(v2 + 40), "copy");
  v5 = v4;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);
  if (!v3)

}

void sub_100699D6C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 77);
  if (*(_BYTE *)(v2 + 77))
    v4 = &__NSArray0__struct;
  else
    v4 = objc_msgSend(*(id *)(v2 + 48), "copy");
  v5 = v4;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);
  if (!v3)

}

void sub_100699E94(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 77);
  if (*(_BYTE *)(v2 + 77))
    v4 = objc_msgSend(*(id *)(v2 + 40), "copy");
  else
    v4 = &__NSArray0__struct;
  v5 = v4;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);
  if (v3)

}

void sub_100699FBC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 77);
  if (*(_BYTE *)(v2 + 77))
    v4 = objc_msgSend(*(id *)(v2 + 48), "copy");
  else
    v4 = &__NSArray0__struct;
  v5 = v4;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4);
  if (v3)

}

void sub_10069A0AC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 77))
  {
    v3 = *(void **)(v2 + 56);
    v9 = objc_msgSend(*(id *)(a1 + 40), "copy");
    v4 = objc_retainBlock(v9);
    objc_msgSend(v3, "addObject:", v4);

  }
  else
  {
    v5 = objc_msgSend(*(id *)(v2 + 40), "copy");
    v6 = *(void **)(a1 + 40);
    v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10069A188;
    block[3] = &unk_1011ACAD0;
    v11 = v5;
    v12 = v6;
    v8 = v5;
    dispatch_async(v7, block);

  }
}

uint64_t sub_10069A188(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10069A214(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 77))
  {
    v3 = *(void **)(v2 + 64);
    v9 = objc_msgSend(*(id *)(a1 + 40), "copy");
    v4 = objc_retainBlock(v9);
    objc_msgSend(v3, "addObject:", v4);

  }
  else
  {
    v5 = objc_msgSend(*(id *)(v2 + 48), "copy");
    v6 = *(void **)(a1 + 40);
    v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10069A2F0;
    block[3] = &unk_1011ACAD0;
    v11 = v5;
    v12 = v6;
    v8 = v5;
    dispatch_async(v7, block);

  }
}

uint64_t sub_10069A2F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_10069A390(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 77);
  return result;
}

void sub_10069B55C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x348], 8);
  _Unwind_Resume(a1);
}

void sub_10069B63C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10069B674(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v2 = *(id *)(a1 + 32);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, v4, "GatherItems", "", v5, 2u);
  }

}

int64_t sub_10069B6F8(id a1, PersonalizedItemSource *a2, PersonalizedItemSource *a3)
{
  PersonalizedItemSource *v4;
  int64_t v5;

  v4 = a3;
  if ((id)-[PersonalizedItemSource sourceType](a2, "sourceType") == (id)1)
    v5 = -1;
  else
    v5 = (id)-[PersonalizedItemSource sourceType](v4, "sourceType") == (id)1;

  return v5;
}

int64_t sub_10069B74C(id a1, id a2, id a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  int64_t v8;
  id v9;
  id v10;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "eventDate"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "eventDate"));
  v8 = (int64_t)objc_msgSend(v6, "compare:", v7);
  if (!v8)
  {
    v9 = objc_msgSend(v4, "priority");
    v10 = objc_msgSend(v5, "priority");
    if (v9 > v10)
      v8 = -1;
    else
      v8 = v9 != v10;
  }

  return v8;
}

void sub_10069BB10(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PersonalizedItemManager");
  v2 = (void *)qword_1014D2DA8;
  qword_1014D2DA8 = (uint64_t)v1;

}

void sub_10069C944(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MenuContaineeViewController");
  v2 = (void *)qword_1014D2DC0;
  qword_1014D2DC0 = (uint64_t)v1;

}

void sub_10069D968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10069D98C(uint64_t a1)
{
  id *v2;
  _QWORD *WeakRetained;
  uint64_t Log;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  _QWORD v15[5];
  id v16;
  id v17;
  uint8_t buf[4];
  char *v19;
  __int16 v20;
  _BYTE v21[18];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "PortraitSource");
  v5 = objc_claimAutoreleasedReturnValue(Log);
  v6 = v5;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v7 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      v8 = NSStringFromMapsSuggestionsCurrentBestLocation();
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      *(_DWORD *)buf = 138412802;
      v19 = v7;
      v20 = 2112;
      *(_QWORD *)v21 = CFSTR("ALL");
      *(_WORD *)&v21[8] = 2112;
      *(_QWORD *)&v21[10] = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{MSgDebug} UPDATING SOURCE{%@} for TYPE{%@} at LATLONG{%@}", buf, 0x20u);

    }
    v10 = (void *)WeakRetained[1];
    v11 = *(_QWORD *)(a1 + 32);
    v12 = WeakRetained[2];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10069DBE8;
    v15[3] = &unk_1011B0480;
    objc_copyWeak(&v17, v2);
    v13 = *(void **)(a1 + 48);
    v15[4] = *(_QWORD *)(a1 + 40);
    v16 = v13;
    objc_msgSend(v10, "fetchLocationEntriesForTray:currentLocation:queue:handler:", 1, v11, v12, v15);

    objc_destroyWeak(&v17);
  }
  else
  {
    v14 = v5;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v19 = "MapsSuggestionsPortraitSource.m";
      v20 = 1026;
      *(_DWORD *)v21 = 97;
      *(_WORD *)&v21[4] = 2082;
      *(_QWORD *)&v21[6] = "-[MapsSuggestionsPortraitSource updateSuggestionEntriesWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", buf, 0x1Cu);
    }

  }
}

void sub_10069DBCC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10069DBE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  uint64_t Log;
  NSObject *v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  char *v27;
  __int16 v28;
  _QWORD v29[3];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = MapsSuggestionsLoggingSubsystem;
    if (v6)
    {
      Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "PortraitSource");
      v10 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
        v26 = 138412290;
        v27 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Received an error inside _fetchEntries: %@", (uint8_t *)&v26, 0xCu);

      }
      v12 = GEOFindOrCreateLog(v8, "PortraitSource");
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueName"));
        v26 = 138412546;
        v27 = v14;
        v28 = 2080;
        v29[0] = "updateSuggestionEntriesWithHandler";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s FAIL", (uint8_t *)&v26, 0x16u);

      }
      v15 = GEOFindOrCreateLog(v8, "PortraitSource");
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_signpost_enabled(v16))
      {
        LOWORD(v26) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateSuggestionEntriesWithHandler", "", (uint8_t *)&v26, 2u);
      }

    }
    if (v5)
      v17 = v5;
    else
      v17 = &__NSArray0__struct;
    objc_msgSend(WeakRetained, "addOrUpdateMySuggestionEntries:", v17);
    v18 = GEOFindOrCreateLog(v8, "PortraitSource");
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v20 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uniqueName"));
      v26 = 138412546;
      v27 = v20;
      v28 = 2080;
      v29[0] = "updateSuggestionEntriesWithHandler";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{MSgDebug} OBJECT{%@} %s END", (uint8_t *)&v26, 0x16u);

    }
    v21 = GEOFindOrCreateLog(v8, "PortraitSource");
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_signpost_enabled(v22))
    {
      LOWORD(v26) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateSuggestionEntriesWithHandler", "", (uint8_t *)&v26, 2u);
    }

    v23 = *(_QWORD *)(a1 + 40);
    if (v23)
      (*(void (**)(void))(v23 + 16))();
  }
  else
  {
    v24 = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "PortraitSource");
    v25 = (id)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = 136446722;
      v27 = "MapsSuggestionsPortraitSource.m";
      v28 = 1026;
      LODWORD(v29[0]) = 104;
      WORD2(v29[0]) = 2082;
      *(_QWORD *)((char *)v29 + 6) = "-[MapsSuggestionsPortraitSource updateSuggestionEntriesWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf2 went away in %{public}s", (uint8_t *)&v26, 0x1Cu);
    }

  }
}

void sub_10069EB2C(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:", 9.0, UIFontWeightBold));
  objc_msgSend(CFSTR("AQI"), "_maps_sizeWithFont:", v5);
  v3 = v2 * 5.0;
  objc_msgSend(*(id *)(a1 + 32), "_maps_sizeWithFont:", v5);
  if (v4 > v3)
    byte_1014D2DD0 = 1;

}

void sub_10069F940(id a1)
{
  CarSessionController *v1;
  void *v2;

  v1 = objc_alloc_init(CarSessionController);
  v2 = (void *)qword_1014D2DE0;
  qword_1014D2DE0 = (uint64_t)v1;

}

void sub_10069FA74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10069FC88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10069FEA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1006A1258(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1006A127C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint8_t v13[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = sub_10043372C();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2 == 1)
  {
    if (v7)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CarSessionController : user accepted End Navigation prompt", buf, 2u);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "chromeViewController"));
    objc_msgSend(v9, "captureUserAction:onTarget:", 3002, 1013);

    objc_msgSend(WeakRetained, "_promptToEndNavigationAccepted:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (v7)
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CarSessionController : user discard End Navigation prompt", v13, 2u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[CarDisplayController sharedInstance](CarDisplayController, "sharedInstance"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "chromeViewController"));
    objc_msgSend(v11, "captureUserAction:onTarget:", 18, 1013);

    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      (*(void (**)(uint64_t, _QWORD))(v12 + 16))(v12, 0);
  }

}

void sub_1006A47AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1006A47D8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
  else
    v3 = 0;

  return v3;
}

id sub_1006A7184()
{
  if (qword_1014D2DF8 != -1)
    dispatch_once(&qword_1014D2DF8, &stru_1011BFFD0);
  return (id)qword_1014D2DF0;
}

void sub_1006A7388(uint64_t a1)
{
  id WeakRetained;
  unsigned int v2;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v2 = objc_msgSend(WeakRetained, "isLowPowerModeEnabled");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stateManager"));
    v4 = v3;
    if (v2)
      objc_msgSend(v3, "recordSessionDisableEvent:", 0);
    else
      objc_msgSend(v3, "resetSessionDisableEvent:", 0);

    WeakRetained = v5;
  }

}

void sub_1006A73F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionPowerStateMonitor");
  v2 = (void *)qword_1014D2DF0;
  qword_1014D2DF0 = (uint64_t)v1;

}

void sub_1006A95BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006A95D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006A95E4(uint64_t a1)
{

}

void sub_1006A95EC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  id v9;

  v9 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "title"));
  v8 = objc_msgSend(v7, "length");

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_1006A9BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006A9BF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  char *v7;

  v6 = a2;
  v7 = (char *)objc_msgSend(v6, "remainingMinutes") - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  (*(void (**)(_QWORD, id, char *, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v6, v7, a4);

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v7;
}

void sub_1006AA2C0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  RouteMarkerFormatterInfo *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  if (a3)
  {
    v4 = 60 * a3;
    v5 = a2;
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString _navigation_stringWithSeconds:andAbbreviationType:](NSString, "_navigation_stringWithSeconds:andAbbreviationType:", v4, 1));
    v6 = -[RouteMarkerFormatterInfo initWithRouteDescription:etaComparison:tollCurrency:styleAttributes:]([RouteMarkerFormatterInfo alloc], "initWithRouteDescription:etaComparison:tollCurrency:styleAttributes:", v10, 0, 0, 0);
    v7 = *(void **)(a1 + 32);
    v8 = objc_msgSend(v5, "legIndex");

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, v9);

  }
}

void sub_1006AA8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006AA8DC(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  NSObject **WeakRetained;
  NSObject **v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = WeakRetained[1];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1006AA99C;
    v8[3] = &unk_1011AD1E8;
    objc_copyWeak(&v10, v4);
    v9 = v3;
    dispatch_async(v7, v8);

    objc_destroyWeak(&v10);
  }

}

void sub_1006AA99C(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setVirtualGarage:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_1006AAAC0(uint64_t a1)
{
  _QWORD *WeakRetained;
  uint64_t v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3 != WeakRetained[7])
    {
      WeakRetained[7] = v3;
      v4 = WeakRetained;
      objc_msgSend(WeakRetained, "_reloadAvailability");
      WeakRetained = v4;
    }
  }

}

uint64_t sub_1006AABA0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 25);
  return result;
}

void sub_1006AAC58(uint64_t a1)
{
  id *v2;
  unsigned __int8 *WeakRetained;
  void *v4;
  int v5;
  id v6;
  NSObject *v7;
  __CFString *v8;
  __CFString *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  char v13;
  uint8_t buf[4];
  __CFString *v15;

  v2 = (id *)(a1 + 40);
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = *(unsigned __int8 *)(a1 + 48);
    if (v5 != WeakRetained[25])
    {
      WeakRetained[25] = v5;
      v6 = sub_1004321BC();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 25))
          v8 = CFSTR("YES");
        else
          v8 = CFSTR("NO");
        v9 = v8;
        *(_DWORD *)buf = 138412290;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Did update availability of LPR routing to %@.", buf, 0xCu);

      }
      v10 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1006AADC4;
      v11[3] = &unk_1011AD388;
      objc_copyWeak(&v12, v2);
      v13 = *(_BYTE *)(a1 + 48);
      dispatch_async(v10, v11);
      objc_destroyWeak(&v12);
    }
  }

}

void sub_1006AADC4(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_loadWeakRetained(WeakRetained + 5);
    objc_msgSend(v3, "source:didUpdateAvailability:", v4, *(unsigned __int8 *)(a1 + 40));

    WeakRetained = v4;
  }

}

void sub_1006AB09C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_1006AB0D0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_didSelectModel");

}

void sub_1006AB0FC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_didViewModel");

}

void sub_1006AB128(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismiss");

}

void sub_1006AB204(uint64_t a1)
{
  _BYTE *WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1004321BC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User dismissed LPR suggestion.", v4, 2u);
    }

    WeakRetained[24] = 1;
    objc_msgSend(WeakRetained, "_reloadAvailability");
  }

}

void sub_1006AB33C(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006AB3C8;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  if (qword_1014D2E00 != -1)
    dispatch_once(&qword_1014D2E00, block);
  objc_destroyWeak(&v2);
}

void sub_1006AB3C8(uint64_t a1)
{
  _QWORD *WeakRetained;
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1004321BC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User viewed LPR suggestion.", v5, 2u);
    }

    ++WeakRetained[4];
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v4, "setInteger:forKey:", WeakRetained[4], CFSTR("LPRRoutingFeatureDiscoverySourceViewedTimesKey"));

    objc_msgSend(WeakRetained, "_reloadAvailability");
  }

}

void sub_1006AB4B4(id a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  v1 = sub_1004321BC();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "User selected LPR suggestion.", v6, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appCoordinator"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "baseActionCoordinator"));

  objc_msgSend(v5, "presentLPRWithVehicle:scenario:presenter:completionBlock:", 0, 0, 0, 0);
}

void sub_1006AB728(uint64_t a1)
{
  unint64_t *WeakRetained;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  int IsEnabled_Alberta;
  id v6;
  int v7;
  void *v8;
  _BOOL4 v9;
  unint64_t v10;
  unint64_t UInteger;
  unint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  uint8_t buf[4];
  __CFString *v31;
  __int16 v32;
  __CFString *v33;
  __int16 v34;
  __CFString *v35;
  __int16 v36;
  __CFString *v37;
  __int16 v38;
  __CFString *v39;
  __int16 v40;
  __CFString *v41;
  __int16 v42;
  __CFString *v43;

  WeakRetained = (unint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[MapsOfflineUIHelper sharedHelper](MapsOfflineUIHelper, "sharedHelper"));
    v3 = objc_msgSend(v2, "isUsingOfflineMaps");

    IsEnabled_Alberta = MapsFeature_IsEnabled_Alberta(v4);
    v6 = objc_msgSend(WeakRetained, "transportType");
    v7 = *((unsigned __int8 *)WeakRetained + 24);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "virtualGarage"));
    if (v8)
      v9 = objc_msgSend(WeakRetained, "numberOfLPRLVehicles") == 0;
    else
      v9 = 0;

    v10 = WeakRetained[4];
    UInteger = GEOConfigGetUInteger(MapsConfig_LPRMaxNumberOfFeatureDiscoveryViews, off_1014B38C8);
    v12 = UInteger;
    v13 = 0;
    if (IsEnabled_Alberta && v6 == (id)1 && !v7 && v9)
    {
      if (v10 < UInteger)
        v13 = v3 ^ 1;
      else
        v13 = 0;
    }
    objc_msgSend(WeakRetained, "setAvailable:", v13);
    v14 = sub_1004321BC();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      if ((_DWORD)v13)
        v16 = CFSTR("YES");
      else
        v16 = CFSTR("NO");
      v17 = v16;
      if (IsEnabled_Alberta)
        v18 = CFSTR("YES");
      else
        v18 = CFSTR("NO");
      v19 = v18;
      if (v6 == (id)1)
        v20 = CFSTR("YES");
      else
        v20 = CFSTR("NO");
      v21 = v20;
      if (v7)
        v22 = CFSTR("YES");
      else
        v22 = CFSTR("NO");
      v23 = v22;
      if (v9)
        v24 = CFSTR("YES");
      else
        v24 = CFSTR("NO");
      v25 = v24;
      if (v10 >= v12)
        v26 = CFSTR("NO");
      else
        v26 = CFSTR("YES");
      v27 = v26;
      if (v3)
        v28 = CFSTR("YES");
      else
        v28 = CFSTR("NO");
      v29 = v28;
      *(_DWORD *)buf = 138413826;
      v31 = v17;
      v32 = 2112;
      v33 = v19;
      v34 = 2112;
      v35 = v21;
      v36 = 2112;
      v37 = v23;
      v38 = 2112;
      v39 = v25;
      v40 = 2112;
      v41 = v27;
      v42 = 2112;
      v43 = v29;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "_reloadAvailability LPRRoutingFeatureDiscoverySource isAvailable: %@\n, featureEnabled: %@, validTransportType: %@, wasDismissed: %@, needToAddLicencePlate: %@, belowMaximumViewCount: %@, isOffline: %@", buf, 0x48u);

    }
  }

}

void sub_1006ABA64(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "setVirtualGarage:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "_reloadAvailability");
    WeakRetained = v3;
  }

}

void sub_1006ACD68(id a1)
{
  NSNumberFormatter *v1;
  void *v2;
  id v3;

  v1 = objc_opt_new(NSNumberFormatter);
  v2 = (void *)qword_1014D2E08;
  qword_1014D2E08 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2E08, "setNumberStyle:", 0);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](NSLocale, "localeWithLocaleIdentifier:", CFSTR("en_US_POSIX")));
  objc_msgSend((id)qword_1014D2E08, "setLocale:", v3);

}

void sub_1006ADCC0(uint64_t a1, void *a2, uint64_t a3)
{
  DirectionsPlanWaypoint *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = objc_alloc_init(DirectionsPlanWaypoint);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointAtIndex:", a3));
  if (v6)
  {
    -[DirectionsPlanWaypoint setWaypoint:](v5, "setWaypoint:", v6);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "waypointPlaceholder"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "displayableMarker"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "singleLineAddress"));
    if (objc_msgSend(v9, "length"))
    {
      -[DirectionsPlanWaypoint setSearchString:](v5, "setSearchString:", v9);
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "waypointPlaceholder"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
      -[DirectionsPlanWaypoint setSearchString:](v5, "setSearchString:", v11);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "addPlanningWaypoint:", v5);

}

void sub_1006B0848(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  objc_msgSend(v2, "removeControllerFromStack:", *(_QWORD *)(a1 + 40));

}

void sub_1006B0920(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  objc_msgSend(v2, "removeControllerFromStack:", *(_QWORD *)(a1 + 40));

}

void sub_1006B09EC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerViewController"));
  objc_msgSend(v2, "removeControllerFromStack:", *(_QWORD *)(a1 + 40));

}

id sub_1006B140C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id *WeakRetained;
  id *v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  id v21;
  NSObject *v22;
  char *v23;
  id v24;
  void *v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  id v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = WeakRetained[4];
    if (v10)
    {
      v11 = v10;
    }
    else
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "vehicle"));
      if (v26)
      {
        v12 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 2);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_titleForPreferredNetworks"));
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_1006B1864;
        v29[3] = &unk_1011AF8A0;
        objc_copyWeak(&v30, v7);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v13, 0, 0, v29));

        objc_msgSend(v14, "setAccessibilityIdentifier:", CFSTR("RefinementButtonPreferredNetworks"));
        objc_msgSend(v14, "setState:", *((unsigned __int8 *)v9 + 40));
        -[NSObject addObject:](v12, "addObject:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_titleForAllNetworks"));
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_1006B18E8;
        v27[3] = &unk_1011AF8A0;
        objc_copyWeak(&v28, v7);
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v15, 0, 0, v27));

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_titleForAllNetworks"));
        objc_msgSend(v16, "setTitle:", v17);

        objc_msgSend(v16, "setAccessibilityIdentifier:", CFSTR("RefinementButtonAllNetworks"));
        objc_msgSend(v16, "setState:", *((_BYTE *)v9 + 40) == 0);
        -[NSObject addObject:](v12, "addObject:", v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:image:identifier:options:children:](UIMenu, "menuWithTitle:image:identifier:options:children:", &stru_1011EB268, 0, 0, 32, v12));
        objc_storeStrong(v9 + 4, v18);
        v11 = v18;

        objc_destroyWeak(&v28);
        objc_destroyWeak(&v30);
      }
      else
      {
        v19 = sub_1004318FC();
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v32 = "-[RoutePlanningPreferredNetworksRefinementModel menuProvider]_block_invoke";
          v33 = 2080;
          v34 = "RoutePlanningPreferredNetworksRefinementModel.m";
          v35 = 1024;
          v36 = 125;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
        }

        if (sub_100A70734())
        {
          v21 = sub_1004318FC();
          v22 = objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            v23 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
            *(_DWORD *)buf = 138412290;
            v32 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

          }
        }
        v24 = sub_10043214C();
        v12 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[Options] vehicle disappeared when creating menu.", buf, 2u);
        }
        v11 = 0;
      }

    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_1006B1820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  _Unwind_Resume(a1);
}

void sub_1006B1864(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_10043214C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Options] User tapped on Preferred Networks action", v4, 2u);
    }

    objc_msgSend(WeakRetained, "setShouldUsePreferredNetworks:", 1);
  }

}

void sub_1006B18E8(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_10043214C();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Options] User tapped on All Networks action", v4, 2u);
    }

    objc_msgSend(WeakRetained, "setShouldUsePreferredNetworks:", 0);
  }

}

void sub_1006B1A74(id a1, id a2, RAPReportComposerBadRouteSuggestionsViewController *a3)
{
  -[RAPReportTableViewController setNeedsTablePartsUpdateWithSender:](a3, "setNeedsTablePartsUpdateWithSender:", 0);
}

void sub_1006B1CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006B1CD0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setNeedsTablePartsUpdateWithSender:scroll:", 0, 0);
  objc_msgSend(WeakRetained, "_instrumentSelectingRoute");

}

void sub_1006B1EF8(id a1, id a2, RAPReportComposerBadRouteSelectionSection *a3)
{
  -[RAPTablePartSection didChange](a3, "didChange");
}

UITableViewCell *__cdecl sub_1006B22A8(id a1, NSString *a2)
{
  NSString *v2;
  RAPCheckmarkTableViewCell *v3;

  v2 = a2;
  v3 = -[RAPCheckmarkTableViewCell initWithStyle:reuseIdentifier:]([RAPCheckmarkTableViewCell alloc], "initWithStyle:reuseIdentifier:", 0, v2);

  return (UITableViewCell *)v3;
}

RAPSingleLineTableViewCell *sub_1006B22F0(uint64_t a1, void *a2)
{
  id v3;
  RAPSingleLineTableViewCell *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = -[RAPSingleLineTableViewCell initWithStyle:reuseIdentifier:]([RAPSingleLineTableViewCell alloc], "initWithStyle:reuseIdentifier:", 0, v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Show all routes"), CFSTR("localized string not found"), 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[RAPSingleLineTableViewCell textLabel](v4, "textLabel"));
  objc_msgSend(v7, "setText:", v6);

  objc_msgSend(*(id *)(a1 + 32), "_separatorInset");
  -[RAPSingleLineTableViewCell setSeparatorInset:](v4, "setSeparatorInset:");
  return v4;
}

UITableViewCell *__cdecl sub_1006B23B4(id a1, NSString *a2)
{
  NSString *v2;
  TransitRouteRAPTableViewCell *v3;

  v2 = a2;
  v3 = -[TransitRouteRAPTableViewCell initWithStyle:reuseIdentifier:]([TransitRouteRAPTableViewCell alloc], "initWithStyle:reuseIdentifier:", 0, v2);

  return (UITableViewCell *)v3;
}

void sub_1006B2AF4(id a1)
{
  CoreRoutineLocationOfInterestManager *v1;
  void *v2;

  v1 = objc_alloc_init(CoreRoutineLocationOfInterestManager);
  v2 = (void *)qword_1014D2E18;
  qword_1014D2E18 = (uint64_t)v1;

}

void sub_1006B2DF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "locationsOfInterestWithType:", *(_QWORD *)(a1 + 48)));
  v4 = (id)v2;
  if (v2)
    v3 = (void *)v2;
  else
    v3 = &__NSArray0__struct;
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

}

void sub_1006B2F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006B2F84(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  char v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    v6 = 1;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "loisByType", (_QWORD)v12));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", v8));

        if (!v10)
        {
          objc_msgSend(*(id *)(a1 + 40), "retrieveLOIsOfType:", objc_msgSend(v8, "integerValue"));
          v6 = 0;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);

    if ((v6 & 1) == 0)
    {
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "initialRetrievalDispatchGroup"));
      dispatch_group_notify(v11, (dispatch_queue_t)&_dispatch_main_q, *(dispatch_block_t *)(a1 + 48));

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    }
  }
  else
  {

  }
}

void sub_1006B3174(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loisByType", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "keyEnumerator"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "invalidatedLOIsOfTypes"));
        objc_msgSend(v9, "addObject:", v8);

        objc_msgSend(*(id *)(a1 + 32), "retrieveLOIsOfType:", objc_msgSend(v8, "integerValue"));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

id sub_1006B3328(uint64_t a1)
{
  id result;
  void *v3;
  void *v4;

  result = objc_msgSend(*(id *)(a1 + 32), "monitoringLOIsOfType:", *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "invalidatedLOIsOfTypes"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v3, "addObject:", v4);

    return objc_msgSend(*(id *)(a1 + 32), "retrieveLOIsOfType:", *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1006B3488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006B34AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "invalidateLOIs");

}

void sub_1006B376C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD block[5];
  id v10;
  id v11;
  uint64_t v12;
  char v13;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006B3824;
  block[3] = &unk_1011C0260;
  v5 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v10 = v3;
  v6 = v5;
  v13 = *(_BYTE *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 48);
  v11 = v6;
  v12 = v7;
  v8 = v3;
  dispatch_async(v4, block);

}

void sub_1006B3824(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  unsigned int v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loisByType"));
  v3 = v2;
  if (*(_QWORD *)(a1 + 40))
    v4 = *(void **)(a1 + 40);
  else
    v4 = &__NSArray0__struct;
  objc_msgSend(v2, "setObject:forKey:", v4, *(_QWORD *)(a1 + 48));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retrievingLOIsOfTypes"));
  objc_msgSend(v5, "removeObject:", *(_QWORD *)(a1 + 48));

  if (*(_BYTE *)(a1 + 64))
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "initialRetrievalDispatchGroup"));
    dispatch_group_leave(v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "invalidatedLOIsOfTypes"));
  v8 = objc_msgSend(v7, "containsObject:", *(_QWORD *)(a1 + 48));

  if (v8)
    objc_msgSend(*(id *)(a1 + 32), "retrieveLOIsOfType:", *(_QWORD *)(a1 + 56));
}

void sub_1006B3B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006B3BA4(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v3 = objc_loadWeakRetained(v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "childItem"));
  objc_msgSend(v2, "didTapChildItemButtonForChildItem:", v4);

}

uint64_t sub_1006B3CF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1006B45B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B45C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006B45D8(uint64_t a1)
{

}

void sub_1006B45E0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1006B46F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1006B4870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

BOOL sub_1006B72F8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "photoType") != *(id *)(a1 + 32);
}

id sub_1006B73B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateIfNeeded");
}

void sub_1006B8298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B82B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006B82C0(uint64_t a1)
{

}

void sub_1006B82C8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1006B84D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invokeChangeHandlers");
}

void sub_1006B84D8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  unsigned int v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  TrafficIncidentReport *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t Log;
  NSObject *v31;
  void *v32;
  id v33;
  uint64_t v34;
  _QWORD v35[4];
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  id buf;
  _QWORD v41[5];
  id v42;
  id v43;

  objc_msgSend(*(id *)(a1 + 32), "_invokeChangeHandlers");
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    v2 = (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(_QWORD *)(a1 + 32));
  if (_MKRAPIsAvailable(v2) && !sub_1003DDB84())
  {
    v3 = *(void **)(a1 + 32);
    v43 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_buildRequestParamsWithError:", &v43));
    v5 = v43;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 56);
      if (v6)
        (*(void (**)(uint64_t, _QWORD, id))(v6 + 16))(v6, *(_QWORD *)(a1 + 32), v5);
    }
    else if (objc_msgSend(v4, "hasSubmissionParameters")
           && (v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "submissionParameters")),
               v8 = objc_msgSend(v7, "hasType"),
               v7,
               (v8 & 1) != 0))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "submissionParameters"));
      v10 = objc_msgSend(v9, "type");

      if (v10 == 11)
      {
        v11 = objc_alloc((Class)GEOLocation);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "submissionParameters"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "details"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "incidentFeedback"));
        v15 = objc_msgSend(v14, "newIncidentDetails");
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "incidentLocation"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "latLng"));
        v18 = objc_msgSend(v11, "initWithLocation:", v17);

        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "submissionParameters"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "details"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "incidentFeedback"));
        v22 = objc_msgSend(v21, "newIncidentDetails");
        v23 = objc_msgSend(v22, "type");

        v24 = -[TrafficIncidentReport initWithIncidentLocation:type:userPath:]([TrafficIncidentReport alloc], "initWithIncidentLocation:type:userPath:", v18, v23, 4);
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "submissionParameters"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "commonCorrections"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "comments"));
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472;
        v41[2] = sub_1006B88B4;
        v41[3] = &unk_1011ACAD0;
        v29 = *(id *)(a1 + 56);
        v41[4] = *(_QWORD *)(a1 + 32);
        v42 = v29;
        -[TrafficIncidentReport submitWithAttachedImages:comments:completionHandler:](v24, "submitWithAttachedImages:comments:completionHandler:", v25, v28, v41);

      }
      else
      {
        objc_initWeak(&buf, *(id *)(a1 + 32));
        v32 = *(void **)(a1 + 32);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v35[2] = sub_1006B893C;
        v35[3] = &unk_1011C0368;
        objc_copyWeak(&v39, &buf);
        v33 = v4;
        v34 = *(_QWORD *)(a1 + 32);
        v36 = v33;
        v37 = v34;
        v38 = *(id *)(a1 + 56);
        objc_msgSend(v32, "_buildUserInfoWithRequestParams:CompletionHandler:", v33, v35);

        objc_destroyWeak(&v39);
        objc_destroyWeak(&buf);
      }
    }
    else
    {
      Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsRAP");
      v31 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Canceling problem report send because the model created a malformed report", (uint8_t *)&buf, 2u);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1006B8898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1006B88B4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint8_t v6[16];

  v2 = sub_100431FFC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Successfully submitted RAP", v6, 2u);
  }

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v4 + 16))(v4, *(_QWORD *)(a1 + 32), 0);
  return objc_msgSend(*(id *)(a1 + 32), "_invokeChangeHandlers");
}

void sub_1006B893C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006B8A08;
  block[3] = &unk_1011BAA00;
  objc_copyWeak(&v13, (id *)(a1 + 56));
  v9 = v3;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v7 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v13);
}

void sub_1006B8A08(uint64_t a1)
{
  _QWORD *WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  id v21;
  uint8_t buf[4];
  uint64_t v23;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = sub_100431FFC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "UserInfo for RAP Submission: %@", buf, 0xCu);
    }

    if (sub_1003E0070())
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "submissionParameters"));
      objc_msgSend(WeakRetained, "_anonymizePhotos:", v6);

    }
    if (sub_1003E03D8())
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "submissionParameters"));
      objc_msgSend(WeakRetained, "_anonymizeScreenshots:", v7);

    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_context"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "traits"));
    v10 = objc_msgSend(v9, "copy");

    objc_msgSend(v10, "setSource:", 2);
    if (sub_1003DFD08())
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "submissionParameters"));
      objc_msgSend(WeakRetained, "_anonymizeLocations:traits:", v11, v10);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "submissionParameters"));
    objc_msgSend(WeakRetained, "_anonymizeDirectionsRequestsAndResponsesIfNeeded:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_saveRAPInfoToMapsSyncWithRequestParams:", *(_QWORD *)(a1 + 40)));
    v14 = (void *)WeakRetained[4];
    v15 = *(void **)(a1 + 56);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
    v19 = a1 + 32;
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(v19 + 8);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1006B8C3C;
    v20[3] = &unk_1011C0340;
    v20[4] = WeakRetained;
    v21 = v15;
    objc_msgSend(v14, "submitOrEnqueueFeedback:attachedImages:userInfo:traits:debugSettings:uploadPolicy:feedbackObjectToUpdate:completion:", v18, v16, v17, v10, 0, 1, v13, v20);

  }
}

void sub_1006B8C3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t Log;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  id v13;
  uint64_t v14;
  uint8_t v15[24];

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsRAP");
    v8 = objc_claimAutoreleasedReturnValue(Log);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    *(_DWORD *)v15 = 138412290;
    *(_QWORD *)&v15[4] = v6;
    v9 = "Submission: %@";
    v10 = v8;
    v11 = OS_LOG_TYPE_ERROR;
    v12 = 12;
  }
  else
  {
    v13 = sub_100431FFC();
    v8 = objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    *(_WORD *)v15 = 0;
    v9 = "Successfully submitted RAP";
    v10 = v8;
    v11 = OS_LOG_TYPE_INFO;
    v12 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, v15, v12);
LABEL_7:

  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
    (*(void (**)(uint64_t, _QWORD, id))(v14 + 16))(v14, *(_QWORD *)(a1 + 32), v6);
  objc_msgSend(*(id *)(a1 + 32), "_invokeChangeHandlers", *(_OWORD *)v15);

}

void sub_1006B8D78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldEnableCommunityID") || *(_BYTE *)(a1 + 64))
  {
    v2 = *(_QWORD *)(a1 + 40);
LABEL_4:
    (*(void (**)(void))(v2 + 16))();
    return;
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v2 = *(_QWORD *)(a1 + 56);
    goto LABEL_4;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1006B8E50;
  v5[3] = &unk_1011AF960;
  v6 = *(id *)(a1 + 56);
  v7 = *(id *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(v3 + 16))(v3, v4, v5);

}

_QWORD *sub_1006B8E50(uint64_t a1, char a2)
{
  void *v3;
  _QWORD *v4;

  if ((a2 & 1) != 0)
  {
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 17090, 0, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v3, "setBool:forKey:", 1, CFSTR("RAPHasReceived2015PrivacyConsent"));

    v4 = (_QWORD *)(a1 + 40);
  }
  else
  {
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 17085, 0, 0);
    v4 = (_QWORD *)(a1 + 32);
  }
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 16))(v4);
}

void sub_1006B9094(id *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id *v14;
  id *v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;

  v6 = objc_alloc_init((Class)GEORPFeedbackUserInfo);
  v7 = objc_alloc_init((Class)GEORPTdmInfo);
  objc_msgSend(v6, "setTdmUserInfo:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "tdmUserInfo"));
  objc_msgSend(v8, "setIsBlocked:", a2);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "tdmUserInfo"));
  objc_msgSend(v9, "setIsTrusted:", a3);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "submissionParameters"));
  if (objc_msgSend(v10, "type") != 21)
  {

    goto LABEL_5;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "previousFeedbackID"));

  if (!v11)
  {
LABEL_5:
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[FeedbackCommunityIDManager shared](_TtC4Maps26FeedbackCommunityIDManager, "shared"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1006B9394;
    v18[3] = &unk_1011C03E0;
    v14 = &v19;
    v19 = v6;
    v15 = &v20;
    v20 = a1[6];
    v17 = v6;
    objc_msgSend(v12, "fetchAuthenticationInfoForRAPReportWithReportID:completion:", 0, v18);
    goto LABEL_6;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[FeedbackCommunityIDManager shared](_TtC4Maps26FeedbackCommunityIDManager, "shared"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "previousFeedbackID"));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1006B9288;
  v21[3] = &unk_1011C03E0;
  v14 = &v22;
  v22 = v6;
  v15 = &v23;
  v23 = a1[6];
  v16 = v6;
  objc_msgSend(v12, "fetchAuthenticationInfoForRAPReportWithReportID:shouldIncreaseCount:completion:", v13, 0, v21);

LABEL_6:
}

void sub_1006B9288(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431FFC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = 138412290;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "communityID fetch Error: %@", (uint8_t *)&v11, 0xCu);
    }

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "anonymousId"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tdmUserInfo"));
  objc_msgSend(v10, "setAnonymousUserId:", v9);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1006B9394(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431FFC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = 138412290;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "communityID fetch Error: %@", (uint8_t *)&v11, 0xCu);
    }

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "anonymousId"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tdmUserInfo"));
  objc_msgSend(v10, "setAnonymousUserId:", v9);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1006BAA38(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Maps"), 0, 0);
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataContainerURL"));
  v2 = (void *)qword_1014D2E28;
  qword_1014D2E28 = v1;

}

id sub_1006BB34C()
{
  if (qword_1014D2E40 != -1)
    dispatch_once(&qword_1014D2E40, &stru_1011C0448);
  return (id)qword_1014D2E38;
}

void sub_1006BC0C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionLocationTypeMonitor");
  v2 = (void *)qword_1014D2E38;
  qword_1014D2E38 = (uint64_t)v1;

}

void sub_1006BC374(id a1)
{
  RAPRecordManager *v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[RAPRecordMapsSync sharedInstance](RAPRecordMapsSync, "sharedInstance"));
  v1 = -[RAPRecordManager initWithSyncedCache:]([RAPRecordManager alloc], "initWithSyncedCache:", v3);
  v2 = (void *)qword_1014D2E48;
  qword_1014D2E48 = (uint64_t)v1;

}

void sub_1006BC4F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id *v5;
  _QWORD v6[4];
  id v7;
  _QWORD block[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    if (v4)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1006BC5EC;
      block[3] = &unk_1011ACAD0;
      v5 = &v10;
      v10 = v4;
      v9 = v3;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

LABEL_6:
    }
  }
  else if (v4)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1006BC5FC;
    v6[3] = &unk_1011ADA00;
    v5 = &v7;
    v7 = v4;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
    goto LABEL_6;
  }

}

uint64_t sub_1006BC5EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1006BC5FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1006BC6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006BC70C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006BC71C(uint64_t a1)
{

}

void sub_1006BC724(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  RAPRecord *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id obj;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  RAPRecord *v28;
  void *v29;
  _QWORD block[4];
  id v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = a2;
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v25)
  {
    v23 = *(_QWORD *)v34;
    v24 = a1;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v34 != v23)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v3);
        v27 = v3;
        v5 = objc_opt_class(RapUserProfileRecord);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "contentData"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v5, v6, 0));

        v8 = objc_opt_class(GEORPRapResponse);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rapResponse"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v8, v9, 0));

        v28 = [RAPRecord alloc];
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "reportId"));
        v10 = objc_msgSend(v4, "type");
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "summary"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "createTime"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "countryCode"));
        LOWORD(v8) = +[RAPRecordReportStatus typeFromMapsSyncStatus:](RAPRecordReportStatus, "typeFromMapsSyncStatus:", objc_msgSend(v4, "status"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "communityID"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "communityIdentifier"));
        LOWORD(v21) = v8;
        v17 = -[RAPRecord initWithReportID:reportType:reportSummary:reportTitle:dateOfReportCreation:countryCodeUponCreation:reportStatus:contentData:communityIdentifier:rapResponse:](v28, "initWithReportID:reportType:reportSummary:reportTitle:dateOfReportCreation:countryCodeUponCreation:reportStatus:contentData:communityIdentifier:rapResponse:", v26, v10, v11, v12, v13, v14, v21, v7, v16, v29);

        a1 = v24;
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8) + 40), "addObject:", v17);

        v3 = v27 + 1;
      }
      while (v25 != (id)(v27 + 1));
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    }
    while (v25);
  }
  v18 = *(void **)(a1 + 32);
  if (v18)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1006BCA38;
    block[3] = &unk_1011AE540;
    v19 = v18;
    v20 = *(_QWORD *)(a1 + 40);
    v31 = v19;
    v32 = v20;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_1006BCA38(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "copy");
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1006BCB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006BCB84(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  RAPRecord *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id obj;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  RAPRecord *v28;
  void *v29;
  _QWORD block[4];
  id v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = a2;
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v25)
  {
    v23 = *(_QWORD *)v34;
    v24 = a1;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v34 != v23)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v3);
        v27 = v3;
        v5 = objc_opt_class(RapUserProfileRecord);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "contentData"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v5, v6, 0));

        v8 = objc_opt_class(GEORPRapResponse);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rapResponse"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v8, v9, 0));

        v28 = [RAPRecord alloc];
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "reportId"));
        v10 = objc_msgSend(v4, "type");
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "summary"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "createTime"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "countryCode"));
        LOWORD(v8) = +[RAPRecordReportStatus typeFromMapsSyncStatus:](RAPRecordReportStatus, "typeFromMapsSyncStatus:", objc_msgSend(v4, "status"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "communityID"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "communityIdentifier"));
        LOWORD(v21) = v8;
        v17 = -[RAPRecord initWithReportID:reportType:reportSummary:reportTitle:dateOfReportCreation:countryCodeUponCreation:reportStatus:contentData:communityIdentifier:rapResponse:](v28, "initWithReportID:reportType:reportSummary:reportTitle:dateOfReportCreation:countryCodeUponCreation:reportStatus:contentData:communityIdentifier:rapResponse:", v26, v10, v11, v12, v13, v14, v21, v7, v16, v29);

        a1 = v24;
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8) + 40), "addObject:", v17);

        v3 = v27 + 1;
      }
      while (v25 != (id)(v27 + 1));
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    }
    while (v25);
  }
  v18 = *(void **)(a1 + 32);
  if (v18)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1006BCE98;
    block[3] = &unk_1011AE540;
    v19 = v18;
    v20 = *(_QWORD *)(a1 + 40);
    v31 = v19;
    v32 = v20;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_1006BCE98(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "copy");
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1006BCFD8(_QWORD *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  RAPRecord *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id obj;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  RAPRecord *v36;
  void *v37;
  void *v38;
  _QWORD block[4];
  id v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint8_t v47[128];
  uint8_t buf[4];
  id v49;
  uint64_t v50;

  v2 = objc_alloc_init((Class)MSRAPRecordRequest);
  v50 = a1[4];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v50, 1));
  v4 = objc_claimAutoreleasedReturnValue(+[MapsSyncQueryPredicate queryPredicateWithFormat:argumentArray:](_TtC8MapsSync22MapsSyncQueryPredicate, "queryPredicateWithFormat:argumentArray:", CFSTR("reportId == %@"), v3));

  v30 = (void *)v4;
  v46 = 0;
  v31 = v2;
  v29 = objc_msgSend(objc_alloc((Class)_TtC8MapsSync20MapsSyncQueryOptions), "initWithPredicate:sortDescriptors:range:", v4, 0, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "fetchSyncWithOptions:error:"));
  v6 = 0;
  if (v6)
  {
    v7 = sub_10043299C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v49 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to fetch matching synced RAP records with error %@", buf, 0xCu);
    }

  }
  v28 = v6;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = v5;
  v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
  if (v35)
  {
    v33 = *(_QWORD *)v43;
    v34 = a1;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v43 != v33)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v9);
        v11 = objc_opt_class(RapUserProfileRecord);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contentData"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v11, v12, 0));

        v14 = objc_opt_class(GEORPRapResponse);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "rapResponse"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", v14, v15, 0));

        v36 = [RAPRecord alloc];
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "reportId"));
        v17 = objc_msgSend(v10, "type");
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "summary"));
        v19 = v13;
        v38 = v13;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "title"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "createTime"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "countryCode"));
        LOWORD(v27) = +[RAPRecordReportStatus typeFromMapsSyncStatus:](RAPRecordReportStatus, "typeFromMapsSyncStatus:", objc_msgSend(v10, "status"));
        v23 = -[RAPRecord initWithReportID:reportType:reportSummary:reportTitle:dateOfReportCreation:countryCodeUponCreation:reportStatus:contentData:communityIdentifier:rapResponse:](v36, "initWithReportID:reportType:reportSummary:reportTitle:dateOfReportCreation:countryCodeUponCreation:reportStatus:contentData:communityIdentifier:rapResponse:", v16, v17, v18, v20, v21, v22, v27, v19, 0, v37);

        -[RAPRecord setClientRevision:](v23, "setClientRevision:", objc_msgSend(v10, "clientRevision"));
        a1 = v34;
        objc_msgSend(*(id *)(*(_QWORD *)(v34[6] + 8) + 40), "addObject:", v23);

        v9 = (char *)v9 + 1;
      }
      while (v35 != v9);
      v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
    }
    while (v35);
  }

  v24 = (void *)a1[5];
  if (v24)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1006BD400;
    block[3] = &unk_1011AE540;
    v25 = v24;
    v26 = a1[6];
    v40 = v25;
    v41 = v26;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_1006BD400(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "copy");
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1006BD4DC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    if (v4)
    {
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_1006BD574;
      v5[3] = &unk_1011ACAD0;
      v7 = v4;
      v6 = v3;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

    }
  }

}

uint64_t sub_1006BD574(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1006BD610(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id *v5;
  _QWORD v6[4];
  id v7;
  _QWORD block[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    if (v4)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1006BD704;
      block[3] = &unk_1011ACAD0;
      v5 = &v10;
      v10 = v4;
      v9 = v3;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

LABEL_6:
    }
  }
  else if (v4)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1006BD714;
    v6[3] = &unk_1011ADA00;
    v5 = &v7;
    v7 = v4;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
    goto LABEL_6;
  }

}

uint64_t sub_1006BD704(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1006BD714(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1006BD80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006BD824(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  TrafficIncidentReport *v9;
  id v10;
  void *v11;
  TrafficIncidentReport *v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v20;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v7);
        v9 = [TrafficIncidentReport alloc];
        v10 = objc_msgSend(v8, "type");
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "countryCode"));
        v12 = -[TrafficIncidentReport initWithType:countryCodeUponCreation:](v9, "initWithType:countryCodeUponCreation:", v10, v11);

        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v12);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v5);
  }
  v13 = *(void **)(a1 + 32);
  if (v13)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1006BD9CC;
    v16[3] = &unk_1011AE540;
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 40);
    v17 = v14;
    v18 = v15;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v16);

  }
}

void sub_1006BD9CC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "copy");
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1006BDA84(id a1)
{
  RAPRecordManagerTrafficIncidentReportSaver *v1;
  void *v2;

  v1 = objc_alloc_init(RAPRecordManagerTrafficIncidentReportSaver);
  v2 = (void *)qword_1014D2E58;
  qword_1014D2E58 = (uint64_t)v1;

}

void sub_1006BDB38(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_10043261C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error adding traffic incident report to MapsSync cache: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1006BE294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006BE2B0(uint64_t a1, int a2)
{
  id WeakRetained;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && a2)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "_presentAddPhotosControllerWithSourceType:", *(_QWORD *)(a1 + 40));
    WeakRetained = v5;
  }

}

void sub_1006BE9CC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;

}

void sub_1006BEB50(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1006BEB88(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_photoCarouselControllerRequestsPhotoCreditEditor");
    WeakRetained = v2;
  }

}

void sub_1006BEBB8(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_requestAddingNewPhotoWithSourceType:", a2);
    WeakRetained = v4;
  }

}

void sub_1006BF0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006BF0BC(uint64_t a1, char a2)
{
  id WeakRetained;
  void *v4;
  _QWORD v5[5];
  char v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1006BF138;
    v5[3] = &unk_1011ACE58;
    v6 = a2;
    v5[4] = WeakRetained;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
  }

}

id *sub_1006BF138(id *result)
{
  if (*((_BYTE *)result + 40))
    return (id *)objc_msgSend(result[4], "_removeAddPhotosRowItemIfNeeded");
  return result;
}

MapsAppTest *__cdecl sub_1006BF468(id a1, NSString *a2, MapsAppTesting *a3, NSDictionary *a4)
{
  NSString *v6;
  MapsAppTesting *v7;
  NSDictionary *v8;
  NSDictionary *v9;
  NSString *v10;
  id v11;
  __objc2_class **v12;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (!v8
    || (v10 = (NSString *)objc_claimAutoreleasedReturnValue(-[NSDictionary valueForKey:](v8, "valueForKey:", CFSTR("testType")))) == 0)
  {
    v10 = v6;
  }
  if (-[NSString rangeOfString:](v6, "rangeOfString:", CFSTR("rpt")) == 0)
  {
    v12 = off_101197778;
    goto LABEL_14;
  }
  if (-[NSString rangeOfString:](v10, "rangeOfString:", CFSTR("pan")) == 0
    || -[NSString rangeOfString:](v10, "rangeOfString:", CFSTR("zoom")) == 0)
  {
    v12 = off_101197730;
LABEL_14:
    v11 = objc_msgSend(objc_alloc(*v12), "initWithApplication:testName:options:", v7, v6, v9);
    goto LABEL_15;
  }
  if (-[NSString rangeOfString:](v10, "rangeOfString:", CFSTR("circle")) == 0)
  {
    v12 = off_1011976A0;
    goto LABEL_14;
  }
  if (-[NSString rangeOfString:](v10, "rangeOfString:", CFSTR("jump")) == 0)
  {
    v12 = off_101197718;
    goto LABEL_14;
  }
  if (-[NSString rangeOfString:](v10, "rangeOfString:", CFSTR("step")) == 0)
  {
    v12 = off_101197800;
    goto LABEL_14;
  }
  if (-[NSString rangeOfString:](v10, "rangeOfString:", CFSTR("static")) == 0)
  {
    v12 = off_1011977F8;
    goto LABEL_14;
  }
  v11 = 0;
LABEL_15:

  return (MapsAppTest *)v11;
}

void sub_1006BFCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006BFCCC(uint64_t a1)
{
  uint64_t v1;
  id *v2;
  id WeakRetained;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setViewMode:", v1);

  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "setupMenuActions");

}

id sub_1006C06E8()
{
  if (qword_1014D2E70 != -1)
    dispatch_once(&qword_1014D2E70, &stru_1011C05E0);
  return (id)qword_1014D2E68;
}

void sub_1006C0AD8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionMonitor");
  v2 = (void *)qword_1014D2E68;
  qword_1014D2E68 = (uint64_t)v1;

}

uint64_t sub_1006C1370(int a1)
{
  if ((a1 - 1) > 0x57)
    return 0;
  else
    return qword_100E39DB8[a1 - 1];
}

id sub_1006C3DEC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_1006C3F78(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

BOOL sub_1006C4EF4(id a1, UIView *a2, unint64_t a3, BOOL *a4)
{
  UIView *v4;
  Class v5;
  char isKindOfClass;

  v4 = a2;
  v5 = NSClassFromString(CFSTR("_UIDebugColorBoundsView"));
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  return (isKindOfClass & 1) == 0;
}

void sub_1006C59C8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  unsigned __int8 v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  unsigned int v45;
  void *v46;
  void *v47;
  unsigned __int8 v48;
  CarManeuverView *v49;
  void *v50;
  void *v51;
  unsigned __int8 v52;
  CarManeuverView *v53;
  void *v54;
  id v55;
  NSObject *v56;
  id v57;
  void *v58;
  objc_class *v59;
  NSString *v60;
  void *v61;
  void *v62;
  void *v63;
  __CFString *v64;
  CarManeuverView *v65;
  void *v66;
  CarManeuverView *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  NSObject *v72;
  id v73;
  void *v74;
  objc_class *v75;
  NSString *v76;
  void *v77;
  void *v78;
  void *v79;
  __CFString *v80;
  void *v81;
  __CFString *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  _BOOL8 v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  unsigned __int8 v105;
  uint64_t v106;
  void *v107;
  void *v108;
  CarManeuverView *v109;
  void *v110;
  void *v111;
  id v112;
  NSObject *v113;
  id v114;
  void *v115;
  objc_class *v116;
  NSString *v117;
  void *v118;
  void *v119;
  void *v120;
  __CFString *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  _BOOL8 v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  unsigned int v140;
  void *v141;
  void *v142;
  void *v143;
  unsigned __int8 v144;
  int v145;
  unsigned int v146;
  void *v147;
  void *v148;
  void *v149;
  _QWORD v150[5];
  uint8_t buf[4];
  __CFString *v152;
  __int16 v153;
  void *v154;
  __int16 v155;
  void *v156;
  __int16 v157;
  int v158;

  v2 = sub_10043341C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(__CFString **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString primaryManeuver](v4, "primaryManeuver"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "guidance"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "signID"));
    *(_DWORD *)buf = 134218498;
    v152 = v4;
    v153 = 2112;
    v154 = v5;
    v155 = 2112;
    v156 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%p: prepare section of transition from primary sign %@ (%@)", buf, 0x20u);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));
  v10 = objc_msgSend(v9, "isForMidStep");

  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfoID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "laneInfoId"));
    v14 = +[MNComparison isValue:equalTo:](MNComparison, "isValue:equalTo:", v11, v13);

    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));
      objc_msgSend(v15, "updateLaneGuidance:", v16);

    }
  }
  v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewController"));
  if (v17)
  {
    v18 = (void *)v17;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfoID"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "junctionViewId"));
    v22 = +[MNComparison isValue:equalTo:](MNComparison, "isValue:equalTo:", v19, v21);

    if ((v22 & 1) == 0)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));

      if (v23)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "junctionViewId"));
        objc_msgSend(*(id *)(a1 + 32), "setJunctionViewInfoID:", v25);

        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewController"));
        objc_msgSend(v27, "setJunctionViewInfo:", v26);

        v28 = *(void **)(a1 + 40);
      }
      else
      {
        v28 = *(void **)(a1 + 48);
      }
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewConstraints"));
      objc_msgSend(v28, "addObjectsFromArray:", v29);

    }
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryGuidance"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "guidance"));

  if (!v30)
    goto LABEL_18;
  if (!v32)
    goto LABEL_18;
  if (v30 == v32)
    goto LABEL_18;
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "signID"));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "signID"));
  v35 = v33;
  v36 = v34;
  if (!(v35 | v36)
    || (v37 = (void *)v36,
        v38 = objc_msgSend((id)v35, "isEqual:", v36),
        v37,
        (id)v35,
        v37,
        (id)v35,
        (v38 & 1) != 0))
  {
    v39 = 1;
  }
  else
  {
LABEL_18:
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfoID"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "laneInfoId"));
    if ((+[MNComparison isValue:equalTo:](MNComparison, "isValue:equalTo:", v40, v42) & 1) != 0)
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryGuidanceSignID"));
      v148 = v30;
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryGuidance"));
      v45 = v10;
      v46 = v32;
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "signID"));
      v48 = +[MNComparison isValue:equalTo:](MNComparison, "isValue:equalTo:", v43, v47);

      v32 = v46;
      v10 = v45;

      v30 = v148;
      if ((v48 & 1) != 0)
      {
        if (!v45)
          goto LABEL_51;
LABEL_21:
        v49 = (CarManeuverView *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
        if (v49)
        {
LABEL_79:

          goto LABEL_80;
        }
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryGuidanceSignID"));
        v49 = (CarManeuverView *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryGuidance"));
        v51 = (void *)objc_claimAutoreleasedReturnValue(-[CarManeuverView signID](v49, "signID"));
        v52 = +[MNComparison isValue:equalTo:](MNComparison, "isValue:equalTo:", v50, v51);

        if ((v52 & 1) != 0)
          goto LABEL_80;
        v53 = [CarManeuverView alloc];
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryGuidance"));
        v49 = -[CarManeuverView initWithGuidance:variant:destination:layoutType:sizeDataSource:](v53, "initWithGuidance:variant:destination:layoutType:sizeDataSource:", v54, 2, objc_msgSend(*(id *)(a1 + 32), "destination"), objc_msgSend(*(id *)(a1 + 32), "layoutType"), *(_QWORD *)(a1 + 32));

        v55 = sub_10043341C();
        v56 = objc_claimAutoreleasedReturnValue(v55);
        if (!os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
          goto LABEL_69;
        v57 = *(id *)(a1 + 32);
        v58 = v57;
        if (!v57)
        {
          v64 = CFSTR("<nil>");
          goto LABEL_68;
        }
        v59 = (objc_class *)objc_opt_class(v57);
        v60 = NSStringFromClass(v59);
        v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
        if ((objc_opt_respondsToSelector(v58, "accessibilityIdentifier") & 1) != 0)
        {
          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "performSelector:", "accessibilityIdentifier"));
          v63 = v62;
          if (v62 && !objc_msgSend(v62, "isEqualToString:", v61))
          {
            v64 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v61, v58, v63));

            goto LABEL_30;
          }

        }
        v64 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v61, v58));
LABEL_30:

LABEL_68:
        *(_DWORD *)buf = 138543362;
        v152 = v64;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "[%{public}@] Reloading maneuver for midStep change (incoming)", buf, 0xCu);

LABEL_69:
        v122 = (void *)objc_claimAutoreleasedReturnValue(+[NavigationFeedbackCollector sharedFeedbackCollector](NavigationFeedbackCollector, "sharedFeedbackCollector"));
        -[CarManeuverView setAnalyticsDelegate:](v49, "setAnalyticsDelegate:", v122);

        v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuverConstraints"));
        if (v123)
        {
          v124 = *(void **)(a1 + 48);
          v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuverConstraints"));
          objc_msgSend(v124, "addObjectsFromArray:", v125);

        }
        objc_msgSend(*(id *)(a1 + 32), "_replaceSecondaryViewManeuver:initialConstraints:finalConstraints:", v49, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
        v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryGuidance"));
        goto LABEL_78;
      }
    }
    else
    {

    }
    v39 = 0;
  }
  v65 = [CarManeuverView alloc];
  v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryGuidance"));
  v67 = -[CarManeuverView initWithGuidance:variant:destination:layoutType:sizeDataSource:](v65, "initWithGuidance:variant:destination:layoutType:sizeDataSource:", v66, objc_msgSend(*(id *)(a1 + 32), "_primaryManeuverViewVariant"), objc_msgSend(*(id *)(a1 + 32), "destination"), objc_msgSend(*(id *)(a1 + 32), "layoutType"), *(_QWORD *)(a1 + 32));

  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NavigationFeedbackCollector sharedFeedbackCollector](NavigationFeedbackCollector, "sharedFeedbackCollector"));
  -[CarManeuverView setAnalyticsDelegate:](v67, "setAnalyticsDelegate:", v68);

  v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));
  if (v69)
  {
    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));
    -[CarManeuverView showLaneGuidance:](v67, "showLaneGuidance:", v70);

  }
  v71 = sub_10043341C();
  v72 = objc_claimAutoreleasedReturnValue(v71);
  if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
  {
    v73 = *(id *)(a1 + 32);
    v74 = v73;
    v147 = v32;
    v149 = v30;
    v145 = v39;
    v146 = v10;
    if (!v73)
    {
      v80 = CFSTR("<nil>");
      goto LABEL_44;
    }
    v75 = (objc_class *)objc_opt_class(v73);
    v76 = NSStringFromClass(v75);
    v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
    if ((objc_opt_respondsToSelector(v74, "accessibilityIdentifier") & 1) != 0)
    {
      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "performSelector:", "accessibilityIdentifier"));
      v79 = v78;
      if (v78 && !objc_msgSend(v78, "isEqualToString:", v77))
      {
        v80 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v77, v74, v79));

        goto LABEL_42;
      }

    }
    v80 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v77, v74));
LABEL_42:

LABEL_44:
    v81 = *(void **)(a1 + 32);
    v82 = v80;
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "primaryManeuver"));
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "guidance"));
    v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "signID"));
    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));

    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "laneInfoId"));
    *(_DWORD *)buf = 138544130;
    v152 = v80;
    v153 = 2114;
    v154 = v85;
    v155 = 2114;
    v156 = v87;
    v157 = 1024;
    v158 = v145;
    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "[%{public}@] Reloading maneuver for primary(%{public}@)/lane(%{public}@) ID change(s), theyAreTheSameIDButDifferentPointers: %d", buf, 0x26u);

    v32 = v147;
    v30 = v149;
    v10 = v146;
  }

  v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuverConstraints"));
  if (v88)
  {
    v89 = *(void **)(a1 + 48);
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuverConstraints"));
    objc_msgSend(v89, "addObjectsFromArray:", v90);

  }
  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  if (v91)
  {
    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
    v93 = v92 != 0;

  }
  else
  {
    v93 = 0;
  }

  objc_msgSend(*(id *)(a1 + 32), "_replacePrimaryViewManeuver:initialConstraints:finalConstraints:slide:", v67, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), v93);
  objc_msgSend(*(id *)(a1 + 32), "setNextPrimaryManeuver:", v67);
  v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryGuidance"));
  v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "signID"));
  objc_msgSend(*(id *)(a1 + 32), "setPrimaryGuidanceSignID:", v95);

  v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceInfo"));
  v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "laneInfoId"));
  objc_msgSend(*(id *)(a1 + 32), "setLaneGuidanceInfoID:", v97);

  v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
  v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "junctionViewId"));
  objc_msgSend(*(id *)(a1 + 32), "setJunctionViewInfoID:", v99);

  if (v10)
    goto LABEL_21;
LABEL_51:
  v49 = (CarManeuverView *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryGuidanceSignID"));
  v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryGuidance"));
  v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "signID"));
  if ((+[MNComparison isValue:equalTo:](MNComparison, "isValue:equalTo:", v49, v101) & 1) == 0)
  {

    goto LABEL_55;
  }
  v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfoID"));
  v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
  v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "junctionViewId"));
  v105 = +[MNComparison isValue:equalTo:](MNComparison, "isValue:equalTo:", v102, v104);

  if ((v105 & 1) == 0)
  {
LABEL_55:
    v106 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryGuidance"));
    if (!v106
      || (v107 = (void *)v106,
          v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo")),
          v108,
          v107,
          v108))
    {
      v49 = 0;
LABEL_75:
      v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuverConstraints"));

      if (v127)
      {
        v128 = *(void **)(a1 + 48);
        v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuverConstraints"));
        objc_msgSend(v128, "addObjectsFromArray:", v129);

      }
      objc_msgSend(*(id *)(a1 + 32), "_replaceSecondaryViewManeuver:initialConstraints:finalConstraints:", v49, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
      v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryGuidance"));
LABEL_78:
      v130 = v126;
      v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "signID"));
      objc_msgSend(*(id *)(a1 + 32), "setSecondaryGuidanceSignID:", v131);

      objc_msgSend(*(id *)(a1 + 32), "setNextSecondaryManeuver:", v49);
      goto LABEL_79;
    }
    v109 = [CarManeuverView alloc];
    v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryGuidance"));
    v49 = -[CarManeuverView initWithGuidance:variant:destination:layoutType:sizeDataSource:](v109, "initWithGuidance:variant:destination:layoutType:sizeDataSource:", v110, 2, objc_msgSend(*(id *)(a1 + 32), "destination"), objc_msgSend(*(id *)(a1 + 32), "layoutType"), *(_QWORD *)(a1 + 32));

    v111 = (void *)objc_claimAutoreleasedReturnValue(+[NavigationFeedbackCollector sharedFeedbackCollector](NavigationFeedbackCollector, "sharedFeedbackCollector"));
    -[CarManeuverView setAnalyticsDelegate:](v49, "setAnalyticsDelegate:", v111);

    v112 = sub_10043341C();
    v113 = objc_claimAutoreleasedReturnValue(v112);
    if (!os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
    {
LABEL_74:

      goto LABEL_75;
    }
    v114 = *(id *)(a1 + 32);
    v115 = v114;
    if (!v114)
    {
      v121 = CFSTR("<nil>");
      goto LABEL_73;
    }
    v116 = (objc_class *)objc_opt_class(v114);
    v117 = NSStringFromClass(v116);
    v118 = (void *)objc_claimAutoreleasedReturnValue(v117);
    if ((objc_opt_respondsToSelector(v115, "accessibilityIdentifier") & 1) != 0)
    {
      v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "performSelector:", "accessibilityIdentifier"));
      v120 = v119;
      if (v119 && !objc_msgSend(v119, "isEqualToString:", v118))
      {
        v121 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v118, v115, v120));

        goto LABEL_65;
      }

    }
    v121 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v118, v115));
LABEL_65:

LABEL_73:
    *(_DWORD *)buf = 138543362;
    v152 = v121;
    _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, "[%{public}@] Reloading maneuver for midStep change (outgoing)", buf, 0xCu);

    goto LABEL_74;
  }
LABEL_80:
  if (objc_msgSend(*(id *)(a1 + 32), "layoutType") == (id)1)
  {
    v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuverView"));
    v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuverView"));
    objc_msgSend(v132, "alignSubviewsTo:", v133);

  }
  v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuver"));
  if (v134)
  {
    v49 = (CarManeuverView *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
    v135 = v49 != 0;
  }
  else
  {
    v135 = 0;
  }
  v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
  objc_msgSend(v136, "setSecondarySignVisible:", v135);

  if (v134)
  v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
  if (v137
    || (v49 = (CarManeuverView *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuverView"))) != 0)
  {
    v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryViewOnlyConstraints"));
    v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "firstObject"));
    v140 = objc_msgSend(v139, "isActive");

    if (v137)
    {

      if (v140)
      {
LABEL_91:
        v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryViewOnlyConstraints"));
        +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", v141);
        goto LABEL_97;
      }
    }
    else
    {

      if ((v140 & 1) != 0)
        goto LABEL_91;
    }
  }
  v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
  if (!v141)
  {
    v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuverView"));
    if (!v141)
    {
      v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryViewOnlyConstraints"));
      v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "firstObject"));
      v144 = objc_msgSend(v143, "isActive");

      if ((v144 & 1) != 0)
        goto LABEL_98;
      v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryViewOnlyConstraints"));
      +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v141);
    }
  }
LABEL_97:

LABEL_98:
  if (objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", *(_QWORD *)(a1 + 56));
    v150[0] = _NSConcreteStackBlock;
    v150[1] = 3221225472;
    v150[2] = sub_1006C6944;
    v150[3] = &unk_1011AC860;
    v150[4] = *(_QWORD *)(a1 + 32);
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v150);
  }

}

id sub_1006C6944(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_1006C696C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;

  v2 = sub_10043341C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "primaryManeuver"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "guidance"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "signID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "guidance"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "signID"));
    *(_DWORD *)buf = 134219010;
    v15 = v4;
    v16 = 2112;
    v17 = v5;
    v18 = 2112;
    v19 = v7;
    v20 = 2112;
    v21 = v8;
    v22 = 2112;
    v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%p: animate section of transition from primary sign %@ (%@) to %@ (%@)", buf, 0x34u);

  }
  +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", *(_QWORD *)(a1 + 40));
  +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", *(_QWORD *)(a1 + 48));
  return +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", *(_QWORD *)(a1 + 56));
}

id sub_1006C6B10(uint64_t a1)
{
  void *v1;
  id v3;
  NSObject *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id result;
  void *v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;

  v3 = sub_10043341C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(void **)(a1 + 32);
    v6 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "primaryManeuver"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "guidance"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "signID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "guidance"));
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signID"));
    *(_DWORD *)buf = 134219010;
    v37 = (const char *)v5;
    v38 = 2112;
    v39 = v6;
    v40 = 2112;
    v41 = v8;
    v42 = 2112;
    v43 = v9;
    v44 = 2112;
    v45 = v1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%p: Completing transition from primary sign %@ (%@) to %@ (%@)", buf, 0x34u);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver"));

  if (v12)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver"));

    if (v13 == v1)
    {
      v14 = sub_1004318FC();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v37 = "-[CarNavigationGuidanceSign updateWithGroupAnimation:]_block_invoke";
        v38 = 2080;
        v39 = "CarNavigationGuidanceSign.m";
        v40 = 1024;
        LODWORD(v41) = 840;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
      }

      if (sub_100A70734())
      {
        v16 = sub_1004318FC();
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
          *(_DWORD *)buf = 138412290;
          v37 = (const char *)v1;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

        }
      }
      v18 = sub_10043341C();
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      {
        v20 = *(const char **)(a1 + 32);
        *(_DWORD *)buf = 134217984;
        v37 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "%p: It shouldn't be possible to switch between the same instance of the nav sign", buf, 0xCu);
      }

    }
  }
  v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver"));
  if (!v21
    || (v22 = (void *)v21,
        v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver")),
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver")),
        v23,
        v1,
        v22,
        v1 == v23))
  {
    v26 = 0;
  }
  else
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryManeuver"));
    objc_msgSend(v24, "removeFromSuperview");

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextPrimaryManeuver"));
    objc_msgSend(*(id *)(a1 + 32), "setPrimaryManeuver:", v25);

    v26 = 1;
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextSecondaryManeuver"));
  if (v27)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextSecondaryManeuver"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuver"));
    if (v1 != v28)
    {

      goto LABEL_27;
    }
  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryGuidanceSignID"));
  if (v29)
  {

    if (!v27)
      goto LABEL_29;

    goto LABEL_28;
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuver"));

  if (v27)
  {

  }
  if (v30)
  {
LABEL_27:
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryManeuver"));
    objc_msgSend(v31, "removeFromSuperview");

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextSecondaryManeuver"));
    objc_msgSend(*(id *)(a1 + 32), "setSecondaryManeuver:", v27);
    v26 = 1;
LABEL_28:

  }
LABEL_29:
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionViewInfo"));
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "junctionView"));
  objc_msgSend(v33, "setHidden:", v32 == 0);

  objc_msgSend(*(id *)(a1 + 32), "setNextPrimaryManeuver:", 0);
  result = objc_msgSend(*(id *)(a1 + 32), "setNextSecondaryManeuver:", 0);
  if (v26)
  {
    objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
    return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
  }
  return result;
}

id sub_1006C8ED8()
{
  if (qword_1014D2E80 != -1)
    dispatch_once(&qword_1014D2E80, &stru_1011C0640);
  return (id)qword_1014D2E78;
}

void sub_1006C9674(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionSunsetSunriseMonitor");
  v2 = (void *)qword_1014D2E78;
  qword_1014D2E78 = (uint64_t)v1;

}

void sub_1006CAD0C(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[7], "stopAnimating");
    objc_msgSend(v3[1], "replaceCurrentItemWithPlayerItem:preserveCurrentTimestamp:", *(_QWORD *)(a1 + 32), 0);
    WeakRetained = v3;
  }

}

void sub_1006CAF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006CAFB0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  int v15;
  id v16;
  __int16 v17;
  void *v18;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v7 || !objc_msgSend(v6, "length"))
    {
      v9 = sub_10043253C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = objc_msgSend(v6, "length");
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
        v15 = 134218242;
        v16 = v11;
        v17 = 2112;
        v18 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Data Length: %lu. Error download asset data: %@", (uint8_t *)&v15, 0x16u);

      }
      v13 = objc_msgSend(objc_alloc((Class)NSDataAsset), "initWithName:", *(_QWORD *)(a1 + 32));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "data"));
      objc_msgSend(WeakRetained, "_showMovieWithData:", v14);

    }
    else
    {
      objc_msgSend(WeakRetained, "_showMovieWithData:", v6);
    }
  }

}

void sub_1006CB1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006CB1FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  id *v9;
  id *WeakRetained;
  id v11;
  NSObject *v12;
  void *v13;
  double v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;

  v7 = a2;
  v8 = a5;
  v9 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v8)
    {
      v11 = sub_10043253C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
        *(_DWORD *)buf = 138412290;
        v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

      }
LABEL_10:

      objc_msgSend(WeakRetained[7], "stopAnimating");
      goto LABEL_11;
    }
    if (!v7 || (objc_msgSend(v7, "size"), v14 <= 0.0))
    {
      v15 = sub_10043253C();
      v12 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Image is nil or has no height", buf, 2u);
      }
      goto LABEL_10;
    }
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1006CB3CC;
    v16[3] = &unk_1011AD1E8;
    objc_copyWeak(&v18, v9);
    v17 = v7;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v16);

    objc_destroyWeak(&v18);
  }
LABEL_11:

}

void sub_1006CB3CC(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[3], "setImage:", *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 32), "size");
    v5 = v4;
    objc_msgSend(*(id *)(a1 + 32), "size");
    v7 = v5 / v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[3], "heightAnchor"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[3], "widthAnchor"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "constraintEqualToAnchor:multiplier:", v9, 1.0 / v7));
    v12 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
    +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v11);

    objc_msgSend(v3[7], "stopAnimating");
  }

}

void sub_1006CB8F8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "updateIdentifier"));
  LODWORD(v3) = objc_msgSend(v3, "isEqual:", v4);

  if ((_DWORD)v3)
    objc_msgSend(*(id *)(a1 + 40), "setImage:", v5);

}

void sub_1006CB970(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v3 = a2;
  if (+[NSThread isMainThread](NSThread, "isMainThread"))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1006CBA24;
    v4[3] = &unk_1011ACAD0;
    v6 = *(id *)(a1 + 32);
    v5 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

  }
}

uint64_t sub_1006CBA24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

double sub_1006CC554(uint64_t a1, void *a2)
{
  if (objc_msgSend(a2, "row") == (id)(*(_QWORD *)(a1 + 32) - 1))
    return _UICollectionViewListSectionSeparatorInsetHidden[0];
  else
    return _UICollectionViewListLayoutSectionAutomaticDimension;
}

void sub_1006CC700(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 40));

  if (v5)
  {
    if (+[NSThread isMainThread](NSThread, "isMainThread"))
    {
      objc_msgSend(*(id *)(a1 + 32), "setThumbnailImage:", v3);
    }
    else
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1006CC7DC;
      v6[3] = &unk_1011AC8B0;
      v7 = *(id *)(a1 + 32);
      v8 = v3;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

    }
  }

}

id sub_1006CC7DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setThumbnailImage:", *(_QWORD *)(a1 + 40));
}

void sub_1006CD280(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSNumberFormatter);
  v2 = (void *)qword_1014D2E88;
  qword_1014D2E88 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2E88, "setNumberStyle:", 0);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](NSLocale, "localeWithLocaleIdentifier:", CFSTR("en_US")));
  objc_msgSend((id)qword_1014D2E88, "setLocale:", v3);

}

id sub_1006CDBE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyObserversItemsDidChange");
}

void sub_1006CE554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006CE574(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ((objc_msgSend(v4, "hasEnteredLookAround") & 1) == 0 && *(_QWORD *)(a1 + 32))
    objc_msgSend(v4, "enterLookAroundWithEntryPoint:");
  objc_msgSend(v4, "setDelegate:", WeakRetained);

}

id sub_1006CEC0C(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataCoordinator"));
  objc_msgSend(v2, "setNeedsMapViewSynchronization");

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 505) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_updateLayoutWithCurrentValue");
}

__n128 sub_1006CEC58(uint64_t a1)
{
  void *v2;
  __n128 result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataCoordinator"));
  objc_msgSend(v2, "resume");

  objc_msgSend(*(id *)(a1 + 32), "_updatePIPLayout");
  result = (__n128)CGSizeZero;
  *(CGSize *)(*(_QWORD *)(a1 + 32) + 528) = CGSizeZero;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 505) = 0;
  return result;
}

id sub_1006CED90(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataCoordinator"));
  objc_msgSend(v2, "setNeedsMapViewSynchronization");

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 505) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_updateLayoutWithCurrentValue");
}

id sub_1006CEDDC(uint64_t a1)
{
  void *v2;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataCoordinator"));
  objc_msgSend(v2, "resume");

  result = objc_msgSend(*(id *)(a1 + 32), "_updatePIPLayout");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 505) = 0;
  return result;
}

id sub_1006D05FC(id *a1)
{
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat *v15;
  char *v16;
  CGPoint *v17;
  const CGRect *v18;
  char *v19;
  CGPoint *v20;
  CGPoint v21;
  CGSize size;
  CGSize v23;
  void *v24;
  void *v25;
  CGRect v27;

  v2 = (char *)a1[4];
  v3 = (void *)*((_QWORD *)v2 + 54);
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));

    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "window"));
      objc_msgSend(*((id *)a1[4] + 54), "bounds");
      objc_msgSend(v5, "convertRect:fromView:", *((_QWORD *)a1[4] + 54));
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;

      v27.origin.x = v7;
      v27.origin.y = v9;
      v27.size.width = v11;
      v27.size.height = v13;
      v14 = 1.0;
      if (!CGRectEqualToRect(v27, *(CGRect *)((char *)a1[4] + 600)))
      {
        v15 = (CGFloat *)((char *)a1[4] + 600);
        *v15 = v7;
        v15[1] = v9;
        v15[2] = v11;
        v15[3] = v13;
      }
    }
    else
    {
      v19 = (char *)a1[4];
      v20 = (CGPoint *)(v19 + 600);
      if (objc_msgSend(v19, "isDisplayingLookAroundPIP"))
      {
        v21 = *(CGPoint *)((char *)a1[4] + 584);
        *v20 = *(CGPoint *)((char *)a1[4] + 568);
        v20[1] = v21;
      }
      else
      {
        size = CGRectZero.size;
        *v20 = CGRectZero.origin;
        v20[1] = (CGPoint)size;
      }
      v14 = 0.0;
    }
  }
  else
  {
    v14 = 0.0;
    if (!CGRectEqualToRect(*(CGRect *)(v2 + 568), *(CGRect *)(v2 + 600)))
    {
      v16 = (char *)a1[4];
      v17 = (CGPoint *)(v16 + 600);
      if (objc_msgSend(v16, "isDisplayingLookAroundPIP"))
        v18 = (const CGRect *)((char *)a1[4] + 568);
      else
        v18 = &CGRectZero;
      v23 = v18->size;
      *v17 = v18->origin;
      v17[1] = (CGPoint)v23;
    }
  }
  objc_msgSend(a1[4], "_sanitizedOriginFrame");
  objc_msgSend(a1[6], "setFrame:");
  objc_msgSend(a1[6], "setAlpha:", v14);
  objc_msgSend(a1[7], "setAlpha:", 0.0);
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "puckViewController"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "view"));
  objc_msgSend(v25, "setAlpha:", 0.0);

  objc_msgSend(a1[8], "setLayoutStyle:", 6);
  return objc_msgSend(a1[6], "layoutIfNeeded");
}

id sub_1006D07F4(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "lookAroundContainerViewControllerDidAnimateFromModeTransition:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(a1 + 48), "completeTransition:", 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 510) = 0;
  return result;
}

uint64_t sub_1006D0838(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1006D0844(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1006D0C38(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setLayoutStyle:", *(_QWORD *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 40), "setFrame:", *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96));
  objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(a1 + 48), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(a1 + 56), "setBadgeHidden:", *(unsigned __int8 *)(a1 + 104));
  return objc_msgSend(*(id *)(a1 + 40), "layoutIfNeeded");
}

void sub_1006D0C98(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _BOOL8 v10;
  id v11;

  objc_msgSend(*(id *)(a1 + 32), "completeTransition:", 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 510) = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v2, "setNeedsLayout");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v3, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 40), "_showPuckAnimated");
  v4 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v4 + 507))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v4, "chromeViewController"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "acquireChromeDeactivationTokenForReason:", CFSTR("full-screen Look Around")));
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(v7 + 496);
    *(_QWORD *)(v7 + 496) = v6;

  }
  else
  {
    v5 = *(void **)(v4 + 496);
    *(_QWORD *)(v4 + 496) = 0;
  }

  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_BYTE *)(v9 + 507) == 0;
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v9 + 456), "cardPresentationController"));
  objc_msgSend(v11, "setHidden:", v10);

}

uint64_t sub_1006D0DAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1006D0DB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1006D0E40(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "updateMapEdgeInsets");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "puckViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v2, "setAlpha:", 1.0);

}

void sub_1006D102C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1006D1048(uint64_t a1)
{
  int v2;
  id *v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  uint64_t v31;
  id v32;
  char v33;
  _QWORD v34[4];
  id v35;
  id v36[3];
  char v37;
  char v38;
  char v39;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (v2)
  {
    objc_msgSend(WeakRetained, "_setupForFullScreen");
    v6 = 7;
  }
  else
  {
    objc_msgSend(WeakRetained, "_setupForPIP");
    v6 = 6;
  }
  v28 = (void *)v6;

  v27 = *(id *)(*(_QWORD *)(a1 + 32) + 560);
  objc_msgSend(v27, "setCompassHidden:", 1);
  v7 = *(unsigned __int8 *)(a1 + 48);
  v8 = objc_loadWeakRetained(v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pipViewController"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lookAroundContainerView"));
  objc_msgSend(v10, "setBadgeHidden:", v7);

  v11 = objc_loadWeakRetained(v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "pipViewController"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cardView"));

  v13 = objc_loadWeakRetained(v3);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "currentViewController"));

  v15 = objc_loadWeakRetained(v3);
  v16 = objc_msgSend(v15, "originalLayoutForViewController:", v14);

  v17 = objc_opt_class(PlaceCardViewController);
  v18 = objc_opt_isKindOfClass(v14, v17) & 1;
  v19 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "containerStyle");
  LOBYTE(v8) = (v19 > 7) | (0x5Cu >> v19) & 1;
  v20 = objc_loadWeakRetained(v3);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "view"));
  objc_msgSend(v21, "setNeedsLayout");

  +[CATransaction begin](CATransaction, "begin");
  +[CATransaction setAnimationDuration:](CATransaction, "setAnimationDuration:", 0.25);
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CAMediaTimingFunction functionWithName:](CAMediaTimingFunction, "functionWithName:", kCAMediaTimingFunctionEaseInEaseOut));
  +[CATransaction setAnimationTimingFunction:](CATransaction, "setAnimationTimingFunction:", v22);

  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1006D135C;
  v34[3] = &unk_1011C0758;
  objc_copyWeak(v36, v3);
  v37 = v18;
  v38 = (char)v8;
  v36[1] = v16;
  v23 = v26;
  v35 = v23;
  v36[2] = v28;
  v39 = *(_BYTE *)(a1 + 48);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1006D13F8;
  v29[3] = &unk_1011C0780;
  objc_copyWeak(&v32, v3);
  v33 = *(_BYTE *)(a1 + 48);
  v24 = v27;
  v25 = *(_QWORD *)(a1 + 32);
  v30 = v24;
  v31 = v25;
  +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v34, v29, 0.25);
  +[CATransaction commit](CATransaction, "commit");

  objc_destroyWeak(&v32);
  objc_destroyWeak(v36);

}

void sub_1006D133C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  _Unwind_Resume(a1);
}

void sub_1006D135C(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  void *v4;
  _QWORD *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 65))
      objc_msgSend(WeakRetained, "setLayoutIfSupported:animated:", *(_QWORD *)(a1 + 48), 1);
    objc_msgSend(*(id *)(a1 + 32), "setLayoutStyle:", *(_QWORD *)(a1 + 56));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
    objc_msgSend(v3, "layoutIfNeeded");

    WeakRetained = v5;
    if (!*(_BYTE *)(a1 + 66))
    {
      v4 = (void *)v5[62];
      v5[62] = 0;

      WeakRetained = v5;
    }
  }

}

void sub_1006D13F8(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  uint64_t v4;
  void *v5;
  _BOOL8 v6;
  void *v7;
  _QWORD *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    if (*(_BYTE *)(a1 + 56))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "chromeViewController"));
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "acquireChromeDeactivationTokenForReason:", CFSTR("full-screen Look Around")));
      v5 = (void *)v8[62];
      v8[62] = v4;

      v6 = *(_BYTE *)(a1 + 56) != 0;
    }
    else
    {
      v6 = 0;
    }
    objc_msgSend(v8, "_showTTRButton:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_maps_mapsSceneDelegate"));
    objc_msgSend(v7, "refreshTitle");

    objc_msgSend(*(id *)(a1 + 32), "setCompassHidden:animated:", objc_msgSend(v8, "isDisplayingLookAroundPIP"), 1);
    +[PPTNotificationCenter postNotificationIfNeededWithName:object:userInfo:](PPTNotificationCenter, "postNotificationIfNeededWithName:object:userInfo:", CFSTR("PPTLookAroundContainerViewControllerDidTransitionToFullscreen"), *(_QWORD *)(a1 + 40), 0);
    WeakRetained = v8;
  }

}

id sub_1006D1850(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentViewController"));
  objc_msgSend(v2, "heightForLayout:", 1);
  v4 = v3;

  return objc_msgSend(*(id *)(a1 + 32), "contentHeightUpdatedWithValue:", v4);
}

id sub_1006D189C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateMapEdgeInsets");
}

id sub_1006D2740(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 552), "viewControllerGoPreviousState:withSender:", a1[5], a1[6]);
}

void sub_1006D2C64(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedLabelMarker"));
  v3 = *(void **)(a1 + 40);

  if (v2 == v3)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 552), "viewControllerGoPreviousState:withSender:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32));
}

void sub_1006D62E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

id sub_1006D6308(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1006D6330(uint64_t a1)
{

}

void sub_1006D6338(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[2];
  _QWORD v22[2];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "photo"));
    v6 = v5;
    if (v5)
    {
      v7 = *(void **)(a1 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "photo"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
      objc_msgSend(v7, "saveImage:withIdentifier:", v8, v9);

      v21[0] = CFSTR("id");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
      v21[1] = CFSTR("url");
      v22[0] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
      v22[1] = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 2));

      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      if (v13)
      {
        v20 = v12;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1));
        (*(void (**)(uint64_t, void *, _QWORD))(v13 + 16))(v13, v14, 0);

        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v16 = *(void **)(v15 + 40);
        *(_QWORD *)(v15 + 40) = 0;

      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "webBundleQuestion"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "geotaggedPhotoCommentQuestion"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "photo"));
      objc_msgSend(v18, "addPhoto:", v19);

    }
  }

}

id sub_1006D7384(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", *(double *)(a1 + 40));
}

void sub_1006D7DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006D7E04(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscriptionInfo"));
    objc_msgSend(v2, "offlineMapDetailsActionSectionControllerDidSelectDeleteMap:", v3);

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 408, 112, 0);
    WeakRetained = v4;
  }

}

void sub_1006D7F50(id a1)
{
  VLFSessionStateFloatingDebugViewController *v1;
  void *v2;

  v1 = objc_opt_new(VLFSessionStateFloatingDebugViewController);
  v2 = (void *)qword_1014D2E98;
  qword_1014D2E98 = (uint64_t)v1;

}

void sub_1006D91C0(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *, void *, void *);
  void *v7;
  id v8;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSession sharedSession](NSURLSession, "sharedSession"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("https://internalcheck.apple.com")));
  v4 = _NSConcreteStackBlock;
  v5 = 3221225472;
  v6 = sub_1006D92CC;
  v7 = &unk_1011B1700;
  objc_copyWeak(&v8, &location);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dataTaskWithURL:completionHandler:", v2, &v4));

  objc_msgSend(v3, "resume", v4, v5, v6, v7);
  objc_destroyWeak(&v8);

  objc_destroyWeak(&location);
}

void sub_1006D92A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006D92CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id WeakRetained;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v7 = a3;
  v8 = a4;
  if (!v8
    && (v9 = objc_opt_class(NSHTTPURLResponse), (objc_opt_isKindOfClass(v7, v9) & 1) != 0)
    && objc_msgSend(v7, "statusCode") == (id)200)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v11 = WeakRetained;
    v12 = &__kCFBooleanTrue;
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v11 = WeakRetained;
    v12 = &__kCFBooleanFalse;
  }
  objc_msgSend(WeakRetained, "setIsConnectedToInternalAppleNetwork:", v12);

}

void sub_1006D9388(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D2EB0;
  qword_1014D2EB0 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D2EB0, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSSSSSZZZ"));
  v3 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend((id)qword_1014D2EB0, "setLocale:", v3);

}

int64_t sub_1006D9400(id a1, VLFSessionMonitor *a2, VLFSessionMonitor *a3)
{
  VLFSessionMonitor *v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  id v11;

  v4 = a3;
  v5 = (objc_class *)objc_opt_class(a2);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (objc_class *)objc_opt_class(v4);

  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = objc_msgSend(v7, "compare:", v10);

  return (int64_t)v11;
}

void sub_1006D9550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006D956C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateDebugText");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "startDebugInfoRefreshTimer");

}

void sub_1006D9708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006D972C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "vlfSessionTask"));
  objc_msgSend(v1, "showVLFUI");

}

void sub_1006DA7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006DA7F8(uint64_t a1, void *a2)
{
  id *WeakRetained;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "selectedLabelMarker"));

    if (v4)
    {
      objc_msgSend(WeakRetained, "_instrumentSelectingLabel");
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "selectedLabelMarker"));
      v6 = WeakRetained[9];
      WeakRetained[9] = (id)v5;

      objc_msgSend(WeakRetained, "_updateLabelPickerDoneBarItem");
    }
    else
    {
      objc_msgSend(WeakRetained[8], "setEnabled:", 0);
    }
  }

}

id sub_1006DC410()
{
  if (qword_1014D2EC0 != -1)
    dispatch_once(&qword_1014D2EC0, &stru_1011C08D8);
  return (id)qword_1014D2EB8;
}

void sub_1006DE154(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionArrivalStepAvailabilityMonitor");
  v2 = (void *)qword_1014D2EB8;
  qword_1014D2EB8 = (uint64_t)v1;

}

BOOL sub_1006DF7FC(id a1, CarFocusableButton *a2, unint64_t a3, BOOL *a4)
{
  return -[CarFocusableButton canBecomeFocused](a2, "canBecomeFocused", a3, a4);
}

id sub_1006E3694(uint64_t a1)
{
  void *v1;
  __int128 v3;
  uint64_t v4;

  v1 = *(void **)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  return objc_msgSend(v1, "setConfiguration:", &v3);
}

id *sub_1006E36CC(id *result)
{
  if (*((_BYTE *)result + 40))
  {
    if (!*((_BYTE *)result + 41))
      return (id *)objc_msgSend(result[4], "reload");
  }
  return result;
}

id sub_1006E36E8(uint64_t a1)
{
  _QWORD v3[5];

  if (!*(_BYTE *)(a1 + 40) && !*(_BYTE *)(a1 + 41))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1006E376C;
    v3[3] = &unk_1011AC860;
    v3[4] = *(_QWORD *)(a1 + 32);
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v3);
  }
  return objc_msgSend(*(id *)(a1 + 32), "setHidden:animated:", *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42));
}

id sub_1006E376C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reload");
}

id *sub_1006E3774(id *result)
{
  if (*((_BYTE *)result + 40))
    return (id *)objc_msgSend(result[4], "reload");
  return result;
}

void sub_1006E4D80(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setAlpha:", *(double *)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "host"));
  objc_msgSend(v2, "setCollisionConstraintsEnabled:forOverlay:", *(_BYTE *)(a1 + 48) == 0, *(_QWORD *)(a1 + 32));

}

id sub_1006E5870(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "layoutIfNeeded");
}

id sub_1006E587C(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "superview"));
  objc_msgSend(v2, "invalidateIntrinsicContentSize");

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "layoutIfNeeded");
}

BOOL sub_1006E5C40(id a1, CarMapControlsAutohidingContainerView *a2, unint64_t a3, BOOL *a4)
{
  double v4;

  -[CarMapControlsAutohidingContainerView alpha](a2, "alpha", a3, a4);
  return v4 > 0.0;
}

BOOL sub_1006E5C60(id a1, UIView *a2, unint64_t a3, BOOL *a4)
{
  UIView *v4;
  unsigned int v5;

  v4 = a2;
  if (-[UIView isUserInteractionEnabled](v4, "isUserInteractionEnabled"))
    v5 = !-[UIView isHidden](v4, "isHidden");
  else
    LOBYTE(v5) = 0;

  return v5;
}

int64_t sub_1006E6010(id a1, UIView *a2, UIView *a3)
{
  UIView *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  id v9;

  v4 = a3;
  -[UIView frame](a2, "frame");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  -[UIView frame](v4, "frame");
  v7 = v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7));
  v9 = objc_msgSend(v5, "compare:", v8);

  return (int64_t)v9;
}

id sub_1006E6154(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setupTrayLayoutAndPerformScrollTest");
}

id sub_1006E61E0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_expandCollectionsList");
}

id sub_1006E625C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_openFirstCollection");
}

id sub_1006E62EC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_expandCollection");
}

id sub_1006E639C(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1006E63F0;
  v3[3] = &unk_1011AC860;
  v3[4] = v1;
  return objc_msgSend(v1, "_dispatchAfterShortDelay:", v3);
}

id sub_1006E63F0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_dismissCollection");
}

id sub_1006E63F8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_dismissCollection");
}

void sub_1006E647C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pptTestScrollView"));

  v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1006E650C;
  v5[3] = &unk_1011AC860;
  v5[4] = v4;
  objc_msgSend(v4, "_performScrollTestOfScrollView:completion:", v3, v5);

}

id sub_1006E650C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

uint64_t sub_1006E65A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

BOOL sub_1006E6664(unint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;

  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 <= 7 && ((1 << a1) & 0xE3) != 0)
    v5 = objc_msgSend(v3, "horizontalSizeClass") == (id)1 && objc_msgSend(v4, "verticalSizeClass") == (id)1;

  return v5;
}

id sub_1006E66E4()
{
  if (qword_1014D2EC8 != -1)
    dispatch_once(&qword_1014D2EC8, &stru_1011C0A38);
  return (id)qword_1014D2ED0;
}

void sub_1006E6724(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.4627451, 0.4627451, 0.501960814, 1.0));
  v2 = (void *)qword_1014D2ED0;
  qword_1014D2ED0 = v1;

}

id sub_1006E6768()
{
  if (qword_1014D2ED8 != -1)
    dispatch_once(&qword_1014D2ED8, &stru_1011C0A58);
  return (id)qword_1014D2EE0;
}

void sub_1006E67A8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor _maps_colorFromHexString:](UIColor, "_maps_colorFromHexString:", CFSTR("1C1C1EFF")));
  v2 = (void *)qword_1014D2EE0;
  qword_1014D2EE0 = v1;

}

id sub_1006E67DC()
{
  if (qword_1014D2EE8 != -1)
    dispatch_once(&qword_1014D2EE8, &stru_1011C0A78);
  return (id)qword_1014D2EF0;
}

void sub_1006E681C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor _maps_colorFromHexString:](UIColor, "_maps_colorFromHexString:", CFSTR("48484AFF")));
  v2 = (void *)qword_1014D2EF0;
  qword_1014D2EF0 = v1;

}

id sub_1006E6850()
{
  if (qword_1014D2EF8 != -1)
    dispatch_once(&qword_1014D2EF8, &stru_1011C0A98);
  return (id)qword_1014D2F00;
}

void sub_1006E6890(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor _maps_colorFromHexString:](UIColor, "_maps_colorFromHexString:", CFSTR("0A0A0BFF")));
  v2 = (void *)qword_1014D2F00;
  qword_1014D2F00 = v1;

}

id sub_1006E68C4()
{
  if (qword_1014D2F08 != -1)
    dispatch_once(&qword_1014D2F08, &stru_1011C0AB8);
  return (id)qword_1014D2F10;
}

void sub_1006E6904(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor _maps_colorFromHexString:](UIColor, "_maps_colorFromHexString:", CFSTR("1D1D20FF")));
  v2 = (void *)qword_1014D2F10;
  qword_1014D2F10 = v1;

}

void sub_1006E6E90(uint64_t a1)
{
  void *v2;
  void (**v3)(id, void *);

  v3 = (void (**)(id, void *))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityAction"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userActivity"));
  v3[2](v3, v2);

}

void sub_1006E6FA8(uint64_t a1)
{
  void (**v1)(void);

  v1 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cancelAction"));
  v1[2]();

}

void sub_1006E760C(id a1)
{
  TrafficIncidentsSourceManager *v1;
  void *v2;

  v1 = objc_alloc_init(TrafficIncidentsSourceManager);
  v2 = (void *)qword_1014D2F18;
  qword_1014D2F18 = (uint64_t)v1;

}

uint64_t sub_1006E78E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006E78F8(uint64_t a1)
{

}

void sub_1006E7900(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1006E7C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1006E7C4C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1006E7C84(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;

}

id sub_1006E7D34(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_1006E7F40(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_1006E80F4()
{
  if (qword_1014D2F30 != -1)
    dispatch_once(&qword_1014D2F30, &stru_1011C0AF8);
  return (id)qword_1014D2F28;
}

void sub_1006E8268(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "TrafficIncidentsSourceManager");
  v2 = (void *)qword_1014D2F28;
  qword_1014D2F28 = (uint64_t)v1;

}

void sub_1006E82D8(id a1)
{
  UGCReviewedPlaceMapsSync *v1;
  void *v2;

  v1 = objc_alloc_init(UGCReviewedPlaceMapsSync);
  v2 = (void *)qword_1014D2F38;
  qword_1014D2F38 = (uint64_t)v1;

}

id sub_1006E8498(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "reviewedPlaceObjectsDidChange");
}

void sub_1006E8690(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  id v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  UGCReviewedPlace *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  UGCReviewedPlace *v26;
  id v27;
  char v28;
  void *v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  id v33;

  v2 = *(void **)(a1 + 32);
  v3 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_fetchMSReviewedPlaceWithMuids:error:", v3, 0));

  v5 = sub_1004331EC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v7)
    {
      *(_DWORD *)buf = 138412546;
      v31 = v4;
      v32 = 2048;
      v33 = objc_msgSend(v4, "muid");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "We fetched a synced reviewed place - %@ muid %llu ", buf, 0x16u);
    }

    v8 = objc_msgSend(v4, "hasUserReviewed");
    v9 = sub_1004331EC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if ((_DWORD)v8)
    {
      if (v11)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "The user has reviewed this place", buf, 2u);
      }

      v12 = -[UGCReviewedPlace initWithMUID:originallySavedMUID:]([UGCReviewedPlace alloc], "initWithMUID:originallySavedMUID:", *(_QWORD *)(a1 + 56), objc_msgSend(v4, "muid"));
      -[UGCReviewedPlace setVersion:](v12, "setVersion:", (int)objc_msgSend(v4, "version"));
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "communityID"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject communityIdentifier](v10, "communityIdentifier"));
      v14 = objc_msgSend(v13, "copy");
      -[UGCReviewedPlace setCommunityIdentifier:](v12, "setCommunityIdentifier:", v14);

    }
    else
    {
      if (v11)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "The user has not reviewed this place", buf, 2u);
      }
      v12 = 0;
    }

    v16 = objc_msgSend(v4, "muid");
    v17 = *(id *)(a1 + 56);
    v18 = sub_1004331EC();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
    if (v16 == v17)
    {
      if (v20)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "No need to replace MUIDs", buf, 2u);
      }

      v21 = *(_QWORD *)(a1 + 48);
      if (v21)
        (*(void (**)(uint64_t, id, UGCReviewedPlace *))(v21 + 16))(v21, v8, v12);
    }
    else
    {
      if (v20)
      {
        v22 = *(void **)(a1 + 56);
        *(_DWORD *)buf = 134218240;
        v31 = v16;
        v32 = 2048;
        v33 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Current MUID %llu has expired, need to replace with %llu", buf, 0x16u);
      }

      objc_msgSend(v4, "setMuid:", *(_QWORD *)(a1 + 56));
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
      v29 = v4;
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v29, 1));
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1006E8A74;
      v25[3] = &unk_1011B38B0;
      v27 = *(id *)(a1 + 48);
      v28 = (char)v8;
      v26 = v12;
      objc_msgSend(v23, "saveWithObjects:completionHandler:", v24, v25);

    }
  }
  else
  {
    if (v7)
    {
      *(_DWORD *)buf = 134218242;
      v31 = objc_msgSend(0, "muid");
      v32 = 2112;
      v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "We did not fetch a synced reviewed place for muid %llu, error: %@", buf, 0x16u);
    }

    v15 = *(_QWORD *)(a1 + 48);
    if (v15)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v15 + 16))(v15, 0, 0);
  }

}

void sub_1006E8A74(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint32_t v10;
  uint64_t v11;
  int v12;
  id v13;

  v3 = a2;
  v4 = sub_1004331EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    v12 = 138412290;
    v13 = v3;
    v7 = "Failed to update MUID on synced reviewed place with error %@";
    v8 = v6;
    v9 = OS_LOG_TYPE_ERROR;
    v10 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    LOWORD(v12) = 0;
    v7 = "Successfully updated MUID on synced reviewed place";
    v8 = v6;
    v9 = OS_LOG_TYPE_INFO;
    v10 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v12, v10);
LABEL_7:

  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v11 + 16))(v11, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));

}

void sub_1006E8DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E8DDC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006E8DEC(uint64_t a1)
{

}

void sub_1006E8DF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
    NSLog(CFSTR("%@"), v5);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObjectsFromArray:", v8);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, _QWORD))(v7 + 16))(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_1006E8F50(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  id v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  void *v24;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 48)));
  v24 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_fetchMSReviewedPlaceWithMuids:error:", v4, 0));

  if (!v5)
  {
    v12 = sub_1004331EC();
    v8 = objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      goto LABEL_11;
    *(_DWORD *)buf = 138412546;
    v21 = 0;
    v22 = 2048;
    v23 = objc_msgSend(0, "muid");
    v13 = "We fetched and want to delete synced reviewed place %@ with muid %llu";
    v14 = v8;
    v15 = 22;
    goto LABEL_10;
  }
  v6 = objc_msgSend(v5, "hasUserReviewed");
  v7 = sub_1004331EC();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if ((v6 & 1) != 0)
  {
    if (v9)
    {
      *(_DWORD *)buf = 138412546;
      v21 = v5;
      v22 = 2048;
      v23 = objc_msgSend(v5, "muid");
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "We fetched and want to delete synced reviewed place %@ with muid %llu", buf, 0x16u);
    }

    objc_msgSend(v5, "setHasUserReviewed:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
    v19 = v5;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1006E91C4;
    v17[3] = &unk_1011AE218;
    v18 = *(id *)(a1 + 40);
    objc_msgSend(v10, "saveWithObjects:completionHandler:", v11, v17);

    goto LABEL_13;
  }
  if (v9)
  {
    *(_WORD *)buf = 0;
    v13 = "We fetched and want to delete synced reviewed place but it not reviewed";
    v14 = v8;
    v15 = 2;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v13, buf, v15);
  }
LABEL_11:

  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    (*(void (**)(uint64_t, _QWORD))(v16 + 16))(v16, 0);
LABEL_13:

}

void sub_1006E91C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = sub_1004331EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to delete synced reviewed place with error %@", (uint8_t *)&v10, 0xCu);
    }

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      v8 = *(void (**)(void))(v7 + 16);
LABEL_10:
      v8();
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Successfully deleted synced reviewed place", (uint8_t *)&v10, 2u);
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v8 = *(void (**)(void))(v9 + 16);
      goto LABEL_10;
    }
  }

}

void sub_1006E93A8(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  id location;

  if (*(_QWORD *)(a1 + 32))
  {
    objc_initWeak(&location, *(id *)(a1 + 40));
    v2 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "communityIdentifier"));
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1006E94CC;
    v4[3] = &unk_1011C0B68;
    objc_copyWeak(&v7, &location);
    v6 = *(id *)(a1 + 56);
    v5 = *(id *)(a1 + 48);
    objc_msgSend(v2, "fetchCommunityIDWithIdentifier:completion:", v3, v4);

    objc_destroyWeak(&v7);
    objc_destroyWeak(&location);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_buildMapsSyncReviewedPlace:communityID:completion:", *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 56));
  }
}

void sub_1006E94A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1006E94CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = sub_1004331EC();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v13 = 138412290;
        v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to save synced reviewed place with error %@", (uint8_t *)&v13, 0xCu);
      }

      v10 = *(_QWORD *)(a1 + 40);
      if (v10)
        (*(void (**)(uint64_t, id))(v10 + 16))(v10, v6);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      objc_msgSend(WeakRetained, "_buildMapsSyncReviewedPlace:communityID:completion:", v11, v12, *(_QWORD *)(a1 + 40));

    }
  }

}

void sub_1006E99DC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = sub_1004331EC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to save synced reviewed place with error %@", (uint8_t *)&v10, 0xCu);
    }

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      v8 = *(void (**)(void))(v7 + 16);
LABEL_10:
      v8();
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Successfully updated synced reviewed place", (uint8_t *)&v10, 2u);
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v8 = *(void (**)(void))(v9 + 16);
      goto LABEL_10;
    }
  }

}

void sub_1006E9B9C(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.maps.ugc.ReviewedPlaceMapsSync", v4);
  v3 = (void *)qword_1014D2F48;
  qword_1014D2F48 = (uint64_t)v2;

}

uint64_t sub_1006E9BEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1006E9D44(id a1, NSArray *a2, NSError *a3)
{
  NSArray *v3;
  id v4;

  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  objc_msgSend(v4, "deleteWithObjects:completionHandler:", v3, &stru_1011C0BC8);

}

void sub_1006E9D9C(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t v9;
  int v10;
  NSError *v11;

  v2 = a2;
  v3 = sub_1004331EC();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v2;
      v6 = "Failed to delete synced reviewed places, error %@";
      v7 = v5;
      v8 = OS_LOG_TYPE_ERROR;
      v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v10, v9);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v10) = 0;
    v6 = "Successfuly deleted synced reviewed places";
    v7 = v5;
    v8 = OS_LOG_TYPE_INFO;
    v9 = 2;
    goto LABEL_6;
  }

}

void sub_1006EA5AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_class *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
      || (v7 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
    {
      v8 = v5;
LABEL_11:
      v15 = *(void **)(a1 + 32);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v17, v8));
      objc_msgSend(v15, "addObject:", v16);

      goto LABEL_12;
    }
    v9 = v5;
    v10 = (objc_class *)objc_opt_class(v9);
    v11 = NSStringFromClass(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((objc_opt_respondsToSelector(v9, "accessibilityIdentifier") & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "performSelector:", "accessibilityIdentifier"));
      v14 = v13;
      if (v13 && !objc_msgSend(v13, "isEqualToString:", v12))
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v12, v9, v14));

        goto LABEL_10;
      }

    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v12, v9));
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1006EA72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), a2, a3));
    objc_msgSend(v3, "addObject:", v4);

  }
}

id sub_1006EA788(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  v1 = 0;
  if (a1 <= 31)
  {
    switch(a1)
    {
      case 1:
        v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v3 = v2;
        v4 = CFSTR("EV_Routing_Connector_J1772");
        goto LABEL_18;
      case 2:
        v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v3 = v2;
        v4 = CFSTR("EV_Routing_Connector_CCS1");
        goto LABEL_18;
      case 3:
      case 5:
      case 6:
      case 7:
        return v1;
      case 4:
        v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v3 = v2;
        v4 = CFSTR("EV_Routing_Connector_CCS2");
        goto LABEL_18;
      case 8:
        v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v3 = v2;
        v4 = CFSTR("EV_Routing_Connector_CHAdeMO");
        goto LABEL_18;
      default:
        if (a1 != 16)
          return v1;
        v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
        v3 = v2;
        v4 = CFSTR("EV_Routing_Connector_GBT_AC");
        break;
    }
    goto LABEL_18;
  }
  if (a1 > 127)
  {
    if (a1 == 128)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("EV_Routing_Connector_Mennekes");
      goto LABEL_18;
    }
    if (a1 == 256)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("EV_Routing_Connector_NACS_AC");
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 == 32)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("EV_Routing_Connector_GBT_DC");
      goto LABEL_18;
    }
    if (a1 == 64)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v3 = v2;
      v4 = CFSTR("EV_Routing_Connector_Tesla");
LABEL_18:
      v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", v4, CFSTR("localized string not found"), 0));

    }
  }
  return v1;
}

void sub_1006EC1C4(uint64_t a1, void *a2, id a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id obj;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];

  v5 = a2;
  if (objc_msgSend(v5, "paymentMethodType") == 2)
    ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
  if (objc_msgSend(v5, "paymentMethodType") == 4)
    ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104);
  if (objc_msgSend(v5, "paymentMethodType") == 1)
    ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v6)
  {
    v7 = v6;
    v20 = *(_QWORD *)v26;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v26 != v20)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v8);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "paymentMethodIndices"));
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v22;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v22 != v13)
                objc_enumerationMutation(v10);
              if (objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v14), "unsignedIntegerValue") == a3)
                objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setObject:forKeyedSubscript:", v9, v5);
              v14 = (char *)v14 + 1;
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
          }
          while (v12);
        }

        v8 = (char *)v8 + 1;
      }
      while (v8 != v7);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v7);
  }

  v15 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v5, v16);

  v17 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  objc_msgSend(v17, "addObject:", v18);

}

void sub_1006ED524(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;

  v5 = a2;
  if (objc_msgSend(a3, "purpose") == 2)
  {
    v6 = sub_10043253C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      v15 = 138412290;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Skipping %@. This is an interoperable suggestion.", (uint8_t *)&v15, 0xCu);

    }
  }
  else
  {
    if (objc_msgSend(v5, "paymentMethodType") != 3
      && objc_msgSend(v5, "paymentMethodType") != 1
      && objc_msgSend(v5, "paymentMethodType") != 4)
    {
      v13 = *(void **)(a1 + 32);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      objc_msgSend(v13, "addObject:", v14);

      goto LABEL_10;
    }
    v9 = sub_10043253C();
    v7 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      v11 = GEOTransitPaymentMethodTypeAsString(objc_msgSend(v5, "paymentMethodType"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v15 = 138412546;
      v16 = v10;
      v17 = 2112;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Skipping non-CL payment method %@. It is %@.", (uint8_t *)&v15, 0x16u);

    }
  }

LABEL_10:
}

void sub_1006EDAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006EDAC8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  void *v7;
  unsigned int v8;
  void *v9;
  id v10;

  v10 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  if (objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v8 = objc_msgSend(v10, "purpose");

    v9 = v10;
    if (v8 != 2)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      *a4 = 1;
    }
  }
  else
  {

    v9 = v10;
  }

}

void sub_1006EE894(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1006EEDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1006EEF74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1006EF014(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D2F58;
  qword_1014D2F58 = (uint64_t)v1;

}

void sub_1006F0080(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1006F02E8()
{
  if (qword_1014D2F70 != -1)
    dispatch_once(&qword_1014D2F70, &stru_1011C0C60);
  return (id)qword_1014D2F68;
}

void sub_1006F06B8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1006F06E8(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_markAsShown");
    WeakRetained = v2;
  }

}

void sub_1006F0718(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_dismissTip");
    WeakRetained = v2;
  }

}

void sub_1006F0748(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "setShowFeature:", 1);
    objc_msgSend(v2, "_notifyObservers");
    WeakRetained = v2;
  }

}

void sub_1006F08BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "OfflineMapsDownloadFeatureTipSource");
  v2 = (void *)qword_1014D2F68;
  qword_1014D2F68 = (uint64_t)v1;

}

id sub_1006F09F0()
{
  if (qword_1014D2F80 != -1)
    dispatch_once(&qword_1014D2F80, &stru_1011C0C80);
  return (id)qword_1014D2F78;
}

void sub_1006F0CE8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionNetworkReachabilityMonitor");
  v2 = (void *)qword_1014D2F78;
  qword_1014D2F78 = (uint64_t)v1;

}

uint64_t sub_1006F1EF4(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  DirectionsPlanTransitPreferences *v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t String;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t Data;
  void *v100;
  uint64_t result;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = (DirectionsPlanTransitPreferences *)objc_alloc_init((Class)GEOStorageRouteRequestStorage);
        objc_storeStrong((id *)(a1 + 104), v13);
        v107 = 0;
        v108 = 0;
        if (PBReaderPlaceMark(a2, &v107)
          && -[DirectionsPlanTransitPreferences readFrom:](v13, "readFrom:", a2))
        {
          goto LABEL_136;
        }
        goto LABEL_212;
      case 2u:
        String = PBReaderReadString(a2);
        v21 = objc_claimAutoreleasedReturnValue(String);
        v22 = 88;
        goto LABEL_141;
      case 3u:
        v23 = PBReaderReadString(a2);
        v21 = objc_claimAutoreleasedReturnValue(v23);
        v22 = 56;
        goto LABEL_141;
      case 4u:
        *(_DWORD *)(a1 + 148) |= 8u;
        v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v25 = 0;
        }
        v106 = 32;
        goto LABEL_209;
      case 5u:
        *(_DWORD *)(a1 + 148) |= 1u;
        v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v25 = 0;
        }
        v106 = 8;
        goto LABEL_209;
      case 6u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_DWORD *)(a1 + 148) |= 2u;
        while (2)
        {
          v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v10 = v28++ >= 9;
              if (v10)
              {
                v29 = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v29 = 0;
LABEL_151:
        v104 = 16;
        goto LABEL_156;
      case 7u:
        v33 = 0;
        v34 = 0;
        v29 = 0;
        *(_DWORD *)(a1 + 148) |= 4u;
        while (2)
        {
          v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36;
            v29 |= (unint64_t)(v37 & 0x7F) << v33;
            if (v37 < 0)
            {
              v33 += 7;
              v10 = v34++ >= 9;
              if (v10)
              {
                v29 = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v29 = 0;
LABEL_155:
        v104 = 24;
LABEL_156:
        *(_QWORD *)(a1 + v104) = v29;
        goto LABEL_210;
      case 8u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_DWORD *)(a1 + 148) |= 0x20u;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v10 = v39++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_160:
        v105 = 64;
        goto LABEL_189;
      case 9u:
        v13 = objc_alloc_init(DirectionsPlanTransitPreferences);
        objc_storeStrong((id *)(a1 + 128), v13);
        v107 = 0;
        v108 = 0;
        if (!PBReaderPlaceMark(a2, &v107) || !sub_1008E0894((uint64_t)v13, a2))
          goto LABEL_212;
        goto LABEL_136;
      case 0xAu:
        v44 = 0;
        v45 = 0;
        v40 = 0;
        *(_DWORD *)(a1 + 148) |= 0x200u;
        while (2)
        {
          v46 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47;
            v40 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              v10 = v45++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_164:
        v105 = 116;
        goto LABEL_189;
      case 0xBu:
        v49 = 0;
        v50 = 0;
        v40 = 0;
        *(_DWORD *)(a1 + 148) |= 0x40u;
        while (2)
        {
          v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52;
            v40 |= (unint64_t)(v53 & 0x7F) << v49;
            if (v53 < 0)
            {
              v49 += 7;
              v10 = v50++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_168;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_168:
        v105 = 68;
        goto LABEL_189;
      case 0xCu:
        v54 = 0;
        v55 = 0;
        v40 = 0;
        *(_DWORD *)(a1 + 148) |= 0x80u;
        while (2)
        {
          v56 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57;
            v40 |= (unint64_t)(v58 & 0x7F) << v54;
            if (v58 < 0)
            {
              v54 += 7;
              v10 = v55++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_172;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_172:
        v105 = 80;
        goto LABEL_189;
      case 0xDu:
        v59 = 0;
        v60 = 0;
        v40 = 0;
        *(_DWORD *)(a1 + 148) |= 0x100u;
        while (2)
        {
          v61 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
            v40 |= (unint64_t)(v63 & 0x7F) << v59;
            if (v63 < 0)
            {
              v59 += 7;
              v10 = v60++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_176;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_176:
        v105 = 112;
        goto LABEL_189;
      case 0xEu:
        v64 = 0;
        v65 = 0;
        v40 = 0;
        *(_DWORD *)(a1 + 148) |= 0x400u;
        while (2)
        {
          v66 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v67 = v66 + 1;
          if (v66 == -1 || v67 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67;
            v40 |= (unint64_t)(v68 & 0x7F) << v64;
            if (v68 < 0)
            {
              v64 += 7;
              v10 = v65++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_180;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_180:
        v105 = 120;
        goto LABEL_189;
      case 0xFu:
        v69 = 0;
        v70 = 0;
        v40 = 0;
        *(_DWORD *)(a1 + 148) |= 0x800u;
        while (2)
        {
          v71 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v71);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v72;
            v40 |= (unint64_t)(v73 & 0x7F) << v69;
            if (v73 < 0)
            {
              v69 += 7;
              v10 = v70++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_184;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_184:
        v105 = 136;
        goto LABEL_189;
      case 0x10u:
        v74 = 0;
        v75 = 0;
        v40 = 0;
        *(_DWORD *)(a1 + 148) |= 0x1000u;
        while (2)
        {
          v76 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v77 = v76 + 1;
          if (v76 == -1 || v77 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v78 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v76);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v77;
            v40 |= (unint64_t)(v78 & 0x7F) << v74;
            if (v78 < 0)
            {
              v74 += 7;
              v10 = v75++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_188;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_188:
        v105 = 140;
LABEL_189:
        *(_DWORD *)(a1 + v105) = v40;
        goto LABEL_210;
      case 0x11u:
        *(_DWORD *)(a1 + 148) |= 0x10u;
        v79 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v79 <= 0xFFFFFFFFFFFFFFF7 && v79 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v79);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v79 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v25 = 0;
        }
        v106 = 40;
LABEL_209:
        *(_QWORD *)(a1 + v106) = v25;
        goto LABEL_210;
      case 0x12u:
        v80 = 0;
        v81 = 0;
        v82 = 0;
        *(_DWORD *)(a1 + 148) |= 0x10000u;
        while (2)
        {
          v83 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v84 = v83 + 1;
          if (v83 == -1 || v84 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v85 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v83);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v84;
            v82 |= (unint64_t)(v85 & 0x7F) << v80;
            if (v85 < 0)
            {
              v80 += 7;
              v10 = v81++ >= 9;
              if (v10)
              {
                v82 = 0;
                goto LABEL_193;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v82 = 0;
LABEL_193:
        v102 = v82 != 0;
        v103 = 147;
        goto LABEL_202;
      case 0x13u:
        v86 = 0;
        v87 = 0;
        v88 = 0;
        *(_DWORD *)(a1 + 148) |= 0x4000u;
        while (2)
        {
          v89 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v90 = v89 + 1;
          if (v89 == -1 || v90 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v91 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v90;
            v88 |= (unint64_t)(v91 & 0x7F) << v86;
            if (v91 < 0)
            {
              v86 += 7;
              v10 = v87++ >= 9;
              if (v10)
              {
                v88 = 0;
                goto LABEL_197;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v88 = 0;
LABEL_197:
        v102 = v88 != 0;
        v103 = 145;
        goto LABEL_202;
      case 0x14u:
        v92 = 0;
        v93 = 0;
        v94 = 0;
        *(_DWORD *)(a1 + 148) |= 0x2000u;
        while (2)
        {
          v95 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v96 = v95 + 1;
          if (v95 == -1 || v96 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v97 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v95);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v96;
            v94 |= (unint64_t)(v97 & 0x7F) << v92;
            if (v97 < 0)
            {
              v92 += 7;
              v10 = v93++ >= 9;
              if (v10)
              {
                v94 = 0;
                goto LABEL_201;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v94 = 0;
LABEL_201:
        v102 = v94 != 0;
        v103 = 144;
        goto LABEL_202;
      case 0x15u:
        v13 = objc_alloc_init(DirectionsPlanWaypoint);
        objc_msgSend((id)a1, "addPlanningWaypoint:", v13);
        v107 = 0;
        v108 = 0;
        if (PBReaderPlaceMark(a2, &v107) && sub_1004872F8((uint64_t)v13, a2))
        {
LABEL_136:
          PBReaderRecallMark(a2, &v107);
LABEL_137:

LABEL_210:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_212:

        return 0;
      case 0x16u:
        v98 = PBReaderReadString(a2);
        v13 = (DirectionsPlanTransitPreferences *)objc_claimAutoreleasedReturnValue(v98);
        if (v13)
          objc_msgSend((id)a1, "addHandlesForSharingETA:", v13);
        goto LABEL_137;
      case 0x17u:
        Data = PBReaderReadData(a2);
        v21 = objc_claimAutoreleasedReturnValue(Data);
        v22 = 48;
LABEL_141:
        v100 = *(void **)(a1 + v22);
        *(_QWORD *)(a1 + v22) = v21;

        goto LABEL_210;
      default:
        if ((v6 >> 3) == 404)
        {
          v14 = 0;
          v15 = 0;
          v16 = 0;
          *(_DWORD *)(a1 + 148) |= 0x8000u;
          while (1)
          {
            v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v18 = v17 + 1;
            if (v17 == -1 || v18 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0)
              goto LABEL_145;
            v14 += 7;
            v10 = v15++ >= 9;
            if (v10)
            {
              v16 = 0;
              goto LABEL_147;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_145:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v16 = 0;
LABEL_147:
          v102 = v16 != 0;
          v103 = 146;
LABEL_202:
          *(_BYTE *)(a1 + v103) = v102;
        }
        else
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_210;
    }
  }
}

void sub_1006F4DB0(uint64_t a1)
{
  uint64_t v2;
  _QWORD block[5];

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 8))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1006F4E34;
    block[3] = &unk_1011AC860;
    block[4] = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

uint64_t sub_1006F4E34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16))();
}

void sub_1006F5154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006F5170(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionCoordinator"));
  objc_msgSend(v4, "viewControllerGoPreviousState:withSender:", v3, 0);

}

void sub_1006F558C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006F55AC(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sidebarContentInjector"));

    if (v5 == v6)
    {
      objc_msgSend(v6, "removeContentFromMapView");
      objc_msgSend(v6, "addContentToMapView");
    }
  }

}

void sub_1006F5B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1006F5BA8(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_msgSend(WeakRetained, "_analyticsTargetForTransportType:", a2);

  return v4;
}

id sub_1006F74E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentReportAProblemForRouteFromEntryPoint:", objc_msgSend(*(id *)(a1 + 40), "_analyticsTarget"));
}

void sub_1006F964C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1006F9674(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15[2];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1006F984C;
  v14[3] = &unk_1011AEE60;
  objc_copyWeak(v15, (id *)(a1 + 48));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1006F9898;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v4, v14, v12));
  objc_msgSend(v5, "setConfigureCollectionViewCellBlock:", &stru_1011C0D28);
  v6 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1006F9A78;
  v10[3] = &unk_1011AEE60;
  objc_copyWeak(&v11, (id *)(a1 + 48));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1006F9AC4;
  v8[3] = &unk_1011AD4F0;
  objc_copyWeak(&v9, (id *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v6, v10, v8));
  objc_msgSend(v7, "setConfigureCollectionViewCellBlock:", &stru_1011C0D48);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&v11);

  objc_destroyWeak(&v13);
  objc_destroyWeak(v15);

}

void sub_1006F9810(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1006F984C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "drivePreferences"));
  v3 = objc_msgSend(v2, "avoidTolls");

  return v3;
}

void sub_1006F9898(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  DrivePreferences *v6;
  id *v7;
  id WeakRetained;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  DrivePreferences *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  _DWORD v21[2];

  v4 = sub_100431EAC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v21[0] = 67109120;
    v21[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Setting 'Avoid Tolls' to %d", (uint8_t *)v21, 8u);
  }

  v6 = [DrivePreferences alloc];
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "drivePreferences"));
  v10 = objc_msgSend(v9, "avoidHighways");
  v11 = objc_loadWeakRetained(v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "drivePreferences"));
  v13 = objc_msgSend(v12, "ignoreLiveTraffic");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v15 = -[DrivePreferences initWithAvoidTolls:avoidHighways:ignoreLiveTraffic:defaults:](v6, "initWithAvoidTolls:avoidHighways:ignoreLiveTraffic:defaults:", a2, v10, v13, v14);
  v16 = objc_loadWeakRetained(v7);
  objc_msgSend(v16, "setDrivePreferences:", v15);

  v17 = objc_loadWeakRetained(v7);
  objc_msgSend(v17, "_updateHasUnsavedChanges");

  if ((_DWORD)a2)
    v18 = 5017;
  else
    v18 = 5018;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v20 = objc_loadWeakRetained(v7);
  objc_msgSend(v19, "captureUserAction:onTarget:eventValue:", v18, objc_msgSend(v20, "analyticsTarget"), 0);

}

void sub_1006F9A70(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  -[UICollectionViewCell _maps_annotateViewForAvoidTolls](a2, "_maps_annotateViewForAvoidTolls", a3);
}

id sub_1006F9A78(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "drivePreferences"));
  v3 = objc_msgSend(v2, "avoidHighways");

  return v3;
}

void sub_1006F9AC4(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  DrivePreferences *v6;
  id *v7;
  id WeakRetained;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  DrivePreferences *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  _DWORD v21[2];

  v4 = sub_100431EAC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v21[0] = 67109120;
    v21[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Setting 'Avoid Highways' to %d", (uint8_t *)v21, 8u);
  }

  v6 = [DrivePreferences alloc];
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "drivePreferences"));
  v10 = objc_msgSend(v9, "avoidTolls");
  v11 = objc_loadWeakRetained(v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "drivePreferences"));
  v13 = objc_msgSend(v12, "ignoreLiveTraffic");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v15 = -[DrivePreferences initWithAvoidTolls:avoidHighways:ignoreLiveTraffic:defaults:](v6, "initWithAvoidTolls:avoidHighways:ignoreLiveTraffic:defaults:", v10, a2, v13, v14);
  v16 = objc_loadWeakRetained(v7);
  objc_msgSend(v16, "setDrivePreferences:", v15);

  v17 = objc_loadWeakRetained(v7);
  objc_msgSend(v17, "_updateHasUnsavedChanges");

  if ((_DWORD)a2)
    v18 = 5019;
  else
    v18 = 5020;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v20 = objc_loadWeakRetained(v7);
  objc_msgSend(v19, "captureUserAction:onTarget:eventValue:", v18, objc_msgSend(v20, "analyticsTarget"), 0);

}

void sub_1006F9C9C(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  -[UICollectionViewCell _maps_annotateViewForAvoidHighways](a2, "_maps_annotateViewForAvoidHighways", a3);
}

void sub_1006F9E2C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1006F9E58(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id *v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;

  v3 = a2;
  if (sub_100B968A0())
  {
    v4 = *(_QWORD *)(a1 + 32);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1006FA10C;
    v24[3] = &unk_1011AEE60;
    objc_copyWeak(&v25, (id *)(a1 + 56));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1006FA158;
    v22[3] = &unk_1011AD4F0;
    objc_copyWeak(&v23, (id *)(a1 + 56));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v4, v24, v22));
    objc_msgSend(v5, "setConfigureCollectionViewCellBlock:", &stru_1011C0D90);

    objc_destroyWeak(&v23);
    objc_destroyWeak(&v25);
  }
  if (sub_100B968A0())
  {
    v6 = *(_QWORD *)(a1 + 40);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1006FA2C0;
    v20[3] = &unk_1011AEE60;
    objc_copyWeak(&v21, (id *)(a1 + 56));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1006FA30C;
    v18[3] = &unk_1011AD4F0;
    objc_copyWeak(&v19, (id *)(a1 + 56));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v6, v20, v18));
    objc_msgSend(v7, "setConfigureCollectionViewCellBlock:", &stru_1011C0DB0);

    objc_destroyWeak(&v19);
    objc_destroyWeak(&v21);
  }
  if (sub_100B968FC())
  {
    v8 = *(_QWORD *)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1006FA474;
    v16[3] = &unk_1011AEE60;
    v9 = (id *)(a1 + 56);
    objc_copyWeak(&v17, v9);
    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_1006FA4C0;
    v14 = &unk_1011AD4F0;
    objc_copyWeak(&v15, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v8, v16, &v11));
    objc_msgSend(v10, "setConfigureCollectionViewCellBlock:", &stru_1011C0DD0, v11, v12, v13, v14);

    objc_destroyWeak(&v15);
    objc_destroyWeak(&v17);
  }

}

void sub_1006FA0DC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1006FA10C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "walkPreferences"));
  v3 = objc_msgSend(v2, "avoidHills");

  return v3;
}

void sub_1006FA158(uint64_t a1, uint64_t a2)
{
  WalkPreferences *v4;
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  WalkPreferences *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;

  v4 = [WalkPreferences alloc];
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "walkPreferences"));
  v8 = objc_msgSend(v7, "avoidBusyRoads");
  v9 = objc_loadWeakRetained(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "walkPreferences"));
  v11 = objc_msgSend(v10, "avoidStairs");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v13 = -[WalkPreferences initWithAvoidHills:avoidBusyRoads:avoidStairs:defaults:](v4, "initWithAvoidHills:avoidBusyRoads:avoidStairs:defaults:", a2, v8, v11, v12);
  v14 = objc_loadWeakRetained(v5);
  objc_msgSend(v14, "setWalkPreferences:", v13);

  v15 = objc_loadWeakRetained(v5);
  objc_msgSend(v15, "_updateHasUnsavedChanges");

  if ((_DWORD)a2)
    v16 = 5035;
  else
    v16 = 5036;
  v18 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v17 = objc_loadWeakRetained(v5);
  objc_msgSend(v18, "captureUserAction:onTarget:eventValue:", v16, objc_msgSend(v17, "analyticsTarget"), CFSTR("WALKING"));

}

void sub_1006FA2B8(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  -[UICollectionViewCell _maps_annotateViewForAvoidHillsInWalking](a2, "_maps_annotateViewForAvoidHillsInWalking", a3);
}

id sub_1006FA2C0(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "walkPreferences"));
  v3 = objc_msgSend(v2, "avoidBusyRoads");

  return v3;
}

void sub_1006FA30C(uint64_t a1, uint64_t a2)
{
  WalkPreferences *v4;
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  WalkPreferences *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;

  v4 = [WalkPreferences alloc];
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "walkPreferences"));
  v8 = objc_msgSend(v7, "avoidHills");
  v9 = objc_loadWeakRetained(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "walkPreferences"));
  v11 = objc_msgSend(v10, "avoidStairs");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v13 = -[WalkPreferences initWithAvoidHills:avoidBusyRoads:avoidStairs:defaults:](v4, "initWithAvoidHills:avoidBusyRoads:avoidStairs:defaults:", v8, a2, v11, v12);
  v14 = objc_loadWeakRetained(v5);
  objc_msgSend(v14, "setWalkPreferences:", v13);

  v15 = objc_loadWeakRetained(v5);
  objc_msgSend(v15, "_updateHasUnsavedChanges");

  if ((_DWORD)a2)
    v16 = 5033;
  else
    v16 = 5034;
  v18 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v17 = objc_loadWeakRetained(v5);
  objc_msgSend(v18, "captureUserAction:onTarget:eventValue:", v16, objc_msgSend(v17, "analyticsTarget"), CFSTR("WALKING"));

}

void sub_1006FA46C(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  -[UICollectionViewCell _maps_annotateViewForAvoidBusyRoadsInWalking](a2, "_maps_annotateViewForAvoidBusyRoadsInWalking", a3);
}

id sub_1006FA474(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "walkPreferences"));
  v3 = objc_msgSend(v2, "avoidStairs");

  return v3;
}

void sub_1006FA4C0(uint64_t a1, uint64_t a2)
{
  WalkPreferences *v4;
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  WalkPreferences *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;

  v4 = [WalkPreferences alloc];
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "walkPreferences"));
  v8 = objc_msgSend(v7, "avoidHills");
  v9 = objc_loadWeakRetained(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "walkPreferences"));
  v11 = objc_msgSend(v10, "avoidBusyRoads");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v13 = -[WalkPreferences initWithAvoidHills:avoidBusyRoads:avoidStairs:defaults:](v4, "initWithAvoidHills:avoidBusyRoads:avoidStairs:defaults:", v8, v11, a2, v12);
  v14 = objc_loadWeakRetained(v5);
  objc_msgSend(v14, "setWalkPreferences:", v13);

  v15 = objc_loadWeakRetained(v5);
  objc_msgSend(v15, "_updateHasUnsavedChanges");

  if ((_DWORD)a2)
    v16 = 5037;
  else
    v16 = 5038;
  v18 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v17 = objc_loadWeakRetained(v5);
  objc_msgSend(v18, "captureUserAction:onTarget:eventValue:", v16, objc_msgSend(v17, "analyticsTarget"), CFSTR("WALKING"));

}

void sub_1006FA620(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  -[UICollectionViewCell _maps_annotateViewForAvoidStairs](a2, "_maps_annotateViewForAvoidStairs", a3);
}

void sub_1006FA75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1006FA78C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "titleForFooterInSection:", *(_QWORD *)(a1 + 48)));
  objc_msgSend(v3, "setFooter:", v4);

  if (!*(_QWORD *)(a1 + 56))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1006FA8FC;
    v12[3] = &unk_1011B4E68;
    v14 = *(_QWORD *)(a1 + 64);
    v5 = *(id *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 48);
    v13 = v5;
    v15 = v6;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1006FAA50;
    v10[3] = &unk_1011B4E90;
    objc_copyWeak(&v11, (id *)(a1 + 40));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1006FABFC;
    v8[3] = &unk_1011B4EB8;
    objc_copyWeak(&v9, (id *)(a1 + 40));
    v7 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", v12, v10, v8);
    objc_destroyWeak(&v9);
    objc_destroyWeak(&v11);

  }
}

void sub_1006FA8E0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  _Unwind_Resume(a1);
}

void sub_1006FA8FC(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];

  v3 = a2;
  objc_msgSend(v3, "setAllowMultipleSelection:", 1);
  objc_msgSend(v3, "setMinimumSelectionCount:", 1);
  if ((uint64_t)a1[5] >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (void *)a1[4];
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", v4, a1[6]));
      v7 = objc_msgSend(v5, "_modeForIndexPath:", v6);

      v8 = sub_100A647F4((uint64_t)v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v7));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addRowWithTitle:value:", v9, v10));

      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1006FAA44;
      v12[3] = &unk_1011C0E18;
      v12[4] = v7;
      objc_msgSend(v11, "setConfigureCollectionViewCellBlock:", v12);

      ++v4;
    }
    while (v4 < a1[5]);
  }

}

id sub_1006FAA44(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "_maps_annotateViewForTransitPreferenceMode:", *(_QWORD *)(a1 + 32));
}

id sub_1006FAA50(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id *v7;
  void *i;
  void *v9;
  id v10;
  id WeakRetained;
  void *v12;
  void *v13;
  id v14;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  if (qword_1014D2FA0 != -1)
    dispatch_once(&qword_1014D2FA0, &stru_1011C0EA0);
  v2 = (id)qword_1014D2F98;
  v16 = objc_msgSend(v2, "mutableCopy");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    v7 = (id *)(a1 + 32);
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v10 = objc_msgSend(v9, "integerValue");
        WeakRetained = objc_loadWeakRetained(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transitDataSource"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "preferences"));
        LODWORD(v10) = objc_msgSend(v13, "isModeDisabled:", v10);

        if ((_DWORD)v10)
          objc_msgSend(v16, "removeObject:", v9);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v5);
  }

  v14 = objc_msgSend(v16, "copy");
  return v14;
}

void sub_1006FABFC(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v3 = objc_msgSend(a2, "integerValue");
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transitDataSource"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "preferences"));
  objc_msgSend(v6, "toggleModeEnabled:", v3);

  v7 = objc_loadWeakRetained(a1);
  objc_msgSend(v7, "_updateHasUnsavedChanges");

}

void sub_1006FAE8C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1006FAEC4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1006FAEF0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15[2];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1006FB0C8;
  v14[3] = &unk_1011AEE60;
  objc_copyWeak(v15, (id *)(a1 + 48));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1006FB114;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v4, v14, v12));
  objc_msgSend(v5, "setConfigureCollectionViewCellBlock:", &stru_1011C0E60);
  v6 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1006FB27C;
  v10[3] = &unk_1011AEE60;
  objc_copyWeak(&v11, (id *)(a1 + 48));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1006FB2C8;
  v8[3] = &unk_1011AD4F0;
  objc_copyWeak(&v9, (id *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v6, v10, v8));
  objc_msgSend(v7, "setConfigureCollectionViewCellBlock:", &stru_1011C0E80);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&v11);

  objc_destroyWeak(&v13);
  objc_destroyWeak(v15);

}

void sub_1006FB08C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1006FB0C8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cyclePreferences"));
  v3 = objc_msgSend(v2, "avoidHills");

  return v3;
}

void sub_1006FB114(uint64_t a1, uint64_t a2)
{
  CyclePreferences *v4;
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  CyclePreferences *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;

  v4 = [CyclePreferences alloc];
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cyclePreferences"));
  v8 = objc_msgSend(v7, "avoidBusyRoads");
  v9 = objc_loadWeakRetained(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "cyclePreferences"));
  v11 = objc_msgSend(v10, "ebike");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v13 = -[CyclePreferences initWithAvoidHills:avoidBusyRoads:ebike:defaults:](v4, "initWithAvoidHills:avoidBusyRoads:ebike:defaults:", a2, v8, v11, v12);
  v14 = objc_loadWeakRetained(v5);
  objc_msgSend(v14, "setCyclePreferences:", v13);

  v15 = objc_loadWeakRetained(v5);
  objc_msgSend(v15, "_updateHasUnsavedChanges");

  if ((_DWORD)a2)
    v16 = 5035;
  else
    v16 = 5036;
  v18 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v17 = objc_loadWeakRetained(v5);
  objc_msgSend(v18, "captureUserAction:onTarget:eventValue:", v16, objc_msgSend(v17, "analyticsTarget"), CFSTR("BICYCLE"));

}

void sub_1006FB274(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  -[UICollectionViewCell _maps_annotateViewForAvoidHillsInCycling](a2, "_maps_annotateViewForAvoidHillsInCycling", a3);
}

id sub_1006FB27C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cyclePreferences"));
  v3 = objc_msgSend(v2, "avoidBusyRoads");

  return v3;
}

void sub_1006FB2C8(uint64_t a1, uint64_t a2)
{
  CyclePreferences *v4;
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  CyclePreferences *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;

  v4 = [CyclePreferences alloc];
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cyclePreferences"));
  v8 = objc_msgSend(v7, "avoidHills");
  v9 = objc_loadWeakRetained(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "cyclePreferences"));
  v11 = objc_msgSend(v10, "ebike");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v13 = -[CyclePreferences initWithAvoidHills:avoidBusyRoads:ebike:defaults:](v4, "initWithAvoidHills:avoidBusyRoads:ebike:defaults:", v8, a2, v11, v12);
  v14 = objc_loadWeakRetained(v5);
  objc_msgSend(v14, "setCyclePreferences:", v13);

  v15 = objc_loadWeakRetained(v5);
  objc_msgSend(v15, "_updateHasUnsavedChanges");

  if ((_DWORD)a2)
    v16 = 5033;
  else
    v16 = 5034;
  v18 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v17 = objc_loadWeakRetained(v5);
  objc_msgSend(v18, "captureUserAction:onTarget:eventValue:", v16, objc_msgSend(v17, "analyticsTarget"), CFSTR("BICYCLE"));

}

void sub_1006FB428(id a1, UICollectionViewCell *a2, UIListContentConfiguration *a3)
{
  -[UICollectionViewCell _maps_annotateViewForAvoidBusyRoadsInCycling](a2, "_maps_annotateViewForAvoidBusyRoadsInCycling", a3);
}

void sub_1006FC00C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1006FC03C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1006FC068(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("E-Bike"), CFSTR("localized string not found"), 0));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1006FC1F8;
  v14[3] = &unk_1011AEE60;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_1006FC244;
  v12 = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v5, v14, &v9);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle", v9, v10, v11, v12));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("[Route Planning, Cycling] E-bike toggle footer"), CFSTR("localized string not found"), 0));
  objc_msgSend(v3, "setFooter:", v8);

  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);

}

void sub_1006FC1D8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1006FC1F8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cyclePreferences"));
  v3 = objc_msgSend(v2, "ebike");

  return v3;
}

void sub_1006FC244(uint64_t a1, uint64_t a2)
{
  CyclePreferences *v4;
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  CyclePreferences *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;

  v4 = [CyclePreferences alloc];
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cyclePreferences"));
  v8 = objc_msgSend(v7, "avoidHills");
  v9 = objc_loadWeakRetained(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "cyclePreferences"));
  v11 = objc_msgSend(v10, "avoidBusyRoads");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v13 = -[CyclePreferences initWithAvoidHills:avoidBusyRoads:ebike:defaults:](v4, "initWithAvoidHills:avoidBusyRoads:ebike:defaults:", v8, v11, a2, v12);
  v14 = objc_loadWeakRetained(v5);
  objc_msgSend(v14, "setCyclePreferences:", v13);

  v15 = objc_loadWeakRetained(v5);
  objc_msgSend(v15, "_updateHasUnsavedChanges");

  if ((_DWORD)a2)
    v16 = 2173;
  else
    v16 = 2185;
  v18 = (id)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  v17 = objc_loadWeakRetained(v5);
  objc_msgSend(v18, "captureUserAction:onTarget:eventValue:", v16, objc_msgSend(v17, "analyticsTarget"), CFSTR("BICYCLE"));

}

void sub_1006FC680(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D2F98;
  qword_1014D2F98 = (uint64_t)&off_101273B00;

}

void sub_1006FC710(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1006FC7A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1006FC848(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1006FC9AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1006FD724(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  double v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;

  v2 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "_topFilterLayerBackgroundColor");
  v28 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = kCAFilterPlusD;
  v4 = kCAFilterColorBurnBlendMode;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setHidden:", 0);
  switch((unint64_t)objc_msgSend(*(id *)(a1 + 32), "appearance"))
  {
    case 0uLL:
      v5 = 0.396078438;
      v6 = 0.800000012;
      goto LABEL_6;
    case 1uLL:
      v7 = kCAFilterPlusL;

      v8 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.0599999987));
      v9 = kCAFilterOverlayBlendMode;

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.25));
      v28 = (id)v8;
      v3 = v7;
      v4 = v9;
      break;
    case 2uLL:
      v5 = 0.396078438;
      v6 = 0.400000006;
      goto LABEL_6;
    case 3uLL:
      v5 = 0.156862751;
      v6 = 1.0;
LABEL_6:
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v5, v5, v5, v6));
      break;
    case 4uLL:
      v11 = kCAFilterOverlayBlendMode;

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.0392156877, 0.0392156877, 0.470588237, 0.0500000007));
      goto LABEL_13;
    case 5uLL:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setHidden:", 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
      v13 = objc_msgSend(v12, "userInterfaceStyle");

      v11 = kCAFilterOverlayBlendMode;
      if (v13 == (id)2)
      {
        v14 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.0500000007));

        v15 = objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
      }
      else
      {
        v14 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.0, 0.0274509806, 0.0980392173, 0.0500000007));

        v15 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.0, 0.0274509806, 0.0980392173, 0.720000029));
      }
      v10 = (void *)v15;
      v28 = (id)v14;
LABEL_13:
      v4 = v11;
      break;
    default:
      v10 = 0;
      break;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "layer"));
  objc_msgSend(v16, "setCompositingFilter:", v4);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "layer"));
  objc_msgSend(v17, "setCompositingFilter:", v3);

  v18 = objc_msgSend(*(id *)(a1 + 32), "roundedCornersStyle");
  v19 = *(id **)(a1 + 32);
  if (v18 == (id)2)
  {
    objc_msgSend(v19, "setClipsToBounds:", 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setBackgroundColor:", v20);

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_roundedCornersResizableImageWithColor:", v10));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setImage:", v21);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setBackgroundColor:", 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_roundedCornersResizableImageWithColor:", v28));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setImage:", v22);

  }
  else
  {
    objc_msgSend(v19[2], "setImage:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setBackgroundColor:", v10);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setImage:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setBackgroundColor:", v28);
    v23 = objc_msgSend(*(id *)(a1 + 32), "roundedCornersStyle");
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
    v25 = v24;
    if (v23 == (id)1)
    {
      objc_msgSend(v24, "setCornerRadius:", 5.0);

      v26 = *(void **)(a1 + 32);
      v27 = 1;
    }
    else
    {
      objc_msgSend(v24, "setCornerRadius:", 0.0);

      v26 = *(void **)(a1 + 32);
      v27 = 0;
    }
    objc_msgSend(v26, "setClipsToBounds:", v27);
  }

}

void sub_1006FDFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FDFC8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006FDFD8(uint64_t a1)
{

}

void sub_1006FDFE0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

BOOL sub_1006FE050(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resolvedGEOPlaceCollectionForMapsSyncHistoryCuratedCollection:", a2));
  v3 = v2 == 0;

  return v3;
}

void sub_1006FE25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1006FE288(id a1, MSHistoryCuratedCollection *a2, unint64_t a3)
{
  return -[MSHistoryCuratedCollection mapItemIdentifier](a2, "mapItemIdentifier", a3);
}

void sub_1006FE290(uint64_t a1, void *a2, void *a3)
{
  id *v4;
  id v5;
  id v6;
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_mergeCollections:error:", v6, v5);

}

uint64_t sub_1006FEB20(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 48;
        goto LABEL_36;
      case 2u:
        v16 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v16);
        v14 = 56;
        goto LABEL_36;
      case 3u:
        v17 = objc_alloc_init((Class)GEOMapItemStorage);
        v18 = 40;
        goto LABEL_25;
      case 4u:
        v17 = objc_alloc_init((Class)GEOStorageCompletion);
        v18 = 8;
        goto LABEL_25;
      case 5u:
        v17 = objc_alloc_init((Class)GEOLatLng);
        v18 = 16;
LABEL_25:
        objc_storeStrong((id *)(a1 + v18), v17);
        v26[0] = 0;
        v26[1] = 0;
        if (PBReaderPlaceMark(a2, v26) && (objc_msgSend(v17, "readFrom:", a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v26);

LABEL_41:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      case 6u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v21 |= (unint64_t)(v23 & 0x7F) << v19;
            if (v23 < 0)
            {
              v19 += 7;
              v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v21) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v21) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 32) = v21;
        goto LABEL_41;
      case 7u:
        v24 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v24);
        v14 = 24;
LABEL_36:
        v25 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        goto LABEL_41;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

void sub_1007000BC(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a2;
  if (!objc_msgSend(a3, "unsignedIntegerValue"))
    objc_msgSend(*(id *)(a1 + 32), "removeObject:", v5);

}

void sub_100701004(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_100701028(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  unsigned int v3;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_msgSend(WeakRetained, "active");
    v2 = v4;
    if (v3)
    {
      objc_msgSend(v4, "_setNeedsSnapshotUpdateAnimated:", 1);
      v2 = v4;
    }
  }

}

id sub_1007011B8(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;

  v1 = a1;
  v2 = objc_opt_class(HomeOrthogonalSectionTableViewCell);
  if ((objc_opt_isKindOfClass(v1, v2) & 1) != 0)
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "cell"));
  else
    v3 = v1;
  v4 = v3;

  return v4;
}

void sub_100701628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100701650(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;

  v3 = a2;
  v4 = (uint64_t)objc_msgSend(v3, "type");
  v5 = 1;
  if (v4 <= 5)
  {
    if (v4)
    {
      if (v4 == 5)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "geoMapItem"));
        v5 = v6 != 0;

      }
      goto LABEL_9;
    }
LABEL_8:
    v5 = 0;
    goto LABEL_9;
  }
  if (v4 == 6)
    goto LABEL_8;
  if (v4 == 20)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = (uint64_t)objc_msgSend(WeakRetained, "_shouldShowEntryOfTypeVehicleSetup:", v3);

  }
LABEL_9:

  return v5;
}

void sub_1007020A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007020C4(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  unsigned int v3;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_msgSend(WeakRetained, "active");
    v2 = v4;
    if (v3)
    {
      objc_msgSend(v4, "_setNeedsSnapshotUpdateAnimated:", 1);
      v2 = v4;
    }
  }

}

void sub_100702360(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD block[4];
  id v5;
  id v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "filteredRecents:excludingDuplicatesOfEntries:", *(_QWORD *)(a1 + 40), &__NSArray0__struct));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10070242C;
  block[3] = &unk_1011B0288;
  objc_copyWeak(&v7, (id *)(a1 + 56));
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  v3 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v7);
}

void sub_10070242C(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_storeStrong(WeakRetained + 33, *(id *)(a1 + 32));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    WeakRetained = v3;
  }

}

id sub_100702D4C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a1 + 40) <= a3)
    return 0;
  else
    return objc_msgSend(*(id *)(a1 + 32), "_shouldDisplayObject:", a2);
}

BOOL sub_100703198(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "type") == *(id *)(a1 + 32);
}

NSString *__cdecl sub_1007038C0(id a1, id a2, unint64_t a3)
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class(a2, a2);
  return NSStringFromClass(v3);
}

void sub_100703E54(uint64_t a1)
{
  double v1;
  id v2;

  v1 = *(double *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v2, "setAlpha:", v1);

}

NSString *__cdecl sub_100703E94(id a1, MapsUIDiffableDataSourceIdentifiable *a2, unint64_t a3)
{
  return (NSString *)sub_10046DCCC(a2);
}

NSString *__cdecl sub_100703E9C(id a1, MapsUIDiffableDataSourceIdentifiable *a2, unint64_t a3)
{
  return (NSString *)sub_10046DCCC(a2);
}

NSString *__cdecl sub_100703EA4(id a1, MapsUIDiffableDataSourceIdentifiable *a2, unint64_t a3)
{
  return (NSString *)sub_10046DCCC(a2);
}

void sub_100704F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100704F9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100704FAC(uint64_t a1)
{

}

void sub_100704FB4(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  BOOL (*v19)(uint64_t, void *);
  void *v20;
  id v21;
  id v22;
  id v23;

  v3 = a2;
  v4 = (void *)a1[4];
  v17 = _NSConcreteStackBlock;
  v18 = 3221225472;
  v19 = sub_10070515C;
  v20 = &unk_1011C12E0;
  v5 = v3;
  v21 = v5;
  v6 = sub_10039E1FC(v4, &v17);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = objc_msgSend(v5, "hasOrthogonalLayout", v17, v18, v19, v20);
  v9 = (void *)a1[5];
  if (v8)
  {
    v23 = v5;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
    if (!v7)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_maps_appendIdentifiersForSection:items:reloadingChangesFromPreviousItems:", v5, v10, 0));
      goto LABEL_6;
    }
    v22 = v5;
    v11 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v22, 1));
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contents"));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "contents"));
  }
  v12 = (void *)v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_maps_appendIdentifiersForSection:items:reloadingChangesFromPreviousItems:", v5, v10, v11));

LABEL_6:
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "differenceUnionWithDifference:", v13));
  v15 = *(_QWORD *)(a1[6] + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

}

BOOL sub_10070515C(uint64_t a1, void *a2)
{
  id v3;

  v3 = objc_msgSend(a2, "type");
  return v3 == objc_msgSend(*(id *)(a1 + 32), "type");
}

void sub_100705194(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  MapsUIDiffableDataSourceSnapshotDifference *v8;
  uint64_t v9;
  void *v10;
  MapsUIDiffableDataSourceSnapshotDifference *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 208);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100705304;
  v15[3] = &unk_1011C12E0;
  v5 = v3;
  v16 = v5;
  v6 = sub_10039E1FC(v4, v15);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (!v7)
  {
    v8 = [MapsUIDiffableDataSourceSnapshotDifference alloc];
    if ((objc_msgSend(v5, "hasOrthogonalLayout") & 1) != 0)
    {
      v17 = v5;
      v9 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
    }
    else
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contents"));
    }
    v10 = (void *)v9;
    v11 = -[MapsUIDiffableDataSourceSnapshotDifference initWithReloadedItems:insertedItems:deletedItems:](v8, "initWithReloadedItems:insertedItems:deletedItems:", &__NSArray0__struct, &__NSArray0__struct, v9);

    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "differenceUnionWithDifference:", v11));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

  }
}

BOOL sub_100705304(uint64_t a1, void *a2)
{
  id v3;

  v3 = objc_msgSend(a2, "type");
  return v3 == objc_msgSend(*(id *)(a1 + 32), "type");
}

void sub_100705BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_100705C60(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v7 = sub_10046DCCC(a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = objc_msgSend(v8, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v9)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a3, objc_msgSend(*(id *)(a1 + 40), "section")));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    *a4 = 1;
  }
}

void sub_100705CF8(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  id v13;
  CGRect v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dequeueReusableCellWithIdentifier:forIndexPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v3 = (objc_class *)objc_opt_class(ShortcutsRowTableViewCell);
  v4 = sub_100705E34(v2, v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v2;

  v7 = sub_1007011B8(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  v13 = (id)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v13, "setDelegate:", *(_QWORD *)(a1 + 56));
  objc_msgSend(v13, "setSuggestionsDataProvider:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 128));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "tableView"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "traitCollection"));
  +[ShortcutsRowTableViewCell cellHeightWithTraitCollection:](ShortcutsRowTableViewCell, "cellHeightWithTraitCollection:", v9);
  v11 = v10;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "tableView"));
  objc_msgSend(v12, "bounds");
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setBounds:", 0.0, 0.0, CGRectGetWidth(v14), v11);

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "layoutIfNeeded");
}

id sub_100705E34(void *a1, objc_class *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  char isKindOfClass;
  id v8;
  id v9;
  void *v10;
  id v11;

  v3 = a1;
  v4 = objc_opt_class(HomeOrthogonalSectionTableViewCell);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cell"));
    isKindOfClass = objc_opt_isKindOfClass(v6, a2);

    if ((isKindOfClass & 1) == 0)
    {
      v8 = [a2 alloc];
      v9 = objc_msgSend(v5, "style");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "reuseIdentifier"));
      v11 = objc_msgSend(v8, "initWithStyle:reuseIdentifier:", v9, v10);

      objc_msgSend(v5, "setCell:", v11);
    }

  }
  return v3;
}

void sub_100705F04(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  HomeCuratedCollectionsTableViewCellModel *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  id v18;
  CGRect v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dequeueReusableCellWithIdentifier:forIndexPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v3 = (objc_class *)objc_opt_class(HomeCuratedCollectionsTableViewCell);
  v4 = sub_100705E34(v2, v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v2;

  v7 = sub_1007011B8(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  v18 = (id)objc_claimAutoreleasedReturnValue(v7);
  v8 = -[HomeCuratedCollectionsTableViewCellModel initWithResultDataProvider:delegate:]([HomeCuratedCollectionsTableViewCellModel alloc], "initWithResultDataProvider:delegate:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 152));
  objc_msgSend(v18, "setCellModel:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "tableView"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "traitCollection"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "cellModel"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "exploreGuides"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "cellModel"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "curatedCollections"));
  +[HomeCuratedCollectionsTableViewCell cellHeightWithTraitCollection:includeExploreGuidesHeight:collectionCount:](HomeCuratedCollectionsTableViewCell, "cellHeightWithTraitCollection:includeExploreGuidesHeight:collectionCount:", v10, v12 != 0, objc_msgSend(v14, "count") == (id)1);
  v16 = v15;

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "tableView"));
  objc_msgSend(v17, "bounds");
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setBounds:", 0.0, 0.0, CGRectGetWidth(v19), v16);

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "layoutIfNeeded");
}

void sub_100706788(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1007067A8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_sectionHeaderButtonTappedWithHomeSection:", *(_QWORD *)(a1 + 32));

}

id sub_1007067E4(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  CGRect v8;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "tableView"));
  objc_msgSend(v2, "tableView:heightForHeaderInSection:", v3, *(_QWORD *)(a1 + 48));
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tableView"));
  objc_msgSend(v6, "bounds");
  objc_msgSend(*(id *)(a1 + 40), "setBounds:", 0.0, 0.0, CGRectGetWidth(v8), v5);

  return objc_msgSend(*(id *)(a1 + 40), "layoutIfNeeded");
}

id sub_100706B50(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  CGRect v8;
  CGRect v9;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tableView"));
  objc_msgSend(v3, "bounds");
  objc_msgSend(v2, "systemLayoutSizeFittingSize:", CGRectGetWidth(v8), UILayoutFittingCompressedSize.height);
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tableView"));
  objc_msgSend(v6, "bounds");
  objc_msgSend(*(id *)(a1 + 32), "setBounds:", 0.0, 0.0, CGRectGetWidth(v9), v5);

  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_100706DFC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100706E18(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "deleteRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), v4);

}

void sub_100706F2C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100706F48(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "shareRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), &stru_1011C1378);

}

void sub_10070705C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100707078(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100707114;
  v7[3] = &unk_1011ADA00;
  v8 = v3;
  v6 = v3;
  objc_msgSend(WeakRetained, "editLocationAtIndexPath:completion:", v5, v7);

}

uint64_t sub_100707114(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100707360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100707384(uint64_t a1)
{
  HomeDeletion *v2;
  uint64_t v3;
  uint64_t v4;
  IdentifierPath *v5;
  id WeakRetained;
  HomeDeletion *v7;

  v2 = [HomeDeletion alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_alloc_init(IdentifierPath);
  v7 = -[HomeDeletion initWithObject:indexPath:identifierPath:contextualActionCompletionHandler:](v2, "initWithObject:indexPath:identifierPath:contextualActionCompletionHandler:", v3, v4, v5, *(_QWORD *)(a1 + 48));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_beginDeletion:", v7);

}

uint64_t sub_100707418(uint64_t a1, int a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100707620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10070763C(uint64_t a1)
{
  HomeDeletion *v2;
  uint64_t v3;
  uint64_t v4;
  IdentifierPath *v5;
  id WeakRetained;
  HomeDeletion *v7;

  v2 = [HomeDeletion alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_alloc_init(IdentifierPath);
  v7 = -[HomeDeletion initWithObject:indexPath:identifierPath:contextualActionCompletionHandler:](v2, "initWithObject:indexPath:identifierPath:contextualActionCompletionHandler:", v3, v4, v5, *(_QWORD *)(a1 + 48));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_beginDeletion:", v7);

}

uint64_t sub_1007076D0(uint64_t a1, int a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100707B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100707B68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id WeakRetained;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v7 && !v9 && objc_msgSend(v8, "count"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v12 = WeakRetained;
    if (WeakRetained)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "shareDelegate"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "tableView"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "cellForRowAtIndexPath:", *(_QWORD *)(a1 + 40)));
      objc_msgSend(v13, "shareCuratedCollection:withRefinedMapItems:sourceView:completion:", v7, v8, v15, *(_QWORD *)(a1 + 48));

    }
  }
  else
  {
    v16 = sub_1004316CC();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "count")));
      v21 = 138412802;
      v22 = v18;
      v23 = 2112;
      v24 = v19;
      v25 = 2112;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Cannot share collection with Id:%@ collectionCount:%@ error:%@", (uint8_t *)&v21, 0x20u);

    }
    v20 = *(_QWORD *)(a1 + 48);
    if (v20)
      (*(void (**)(void))(v20 + 16))();
  }

}

void sub_100707E64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "parkedCarActionDelegate"));
    objc_msgSend(v5, "editLocationForParkedCar:", v7);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tableView"));
    objc_msgSend(v5, "reloadData");
  }

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(void))(v6 + 16))();

}

void sub_100708524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location)
{
  uint64_t v10;

  objc_destroyWeak(location);
  objc_destroyWeak(a9);
  objc_destroyWeak((id *)(v10 - 160));
  _Unwind_Resume(a1);
}

void sub_100708570(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void (**v5)(_QWORD, _QWORD);
  id WeakRetained;
  int v7;
  uint64_t v8;

  v2 = sub_100432EDC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "HCP beginAsyncDelete: %@", (uint8_t *)&v7, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 40), "markAsTentativelyDeleted");
  v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextualActionCompletionHandler"));
  v5[2](v5, 1);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_setNeedsSnapshotUpdateAnimated:", 1);

}

void sub_100708654(uint64_t a1, int a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  const __CFString *v9;
  id WeakRetained;
  int v11;
  uint64_t v12;
  __int16 v13;
  const __CFString *v14;
  __int16 v15;
  id v16;

  v5 = a3;
  v6 = sub_100432EDC();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = CFSTR("NO");
    v11 = 138412802;
    if (a2)
      v9 = CFSTR("YES");
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    v15 = 2112;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "HCP endAsyncDelete: %@, success = %@, error = %@", (uint8_t *)&v11, 0x20u);
  }

  if ((a2 & 1) == 0 && (objc_msgSend(*(id *)(a1 + 40), "completed") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "markAsCompletedWithSuccess:error:", 0, v5);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "_setNeedsSnapshotUpdateAnimated:", 1);

  }
}

uint64_t sub_100708774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100708780(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t Log;
  NSObject *v15;
  id WeakRetained;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  int v20;

  v6 = sub_100432EDC();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "HCP removeMapsSuggestionsEntry finished %@", buf, 0xCu);
  }

  v9 = NSStringFromMapsSuggestionsRemovalBehavior(a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = NSStringFromMapsSuggestionsEntryType(objc_msgSend(*(id *)(a1 + 32), "type"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MSg,%@,%@"), v10, v12));

  Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "MapsSuggestionsDelete");
  v15 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412546;
    v18 = v13;
    v19 = 1024;
    v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "User deleted %@; didRemove:%d", buf, 0x12u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_captureSuggestionDeleteActionWithEntry:behaviour:", *(_QWORD *)(a1 + 32), a3);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_100708930(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, BOOL, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2 == 0, a2);
}

uint64_t sub_100708948(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, BOOL, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2 == 0, a2);
}

void sub_100708960(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100432EDC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error deleting recent: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

NSArray *__cdecl sub_10070A3B4(id a1, GEOTransitStepBadge *a2, unint64_t a3)
{
  return (NSArray *)-[GEOTransitStepBadge _maps_artworkCluster](a2, "_maps_artworkCluster", a3);
}

int64_t sub_10070A8E4(id a1, VGChargingNetwork *a2, VGChargingNetwork *a3)
{
  VGChargingNetwork *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](a2, "name"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](v4, "name"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

VehicleLabelCell *__cdecl sub_10070AC78(id a1, VGChargingNetwork *a2, unint64_t a3)
{
  VGChargingNetwork *v3;
  void *v4;
  VehicleLabelCell *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  int v12;
  VGChargingNetwork *v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](v3, "name"));

  if (v4)
  {
    v5 = objc_opt_new(VehicleLabelCell);
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](v3, "name"));
    -[VehicleLabelCell setAccessibilityIdentifier:](v5, "setAccessibilityIdentifier:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(-[VGChargingNetwork name](v3, "name"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[VehicleLabelCell label](v5, "label"));
    objc_msgSend(v8, "setText:", v7);

    -[VehicleLabelCell setAccessoryType:](v5, "setAccessoryType:", 0);
  }
  else
  {
    v9 = sub_1004326FC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to create a cell for network: %@", (uint8_t *)&v12, 0xCu);
    }

    v5 = 0;
  }

  return v5;
}

BOOL sub_10070CB68(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  id v7;

  v6 = objc_msgSend(a2, "globalBrandID");
  v7 = objc_msgSend(*(id *)(a1 + 32), "globalBrandID");
  if (v6 == v7)
    *a4 = 1;
  return v6 == v7;
}

id sub_10070CC14(uint64_t a1)
{
  id result;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "count");
  if (result)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v3 = *(id *)(*(_QWORD *)(a1 + 32) + 72);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v9;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(*(id *)(a1 + 32), "_captureAnalyticsForRemovedNetwork:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7), (_QWORD)v8);
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v5);
    }

    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "removeAllObjects");
  }
  return result;
}

void sub_10070DEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_10070DF14(uint64_t a1, double a2, double a3)
{
  id *WeakRetained;
  id *v6;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    objc_msgSend(WeakRetained[3], "setCenterCoordinate:", a2, a3);
    objc_msgSend(v6, "_didChangeCenterCoordinate:fromEditLocationMapView:", v6[3], a2, a3);
    objc_msgSend(v6[3], "updateAnnotationTitleWithCenterCoordinate:", a2, a3);
    objc_msgSend(v6[9], "dismissViewControllerAnimated:completion:", 1, 0);
    WeakRetained = v6;
  }

}

void sub_10070DFB8(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[9], "dismissViewControllerAnimated:completion:", 1, 0);
    WeakRetained = v2;
  }

}

id sub_10070EF78(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_doAppleConnectAuthentication");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 1;
  return result;
}

id sub_10070F034(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setHidden:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setEnabled:", *(_BYTE *)(a1 + 48) == 0);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 40) == 1 || *(_BYTE *)(a1 + 48) == 0;
  objc_msgSend(*(id *)(v2 + 32), "setEnabled:", v3);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setText:", *(_QWORD *)(a1 + 40));
}

id sub_10070F12C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, &stru_1011C1670);
}

_QWORD *sub_10070F25C(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (!*(_QWORD *)(v1 + 40))
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 16), "setText:", CFSTR("Apple Connect Authentication taking unexpectedly long, Cancel?"));
    *(_QWORD *)(v2[4] + 40) = 1;
    return objc_msgSend(*(id *)(v2[4] + 32), "setEnabled:", 1);
  }
  return result;
}

void sub_10070F988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10070F9A4(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_didTapContent:", WeakRetained[12]);
    WeakRetained = v2;
  }

}

void sub_1007108F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100710914(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained[12], "becomeFirstResponder");
    WeakRetained = v2;
  }

}

void sub_1007119C4(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "invertedSet"));
  v2 = (void *)qword_1014D2FC8;
  qword_1014D2FC8 = v1;

}

void sub_100711CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100711CF0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_showDatePicker");

}

void sub_10071270C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "datePicker"));
  objc_msgSend(v1, "_fieldDidChangeValue:", v2);

}

void sub_1007132B8(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  float v5;
  id v6;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "isCancelled") & 1) != 0)
    v2 = 1;
  else
    v2 = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "isFinished");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "fractionCompleted");
  v4 = v3;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_progressView"));
  objc_msgSend(*(id *)(a1 + 32), "_setProgressViewHidden:", v2);
  if ((v2 & 1) == 0)
  {
    v5 = v4;
    objc_msgSend(v6, "setProgress:animated:completion:", 1, 0, v5);
  }

}

void sub_100713454(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100713470(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  void *v5;
  id *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (id)*((_QWORD *)WeakRetained + 16);
    v6 = (id *)WeakRetained;
    if (!v3 || (v4 = objc_loadWeakRetained((id *)WeakRetained + 12), v4, v3 == v4))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSProgress progressWithTotalUnitCount:](NSProgress, "progressWithTotalUnitCount:", 1));
      objc_storeWeak(v6 + 12, v5);
      objc_msgSend(v6, "setObservingProgress:", v5);
    }
    else
    {
      v5 = 0;
    }
    objc_msgSend(v5, "becomeCurrentWithPendingUnitCount:", 1);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    objc_msgSend(v5, "resignCurrent");

    WeakRetained = v6;
  }

}

void sub_100713BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100713C08(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellContentConfiguration"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
    objc_msgSend(v5, "setText:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4[12], "selectedElements"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
    objc_msgSend(v5, "setSecondaryText:", v9);

    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "configureBlock"));
    ((void (**)(_QWORD, id, void *))v10)[2](v10, v14, v5);

    objc_msgSend(v14, "setContentConfiguration:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contentView"));
    objc_msgSend(v11, "setAccessibilityIdentifier:", CFSTR("TextLabel"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contentView"));
    objc_msgSend(v13, "setAccessibilityLabel:", v12);

  }
}

void sub_100713EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100713EC8(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellContentConfiguration"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
    objc_msgSend(v5, "setText:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4[12], "selectedElements"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
    objc_msgSend(v5, "setSecondaryText:", v9);

    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "configureCollectionViewCellBlock"));
    ((void (**)(_QWORD, id, void *))v10)[2](v10, v14, v5);

    objc_msgSend(v14, "setContentConfiguration:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contentView"));
    objc_msgSend(v11, "setAccessibilityIdentifier:", CFSTR("TextLabel"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "title"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contentView"));
    objc_msgSend(v13, "setAccessibilityLabel:", v12);

  }
}

void sub_1007142F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100714330(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 12, a2);
    objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateConfiguration");
  }

}

id sub_100718408(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "valueForKey:", *(_QWORD *)(a1 + 40));
}

id sub_100718414(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setValue:forKey:", a2, *(_QWORD *)(a1 + 40));
}

void sub_100718E38(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id sub_100718E5C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "valueForKeyInAllMapLayers:", *(_QWORD *)(a1 + 32)));
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

void sub_100718EB0(uint64_t a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  objc_msgSend(WeakRetained, "setValue:forKeyInAllMapLayers:", v4, *(_QWORD *)(a1 + 32));

}

void sub_100719014(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_100719030(uint64_t a1)
{
  return MapsFeature_IsEnabled(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_10071903C(uint64_t a1, uint64_t a2)
{
  NSNumber *v4;
  void *v5;
  NSString *v6;
  void *v7;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", MapsFeature_SetEnabled(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = NSStringFromSelector(*(SEL *)(a1 + 56));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(WeakRetained, "setValue:forKeyInAllMapLayers:", v5, v7);

}

void sub_1007191F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

id sub_10071920C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "valueForKey:", *(_QWORD *)(a1 + 32)));
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

void sub_100719268(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  objc_msgSend(v4, "setValue:forKey:", v5, *(_QWORD *)(a1 + 32));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

void sub_1007194C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_1007194DC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MIController sharedController](MIController, "sharedController"));
  v2 = objc_msgSend(v1, "isActive");

  return v2;
}

void sub_100719518(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allVisibleMapViewsForDebugController:", *(_QWORD *)(a1 + 32)));

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[MIController sharedController](MIController, "sharedController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", 0));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));
    objc_msgSend(v5, "activateController:", v7);

  }
  else
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(+[MIController sharedController](MIController, "sharedController"));
    objc_msgSend(v8, "deactivateController");
  }

}

void sub_1007196B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1007196D8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  unsigned int v32;
  id v33;
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  _QWORD v38[4];
  id v39;
  id v40;
  _QWORD v41[4];
  id v42;
  id v43;
  _QWORD v44[4];
  id v45;
  _QWORD v46[4];
  id v47;
  _QWORD v48[4];
  id v49;
  _QWORD v50[4];
  id v51;
  _QWORD v52[4];
  id v53;
  _QWORD v54[4];
  id v55;
  id v56;
  _QWORD v57[4];
  id v58;
  id v59;
  _QWORD v60[4];
  id v61;
  _QWORD v62[4];
  id v63;
  id v64;
  _QWORD v65[4];
  id v66;
  _QWORD v67[4];
  id v68;
  _QWORD v69[4];
  id v70;
  id v71;
  _QWORD v72[4];
  id v73;
  _QWORD v74[4];
  id v75;
  _QWORD v76[4];
  id v77;
  _QWORD v78[4];
  id v79;
  _QWORD v80[4];
  id v81;
  _QWORD v82[4];
  id v83;
  _QWORD v84[4];
  id v85;
  _QWORD v86[4];
  id v87;
  _QWORD v88[4];
  id v89;
  _QWORD v90[4];
  id v91;
  id v92[2];

  v3 = a2;
  v90[0] = _NSConcreteStackBlock;
  v90[1] = 3221225472;
  v90[2] = sub_10071A208;
  v90[3] = &unk_1011C1918;
  objc_copyWeak(v92, (id *)(a1 + 40));
  v91 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Console"), v90);
  v88[0] = _NSConcreteStackBlock;
  v88[1] = 3221225472;
  v88[2] = sub_10071A4EC;
  v88[3] = &unk_1011B7F10;
  v89 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Tiles"), v88);
  v86[0] = _NSConcreteStackBlock;
  v86[1] = 3221225472;
  v86[2] = sub_10071A990;
  v86[3] = &unk_1011C1B08;
  objc_copyWeak(&v87, (id *)(a1 + 40));
  v6 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Renderer"), v86);
  v84[0] = _NSConcreteStackBlock;
  v84[1] = 3221225472;
  v84[2] = sub_10071B458;
  v84[3] = &unk_1011C1B08;
  objc_copyWeak(&v85, (id *)(a1 + 40));
  v7 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Camera"), v84);
  v8 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(ViewportFrameBookmarksController));
  v9 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(KeyFrameAnimatorDebugController));
  v10 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Animation"), &stru_1011C1ED0);
  v82[0] = _NSConcreteStackBlock;
  v82[1] = 3221225472;
  v82[2] = sub_10071CAB8;
  v82[3] = &unk_1011C1B08;
  objc_copyWeak(&v83, (id *)(a1 + 40));
  v11 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Map Types"), v82);
  v80[0] = _NSConcreteStackBlock;
  v80[1] = 3221225472;
  v80[2] = sub_10071D870;
  v80[3] = &unk_1011C1B08;
  objc_copyWeak(&v81, (id *)(a1 + 40));
  v12 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Styles"), v80);
  v13 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(PerformanceDebugBookmarksController));
  v78[0] = _NSConcreteStackBlock;
  v78[1] = 3221225472;
  v78[2] = sub_10071DEB8;
  v78[3] = &unk_1011C1B08;
  objc_copyWeak(&v79, (id *)(a1 + 40));
  v14 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Performance"), v78);
  v76[0] = _NSConcreteStackBlock;
  v76[1] = 3221225472;
  v76[2] = sub_10071E030;
  v76[3] = &unk_1011AD260;
  objc_copyWeak(&v77, (id *)(a1 + 40));
  v15 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Share View as URL"), v76);
  v74[0] = _NSConcreteStackBlock;
  v74[1] = 3221225472;
  v74[2] = sub_10071E218;
  v74[3] = &unk_1011C1B08;
  objc_copyWeak(&v75, (id *)(a1 + 40));
  v16 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Debug Display Settings"), v74);
  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472;
  v72[2] = sub_10071E8D4;
  v72[3] = &unk_1011C1B08;
  objc_copyWeak(&v73, (id *)(a1 + 40));
  v17 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Logics"), v72);
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = sub_10071EC30;
  v69[3] = &unk_1011C1918;
  objc_copyWeak(&v71, (id *)(a1 + 40));
  v70 = *(id *)(a1 + 32);
  v18 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Labels"), v69);
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  v67[2] = sub_100721914;
  v67[3] = &unk_1011C1B08;
  objc_copyWeak(&v68, (id *)(a1 + 40));
  v19 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Transit"), v67);
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472;
  v65[2] = sub_100721B48;
  v65[3] = &unk_1011C1B08;
  objc_copyWeak(&v66, (id *)(a1 + 40));
  v20 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("AR Walking"), v65);
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_100724B68;
  v62[3] = &unk_1011C1918;
  objc_copyWeak(&v64, (id *)(a1 + 40));
  v63 = *(id *)(a1 + 32);
  v21 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Navigation"), v62);
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_100725E24;
  v60[3] = &unk_1011C1B08;
  objc_copyWeak(&v61, (id *)(a1 + 40));
  v22 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Traffic"), v60);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_10072606C;
  v57[3] = &unk_1011C1918;
  objc_copyWeak(&v59, (id *)(a1 + 40));
  v58 = *(id *)(a1 + 32);
  v23 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Buildings"), v57);
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_1007264B0;
  v54[3] = &unk_1011C1918;
  objc_copyWeak(&v56, (id *)(a1 + 40));
  v55 = *(id *)(a1 + 32);
  v24 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Altitude"), v54);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_100726C00;
  v52[3] = &unk_1011C1B08;
  objc_copyWeak(&v53, (id *)(a1 + 40));
  v25 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Map Inspector"), v52);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_100726DB0;
  v50[3] = &unk_1011C1B08;
  objc_copyWeak(&v51, (id *)(a1 + 40));
  v26 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Flyover Tours"), v50);
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_1007274D8;
  v48[3] = &unk_1011C1B08;
  objc_copyWeak(&v49, (id *)(a1 + 40));
  v27 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Flyover AR"), v48);
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_100727844;
  v46[3] = &unk_1011C1B08;
  objc_copyWeak(&v47, (id *)(a1 + 40));
  v28 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Lighting"), v46);
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_100729CDC;
  v44[3] = &unk_1011C1B08;
  objc_copyWeak(&v45, (id *)(a1 + 40));
  v29 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Flyover Unification"), v44);
  v30 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(MaskingOverlayDebugController));
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v32 = objc_msgSend(v31, "isMuninEnabled");

  if (v32)
  {
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_10072AE64;
    v41[3] = &unk_1011C1918;
    objc_copyWeak(&v43, (id *)(a1 + 40));
    v42 = *(id *)(a1 + 32);
    v33 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Munin"), v41);

    objc_destroyWeak(&v43);
  }
  if (+[VKMapView _elevatedGroundIsAvailable](VKMapView, "_elevatedGroundIsAvailable"))
  {
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_10072CE80;
    v38[3] = &unk_1011C1918;
    objc_copyWeak(&v40, (id *)(a1 + 40));
    v39 = *(id *)(a1 + 32);
    v34 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("DaVinci"), v38);

    objc_destroyWeak(&v40);
  }
  if (MapsFeature_IsEnabled_HikingiOS())
  {
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10073254C;
    v36[3] = &unk_1011C1B08;
    objc_copyWeak(&v37, (id *)(a1 + 40));
    v35 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Hiking iOS"), v36);
    objc_destroyWeak(&v37);
  }
  objc_destroyWeak(&v45);
  objc_destroyWeak(&v47);
  objc_destroyWeak(&v49);
  objc_destroyWeak(&v51);
  objc_destroyWeak(&v53);

  objc_destroyWeak(&v56);
  objc_destroyWeak(&v59);
  objc_destroyWeak(&v61);

  objc_destroyWeak(&v64);
  objc_destroyWeak(&v66);
  objc_destroyWeak(&v68);

  objc_destroyWeak(&v71);
  objc_destroyWeak(&v73);
  objc_destroyWeak(&v75);
  objc_destroyWeak(&v77);
  objc_destroyWeak(&v79);
  objc_destroyWeak(&v81);
  objc_destroyWeak(&v83);
  objc_destroyWeak(&v85);
  objc_destroyWeak(&v87);

  objc_destroyWeak(v92);
}

void sub_10071A080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, id *a12, id *a13, id *a14, id *a15, id *a16, id *a17, id *a18, id *a19, id *a20,id *a21,id *a22,id *a23,id *a24,id *a25,id *a26,id *a27)
{
  id *v27;
  id *v28;
  id *v29;
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak(a18);
  objc_destroyWeak(a19);
  objc_destroyWeak(a20);
  objc_destroyWeak(a21);
  objc_destroyWeak(a22);
  objc_destroyWeak(a23);
  objc_destroyWeak(a24);
  objc_destroyWeak(a25);
  objc_destroyWeak(a26);
  objc_destroyWeak(a27);
  _Unwind_Resume(a1);
}

void sub_10071A208(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071A2CC;
  v5[3] = &unk_1011B4F90;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v6 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Console"), v5);

  objc_destroyWeak(&v7);
}

void sub_10071A2B8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071A2CC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id WeakRetained;
  id v6;
  id v7;
  id v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  int v17;
  _QWORD v18[4];
  id v19;
  int v20;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Console Enabled"), &stru_1011C18A8, &stru_1011C18C8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Draw Performance HUD"), CFSTR("drawPerformanceHUD"));

  v7 = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Expanded Performance HUD"), CFSTR("expandedPerformanceHUD"));

  v9 = objc_msgSend(*(id *)(a1 + 32), "numPerformanceGroups");
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    do
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nameForPerformanceGroup:", v11));
      if (v12)
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Show Performance Group %@"), v12));
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_10071A4C4;
        v18[3] = &unk_1011C18F0;
        v19 = *(id *)(a1 + 32);
        v20 = v11;
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_10071A4D4;
        v15[3] = &unk_1011B71C8;
        v16 = *(id *)(a1 + 32);
        v17 = v11;
        v14 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v13, v18, v15);

      }
      v11 = (v11 + 1);
    }
    while (v10 != (_DWORD)v11);
  }

}

BOOL sub_10071A4A0(id a1)
{
  return GEOConfigGetBOOL(MapKitConfig_VectorKitDebugConsoleEnabled[0], MapKitConfig_VectorKitDebugConsoleEnabled[1]);
}

void sub_10071A4B0(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapKitConfig_VectorKitDebugConsoleEnabled[0], MapKitConfig_VectorKitDebugConsoleEnabled[1], a2);
}

id sub_10071A4C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "isPerformanceGroupShown:", *(unsigned int *)(a1 + 40));
}

id sub_10071A4D4(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;

  v3 = *(void **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 40);
  if (a2)
    return _objc_msgSend(v3, "showPerformanceGroup:", v4);
  else
    return _objc_msgSend(v3, "hidePerformanceGroup:", v4);
}

void sub_10071A4EC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10071A56C;
  v4[3] = &unk_1011B4BC0;
  v5 = *(id *)(a1 + 32);
  v3 = objc_msgSend(a2, "addSectionWithTitle:content:", CFSTR("Tiles"), v4);

}

void sub_10071A56C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;

  v3 = a2;
  v4 = objc_msgSend(v3, "addNavigationRowForViewControllerClass:", objc_opt_class(ActiveTileGroupDebugController));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Use Test Tile Loader")));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10071A804;
  v23[3] = &unk_1011AEB50;
  v24 = *(id *)(a1 + 32);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10071A80C;
  v21[3] = &unk_1011AE8F8;
  v22 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v5, v23, v21);

  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Update Resource Manifest"), &stru_1011C1938);
  v8 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Flush Tile Cache"), &stru_1011C1958);
  v9 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Force Dev Resources Update"), &stru_1011C1978);
  v10 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Delete All Dev Resources"), &stru_1011C1998);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10071A908;
  v19[3] = &unk_1011AEB50;
  v20 = *(id *)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10071A910;
  v17[3] = &unk_1011AE8F8;
  v18 = *(id *)(a1 + 32);
  v11 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Constantly Change Tile Group"), v19, v17);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10071A91C;
  v15[3] = &unk_1011B4F08;
  v16 = *(id *)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10071A968;
  v13[3] = &unk_1011AE420;
  v14 = *(id *)(a1 + 32);
  v12 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Tile Group Change Interval"), CFSTR("(seconds)"), 1, v15, v13);

}

id sub_10071A804(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "shouldUseTestTileLoader");
}

void sub_10071A80C(uint64_t a1, uint64_t a2)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setShouldUseTestTileLoader:", a2);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

void sub_10071A85C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  objc_msgSend(v1, "updateManifest:", 0);

}

void sub_10071A894(id a1)
{
  +[MapsMapDisplayDebugController completelyFlushTiles](MapsMapDisplayDebugController, "completelyFlushTiles");
}

void sub_10071A8A0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  objc_msgSend(v1, "devResourcesFolderDidChange");

}

void sub_10071A8D4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  objc_msgSend(v1, "removeDevResources");

}

id sub_10071A908(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "constantlyChangeTileGroup");
}

id sub_10071A910(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setConstantlyChangeTileGroup:", a2);
}

NSString *sub_10071A91C(uint64_t a1)
{
  double v1;

  objc_msgSend(*(id *)(a1 + 32), "constantlyChangeTileGroupInterval");
  *(float *)&v1 = v1;
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), *(float *)&v1);
}

id sub_10071A968(uint64_t a1, void *a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "doubleValue");
  return _objc_msgSend(v2, "setConstantlyChangeTileGroupInterval:");
}

void sub_10071A990(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071AA40;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Renderer"), v5);
  objc_destroyWeak(&v6);

}

void sub_10071AA2C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071AA40(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  id v7;
  id v8;
  double v9;
  double v10;
  id v11;
  id *v12;
  id v13;
  id WeakRetained;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Use Metal Renderer (Requires restart)"), &stru_1011C19B8, &stru_1011C19D8);
  LODWORD(v5) = 0.5;
  LODWORD(v6) = 2.0;
  v7 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Ribbon Antialiasing"), CFSTR("Antialias:  %1.2f"), &stru_1011C19F8, &stru_1011C1A18, v5, v6);
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable mipmaps"), &stru_1011C1A38, &stru_1011C1A58);
  LODWORD(v9) = 1098960077;
  LODWORD(v10) = 1.0;
  v11 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Texture anisotropy"), CFSTR("Anisotropy:  %1.f"), &stru_1011C1A78, &stru_1011C1A98, v10, v9);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10071AF64;
  v26[3] = &unk_1011AD260;
  v12 = (id *)(a1 + 32);
  objc_copyWeak(&v27, v12);
  v13 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Capture Frame"), v26);
  WeakRetained = objc_loadWeakRetained(v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v16 = objc_loadWeakRetained(v12);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allVisibleMapViewsForDebugController:", v16));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "firstObject"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "_mapLayer"));
  v20 = objc_msgSend(v19, "supportsGPUFrameCaptureToDestination");

  if (v20)
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10071B3E8;
    v24[3] = &unk_1011AEE60;
    objc_copyWeak(&v25, v12);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10071B41C;
    v22[3] = &unk_1011AD4F0;
    objc_copyWeak(&v23, v12);
    v21 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Capture Frame to File"), v24, v22);
    objc_destroyWeak(&v23);
    objc_destroyWeak(&v25);
  }
  objc_destroyWeak(&v27);

}

void sub_10071ACCC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10071ACFC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "useMetalRenderer");

  return v2;
}

void sub_10071AD38(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setUseMetalRenderer:", v2);

}

float sub_10071AD7C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "ribbonCrispness");
  v3 = v2;

  return v3;
}

void sub_10071ADC0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setRibbonCrispness:", v3);

}

BOOL sub_10071AE04(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableMipMaps");

  return v2;
}

void sub_10071AE40(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableMipMaps:", v2);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

float sub_10071AEB0(id a1)
{
  void *v1;
  float v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (float)objc_msgSend(v1, "anisotropy");

  return v2;
}

void sub_10071AEF4(id a1, float a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  LODWORD(v2) = vcvtms_u32_f32(a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setAnisotropy:", v2);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

void sub_10071AF64(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  __CFString *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  id v35;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v8, "setDebugCaptureNextGPUFrame:", 1);

  if (objc_msgSend(v7, "supportsGPUFrameCaptureToDestination")
    && (v9 = objc_loadWeakRetained(v1),
        v10 = objc_msgSend(v9, "shouldCaptureFrameToFile"),
        v9,
        v10))
  {
    v11 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
    v30 = (void *)v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "components:fromDate:", 252, v11));

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("~/Library/Maps/FrameCaptures"), "stringByExpandingTildeInPath"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/Maps-%ld-%02ld-%02ld.%02ld-%02ld-%02ld.gputrace"), v14, objc_msgSend(v13, "year"), objc_msgSend(v13, "month"), objc_msgSend(v13, "day"), objc_msgSend(v13, "hour"), objc_msgSend(v13, "minute"), objc_msgSend(v13, "second")));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v35 = 0;
    LODWORD(v11) = objc_msgSend(v16, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v14, 1, 0, &v35);
    v17 = v35;

    if ((_DWORD)v11)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v15));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "path"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
      objc_msgSend(v20, "setDebugGPUFrameCaptureURL:", v19);

      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v14));
      v34 = v17;
      objc_msgSend(v21, "setResourceValue:forKey:error:", &__kCFBooleanTrue, NSURLIsExcludedFromBackupKey, &v34);
      v22 = v34;

      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "path"));
      v24 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Frame will be captured to '%@'"), v23));

      v17 = v22;
    }
    else
    {
      v18 = 0;
      v24 = CFSTR("Press OK to perform programatic capture (Must have debugger attached)");
    }

  }
  else
  {
    v18 = 0;
    v24 = CFSTR("Press OK to perform programatic capture (Must have debugger attached)");
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Capture Frame"), v24, 1));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_10071B39C;
  v31[3] = &unk_1011C1AC0;
  v26 = v7;
  v32 = v26;
  objc_copyWeak(&v33, v1);
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, v31));
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Cancel"), 0, &stru_1011C1AE0));
  objc_msgSend(v25, "addAction:", v27);
  objc_msgSend(v25, "addAction:", v28);
  v29 = objc_loadWeakRetained(v1);
  objc_msgSend(v29, "presentViewController:animated:completion:", v25, 1, 0);

  objc_destroyWeak(&v33);
}

void sub_10071B384(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071B39C(uint64_t a1)
{
  id WeakRetained;

  objc_msgSend(*(id *)(a1 + 32), "forceLayout");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, 0);

}

id sub_10071B3E8(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_msgSend(WeakRetained, "shouldCaptureFrameToFile");

  return v2;
}

void sub_10071B41C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setShouldCaptureFrameToFile:", a2);

}

void sub_10071B458(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;

  v3 = a2;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10071B65C;
  v15[3] = &unk_1011AEAC8;
  objc_copyWeak(&v16, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Standard Camera"), v15);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Smart Camera Debug Console"), &stru_1011C1C50);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10071BDE0;
  v13[3] = &unk_1011AEAC8;
  objc_copyWeak(&v14, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Camera Mode"), v13);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10071C1CC;
  v11[3] = &unk_1011AEAC8;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Navigation Destination"), v11);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10071C598;
  v9[3] = &unk_1011AEAC8;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("WGS84 Debug Control"), v9);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v16);

}

void sub_10071B614(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071B65C(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  double v6;
  double v7;
  id v8;
  id v9;
  double v10;
  double v11;
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Freeze Camera Loading"), &stru_1011C1B28, &stru_1011C1B48);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Relax Tilt Limits"), &stru_1011C1B68, &stru_1011C1B88);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10071B968;
  v15[3] = &unk_1011C1BD0;
  a1 += 4;
  objc_copyWeak(&v16, a1);
  LODWORD(v6) = 1.0;
  LODWORD(v7) = 20.0;
  v8 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Far Clip Plane Factor"), CFSTR("%.1f"), &stru_1011C1BA8, v15, v6, v7);
  v9 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Depth of Field"), &stru_1011C1BF0, &stru_1011C1C10);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10071BA90;
  v13[3] = &unk_1011C1BD0;
  objc_copyWeak(&v14, a1);
  LODWORD(v10) = 0;
  LODWORD(v11) = 1.0;
  v12 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Depth of Field Strength"), CFSTR("%.2f"), &stru_1011C1C30, v13, v10, v11);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v16);

}

void sub_10071B7FC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10071B824(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "shouldFreezeLayoutCamera");

  return v2;
}

void sub_10071B860(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setShouldFreezeLayoutCamera:", v2);

}

BOOL sub_10071B8A4(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "relaxTiltLimits");

  return v2;
}

void sub_10071B8E0(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setRelaxTiltLimits:", v2);

}

float sub_10071B924(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "farClipPlaneFactor");
  v3 = v2;

  return v3;
}

void sub_10071B968(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setFarClipPlaneFactor:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

BOOL sub_10071B9CC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableDOF");

  return v2;
}

void sub_10071BA08(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableDOF:", v2);

}

float sub_10071BA4C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "dofStrength");
  v3 = v2;

  return v3;
}

void sub_10071BA90(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDofStrength:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

void sub_10071BAF4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v9 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Force Complex Intersection"), &stru_1011C1C70, &stru_1011C1C90);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Force Windshield Mode Button"), &stru_1011C1CB0, &stru_1011C1CD0);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Enable"), &stru_1011C1CF0, &stru_1011C1D10);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Show Overlay"), &stru_1011C1D30, &stru_1011C1D50);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Show Properties"), &stru_1011C1D70, &stru_1011C1D90);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Show Attributes"), &stru_1011C1DB0, &stru_1011C1DD0);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Show Legend"), &stru_1011C1DF0, &stru_1011C1E10);

}

BOOL sub_10071BC2C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "navCameraForceComplexIntersection");

  return v2;
}

void sub_10071BC68(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setNavCameraForceComplexIntersection:", v2);

}

BOOL sub_10071BCAC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableWindshieldOverrideButton");

  return v2;
}

void sub_10071BCE8(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableWindshieldOverrideButton:", v2);

}

BOOL sub_10071BD2C(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_NavCameraEnableConsole[0], VectorKitDebugConfig_NavCameraEnableConsole[1]);
}

void sub_10071BD3C(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_NavCameraEnableConsole[0], VectorKitDebugConfig_NavCameraEnableConsole[1], a2);
}

BOOL sub_10071BD50(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_NavCameraEnableOverlay[0], VectorKitDebugConfig_NavCameraEnableOverlay[1]);
}

void sub_10071BD60(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_NavCameraEnableOverlay[0], VectorKitDebugConfig_NavCameraEnableOverlay[1], a2);
}

BOOL sub_10071BD74(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_NavCameraEnableProperties[0], VectorKitDebugConfig_NavCameraEnableProperties[1]);
}

void sub_10071BD84(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_NavCameraEnableProperties[0], VectorKitDebugConfig_NavCameraEnableProperties[1], a2);
}

BOOL sub_10071BD98(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_NavCameraEnableAttributes[0], VectorKitDebugConfig_NavCameraEnableAttributes[1]);
}

void sub_10071BDA8(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_NavCameraEnableAttributes[0], VectorKitDebugConfig_NavCameraEnableAttributes[1], a2);
}

BOOL sub_10071BDBC(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_NavCameraEnableLegend[0], VectorKitDebugConfig_NavCameraEnableLegend[1]);
}

void sub_10071BDCC(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_NavCameraEnableLegend[0], VectorKitDebugConfig_NavCameraEnableLegend[1], a2);
}

void sub_10071BDE0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10071BF88;
  v7[3] = &unk_1011B4E90;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071C05C;
  v5[3] = &unk_1011B4EB8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C1E50, v7, v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&v8);

}

void sub_10071BECC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071BEE8(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Default"), &off_10126E908);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Overview"), &off_10126E920);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("LegOverview"), &off_10126E938);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Drive"), &off_10126E950);

}

id sub_10071BF88(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sceneConfiguration"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "navCameraMode")));
  return v9;
}

void sub_10071C05C(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v11), "_mapLayer"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sceneConfiguration"));

        objc_msgSend(v13, "setNavCameraMode:", objc_msgSend(v3, "integerValue"));
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

}

void sub_10071C1CC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10071C354;
  v7[3] = &unk_1011B4E90;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071C428;
  v5[3] = &unk_1011B4EB8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C1E70, v7, v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&v8);

}

void sub_10071C2B8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071C2D4(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Unknown"), &off_10126E908);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Confirmed"), &off_10126E920);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Unconfirmed"), &off_10126E950);

}

id sub_10071C354(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sceneConfiguration"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "navigationDestination")));
  return v9;
}

void sub_10071C428(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v11), "_mapLayer"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sceneConfiguration"));

        objc_msgSend(v13, "setNavigationDestination:", objc_msgSend(v3, "integerValue"));
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

}

void sub_10071C598(id *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id v6;
  double v7;
  double v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10071C734;
  v12[3] = &unk_1011C1BD0;
  a1 += 4;
  objc_copyWeak(&v13, a1);
  LODWORD(v4) = 0;
  LODWORD(v5) = 1.0;
  v6 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Sky Offset Adjustment"), CFSTR("%1.6f "), &stru_1011C1E90, v12, v4, v5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10071C848;
  v10[3] = &unk_1011C1BD0;
  objc_copyWeak(&v11, a1);
  LODWORD(v7) = -1035468800;
  LODWORD(v8) = 1148829696;
  v9 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Grid Z Adjustment"), CFSTR("%3.6f "), &stru_1011C1EB0, v10, v7, v8);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);

}

void sub_10071C6CC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

float sub_10071C6F0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "skyOffsetAdjustment");
  v3 = v2;

  return v3;
}

void sub_10071C734(id *a1, float a2)
{
  void *v4;
  double v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setSkyOffsetAdjustment:", v5);

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

}

float sub_10071C804(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "gridZAdjustment");
  v3 = v2;

  return v3;
}

void sub_10071C848(id *a1, float a2)
{
  void *v4;
  double v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setGridZAdjustment:", v5);

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

}

void sub_10071C918(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Speed"), &stru_1011C1EF0);
}

void sub_10071C948(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v4, "addSwitchRowWithTitle:get:set:", CFSTR("Slow Animation"), &stru_1011C1F10, &stru_1011C1F30);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v4, "addSwitchRowWithTitle:get:set:", CFSTR("Slow Transitions"), &stru_1011C1F50, &stru_1011C1F70);

}

BOOL sub_10071C9B8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "slowAnimations");

  return v2;
}

void sub_10071C9F4(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setSlowAnimations:", v2);

}

BOOL sub_10071CA38(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "slowTransitions");

  return v2;
}

void sub_10071CA74(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setSlowTransitions:", v2);

}

void sub_10071CAB8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10071CC34;
  v11[3] = &unk_1011AEAC8;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Map Types"), v11);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10071D0EC;
  v9[3] = &unk_1011AEAC8;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Map Modes"), v9);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10071D4C0;
  v7[3] = &unk_1011AEAC8;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Current Emphasis"), v7);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);

}

void sub_10071CC00(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071CC34(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10071CEC8;
  v7[3] = &unk_1011B4E90;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071CF88;
  v5[3] = &unk_1011B4EB8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C1F90, v7, v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&v8);

}

void sub_10071CD20(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071CD3C(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  unsigned int v12;
  id v13;
  MapsDebugCheckmarkRowsGroup *v14;

  v14 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Grid"), &off_10126E968);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Vector"), &off_10126E980);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Satellite"), &off_10126E998);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Hybrid"), &off_10126E9B0);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Globe"), &off_10126E9C8);
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Globe Hybrid"), &off_10126E9E0);
  v8 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Standard Grid"), &off_10126E968);
  v9 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Satellite Grid"), &off_10126E9F8);
  v10 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Navigation"), &off_10126EA10);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v12 = objc_msgSend(v11, "isMuninEnabled");

  if (v12)
    v13 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v14, "addRowWithTitle:value:", CFSTR("Munin"), &off_10126EA28);

}

id sub_10071CEC8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v7, "mapType")));

  return v8;
}

void sub_10071CF88(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v3 = a2;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v11);
        v13 = objc_msgSend(v3, "integerValue");
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
        objc_msgSend(v14, "setMapType:", v13);

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v9);
  }

}

void sub_10071D0EC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10071D2A0;
  v7[3] = &unk_1011B4E90;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071D360;
  v5[3] = &unk_1011B4EB8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C1FB0, v7, v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&v8);

}

void sub_10071D1D8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071D1F4(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  MapsDebugCheckmarkRowsGroup *v7;

  v7 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Standard"), &off_10126E980);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Navigation"), &off_10126E998);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager"));
  v5 = objc_msgSend(v4, "isMuninEnabled");

  if (v5)
    v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Munin PIP"), &off_10126E9C8);

}

id sub_10071D2A0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v7, "currentMapMode")));

  return v8;
}

void sub_10071D360(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v11), "_mapLayer"));
        objc_msgSend(v12, "setDesiredMapMode:", objc_msgSend(v3, "integerValue"));

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

}

void sub_10071D4C0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10071D648;
  v7[3] = &unk_1011B4E90;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071D708;
  v5[3] = &unk_1011B4EB8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C1FD0, v7, v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&v8);

}

void sub_10071D5AC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071D5C8(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Muted"), &off_10126EA40);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Standard"), &off_10126EA58);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Explore"), &off_10126EA70);

}

id sub_10071D648(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", objc_msgSend(v7, "emphasis")));

  return v8;
}

void sub_10071D708(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v3 = a2;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v11);
        v13 = objc_msgSend(v3, "integerValue");
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
        objc_msgSend(v14, "setEmphasis:animated:", v13, 0);

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v9);
  }

}

void sub_10071D870(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071D920;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Styles"), v5);
  objc_destroyWeak(&v6);

}

void sub_10071D90C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071D920(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10071DA6C;
  v9[3] = &unk_1011AD260;
  a1 += 4;
  objc_copyWeak(&v10, a1);
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Perform Day/Night Cycle"), v9);
  v5 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("DO NOT USE these options for testing"), CFSTR("They do not completely configure the style"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10071DE18;
  v7[3] = &unk_1011C2060;
  objc_copyWeak(&v8, a1);
  v6 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C2018, &stru_1011C2038, v7);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v10);

}

void sub_10071DA44(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071DA6C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  unsigned __int8 v3;
  uint64_t *v4;
  __int16 v5;
  int v6;
  uint64_t *v7;
  __int16 v8;
  dispatch_time_t v9;
  _QWORD v10[6];
  id v11[2];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  const char *v21;
  int v22;
  __int16 v23;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2810000000;
  v21 = "";
  v22 = 0;
  v23 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2810000000;
  v15 = "";
  v16 = 1;
  v1 = (id *)(a1 + 32);
  v17 = 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "mapDisplayStyleInAllLayers");

  if (!v3)
  {
    v4 = v19;
    v5 = *((_WORD *)v19 + 18);
    v6 = *((_DWORD *)v19 + 8);
    v7 = v13;
    v8 = *((_WORD *)v13 + 18);
    *((_DWORD *)v19 + 8) = *((_DWORD *)v13 + 8);
    *((_WORD *)v4 + 18) = v8;
    *((_DWORD *)v7 + 8) = v6;
    *((_WORD *)v7 + 18) = v5;
  }
  v9 = dispatch_time(0, 1500000000);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10071DBE4;
  v10[3] = &unk_1011C1FF8;
  objc_copyWeak(v11, v1);
  v10[4] = &v18;
  v10[5] = &v12;
  dispatch_after(v9, (dispatch_queue_t)&_dispatch_main_q, v10);
  objc_destroyWeak(v11);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v18, 8);
}

void sub_10071DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_10071DBE4(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  dispatch_time_t v4;
  _QWORD v5[5];
  id v6;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "setMapDisplayStyleForAllLayers:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 36) << 32));

  v4 = dispatch_time(0, 5000000000);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071DCB8;
  v5[3] = &unk_1011BEF90;
  objc_copyWeak(&v6, v2);
  v5[4] = *(_QWORD *)(a1 + 40);
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, v5);
  objc_destroyWeak(&v6);
}

void sub_10071DCB8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setMapDisplayStyleForAllLayers:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 36) << 32));

}

void sub_10071DD04(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugCheckmarkRowsGroup *v7;

  v7 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("None"), &off_10126E908);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Day"), &off_10126E920);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Night"), &off_10126E950);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Transit"), &off_10126E938);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("TransitRoute"), &off_10126EA88);

}

id sub_10071DDC4(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v1, "mapDisplayStyleOverride")));

  return v2;
}

void sub_10071DE18(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned int *v6;
  id WeakRetained;
  id v8;

  v3 = (int)objc_msgSend(a2, "intValue");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setMapDisplayStyleOverride:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v6 = (unsigned int *)objc_msgSend(v5, "displayStyleOverride");

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (v6)
    objc_msgSend(WeakRetained, "enableMapDisplayStyleOverrideForAllLayers:", *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32));
  else
    objc_msgSend(WeakRetained, "disableMapDisplayStyleOverrideForAllLayers");

}

void sub_10071DEB8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10071DF8C;
  v6[3] = &unk_1011AEAC8;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Performance"), v6);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Performance Test"), &stru_1011C2080);
  objc_destroyWeak(&v7);

}

void sub_10071DF74(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071DF8C(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:key:", v5, CFSTR("Layout Continuously"), CFSTR("debugLayoutContinuously"));

}

void sub_10071DFEC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v3, "addNavigationRowForViewControllerClass:", objc_opt_class(PerformanceDebugController));

}

void sub_10071E030(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "_mapLayer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "camera"));
  objc_msgSend(v6, "centerCoordinate");
  v9 = v8;
  objc_msgSend(v6, "centerCoordinate");
  v11 = v10;
  objc_msgSend(v7, "altitude");
  v13 = v12;
  objc_msgSend(v6, "pitch");
  v15 = v14;
  objc_msgSend(v6, "yaw");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapURLBuilder URLForCameraAt:altitude:rotation:tilt:roll:](GEOMapURLBuilder, "URLForCameraAt:altitude:rotation:tilt:roll:", v9, v11, v13, v15, v16, 0.0));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "absoluteString"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
  objc_msgSend(v19, "setString:", v18);

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Alert"), CFSTR("View encoded URL copied to clipboard"), 1));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, &stru_1011C20A0));
  objc_msgSend(v20, "addAction:", v21);
  v22 = objc_loadWeakRetained(v1);
  objc_msgSend(v22, "presentViewController:animated:completion:", v20, 1, 0);

}

void sub_10071E218(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void **v8;
  uint64_t v9;
  void (*v10)(id *, void *);
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Features Controller"), &stru_1011C20C0);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10071E3BC;
  v13[3] = &unk_1011AEAC8;
  objc_copyWeak(&v14, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Paint"), v13);
  v8 = _NSConcreteStackBlock;
  v9 = 3221225472;
  v10 = sub_10071E6F0;
  v11 = &unk_1011AEAC8;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("UTL"), &v8);
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Floating debug view"), &stru_1011C20E0, v8, v9, v10, v11);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v14);

}

void sub_10071E350(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071E378(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v3, "addNavigationRowForViewControllerClass:", objc_opt_class(VectorKitDebugRenderController));

}

void sub_10071E3BC(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;

  v35 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Road Tile Boundaries"), CFSTR("paintRoadBoundaries"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("POI Tiles"), CFSTR("paintPoiTiles"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Point Tiles"), CFSTR("paintPointTiles"));

  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Road Tiles"), CFSTR("paintRoadTiles"));

  v11 = objc_loadWeakRetained(a1);
  v12 = objc_msgSend(v11, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Polygon Tiles"), CFSTR("paintPolygonTiles"));

  v13 = objc_loadWeakRetained(a1);
  v14 = objc_msgSend(v13, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Topographic Tiles"), CFSTR("paintTopographicTiles"));

  v15 = objc_loadWeakRetained(a1);
  v16 = objc_msgSend(v15, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Landcover Tiles"), CFSTR("paintLandcoverTiles"));

  v17 = objc_loadWeakRetained(a1);
  v18 = objc_msgSend(v17, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Venues Tiles"), CFSTR("paintVenues"));

  v19 = objc_loadWeakRetained(a1);
  v20 = objc_msgSend(v19, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Vertices"), CFSTR("paintVertices"));

  v21 = objc_loadWeakRetained(a1);
  v22 = objc_msgSend(v21, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Junctions"), CFSTR("paintJunctions"));

  v23 = objc_loadWeakRetained(a1);
  v24 = objc_msgSend(v23, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Coastlines"), CFSTR("paintCoastlines"));

  v25 = objc_loadWeakRetained(a1);
  v26 = objc_msgSend(v25, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Buildings"), CFSTR("paintBuildings"));

  v27 = objc_loadWeakRetained(a1);
  v28 = objc_msgSend(v27, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Transit"), CFSTR("drawDebugTransit"));

  v29 = objc_loadWeakRetained(a1);
  v30 = objc_msgSend(v29, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Paint Map Tiles"), CFSTR("paintMapTiles"));

  v31 = objc_loadWeakRetained(a1);
  v32 = objc_msgSend(v31, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Paint Selected Map Tiles"), CFSTR("paintSelectedMapTiles"));

  v33 = objc_loadWeakRetained(a1);
  v34 = objc_msgSend(v33, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v35, CFSTR("Download Reason"), CFSTR("paintLoadReason"));

}

void sub_10071E6F0(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v13 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v13, CFSTR("KeysInView"), CFSTR("paintKeysInView"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v13, CFSTR("S2KeysInView"), CFSTR("paintS2KeysInView"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v13, CFSTR("RoadTileData"), CFSTR("paintRoadTileData"));

  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v13, CFSTR("PolygonLayerData"), CFSTR("paintPolygonLayerData"));

  v11 = objc_loadWeakRetained(a1);
  v12 = objc_msgSend(v11, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v13, CFSTR("StandardLabelMapData"), CFSTR("paintStandardLabelMapData"));

}

void sub_10071E814(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Show floating debug view"), &stru_1011C2100, &stru_1011C2120);
}

BOOL sub_10071E84C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VectorKitFloatingDebugViewController sharedInstance](VectorKitFloatingDebugViewController, "sharedInstance"));
  v2 = objc_msgSend(v1, "isAttached");

  return v2;
}

void sub_10071E888(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VectorKitFloatingDebugViewController sharedInstance](VectorKitFloatingDebugViewController, "sharedInstance"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "attach");
  else
    objc_msgSend(v3, "detach");

}

void sub_10071E8D4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10071E984;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Console"), v5);
  objc_destroyWeak(&v6);

}

void sub_10071E970(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071E984(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  id v16;
  id obj;
  _QWORD v18[5];
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v3 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_mapLayer"));

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "activeLogics"));
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "name"));
        v18[4] = v14;
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_10071EB88;
        v19[3] = &unk_1011AEB50;
        v19[4] = v14;
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_10071EBD8;
        v18[3] = &unk_1011AE8F8;
        v16 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", v15, v19, v18);

      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v11);
  }

}

id sub_10071EB88(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v3 = objc_msgSend(v2, "isLogicConsoleEnabled:", objc_msgSend(*(id *)(a1 + 32), "identifier"));

  return v3;
}

void sub_10071EBD8(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setLogicConsole:enabled:", objc_msgSend(*(id *)(a1 + 32), "identifier"), a2);

}

void sub_10071EC30(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;

  v3 = a2;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10071EEE8;
  v20[3] = &unk_1011B4F90;
  objc_copyWeak(&v22, (id *)(a1 + 40));
  v21 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Label Highlighting"), v20);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10071F43C;
  v18[3] = &unk_1011AEAC8;
  objc_copyWeak(&v19, (id *)(a1 + 40));
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Labels"), v18);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10071F868;
  v16[3] = &unk_1011AEAC8;
  objc_copyWeak(&v17, (id *)(a1 + 40));
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Labels - Display"), v16);
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Nav Labels"), &stru_1011C2240);
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Traffic Feature Nav Labels"), &stru_1011C2420);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100720A50;
  v13[3] = &unk_1011B4F90;
  objc_copyWeak(&v15, (id *)(a1 + 40));
  v14 = *(id *)(a1 + 32);
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Texture Atlas"), v13);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100720D18;
  v11[3] = &unk_1011AEAC8;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  v10 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Label Animations"), v11);
  objc_destroyWeak(&v12);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&v19);

  objc_destroyWeak(&v22);
}

void sub_10071EE90(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v5);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071EEE8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  id WeakRetained;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[4];
  id v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  _QWORD v37[4];
  id v38;
  _QWORD v39[4];
  id v40;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MIController sharedController](MIController, "sharedController"));
  v5 = objc_msgSend(v4, "isActive");

  if (v5)
  {
    objc_msgSend(v3, "setFooter:", CFSTR("Label Highlighting is being controlled by MapInspector. Please use an external tool to control this value or disable MapInspector (MapDisplay -> MapInspector -> Activate Map Inspector)"));
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Label Highlighting"), CFSTR("labelHighlighting"));

    v8 = objc_loadWeakRetained((id *)(a1 + 40));
    v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Lock Highlighting"), CFSTR("lockLabelHighlighting"));

    v10 = objc_loadWeakRetained((id *)(a1 + 40));
    v11 = objc_msgSend(v10, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Client Style Attrs"), CFSTR("showClientStyleAttributes"));

    v12 = objc_loadWeakRetained((id *)(a1 + 40));
    v13 = objc_msgSend(v12, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Flex Zones"), CFSTR("showFlexZoneRanges"));

    v14 = objc_loadWeakRetained((id *)(a1 + 40));
    v15 = objc_msgSend(v14, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Label Counts"), CFSTR("paintLabelCounts"));

    v16 = objc_loadWeakRetained((id *)(a1 + 40));
    v17 = objc_msgSend(v16, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show GRL Debug Info"), CFSTR("showGRLDebugInfo"));

    v18 = objc_loadWeakRetained((id *)(a1 + 40));
    v19 = objc_msgSend(v18, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Overlay Text Console"), CFSTR("disableOverlayTextConsole"));

    v20 = objc_loadWeakRetained((id *)(a1 + 40));
    v21 = objc_msgSend(v20, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Highlight Transit Features Only"), CFSTR("labelHighlightingTransitFeaturesOnly"));

    v22 = objc_loadWeakRetained((id *)(a1 + 40));
    v23 = objc_msgSend(v22, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Verbose Logging"), CFSTR("labelHighlightingVerboseLoggingEnabled"));

    v24 = objc_loadWeakRetained((id *)(a1 + 40));
    v25 = objc_msgSend(v24, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Road Features"), CFSTR("paintLabelRoadFeatures"));

    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_10071F2E8;
    v39[3] = &unk_1011B4F08;
    v40 = *(id *)(a1 + 32);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10071F330;
    v37[3] = &unk_1011AE420;
    v38 = *(id *)(a1 + 32);
    v26 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Selected Labeler Output"), CFSTR("Index"), 1, v39, v37);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_10071F35C;
    v35[3] = &unk_1011B4F08;
    v36 = *(id *)(a1 + 32);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10071F3A0;
    v33[3] = &unk_1011AE420;
    v34 = *(id *)(a1 + 32);
    v27 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Overlay Horizontal Offset"), CFSTR("Offset"), 1, v35, v33);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10071F3CC;
    v31[3] = &unk_1011B4F08;
    v32 = *(id *)(a1 + 32);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10071F410;
    v29[3] = &unk_1011AE420;
    v30 = *(id *)(a1 + 32);
    v28 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Overlay Vertical Offset"), CFSTR("Offset"), 1, v31, v29);

  }
}

NSString *sub_10071F2E8(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "labelerOutputIndex"));
}

id sub_10071F330(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setLabelerOutputIndex:", objc_msgSend(a2, "intValue"));
}

NSString *sub_10071F35C(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "debugOverlayOffsetX"));
}

id sub_10071F3A0(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setDebugOverlayOffsetX:", objc_msgSend(a2, "intValue"));
}

NSString *sub_10071F3CC(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "debugOverlayOffsetY"));
}

id sub_10071F410(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setDebugOverlayOffsetY:", objc_msgSend(a2, "intValue"));
}

void sub_10071F43C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Occlusion"), CFSTR("labelOcclusionDisabled"));

  v6 = objc_loadWeakRetained(v2);
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Facing Cull"), CFSTR("labelFacingCullDisabled"));

  v8 = objc_loadWeakRetained(v2);
  v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Deduping"), CFSTR("labelDedupingDisabled"));

  v10 = objc_loadWeakRetained(v2);
  v11 = objc_msgSend(v10, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Collision"), CFSTR("labelCollisionDisabled"));

  v12 = objc_loadWeakRetained(v2);
  v13 = objc_msgSend(v12, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Collide Continuously"), CFSTR("labelCollideContinuously"));

  v14 = objc_loadWeakRetained(v2);
  v15 = objc_msgSend(v14, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Collision Lines"), CFSTR("paintLabelCollisionLines"));

  v16 = objc_loadWeakRetained(v2);
  v17 = objc_msgSend(v16, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Transit-Line Collision"), CFSTR("labelTransitLineCollisionEnabled"));

  v18 = objc_loadWeakRetained(v2);
  v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Flip Alternate Positions"), CFSTR("labelFlipAlternatePositionsEnable")));

  objc_msgSend(v39, "setSubtitle:", CFSTR("Needs Cache Flush"));
  v19 = objc_loadWeakRetained(v2);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Label-Tile Decode"), CFSTR("labelTileDecodeEnabled")));

  objc_msgSend(v20, "setSubtitle:", CFSTR("Needs Cache Flush"));
  v21 = objc_loadWeakRetained(v2);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Allow Default Style"), CFSTR("labelAllowDefaultStyle")));

  objc_msgSend(v22, "setSubtitle:", CFSTR("Needs Cache Flush"));
  v23 = objc_loadWeakRetained(v2);
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Use Default Style"), CFSTR("labelUseDefaultStyle")));

  objc_msgSend(v24, "setSubtitle:", CFSTR("Needs Cache Flush"));
  v25 = objc_loadWeakRetained(v2);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Allow Default Icon"), CFSTR("labelAllowDefaultIcon")));

  objc_msgSend(v26, "setSubtitle:", CFSTR("Needs Cache Flush"));
  v27 = objc_loadWeakRetained(v2);
  v28 = objc_msgSend(v27, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Update MapTiles During Continuous Layout"), CFSTR("labelUpdateMapTilesContinuously"));

  v29 = objc_loadWeakRetained(v2);
  v30 = objc_msgSend(v29, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Background Layout Disabled"), CFSTR("disableBackgroundLabelLayout"));

  v31 = objc_loadWeakRetained(v2);
  v32 = objc_msgSend(v31, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Auto Road Text Offsetting"), CFSTR("labelAutoOffsetRoadText"));

  v33 = objc_loadWeakRetained(v2);
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Client Style Overrides"), CFSTR("labelStyleOverridesDisabled")));

  objc_msgSend(v34, "setSubtitle:", CFSTR("Needs Maps Restart"));
  v35 = objc_loadWeakRetained(v2);
  v36 = objc_msgSend(v35, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Debug Hover Layers"), CFSTR("labelDebugHoverLayers"));

  v37 = objc_loadWeakRetained(v2);
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable POI Updates"), CFSTR("labelPOIUpdatesDisabled")));

  objc_msgSend(v38, "setSubtitle:", CFSTR("Needs Cache Flush"));
}

void sub_10071F868(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  double v21;
  double v22;
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[4];
  id v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36[2];

  v3 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Hide Line Features"), CFSTR("labelHideLineFeatures"));

  v6 = objc_loadWeakRetained(a1);
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Hide Point Features"), CFSTR("labelHidePointFeatures"));

  v8 = objc_loadWeakRetained(a1);
  v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Hide Physical Features"), CFSTR("labelHidePhysicalFeatures"));

  v10 = objc_loadWeakRetained(a1);
  v11 = objc_msgSend(v10, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Hide Directional Arrows"), CFSTR("hideDirectionalArrows"));

  v12 = objc_loadWeakRetained(a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Allow Textless POIs"), CFSTR("textlessPOIsEnabled")));

  objc_msgSend(v13, "setSubtitle:", CFSTR("Needs cache flush"));
  LODWORD(v14) = 14.0;
  LODWORD(v15) = 25.0;
  v16 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Textless POIs Min Zoom (Flush cache after changing)"), CFSTR("Min Zoom: %1.2f"), &stru_1011C2140, &stru_1011C2160, v14, v15);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_10071FD50;
  v35[3] = &unk_1011AD4F0;
  objc_copyWeak(v36, a1);
  v17 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable SDF Glyphs"), &stru_1011C2180, v35);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10071FE54;
  v33[3] = &unk_1011AD4F0;
  objc_copyWeak(&v34, a1);
  v18 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable SDF Glyph Super Sampling"), &stru_1011C21A0, v33);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_10071FF58;
  v31[3] = &unk_1011AD4F0;
  objc_copyWeak(&v32, a1);
  v19 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Override SDF Glyph Super Sample Kernel Size"), &stru_1011C21C0, v31);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10072005C;
  v29[3] = &unk_1011AD4F0;
  objc_copyWeak(&v30, a1);
  v20 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Override SDF Glyph Upscaling"), &stru_1011C21E0, v29);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100720168;
  v27[3] = &unk_1011C1BD0;
  objc_copyWeak(&v28, a1);
  LODWORD(v21) = 1.0;
  LODWORD(v22) = 8.0;
  v23 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SDF Glyph Shader Upscale Factor"), CFSTR("%1.2f"), &stru_1011C2200, v27, v21, v22);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100720278;
  v25[3] = &unk_1011AD4F0;
  objc_copyWeak(&v26, a1);
  v24 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable RTEVChargerInfo"), &stru_1011C2220, v25);
  objc_destroyWeak(&v26);
  objc_destroyWeak(&v28);
  objc_destroyWeak(&v30);
  objc_destroyWeak(&v32);
  objc_destroyWeak(&v34);
  objc_destroyWeak(v36);

}

void sub_10071FC28(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;

  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10071FC84()
{
  JUMPOUT(0x10071FC74);
}

float sub_10071FC8C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "textlessPOIsMinZoom");
  v3 = v2;

  return v3;
}

void sub_10071FCD0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setTextlessPOIsMinZoom:", v3);

}

BOOL sub_10071FD14(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "shouldUseSDFGlyphs");

  return v2;
}

void sub_10071FD50(uint64_t a1, uint64_t a2)
{
  void *v4;
  id *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setShouldUseSDFGlyphs:", a2);

  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

}

BOOL sub_10071FE18(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "shouldUseSDFSuperSampling");

  return v2;
}

void sub_10071FE54(uint64_t a1, uint64_t a2)
{
  void *v4;
  id *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setShouldUseSDFSuperSampling:", a2);

  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

}

BOOL sub_10071FF1C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "shouldOverrideSuperSampleKernelSize");

  return v2;
}

void sub_10071FF58(uint64_t a1, uint64_t a2)
{
  void *v4;
  id *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setShouldOverrideSuperSampleKernelSize:", a2);

  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

}

BOOL sub_100720020(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "shouldOverrideUpscaleFactor");

  return v2;
}

void sub_10072005C(uint64_t a1, uint64_t a2)
{
  void *v4;
  id *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setShouldOverrideUpscaleFactor:", a2);

  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

}

float sub_100720124(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "sdfGlyphShaderUpscaleFactor");
  v3 = v2;

  return v3;
}

void sub_100720168(uint64_t a1, float a2)
{
  void *v4;
  float v5;
  unsigned int v6;
  id *v7;
  id WeakRetained;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  id v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "sdfGlyphShaderUpscaleFactor");
  v6 = v5;

  if (v6 != a2)
  {
    v7 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    v10 = objc_loadWeakRetained(v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allVisibleMapViewsForDebugController:", v10));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
    objc_msgSend(v13, "setNeedsLayout");

  }
  v15 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v14 = a2;
  objc_msgSend(v15, "setSdfGlyphShaderUpscaleFactor:", v14);

}

BOOL sub_100720268(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_EnableRTEVChargerInfo[0], VectorKitDebugConfig_EnableRTEVChargerInfo[1]);
}

void sub_100720278(id *a1, uint64_t a2)
{
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  _UNKNOWN **v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  GEOConfigSetSyncBOOL(VectorKitDebugConfig_EnableRTEVChargerInfo[0], VectorKitDebugConfig_EnableRTEVChargerInfo[1], a2);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
    if ((_DWORD)a2)
      v11 = &off_101273B30;
    else
      v11 = 0;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_mapLayer"));
        objc_msgSend(v14, "setShowsLiveEVData:", a2);

        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_mapLayer"));
        objc_msgSend(v15, "setSupportedEVConnectorTypes:", v11);

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_mapLayer"));
        objc_msgSend(v16, "setNeedsLayout");

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v9);
  }

}

void sub_100720428(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v9 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Show Nav State"), &stru_1011C2260, &stru_1011C2280);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Show RouteLine Labeling State"), &stru_1011C22A0, &stru_1011C22C0);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Show Roadsign Labeling Overlay"), &stru_1011C22E0, &stru_1011C2300);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Show Route POI Text Avoidance Line"), &stru_1011C2320, &stru_1011C2340);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Enable RoadSign Orientation Debugging"), &stru_1011C2360, &stru_1011C2380);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Disable RoadSign Limit"), &stru_1011C23A0, &stru_1011C23C0);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v9, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Roadsign Artwork Debugging"), &stru_1011C23E0, &stru_1011C2400);

}

BOOL sub_100720560(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "showLabelsNavState");

  return v2;
}

void sub_10072059C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setShowLabelsNavState:", v2);

}

BOOL sub_1007205E0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableRouteLineLabelingDebugging");

  return v2;
}

void sub_10072061C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableRouteLineLabelingDebugging:", v2);

}

BOOL sub_100720660(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "showNavLabelOverlay");

  return v2;
}

void sub_10072069C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setShowNavLabelOverlay:", v2);

}

BOOL sub_1007206E0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "showNavLabelRouteAvoidanceOverlay");

  return v2;
}

void sub_10072071C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setShowNavLabelRouteAvoidanceOverlay:", v2);

}

BOOL sub_100720760(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableNavRoadSignOrientationDebugging");

  return v2;
}

void sub_10072079C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableNavRoadSignOrientationDebugging:", v2);

}

BOOL sub_1007207E0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "disableRoadSignLimit");

  return v2;
}

void sub_10072081C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setDisableRoadSignLimit:", v2);

}

BOOL sub_100720860(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableRoadSignArtworkDebugging");

  return v2;
}

void sub_10072089C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableRoadSignArtworkDebugging:", v2);

}

void sub_1007208E0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v4, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Overlay"), &stru_1011C2440, &stru_1011C2460);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v4, "addSwitchRowWithTitle:get:set:", CFSTR("Disable Route Annotation Limit"), &stru_1011C2480, &stru_1011C24A0);

}

BOOL sub_100720950(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableTrafficFeatureLabelDebugging");

  return v2;
}

void sub_10072098C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableTrafficFeatureLabelDebugging:", v2);

}

BOOL sub_1007209D0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "disableRouteAnnotationLimit");

  return v2;
}

void sub_100720A0C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setDisableRouteAnnotationLimit:", v2);

}

void sub_100720A50(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Texture Atlas for Icons"), CFSTR("disableIconTextureAtlas")));

  objc_msgSend(v5, "setSubtitle:", CFSTR("Needs Maps Restart"));
  v6 = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Texture Atlas Debug Display"), CFSTR("displayTextureAtlas"));

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100720C30;
  v16[3] = &unk_1011B4F08;
  v17 = *(id *)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100720C78;
  v14[3] = &unk_1011AE420;
  v15 = *(id *)(a1 + 32);
  v8 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Selected Atlas"), CFSTR("Index"), 1, v16, v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100720CA4;
  v12[3] = &unk_1011B4F08;
  v13 = *(id *)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100720CEC;
  v10[3] = &unk_1011AE420;
  v11 = *(id *)(a1 + 32);
  v9 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Displayed Page Index"), CFSTR("Index"), 1, v12, v10);

}

NSString *sub_100720C30(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "textureAtlasIndex"));
}

id sub_100720C78(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setTextureAtlasIndex:", objc_msgSend(a2, "intValue"));
}

NSString *sub_100720CA4(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "textureAtlasPageIndex"));
}

id sub_100720CEC(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setTextureAtlasPageIndex:", (unsigned __int16)objc_msgSend(a2, "intValue"));
}

void sub_100720D18(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v6, CFSTR("Enable Ring Animation"), CFSTR("labelRingAnimationEnabled"));

  v5 = objc_msgSend(v6, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Label Animation Tuning"), &stru_1011C24C0);
}

void sub_100720D98(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  Block_layout *v12;
  _QWORD v13[4];
  Block_layout *v14;
  _QWORD v15[4];
  Block_layout *v16;
  _QWORD v17[4];
  Block_layout *v18;
  _QWORD v19[4];
  Block_layout *v20;
  _QWORD v21[4];
  Block_layout *v22;

  v2 = a2;
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Settings"), &stru_1011C24E0);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Element"), &stru_1011C2580);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10072168C;
  v21[3] = &unk_1011C26E8;
  v22 = &stru_1011C2620;
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Hide - Alpha"), v21);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1007216F8;
  v19[3] = &unk_1011C26E8;
  v20 = &stru_1011C2620;
  v6 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Hide - Scale"), v19);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100721764;
  v17[3] = &unk_1011C26E8;
  v18 = &stru_1011C2620;
  v7 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Hide - Translate"), v17);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007217D0;
  v15[3] = &unk_1011C26E8;
  v16 = &stru_1011C2620;
  v8 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Show - Alpha"), v15);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10072183C;
  v13[3] = &unk_1011C26E8;
  v14 = &stru_1011C2620;
  v9 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Show - Scale"), v13);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1007218A8;
  v11[3] = &unk_1011C26E8;
  v12 = &stru_1011C2620;
  v10 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Show - Translate"), v11);

}

void sub_100720FA0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v4, "addSwitchRowWithTitle:get:set:", CFSTR("Enable"), &stru_1011C2500, &stru_1011C2520);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v4, "addSwitchRowWithTitle:get:set:", CFSTR("Modify Foward Animation"), &stru_1011C2540, &stru_1011C2560);

}

BOOL sub_100721010(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableLabelAnimationTuning");

  return v2;
}

void sub_10072104C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableLabelAnimationTuning:", v2);

}

BOOL sub_100721090(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "tuneForwardLabelAnimation");

  return v2;
}

void sub_1007210CC(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setTuneForwardLabelAnimation:", v2);

}

void sub_100721110(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:get:set:](a2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C25A0, &stru_1011C25C0, &stru_1011C25E0);
}

void sub_100721148(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Icon"), &off_10126E980);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Text"), &off_10126E998);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Annotation"), &off_10126E9B0);

}

id sub_1007211C8(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "labelAnimationTuningElement")));

  return v2;
}

void sub_10072121C(id a1, id a2)
{
  id v2;
  id v3;

  v2 = objc_msgSend(a2, "unsignedIntegerValue");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setLabelAnimationTuningElement:", v2);

}

void sub_100721268(id a1, MapsDebugTableSection *a2, VKDebugLabelAnimationItemParameters *a3)
{
  MapsDebugTableSection *v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  id v13;
  id v14;
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];

  v4 = a2;
  v21[4] = a3;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100721440;
  v22[3] = &unk_1011C2640;
  v22[4] = a3;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10072144C;
  v21[3] = &unk_1011C2660;
  LODWORD(v5) = -3.0;
  LODWORD(v6) = 3.0;
  v7 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v4, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Start Delay"), CFSTR("%1.2f"), v22, v21, v5, v6);
  v19[4] = a3;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100721458;
  v20[3] = &unk_1011C2640;
  v20[4] = a3;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100721464;
  v19[3] = &unk_1011C2660;
  LODWORD(v8) = 0;
  LODWORD(v9) = 3.0;
  v10 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v4, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Delay"), CFSTR("%1.2f"), v20, v19, v8, v9);
  v17[4] = a3;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100721470;
  v18[3] = &unk_1011C2640;
  v18[4] = a3;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10072147C;
  v17[3] = &unk_1011C2660;
  LODWORD(v11) = 0;
  LODWORD(v12) = 3.0;
  v13 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v4, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Duration"), CFSTR("%1.2f"), v18, v17, v11, v12);
  v15[4] = a3;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100721648;
  v16[3] = &unk_1011C26A0;
  v16[4] = a3;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100721660;
  v15[3] = &unk_1011C26C0;
  v14 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:get:set:](v4, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C2680, v16, v15);

}

float sub_100721440(uint64_t a1)
{
  return **(float **)(a1 + 32);
}

uint64_t sub_10072144C(uint64_t result, float a2)
{
  **(float **)(result + 32) = a2;
  return result;
}

float sub_100721458(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 32) + 4);
}

uint64_t sub_100721464(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 32) + 4) = a2;
  return result;
}

float sub_100721470(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 32) + 8);
}

uint64_t sub_10072147C(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 32) + 8) = a2;
  return result;
}

void sub_100721488(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  MapsDebugCheckmarkRowsGroup *v15;

  v15 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("None"), &off_10126E980);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("Zero"), &off_10126E998);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("One"), &off_10126E9B0);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("Linear"), &off_10126E9C8);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("QuadIn"), &off_10126E9E0);
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("QuadOut"), &off_10126EA10);
  v8 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("QuadInOut"), &off_10126E968);
  v9 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("CubicIn"), &off_10126E9F8);
  v10 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("CubicOut"), &off_10126EAB8);
  v11 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("CubicInOut"), &off_10126EAD0);
  v12 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("BounceOut"), &off_10126EAE8);
  v13 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("BackIn"), &off_10126EA28);
  v14 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v15, "addRowWithTitle:value:", CFSTR("BackOut"), &off_10126EB00);

}

NSNumber *sub_100721648(uint64_t a1)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
}

id sub_100721660(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "unsignedIntegerValue");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = result;
  return result;
}

void sub_10072168C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, objc_msgSend(v4, "hideLabelAnimationParams"));

}

void sub_1007216F8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  (*(void (**)(uint64_t, id, char *))(v2 + 16))(v2, v3, (char *)objc_msgSend(v4, "hideLabelAnimationParams") + 24);

}

void sub_100721764(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  (*(void (**)(uint64_t, id, char *))(v2 + 16))(v2, v3, (char *)objc_msgSend(v4, "hideLabelAnimationParams") + 48);

}

void sub_1007217D0(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, objc_msgSend(v4, "showLabelAnimationParams"));

}

void sub_10072183C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  (*(void (**)(uint64_t, id, char *))(v2 + 16))(v2, v3, (char *)objc_msgSend(v4, "showLabelAnimationParams") + 24);

}

void sub_1007218A8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  (*(void (**)(uint64_t, id, char *))(v2 + 16))(v2, v3, (char *)objc_msgSend(v4, "showLabelAnimationParams") + 48);

}

void sub_100721914(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007219C4;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Transit"), v5);
  objc_destroyWeak(&v6);

}

void sub_1007219B0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007219C4(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v17 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v17, CFSTR("Transit Highlighting"), CFSTR("transitHighlighting"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v17, CFSTR("Show Transit Counts"), CFSTR("paintTransitCounts"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v17, CFSTR("Disable Transit Line Drawing"), CFSTR("disableTransitLineDrawing"));

  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v17, CFSTR("Disable Transit Line Merging"), CFSTR("disableTransitLineMerging"));

  v11 = objc_loadWeakRetained(a1);
  v12 = objc_msgSend(v11, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v17, CFSTR("  Disable Transit Line Group Merging"), CFSTR("disableTransitLineGroupMerging"));

  v13 = objc_loadWeakRetained(a1);
  v14 = objc_msgSend(v13, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v17, CFSTR("Dump Transit Tile Contents"), CFSTR("dumpTransitTileContents"));

  v15 = objc_loadWeakRetained(a1);
  v16 = objc_msgSend(v15, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v17, CFSTR("Disable Intra-Link Line Crossings"), CFSTR("disableIntraLinkTransitLineCrossings"));

}

void sub_100721B48(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;

  v3 = a2;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100721E90;
  v28[3] = &unk_1011AEAC8;
  objc_copyWeak(&v29, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Labeling"), v28);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100722184;
  v26[3] = &unk_1011AEAC8;
  objc_copyWeak(&v27, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Scenes"), v26);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10072251C;
  v24[3] = &unk_1011AEAC8;
  objc_copyWeak(&v25, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Modes"), v24);
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("ForceLayoutType"), &stru_1011C2768);
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("DebugScene"), &stru_1011C27E8);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100722FC0;
  v22[3] = &unk_1011AEAC8;
  objc_copyWeak(&v23, (id *)(a1 + 32));
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("AR"), v22);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100723114;
  v20[3] = &unk_1011AEAC8;
  objc_copyWeak(&v21, (id *)(a1 + 32));
  v10 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Avoidance"), v20);
  v15 = _NSConcreteStackBlock;
  v16 = 3221225472;
  v17 = sub_1007231A8;
  v18 = &unk_1011AEAC8;
  objc_copyWeak(&v19, (id *)(a1 + 32));
  v11 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Camera"), &v15);
  v12 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Label Styling"), &stru_1011C29C8, v15, v16, v17, v18);
  v13 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Debug Animation Settings"), &stru_1011C2BE8);
  v14 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Debug Minimap"), &stru_1011C2F48);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&v23);
  objc_destroyWeak(&v25);
  objc_destroyWeak(&v27);
  objc_destroyWeak(&v29);

}

void sub_100721E24(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;

  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100721E90(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;

  v3 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show debug labeling state"), CFSTR("arLabelingStateOverlay"));

  v6 = objc_loadWeakRetained(a1);
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show debug miniMap"), CFSTR("arDebugMiniMap"));

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10072207C;
  v15[3] = &unk_1011AD4F0;
  objc_copyWeak(&v16, a1);
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Force Occluded Styling (delayed)"), &stru_1011C2708, v15);
  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Force labels view oriented"), CFSTR("arForceLabelsViewOriented"));

  v11 = objc_loadWeakRetained(a1);
  v12 = objc_msgSend(v11, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Always show one Continue"), CFSTR("arAlwaysShowOneContinueLabel"));

  v13 = objc_loadWeakRetained(a1);
  v14 = objc_msgSend(v13, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Environment Map (requires AR session restart)"), CFSTR("arEnableEnvironmentMap"));

  objc_destroyWeak(&v16);
}

void sub_100722028(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100722040(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "arForceOccludedStyling");

  return v2;
}

void sub_10072207C(uint64_t a1, char a2)
{
  dispatch_time_t v4;
  _QWORD v5[4];
  id v6;
  char v7;

  v4 = dispatch_time(0, 2000000000);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100722120;
  v5[3] = &unk_1011AD388;
  v7 = a2;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, v5);
  objc_destroyWeak(&v6);
}

void sub_100722120(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setArForceOccludedStyling:", v2);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

void sub_100722184(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10072230C;
  v7[3] = &unk_1011B4E90;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007223C8;
  v5[3] = &unk_1011B4EB8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C2728, v7, v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&v8);

}

void sub_100722270(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10072228C(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("AppProvided"), &off_10126E980);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("DebugRoute"), &off_10126E998);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("DebugCustom"), &off_10126E9B0);

}

id sub_10072230C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v7, "arSceneType")));
  return v8;
}

void sub_1007223C8(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = objc_msgSend(a2, "integerValue");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v11), "_mapLayer"));
        objc_msgSend(v12, "setARSceneType:", v3);

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

}

void sub_10072251C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10072276C;
  v17[3] = &unk_1011B4E90;
  objc_copyWeak(&v18, (id *)(a1 + 32));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100722828;
  v15[3] = &unk_1011B4EB8;
  objc_copyWeak(&v16, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C2748, v17, v15);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10072297C;
  v13[3] = &unk_1011AC860;
  v11 = v10;
  v14 = v11;
  v12 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Toggle AR (Debug)"), v13);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&v18);

}

void sub_1007226CC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007226EC(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("GeoTracking"), &off_10126E980);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("DebugRouteLocked"), &off_10126E998);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("DebugVIO"), &off_10126E9B0);

}

id sub_10072276C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v7, "arMode")));
  return v8;
}

void sub_100722828(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = objc_msgSend(a2, "integerValue");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v11), "_mapLayer"));
        objc_msgSend(v12, "setARMode:", v3);

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

}

id sub_10072297C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "mapType");
  if (v2 == 9)
    v3 = 0;
  else
    v3 = 9;
  v4 = 4 * (v2 != 9);
  objc_msgSend(*(id *)(a1 + 32), "setMapType:", v3);
  return objc_msgSend(*(id *)(a1 + 32), "setDesiredMapMode:", v4);
}

void sub_1007229C4(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:get:set:](a2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C2788, &stru_1011C27A8, &stru_1011C27C8);
}

void sub_1007229FC(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("FaceAligned"), &off_10126E980);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("FacePerpendicular"), &off_10126E998);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("None"), &off_10126E9B0);

}

id sub_100722A7C(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", objc_msgSend(v1, "arDebugSceneForcedLayoutType")));

  return v2;
}

void sub_100722AD0(id a1, id a2)
{
  unsigned __int8 v2;
  id v3;

  v2 = objc_msgSend(a2, "unsignedIntegerValue");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setArDebugSceneForcedLayoutType:", v2);

}

void sub_100722B1C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  double v3;
  double v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v9 = a2;
  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:get:set:](v9, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C2808, &stru_1011C2828, &stru_1011C2848);
  LODWORD(v3) = 1135869952;
  LODWORD(v4) = 0;
  v5 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v9, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Feature Heading"), CFSTR("%1.0f degrees"), &stru_1011C2868, &stru_1011C2888, v4, v3);
  v6 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v9, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Feature Distance"), CFSTR("meters"), 2, &stru_1011C28C8, &stru_1011C28E8);
  v7 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v9, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Feature Text"), CFSTR("meters"), 0, &stru_1011C2908, &stru_1011C2928);
  v8 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v9, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("poi-type"), CFSTR("209"), 1, &stru_1011C2948, &stru_1011C2968);

}

void sub_100722C44(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  MapsDebugCheckmarkRowsGroup *v4;

  v4 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Maneuver"), &off_10126E980);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v4, "addRowWithTitle:value:", CFSTR("Arrival"), &off_10126E998);

}

id sub_100722CA4(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", objc_msgSend(v1, "arDebugSceneFeatureType")));

  return v2;
}

void sub_100722CF8(id a1, id a2)
{
  unsigned __int8 v2;
  id v3;

  v2 = objc_msgSend(a2, "unsignedIntegerValue");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setArDebugSceneFeatureType:", v2);

}

float sub_100722D44(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugSceneFeatureHeading");
  v3 = v2;

  return v3;
}

void sub_100722D88(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugSceneFeatureHeading:", v3);

}

NSString *__cdecl sub_100722DCC(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugSceneFeatureDistance");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100722E34(id a1, NSString *a2)
{
  int v2;
  int v3;
  double v4;
  id v5;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v4) = v3;
  objc_msgSend(v5, "setArDebugSceneFeatureDistance:", v4);

}

NSString *__cdecl sub_100722E80(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "arDebugSceneFeatureText"));

  return (NSString *)v2;
}

void sub_100722EC0(id a1, NSString *a2)
{
  NSString *v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setArDebugSceneFeatureText:", v2);

}

NSString *__cdecl sub_100722F10(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(v1, "arDebugScenePoiType")));

  return (NSString *)v2;
}

void sub_100722F74(id a1, NSString *a2)
{
  NSInteger v2;
  id v3;

  v2 = -[NSString integerValue](a2, "integerValue");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setArDebugScenePoiType:", v2);

}

void sub_100722FC0(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v15 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Enable AR Camera Feed"), CFSTR("arEnableCameraFeed"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Enable routeline debug meshes"), CFSTR("arEnableRouteLineDebugMeshes"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Lock in localizing"), CFSTR("arDebugLockLocalizingState"));

  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Show Mesh Feature Bounds"), CFSTR("arDebugDrawMeshFeatureBounds"));

  v11 = objc_loadWeakRetained(a1);
  v12 = objc_msgSend(v11, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Show Label Feature Bounds"), CFSTR("arDebugDrawLabelFeatureBounds"));

  v13 = objc_loadWeakRetained(a1);
  v14 = objc_msgSend(v13, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Enable Arrival Animation"), CFSTR("arIsArrivalAnimationEnabled"));

}

void sub_100723114(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;

  v7 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v7, CFSTR("Show AR avoidance objects"), CFSTR("arRenderAvoidanceObjects"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v7, CFSTR("Show AR avoidance intersection"), CFSTR("arRenderAvoidanceObjectsIntersection"));

}

void sub_1007231A8(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  double v5;
  double v6;
  id v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v8, CFSTR("Debug Overlay"), CFSTR("enableARCameraDebugOverlay"));

  LODWORD(v5) = -1035468800;
  LODWORD(v6) = 1112014848;
  v7 = objc_msgSend(v8, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Camera View Elevation Offset"), CFSTR("%1.2f meters"), &stru_1011C2988, &stru_1011C29A8, v5, v6);

}

float sub_100723248(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arCameraElevationOffset");
  v3 = v2;

  return v3;
}

void sub_10072328C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArCameraElevationOffset:", v3);

}

void sub_1007232D0(id a1, MapsDebugTableSection *a2)
{
  double v2;
  double v3;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  id v20;
  double v21;
  double v22;
  id v23;
  MapsDebugTableSection *v24;

  v24 = a2;
  LODWORD(v2) = 0;
  LODWORD(v3) = 1125515264;
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v24, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min Clip Distance"), CFSTR("%1.2f meters"), &stru_1011C29E8, &stru_1011C2A08, v2, v3);
  LODWORD(v5) = 0;
  LODWORD(v6) = 1125515264;
  v7 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v24, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max Clip Distance"), CFSTR("%1.2f meters"), &stru_1011C2A28, &stru_1011C2A48, v5, v6);
  LODWORD(v8) = 0;
  LODWORD(v9) = 25.0;
  v10 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v24, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Feature Elevation Offset"), CFSTR("%1.1f meters"), &stru_1011C2A68, &stru_1011C2A88, v8, v9);
  v11 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v24, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Feature Elevation Offset"), CFSTR("meters"), 2, &stru_1011C2AA8, &stru_1011C2AC8);
  LODWORD(v12) = 1036831949;
  LODWORD(v13) = 8.0;
  v14 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v24, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Base Scaling Factor"), CFSTR("%1.2f"), &stru_1011C2AE8, &stru_1011C2B08, v12, v13);
  LODWORD(v15) = 0.5;
  LODWORD(v16) = 4.0;
  v17 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v24, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("POI Scale"), CFSTR("%1.2f"), &stru_1011C2B28, &stru_1011C2B48, v15, v16);
  LODWORD(v18) = 0;
  LODWORD(v19) = 1.0;
  v20 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v24, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("POI Env Intensity"), CFSTR("%1.2f"), &stru_1011C2B68, &stru_1011C2B88, v18, v19);
  LODWORD(v21) = 0;
  LODWORD(v22) = 1.0;
  v23 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v24, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("POI Light Intensity"), CFSTR("%1.2f"), &stru_1011C2BA8, &stru_1011C2BC8, v21, v22);

}

float sub_1007234C0(id a1)
{
  return GEOConfigGetDouble(VectorKitConfig_ARLabelMinClipDistance[0], VectorKitConfig_ARLabelMinClipDistance[1]);
}

void sub_1007234E4(id a1, float a2)
{
  GEOConfigSetDouble(VectorKitConfig_ARLabelMinClipDistance[0], VectorKitConfig_ARLabelMinClipDistance[1], a2);
}

float sub_1007234F8(id a1)
{
  return GEOConfigGetDouble(VectorKitConfig_ARLabelMaxClipDistance[0], VectorKitConfig_ARLabelMaxClipDistance[1]);
}

void sub_10072351C(id a1, float a2)
{
  GEOConfigSetDouble(VectorKitConfig_ARLabelMaxClipDistance[0], VectorKitConfig_ARLabelMaxClipDistance[1], a2);
}

float sub_100723530(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arManeuverDebugElevationOffset");
  v3 = v2;

  return v3;
}

void sub_100723574(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArManeuverDebugElevationOffset:", v3);

}

NSString *__cdecl sub_1007235B8(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arManeuverDebugElevationOffset");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100723620(id a1, NSString *a2)
{
  int v2;
  int v3;
  double v4;
  id v5;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v4) = v3;
  objc_msgSend(v5, "setArManeuverDebugElevationOffset:", v4);

}

float sub_10072366C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugStylingBaseScalingFactor");
  v3 = v2;

  return v3;
}

void sub_1007236B0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugStylingBaseScalingFactor:", v3);

}

float sub_1007236F4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugStylingPOIIconScaleFactor");
  v3 = v2;

  return v3;
}

void sub_100723738(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugStylingPOIIconScaleFactor:", v3);

}

float sub_10072377C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugStylingPOIEnvMapIntensity");
  v3 = v2;

  return v3;
}

void sub_1007237C0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugStylingPOIEnvMapIntensity:", v3);

}

float sub_100723804(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugStylingPOILightIntensity");
  v3 = v2;

  return v3;
}

void sub_100723848(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugStylingPOILightIntensity:", v3);

}

void sub_10072388C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  MapsDebugTableSection *v15;

  v15 = a2;
  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Jump] - Offset"), CFSTR("2"), 2, &stru_1011C2C08, &stru_1011C2C28);
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Jump] - Duration"), CFSTR("1.25"), 2, &stru_1011C2C48, &stru_1011C2C68);
  v4 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Jump] - Start"), CFSTR("0"), 2, &stru_1011C2C88, &stru_1011C2CA8);
  v5 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Fall] - Offset"), CFSTR("0"), 2, &stru_1011C2CC8, &stru_1011C2CE8);
  v6 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Fall] - Duration"), CFSTR("1"), 2, &stru_1011C2D08, &stru_1011C2D28);
  v7 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Fall] - Start"), CFSTR("1.25"), 2, &stru_1011C2D48, &stru_1011C2D68);
  v8 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Rotate] - Offset"), CFSTR("2"), 2, &stru_1011C2D88, &stru_1011C2DA8);
  v9 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Rotate] - Duration"), CFSTR("2"), 2, &stru_1011C2DC8, &stru_1011C2DE8);
  v10 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Rotate] - Start"), CFSTR("0.15"), 2, &stru_1011C2E08, &stru_1011C2E28);
  v11 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Pulse] - Offset"), CFSTR("0.8"), 2, &stru_1011C2E48, &stru_1011C2E68);
  v12 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Pulse] - Duration"), CFSTR("0.5"), 2, &stru_1011C2E88, &stru_1011C2EA8);
  v13 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Pulse] - Start"), CFSTR("2"), 2, &stru_1011C2EC8, &stru_1011C2EE8);
  v14 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v15, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("[Pulse] - Repeats"), CFSTR("4"), 2, &stru_1011C2F08, &stru_1011C2F28);

}

NSString *__cdecl sub_100723B58(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arJumpOffset");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100723BC0(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArJumpOffset:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arJumpOffset");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIJumpOffset"));

}

NSString *__cdecl sub_100723C54(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arJumpDuration");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100723CBC(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArJumpDuration:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arJumpDuration");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIJumpDuration"));

}

NSString *__cdecl sub_100723D50(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arJumpStart");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100723DB8(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArJumpStart:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arJumpStart");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIJumpStart"));

}

NSString *__cdecl sub_100723E4C(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arFallOffset");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100723EB4(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArFallOffset:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arFallOffset");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIFallOffset"));

}

NSString *__cdecl sub_100723F48(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arFallDuration");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100723FB0(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArFallDuration:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arFallDuration");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIFallDuration"));

}

NSString *__cdecl sub_100724044(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arFallStart");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_1007240AC(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArFallStart:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arFallStart");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIFallStart"));

}

NSString *__cdecl sub_100724140(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arRotateOffset");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_1007241A8(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArRotateOffset:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arRotateOffset");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIRotateOffset"));

}

NSString *__cdecl sub_10072423C(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arRotateDuration");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_1007242A4(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArRotateDuration:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arRotateDuration");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIRotateDuration"));

}

NSString *__cdecl sub_100724338(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arRotateStart");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_1007243A0(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArRotateStart:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arRotateStart");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIRotateStart"));

}

NSString *__cdecl sub_100724434(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arPulseOffset");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_10072449C(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArPulseOffset:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arPulseOffset");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIPulseOffset"));

}

NSString *__cdecl sub_100724530(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arPulseDuration");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100724598(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArPulseDuration:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arPulseDuration");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIPulseDuration"));

}

NSString *__cdecl sub_10072462C(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arPulseStart");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100724694(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArPulseStart:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arPulseStart");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIPulseStart"));

}

NSString *__cdecl sub_100724728(id a1)
{
  void *v1;
  float v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arPulseNumberOfRepeats");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v2));

  return (NSString *)v3;
}

void sub_100724790(id a1, NSString *a2)
{
  int v2;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  -[NSString floatValue](a2, "floatValue");
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v5) = v3;
  objc_msgSend(v4, "setArPulseNumberOfRepeats:", v5);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "arPulseNumberOfRepeats");
  objc_msgSend(v7, "setFloat:forKey:", CFSTR("VKARAnimationPOIPulseRepeats"));

}

void sub_100724824(id a1, MapsDebugTableSection *a2)
{
  double v2;
  double v3;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  id v13;
  MapsDebugTableSection *v14;

  v14 = a2;
  LODWORD(v2) = 1112014848;
  LODWORD(v3) = 1140457472;
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v14, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Map Rect Size"), CFSTR("%1.1f meters"), &stru_1011C2F68, &stru_1011C2F88, v2, v3);
  LODWORD(v5) = 1.0;
  LODWORD(v6) = 1036831949;
  v7 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v14, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Screen Rect Size"), CFSTR("%0.2f percent"), &stru_1011C2FA8, &stru_1011C2FC8, v6, v5);
  LODWORD(v8) = 0;
  LODWORD(v9) = 1063675494;
  v10 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v14, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Screen Rect xOffset"), CFSTR("%0.2f percent"), &stru_1011C2FE8, &stru_1011C3008, v8, v9);
  LODWORD(v11) = 1036831949;
  LODWORD(v12) = 1063675494;
  v13 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v14, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Screen Rect yOffset"), CFSTR("%0.2f percent"), &stru_1011C3028, &stru_1011C3048, v11, v12);

}

float sub_100724948(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugMiniMapMapRectSize");
  v3 = v2;

  return v3;
}

void sub_10072498C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugMiniMapMapRectSize:", v3);

}

float sub_1007249D0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugMiniMapScreenRectSize");
  v3 = v2;

  return v3;
}

void sub_100724A14(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugMiniMapScreenRectSize:", v3);

}

float sub_100724A58(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugMiniMapScreenRectXOffset");
  v3 = v2;

  return v3;
}

void sub_100724A9C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugMiniMapScreenRectXOffset:", v3);

}

float sub_100724AE0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDebugMiniMapScreenRectYOffset");
  v3 = v2;

  return v3;
}

void sub_100724B24(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDebugMiniMapScreenRectYOffset:", v3);

}

void sub_100724B68(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void **v12;
  uint64_t v13;
  id (*v14)(uint64_t, void *);
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Frame Rate"), &stru_1011C3068);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100724FE4;
  v27[3] = &unk_1011AEAC8;
  objc_copyWeak(&v28, (id *)(a1 + 40));
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Puck"), v27);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100725078;
  v24[3] = &unk_1011B4F90;
  objc_copyWeak(&v26, (id *)(a1 + 40));
  v25 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Route"), v24);
  if (+[VKMapView _elevatedGroundIsEnabled](VKMapView, "_elevatedGroundIsEnabled"))
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100725390;
    v21[3] = &unk_1011B4F90;
    objc_copyWeak(&v23, (id *)(a1 + 40));
    v22 = *(id *)(a1 + 32);
    v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("DaVinci Route"), v21);

    objc_destroyWeak(&v23);
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100725704;
  v19[3] = &unk_1011B4BC0;
  v20 = *(id *)(a1 + 32);
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Route Debug Points"), v19);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1007257B8;
  v17[3] = &unk_1011AEAC8;
  objc_copyWeak(&v18, (id *)(a1 + 40));
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("ETA Labels"), v17);
  v12 = _NSConcreteStackBlock;
  v13 = 3221225472;
  v14 = sub_10072598C;
  v15 = &unk_1011B4BC0;
  v16 = *(id *)(a1 + 32);
  v10 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("ETA Label Debug Score"), &v12);
  v11 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("ETA Label Orientation Filter"), &stru_1011C31B8, v12, v13, v14, v15);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&v26);
  objc_destroyWeak(&v28);

}

void sub_100724E18(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100724E58(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:get:set:](a2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C3088, &stru_1011C30A8, &stru_1011C30C8);
}

void sub_100724E90(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Default"), &off_10126E908);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Native"), &off_10126E920);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("30 fps"), &off_10126E950);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("60 fps"), &off_10126E938);

}

id sub_100724F30(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v1, "navDisplayRate")));

  return v2;
}

void sub_100724F84(id a1, id a2)
{
  id v2;
  id v3;
  id v4;

  v2 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v3 = objc_msgSend(v2, "integerValue");

  objc_msgSend(v4, "setNavDisplayRate:", v3);
}

void sub_100724FE4(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;

  v7 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v7, CFSTR("Enable 3D Puck"), CFSTR("enable3DPuck"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v7, CFSTR("Snap Puck to Routeline"), CFSTR("enablePuckRouteLineSnapping"));

}

void sub_100725078(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  double v15;
  double v16;
  double v17;
  id v18;
  double v19;
  double v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  id v31;

  v3 = a2;
  v4 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Route Line Matching"), CFSTR("dontMatchRouteLine"));

  v7 = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Highlight Route Line Snapping Status"), CFSTR("highlightRouteLineSnappingStatus"));

  v9 = objc_loadWeakRetained((id *)(a1 + 40));
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Route Snapping Verification"), CFSTR("dontVerifyRouteToTransitSnapping"));

  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  v12 = objc_msgSend(v11, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Maneuver Points"), CFSTR("showManeuverPoints"));

  v13 = objc_loadWeakRetained((id *)(a1 + 40));
  v14 = objc_msgSend(v13, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Dump Route Responses & Paths"), CFSTR("dumpRouteAndPath"));

  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10072533C;
  v30[3] = &unk_1011C1BD0;
  objc_copyWeak(&v31, (id *)(a1 + 40));
  LODWORD(v15) = 3.0;
  LODWORD(v16) = 18.0;
  LODWORD(v17) = 12.0;
  v18 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Route Arrow Min Zoom"), CFSTR("zoom: %1.1f"), CFSTR("RouteArrowMinZoom"), v30, v15, v16, v17);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100725368;
  v28[3] = &unk_1011C30F0;
  v29 = *(id *)(a1 + 32);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100725384;
  v26[3] = &unk_1011C3118;
  v27 = *(id *)(a1 + 32);
  LODWORD(v19) = 0;
  LODWORD(v20) = 3.0;
  v21 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Additional Continuous Multi-Section Overlap"), CFSTR("scale:  %1.1f"), v28, v26, v19, v20);
  v22 = objc_loadWeakRetained((id *)(a1 + 40));
  v23 = objc_msgSend(v22, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable Continuous Mulit-Section Routes"), CFSTR("disableContinuousMultiSectionRoutes"));

  v24 = objc_loadWeakRetained(v4);
  v25 = objc_msgSend(v24, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Highlight Underground Route Geometry"), CFSTR("highlightUndergroundRouteGeometry"));

  objc_destroyWeak(&v31);
}

void sub_100725324(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10072533C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

float sub_100725368(uint64_t a1)
{
  return (float)objc_msgSend(*(id *)(a1 + 32), "continuousMultiSectionRouteAdditionalOverlap");
}

id sub_100725384(uint64_t a1, float a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setContinuousMultiSectionRouteAdditionalOverlap:", a2);
}

void sub_100725390(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  id v20;
  double v21;
  double v22;
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  id v31;
  _QWORD v32[4];
  id v33;
  _QWORD v34[4];
  id v35;
  _QWORD v36[4];
  id v37;
  _QWORD v38[4];
  id v39;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Routeline Animation"), CFSTR("showRoutelineAnimation"));

  v6 = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable DaVinci Style Route"), CFSTR("enableDaVinciStyleRoute"));

  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Dynamic Route Width"), CFSTR("enableDynamicRouteWidth"));

  v10 = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = objc_msgSend(v10, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Route Static Width"), CFSTR("showStaticRouteWidth"));

  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_1007256C4;
  v38[3] = &unk_1011C30F0;
  v39 = *(id *)(a1 + 32);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_1007256CC;
  v36[3] = &unk_1011C3118;
  v37 = *(id *)(a1 + 32);
  LODWORD(v12) = 1128792064;
  LODWORD(v13) = 0;
  v14 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("DaVinci Route Traffic Transition Distance (in meters)"), CFSTR("scale:  %1.1f"), v38, v36, v13, v12);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1007256D4;
  v34[3] = &unk_1011C30F0;
  v35 = *(id *)(a1 + 32);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1007256DC;
  v32[3] = &unk_1011C3118;
  v33 = *(id *)(a1 + 32);
  LODWORD(v15) = 0;
  LODWORD(v16) = 10.0;
  v17 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("DaVinci Route Width Start Transition Distance (in meters)"), CFSTR("scale:  %1.1f"), v34, v32, v15, v16);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1007256E4;
  v30[3] = &unk_1011C30F0;
  v31 = *(id *)(a1 + 32);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1007256EC;
  v28[3] = &unk_1011C3118;
  v29 = *(id *)(a1 + 32);
  LODWORD(v18) = 0;
  LODWORD(v19) = 10.0;
  v20 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("DaVinci Route Width End Transition Distance (in meters)"), CFSTR("scale:  %1.1f"), v30, v28, v18, v19);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1007256F4;
  v26[3] = &unk_1011C30F0;
  v27 = *(id *)(a1 + 32);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1007256FC;
  v24[3] = &unk_1011C3118;
  v25 = *(id *)(a1 + 32);
  LODWORD(v21) = 0;
  LODWORD(v22) = 5.0;
  v23 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("DaVinci Route Windshield Animation Time (in seconds)"), CFSTR("second:  %1.1f"), v26, v24, v21, v22);

}

id sub_1007256C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "routeTrafficTransitionDistance");
}

id sub_1007256CC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setRouteTrafficTransitionDistance:");
}

id sub_1007256D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "routeWidthStartTransitionDistance");
}

id sub_1007256DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setRouteWidthStartTransitionDistance:");
}

id sub_1007256E4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "routeWidthEndTransitionDistance");
}

id sub_1007256EC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setRouteWidthEndTransitionDistance:");
}

id sub_1007256F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "routeWindshieldAnimationTime");
}

id sub_1007256FC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setRouteWindshieldAnimationTime:");
}

id sub_100725704(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addCheckmarkRowsGroupWithContent:object:key:", &stru_1011C3138, *(_QWORD *)(a1 + 32), CFSTR("routeDebugPoints"));
}

void sub_100725738(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Hidden"), &off_10126E908);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Continuous Multi-Section"), &off_10126E920);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Elevation"), &off_10126E950);

}

void sub_1007257B8(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v15 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Enable Debugging"), CFSTR("enableEtaLabelDebugging"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Enable Searched Label Rects"), CFSTR("enableEtaLabelRectDebugging"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Enable Share Section Debugging"), CFSTR("enableRouteShareSectionDebugging"));

  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("Enable Route Intersection Testing"), CFSTR("enableRouteIntersectionTesting"));

  v11 = objc_loadWeakRetained(a1);
  v12 = objc_msgSend(v11, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v15, CFSTR("avoid Screen Edges"), CFSTR("etaLabelsAvoidScreenEdges"));

  v13 = objc_msgSend(v15, "addButtonRowWithTitle:action:", CFSTR("force placement"), &stru_1011C3158);
  v14 = objc_msgSend(v15, "addButtonRowWithTitle:action:", CFSTR("trace debug log"), &stru_1011C3178);

}

void sub_10072591C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "setForceEtaLabelPlacement:", 1);

}

void sub_100725954(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "setTraceEtaDebugLog:", 1);

}

id sub_10072598C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addCheckmarkRowsGroupWithContent:object:key:", &stru_1011C3198, *(_QWORD *)(a1 + 32), CFSTR("etaLabelDebugScore"));
}

void sub_1007259C0(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugCheckmarkRowsGroup *v9;

  v9 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("None"), &off_10126E908);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Other Label Overlap"), &off_10126E920);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Route Overlap"), &off_10126E950);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Other Route Nearest Distance"), &off_10126E938);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Artistic Balancing"), &off_10126EA88);
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Clipped Area"), &off_10126EB18);
  v8 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Avoidance Area Overlap"), &off_10126EB30);

}

void sub_100725AC0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Up Left"), &stru_1011C31D8, &stru_1011C31F8);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Up Right"), &stru_1011C3218, &stru_1011C3238);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Down Left"), &stru_1011C3258, &stru_1011C3278);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Down Right"), &stru_1011C3298, &stru_1011C32B8);

}

BOOL sub_100725B80(id a1)
{
  void *v1;
  BOOL v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "etaLabelDebugOrientationMask") & 1;

  return v2;
}

void sub_100725BBC(id a1, BOOL a2)
{
  _BOOL4 v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v3 = objc_msgSend(v5, "etaLabelDebugOrientationMask") & 0xFFFFFFFE | v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setEtaLabelDebugOrientationMask:", v3);

}

BOOL sub_100725C20(id a1)
{
  void *v1;
  unsigned int v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (objc_msgSend(v1, "etaLabelDebugOrientationMask") >> 1) & 1;

  return v2;
}

void sub_100725C5C(id a1, BOOL a2)
{
  _BOOL4 v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v3 = (unint64_t)objc_msgSend(v7, "etaLabelDebugOrientationMask") & 0xFFFFFFFD;
  if (v2)
    v4 = 2;
  else
    v4 = 0;
  v5 = v3 | v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "setEtaLabelDebugOrientationMask:", v5);

}

BOOL sub_100725CCC(id a1)
{
  void *v1;
  unsigned int v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (objc_msgSend(v1, "etaLabelDebugOrientationMask") >> 2) & 1;

  return v2;
}

void sub_100725D08(id a1, BOOL a2)
{
  _BOOL4 v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v3 = (unint64_t)objc_msgSend(v7, "etaLabelDebugOrientationMask") & 0xFFFFFFFB;
  if (v2)
    v4 = 4;
  else
    v4 = 0;
  v5 = v3 | v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "setEtaLabelDebugOrientationMask:", v5);

}

BOOL sub_100725D78(id a1)
{
  void *v1;
  unsigned int v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (objc_msgSend(v1, "etaLabelDebugOrientationMask") >> 3) & 1;

  return v2;
}

void sub_100725DB4(id a1, BOOL a2)
{
  _BOOL4 v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v3 = (unint64_t)objc_msgSend(v7, "etaLabelDebugOrientationMask") & 0xFFFFFFF7;
  if (v2)
    v4 = 8;
  else
    v4 = 0;
  v5 = v3 | v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v6, "setEtaLabelDebugOrientationMask:", v5);

}

void sub_100725E24(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100725ED4;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Traffic"), v5);
  objc_destroyWeak(&v6);

}

void sub_100725EC0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100725ED4(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v10 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v10, CFSTR("Load Fast Traffic"), CFSTR("loadGreenTraffic"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v10, CFSTR("Show Traffic Offset"), CFSTR("showTrafficOffset"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v10, CFSTR("Static Feed"), CFSTR("useStaticTrafficFeed"));

  v9 = objc_msgSend(v10, "addSwitchRowWithTitle:get:set:", CFSTR("Show Traffic Casing"), &stru_1011C32D8, &stru_1011C32F8);
}

BOOL sub_100725FC0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "showTrafficCasing");

  return v2;
}

void sub_100725FFC(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setShowTrafficCasing:", v2);

}

void sub_10072606C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100726130;
  v5[3] = &unk_1011B4F90;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v6 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Buildings"), v5);

  objc_destroyWeak(&v7);
}

void sub_10072611C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100726130(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007262C0;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 40));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Disable Compressed Buildings"), &stru_1011C3318, v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10072645C;
  v10[3] = &unk_1011C30F0;
  v11 = *(id *)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100726464;
  v8[3] = &unk_1011C3118;
  v9 = *(id *)(a1 + 32);
  LODWORD(v5) = 0;
  LODWORD(v6) = 3.0;
  v7 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Building Rounding Radius"), CFSTR("%1.1f"), v10, v8, v5, v6);

  objc_destroyWeak(&v13);
}

void sub_10072626C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100726284(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "compressedBuildingsDisabled");

  return v2;
}

void sub_1007262C0(id *a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setCompressedBuildingsDisabled:", a2);

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));

  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    v12 = a2 ^ 1;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v13), "_mapLayer"));
        objc_msgSend(v14, "setCompressedBuildingsEnabled:", v12);

        v13 = (char *)v13 + 1;
      }
      while (v10 != v13);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v15, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

id sub_10072645C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "daVinciBuildingRoundingRadius");
}

void sub_100726464(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "setDaVinciBuildingRoundingRadius:");
  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

void sub_1007264B0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void **v6;
  uint64_t v7;
  void (*v8)(uint64_t, void *);
  void *v9;
  id v10;
  id v11;

  v3 = a2;
  v6 = _NSConcreteStackBlock;
  v7 = 3221225472;
  v8 = sub_100726598;
  v9 = &unk_1011B4F90;
  objc_copyWeak(&v11, (id *)(a1 + 40));
  v10 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Altitude"), &v6);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Hybrid Unavailability Simulation"), &stru_1011C3338, v6, v7, v8, v9);

  objc_destroyWeak(&v11);
}

void sub_100726580(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100726598(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  double v26;
  double v27;
  id v28;
  double v29;
  double v30;
  id v31;
  double v32;
  double v33;
  id v34;
  double v35;
  double v36;
  id v37;
  id v38;
  id v39;
  double v40;
  double v41;
  id v42;
  _QWORD v43[4];
  id v44;
  _QWORD v45[4];
  id v46;
  _QWORD v47[4];
  id v48;
  _QWORD v49[4];
  id v50;
  _QWORD v51[4];
  id v52;
  _QWORD v53[4];
  id v54;
  _QWORD v55[4];
  id v56;
  _QWORD v57[4];
  id v58;
  _QWORD v59[4];
  id v60;
  _QWORD v61[4];
  id v62;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Pause Loading"), CFSTR("altitudePauseLoading"));

  v6 = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Freeze View Node"), CFSTR("altitudeFreezeViewNode"));

  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable JPEG texture paging"), CFSTR("altitudeTexturePaging"));

  v10 = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = objc_msgSend(v10, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Tile Bounds"), CFSTR("altitudeShowTileBounds"));

  v12 = objc_loadWeakRetained((id *)(a1 + 40));
  v13 = objc_msgSend(v12, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Mipmap Satellite Textures"), CFSTR("altitudeMipmapSatellite"));

  v14 = objc_loadWeakRetained((id *)(a1 + 40));
  v15 = objc_msgSend(v14, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Mipmap Flyover Textures"), CFSTR("altitudeMipmapFlyover"));

  v16 = objc_loadWeakRetained((id *)(a1 + 40));
  v17 = objc_msgSend(v16, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Mipmap ObjectTree Textures"), CFSTR("altitudeMipmapObjectTree"));

  v18 = objc_loadWeakRetained((id *)(a1 + 40));
  v19 = objc_msgSend(v18, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Night Light"), CFSTR("altitudeShowNightLight"));

  v20 = objc_loadWeakRetained((id *)(a1 + 40));
  v21 = objc_msgSend(v20, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Print Rendered Tile Stats"), CFSTR("altitudePrintRenderedTilesStat"));

  v22 = objc_loadWeakRetained((id *)(a1 + 40));
  v23 = objc_msgSend(v22, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Disable C3M texture loading"), CFSTR("altitudeDisableC3mTextureLoading"));

  v24 = objc_loadWeakRetained((id *)(a1 + 40));
  v25 = objc_msgSend(v24, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show trigger bounds"), CFSTR("altitudeShowTriggerBounds"));

  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_100726AD0;
  v61[3] = &unk_1011C30F0;
  v62 = *(id *)(a1 + 32);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_100726AD8;
  v59[3] = &unk_1011C3118;
  v60 = *(id *)(a1 + 32);
  LODWORD(v26) = 1036831949;
  LODWORD(v27) = 3.0;
  v28 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("LOD Scale"), CFSTR("scale:  %1.1f"), v61, v59, v26, v27);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_100726AE0;
  v57[3] = &unk_1011C30F0;
  v58 = *(id *)(a1 + 32);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_100726AE8;
  v55[3] = &unk_1011C3118;
  v56 = *(id *)(a1 + 32);
  LODWORD(v29) = 0;
  LODWORD(v30) = 1.0;
  v31 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Tile quality threshold"), CFSTR("scale:  %1.1f"), v57, v55, v29, v30);
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  v53[2] = sub_100726AF0;
  v53[3] = &unk_1011C30F0;
  v54 = *(id *)(a1 + 32);
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_100726AF8;
  v51[3] = &unk_1011C3118;
  v52 = *(id *)(a1 + 32);
  LODWORD(v32) = 0;
  LODWORD(v33) = 2.0;
  v34 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Hide mesh time"), CFSTR("time:  %1.1f"), v53, v51, v32, v33);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_100726B00;
  v49[3] = &unk_1011C30F0;
  v50 = *(id *)(a1 + 32);
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  v47[2] = sub_100726B08;
  v47[3] = &unk_1011C3118;
  v48 = *(id *)(a1 + 32);
  LODWORD(v35) = 0;
  LODWORD(v36) = 20.0;
  v37 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Fade speed"), CFSTR("time:  %1.1f"), v49, v47, v35, v36);
  v38 = objc_loadWeakRetained((id *)(a1 + 40));
  v39 = objc_msgSend(v38, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable tour speedup"), CFSTR("altitudeTourSpeedup"));

  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_100726B10;
  v45[3] = &unk_1011C30F0;
  v46 = *(id *)(a1 + 32);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_100726B18;
  v43[3] = &unk_1011C3118;
  v44 = *(id *)(a1 + 32);
  LODWORD(v40) = -5.0;
  LODWORD(v41) = 10.0;
  v42 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Flyover tour speedup"), CFSTR("factor:  %1.1f"), v45, v43, v40, v41);

}

id sub_100726AD0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "altitudeLodScale");
}

id sub_100726AD8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setAltitudeLodScale:");
}

id sub_100726AE0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "altitudeTileQualityThreshold");
}

id sub_100726AE8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setAltitudeTileQualityThreshold:");
}

id sub_100726AF0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "altitudeHideMeshTime");
}

id sub_100726AF8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setAltitudeHideMeshTime:");
}

id sub_100726B00(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "altitudeFadeSpeed");
}

id sub_100726B08(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setAltitudeFadeSpeed:");
}

id sub_100726B10(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "altitudeTourSpeedupFactor");
}

id sub_100726B18(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setAltitudeTourSpeedupFactor:");
}

void sub_100726B20(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  MapsDebugTableSection *v5;

  v2 = GeoServicesConfig_HybridUnavailableSimulationType[0];
  v3 = GeoServicesConfig_HybridUnavailableSimulationType[1];
  v5 = a2;
  v4 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](v5, "addCheckmarkRowsGroupForConfigKey:content:", v2, v3, &stru_1011C3358);
  -[MapsDebugTableSection setFooter:](v5, "setFooter:", CFSTR("Restart Maps after changing this setting."));

}

void sub_100726B84(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("N/A"), 0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Unavailable in China"), &off_10126E998);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Unavailable outside of China"), &off_10126E9B0);

}

void sub_100726C00(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100726CB0;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Map Inspector"), v5);
  objc_destroyWeak(&v6);

}

void sub_100726C9C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100726CB0(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_activateMapInspector:", v5);

  v4 = objc_msgSend(v5, "addSwitchRowWithTitle:get:set:", CFSTR("Set Map Inspector to Activate on Launch"), &stru_1011C3378, &stru_1011C3398);
}

BOOL sub_100726D20(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("ActivateMapInspectorOnLaunch"));

  return v2;
}

void sub_100726D64(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "setBool:forKey:", v2, CFSTR("ActivateMapInspectorOnLaunch"));

}

void sub_100726DB0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100726E60;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Run Flyover Tour"), v5);
  objc_destroyWeak(&v6);

}

void sub_100726E4C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100726E60(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id *location;
  id obj;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  _QWORD v35[4];
  id v36;
  _QWORD v37[4];
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42;
  _QWORD v43[4];
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];

  v34 = a2;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAltitudeManifest sharedManager](GEOAltitudeManifest, "sharedManager"));
  location = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v5 = objc_loadWeakRetained(location);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allVisibleMapViewsForDebugController:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));

  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "availableRegions"));
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
  if (v31)
  {
    v30 = *(_QWORD *)v47;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v47 != v30)
        {
          v9 = v8;
          objc_enumerationMutation(obj);
          v8 = v9;
        }
        v32 = v8;
        v10 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "nameForRegion:", objc_msgSend(v10, "unsignedIntValue")));
        if (v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "tourIdsForRegion:", objc_msgSend(v10, "unsignedIntValue")));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "tripIdsForRegion:", objc_msgSend(v10, "unsignedIntValue")));
          if (objc_msgSend(v12, "count"))
          {
            v14 = 0;
            v15 = 1;
            do
            {
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", v14));
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", v14));
              v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (region: %@) [%@]"), v11, v10, v17));
              v43[0] = _NSConcreteStackBlock;
              v43[1] = 3221225472;
              v43[2] = sub_1007272B8;
              v43[3] = &unk_1011AC8B0;
              v44 = v7;
              v45 = v16;
              v19 = v16;
              v20 = objc_msgSend(v34, "addButtonRowWithTitle:action:", v18, v43);

              v14 = v15++;
            }
            while ((unint64_t)objc_msgSend(v12, "count") > v14);
          }

        }
        v8 = v32 + 1;
      }
      while ((id)(v32 + 1) != v31);
      v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
    }
    while (v31);
  }
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_1007272E8;
  v39[3] = &unk_1011C1418;
  v21 = obj;
  v40 = v21;
  v22 = v33;
  v41 = v22;
  objc_copyWeak(&v42, location);
  v23 = objc_msgSend(v34, "addButtonRowWithTitle:action:", CFSTR("Run all tours"), v39);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1007274C8;
  v37[3] = &unk_1011AC860;
  v24 = v7;
  v38 = v24;
  v25 = objc_msgSend(v34, "addButtonRowWithTitle:action:", CFSTR("Pause Tour"), v37);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_1007274D0;
  v35[3] = &unk_1011AC860;
  v26 = v24;
  v36 = v26;
  v27 = objc_msgSend(v34, "addButtonRowWithTitle:action:", CFSTR("Resume Tour"), v35);

  objc_destroyWeak(&v42);
}

void sub_100727298(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1007272B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startFlyoverTourAnimation:duration:completion:", objc_msgSend(*(id *)(a1 + 40), "unsignedLongLongValue"), 0, 0.0);
}

void sub_1007272E8(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id WeakRetained;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = objc_alloc_init((Class)NSMutableArray);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = a1[4];
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "nameForRegion:", objc_msgSend(v8, "unsignedIntValue", (_QWORD)v15)));
        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "tourIdsForRegion:", objc_msgSend(v8, "unsignedIntValue")));
          objc_msgSend(v2, "addObjectsFromArray:", v10);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }

  v11 = objc_alloc_init((Class)NSMutableArray);
  while (objc_msgSend(v2, "count", (_QWORD)v15))
  {
    v12 = arc4random_uniform((uint32_t)objc_msgSend(v2, "count"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", v12));
    objc_msgSend(v11, "addObject:", v13);

    objc_msgSend(v2, "removeObjectAtIndex:", v12);
  }
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(WeakRetained, "runNextTourIndex:withTours:", 0, v11);

}

id sub_1007274C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_pauseFlyoverAnimation");
}

id sub_1007274D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resumeFlyoverAnimation");
}

void sub_1007274D8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100727588;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("AR"), v5);
  objc_destroyWeak(&v6);

}

void sub_100727574(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100727588(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  unsigned int v13;
  double v14;
  double v15;
  id v16;
  double v17;
  double v18;
  id v19;
  id v20;

  v20 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v20, CFSTR("Debug Console"), CFSTR("enableARDebugConsole"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v20, CFSTR("Render At Native Rate"), CFSTR("arRenderAtNativeRate"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v20, CFSTR("Omni Tile Loader"), CFSTR("enableAROmniTileLoader"));

  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v20, CFSTR("Enable Overrides"), CFSTR("arOverrideDefaults"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "valueForKey:", CFSTR("arOverrideDefaults")));
  v13 = objc_msgSend(v12, "BOOLValue");

  if (v13)
  {
    LODWORD(v14) = -3.0;
    LODWORD(v15) = 0;
    v16 = objc_msgSend(v20, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Virtual Plane Height"), CFSTR("%1.2f meters"), &stru_1011C33B8, &stru_1011C33D8, v14, v15);
    LODWORD(v17) = 1140457472;
    LODWORD(v18) = 0;
    v19 = objc_msgSend(v20, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Default Altitude"), CFSTR("%1.2f meters"), &stru_1011C33F8, &stru_1011C3418, v18, v17);
  }

}

float sub_100727734(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arVirtualPlaneHeight");
  v3 = v2;

  return v3;
}

void sub_100727778(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArVirtualPlaneHeight:", v3);

}

float sub_1007277BC(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "arDefaultHeight");
  v3 = v2;

  return v3;
}

void sub_100727800(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setArDefaultHeight:", v3);

}

void sub_100727844(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007278F4;
  v5[3] = &unk_1011AEAC8;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Lighting"), v5);
  objc_destroyWeak(&v6);

}

void sub_1007278E0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007278F4(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  _QWORD v38[4];
  id v39;
  id v40;
  _QWORD v41[4];
  id v42;
  id v43;
  _QWORD v44[4];
  id v45;
  id v46[2];

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));

  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_100727D78;
  v44[3] = &unk_1011C1918;
  objc_copyWeak(v46, v4);
  v11 = v10;
  v45 = v11;
  v12 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Ambient Light Config"), v44);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_100728248;
  v41[3] = &unk_1011C1918;
  objc_copyWeak(&v43, v4);
  v13 = v11;
  v42 = v13;
  v14 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Primary Light Config"), v41);
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_100728900;
  v38[3] = &unk_1011C1918;
  objc_copyWeak(&v40, v4);
  v15 = v13;
  v39 = v15;
  v16 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Secondary Light Config"), v38);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_100728FB8;
  v35[3] = &unk_1011C1918;
  objc_copyWeak(&v37, v4);
  v17 = v15;
  v36 = v17;
  v18 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Tertiary Light Config"), v35);
  v19 = objc_loadWeakRetained(v4);
  v20 = objc_msgSend(v19, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Ambient Light"), CFSTR("lightingEnableAmbient"));

  v21 = objc_loadWeakRetained(v4);
  v22 = objc_msgSend(v21, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Light 1"), CFSTR("lightingEnableLight1"));

  v23 = objc_loadWeakRetained(v4);
  v24 = objc_msgSend(v23, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Light 2"), CFSTR("lightingEnableLight2"));

  v25 = objc_loadWeakRetained(v4);
  v26 = objc_msgSend(v25, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Light 3"), CFSTR("lightingEnableLight3"));

  v27 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", &stru_1011EB268);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1007296CC;
  v33[3] = &unk_1011AD4F0;
  objc_copyWeak(&v34, v4);
  v28 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Accelerate Time"), &stru_1011C3678, v33);
  v29 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Fixed Hour"), CFSTR("(Blank for no fixed time)"), 0, &stru_1011C3698, &stru_1011C36B8);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100729C50;
  v31[3] = &unk_1011AD4F0;
  objc_copyWeak(&v32, v4);
  v30 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Fixed Hour Local to Camera Target"), &stru_1011C36D8, v31);
  objc_destroyWeak(&v32);
  objc_destroyWeak(&v34);

  objc_destroyWeak(&v37);
  objc_destroyWeak(&v40);

  objc_destroyWeak(&v43);
  objc_destroyWeak(v46);

}

void sub_100727D0C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;

  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100727D78(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100727E3C;
  v5[3] = &unk_1011B4F90;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v6 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Ambient light Config"), v5);

  objc_destroyWeak(&v7);
}

void sub_100727E28(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100727E3C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Override"), CFSTR("lightingOverrideAmbient"));

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10072801C;
  v19[3] = &unk_1011C3118;
  v20 = *(id *)(a1 + 32);
  LODWORD(v6) = 0;
  LODWORD(v7) = 1.0;
  v8 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Red"), CFSTR("Red Component:  %1.2f"), &stru_1011C3438, v19, v6, v7);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1007280EC;
  v17[3] = &unk_1011C3118;
  v18 = *(id *)(a1 + 32);
  LODWORD(v9) = 0;
  LODWORD(v10) = 1.0;
  v11 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Green"), CFSTR("Green Component:  %1.2f"), &stru_1011C3458, v17, v9, v10);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007281BC;
  v15[3] = &unk_1011C3118;
  v16 = *(id *)(a1 + 32);
  LODWORD(v12) = 0;
  LODWORD(v13) = 1.0;
  v14 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Blue"), CFSTR("Blue Component:  %1.2f"), &stru_1011C3478, v15, v12, v13);

}

float sub_100727FD8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideAmbient");
  v3 = v2;

  return v3;
}

id sub_10072801C(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideAmbient");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v12 = a2;
  LODWORD(v13) = v6;
  LODWORD(v14) = v8;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideAmbient:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_1007280A8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideAmbient");
  v3 = v2;

  return v3;
}

id sub_1007280EC(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideAmbient");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v12) = v6;
  *(float *)&v13 = a2;
  LODWORD(v14) = v8;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideAmbient:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100728178(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideAmbient");
  v3 = v2;

  return v3;
}

id sub_1007281BC(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideAmbient");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v12) = v6;
  LODWORD(v13) = v8;
  *(float *)&v14 = a2;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideAmbient:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

void sub_100728248(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10072830C;
  v5[3] = &unk_1011B4F90;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v6 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Primary Light Config"), v5);

  objc_destroyWeak(&v7);
}

void sub_1007282F8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10072830C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  id v30;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Override"), CFSTR("lightingOverrideLight1"));

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1007285B4;
  v29[3] = &unk_1011C3118;
  v30 = *(id *)(a1 + 32);
  LODWORD(v6) = 0;
  LODWORD(v7) = 1.0;
  v8 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Red"), CFSTR("Red Component:  %1.2f"), &stru_1011C3498, v29, v6, v7);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100728684;
  v27[3] = &unk_1011C3118;
  v28 = *(id *)(a1 + 32);
  LODWORD(v9) = 0;
  LODWORD(v10) = 1.0;
  v11 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Green"), CFSTR("Green Component:  %1.2f"), &stru_1011C34B8, v27, v9, v10);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100728754;
  v25[3] = &unk_1011C3118;
  v26 = *(id *)(a1 + 32);
  LODWORD(v12) = 0;
  LODWORD(v13) = 1.0;
  v14 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Blue"), CFSTR("Blue Component:  %1.2f"), &stru_1011C34D8, v25, v12, v13);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100728824;
  v23[3] = &unk_1011C3118;
  v24 = *(id *)(a1 + 32);
  LODWORD(v15) = 0;
  LODWORD(v16) = 1135869952;
  v17 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Azimuth"), CFSTR("Azimuth Degrees:  %1.2f"), &stru_1011C34F8, v23, v15, v16);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1007288B4;
  v21[3] = &unk_1011C3118;
  v22 = *(id *)(a1 + 32);
  LODWORD(v18) = 0;
  LODWORD(v19) = 1135869952;
  v20 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Altitude"), CFSTR("Altitude Degrees:  %1.2f"), &stru_1011C3518, v21, v18, v19);

}

float sub_100728570(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight1");
  v3 = v2;

  return v3;
}

id sub_1007285B4(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight1");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v12 = a2;
  LODWORD(v13) = v6;
  LODWORD(v14) = v8;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight1:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100728640(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight1");
  v3 = v2;

  return v3;
}

id sub_100728684(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight1");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v12) = v6;
  *(float *)&v13 = a2;
  LODWORD(v14) = v8;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight1:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100728710(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight1");
  v3 = v2;

  return v3;
}

id sub_100728754(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight1");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v12) = v6;
  LODWORD(v13) = v8;
  *(float *)&v14 = a2;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight1:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_1007287E0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight1Azimuth");
  v3 = v2;

  return v3;
}

id sub_100728824(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setOverrideLight1Azimuth:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100728870(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight1Altitude");
  v3 = v2;

  return v3;
}

id sub_1007288B4(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setOverrideLight1Altitude:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

void sub_100728900(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007289C4;
  v5[3] = &unk_1011B4F90;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v6 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Secondary Light Config"), v5);

  objc_destroyWeak(&v7);
}

void sub_1007289B0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007289C4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  id v30;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Override"), CFSTR("lightingOverrideLight2"));

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100728C6C;
  v29[3] = &unk_1011C3118;
  v30 = *(id *)(a1 + 32);
  LODWORD(v6) = 0;
  LODWORD(v7) = 1.0;
  v8 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Red"), CFSTR("Red Component:  %1.2f"), &stru_1011C3538, v29, v6, v7);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100728D3C;
  v27[3] = &unk_1011C3118;
  v28 = *(id *)(a1 + 32);
  LODWORD(v9) = 0;
  LODWORD(v10) = 1.0;
  v11 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Green"), CFSTR("Green Component:  %1.2f"), &stru_1011C3558, v27, v9, v10);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100728E0C;
  v25[3] = &unk_1011C3118;
  v26 = *(id *)(a1 + 32);
  LODWORD(v12) = 0;
  LODWORD(v13) = 1.0;
  v14 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Blue"), CFSTR("Blue Component:  %1.2f"), &stru_1011C3578, v25, v12, v13);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100728EDC;
  v23[3] = &unk_1011C3118;
  v24 = *(id *)(a1 + 32);
  LODWORD(v15) = 0;
  LODWORD(v16) = 1135869952;
  v17 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Azimuth"), CFSTR("Azimuth Degrees:  %1.2f"), &stru_1011C3598, v23, v15, v16);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100728F6C;
  v21[3] = &unk_1011C3118;
  v22 = *(id *)(a1 + 32);
  LODWORD(v18) = 0;
  LODWORD(v19) = 1135869952;
  v20 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Altitude"), CFSTR("Altitude Degrees:  %1.2f"), &stru_1011C35B8, v21, v18, v19);

}

float sub_100728C28(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight2");
  v3 = v2;

  return v3;
}

id sub_100728C6C(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight2");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v12 = a2;
  LODWORD(v13) = v6;
  LODWORD(v14) = v8;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight2:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100728CF8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight2");
  v3 = v2;

  return v3;
}

id sub_100728D3C(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight2");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v12) = v6;
  *(float *)&v13 = a2;
  LODWORD(v14) = v8;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight2:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100728DC8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight2");
  v3 = v2;

  return v3;
}

id sub_100728E0C(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight2");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v12) = v6;
  LODWORD(v13) = v8;
  *(float *)&v14 = a2;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight2:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100728E98(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight2Azimuth");
  v3 = v2;

  return v3;
}

id sub_100728EDC(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setOverrideLight2Azimuth:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100728F28(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight2Altitude");
  v3 = v2;

  return v3;
}

id sub_100728F6C(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setOverrideLight2Altitude:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

void sub_100728FB8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10072907C;
  v5[3] = &unk_1011B4F90;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v6 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Tertiary Light Config"), v5);

  objc_destroyWeak(&v7);
}

void sub_100729068(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10072907C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  id v30;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Override"), CFSTR("lightingOverrideLight3"));

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100729324;
  v29[3] = &unk_1011C3118;
  v30 = *(id *)(a1 + 32);
  LODWORD(v6) = 0;
  LODWORD(v7) = 1.0;
  v8 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Red"), CFSTR("Red Component:  %1.2f"), &stru_1011C35D8, v29, v6, v7);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1007293F4;
  v27[3] = &unk_1011C3118;
  v28 = *(id *)(a1 + 32);
  LODWORD(v9) = 0;
  LODWORD(v10) = 1.0;
  v11 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Green"), CFSTR("Green Component:  %1.2f"), &stru_1011C35F8, v27, v9, v10);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1007294C4;
  v25[3] = &unk_1011C3118;
  v26 = *(id *)(a1 + 32);
  LODWORD(v12) = 0;
  LODWORD(v13) = 1.0;
  v14 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Blue"), CFSTR("Blue Component:  %1.2f"), &stru_1011C3618, v25, v12, v13);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100729594;
  v23[3] = &unk_1011C3118;
  v24 = *(id *)(a1 + 32);
  LODWORD(v15) = 0;
  LODWORD(v16) = 1135869952;
  v17 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Azimuth"), CFSTR("Azimuth Degrees:  %1.2f"), &stru_1011C3638, v23, v15, v16);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100729624;
  v21[3] = &unk_1011C3118;
  v22 = *(id *)(a1 + 32);
  LODWORD(v18) = 0;
  LODWORD(v19) = 1135869952;
  v20 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Altitude"), CFSTR("Altitude Degrees:  %1.2f"), &stru_1011C3658, v21, v18, v19);

}

float sub_1007292E0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight3");
  v3 = v2;

  return v3;
}

id sub_100729324(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight3");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v12 = a2;
  LODWORD(v13) = v6;
  LODWORD(v14) = v8;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight3:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_1007293B0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight3");
  v3 = v2;

  return v3;
}

id sub_1007293F4(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight3");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v12) = v6;
  *(float *)&v13 = a2;
  LODWORD(v14) = v8;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight3:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100729480(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight3");
  v3 = v2;

  return v3;
}

id sub_1007294C4(uint64_t a1, float a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "overrideLight3");
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  LODWORD(v12) = v6;
  LODWORD(v13) = v8;
  *(float *)&v14 = a2;
  LODWORD(v15) = v10;
  objc_msgSend(v11, "setOverrideLight3:", v12, v13, v14, v15);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100729550(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight3Azimuth");
  v3 = v2;

  return v3;
}

id sub_100729594(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setOverrideLight3Azimuth:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_1007295E0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "overrideLight3Altitude");
  v3 = v2;

  return v3;
}

id sub_100729624(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setOverrideLight3Altitude:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

BOOL sub_100729670(id a1)
{
  void *v1;
  void *v2;
  unsigned __int8 v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "valueForKey:", CFSTR("lightingAccelerateTime")));
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

void sub_1007296CC(id *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id WeakRetained;
  void *v7;
  id v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  objc_msgSend(v4, "setValue:forKey:", v5, CFSTR("lightingAccelerateTime"));

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  objc_msgSend(WeakRetained, "setValue:forKeyInAllMapLayers:", v7, CFSTR("debugLayoutContinuously"));

  v8 = objc_loadWeakRetained(a1);
  objc_msgSend(v8, "_setAllMapLayersNeedLayout");

}

NSString *__cdecl sub_1007297A0(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  __CFString *v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (objc_msgSend(v1, "BOOLForKey:", CFSTR("__LightingStopTime")))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v3 = objc_msgSend(v2, "integerForKey:", CFSTR("__LightingStopTimeHour"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u:%u"), v3, objc_msgSend(v4, "integerForKey:", CFSTR("__LightingStopTimeMinute"))));

  }
  else
  {
    v5 = &stru_1011EB268;
  }

  return (NSString *)v5;
}

void sub_100729870(id a1, NSString *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSString *v27;

  v27 = a2;
  if (-[NSString length](v27, "length"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSString componentsSeparatedByString:](v27, "componentsSeparatedByString:", CFSTR(":")));
    if (objc_msgSend(v4, "count") == (id)1)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0));
      v6 = objc_msgSend(v5, "intValue");
      if ((v6 & 0x80000000) != 0
        || (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0)),
            (int)objc_msgSend(v2, "intValue") <= 24))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0));
        if ((objc_msgSend(v12, "intValue") & 0x80000000) != 0)
        {
          v7 = 0;
        }
        else
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0));
          v7 = objc_msgSend(v13, "intValue");

        }
        if ((v6 & 0x80000000) != 0)
          goto LABEL_17;
      }
      else
      {
        v7 = 24;
      }

LABEL_17:
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v14, "setBool:forKey:", 1, CFSTR("__LightingStopTime"));

      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v15, "setInteger:forKey:", v7, CFSTR("__LightingStopTimeHour"));

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v11 = v16;
      v17 = 0;
LABEL_32:
      objc_msgSend(v16, "setInteger:forKey:", v17, CFSTR("__LightingStopTimeMinute"));
      goto LABEL_33;
    }
    if ((unint64_t)objc_msgSend(v4, "count") < 2)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v11, "setBool:forKey:", 0, CFSTR("__LightingStopTime"));
LABEL_33:

      goto LABEL_34;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0));
    v9 = (uint64_t)objc_msgSend(v8, "intValue");
    if ((v9 & 0x80000000) != 0
      || (v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0)),
          (int)objc_msgSend(v3, "intValue") <= 24))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0));
      if ((objc_msgSend(v18, "intValue") & 0x80000000) != 0)
      {
        v10 = 0;
      }
      else
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0));
        v10 = objc_msgSend(v19, "intValue");

      }
      if ((v9 & 0x80000000) != 0)
      {
LABEL_23:

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 1));
        v21 = objc_msgSend(v20, "intValue");
        if ((v21 & 0x80000000) != 0
          || (v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 1)),
              (int)objc_msgSend((id)v9, "intValue") <= 60))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 1));
          if ((objc_msgSend(v23, "intValue") & 0x80000000) != 0)
          {
            v22 = 0;
          }
          else
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 1));
            v22 = objc_msgSend(v24, "intValue");

          }
          if ((v21 & 0x80000000) != 0)
            goto LABEL_31;
        }
        else
        {
          v22 = 60;
        }

LABEL_31:
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        objc_msgSend(v25, "setBool:forKey:", 1, CFSTR("__LightingStopTime"));

        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        objc_msgSend(v26, "setInteger:forKey:", v10, CFSTR("__LightingStopTimeHour"));

        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        v11 = v16;
        v17 = v22;
        goto LABEL_32;
      }
    }
    else
    {
      v10 = 24;
    }

    goto LABEL_23;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "setBool:forKey:", 0, CFSTR("__LightingStopTime"));
LABEL_34:

}

BOOL sub_100729BF4(id a1)
{
  void *v1;
  void *v2;
  unsigned __int8 v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "valueForKey:", CFSTR("lightingCameraLocalTime")));
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

void sub_100729C50(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  objc_msgSend(v4, "setValue:forKey:", v5, CFSTR("lightingCameraLocalTime"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

void sub_100729CDC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Flyover Unification Overrides"), &stru_1011C36F8);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Elevation Logic"), &stru_1011C3758);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10072A028;
  v14[3] = &unk_1011AEAC8;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Tours"), v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10072A774;
  v12[3] = &unk_1011AEAC8;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Octiles"), v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10072AA18;
  v10[3] = &unk_1011AEAC8;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Flyover Grid"), v10);
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Flyover Debug"), &stru_1011C39F8);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);

}

void sub_100729E80(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100729EB8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Force Flyover Unification"), &stru_1011C3718, &stru_1011C3738);
}

BOOL sub_100729EF0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "forceFlyoverUnificationMode");

  return v2;
}

void sub_100729F2C(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setForceFlyoverUnificationMode:", v2);

}

void sub_100729F70(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Correct Bumpiness"), &stru_1011C3778, &stru_1011C3798);
}

BOOL sub_100729FA8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "correctBumpiness");

  return v2;
}

void sub_100729FE4(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setCorrectBumpiness:", v2);

}

void sub_10072A028(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id v6;
  id v7;
  id v8;
  id v9;
  double v10;
  double v11;
  id v12;
  double v13;
  double v14;
  id v15;
  id v16;
  id v17;
  id v18;
  double v19;
  double v20;
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;

  v3 = a2;
  LODWORD(v4) = 0;
  LODWORD(v5) = 5.0;
  v6 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Animation Speed"), CFSTR("delta time: %1.2f"), &stru_1011C37B8, &stru_1011C37D8, v4, v5);
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Apply elevation correction"), &stru_1011C37F8, &stru_1011C3818);
  v8 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", CFSTR("Interesting View"));
  v9 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("View Slows Tours"), &stru_1011C3838, &stru_1011C3858);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10072A4C0;
  v26[3] = &unk_1011C1BD0;
  objc_copyWeak(&v27, (id *)(a1 + 32));
  LODWORD(v10) = 0;
  LODWORD(v11) = 2.0;
  v12 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Slowdown Speed"), CFSTR("interesting view slow tours by: %1.2fx"), &stru_1011C3878, v26, v10, v11);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10072A568;
  v24[3] = &unk_1011C1BD0;
  objc_copyWeak(&v25, (id *)(a1 + 32));
  LODWORD(v13) = 0;
  LODWORD(v14) = 2.0;
  v15 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Recovery Speed"), CFSTR("regular views recover speed by: %1.2fx"), &stru_1011C3898, v24, v13, v14);
  v16 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", CFSTR("Preload"));
  v17 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Preload Slows Tours"), &stru_1011C38B8, &stru_1011C38D8);
  v18 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Show Preload Position"), &stru_1011C38F8, &stru_1011C3918);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10072A710;
  v22[3] = &unk_1011C1BD0;
  objc_copyWeak(&v23, (id *)(a1 + 32));
  LODWORD(v19) = 0;
  LODWORD(v20) = 2.0;
  v21 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Preload Head Time"), CFSTR("%1.2f seconds"), &stru_1011C3938, v22, v19, v20);
  objc_destroyWeak(&v23);
  objc_destroyWeak(&v25);
  objc_destroyWeak(&v27);

}

void sub_10072A2BC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

float sub_10072A2F4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "toursAnimationSpeed");
  v3 = v2;

  return v3;
}

void sub_10072A338(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setToursAnimationSpeed:", v3);

}

BOOL sub_10072A37C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "toursCorrectElevation");

  return v2;
}

void sub_10072A3B8(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setToursCorrectElevation:", v2);

}

BOOL sub_10072A3FC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "toursModulateSpeed");

  return v2;
}

void sub_10072A438(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setToursModulateSpeed:", v2);

}

float sub_10072A47C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "toursInterestingViewSpeed");
  v3 = v2;

  return v3;
}

void sub_10072A4C0(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setToursInterestingViewSpeed:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

float sub_10072A524(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "toursViewRecoverySpeed");
  v3 = v2;

  return v3;
}

void sub_10072A568(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setToursViewRecoverySpeed:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

BOOL sub_10072A5CC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "toursPreloadSlowsSpeed");

  return v2;
}

void sub_10072A608(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setToursPreloadSlowsSpeed:", v2);

}

BOOL sub_10072A64C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "tourUsePreloadPosition");

  return v2;
}

void sub_10072A688(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setTourUsePreloadPosition:", v2);

}

float sub_10072A6CC(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "toursPreloadHeadTime");
  v3 = v2;

  return v3;
}

void sub_10072A710(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setToursPreloadHeadTime:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

void sub_10072A774(id *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id v6;
  double v7;
  double v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10072A90C;
  v12[3] = &unk_1011C1BD0;
  a1 += 4;
  objc_copyWeak(&v13, a1);
  LODWORD(v4) = 0;
  LODWORD(v5) = 2.0;
  v6 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Octile LOD constant"), CFSTR("%1.3f"), &stru_1011C3958, v12, v4, v5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10072A9B4;
  v10[3] = &unk_1011C1BD0;
  objc_copyWeak(&v11, a1);
  LODWORD(v7) = 1120403456;
  LODWORD(v8) = 0;
  v9 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Octile LOD max refinement distance"), CFSTR("%1.3f"), &stru_1011C3978, v10, v8, v7);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);

}

void sub_10072A8A4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

float sub_10072A8C8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "flyoverOctileLODConstant");
  v3 = v2;

  return v3;
}

void sub_10072A90C(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setFlyoverOctileLODConstant:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

float sub_10072A970(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "flyoverOctileLODMaxRefineDistance");
  v3 = v2;

  return v3;
}

void sub_10072A9B4(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setFlyoverOctileLODMaxRefineDistance:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

void sub_10072AA18(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10072AC00;
  v13[3] = &unk_1011AD4F0;
  objc_copyWeak(&v14, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Force Skip Tile Rendering"), &stru_1011C3998, v13);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10072ACA8;
  v11[3] = &unk_1011C1BD0;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  LODWORD(v5) = -1.0;
  LODWORD(v6) = 1.0;
  v7 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Grid NDC Bias"), CFSTR("%1.2f"), &stru_1011C39B8, v11, v5, v6);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10072AD48;
  v9[3] = &unk_1011AD4F0;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Drape Grid"), &stru_1011C39D8, v9);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v14);

}

void sub_10072AB90(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10072ABC4(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "flyoverSkipTileRendering");

  return v2;
}

void sub_10072AC00(uint64_t a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setFlyoverSkipTileRendering:", a2);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

float sub_10072AC64(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "flyoverGridNDCBias");
  v3 = v2;

  return v3;
}

void sub_10072ACA8(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setFlyoverGridNDCBias:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

BOOL sub_10072AD0C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "flyoverDrapeGrid");

  return v2;
}

void sub_10072AD48(uint64_t a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setFlyoverDrapeGrid:", a2);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

void sub_10072ADAC(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Draw Flyover Tile"), &stru_1011C3A18, &stru_1011C3A38);
}

BOOL sub_10072ADE4(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "paintFlyoverTiles");

  return v2;
}

void sub_10072AE20(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setPaintFlyoverTiles:", v2);

}

void sub_10072AE64(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;

  v3 = a2;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10072B100;
  v20[3] = &unk_1011B4F90;
  objc_copyWeak(&v22, (id *)(a1 + 40));
  v21 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Munin"), v20);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10072BC50;
  v18[3] = &unk_1011B4BC0;
  v19 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Munin FOV"), v18);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10072C288;
  v16[3] = &unk_1011AEAC8;
  objc_copyWeak(&v17, (id *)(a1 + 40));
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Tap replay"), v16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10072CAF8;
  v14[3] = &unk_1011B4BC0;
  v15 = *(id *)(a1 + 32);
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Availability override"), v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10072CBAC;
  v12[3] = &unk_1011AEAC8;
  objc_copyWeak(&v13, (id *)(a1 + 40));
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Bump Animation Parameters"), v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10072CC94;
  v10[3] = &unk_1011AEAC8;
  objc_copyWeak(&v11, (id *)(a1 + 40));
  v9 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Road Labels"), v10);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);

  objc_destroyWeak(&v17);
  objc_destroyWeak(&v22);

}

void sub_10072B0B4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10072B100(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  id v20;
  double v21;
  double v22;
  id v23;
  double v24;
  double v25;
  id v26;
  id v27;
  double v28;
  double v29;
  id v30;
  double v31;
  double v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _QWORD v39[4];
  id v40;
  _QWORD v41[4];
  id v42;
  _QWORD v43[4];
  id v44;
  _QWORD v45[4];
  id v46;
  _QWORD v47[4];
  id v48;
  _QWORD v49[4];
  id v50;
  _QWORD v51[4];
  id v52;
  _QWORD v53[4];
  id v54;
  _QWORD v55[4];
  id v56;
  _QWORD v57[4];
  id v58;
  _QWORD v59[4];
  id v60;
  _QWORD v61[4];
  id v62;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Ignore places metadata"), CFSTR("muninIgnorePlacesMetadata"));

  v6 = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Munin Debug Layer"), CFSTR("muninDebugLayer"));

  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Graph Connections"), CFSTR("muninGraphConnections"));

  v10 = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = objc_msgSend(v10, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Transition info"), CFSTR("muninShowRigTransitionInfo"));

  v12 = objc_loadWeakRetained((id *)(a1 + 40));
  v13 = objc_msgSend(v12, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("LOD info"), CFSTR("muninShowLODInfo"));

  v14 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Parallax override"), &stru_1011C3A58, &stru_1011C3A78);
  LODWORD(v15) = -2.5;
  LODWORD(v16) = 2.5;
  v17 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Parallax backward offset"), CFSTR("Distance: %1.2f"), &stru_1011C3A98, &stru_1011C3AB8, v15, v16);
  LODWORD(v18) = 10.0;
  LODWORD(v19) = 30.0;
  v20 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Parallax spring speed"), CFSTR("Force: %1.2f"), &stru_1011C3AD8, &stru_1011C3AF8, v18, v19);
  LODWORD(v21) = 0.25;
  LODWORD(v22) = 1.0;
  v23 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Parallax spring damper"), CFSTR("Damping: %1.2f"), &stru_1011C3B18, &stru_1011C3B38, v21, v22);
  LODWORD(v24) = 0;
  LODWORD(v25) = 2.0;
  v26 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Parallax spring scale"), CFSTR("Scale: %1.2f"), &stru_1011C3B58, &stru_1011C3B78, v24, v25);
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_10072B94C;
  v61[3] = &unk_1011AEB50;
  v62 = *(id *)(a1 + 32);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_10072B954;
  v59[3] = &unk_1011AE8F8;
  v60 = *(id *)(a1 + 32);
  v27 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Slow motion transitions"), v61, v59);
  LODWORD(v28) = 0;
  LODWORD(v29) = 4.0;
  v30 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min resolution (transition)"), CFSTR("Scale: %1.2f"), &stru_1011C3B98, &stru_1011C3BB8, v28, v29);
  LODWORD(v31) = 0;
  LODWORD(v32) = 4.0;
  v33 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max resolution (transition)"), CFSTR("Scale: %1.2f"), &stru_1011C3BD8, &stru_1011C3BF8, v31, v32);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_10072BA70;
  v57[3] = &unk_1011B4F08;
  v58 = *(id *)(a1 + 32);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_10072BAB4;
  v55[3] = &unk_1011AE420;
  v56 = *(id *)(a1 + 32);
  v34 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Intermediate point step"), CFSTR("1"), 1, v57, v55);
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  v53[2] = sub_10072BAE0;
  v53[3] = &unk_1011AEB50;
  v54 = *(id *)(a1 + 32);
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_10072BAE8;
  v51[3] = &unk_1011AE8F8;
  v52 = *(id *)(a1 + 32);
  v35 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("LOD override"), v53, v51);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_10072BAF4;
  v49[3] = &unk_1011B4F08;
  v50 = *(id *)(a1 + 32);
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  v47[2] = sub_10072BB3C;
  v47[3] = &unk_1011AE420;
  v48 = *(id *)(a1 + 32);
  v36 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("LOD override value"), CFSTR("2"), 1, v49, v47);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_10072BB98;
  v45[3] = &unk_1011AEB50;
  v46 = *(id *)(a1 + 32);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_10072BBA0;
  v43[3] = &unk_1011AE8F8;
  v44 = *(id *)(a1 + 32);
  v37 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Intermediate LOD override"), v45, v43);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_10072BBAC;
  v41[3] = &unk_1011B4F08;
  v42 = *(id *)(a1 + 32);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_10072BBF4;
  v39[3] = &unk_1011AE420;
  v40 = *(id *)(a1 + 32);
  v38 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Intermediate LOD override value"), CFSTR("4"), 1, v41, v39);

}

BOOL sub_10072B6AC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "muninOverrideParallax");

  return v2;
}

void sub_10072B6E8(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setMuninOverrideParallax:", v2);

}

float sub_10072B72C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "muninCameraPanOffset");
  v3 = v2;

  return v3;
}

void sub_10072B770(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMuninCameraPanOffset:", v3);

}

float sub_10072B7B4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "muninParallaxSpring");
  v3 = v2;

  return v3;
}

void sub_10072B7F8(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMuninParallaxSpring:", v3);

}

float sub_10072B83C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "muninParallaxDamper");
  v3 = v2;

  return v3;
}

void sub_10072B880(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMuninParallaxDamper:", v3);

}

float sub_10072B8C4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "muninParallaxScale");
  v3 = v2;

  return v3;
}

void sub_10072B908(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMuninParallaxScale:", v3);

}

id sub_10072B94C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "muninSlowMotion");
}

id sub_10072B954(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setMuninSlowMotion:", a2);
}

float sub_10072B960(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "muninTransitionMinResolution");
  v3 = v2;

  return v3;
}

void sub_10072B9A4(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMuninTransitionMinResolution:", v3);

}

float sub_10072B9E8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "muninTransitionMaxResolution");
  v3 = v2;

  return v3;
}

void sub_10072BA2C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMuninTransitionMaxResolution:", v3);

}

NSString *sub_10072BA70(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "muninIntermediatePointStep"));
}

id sub_10072BAB4(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setMuninIntermediatePointStep:", (int)objc_msgSend(a2, "intValue"));
}

id sub_10072BAE0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "overrideLod");
}

id sub_10072BAE8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setOverrideLod:", a2);
}

NSString *sub_10072BAF4(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "lodOverride"));
}

void sub_10072BB3C(uint64_t a1, void *a2)
{
  unsigned __int8 v3;
  id v4;

  v4 = a2;
  if ((int)objc_msgSend(v4, "intValue") <= 7)
    v3 = objc_msgSend(v4, "intValue");
  else
    v3 = 7;
  objc_msgSend(*(id *)(a1 + 32), "setLodOverride:", v3);

}

id sub_10072BB98(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "overrideIntermediateLod");
}

id sub_10072BBA0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setOverrideIntermediateLod:", a2);
}

NSString *sub_10072BBAC(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "intermediateLodOverride"));
}

void sub_10072BBF4(uint64_t a1, void *a2)
{
  unsigned __int8 v3;
  id v4;

  v4 = a2;
  if ((int)objc_msgSend(v4, "intValue") <= 7)
    v3 = objc_msgSend(v4, "intValue");
  else
    v3 = 7;
  objc_msgSend(*(id *)(a1 + 32), "setIntermediateLodOverride:", v3);

}

void sub_10072BC50(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;
  id v16;
  double v17;
  double v18;
  id v19;
  double v20;
  double v21;
  id v22;
  double v23;
  double v24;
  id v25;
  void **v26;
  uint64_t v27;
  id (*v28)(uint64_t, uint64_t);
  void *v29;
  id v30;
  _QWORD v31[4];
  id v32;

  v3 = a2;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_10072BEBC;
  v31[3] = &unk_1011AEB50;
  v32 = *(id *)(a1 + 32);
  v26 = _NSConcreteStackBlock;
  v27 = 3221225472;
  v28 = sub_10072BEC4;
  v29 = &unk_1011AE8F8;
  v30 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("FOV override"), v31, &v26);
  LODWORD(v5) = 1112014848;
  LODWORD(v6) = 1124859904;
  v7 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Default FOV (portrait)"), CFSTR("Degrees: %1.2f"), &stru_1011C3C18, &stru_1011C3C38, v5, v6, v26, v27, v28, v29);
  LODWORD(v8) = 1116471296;
  LODWORD(v9) = 1124859904;
  v10 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max FOV (portrait)"), CFSTR("Degrees: %1.2f"), &stru_1011C3C58, &stru_1011C3C78, v8, v9);
  LODWORD(v11) = 1112014848;
  LODWORD(v12) = 1124859904;
  v13 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Default FOV (landscape)"), CFSTR("Degrees: %1.2f"), &stru_1011C3C98, &stru_1011C3CB8, v11, v12);
  LODWORD(v14) = 1116471296;
  LODWORD(v15) = 1124859904;
  v16 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max FOV (landscape)"), CFSTR("Degrees: %1.2f"), &stru_1011C3CD8, &stru_1011C3CF8, v14, v15);
  LODWORD(v17) = 1.0;
  LODWORD(v18) = 30.0;
  v19 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min FOV (all)"), CFSTR("Degrees: %1.2f"), &stru_1011C3D18, &stru_1011C3D38, v17, v18);
  LODWORD(v20) = 0;
  LODWORD(v21) = 1109393408;
  v22 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min FOV rubber zoom"), CFSTR("Degrees: %1.2f"), &stru_1011C3D58, &stru_1011C3D78, v20, v21);
  LODWORD(v23) = 0;
  LODWORD(v24) = 1109393408;
  v25 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max FOV rubber zoom"), CFSTR("Degrees: %1.2f"), &stru_1011C3D98, &stru_1011C3DB8, v23, v24);

}

id sub_10072BEBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "muninOverrideFov");
}

id sub_10072BEC4(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setMuninOverrideFov:", a2);
}

float sub_10072BED0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "defaultFovPortrait");
  v3 = v2;

  return v3;
}

void sub_10072BF14(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDefaultFovPortrait:", v3);

}

float sub_10072BF58(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "maxFovPortrait");
  v3 = v2;

  return v3;
}

void sub_10072BF9C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMaxFovPortrait:", v3);

}

float sub_10072BFE0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "defaultFovLandscape");
  v3 = v2;

  return v3;
}

void sub_10072C024(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDefaultFovLandscape:", v3);

}

float sub_10072C068(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "maxFovLandscape");
  v3 = v2;

  return v3;
}

void sub_10072C0AC(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMaxFovLandscape:", v3);

}

float sub_10072C0F0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "minFov");
  v3 = v2;

  return v3;
}

void sub_10072C134(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMinFov:", v3);

}

float sub_10072C178(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "minFovSpring");
  v3 = v2;

  return v3;
}

void sub_10072C1BC(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMinFovSpring:", v3);

}

float sub_10072C200(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "maxFovSpring");
  v3 = v2;

  return v3;
}

void sub_10072C244(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMaxFovSpring:", v3);

}

void sub_10072C288(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10072C404;
  v11[3] = &unk_1011AD260;
  objc_copyWeak(&v12, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Replay tap"), v11);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10072C6D0;
  v9[3] = &unk_1011AD260;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Copy last tap"), v9);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10072C828;
  v7[3] = &unk_1011AD260;
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Paste tap"), v7);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);

}

void sub_10072C3D0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10072C404(uint64_t a1)
{
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  id WeakRetained;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Replay Tap"), CFSTR("Setup Munin view to replay tap. Enter Munin, tap once to move into position and then again to replay tap."), 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10072C554;
  v7[3] = &unk_1011AFA88;
  v3 = (id *)(a1 + 32);
  objc_copyWeak(&v8, (id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, v7));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Cancel"), 0, &stru_1011C3DD8));
  objc_msgSend(v2, "addAction:", v4);
  objc_msgSend(v2, "addAction:", v5);
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v2, 1, 0);

  objc_destroyWeak(&v8);
}

void sub_10072C53C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10072C554(uint64_t a1)
{
  void *v2;
  id *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;
  double v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  double v23;
  double v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v2, "setMuninReplayLastTap:", 1);

  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, 0);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "muninTapState");
    v7 = v24;
  }
  else
  {
    v7 = 0.0;
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "muninTapState");
    v10 = v23;
  }
  else
  {
    v10 = 0.0;
  }

  v11 = objc_loadWeakRetained(v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "delegate"));
  v13 = objc_loadWeakRetained(v3);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allVisibleMapViewsForDebugController:", v13));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));

  v16 = objc_msgSend(v15, "frame");
  v19.n128_f64[0] = MKCoordinateRegionMakeWithZoomLevel(v16, v7, v10, 17.0, v17, v18);
  objc_msgSend(v15, "setVisibleMapRect:", MKMapRectForCoordinateRegion(v19, v20, v21, v22));

}

void sub_10072C6D0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;
  __int128 v9;
  __int128 v10;

  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "muninTapState");
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }

  v4 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("{\"tap_state\": {\"x\": %f, \"y\": %f, \"latitude\": %f, \"longitude\": %f, \"yaw\": %f, \"pitch\": %f } }"), *(float *)&v9, *((float *)&v9 + 1), *((_QWORD *)&v9 + 1), (_QWORD)v10, *((float *)&v10 + 2), *((float *)&v10 + 3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
  objc_msgSend(v5, "setString:", v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Alert"), CFSTR("Tap copied to clipboard"), 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, &stru_1011C3DF8));
  objc_msgSend(v6, "addAction:", v7);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v6, 1, 0);

}

void sub_10072C828(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  int v24;
  int v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  id WeakRetained;
  uint64_t v31;
  _DWORD v32[2];
  double v33;
  double v34;
  int v35;
  int v36;
  id v37;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "string"));

  if (!v3)
  {
    v6 = 0;
    goto LABEL_14;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataUsingEncoding:", 4));
  v37 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v4, 1, &v37));
  v6 = v37;

  if (!v5)
  {
LABEL_14:
    v14 = CFSTR("Unable to parse tap state from clipboard.");
    goto LABEL_15;
  }
  v31 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKeyPath:", CFSTR("tap_state.x")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKeyPath:", CFSTR("tap_state.y")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKeyPath:", CFSTR("tap_state.latitude")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKeyPath:", CFSTR("tap_state.longitude")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKeyPath:", CFSTR("tap_state.yaw")));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKeyPath:", CFSTR("tap_state.pitch")));
  v13 = (void *)v12;
  v14 = CFSTR("Unable to parse tap state from clipboard.");
  if (v7)
  {
    if (v8)
    {
      if (v9)
      {
        if (v10)
        {
          if (v11)
          {
            if (v12)
            {
              objc_msgSend(v7, "floatValue");
              v16 = v15;
              objc_msgSend(v8, "floatValue");
              v18 = v17;
              objc_msgSend(v9, "doubleValue");
              v20 = v19;
              objc_msgSend(v10, "doubleValue");
              v22 = v21;
              objc_msgSend(v11, "floatValue");
              v24 = v23;
              objc_msgSend(v13, "floatValue");
              if (v20 != 0.0 && v22 != 0.0)
              {
                v26 = v25;
                v27 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
                v32[0] = v16;
                v32[1] = v18;
                v33 = v20;
                v34 = v22;
                v35 = v24;
                v36 = v26;
                objc_msgSend(v27, "setMuninTapState:", v32);

                v14 = CFSTR("Tap pasted from clipboard. Use 'Replay tap' to play.");
              }
            }
          }
        }
      }
    }
  }

  a1 = v31;
LABEL_15:
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Alert"), v14, 1));
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, &stru_1011C3E18));
  objc_msgSend(v28, "addAction:", v29);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v28, 1, 0);

}

id sub_10072CAF8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addCheckmarkRowsGroupWithContent:object:key:", &stru_1011C3E38, *(_QWORD *)(a1 + 32), CFSTR("muninAvailabilityOverride"));
}

void sub_10072CB2C(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Default"), &off_10126E908);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Always"), &off_10126E950);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Never"), &off_10126E920);

}

void sub_10072CBAC(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;

  v8 = a2;
  v3 = objc_msgSend(v8, "addButtonRowWithTitle:action:", CFSTR("Force Bump Next Tap"), &stru_1011C3E58);
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v8, CFSTR("Force All Bump"), CFSTR("forceBumpAll"));

  v6 = objc_loadWeakRetained(a1);
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v8, CFSTR("Slow Motion Bump"), CFSTR("slowMotionBump"));

}

void sub_10072CC5C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "setForceBumpNextTap:", 1);

}

void sub_10072CC94(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  double v13;
  double v14;
  id v15;
  id v16;

  v16 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v16, CFSTR("Enable RoadNetwork Minimap"), CFSTR("enableMuninRoadNetworkMiniMap"));

  v5 = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(v5, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v16, CFSTR("Show Roadwidths on Minimap"), CFSTR("enableMuninMiniMapRoadWidths"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v16, CFSTR("Color ComposedEdges on Minimap"), CFSTR("enableMuninMiniMapComposedEdgeRoadColoring"));

  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v16, CFSTR("Show Collection Points on Minimap"), CFSTR("enableMuninMiniMapCollectionPoints"));

  v11 = objc_loadWeakRetained(a1);
  v12 = objc_msgSend(v11, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v16, CFSTR("Show Road Z Data on Minimap"), CFSTR("enableMuninMiniMapRoadZData"));

  LODWORD(v13) = 1120403456;
  LODWORD(v14) = 1148846080;
  v15 = objc_msgSend(v16, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("RoadNetwork MiniMap Area (Meters)"), CFSTR("Scale: %1.2f"), &stru_1011C3E78, &stru_1011C3E98, v13, v14);

}

float sub_10072CDF8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "muninRoadNetworkMiniMapAreaInMeters");
  v3 = v2;

  return v3;
}

void sub_10072CE3C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setMuninRoadNetworkMiniMapAreaInMeters:", v3);

}

void sub_10072CE80(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id WeakRetained;
  void *v24;
  id v25;
  _QWORD *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *i;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id *v44;
  id *v45;
  id *v46;
  id *v47;
  id *v48;
  id *v49;
  id *v50;
  id *v51;
  id *v52;
  id *v53;
  id *v54;
  id *v55;
  id *v56;
  void *v57;
  void *v58;
  _QWORD v59[5];
  id v60;
  _QWORD v61[5];
  id v62;
  _QWORD v63[6];
  id v64;
  _QWORD v65[9];
  id v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[4];
  id v72;
  _QWORD v73[4];
  id v74;
  id v75;
  _QWORD v76[4];
  id v77;
  _QWORD v78[4];
  id v79;
  id v80;
  _QWORD v81[4];
  id v82;
  id v83;
  _QWORD v84[4];
  id v85;
  _QWORD v86[4];
  id v87;
  _QWORD v88[4];
  id v89;
  _QWORD v90[5];
  id v91;
  _QWORD v92[4];
  id v93;
  _QWORD v94[4];
  id v95;
  id v96;
  id location;
  _QWORD v98[5];
  id v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t);
  void (*v104)(uint64_t);
  id v105;
  _QWORD v106[5];
  id v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t);
  void (*v112)(uint64_t);
  id v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  void (*v118)(uint64_t);
  id v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t);
  void (*v124)(uint64_t);
  id v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t);
  void (*v130)(uint64_t);
  id v131;
  _QWORD v132[5];
  id v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, uint64_t);
  void (*v138)(uint64_t);
  id v139;
  _BYTE v140[128];

  v3 = a2;
  v134 = 0;
  v135 = &v134;
  v136 = 0x3032000000;
  v137 = sub_10072DB70;
  v138 = sub_10072DB80;
  v139 = 0;
  v132[0] = 0;
  v132[1] = v132;
  v132[2] = 0x3032000000;
  v132[3] = sub_10072DB70;
  v132[4] = sub_10072DB80;
  v133 = 0;
  v126 = 0;
  v127 = &v126;
  v128 = 0x3032000000;
  v129 = sub_10072DB70;
  v130 = sub_10072DB80;
  v131 = 0;
  v120 = 0;
  v121 = &v120;
  v122 = 0x3032000000;
  v123 = sub_10072DB70;
  v124 = sub_10072DB80;
  v125 = 0;
  v114 = 0;
  v115 = &v114;
  v116 = 0x3032000000;
  v117 = sub_10072DB70;
  v118 = sub_10072DB80;
  v119 = 0;
  v108 = 0;
  v109 = &v108;
  v110 = 0x3032000000;
  v111 = sub_10072DB70;
  v112 = sub_10072DB80;
  v113 = 0;
  v106[0] = 0;
  v106[1] = v106;
  v106[2] = 0x3032000000;
  v106[3] = sub_10072DB70;
  v106[4] = sub_10072DB80;
  v107 = 0;
  v100 = 0;
  v101 = &v100;
  v102 = 0x3032000000;
  v103 = sub_10072DB70;
  v104 = sub_10072DB80;
  v105 = 0;
  v98[0] = 0;
  v98[1] = v98;
  v98[2] = 0x3032000000;
  v98[3] = sub_10072DB70;
  v98[4] = sub_10072DB80;
  v99 = 0;
  objc_initWeak(&location, v3);
  v94[0] = _NSConcreteStackBlock;
  v94[1] = 3221225472;
  v94[2] = sub_10072DB88;
  v94[3] = &unk_1011C3F08;
  v4 = (id *)(a1 + 40);
  v48 = &v95;
  objc_copyWeak(&v95, (id *)(a1 + 40));
  v49 = &v96;
  objc_copyWeak(&v96, &location);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Features"), v94);
  v92[0] = _NSConcreteStackBlock;
  v92[1] = 3221225472;
  v92[2] = sub_10072E2FC;
  v92[3] = &unk_1011AEAC8;
  v50 = &v93;
  objc_copyWeak(&v93, (id *)(a1 + 40));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("DaVinci"), v92));
  v7 = (void *)v135[5];
  v135[5] = v6;

  objc_msgSend((id)v135[5], "setVisible:", +[VKMapView _elevatedGroundIsEnabled](VKMapView, "_elevatedGroundIsEnabled"));
  v8 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Shadow Map Resolution"), &stru_1011C40A8);
  v90[0] = _NSConcreteStackBlock;
  v90[1] = 3221225472;
  v90[2] = sub_10072EFA0;
  v90[3] = &unk_1011C4510;
  v90[4] = v98;
  v46 = &v91;
  objc_copyWeak(&v91, (id *)(a1 + 40));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Advanced Lighting"), v90));
  v10 = (void *)v127[5];
  v127[5] = v9;

  objc_msgSend((id)v127[5], "setVisible:", MapsFeature_IsEnabled_ShelbyvilleAdvancedLighting());
  v88[0] = _NSConcreteStackBlock;
  v88[1] = 3221225472;
  v88[2] = sub_10072FD74;
  v88[3] = &unk_1011AEAC8;
  v44 = &v89;
  objc_copyWeak(&v89, (id *)(a1 + 40));
  v11 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Debug Style Raster Attribute"), v88);
  v86[0] = _NSConcreteStackBlock;
  v86[1] = 3221225472;
  v86[2] = sub_10073001C;
  v86[3] = &unk_1011AEAC8;
  v45 = &v87;
  objc_copyWeak(&v87, (id *)(a1 + 40));
  v12 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Planar Texture Mapping Tuning"), v86);
  v84[0] = _NSConcreteStackBlock;
  v84[1] = 3221225472;
  v84[2] = sub_1007302BC;
  v84[3] = &unk_1011AEAC8;
  v47 = &v85;
  objc_copyWeak(&v85, (id *)(a1 + 40));
  v13 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Color Correction Tuning"), v84);
  v81[0] = _NSConcreteStackBlock;
  v81[1] = 3221225472;
  v81[2] = sub_100730768;
  v81[3] = &unk_1011B4F90;
  v51 = &v83;
  objc_copyWeak(&v83, (id *)(a1 + 40));
  v82 = *(id *)(a1 + 32);
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Normal generation edge smoothing"), v81));
  v15 = (void *)v121[5];
  v121[5] = v14;

  objc_msgSend((id)v121[5], "setVisible:", +[VKMapView _elevatedGroundIsEnabled](VKMapView, "_elevatedGroundIsEnabled"));
  v78[0] = _NSConcreteStackBlock;
  v78[1] = 3221225472;
  v78[2] = sub_100730E60;
  v78[3] = &unk_1011B4F90;
  v52 = &v80;
  objc_copyWeak(&v80, (id *)(a1 + 40));
  v79 = *(id *)(a1 + 32);
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Elevation Scaling"), v78));
  v17 = (void *)v115[5];
  v115[5] = v16;

  objc_msgSend((id)v115[5], "setVisible:", +[VKMapView _elevatedGroundIsEnabled](VKMapView, "_elevatedGroundIsEnabled"));
  v76[0] = _NSConcreteStackBlock;
  v76[1] = 3221225472;
  v76[2] = sub_1007312E4;
  v76[3] = &unk_1011AEAC8;
  v53 = &v77;
  objc_copyWeak(&v77, (id *)(a1 + 40));
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Pitch Flattening"), v76));
  v19 = (void *)v109[5];
  v109[5] = v18;

  objc_msgSend((id)v109[5], "setVisible:", +[VKMapView _elevatedGroundIsEnabled](VKMapView, "_elevatedGroundIsEnabled"));
  v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Globe Atmosphere"), &stru_1011C4870));
  v21 = (void *)v101[5];
  v101[5] = v20;

  v22 = (void *)v101[5];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "valueForKeyInAllMapLayers:", CFSTR("enableGlobe")));
  objc_msgSend(v22, "setVisible:", objc_msgSend(v24, "BOOLValue"));

  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472;
  v73[2] = sub_10073198C;
  v73[3] = &unk_1011C3F08;
  v54 = &v74;
  objc_copyWeak(&v74, v4);
  v55 = &v75;
  objc_copyWeak(&v75, &location);
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Globe Camera"), v73));
  objc_msgSend(v58, "setVisible:", +[VKMapView _globeIsEnabled](VKMapView, "_globeIsEnabled"));
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v71[2] = sub_100731FE4;
  v71[3] = &unk_1011AEAC8;
  v56 = &v72;
  objc_copyWeak(&v72, v4);
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Draping"), v71));
  objc_msgSend(v57, "setVisible:", +[VKMapView _elevatedGroundIsEnabled](VKMapView, "_elevatedGroundIsEnabled"));
  v25 = objc_loadWeakRetained(v4);
  v26 = v25;
  if (v25)
  {
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v27 = *((id *)v25 + 12);
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v67, v140, 16, &v89, &v87, &v91, &v85, &v95, &v96, &v93, &v83, &v80, &v77, &v74, &v75, &v72);
    if (v28)
    {
      v29 = *(_QWORD *)v68;
      do
      {
        for (i = 0; i != v28; i = (char *)i + 1)
        {
          if (*(_QWORD *)v68 != v29)
            objc_enumerationMutation(v27);
          MapsFeature_RemoveBlockListener(*(_QWORD *)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)i));
        }
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v67, v140, 16);
      }
      while (v28);
    }

    v31 = (void *)v26[12];
    v32 = &_dispatch_main_q;
    v65[0] = _NSConcreteStackBlock;
    v65[2] = sub_1007323B0;
    v65[3] = &unk_1011C4A58;
    v65[4] = &v134;
    v65[5] = &v120;
    v65[6] = &v114;
    v65[7] = &v108;
    v65[8] = v106;
    v65[1] = 3221225472;
    objc_copyWeak(&v66, &location);
    v33 = MapsFeature_AddBlockListener(MapsFeaturesConfig_ShelbyvilleTerrain[0], MapsFeaturesConfig_ShelbyvilleTerrain[1], &_dispatch_main_q, v65);
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    objc_msgSend(v31, "addObject:", v34);

    v35 = (void *)v26[12];
    v63[0] = _NSConcreteStackBlock;
    v63[1] = 3221225472;
    v63[2] = sub_100732450;
    v63[3] = &unk_1011C4A80;
    v63[4] = &v100;
    v63[5] = v98;
    objc_copyWeak(&v64, &location);
    v36 = MapsFeature_AddBlockListener(MapsFeaturesConfig_ShelbyvilleGlobe[0], MapsFeaturesConfig_ShelbyvilleGlobe[1], &_dispatch_main_q, v63);
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    objc_msgSend(v35, "addObject:", v37);

    v38 = (void *)v26[12];
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472;
    v61[2] = sub_1007324B4;
    v61[3] = &unk_1011C4AA8;
    v61[4] = &v126;
    objc_copyWeak(&v62, &location);
    v39 = MapsFeature_AddBlockListener(MapsFeaturesConfig_ShelbyvilleAdvancedLighting[0], MapsFeaturesConfig_ShelbyvilleAdvancedLighting[1], &_dispatch_main_q, v61);
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    objc_msgSend(v38, "addObject:", v40);

    v41 = (void *)v26[12];
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472;
    v59[2] = sub_100732500;
    v59[3] = &unk_1011C4AA8;
    v59[4] = v132;
    objc_copyWeak(&v60, &location);
    v42 = MapsFeature_AddBlockListener(MapsFeaturesConfig_ShelbyvilleAdvancedWater[0], MapsFeaturesConfig_ShelbyvilleAdvancedWater[1], &_dispatch_main_q, v59);
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    objc_msgSend(v41, "addObject:", v43);

    objc_destroyWeak(&v60);
    objc_destroyWeak(&v62);
    objc_destroyWeak(&v64);
    objc_destroyWeak(&v66);
  }

  objc_destroyWeak(v56);
  objc_destroyWeak(v55);
  objc_destroyWeak(v54);
  objc_destroyWeak(v53);

  objc_destroyWeak(v52);
  objc_destroyWeak(v51);
  objc_destroyWeak(v47);
  objc_destroyWeak(v45);
  objc_destroyWeak(v44);
  objc_destroyWeak(v46);
  objc_destroyWeak(v50);
  objc_destroyWeak(v49);
  objc_destroyWeak(v48);
  objc_destroyWeak(&location);

  _Block_object_dispose(v98, 8);
  _Block_object_dispose(&v100, 8);

  _Block_object_dispose(v106, 8);
  _Block_object_dispose(&v108, 8);

  _Block_object_dispose(&v114, 8);
  _Block_object_dispose(&v120, 8);

  _Block_object_dispose(&v126, 8);
  _Block_object_dispose(v132, 8);

  _Block_object_dispose(&v134, 8);
}

void sub_10072D974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9, id *a10, id *a11, id *a12, id *a13, id *a14, id *a15, id *a16, id *a17, id *a18, id *a19, id *a20,id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a20);
  objc_destroyWeak(a19);
  objc_destroyWeak(a18);
  objc_destroyWeak(a17);
  objc_destroyWeak(a16);
  objc_destroyWeak(a12);
  objc_destroyWeak(a10);
  objc_destroyWeak(a9);
  objc_destroyWeak(a11);
  objc_destroyWeak(a15);
  objc_destroyWeak(a14);
  objc_destroyWeak(a13);
  objc_destroyWeak((id *)&STACK[0x380]);
  _Block_object_dispose(&STACK[0x388], 8);
  _Block_object_dispose(&STACK[0x3B8], 8);
  _Block_object_dispose(&STACK[0x3E8], 8);
  _Block_object_dispose(&STACK[0x418], 8);
  _Block_object_dispose(&STACK[0x448], 8);
  _Block_object_dispose(&STACK[0x478], 8);
  _Block_object_dispose(&STACK[0x4A8], 8);
  _Block_object_dispose(&STACK[0x4D8], 8);
  _Block_object_dispose(&STACK[0x508], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10072DB70(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10072DB80(uint64_t a1)
{

}

void sub_10072DB88(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t IsAvailable_ShelbyvilleGlobe;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id WeakRetained;
  id v15;
  uint64_t IsAvailable_ShelbyvilleRoundedBuildings;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t IsAvailable_ShelbyvilleColorizedBuildings;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t IsAvailable_ShelbyvilleBuildingHeights;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t IsAvailable_ShelbyvilleAdvancedLighting;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _QWORD v42[4];
  id v43;
  _QWORD v44[4];
  id v45;
  _QWORD v46[4];
  id v47;
  id v48;

  v3 = a2;
  v4 = +[VKMapView _elevatedGroundIsAvailable](VKMapView, "_elevatedGroundIsAvailable");
  if ((_DWORD)v4)
  {
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_10072DEF4;
    v46[3] = &unk_1011C3EE0;
    objc_copyWeak(&v47, (id *)(a1 + 32));
    objc_copyWeak(&v48, (id *)(a1 + 40));
    v8 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Terrain"), &stru_1011C3EB8, v46);
    if (MapsFeature_IsEnabled(MapsFeaturesConfig_ShelbyvilleTerrain[0], MapsFeaturesConfig_ShelbyvilleTerrain[1]))
    {
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_10072E090;
      v44[3] = &unk_1011AEE60;
      objc_copyWeak(&v45, (id *)(a1 + 32));
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_10072E138;
      v42[3] = &unk_1011AD4F0;
      objc_copyWeak(&v43, (id *)(a1 + 32));
      v9 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Metros"), v44, v42);
      objc_destroyWeak(&v43);
      objc_destroyWeak(&v45);
    }
    objc_destroyWeak(&v48);
    objc_destroyWeak(&v47);
  }
  IsAvailable_ShelbyvilleGlobe = MapsFeature_IsAvailable_ShelbyvilleGlobe(v4, v5, v6, v7);
  if ((_DWORD)IsAvailable_ShelbyvilleGlobe)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v15 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:selector:key:", v3, CFSTR("Globe"), "enableGlobe", MapsFeaturesConfig_ShelbyvilleGlobe[0], MapsFeaturesConfig_ShelbyvilleGlobe[1]);

  }
  IsAvailable_ShelbyvilleRoundedBuildings = MapsFeature_IsAvailable_ShelbyvilleRoundedBuildings(IsAvailable_ShelbyvilleGlobe, v11, v12, v13);
  if ((_DWORD)IsAvailable_ShelbyvilleRoundedBuildings)
  {
    v20 = objc_loadWeakRetained((id *)(a1 + 32));
    v21 = objc_msgSend(v20, "addAllMapsSwitchRowToSection:title:selector:key:", v3, CFSTR("Rounded Buildings"), "enableRoundedBuildings", MapsFeaturesConfig_ShelbyvilleRoundedBuildings[0], MapsFeaturesConfig_ShelbyvilleRoundedBuildings[1]);

  }
  IsAvailable_ShelbyvilleColorizedBuildings = MapsFeature_IsAvailable_ShelbyvilleColorizedBuildings(IsAvailable_ShelbyvilleRoundedBuildings, v17, v18, v19);
  if ((_DWORD)IsAvailable_ShelbyvilleColorizedBuildings)
  {
    v26 = objc_loadWeakRetained((id *)(a1 + 32));
    v27 = objc_msgSend(v26, "addAllMapsSwitchRowToSection:title:selector:key:", v3, CFSTR("Colorized Buildings"), "enableColorizedBuildings", MapsFeaturesConfig_ShelbyvilleColorizedBuildings[0], MapsFeaturesConfig_ShelbyvilleColorizedBuildings[1]);

  }
  IsAvailable_ShelbyvilleBuildingHeights = MapsFeature_IsAvailable_ShelbyvilleBuildingHeights(IsAvailable_ShelbyvilleColorizedBuildings, v23, v24, v25);
  if ((_DWORD)IsAvailable_ShelbyvilleBuildingHeights)
  {
    v32 = objc_loadWeakRetained((id *)(a1 + 32));
    v33 = objc_msgSend(v32, "addAllMapsSwitchRowToSection:title:selector:key:", v3, CFSTR("Building Heights"), "enableBuildingHeights", MapsFeaturesConfig_ShelbyvilleBuildingHeights[0], MapsFeaturesConfig_ShelbyvilleBuildingHeights[1]);

  }
  IsAvailable_ShelbyvilleAdvancedLighting = MapsFeature_IsAvailable_ShelbyvilleAdvancedLighting(IsAvailable_ShelbyvilleBuildingHeights, v29, v30, v31);
  if ((_DWORD)IsAvailable_ShelbyvilleAdvancedLighting)
  {
    v38 = objc_loadWeakRetained((id *)(a1 + 32));
    v39 = objc_msgSend(v38, "addAllMapsSwitchRowToSection:title:selector:key:", v3, CFSTR("Advanced Lighting"), "enableAdvancedLighting", MapsFeaturesConfig_ShelbyvilleAdvancedLighting[0], MapsFeaturesConfig_ShelbyvilleAdvancedLighting[1]);

  }
  if (MapsFeature_IsAvailable_ShelbyvilleAdvancedWater(IsAvailable_ShelbyvilleAdvancedLighting, v35, v36, v37))
  {
    v40 = objc_loadWeakRetained((id *)(a1 + 32));
    v41 = objc_msgSend(v40, "addAllMapsSwitchRowToSection:title:selector:key:", v3, CFSTR("Advanced Water"), "enableAdvancedWater", MapsFeaturesConfig_ShelbyvilleAdvancedWater[0], MapsFeaturesConfig_ShelbyvilleAdvancedWater[1]);

  }
}

void sub_10072DEAC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10072DEE4(id a1)
{
  return MapsFeature_IsEnabled(MapsFeaturesConfig_ShelbyvilleTerrain[0], MapsFeaturesConfig_ShelbyvilleTerrain[1]);
}

void sub_10072DEF4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = MapsFeature_SetEnabled(MapsFeaturesConfig_ShelbyvilleTerrain[0], MapsFeaturesConfig_ShelbyvilleTerrain[1], a2);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
        objc_msgSend(v13, "setTerrainMode:", v3);

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
        objc_msgSend(v14, "setNeedsLayout");

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v9);
  }

  v15 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v15, "rebuildSections");

}

BOOL sub_10072E090(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));

  v8 = objc_msgSend(v7, "terrainMode") == (id)1;
  return v8;
}

void sub_10072E138(uint64_t a1, int a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate", 0));
  v6 = objc_loadWeakRetained(v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleMapViewsForDebugController:", v6));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
        v14 = v13;
        if (a2)
        {
          objc_msgSend(v13, "setTerrainMode:", 1);

          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
          objc_msgSend(v15, "setBool:forKey:", 1, CFSTR("__internal_MapsDebugEnableTerrainMetros"));
        }
        else
        {
          objc_msgSend(v13, "setTerrainMode:", 2);

          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
          objc_msgSend(v15, "removeObjectForKey:", CFSTR("__internal_MapsDebugEnableTerrainMetros"));
        }

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_mapLayer"));
        objc_msgSend(v16, "setNeedsLayout");

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v9);
  }

}

void sub_10072E2FC(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  double v24;
  double v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  double v55;
  double v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void **v61;
  uint64_t v62;
  void (*v63)(uint64_t, float);
  void *v64;
  id v65;
  _QWORD v66[4];
  id v67;

  v3 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Entity Highlighting (Top down only (still unreliably))"), CFSTR("daVinciEntityDebugHighlighting"));

  v6 = objc_loadWeakRetained(a1);
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Force 3D"), CFSTR("daVinciForceElevatedGround"));

  v8 = objc_loadWeakRetained(a1);
  v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Hide Buildings on Camera Collision"), CFSTR("hideBuildingsOnCollision"));

  v10 = objc_loadWeakRetained(a1);
  v11 = objc_msgSend(v10, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Hide Assets (Landmarks/Trees etc.) on Camera Collision"), CFSTR("hideAssetsOnCollision"));

  v12 = objc_loadWeakRetained(a1);
  v13 = objc_msgSend(v12, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Geometry Stats"), CFSTR("drawDaVinciHUD"));

  v14 = objc_loadWeakRetained(a1);
  v15 = objc_msgSend(v14, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Wireframe"), CFSTR("daVinciWireframeEnabled"));

  v16 = objc_loadWeakRetained(a1);
  v17 = objc_msgSend(v16, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Decal bounds"), CFSTR("paintDaVinciDecalBounds"));

  v18 = objc_loadWeakRetained(a1);
  v19 = objc_msgSend(v18, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Mesh bounds"), CFSTR("paintDaVinciMeshBounds"));

  v20 = objc_loadWeakRetained(a1);
  v21 = objc_msgSend(v20, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Building Mesh bounds"), CFSTR("paintDaVinciBuildingMeshBounds"));

  v22 = objc_loadWeakRetained(a1);
  v23 = objc_msgSend(v22, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Meta Tiles"), CFSTR("paintDaVinciMetaTiles"));

  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472;
  v66[2] = sub_10072E9B0;
  v66[3] = &unk_1011C1BD0;
  objc_copyWeak(&v67, a1);
  LODWORD(v24) = 0;
  LODWORD(v25) = 1.0;
  v26 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Meta tile opacity"), CFSTR("%.1f"), &stru_1011C3F28, v66, v24, v25);
  v27 = objc_loadWeakRetained(a1);
  v28 = objc_msgSend(v27, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Tile Clipping"), CFSTR("enableTileClipping"));

  v29 = objc_loadWeakRetained(a1);
  v30 = objc_msgSend(v29, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Tile Clipping (Fallback) Debugging"), CFSTR("enableTileClippingDebug"));

  v31 = objc_loadWeakRetained(a1);
  v32 = objc_msgSend(v31, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Render line geometry"), CFSTR("daVinciRenderLineGeometry"));

  v33 = objc_loadWeakRetained(a1);
  v34 = objc_msgSend(v33, "addAllMapsSwitchRowToSection:title:key:", v3, CFSTR("Render overlay polygons"), CFSTR("renderOverlayPolygons"));

  v35 = objc_loadWeakRetained(a1);
  v36 = objc_msgSend(v35, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Center Line Roads"), CFSTR("daVinciShowCenterLineRoads"));

  v37 = objc_loadWeakRetained(a1);
  v38 = objc_msgSend(v37, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Ribbon Antialiasing"), CFSTR("daVinciEnableRibbonAntialiasing"));

  v39 = objc_loadWeakRetained(a1);
  v40 = objc_msgSend(v39, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint DaVinci Tiles"), CFSTR("paintDaVinciTiles"));

  v41 = objc_loadWeakRetained(a1);
  v42 = objc_msgSend(v41, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint DaVinci Building Tiles"), CFSTR("paintDaVinciBuildingTiles"));

  v43 = objc_loadWeakRetained(a1);
  v44 = objc_msgSend(v43, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Draped Polygons"), CFSTR("paintDrapedPolygons"));

  v45 = objc_loadWeakRetained(a1);
  v46 = objc_msgSend(v45, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Tile Boundary Verts"), CFSTR("paintDaVinciTileBoundaryVerts"));

  v47 = objc_loadWeakRetained(a1);
  v48 = objc_msgSend(v47, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Paint Elevation Raster"), CFSTR("paintDaVinciElevationRaster"));

  v49 = objc_loadWeakRetained(a1);
  v50 = objc_msgSend(v49, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Missing Materials"), CFSTR("daVinciShowMissingMaterials"));

  v51 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Paint LOD Levels"), &stru_1011C3F48, &stru_1011C3F68);
  v52 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Sideloading ASTC texture from DevResources"), &stru_1011C3F88, &stru_1011C3FA8);
  v53 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Sideloading Asset/Material from DevResources"), &stru_1011C3FC8, &stru_1011C3FE8);
  v54 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Injected Assets from DevResources"), &stru_1011C4008, &stru_1011C4028);
  v61 = _NSConcreteStackBlock;
  v62 = 3221225472;
  v63 = sub_10072ED08;
  v64 = &unk_1011C1BD0;
  objc_copyWeak(&v65, a1);
  LODWORD(v55) = 2.0;
  LODWORD(v56) = 20.0;
  v57 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Globe Spline Maximum Z"), CFSTR("%2.1f "), &stru_1011C4048, &v61, v55, v56);
  v58 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Globe Scaling Correction"), &stru_1011C4068, &stru_1011C4088, v61, v62, v63, v64);
  v59 = objc_loadWeakRetained(a1);
  v60 = objc_msgSend(v59, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Stacking Venues"), CFSTR("daVinciShowStackingVenues"));

  objc_destroyWeak(&v65);
  objc_destroyWeak(&v67);

}

void sub_10072E940(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

float sub_10072E96C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciMetaTileOpacity");
  v3 = v2;

  return v3;
}

void sub_10072E9B0(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDaVinciMetaTileOpacity:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

BOOL sub_10072EA14(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciTintLODLevels");

  return v2;
}

void sub_10072EA50(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setDaVinciTintLODLevels:", v2);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

BOOL sub_10072EAC0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciASTCTextureSideLoadEnabled");

  return v2;
}

void sub_10072EAFC(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setDaVinciASTCTextureSideLoadEnabled:", v2);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

BOOL sub_10072EB6C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciResourceOverrideEnabled");

  return v2;
}

void sub_10072EBA8(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setDaVinciResourceOverrideEnabled:", v2);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

BOOL sub_10072EC18(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableInjectedAssets");

  return v2;
}

void sub_10072EC54(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableInjectedAssets:", v2);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

float sub_10072ECC4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciGlobeSplinedMaxZoom");
  v3 = v2;

  return v3;
}

void sub_10072ED08(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDaVinciGlobeSplinedMaxZoom:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

BOOL sub_10072ED6C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciGlobeScalingCorrection");

  return v2;
}

void sub_10072EDA8(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setDaVinciGlobeScalingCorrection:", v2);

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v4, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

void sub_10072EE18(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupWithContent:get:set:](a2, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C40C8, &stru_1011C40E8, &stru_1011C4108);
}

void sub_10072EE50(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  MapsDebugCheckmarkRowsGroup *v7;

  v7 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("No override"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1024));
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("1k"), v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 2048));
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("2k"), v5);

}

id sub_10072EF00(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v1, "shadowMapResolution")));

  return v2;
}

void sub_10072EF54(id a1, id a2)
{
  id v2;
  id v3;

  v2 = objc_msgSend(a2, "integerValue");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setShadowMapResolution:", v2);

}

void sub_10072EFA0(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  double v9;
  double v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  double v31;
  double v32;
  id v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  id v39;
  double v40;
  double v41;
  id v42;
  double v43;
  double v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  double v54;
  double v55;
  id v56;
  double v57;
  double v58;
  id v59;
  double v60;
  double v61;
  id v62;
  id v63;
  id v64;
  double v65;
  double v66;
  id v67;
  double v68;
  double v69;
  id v70;
  id v71;
  id v72;

  v72 = a2;
  v3 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Enable Globe Lighting"), CFSTR("daVinciGlobeLighting")));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setVisible:", +[VKMapView _globeIsEnabled](VKMapView, "_globeIsEnabled"));
  v8 = objc_msgSend(v72, "addSwitchRowWithTitle:get:set:", CFSTR("Disable Shadows"), &stru_1011C4128, &stru_1011C4148);
  LODWORD(v9) = 0;
  LODWORD(v10) = 1.0;
  v11 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Shadow Intensity"), CFSTR("Intensity:  %1.2f"), &stru_1011C4168, &stru_1011C4188, v9, v10);
  v12 = objc_loadWeakRetained((id *)(a1 + 40));
  v13 = objc_msgSend(v12, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Use PBR Shader"), CFSTR("daVinciEnablePBR"));

  v14 = objc_loadWeakRetained(v3);
  v15 = objc_msgSend(v14, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Base Colors Only"), CFSTR("daVinciLightingDebugAlbedoOnly"));

  v16 = objc_loadWeakRetained(v3);
  v17 = objc_msgSend(v16, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Lighting Only"), CFSTR("daVinciLightingDebugLightsOnly"));

  v18 = objc_loadWeakRetained(v3);
  v19 = objc_msgSend(v18, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Show Overexposure"), CFSTR("daVinciLightingDebugShowOverexposure"));

  v20 = objc_loadWeakRetained(v3);
  v21 = objc_msgSend(v20, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Show Normals"), CFSTR("daVinciLightingDebugShowNormals"));

  v22 = objc_loadWeakRetained(v3);
  v23 = objc_msgSend(v22, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Show Lighting Debug Sphere"), CFSTR("daVinciLightingDebugShowLitSphere"));

  v24 = objc_loadWeakRetained(v3);
  v25 = objc_msgSend(v24, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Show UVs"), CFSTR("daVinciRenderingDebugShowUVs"));

  v26 = objc_loadWeakRetained(v3);
  v27 = objc_msgSend(v26, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Enable Ground Ambient Occlusion"), CFSTR("daVinciGroundAmbientOcclusionEnabled"));

  v28 = objc_loadWeakRetained(v3);
  v29 = objc_msgSend(v28, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Occlusion map only"), CFSTR("daVinciSSAOOcclusionOnly"));

  v30 = objc_msgSend(v72, "addSwitchRowWithTitle:get:set:", CFSTR("SSAO Override On"), &stru_1011C41A8, &stru_1011C41C8);
  LODWORD(v31) = 5.0;
  LODWORD(v32) = 1008981770;
  v33 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Override Intensity"), CFSTR("Overall Intensity Scale:  %1.2f"), &stru_1011C41E8, &stru_1011C4208, v32, v31);
  LODWORD(v34) = 5.0;
  LODWORD(v35) = 1008981770;
  v36 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Override Radius"), CFSTR("Radius Scale:  %1.2f"), &stru_1011C4228, &stru_1011C4248, v35, v34);
  LODWORD(v37) = 0;
  LODWORD(v38) = 1.0;
  v39 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Max Intensity"), CFSTR("Maximum Intensity:  %1.2f"), &stru_1011C4268, &stru_1011C4288, v37, v38);
  LODWORD(v40) = 981668463;
  LODWORD(v41) = 1036831949;
  v42 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Max Distance"), CFSTR("Maximum Distance:  %1.2f"), &stru_1011C42A8, &stru_1011C42C8, v40, v41);
  LODWORD(v43) = 1140460749;
  LODWORD(v44) = 1.0;
  v45 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Falloff Scale"), CFSTR("Falloff Scale:  %1.2f"), &stru_1011C42E8, &stru_1011C4308, v44, v43);
  v46 = objc_msgSend(v72, "addSwitchRowWithTitle:get:set:", CFSTR("Show SSAO Demo Button"), &stru_1011C4328, &stru_1011C4348);
  v47 = objc_loadWeakRetained(v3);
  v48 = objc_msgSend(v47, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Enable SSAO High Sample Count"), CFSTR("daVinciSSAOHighSampleCountEnabled"));

  v49 = objc_loadWeakRetained(v3);
  v50 = objc_msgSend(v49, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Enable SSAO Blur"), CFSTR("daVinciSSAOEnableBlur"));

  v51 = objc_loadWeakRetained(v3);
  v52 = objc_msgSend(v51, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Enable SSAO Depth Aware Blur"), CFSTR("daVinciSSAODepthAwareBlurEnabled"));

  v53 = objc_msgSend(v72, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("SSAO Blur Size"), CFSTR("1"), 1, &stru_1011C4368, &stru_1011C4388);
  LODWORD(v54) = 10.0;
  LODWORD(v55) = 981668463;
  v56 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Depth Threshold"), CFSTR("Depth Threshold:  %1.2f"), &stru_1011C43A8, &stru_1011C43C8, v55, v54);
  LODWORD(v57) = 10.0;
  LODWORD(v58) = 1036831949;
  v59 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Blurriness"), CFSTR("Blurriness:  %1.2f"), &stru_1011C43E8, &stru_1011C4408, v58, v57);
  LODWORD(v60) = 10.0;
  LODWORD(v61) = 1008981770;
  v62 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Depth Blurriness"), CFSTR("Blurriness:  %1.2f"), &stru_1011C4428, &stru_1011C4448, v61, v60);
  v63 = objc_loadWeakRetained(v3);
  v64 = objc_msgSend(v63, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v72, CFSTR("Enable SSAO Depth Aware Upsample"), CFSTR("daVinciSSAODepthAwareUpsampleEnabled"));

  LODWORD(v65) = 1092721050;
  LODWORD(v66) = 981668463;
  v67 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("SSAO Upsample Depth Threshold"), CFSTR("Upsample Depth Threshold:  %1.2f"), &stru_1011C4468, &stru_1011C4488, v66, v65);
  LODWORD(v68) = 1028443341;
  LODWORD(v69) = 2.0;
  v70 = objc_msgSend(v72, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Occlusion Texture Scale"), CFSTR("Scale:  %1.3f"), &stru_1011C44A8, &stru_1011C44C8, v68, v69);
  v71 = objc_msgSend(v72, "addButtonRowWithTitle:action:", CFSTR("Reset SSAO values"), &stru_1011C44E8);

}

BOOL sub_10072F618(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_DisableShadows[0], VectorKitDebugConfig_DisableShadows[1]);
}

void sub_10072F628(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_DisableShadows[0], VectorKitDebugConfig_DisableShadows[1], a2);
}

float sub_10072F63C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciShadowIntensity");
  v3 = v2;

  return v3;
}

void sub_10072F680(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciShadowIntensity:", v3);

}

BOOL sub_10072F6C4(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "ssaoOverrideOn");

  return v2;
}

void sub_10072F700(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setSsaoOverrideOn:", v2);

}

float sub_10072F744(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "ssaoOverrideIntensity");
  v3 = v2;

  return v3;
}

void sub_10072F788(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setSsaoOverrideIntensity:", v3);

}

float sub_10072F7CC(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "ssaoOverrideRadius");
  v3 = v2;

  return v3;
}

void sub_10072F810(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setSsaoOverrideRadius:", v3);

}

float sub_10072F854(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "ssaoMaxIntensity");
  v3 = v2;

  return v3;
}

void sub_10072F898(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setSsaoMaxIntensity:", v3);

}

float sub_10072F8DC(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "ssaoMaxDistance");
  v3 = v2;

  return v3;
}

void sub_10072F920(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setSsaoMaxDistance:", v3);

}

float sub_10072F964(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "ssaoFalloffScale");
  v3 = v2;

  return v3;
}

void sub_10072F9A8(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setSsaoFalloffScale:", v3);

}

BOOL sub_10072F9EC(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_SSAODemoButtonEnabled[0], VectorKitDebugConfig_SSAODemoButtonEnabled[1]);
}

void sub_10072F9FC(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_SSAODemoButtonEnabled[0], VectorKitDebugConfig_SSAODemoButtonEnabled[1], a2);
}

NSString *__cdecl sub_10072FA10(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(v1, "daVinciSSAOBlurSize")));

  return (NSString *)v2;
}

void sub_10072FA74(id a1, NSString *a2)
{
  uint64_t v2;
  id v3;

  v2 = -[NSString intValue](a2, "intValue");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setDaVinciSSAOBlurSize:", v2);

}

float sub_10072FAC0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSSAODepthThreshold");
  v3 = v2;

  return v3;
}

void sub_10072FB04(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciSSAODepthThreshold:", v3);

}

float sub_10072FB48(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSSAOBlurriness");
  v3 = v2;

  return v3;
}

void sub_10072FB8C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciSSAOBlurriness:", v3);

}

float sub_10072FBD0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSSAODepthBlurriness");
  v3 = v2;

  return v3;
}

void sub_10072FC14(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciSSAODepthBlurriness:", v3);

}

float sub_10072FC58(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSSAOUpsampleDepthThreshold");
  v3 = v2;

  return v3;
}

void sub_10072FC9C(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciSSAOUpsampleDepthThreshold:", v3);

}

float sub_10072FCE0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSSAOTextureScale");
  v3 = v2;

  return v3;
}

void sub_10072FD24(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciSSAOTextureScale:", v3);

}

void sub_10072FD68(id a1)
{
  +[MapsMapDisplayDebugController resetSSAOValues](MapsMapDisplayDebugController, "resetSSAOValues");
}

void sub_10072FD74(id *a1, void *a2)
{
  id v3;
  id v4;
  id WeakRetained;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10072FFA4;
  v11[3] = &unk_1011C2060;
  a1 += 4;
  objc_copyWeak(&v12, a1);
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupWithContent:get:set:", &stru_1011C4530, &stru_1011C4550, v11);
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Aridity Ground Tinting"), CFSTR("daVinciAridityGroundTintingEnabled"));

  v7 = objc_loadWeakRetained(a1);
  v8 = objc_msgSend(v7, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Temperature Ground Tinting"), CFSTR("daVinciTemperatureGroundTintingEnabled"));

  v9 = objc_loadWeakRetained(a1);
  v10 = objc_msgSend(v9, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Material Rasters"), CFSTR("daVinciMaterialRastersEnabled"));

  objc_destroyWeak(&v12);
}

void sub_10072FEAC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10072FEC4(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("None"), &off_10126E980);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Temperature"), &off_10126E998);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Precipitation"), &off_10126E9B0);

}

id sub_10072FF44(id a1)
{
  void *v1;
  unsigned int v2;
  _UNKNOWN **v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciDebugRasterStyleAttribute");

  v3 = &off_10126E980;
  if (v2 == 153)
    v3 = &off_10126E998;
  if (v2 == 154)
    return &off_10126E9B0;
  else
    return v3;
}

void sub_10072FFA4(uint64_t a1, void *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  id WeakRetained;
  id v7;

  v3 = objc_msgSend(a2, "intValue");
  if (v3 == 1)
    v4 = 153;
  else
    v4 = 0;
  if (v3 == 2)
    v5 = 154;
  else
    v5 = v4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

  v7 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v7, "setDaVinciDebugRasterStyleAttribute:", v5);

}

void sub_10073001C(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  double v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  id v12;
  id v13;

  v13 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v13, CFSTR("Override Planar Mapping Parameters"), CFSTR("daVinciPlanarOverride"));

  LODWORD(v5) = 1.0;
  v6 = objc_msgSend(v13, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Pixels Per Meter"), CFSTR("%1.2f"), &stru_1011C4570, &stru_1011C4590, v5, 8589936700.0);
  LODWORD(v7) = 1036831949;
  LODWORD(v8) = 5.0;
  v9 = objc_msgSend(v13, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Tiling"), CFSTR("%1.2f"), &stru_1011C45B0, &stru_1011C45D0, v7, v8);
  LODWORD(v10) = -20.0;
  LODWORD(v11) = 20.0;
  v12 = objc_msgSend(v13, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Offset"), CFSTR("%1.2f"), &stru_1011C45F0, &stru_1011C4610, v10, v11);

}

float sub_100730124(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciPlanarPixelPerMeterOverride");
  v3 = v2;

  return v3;
}

void sub_100730168(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciPlanarPixelPerMeterOverride:", v3);

}

float sub_1007301AC(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciPlanarTilingOverride");
  v3 = v2;

  return v3;
}

void sub_1007301F0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciPlanarTilingOverride:", v3);

}

float sub_100730234(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciPlanarOffsetOverride");
  v3 = v2;

  return v3;
}

void sub_100730278(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciPlanarOffsetOverride:", v3);

}

void sub_1007302BC(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  id v15;
  id v16;
  double v17;
  double v18;
  id v19;
  id v20;
  double v21;
  double v22;
  id v23;
  id v24;
  double v25;
  double v26;
  id v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  id v31;
  _QWORD v32[4];
  id v33;
  _QWORD v34[4];
  id v35;

  v3 = a2;
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Override Color Correction Parameters"), CFSTR("daVinciColorCorrectionOverride"));

  v6 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
  v8 = objc_loadWeakRetained(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allVisibleMapViewsForDebugController:", v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_mapLayer"));

  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_10073056C;
  v34[3] = &unk_1011C3118;
  v12 = v11;
  v35 = v12;
  LODWORD(v13) = 0;
  LODWORD(v14) = 1.0;
  v15 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Saturation Range Min"), CFSTR("%1.2f"), &stru_1011C4630, v34, v13, v14);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1007305FC;
  v32[3] = &unk_1011C3118;
  v16 = v12;
  v33 = v16;
  LODWORD(v17) = 0;
  LODWORD(v18) = 1.0;
  v19 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Saturation Range Max"), CFSTR("%1.2f"), &stru_1011C4650, v32, v17, v18);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10073068C;
  v30[3] = &unk_1011C3118;
  v20 = v16;
  v31 = v20;
  LODWORD(v21) = 0;
  LODWORD(v22) = 1.0;
  v23 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Brightness Range Min"), CFSTR("%1.2f"), &stru_1011C4670, v30, v21, v22);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10073071C;
  v28[3] = &unk_1011C3118;
  v29 = v20;
  v24 = v20;
  LODWORD(v25) = 0;
  LODWORD(v26) = 1.0;
  v27 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Brightness Range Max"), CFSTR("%1.2f"), &stru_1011C4690, v28, v25, v26);

}

float sub_100730528(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSaturationRangeMinOverride");
  v3 = v2;

  return v3;
}

id sub_10073056C(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDaVinciSaturationRangeMinOverride:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_1007305B8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSaturationRangeMaxOverride");
  v3 = v2;

  return v3;
}

id sub_1007305FC(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDaVinciSaturationRangeMaxOverride:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_100730648(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciBrightnessRangeMinOverride");
  v3 = v2;

  return v3;
}

id sub_10073068C(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDaVinciBrightnessRangeMinOverride:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

float sub_1007306D8(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciBrightnessRangeMaxOverride");
  v3 = v2;

  return v3;
}

id sub_10073071C(uint64_t a1, float a2)
{
  void *v4;
  double v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDaVinciBrightnessRangeMaxOverride:", v5);

  return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
}

void sub_100730768(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  id v6;
  id v7;
  double v8;
  double v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;

  v3 = a2;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100730A74;
  v24[3] = &unk_1011C1BD0;
  objc_copyWeak(&v25, (id *)(a1 + 40));
  LODWORD(v4) = 0;
  LODWORD(v5) = 1127474790;
  v6 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min Z Angle"), CFSTR("%3.1f degrees"), &stru_1011C46B0, v24, v4, v5);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100730B44;
  v22[3] = &unk_1011B4F08;
  v23 = *(id *)(a1 + 32);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100730B8C;
  v19[3] = &unk_1011BD0E0;
  v20 = *(id *)(a1 + 32);
  objc_copyWeak(&v21, (id *)(a1 + 40));
  v7 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Min Z"), CFSTR("Z"), 1, v22, v19);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100730C8C;
  v17[3] = &unk_1011C1BD0;
  objc_copyWeak(&v18, (id *)(a1 + 40));
  LODWORD(v8) = 1.0;
  LODWORD(v9) = 1127474790;
  v10 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max Z Angle"), CFSTR("%3.1f degrees"), &stru_1011C46D0, v17, v8, v9);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100730D5C;
  v15[3] = &unk_1011B4F08;
  v16 = *(id *)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100730DA4;
  v12[3] = &unk_1011BD0E0;
  v13 = *(id *)(a1 + 32);
  objc_copyWeak(&v14, (id *)(a1 + 40));
  v11 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Max Z"), CFSTR("Z"), 1, v15, v12);
  objc_destroyWeak(&v14);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&v21);

  objc_destroyWeak(&v25);
}

void sub_1007309EC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v4);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

float sub_100730A30(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSmoothEdgeMinZAngle");
  v3 = v2;

  return v3;
}

void sub_100730A74(id *a1, float a2)
{
  void *v4;
  double v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDaVinciSmoothEdgeMinZAngle:", v5);

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "clearScene");

}

NSString *sub_100730B44(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "daVinciSmoothEdgeMinZ"));
}

void sub_100730B8C(id *a1, void *a2)
{
  id *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;

  v2 = a1;
  objc_msgSend(a1[4], "setDaVinciSmoothEdgeMinZ:", objc_msgSend(a2, "intValue"));
  v2 += 5;
  WeakRetained = objc_loadWeakRetained(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));
  objc_msgSend(v7, "clearScene");

}

float sub_100730C48(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciSmoothEdgeMaxZAngle");
  v3 = v2;

  return v3;
}

void sub_100730C8C(id *a1, float a2)
{
  void *v4;
  double v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setDaVinciSmoothEdgeMaxZAngle:", v5);

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "clearScene");

}

NSString *sub_100730D5C(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "daVinciSmoothEdgeMaxZ"));
}

void sub_100730DA4(id *a1, void *a2)
{
  id *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;

  v2 = a1;
  objc_msgSend(a1[4], "setDaVinciSmoothEdgeMaxZ:", objc_msgSend(a2, "intValue"));
  v2 += 5;
  WeakRetained = objc_loadWeakRetained(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v4 = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allVisibleMapViewsForDebugController:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_mapLayer"));
  objc_msgSend(v7, "clearScene");

}

void sub_100730E60(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  double v10;
  double v11;
  id v12;
  id v13;
  double v14;
  double v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Show Debugging"), CFSTR("drawDaVinciElevationScalingDebug"));

  v6 = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = objc_msgSend(v6, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Elevation Scaling Override"), CFSTR("daVinciOverrideElevationScaling"));

  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Scale Normals Only"), CFSTR("daVinciElevationScalingNormalsOnly"));

  objc_msgSend(v3, "setFooter:", CFSTR("These parameters provide a simple ramp to override the per-zoom level control available in groundSettings.json (in DevResources)"));
  LODWORD(v10) = 1.0;
  LODWORD(v11) = 1112014848;
  v12 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min Z Factor"), CFSTR("%3.1f"), &stru_1011C46F0, &stru_1011C4710, v10, v11);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10073116C;
  v24[3] = &unk_1011B4F08;
  v25 = *(id *)(a1 + 32);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1007311B4;
  v22[3] = &unk_1011AE420;
  v23 = *(id *)(a1 + 32);
  v13 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Min Z"), CFSTR("Z"), 1, v24, v22);
  LODWORD(v14) = 1.0;
  LODWORD(v15) = 1112014848;
  v16 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max Z Factor"), CFSTR("%3.1f"), &stru_1011C4730, &stru_1011C4750, v14, v15);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10073126C;
  v20[3] = &unk_1011B4F08;
  v21 = *(id *)(a1 + 32);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1007312B4;
  v18[3] = &unk_1011AE420;
  v19 = *(id *)(a1 + 32);
  v17 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Max Z"), CFSTR("Z"), 1, v20, v18);

}

float sub_1007310E4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciElevationScalingMinZFactor");
  v3 = v2;

  return v3;
}

void sub_100731128(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciElevationScalingMinZFactor:", v3);

}

NSString *sub_10073116C(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "daVinciElevationScalingMinZ"));
}

id sub_1007311B4(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setDaVinciElevationScalingMinZ:", objc_msgSend(a2, "intValue"));
}

float sub_1007311E4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciElevationScalingMaxZFactor");
  v3 = v2;

  return v3;
}

void sub_100731228(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciElevationScalingMaxZFactor:", v3);

}

NSString *sub_10073126C(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), objc_msgSend(*(id *)(a1 + 32), "daVinciElevationScalingMaxZ"));
}

id sub_1007312B4(uint64_t a1, void *a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setDaVinciElevationScalingMaxZ:", objc_msgSend(a2, "intValue"));
}

void sub_1007312E4(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;
  id v16;
  id v17;

  v17 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v17, CFSTR("Enable Pitch Flattening"), CFSTR("daVinciPitchScaleEnabled"));

  objc_msgSend(v17, "setFooter:", CFSTR("Flatten buildings and terrain between certain zooms when the user is looking straight down."));
  LODWORD(v5) = 1.0;
  LODWORD(v6) = 20.0;
  v7 = objc_msgSend(v17, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Min Zoom"), CFSTR("Zoom: %1.2f"), &stru_1011C4770, &stru_1011C4790, v5, v6);
  LODWORD(v8) = 1.0;
  LODWORD(v9) = 20.0;
  v10 = objc_msgSend(v17, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max Zoom"), CFSTR("Zoom: %1.2f"), &stru_1011C47B0, &stru_1011C47D0, v8, v9);
  LODWORD(v11) = 1008981770;
  LODWORD(v12) = 1.0;
  v13 = objc_msgSend(v17, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Max Zoom Height Fraction"), CFSTR("Fraction: %1.2f"), &stru_1011C47F0, &stru_1011C4810, v11, v12);
  LODWORD(v14) = 1114636288;
  LODWORD(v15) = 1.0;
  v16 = objc_msgSend(v17, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Full Height Return Angle"), CFSTR("Degrees: %1.2f"), &stru_1011C4830, &stru_1011C4850, v15, v14);

}

float sub_10073143C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "buildingPOIPitchScaleMinZoom");
  v3 = v2;

  return v3;
}

void sub_100731480(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setBuildingPOIPitchScaleMinZoom:", v3);

}

float sub_1007314C4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "buildingPOIPitchScaleMaxZoom");
  v3 = v2;

  return v3;
}

void sub_100731508(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setBuildingPOIPitchScaleMaxZoom:", v3);

}

float sub_10073154C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "buildingPOIPitchScaleMaxZoomFactor");
  v3 = v2;

  return v3;
}

void sub_100731590(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setBuildingPOIPitchScaleMaxZoomFactor:", v3);

}

float sub_1007315D4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "buildingPOIPitchScaleFullHeightAngle");
  v3 = v2;

  return v3;
}

void sub_100731618(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setBuildingPOIPitchScaleFullHeightAngle:", v3);

}

void sub_10073165C(id a1, MapsDebugTableSection *a2)
{
  double v2;
  double v3;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  id v13;
  MapsDebugTableSection *v14;

  v14 = a2;
  LODWORD(v2) = 1203982336;
  LODWORD(v3) = 1217559552;
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v14, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Atmosphere Height"), CFSTR("%6.7f "), &stru_1011C4890, &stru_1011C48B0, v2, v3);
  LODWORD(v5) = 0;
  LODWORD(v6) = 1.0;
  v7 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v14, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Color Ramp Midpoint"), CFSTR("%1.2f "), &stru_1011C48D0, &stru_1011C48F0, v5, v6);
  LODWORD(v8) = 0;
  LODWORD(v9) = 10.0;
  v10 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v14, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Horizon Glow Sharpness"), CFSTR("%2.2f "), &stru_1011C4910, &stru_1011C4930, v8, v9);
  LODWORD(v11) = 0;
  LODWORD(v12) = 2.0;
  v13 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v14, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Horizon Glow Strength"), CFSTR("%1.2f "), &stru_1011C4950, &stru_1011C4970, v11, v12);

}

float sub_10073176C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciAtmosphereMaxHeight");
  v3 = v2;

  return v3;
}

void sub_1007317B0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciAtmosphereMaxHeight:", v3);

}

float sub_1007317F4(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciAtmosphereColorMidpoint");
  v3 = v2;

  return v3;
}

void sub_100731838(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciAtmosphereColorMidpoint:", v3);

}

float sub_10073187C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciHorizonGlowSharpness");
  v3 = v2;

  return v3;
}

void sub_1007318C0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciHorizonGlowSharpness:", v3);

}

float sub_100731904(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "daVinciHorizonGlowStrength");
  v3 = v2;

  return v3;
}

void sub_100731948(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setDaVinciHorizonGlowStrength:", v3);

}

void sub_10073198C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;

  v3 = a2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100731BF8;
  v14[3] = &unk_1011C3EE0;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  objc_copyWeak(&v16, (id *)(a1 + 40));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("New Camera Controller"), &stru_1011C4990, v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100731D14;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Force Mercator Zoom"), &stru_1011C49B0, v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100731E18;
  v10[3] = &unk_1011AD4F0;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Latitude Bias Tile Selection"), &stru_1011C49D0, v10);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100731F1C;
  v8[3] = &unk_1011AD4F0;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Constant Z Globe Tile Selection"), &stru_1011C49F0, v8);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v15);

}

void sub_100731B70(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100731BBC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciCameraController");

  return v2;
}

void sub_100731BF8(uint64_t a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setDaVinciCameraController:", a2);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));

  objc_msgSend(v11, "forceResolveCameraController");
  v10 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v10, "rebuildSections");

}

BOOL sub_100731CD8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciCameraControllerForceMercatorZoom");

  return v2;
}

void sub_100731D14(uint64_t a1, uint64_t a2)
{
  void *v4;
  id *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setDaVinciCameraControllerForceMercatorZoom:", a2);

  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

}

BOOL sub_100731DDC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciBiasLatitudeGlobeTileSelection");

  return v2;
}

id sub_100731E18(id *a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setDaVinciBiasLatitudeGlobeTileSelection:", a2);

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

  return +[MapsMapDisplayDebugController completelyFlushTiles](MapsMapDisplayDebugController, "completelyFlushTiles");
}

BOOL sub_100731EE0(id a1)
{
  void *v1;
  char v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciPitchedGlobeTileSelection") ^ 1;

  return v2;
}

id sub_100731F1C(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a2 ^ 1u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setDaVinciPitchedGlobeTileSelection:", v3);

  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v8 = objc_loadWeakRetained(v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allVisibleMapViewsForDebugController:", v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_mapLayer"));
  objc_msgSend(v11, "setNeedsLayout");

  return +[MapsMapDisplayDebugController completelyFlushTiles](MapsMapDisplayDebugController, "completelyFlushTiles");
}

void sub_100731FE4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id WeakRetained;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void **v12;
  uint64_t v13;
  id (*v14)(id *, uint64_t);
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1007321E4;
  v17[3] = &unk_1011AD4F0;
  objc_copyWeak(&v18, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Use CollisionMesh"), &stru_1011C4A10, v17);
  v12 = _NSConcreteStackBlock;
  v13 = 3221225472;
  v14 = sub_1007322E8;
  v15 = &unk_1011AD4F0;
  objc_copyWeak(&v16, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Draw Collision Mesh"), &stru_1011C4A30, &v12);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = objc_msgSend(WeakRetained, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Fill Wireframe"), CFSTR("daVinciTintBandFillWireframeEnabled"), v12, v13, v14, v15);

  v8 = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = objc_msgSend(v8, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Stroke Wireframe"), CFSTR("daVinciTintBandStrokeWireframeEnabled"));

  v10 = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = objc_msgSend(v10, "addAllMapsSwitchRowToSection:title:forVectorKitDebugKey:", v3, CFSTR("Enable Stroke Distance Debug"), CFSTR("daVinciTintBandStrokeDistanceDebugEnabled"));

  objc_destroyWeak(&v16);
  objc_destroyWeak(&v18);

}

void sub_100732180(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007321A8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciUseCollisionMesh");

  return v2;
}

id sub_1007321E4(id *a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setDaVinciUseCollisionMesh:", a2);

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

  return +[MapsMapDisplayDebugController completelyFlushTiles](MapsMapDisplayDebugController, "completelyFlushTiles");
}

BOOL sub_1007322AC(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "daVinciDrawCollisionMesh");

  return v2;
}

id sub_1007322E8(id *a1, uint64_t a2)
{
  void *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v4, "setDaVinciDrawCollisionMesh:", a2);

  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleMapViewsForDebugController:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_mapLayer"));
  objc_msgSend(v10, "setNeedsLayout");

  return +[MapsMapDisplayDebugController completelyFlushTiles](MapsMapDisplayDebugController, "completelyFlushTiles");
}

void sub_1007323B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setVisible:", a4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setVisible:", a4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setVisible:", a4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setVisible:", a4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setVisible:", a4);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_100732450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setVisible:", a4);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setVisible:", a4);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1007324B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setVisible:", a4);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_100732500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setVisible:", a4);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_10073254C(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD *WeakRetained;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[5];
  id v23;
  _QWORD v24[5];
  id v25;
  _QWORD v26[4];
  id v27;
  id location[2];

  v3 = a2;
  objc_initWeak(location, v3);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Rendering Features (Requires Relaunch)"), &stru_1011C4AC8);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("UI Features"), &stru_1011C4BE8);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100732A40;
  v26[3] = &unk_1011AEAC8;
  a1 += 4;
  objc_copyWeak(&v27, a1);
  v6 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Hillshade Debug Setting"), v26);
  v7 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Engineering Settings"), &stru_1011C4CC8);
  WeakRetained = objc_loadWeakRetained(a1);
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = (void *)WeakRetained[12];
    v11 = &_dispatch_main_q;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10073311C;
    v24[3] = &unk_1011C4EB0;
    v24[4] = v9;
    objc_copyWeak(&v25, location);
    v12 = _GEOConfigAddBlockListenerForKey(VectorKitDebugConfig_HikingOverrideEnabled[0], VectorKitDebugConfig_HikingOverrideEnabled[1], &_dispatch_main_q, v24);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    objc_msgSend(v10, "addObject:", v13);

    v14 = (void *)v9[12];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100733228;
    v22[3] = &unk_1011C4EB0;
    v22[4] = v9;
    objc_copyWeak(&v23, location);
    v15 = _GEOConfigAddBlockListenerForKey(VectorKitDebugConfig_HikingDisplayEnabled[0], VectorKitDebugConfig_HikingDisplayEnabled[1], &_dispatch_main_q, v22);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    objc_msgSend(v14, "addObject:", v16);

    v17 = (void *)v9[12];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100733334;
    v20[3] = &unk_1011C4EB0;
    v20[4] = v9;
    objc_copyWeak(&v21, location);
    v18 = _GEOConfigAddBlockListenerForKey(VectorKitDebugConfig_ContourLineDoDepthBias[0], VectorKitDebugConfig_ContourLineDoDepthBias[1], &_dispatch_main_q, v20);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    objc_msgSend(v17, "addObject:", v19);

    objc_destroyWeak(&v21);
    objc_destroyWeak(&v23);
    objc_destroyWeak(&v25);
  }

  objc_destroyWeak(&v27);
  objc_destroyWeak(location);

}

void sub_100732810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
  id *v9;
  uint64_t v10;

  objc_destroyWeak(v9);
  objc_destroyWeak((id *)(v10 - 112));
  _Unwind_Resume(a1);
}

void sub_10073286C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Override Hiking Features"), &stru_1011C4AE8, &stru_1011C4B08);
  if (GEOConfigGetBOOL(VectorKitDebugConfig_HikingOverrideEnabled[0], VectorKitDebugConfig_HikingOverrideEnabled[1]))
  {
    v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Show Hillshade"), &stru_1011C4B28, &stru_1011C4B48);
    v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Show Hiking"), &stru_1011C4B68, &stru_1011C4B88);
    if (GEOConfigGetBOOL(VectorKitDebugConfig_HikingDisplayEnabled[0], VectorKitDebugConfig_HikingDisplayEnabled[1]))v5 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v6, "addSwitchRowWithTitle:get:set:", CFSTR("Show Topographic Features"), &stru_1011C4BA8, &stru_1011C4BC8);
  }

}

BOOL sub_100732954(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_HikingOverrideEnabled[0], VectorKitDebugConfig_HikingOverrideEnabled[1]);
}

void sub_100732964(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_HikingOverrideEnabled[0], VectorKitDebugConfig_HikingOverrideEnabled[1], a2);
}

BOOL sub_100732978(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_HillshadeDisplayEnabled[0], VectorKitDebugConfig_HillshadeDisplayEnabled[1]);
}

void sub_100732988(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_HillshadeDisplayEnabled[0], VectorKitDebugConfig_HillshadeDisplayEnabled[1], a2);
}

BOOL sub_10073299C(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_HikingDisplayEnabled[0], VectorKitDebugConfig_HikingDisplayEnabled[1]);
}

void sub_1007329AC(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_HikingDisplayEnabled[0], VectorKitDebugConfig_HikingDisplayEnabled[1], a2);
}

BOOL sub_1007329C0(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_TopographicDisplayEnabled[0], VectorKitDebugConfig_TopographicDisplayEnabled[1]);
}

void sub_1007329D0(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_TopographicDisplayEnabled[0], VectorKitDebugConfig_TopographicDisplayEnabled[1], a2);
}

void sub_1007329E4(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Enable Trail Selection"), &stru_1011C4C08, &stru_1011C4C28);
}

BOOL sub_100732A1C(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_DebugEnableHikingTrailSelectioniOS, off_1014B5088);
}

void sub_100732A2C(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsConfig_DebugEnableHikingTrailSelectioniOS, off_1014B5088, a2);
}

void sub_100732A40(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t, float);
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Use Debug Setting For Hillshade"), &stru_1011C4C48, &stru_1011C4C68);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100732C8C;
  v16[3] = &unk_1011C1BD0;
  objc_copyWeak(&v17, (id *)(a1 + 32));
  LODWORD(v5) = 0;
  LODWORD(v6) = 1.0;
  v7 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Hillshade Opacity"), CFSTR("%.1f"), &stru_1011C4C88, v16, v5, v6);
  v11 = _NSConcreteStackBlock;
  v12 = 3221225472;
  v13 = sub_100732D34;
  v14 = &unk_1011C1BD0;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  LODWORD(v8) = 1.0;
  LODWORD(v9) = 18.0;
  v10 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Hillshade Blend Mode"), CFSTR("%.1f"), &stru_1011C4CA8, &v11, v8, v9);
  objc_msgSend(v3, "setFooter:", CFSTR(" Normal = 0, Multiply = 1, Screen = 2, Overlay = 3, Darken = 4, Lighten = 5, ColorDodge = 6, ColorBur = 7, Difference = 8, Exclusion = 9, HardLight = 10, SoftLight = 11, Hue = 12, Saturation = 13, Color = 14, Luminosity = 15, LinearBurn = 16, LinearDodge = 17, Desaturate = 18"), v11, v12, v13, v14);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v17);

}

void sub_100732BA0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100732BC8(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  v2 = objc_msgSend(v1, "enableDebugSettingForHillShade");

  return v2;
}

void sub_100732C04(id a1, BOOL a2)
{
  _BOOL8 v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v3, "setEnableDebugSettingForHillShade:", v2);

}

float sub_100732C48(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "hillshadeOpacity");
  v3 = v2;

  return v3;
}

void sub_100732C8C(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setHillshadeOpacity:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

float sub_100732CF0(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "hillshadeBlendMode");
  v3 = v2;

  return v3;
}

void sub_100732D34(uint64_t a1, float a2)
{
  void *v4;
  double v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v5 = a2;
  objc_msgSend(v4, "setHillshadeBlendMode:", v5);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setAllMapLayersNeedLayout");

}

void sub_100732D98(id a1, MapsDebugTableSection *a2)
{
  id v2;
  double v3;
  double v4;
  id v5;
  double v6;
  double v7;
  id v8;
  id v9;
  double v10;
  double v11;
  id v12;
  double v13;
  double v14;
  id v15;
  double v16;
  double v17;
  id v18;
  MapsDebugTableSection *v19;

  v19 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v19, "addSwitchRowWithTitle:get:set:", CFSTR("Do Contour Line Depth Bias"), &stru_1011C4CE8, &stru_1011C4D08);
  if (GEOConfigGetBOOL(VectorKitDebugConfig_ContourLineDoDepthBias[0], VectorKitDebugConfig_ContourLineDoDepthBias[1]))
  {
    LODWORD(v3) = -943501440;
    LODWORD(v4) = -2.0;
    v5 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v19, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Contour Line Depth Bias"), CFSTR("%.1f"), &stru_1011C4D28, &stru_1011C4D48, v3, v4);
    LODWORD(v6) = -1010302976;
    LODWORD(v7) = -2.0;
    v8 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v19, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Contour Line Depth Slope Scale"), CFSTR("%.1f"), &stru_1011C4D68, &stru_1011C4D88, v6, v7);
  }
  LODWORD(v4) = 1117782016;
  LODWORD(v3) = -1.0;
  v9 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v19, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Pitch Fade Contour Line (degrees)"), CFSTR("%.1f"), &stru_1011C4DA8, &stru_1011C4DC8, v3, v4);
  LODWORD(v10) = 0;
  LODWORD(v11) = 1.0;
  v12 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v19, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Contour Line Alpha When Pitched"), CFSTR("%.1f"), &stru_1011C4DE8, &stru_1011C4E08, v10, v11);
  LODWORD(v13) = -1.0;
  LODWORD(v14) = 0;
  v15 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v19, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Trail/Junction Elevation Offset"), CFSTR("%.01f"), &stru_1011C4E28, &stru_1011C4E48, v13, v14);
  LODWORD(v16) = 1118437376;
  LODWORD(v17) = -1.0;
  v18 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v19, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Pitch to Disable DaVinci Animation"), CFSTR("%.1f"), &stru_1011C4E68, &stru_1011C4E88, v17, v16);

}

BOOL sub_100732F58(id a1)
{
  return GEOConfigGetBOOL(VectorKitDebugConfig_ContourLineDoDepthBias[0], VectorKitDebugConfig_ContourLineDoDepthBias[1]);
}

void sub_100732F68(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VectorKitDebugConfig_ContourLineDoDepthBias[0], VectorKitDebugConfig_ContourLineDoDepthBias[1], a2);
}

float sub_100732F7C(id a1)
{
  return GEOConfigGetDouble(VectorKitDebugConfig_ContourLineDepthBias[0], VectorKitDebugConfig_ContourLineDepthBias[1]);
}

void sub_100732FA0(id a1, float a2)
{
  GEOConfigSetDouble(VectorKitDebugConfig_ContourLineDepthBias[0], VectorKitDebugConfig_ContourLineDepthBias[1], a2);
}

float sub_100732FB4(id a1)
{
  return GEOConfigGetDouble(VectorKitDebugConfig_ContourLineDepthSlopeScale[0], VectorKitDebugConfig_ContourLineDepthSlopeScale[1]);
}

void sub_100732FD8(id a1, float a2)
{
  GEOConfigSetDouble(VectorKitDebugConfig_ContourLineDepthSlopeScale[0], VectorKitDebugConfig_ContourLineDepthSlopeScale[1], a2);
}

float sub_100732FEC(id a1)
{
  return GEOConfigGetDouble(VectorKitDebugConfig_ContourLinePitchFade[0], VectorKitDebugConfig_ContourLinePitchFade[1]);
}

void sub_100733010(id a1, float a2)
{
  GEOConfigSetDouble(VectorKitDebugConfig_ContourLinePitchFade[0], VectorKitDebugConfig_ContourLinePitchFade[1], a2);
}

float sub_100733024(id a1)
{
  return GEOConfigGetDouble(VectorKitDebugConfig_ContourLinePitchFadeAlpha[0], VectorKitDebugConfig_ContourLinePitchFadeAlpha[1]);
}

void sub_100733048(id a1, float a2)
{
  GEOConfigSetDouble(VectorKitDebugConfig_ContourLinePitchFadeAlpha[0], VectorKitDebugConfig_ContourLinePitchFadeAlpha[1], a2);
}

float sub_10073305C(id a1)
{
  void *v1;
  float v2;
  float v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  objc_msgSend(v1, "trailJunctionElevationOffset");
  v3 = v2;

  return v3;
}

void sub_1007330A0(id a1, float a2)
{
  double v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings"));
  *(float *)&v3 = a2;
  objc_msgSend(v4, "setTrailJunctionElevationOffset:", v3);

}

float sub_1007330E4(id a1)
{
  return GEOConfigGetDouble(VectorKitDebugConfig_DaVinciTransitionAnimationPitch[0], VectorKitDebugConfig_DaVinciTransitionAnimationPitch[1]);
}

void sub_100733108(id a1, float a2)
{
  GEOConfigSetDouble(VectorKitDebugConfig_DaVinciTransitionAnimationPitch[0], VectorKitDebugConfig_DaVinciTransitionAnimationPitch[1], a2);
}

void sub_10073311C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 96);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        MapsFeature_RemoveBlockListener(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "rebuildSections", (_QWORD)v8);

}

void sub_100733228(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 96);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        MapsFeature_RemoveBlockListener(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "rebuildSections", (_QWORD)v8);

}

void sub_100733334(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 96);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        MapsFeature_RemoveBlockListener(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "rebuildSections", (_QWORD)v8);

}

void sub_100733538(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  int8x16_t v6;
  _QWORD block[4];
  int8x16_t v8;
  uint64_t v9;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (v3 + 1 < (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count"))
      v4 = v3 + 1;
    else
      v4 = 0;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007335E4;
    block[3] = &unk_1011B15B0;
    v9 = v4;
    v6 = *(int8x16_t *)(a1 + 32);
    v5 = (id)v6.i64[0];
    v8 = vextq_s8(v6, v6, 8uLL);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

id sub_1007335E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "runNextTourIndex:withTours:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_10073363C(id a1, unint64_t a2)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOTileLoader modernLoader](GEOTileLoader, "modernLoader"));
  objc_msgSend(v2, "clearAllCaches");

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

void sub_100733A98(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100733AB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    else
      objc_msgSend(WeakRetained, "_submitOrEnqueueFeedback:attachedImages:resolvedUserInfo:traits:debugSettings:uploadPolicy:feedbackObjectToUpdate:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v8, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  }

}

void sub_1007340E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location)
{
  id *v37;

  objc_destroyWeak(v37);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100734104(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  id v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;
  uint8_t buf[4];
  id v28;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v9 = sub_100431FFC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = v10;
    if (v7)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v28 = v7;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed image upload request (handshake) with error %@", buf, 0xCu);
      }

      v12 = *(_QWORD *)(a1 + 64);
      if (v12)
        (*(void (**)(uint64_t, id, id))(v12 + 16))(v12, v6, v7);
    }
    else
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Finished image upload request (handshake)", buf, 2u);
      }

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "feedbackResult"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "imageUploadResult"));
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100734368;
      v25[3] = &unk_1011C4F80;
      v15 = *(_QWORD *)(a1 + 32);
      v26 = *(id *)(a1 + 40);
      objc_msgSend(v14, "enumerateAndMatchPhotosWithMetadata:withBlock:", v15, v25);

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_feedbackUploaderForUploadPolicy:", *(_QWORD *)(a1 + 80)));
      v22 = *(_QWORD *)(a1 + 32);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "feedbackResult"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "imageUploadResult"));
      v19 = *(_QWORD *)(a1 + 40);
      v20 = *(_QWORD *)(a1 + 48);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_1007343F8;
      v23[3] = &unk_1011C4FA8;
      v21 = *(_QWORD *)(a1 + 56);
      v24 = *(id *)(a1 + 64);
      objc_msgSend(v16, "submitPhotosWithMetadata:withImageUploadResult:withCorrectionsRequest:traits:parentProgress:completion:", v22, v18, v19, v20, v21, v23);

    }
  }

}

void sub_100734368(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "feedbackRequestParameters"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "submissionParameters"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "imageId"));

  objc_msgSend(v7, "appendServerImageId:withMatchingPhoto:", v8, v5);
}

uint64_t sub_1007343F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10073471C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v7 = a2;
  v8 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100734810;
  block[3] = &unk_1011C4FF8;
  v13 = a4;
  v14 = *(id *)(a1 + 32);
  v15 = v7;
  v16 = v8;
  v17 = *(id *)(a1 + 40);
  v9 = v8;
  v10 = v7;
  v11 = v13;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100734810(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = sub_100431FFC();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v10 = 138412290;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed certificate fetch with error %@", (uint8_t *)&v10, 0xCu);
    }

  }
  v5 = objc_msgSend(*(id *)(a1 + 48), "copy");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tdmUserInfo"));
  objc_msgSend(v6, "setBaaCertificates:", v5);

  v7 = *(_QWORD *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tdmUserInfo"));
  objc_msgSend(v8, "setBaaSignature:", v7);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_100734A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100734AB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    else
      objc_msgSend(WeakRetained, "_submitOrEnqueueFeedback:resolvedUserInfo:traits:debugSettings:uploadPolicy:feedbackObjectToUpdate:completion:", *(_QWORD *)(a1 + 32), v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }

}

uint64_t sub_100734DC0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100735624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100735648(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = sub_100431FFC();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = v9;
    if (!v5 || v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to retrieve Fraud Report Score with error %@ or fraudReportResponse is nil", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v11 = 138412290;
        v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Successfully received Fraud Report: %@", (uint8_t *)&v11, 0xCu);
      }

      objc_msgSend(WeakRetained, "_sendTdmFraudNotificationWithFraudReportResponse:tdmRequestInfo:", v5, *(_QWORD *)(a1 + 32));
    }
  }

}

void sub_1007359E0(id a1, GEORPFeedbackResponse *a2, NSData *a3, NSError *a4)
{
  GEORPFeedbackResponse *v5;
  NSError *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  void *v14;

  v5 = a2;
  v6 = a4;
  v7 = sub_100431FFC();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (!v5 || v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v13 = 138412290;
      v14 = v6;
      v10 = "Failed to send TDM Notification with error %@ or response is nil";
      v11 = v9;
      v12 = OS_LOG_TYPE_ERROR;
      goto LABEL_7;
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v13 = 138412290;
    v14 = v5;
    v10 = "Successfully send TDM Fraud Notification... response status: %@";
    v11 = v9;
    v12 = OS_LOG_TYPE_DEBUG;
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v13, 0xCu);
  }

}

void sub_1007362C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1007362EC(uint64_t a1, void *a2, uint64_t a3)
{
  double v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  objc_msgSend(v7, "distance");
  if (v5 <= *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(v7, "distance");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  }

}

void sub_100736418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10073643C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >= (double)objc_msgSend(v5, "expectedTime"))
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (double)objc_msgSend(v5, "expectedTime");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  }

}

id sub_100736BC8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "_maps_isEqualToComposedRoute:", *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
    *a4 = 1;
  return result;
}

NSUUID *__cdecl sub_100736C3C(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return (NSUUID *)-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3);
}

void sub_1007395AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007395D0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "done");

}

UIColor *__cdecl sub_100739E68(id a1, MapsTheme *a2)
{
  return -[MapsTheme keyColor](a2, "keyColor");
}

RouteMarkerFormatterInfo *__cdecl sub_10073AD8C(id a1, GEOComposedRouteLeg *a2, unint64_t a3)
{
  double v3;
  uint64_t v4;
  void *v5;
  RouteMarkerFormatterInfo *v6;

  -[GEOComposedRouteLeg travelDuration](a2, "travelDuration", a3);
  v4 = GEOStringForDuration(2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = -[RouteMarkerFormatterInfo initWithRouteDescription:etaComparison:tollCurrency:styleAttributes:]([RouteMarkerFormatterInfo alloc], "initWithRouteDescription:etaComparison:tollCurrency:styleAttributes:", v5, 0, 0, 0);

  return v6;
}

void sub_10073C528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10073C594(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didTapWebsiteButton");

}

void sub_10073C5C0(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionDelegate"));
  objc_msgSend(v1, "didSelectAllGuidesMenuItem");

}

void sub_10073E9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10073EA18(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateConstraints");
    WeakRetained = v2;
  }

}

void sub_10073FE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10073FEB8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 56) = 0;
  return result;
}

void sub_10073FEC4(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  id v12;
  _QWORD v13[5];
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v3 = a2;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100740050;
    v14[3] = &unk_1011ADF48;
    v14[4] = WeakRetained;
    v14[5] = &v15;
    geo_isolate_sync_data(v5, v14);
    if (!*((_BYTE *)v16 + 24))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100740064;
      v13[3] = &unk_1011AC860;
      v13[4] = WeakRetained;
      geo_isolate_sync(v6, v13);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[2], "_maps_mapsSceneDelegate"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rapPresenter"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100740070;
      v11[3] = &unk_1011C5220;
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(id *)(a1 + 48);
      v11[4] = WeakRetained;
      v12 = v10;
      objc_msgSend(v8, "presentPlacecardImageryRAPWithContext:layoutManager:popoverPresentationBlock:completion:", v9, v3, v11, 0);

    }
  }

  _Block_object_dispose(&v15, 8);
}

void sub_100740038(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100740050(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 56);
  return result;
}

uint64_t sub_100740064(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 56) = 0;
  return result;
}

void sub_100740070(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, *(_QWORD *)(a1 + 32));
  objc_msgSend(v4, "setSourceView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "bounds");
  objc_msgSend(v4, "setSourceRect:");
  objc_msgSend(v4, "setPermittedArrowDirections:", 15);

}

uint64_t sub_10074013C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 56) = 1;
  return result;
}

id sub_1007404FC(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  v4 = sub_100431A4C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v8 = 134217984;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "AppLaunchNavTraceAlert: button = %ld", (uint8_t *)&v8, 0xCu);
  }

  if (!a2)
  {
    v6 = 1;
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    v6 = 0;
LABEL_7:
    GEOConfigSetInteger(GeoServicesConfig_EnableFullNavTraceLogMessages[0], GeoServicesConfig_EnableFullNavTraceLogMessages[1], v6);
  }
  return objc_msgSend(*(id *)(a1 + 32), "_alertDidFinishProcessing");
}

void sub_10074091C(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager _maps_globalCachesURL](NSFileManager, "_maps_globalCachesURL"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLByAppendingPathComponent:", CFSTR("ARTraces")));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "path"));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByAppendingPathComponent:", CFSTR("ppt_ar_recording.mov")));
  v4 = (void *)qword_1014D2FE0;
  qword_1014D2FE0 = v3;

}

id sub_100740CFC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("showARUI"));
  return _objc_msgSend(*(id *)(a1 + 32), "_runARLocalization");
}

void sub_100740DA8(uint64_t a1, void *a2)
{
  unsigned int v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  v3 = objc_msgSend(v5, "wasLastLocalizationSuccessful");
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend(v4, "finishedSubTest:", CFSTR("runARLocalization"));
    objc_msgSend(*(id *)(a1 + 32), "_displayARElement");
  }
  else
  {
    objc_msgSend(v4, "failedTestWithReason:", CFSTR("AR localization failed"));
  }

}

id sub_100740E90(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("displayARElement"));
  return _objc_msgSend(*(id *)(a1 + 32), "_dismissARUI");
}

void sub_100740F7C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("dismissARUI"));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  objc_msgSend(v2, "pptTestExitAR");

}

id sub_100740FC8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("dismissARUI"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_100741E84(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("PPTTest_CitySelector_DidDisplaySections"), *(_QWORD *)(a1 + 32));

}

void sub_100742008(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id sub_10074203C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sections"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndex:", objc_msgSend(v8, "section")));

  if (!v12)
    goto LABEL_7;
  objc_msgSend(v12, "configuration");
  if (!v21)
  {

    goto LABEL_7;
  }
  objc_msgSend(v12, "configuration");

  if (v19 == 1)
  {
LABEL_7:
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[MKPlaceCompactCollectionCell reuseIdentifier](MKPlaceCompactCollectionCell, "reuseIdentifier"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v14, v8));

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logicController"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "compactCollectionAtIndex:sectionIndex:", objc_msgSend(v8, "item"), objc_msgSend(v8, "section")));
    objc_msgSend(v13, "configureWithModel:", v16);

    goto LABEL_8;
  }
  v13 = 0;
LABEL_8:

  return v13;
}

void sub_1007421C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

id sub_1007421D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  id *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v24;
  __int128 v25;

  v5 = a4;
  v6 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sections"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndex:", objc_msgSend(v5, "section")));

  v10 = objc_loadWeakRetained(v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "logicController"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "compactCollectionsInSection:", objc_msgSend(v5, "section")));

  if (!objc_msgSend(v12, "count"))
    goto LABEL_4;
  if (!v9)
  {
    v24 = 0u;
    v25 = 0u;
    goto LABEL_6;
  }
  objc_msgSend(v9, "configuration");
  v13 = *((_QWORD *)&v25 + 1);

  if (!v13)
  {
LABEL_6:
    v15 = objc_loadWeakRetained(v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "collectionView"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[GuidesGenericSectionHeader reuseIdentifier](GuidesGenericSectionHeader, "reuseIdentifier"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[GuidesGenericSectionHeader reuseIdentifier](GuidesGenericSectionHeader, "reuseIdentifier"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", v17, v18, v5));

    v19 = objc_loadWeakRetained(v6);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "logicController"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionTitle"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "titleForSectionFromTitle:", v21));
    objc_msgSend(v14, "configureWithTitle:", v22);

    goto LABEL_7;
  }
LABEL_4:
  v14 = 0;
LABEL_7:

  return v14;
}

void sub_100742474(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  void *v14;

  v5 = a2;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "configuration");

    if ((unint64_t)v13 > 1)
      goto LABEL_9;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logicController", v12, v13));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "compactCollectionsInSection:", a3));

  v9 = objc_msgSend(v8, "count");
  v10 = *(void **)(a1 + 40);
  if (v9)
  {
    objc_msgSend(v10, "appendItemsWithIdentifiers:intoSectionWithIdentifier:", v8, v6);
  }
  else
  {
    v14 = v6;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
    objc_msgSend(v10, "deleteSectionsWithIdentifiers:", v11);

  }
LABEL_9:

}

void sub_100742898(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "displayCitySelectorData");

}

void sub_100742F08(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFScanningStateMonitor");
  v2 = (void *)qword_1014D2FF0;
  qword_1014D2FF0 = (uint64_t)v1;

}

void sub_10074517C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  __CFString *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void *v21;

  v2 = sub_10074533C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = *(_QWORD **)(a1 + 32);
    v13 = v12[7];
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "window"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "recursiveDescription"));
    *(_DWORD *)buf = 138543874;
    v17 = v11;
    v18 = 2112;
    v19 = v13;
    v20 = 2112;
    v21 = v15;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "[%{public}@] Detected top label is truncated (%@): %@", buf, 0x20u);

  }
}

id sub_10074533C()
{
  if (qword_1014D3018 != -1)
    dispatch_once(&qword_1014D3018, &stru_1011C52F0);
  return (id)qword_1014D3010;
}

void sub_10074537C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  __CFString *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void *v21;

  v2 = sub_10074533C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
  {
    v4 = *(id *)(a1 + 32);
    v5 = v4;
    if (!v4)
    {
      v11 = CFSTR("<nil>");
      goto LABEL_10;
    }
    v6 = (objc_class *)objc_opt_class(v4);
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ((objc_opt_respondsToSelector(v5, "accessibilityIdentifier") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performSelector:", "accessibilityIdentifier"));
      v10 = v9;
      if (v9 && !objc_msgSend(v9, "isEqualToString:", v8))
      {
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p, %@>"), v8, v5, v10));

        goto LABEL_8;
      }

    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@<%p>"), v8, v5));
LABEL_8:

LABEL_10:
    v12 = *(_QWORD **)(a1 + 32);
    v13 = v12[8];
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "window"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "recursiveDescription"));
    *(_DWORD *)buf = 138543874;
    v17 = v11;
    v18 = 2112;
    v19 = v13;
    v20 = 2112;
    v21 = v15;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "[%{public}@] Detected bottom label is truncated (%@): %@", buf, 0x20u);

  }
}

void sub_100745E60(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarTwoPartLabel");
  v2 = (void *)qword_1014D3010;
  qword_1014D3010 = (uint64_t)v1;

}

void sub_100745ED0(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3020;
  qword_1014D3020 = (uint64_t)&off_101273B48;

}

void sub_100745F28(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3030;
  qword_1014D3030 = (uint64_t)&off_101273B60;

}

void sub_100745F80(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3040;
  qword_1014D3040 = (uint64_t)&off_101273B78;

}

void sub_100745FD8(id a1)
{
  RAPRecordMapsSync *v1;
  void *v2;

  v1 = objc_alloc_init(RAPRecordMapsSync);
  v2 = (void *)qword_1014D3050;
  qword_1014D3050 = (uint64_t)v1;

}

void sub_100746298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007462B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1007462C0(uint64_t a1)
{

}

void sub_1007462C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[4];
  void *v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    NSLog(CFSTR("%@"), v6);
    v8 = sub_10043299C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch all synced RAP records with error %@", buf, 0xCu);
    }

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObjectsFromArray:", v5);
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    (*(void (**)(uint64_t, _QWORD))(v10 + 16))(v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_1007464FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100746520(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = sub_10043299C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v13 = 138412290;
        v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to save synced RAP with error %@", (uint8_t *)&v13, 0xCu);
      }

      v10 = *(_QWORD *)(a1 + 40);
      if (v10)
        (*(void (**)(uint64_t, id))(v10 + 16))(v10, v6);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
      objc_msgSend(WeakRetained, "_buildMapsSyncRAPRecord:communityID:completion:", v11, v12, *(_QWORD *)(a1 + 40));

    }
  }

}

void sub_100746890(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = sub_10043299C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to save synced RAP with error %@", (uint8_t *)&v10, 0xCu);
    }

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      v8 = *(void (**)(void))(v7 + 16);
LABEL_10:
      v8();
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Successfully synced RAP", (uint8_t *)&v10, 2u);
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v8 = *(void (**)(void))(v9 + 16);
      goto LABEL_10;
    }
  }

}

void sub_100746B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100746BBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[4];
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v6)
    {
      NSLog(CFSTR("%@"), v6);
      v8 = sub_10043299C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch all synced RAP records with error %@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObjectsFromArray:", v5);
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
      (*(void (**)(uint64_t, id))(v10 + 16))(v10, v5);
  }

}

void sub_100746EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_100746F38(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }

}

void sub_100746F90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    NSLog(CFSTR("%@"), v6);
    v8 = sub_10043299C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch synced RAPRecord with error %@", buf, 0xCu);
    }

    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v7);
  }
  else
  {
    if ((unint64_t)objc_msgSend(v5, "count") >= 2)
    {
      v11 = sub_10043299C();
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "There is more than 1 RAP record in the sync db with the same Record Identifier", buf, 2u);
      }

    }
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setStatus:", *(__int16 *)(a1 + 48));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100747170;
    v17[3] = &unk_1011AE218;
    v18 = *(id *)(a1 + 32);
    objc_msgSend(v16, "saveWithObjects:completionHandler:", v5, v17);

  }
}

void sub_100747170(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = sub_10043299C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to commit edit to synced RAP status with error %@", (uint8_t *)&v10, 0xCu);
    }

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      v8 = *(void (**)(void))(v7 + 16);
LABEL_10:
      v8();
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Successfully updated synced RAP record with status", (uint8_t *)&v10, 2u);
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v8 = *(void (**)(void))(v9 + 16);
      goto LABEL_10;
    }
  }

}

void sub_10074736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100747384(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[4];
  void *v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    NSLog(CFSTR("%@"), v6);
    v8 = sub_10043299C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch all synced IncidentReports with error %@", buf, 0xCu);
    }

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObjectsFromArray:", v5);
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    (*(void (**)(uint64_t, _QWORD))(v10 + 16))(v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_1007475EC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = sub_10043299C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to save synced IncidentReport with error %@", (uint8_t *)&v10, 0xCu);
    }

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      v8 = *(void (**)(void))(v7 + 16);
LABEL_10:
      v8();
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Successfully synced IncidentReport!", (uint8_t *)&v10, 2u);
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v8 = *(void (**)(void))(v9 + 16);
      goto LABEL_10;
    }
  }

}

void sub_100748A04(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100748A20(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "startedTest");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "finishedTest");

}

id sub_100748AC8(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];

  objc_msgSend(*(id *)(a1 + 32), "startedTest");
  v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100748B30;
  v4[3] = &unk_1011AC860;
  v4[4] = v2;
  return objc_msgSend(v2, "rotateDeviceWithCompletion:", v4);
}

id sub_100748B30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

void sub_1007495F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100749624(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _URLKeyLabel *v15;

  v5 = a3;
  v6 = a2;
  v15 = -[_URLKeyLabel initWithString:color:]([_URLKeyLabel alloc], "initWithString:color:", v6, v5);

  if (*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) >= 1
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) & 1) == 0)
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                            + 24)
                                                                + 30.0;
  }
  -[_URLKeyLabel frame](v15, "frame");
  v9 = v8;
  v11 = v10;
  v12 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v13 = 20.0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "bounds", 20.0);
    v13 = (v14 + -20.0) * 0.5 + 20.0;
  }
  -[_URLKeyLabel setFrame:](v15, "setFrame:", v13, v12, v9, v11);
  objc_msgSend(*(id *)(a1 + 32), "addSubview:", v15);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

}

UIViewController *__cdecl sub_100749E14(id a1)
{
  return 0;
}

id sub_100749E1C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("doc.on.doc")));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100749F50;
  v7[3] = &unk_1011B2810;
  v8 = *(id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", CFSTR("Copy"), v2, 0, v7));

  v9 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:children:](UIMenu, "menuWithTitle:children:", &stru_1011EB268, v4));

  return v5;
}

void sub_100749F50(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeUTF8PlainText, "identifier"));
  objc_msgSend(v4, "setValue:forPasteboardType:", v2, v3);

}

id sub_10074A74C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v3;

  return objc_msgSend(*(id *)(a1 + 32), "_updateSubmitButton");
}

void sub_10074A798(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 88), a2);
  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_updateSubmitButton");

}

UIFont *__cdecl sub_10074AF8C(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKFontManager sharedManager](MKFontManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "boldBodyFont"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 24.0));

  return (UIFont *)v3;
}

void sub_10074B100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10074B118(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10074B128(uint64_t a1)
{

}

void sub_10074B130(double *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  double v7;
  double v8;
  id v9;
  void *v10;
  id obj;

  v6 = *((_QWORD *)a1 + 4);
  v7 = a1[7];
  v8 = a1[8];
  v9 = a2;
  objc_msgSend(v9, "convertPoint:fromView:", v6, v7, v8);
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "hitTest:withEvent:", *((_QWORD *)a1 + 5)));

  v10 = obj;
  if (obj)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*((_QWORD *)a1 + 6) + 8) + 40), obj);
    v10 = obj;
    *a4 = 1;
  }

}

id sub_10074B53C(uint64_t a1)
{
  double v1;

  v1 = 1.0;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setAlpha:", v1);
}

id sub_10074B63C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setAlpha:", *(double *)(a1 + 40));
}

void sub_10074C380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_10074C404(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v5, "lookAroundFloatingButtonsViewController:didSelectToggleLabels:", v4, v6);

  }
}

void sub_10074C468(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v5, "lookAroundFloatingButtonsViewController:didSelectImageryInfo:", v4, v6);

  }
}

void sub_10074C4CC(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    objc_msgSend(v5, "lookAroundFloatingButtonsViewController:didSelectReportAnIssue:", v4, v6);

  }
}

void sub_10074D774(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  id v5;

  if (*(_BYTE *)(a1 + 48))
    v2 = 0.0;
  else
    v2 = -10.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "_setTouchInsets:", -10.0, -10.0, -10.0, v2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setActive:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setActive:", *(_BYTE *)(a1 + 48) == 0);
  v3 = 1.0;
  if (!*(_BYTE *)(a1 + 48))
    v3 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setAlpha:", v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setHidden:", 0);
  if (*(_BYTE *)(a1 + 48))
    v4 = 0.0;
  else
    v4 = -10.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "_setTouchInsets:", -10.0, v4, -10.0, -10.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setActive:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setActive:", *(_BYTE *)(a1 + 48) == 0);
  objc_msgSend(*(id *)(a1 + 32), "_setCornerRadiiWithTraitCollection:", *(_QWORD *)(a1 + 40));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v5, "layoutIfNeeded");

}

id sub_10074D8B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "setHidden:", *(_BYTE *)(a1 + 40) == 0);
}

uint64_t sub_10074D8D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10074D8E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10074ED18()
{
  if (qword_1014D3068 != -1)
    dispatch_once(&qword_1014D3068, &stru_1011C5718);
  return (id)qword_1014D3060;
}

id sub_10074EF70(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateState");
}

void sub_10074EF78(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionThermalStateMonitor");
  v2 = (void *)qword_1014D3060;
  qword_1014D3060 = (uint64_t)v1;

}

id sub_10074F394()
{
  if (qword_1014D3078 != -1)
    dispatch_once(&qword_1014D3078, &stru_1011C5738);
  return (id)qword_1014D3070;
}

void sub_10074FD44(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFPuckAnimationTask");
  v2 = (void *)qword_1014D3070;
  qword_1014D3070 = (uint64_t)v1;

}

void sub_10074FEE8(id a1)
{
  objc_class *v1;
  objc_method *InstanceMethod;
  objc_class *v3;
  objc_method *v4;

  v1 = (objc_class *)objc_opt_class(UIApplication);
  InstanceMethod = class_getInstanceMethod(v1, "sendEvent:");
  v3 = (objc_class *)objc_opt_class(UIApplication);
  v4 = class_getInstanceMethod(v3, "__mapsEventRecorder_sendEvent:");
  method_exchangeImplementations(InstanceMethod, v4);
}

id sub_100750008()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1014D3090;
  v7 = qword_1014D3090;
  if (!qword_1014D3090)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100751EA8;
    v3[3] = &unk_1011AFF60;
    v3[4] = &v4;
    sub_100751EA8((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1007500A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1007500C0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  if (a2)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "description"));
    NSLog(CFSTR("Screen recording start failed with error: %@"), v5);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setRecording:", 1);
    objc_msgSend(*(id *)(a1 + 32), "addNavigationBarView");
    v3 = +[GEOEventRecorderInstrumentation initializeDefaultInstrumentation](GEOEventRecorderInstrumentation, "initializeDefaultInstrumentation");
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      (*(void (**)(void))(v4 + 16))();
    objc_msgSend(*(id *)(a1 + 32), "hideLoadingIndicator");
  }
}

void sub_100750224(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
    NSLog(CFSTR("Screen recording end failed with error: %@"), v7, v11);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GEOEventRecorderInstrumentation defaultInstrumentation](GEOEventRecorderInstrumentation, "defaultInstrumentation"));
    objc_msgSend(v7, "captureEventRecorderScreenVideo");
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GEOEventRecorderInstrumentation defaultInstrumentation](GEOEventRecorderInstrumentation, "defaultInstrumentation"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getRecordedFilePaths"));

  if (objc_msgSend(*(id *)(a1 + 32), "tapToRadarEnabled"))
    objc_msgSend(*(id *)(a1 + 32), "attachTapToRadarWithPaths:", v9);
  objc_msgSend(*(id *)(a1 + 32), "saveVideoFileToPhotoLibraryWithPaths:", v9);
  +[GEOEventRecorderInstrumentation endInstrumentation](GEOEventRecorderInstrumentation, "endInstrumentation");
  objc_msgSend(*(id *)(a1 + 32), "removeNavigationBarView");
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();
  objc_msgSend(*(id *)(a1 + 32), "hideLoadingIndicator");

}

id sub_1007517D4(uint64_t a1)
{
  id WeakRetained;
  double v3;
  double v4;
  id v5;
  double v6;
  double v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v15[5];

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(WeakRetained, "safeAreaInsets");
  v4 = v3;

  v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(v5, "frame");
  v7 = v6;

  v8 = objc_msgSend(objc_alloc((Class)UIView), "initWithFrame:", 0.0, 0.0, v4, v7);
  objc_msgSend(*(id *)(a1 + 32), "setNavigationBarView:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.0, 0.478431373, 1.0, 1.0));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBarView"));
  objc_msgSend(v10, "setBackgroundColor:", v9);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBarView"));
  objc_msgSend(v11, "setAlpha:", 0.0);

  v12 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBarView"));
  objc_msgSend(v12, "addSubview:", v13);

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100751954;
  v15[3] = &unk_1011AC860;
  v15[4] = *(_QWORD *)(a1 + 32);
  return +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v15, 0.3);
}

void sub_100751954(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBarView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

id sub_1007519E0(uint64_t a1)
{
  _QWORD v2[5];
  _QWORD v3[4];
  uint64_t v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100751A6C;
  v3[3] = &unk_1011AC860;
  v4 = *(_QWORD *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100751AA0;
  v2[3] = &unk_1011AE8F8;
  v2[4] = v4;
  return +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v3, v2, 0.3);
}

void sub_100751A6C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBarView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

id sub_100751AA0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationBarView"));
  objc_msgSend(v2, "removeFromSuperview");

  return objc_msgSend(*(id *)(a1 + 32), "setNavigationBarView:", 0);
}

void sub_100751B34(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  v2 = objc_msgSend(objc_alloc((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 101);
  objc_msgSend(*(id *)(a1 + 32), "setLoadingIndicator:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor grayColor](UIColor, "grayColor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingIndicator"));
  objc_msgSend(v4, "setColor:", v3);

  objc_msgSend(WeakRetained, "frame");
  v6 = v5 * 0.5;
  objc_msgSend(WeakRetained, "frame");
  v8 = v7 * 0.5;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingIndicator"));
  objc_msgSend(v9, "setCenter:", v6, v8);

  v10 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingIndicator"));
  objc_msgSend(v10, "addSubview:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingIndicator"));
  objc_msgSend(v12, "startAnimating");

}

id sub_100751CB8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingIndicator"));
  objc_msgSend(v2, "stopAnimating");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingIndicator"));
  objc_msgSend(v3, "removeFromSuperview");

  return objc_msgSend(*(id *)(a1 + 32), "setLoadingIndicator:", 0);
}

Class sub_100751EA8(uint64_t a1)
{
  const char *v2;
  char *v3;
  Class result;
  char *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  v2 = (const char *)&qword_1014D3000;
  if (!qword_1014D3098)
  {
    v6 = off_1011C57C8;
    v7 = 0;
    qword_1014D3098 = _sl_dlopen(&v6, &v5);
    v3 = v5;
    if (!qword_1014D3098)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }
    if (v5)
      goto LABEL_8;
  }
  while (1)
  {
    v2 = "RPScreenRecorder";
    result = objc_getClass("RPScreenRecorder");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }
  qword_1014D3090 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100753DC4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t CTGreenTeaOsLogHandle;
  void *v16;

  v11 = a1;
  v12 = a3;
  v13 = objc_retainAutorelease(v11);
  v14 = ct_green_tea_logger_create_static(objc_msgSend(v13, "UTF8String"));
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(CTGreenTeaOsLogHandle);
  if (v16)
    os_log_with_args(v16, 1, objc_msgSend(objc_retainAutorelease(v12), "UTF8String"), &a9, v9);

}

void sub_100753E60()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  if (qword_1014D30B8 != -1)
    dispatch_once(&qword_1014D30B8, &stru_1011C57E0);
  v0 = (void *)qword_1014D30A0;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  sub_100753DC4(v0, 0, CFSTR("%@ <%@>[Maps][%@] : Reading photos or videos"), v1, v2, v3, v4, v5, (uint64_t)v6);

}

void sub_100753EE8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  if (qword_1014D30B8 != -1)
    dispatch_once(&qword_1014D30B8, &stru_1011C57E0);
  v0 = (void *)qword_1014D30A0;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  sub_100753DC4(v0, 0, CFSTR("%@ <%@>[Maps][%@] : Transmitting photos or videos"), v1, v2, v3, v4, v5, (uint64_t)v6);

}

void sub_100753F70(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleIdentifier"));
  v2 = (void *)qword_1014D30A0;
  qword_1014D30A0 = v1;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForInfoDictionaryKey:", CFSTR("CFBundleDisplayName")));
  v4 = (void *)qword_1014D30A8;
  qword_1014D30A8 = v3;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "processName"));
  v7 = (void *)qword_1014D30B0;
  qword_1014D30B0 = v6;

}

const __CFString *sub_100754010(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR(".Unknown");
  else
    return *(&off_1011C5800 + a1);
}

UIFont *__cdecl sub_1007543C0(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont system15](UIFont, "system15"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_mapkit_fontByAddingFeaturesForTimeDisplay"));

  return (UIFont *)v2;
}

void sub_100754718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100754740(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD block[4];
  id v12;
  uint64_t v13;
  void *v14;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007547E8;
    block[3] = &unk_1011AD238;
    v9 = v6;
    v10 = *(_QWORD *)(a1 + 32);
    v12 = v9;
    v13 = v10;
    v14 = v8;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_1007547E8(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t (**v4)(_QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;

  v2 = objc_msgSend(objc_alloc((Class)UIImage), "initWithData:", *(_QWORD *)(a1 + 32));
  if (v2)
  {
    v8 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "iconProcessingHandler"));

    if (v3)
    {
      v4 = (uint64_t (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "iconProcessingHandler"));
      v5 = ((uint64_t (**)(_QWORD, id))v4)[2](v4, v8);
      v6 = objc_claimAutoreleasedReturnValue(v5);

      v7 = (id)v6;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = v7;
  objc_msgSend(*(id *)(a1 + 48), "setArtwork:", v7);

}

void sub_1007571B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100757248(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100757720(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100757BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(v2 + 208);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100757C10;
  v5[3] = &unk_1011B1BE0;
  v5[4] = v2;
  return objc_msgSend(v3, "applyToCollection:completion:", v1, v5);
}

void sub_100757C10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  if (a2)
  {
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("[Collection] Error"), CFSTR("localized string not found"), 0));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));

    v10 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v5, v6, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("[Collection] Ok"), CFSTR("localized string not found"), 0));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v8, 0, &stru_1011C5838));

    objc_msgSend(v10, "addAction:", v9);
    objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v10, 1, 0);

  }
}

uint64_t sub_100757D64(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setName:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100757E0C(id a1)
{
  ThermalStateFloatingDebugViewController *v1;
  void *v2;

  v1 = objc_opt_new(ThermalStateFloatingDebugViewController);
  v2 = (void *)qword_1014D30C0;
  qword_1014D30C0 = (uint64_t)v1;

}

id sub_100757F44()
{
  if (qword_1014D30E8 != -1)
    dispatch_once(&qword_1014D30E8, &stru_1011C5898);
  return (id)qword_1014D30E0;
}

void sub_100758CC0(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1014D30D8;
  qword_1014D30D8 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D30D8, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSSSSSZZZ"));
  v3 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend((id)qword_1014D30D8, "setLocale:", v3);

}

void sub_100758FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100759020(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateDebugText");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "startDebugInfoRefreshTimer");

}

void sub_10075916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100759190(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "composeTTR");

}

void sub_1007594AC(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateTintAndIconLabel");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "updateDebugText");

}

void sub_100759580(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ThermalStateFloatingDebugViewController");
  v2 = (void *)qword_1014D30E0;
  qword_1014D30E0 = (uint64_t)v1;

}

void sub_100759D00(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)ASCLockupViewGroup), "initWithName:", CFSTR("RoutingApps"));
  v2 = (void *)qword_1014D30F0;
  qword_1014D30F0 = (uint64_t)v1;

}

void sub_10075A40C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleIdentifier"));
  LODWORD(v3) = objc_msgSend(v3, "isEqualToString:", v5);

  if ((_DWORD)v3)
  {
    v6 = *(void **)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "appProxy"));
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_lockupWithAppProxy:appIcon:", v7, v11));
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(void **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v8;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 64), "setLockup:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16));
  }

}

void sub_10075A734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10075A760(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v2, "routingAppSelectionCellRoutePressed:", v3);

}

void sub_10075AD9C(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  _QWORD v69[33];
  _QWORD v70[33];

  v69[0] = CFSTR("MKDirectionsTransportTypeCar");
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Car"), CFSTR("localized string not found"), 0));
  v70[0] = v67;
  v69[1] = CFSTR("MKDirectionsTransportTypeBus");
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Bus"), CFSTR("localized string not found"), 0));
  v70[1] = v65;
  v69[2] = CFSTR("MKDirectionsTransportTypeTrain");
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Train"), CFSTR("localized string not found"), 0));
  v70[2] = v63;
  v69[3] = CFSTR("MKDirectionsTransportTypeSubway");
  v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Subway"), CFSTR("localized string not found"), 0));
  v70[3] = v61;
  v69[4] = CFSTR("MKDirectionsTransportTypeStreetCar");
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "localizedStringForKey:value:table:", CFSTR("RoutingMode.StreetCar"), CFSTR("localized string not found"), 0));
  v70[4] = v59;
  v69[5] = CFSTR("MKDirectionsTransportTypePlane");
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Plane"), CFSTR("localized string not found"), 0));
  v70[5] = v57;
  v69[6] = CFSTR("MKDirectionsTransportTypeBike");
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Bike"), CFSTR("localized string not found"), 0));
  v70[6] = v55;
  v69[7] = CFSTR("MKDirectionsTransportTypeFerry");
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Ferry"), CFSTR("localized string not found"), 0));
  v70[7] = v53;
  v69[8] = CFSTR("MKDirectionsTransportTypeTaxi");
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Taxi"), CFSTR("localized string not found"), 0));
  v70[8] = v51;
  v69[9] = CFSTR("MKDirectionsTransportTypePedestrian");
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Pedestrian"), CFSTR("localized string not found"), 0));
  v70[9] = v49;
  v69[10] = CFSTR("MKDirectionsTransportTypeOther");
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Other"), CFSTR("localized string not found"), 0));
  v70[10] = v47;
  v69[11] = CFSTR("MKDirectionsModeCar");
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Car"), CFSTR("localized string not found"), 0));
  v70[11] = v45;
  v69[12] = CFSTR("MKDirectionsModeBus");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Bus"), CFSTR("localized string not found"), 0));
  v70[12] = v43;
  v69[13] = CFSTR("MKDirectionsModeTrain");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Train"), CFSTR("localized string not found"), 0));
  v70[13] = v41;
  v69[14] = CFSTR("MKDirectionsModeSubway");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Subway"), CFSTR("localized string not found"), 0));
  v70[14] = v39;
  v69[15] = CFSTR("MKDirectionsModeStreetCar");
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "localizedStringForKey:value:table:", CFSTR("RoutingMode.StreetCar"), CFSTR("localized string not found"), 0));
  v70[15] = v37;
  v69[16] = CFSTR("MKDirectionsModePlane");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Plane"), CFSTR("localized string not found"), 0));
  v70[16] = v35;
  v69[17] = CFSTR("MKDirectionsModeBike");
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Bike"), CFSTR("localized string not found"), 0));
  v70[17] = v33;
  v69[18] = CFSTR("MKDirectionsModeFerry");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Ferry"), CFSTR("localized string not found"), 0));
  v70[18] = v31;
  v69[19] = CFSTR("MKDirectionsModeTaxi");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Taxi"), CFSTR("localized string not found"), 0));
  v70[19] = v29;
  v69[20] = CFSTR("MKDirectionsModePedestrian");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Pedestrian"), CFSTR("localized string not found"), 0));
  v70[20] = v27;
  v69[21] = CFSTR("MKDirectionsModeOther");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Other"), CFSTR("localized string not found"), 0));
  v70[21] = v25;
  v69[22] = CFSTR("car");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Car"), CFSTR("localized string not found"), 0));
  v70[22] = v23;
  v69[23] = CFSTR("bus");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Bus"), CFSTR("localized string not found"), 0));
  v70[23] = v21;
  v69[24] = CFSTR("train");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Train"), CFSTR("localized string not found"), 0));
  v70[24] = v19;
  v69[25] = CFSTR("subway");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Subway"), CFSTR("localized string not found"), 0));
  v70[25] = v17;
  v69[26] = CFSTR("streetCar");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("RoutingMode.StreetCar"), CFSTR("localized string not found"), 0));
  v70[26] = v15;
  v69[27] = CFSTR("plane");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Plane"), CFSTR("localized string not found"), 0));
  v70[27] = v13;
  v69[28] = CFSTR("bike");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Bike"), CFSTR("localized string not found"), 0));
  v70[28] = v2;
  v69[29] = CFSTR("ferry");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Ferry"), CFSTR("localized string not found"), 0));
  v70[29] = v4;
  v69[30] = CFSTR("taxi");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Taxi"), CFSTR("localized string not found"), 0));
  v70[30] = v6;
  v69[31] = CFSTR("pedestrian");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Pedestrian"), CFSTR("localized string not found"), 0));
  v70[31] = v8;
  v69[32] = CFSTR("other");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("RoutingMode.Other"), CFSTR("localized string not found"), 0));
  v70[32] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v70, v69, 33));
  v12 = (void *)qword_1014D3108;
  qword_1014D3108 = v11;

}

uint64_t sub_10075BC64(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v5);
  if (v7 == objc_msgSend(*(id *)(a1 + 32), "containsObject:", v6))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "indexOfObject:", v5)));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "indexOfObject:", v6)));
    v8 = (uint64_t)objc_msgSend(v9, "compare:", v10);

  }
  else if (v7)
  {
    v8 = -1;
  }
  else
  {
    v8 = 1;
  }

  return v8;
}

DimmingBehaviour *sub_10075C278()
{
  return -[DimmingBehaviour initWithDimming:threshold:]([DimmingBehaviour alloc], "initWithDimming:threshold:", &stru_1011C5A20, &stru_1011C5A40);
}

double sub_10075C2A8(id a1, OverlayContainerViewController *a2, double a3)
{
  return 0.0;
}

unint64_t sub_10075C2B0(id a1, OverlayContainerViewController *a2)
{
  return 0;
}

DimmingBehaviour *sub_10075C2B8()
{
  return -[DimmingBehaviour initWithDimming:threshold:]([DimmingBehaviour alloc], "initWithDimming:threshold:", &stru_1011C5A60, &stru_1011C5A80);
}

double sub_10075C2E8(id a1, OverlayContainerViewController *a2, double a3)
{
  return 1.0;
}

unint64_t sub_10075C2F0(id a1, OverlayContainerViewController *a2)
{
  return 0;
}

unint64_t sub_10075C2F8(id a1, OverlayContainerViewController *a2)
{
  if ((id)-[ContainerViewController containerStyle](a2, "containerStyle") == (id)5)
    return 1;
  else
    return 2;
}

DimmingBehaviour *sub_10075C31C(void *a1)
{
  id v1;
  _QWORD *v2;
  DimmingBehaviour *v3;
  _QWORD v5[4];
  id v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10075C3BC;
  v5[3] = &unk_1011C5AC8;
  v6 = a1;
  v1 = v6;
  v2 = objc_retainBlock(v5);
  v3 = -[DimmingBehaviour initWithDimming:threshold:]([DimmingBehaviour alloc], "initWithDimming:threshold:", v2, v1);

  return v3;
}

double sub_10075C3BC(uint64_t a1, void *a2, double a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  double v8;
  void *v9;
  unint64_t v10;
  double v11;
  void *v12;
  unsigned int v13;
  double v14;
  double v15;
  void *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _BYTE *v22;
  void *v23;
  void *v25;
  double v26;
  double v27;
  void *v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  double v32;
  double v33;
  void *v34;
  uint64_t v35;
  double v36;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewIfLoaded"));
  v8 = UIRoundToViewScale(v6, v7, a3);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentViewController"));
  v10 = (unint64_t)objc_msgSend(v5, "containerStyle");
  if (v10 >= 8 || (v11 = 0.0, ((0xD9u >> v10) & 1) == 0))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "cardPresentationController"));
    v13 = objc_msgSend(v12, "presentedModally");

    if (v13)
    {
      objc_msgSend(v9, "heightForLayout:", 5);
      v15 = v14;
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewIfLoaded"));
      v18 = UIRoundToViewScale(v16, v17, v15);

      v11 = 1.0;
      if ((unint64_t)objc_msgSend(v5, "layoutModalPresenter") <= 2)
        v11 = fmin(fmax((v8 - v18 * 0.5) / (v18 * 0.5), 0.0), 1.0);
    }
    else
    {
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      if (qword_1014D3118 != -1)
        dispatch_once(&qword_1014D3118, &stru_1011C5B28);
      v20 = (void *)qword_1014D3110;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v19));
      v22 = objc_msgSend(v20, "indexOfObject:", v21);

      v11 = 0.0;
      if (v22 == (_BYTE *)0x7FFFFFFFFFFFFFFFLL || v22 == (char *)objc_msgSend((id)qword_1014D3110, "count") - 1)
      {
        v23 = 0;
      }
      else
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D3110, "objectAtIndexedSubscript:", v22 + 1));
        v23 = v25;
        if (v25)
        {
          objc_msgSend(v9, "heightForLayout:", objc_msgSend(v25, "unsignedIntegerValue"));
          v27 = v26;
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewIfLoaded"));
          v30 = UIRoundToViewScale(v28, v29, v27);

          v31 = (unint64_t)objc_msgSend(v5, "containerStyle");
          if (v31 <= 7 && ((1 << v31) & 0xE3) != 0)
          {
            objc_msgSend(v9, "heightForLayout:", v19);
            v33 = v32;
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewIfLoaded"));
            v36 = UIRoundToViewScale(v34, v35, v33);

            if (vabdd_f64(v30, v36) > 2.22044605e-16)
              v11 = fmin(fmax((v8 - v36) / (v30 - v36), 0.0), 1.0);
          }
          else
          {
            v11 = sub_10075C66C(v5, v30);
          }
        }
      }

    }
  }

  return v11;
}

double sub_10075C66C(void *a1, CGFloat a2)
{
  id v2;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  CGFloat v19;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  double v24;
  double v25;
  double height;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  double v31;
  void *v32;
  uint64_t v33;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  v2 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "topContentView"));
  objc_msgSend(v3, "frame");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "containerView"));
  objc_msgSend(v12, "frame");
  v37 = v14;
  v38 = v13;
  v35 = v16;
  v36 = v15;

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "containerView"));
  objc_msgSend(v17, "frame");
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;

  v43.size.height = a2;
  v43.origin.y = v21 - (a2 - v25);
  v40.origin.x = v5;
  v40.origin.y = v7;
  v40.size.width = v9;
  v40.size.height = v11;
  v43.origin.x = v19;
  v43.size.width = v23;
  v41 = CGRectIntersection(v40, v43);
  height = v41.size.height;
  v41.origin.x = v5;
  v41.origin.y = v7;
  v41.size.width = v9;
  v41.size.height = v11;
  v44.origin.y = v37;
  v44.origin.x = v38;
  v44.size.height = v35;
  v44.size.width = v36;
  v42 = CGRectIntersection(v41, v44);
  v27 = 0.0;
  if (v42.size.height > 0.0 && height > 0.0)
  {
    v28 = v42.size.height;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "viewIfLoaded", v42.origin.x, v42.origin.y, v42.size.width));
    v31 = UIRoundToViewScale(v29, v30, v28);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "viewIfLoaded"));
    v27 = v31 / UIRoundToViewScale(v32, v33, height);

  }
  return v27;
}

DimmingBehaviour *sub_10075C7D4()
{
  return -[DimmingBehaviour initWithDimming:threshold:]([DimmingBehaviour alloc], "initWithDimming:threshold:", &stru_1011C5AE8, &stru_1011C5B08);
}

double sub_10075C804(id a1, OverlayContainerViewController *a2, double a3)
{
  OverlayContainerViewController *v3;
  unint64_t v4;
  double v5;
  unint64_t v6;
  void *v7;
  double v8;
  CGFloat v9;

  v3 = a2;
  v4 = -[ContainerViewController containerStyle](v3, "containerStyle");
  if (v4 >= 8 || (v5 = 0.0, ((0xD9u >> v4) & 1) == 0))
  {
    v5 = 0.0;
    if ((id)-[ContainerViewController containeeLayout](v3, "containeeLayout") == (id)5)
    {
      v6 = -[ContainerViewController containerStyle](v3, "containerStyle");
      if (v6 >= 8 || ((0xE3u >> v6) & 1) == 0)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(-[ContainerViewController currentViewController](v3, "currentViewController"));
        objc_msgSend(v7, "heightForLayout:", 5);
        v9 = v8;

        v5 = sub_10075C66C(v3, v9);
      }
    }
  }

  return v5;
}

unint64_t sub_10075C8B0(id a1, OverlayContainerViewController *a2)
{
  return 0;
}

void sub_10075C8B8(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3110;
  qword_1014D3110 = (uint64_t)&off_101273BF0;

}

void sub_10075F578(id a1)
{
  id v1;
  void *v2;

  v1 = -[WeatherSettingsManager initSharedManager]([WeatherSettingsManager alloc], "initSharedManager");
  v2 = (void *)qword_1014D3130;
  qword_1014D3130 = (uint64_t)v1;

}

uint64_t sub_10075FF18(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  return result;
}

NSMutableArray *sub_100760070(int a1)
{
  NSMutableArray *v2;
  NSMutableArray *v3;

  v2 = objc_opt_new(NSMutableArray);
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    -[NSMutableArray addObject:](v2, "addObject:", CFSTR("gasoline"));
    if ((a1 & 0x100) == 0)
    {
LABEL_3:
      if ((a1 & 0x10000) == 0)
        goto LABEL_4;
LABEL_9:
      -[NSMutableArray addObject:](v3, "addObject:", CFSTR("electric"));
      if ((a1 & 0x1000000) == 0)
        return v3;
      goto LABEL_5;
    }
  }
  else if ((a1 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  -[NSMutableArray addObject:](v3, "addObject:", CFSTR("diesel"));
  if ((a1 & 0x10000) != 0)
    goto LABEL_9;
LABEL_4:
  if ((a1 & 0x1000000) != 0)
LABEL_5:
    -[NSMutableArray addObject:](v3, "addObject:", CFSTR("cng"));
  return v3;
}

id sub_100760100(int a1)
{
  NSMutableArray *v1;
  void *v2;
  void *v3;

  v1 = sub_100760070(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(", ")));

  return v3;
}

id sub_100760144(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v4;

  v1 = qword_1014D3150;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1014D3150, &stru_1011C5B70);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D3148, "objectForKeyedSubscript:", v2));

  v4 = objc_msgSend(v3, "longLongValue");
  return v4;
}

void sub_1007601BC(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("gasoline");
  v3[1] = CFSTR("diesel");
  v4[0] = &off_10126EBC0;
  v4[1] = &off_10126EBD8;
  v3[2] = CFSTR("electric");
  v3[3] = CFSTR("cng");
  v4[2] = &off_10126EBF0;
  v4[3] = &off_10126EC08;
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4));
  v2 = (void *)qword_1014D3148;
  qword_1014D3148 = v1;

}

id sub_10076027C()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("CarPlay_External_Maps"), CFSTR("localized string not found"), 0));

  return v1;
}

void sub_100760388(id a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[4];
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];

  v7[0] = &off_10126EBC0;
  v7[1] = &off_10126EBD8;
  v8[0] = EAVehicleInfoRangeGasolineKey;
  v8[1] = EAVehicleInfoRangeDieselKey;
  v7[2] = &off_10126EBF0;
  v7[3] = &off_10126EC08;
  v8[2] = EAVehicleInfoRangeElectricKey;
  v8[3] = EAVehicleInfoRangeCNGKey;
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 4));
  v2 = (void *)qword_1014D3158;
  qword_1014D3158 = v1;

  v5[0] = &off_10126EBC0;
  v5[1] = &off_10126EBD8;
  v6[0] = EAVehicleInfoHasLowDistanceRangeGasolineKey;
  v6[1] = EAVehicleInfoHasLowDistanceRangeDieselKey;
  v5[2] = &off_10126EBF0;
  v5[3] = &off_10126EC08;
  v6[2] = EAVehicleInfoHasLowDistanceRangeElectricKey;
  v6[3] = EAVehicleInfoHasLowDistanceRangeCNGKey;
  v3 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 4));
  v4 = (void *)qword_1014D3160;
  qword_1014D3160 = v3;

}

void sub_100760B38(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3168;
  qword_1014D3168 = (uint64_t)&off_101273C08;

}

uint64_t sub_100760ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  uint64_t v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100760F4C;
  v6[3] = &unk_1011C5BD8;
  v7 = *(id *)(a1 + 32);
  v8 = a2;
  v9 = a3;
  GEOConfigGetPropertiesForKey(a2, a3, v6);

  return 1;
}

void sub_100760F4C(uint64_t a1, void *a2)
{
  void *v3;
  NSNumber *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));

  if (!v3 && _GEOConfigHasValue(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)))
  {
    v4 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", GEOConfigGetInteger(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v6);

  }
}

id sub_100761100()
{
  if (qword_1014D31B0 != -1)
    dispatch_once(&qword_1014D31B0, &stru_1011C5C80);
  return (id)qword_1014D31A8;
}

void sub_10076187C(id a1)
{
  MapsExternalAccessory *v1;
  void *v2;

  v1 = objc_alloc_init(MapsExternalAccessory);
  v2 = (void *)qword_1014D3178;
  qword_1014D3178 = (uint64_t)v1;

}

void sub_100761D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *a13, id *a14, id *location)
{
  uint64_t v15;

  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak(a13);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v15 - 128));
  _Unwind_Resume(a1);
}

void sub_100761DE8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_accessoryDidConnect:", v3);

}

void sub_100761E30(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_accessoryDidUpdateVehicle:", v3);

}

void sub_100761E78(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_accessoryDidUpdate:", v3);

}

void sub_100761EC0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_accessoryDidDisconnect:", v3);

}

void sub_100762284(id a1)
{
  NSMutableArray *v1;
  NSMutableArray *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id obj;
  uint64_t v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  _QWORD v26[3];

  v1 = objc_opt_new(NSMutableArray);
  v2 = sub_100760070(16843009);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v26[0] = CFSTR("com.apple.maps.FakeExternalAccessory.engine.type");
  v26[1] = CFSTR("com.apple.maps.FakeExternalAccessory.engine.low");
  v26[2] = CFSTR("com.apple.maps.FakeExternalAccessory.engine.full");
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v26, 3));
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v15)
  {
    v13 = *(_QWORD *)v21;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v21 != v13)
          objc_enumerationMutation(obj);
        v4 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v3);
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v5 = v14;
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v17;
          do
          {
            v9 = 0;
            do
            {
              if (*(_QWORD *)v17 != v8)
                objc_enumerationMutation(v5);
              v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), v4, *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v9)));
              -[NSMutableArray addObject:](v1, "addObject:", v10);

              v9 = (char *)v9 + 1;
            }
            while (v7 != v9);
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
          }
          while (v7);
        }

        v3 = (char *)v3 + 1;
      }
      while (v3 != v15);
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v15);
  }

  v11 = (void *)qword_1014D3188;
  qword_1014D3188 = (uint64_t)v1;

}

id sub_1007624B4(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "_handleFake:");
}

void sub_100762888(id a1)
{
  NSMutableDictionary *v1;
  void *v2;

  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)qword_1014D31A0;
  qword_1014D31A0 = (uint64_t)v1;

}

void sub_1007635B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarExternalAccessory");
  v2 = (void *)qword_1014D31A8;
  qword_1014D31A8 = (uint64_t)v1;

}

void sub_100763628(id a1)
{
  UserProfileReportHistoryManager *v1;
  void *v2;

  v1 = objc_alloc_init(UserProfileReportHistoryManager);
  v2 = (void *)qword_1014D31B8;
  qword_1014D31B8 = (uint64_t)v1;

}

void sub_100763B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100763BB8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100763BC8(uint64_t a1)
{

}

void sub_100763BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", a2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100763C18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", a2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100763C60(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateReports:incidents:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    WeakRetained = v3;
  }

}

BOOL sub_10076400C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "countryCodeUponCreation"));
  if (objc_msgSend(v4, "_shouldShowReportOrIncidentCreatedInCountry:", v5))
  {
    v6 = (void *)a1[4];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dateOfReportCreation"));
    v8 = (uint64_t)objc_msgSend(v6, "_daysBetweenDates:currentDate:", v7, a1[5]) < a1[6];

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id sub_1007640A8(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "countryCodeUponCreation"));
  v4 = objc_msgSend(v2, "_shouldShowReportOrIncidentCreatedInCountry:", v3);

  return v4;
}

void sub_100764524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100764548(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  id *v8;
  id v9;
  id v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  id v16;
  unsigned int v17;
  unsigned int v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *j;
  void *v32;
  void *v33;
  id *v34;
  id v35;
  id v36;
  id obj;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint8_t v48[128];
  uint8_t buf[4];
  unsigned int v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  id v54;

  v5 = a2;
  v6 = a3;
  v38 = a1;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v8 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_26;
  v34 = WeakRetained;
  v35 = v6;
  if (v6 || (v9 = objc_msgSend(v5, "count"), v9 != objc_msgSend(*(id *)(v38 + 32), "count")))
  {
    v16 = sub_10043261C();
    v11 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v17 = objc_msgSend(v5, "count");
      v18 = objc_msgSend(*(id *)(v38 + 32), "count");
      *(_DWORD *)buf = 67109634;
      v50 = v17;
      v51 = 1024;
      v52 = v18;
      v53 = 2112;
      v54 = v6;
      v12 = "Only refined %d map items of %d. Error: %@";
      v13 = v11;
      v14 = OS_LOG_TYPE_ERROR;
      v15 = 24;
      goto LABEL_8;
    }
  }
  else
  {
    v10 = sub_10043261C();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v50 = objc_msgSend(v5, "count");
      v12 = "Refined map items for %d RAPs";
      v13 = v11;
      v14 = OS_LOG_TYPE_INFO;
      v15 = 8;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, buf, v15);
    }
  }

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v36 = v5;
  obj = v5;
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v20; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v21)
          objc_enumerationMutation(obj);
        v23 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v24 = *(void **)(v38 + 40);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "_identifier"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v25));

        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v27 = v26;
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
        if (v28)
        {
          v29 = v28;
          v30 = *(_QWORD *)v40;
          do
          {
            for (j = 0; j != v29; j = (char *)j + 1)
            {
              if (*(_QWORD *)v40 != v30)
                objc_enumerationMutation(v27);
              v32 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)j);
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "mapItem"));

              if (!v33)
                objc_msgSend(v32, "setMapItem:", v23);
            }
            v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
          }
          while (v29);
        }

      }
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    }
    while (v20);
  }

  v8 = v34;
  objc_msgSend(v34[1], "reportHistoryManagerDidUpdate:", v34);
  v6 = v35;
  v5 = v36;
LABEL_26:

}

void sub_100764DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100764E04(uint64_t a1, int a2)
{
  id WeakRetained;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    if (a2)
      objc_msgSend(WeakRetained, "_deleteCollection");
    objc_msgSend(v4, "_finish");
    WeakRetained = v4;
  }

}

void sub_1007650C4(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1004315EC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error saving changes in editor popover: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_100765180(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_1004315EC();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error deleting collection: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_100765F7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _UNKNOWN **v5;
  void *i;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char isKindOfClass;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  char v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  unsigned __int8 v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  char v52;
  void *v53;
  void *v54;
  unsigned __int8 v55;
  void *v56;
  void *v57;
  unsigned __int8 v58;
  void *v59;
  unsigned int v60;
  unsigned int v61;
  int IsEqualToMapItemForPurpose;
  void *v63;
  void *v64;
  int v65;
  void *v66;
  void *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  id v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[128];

  v3 = a2;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v89 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v90, v94, 16);
  if (v89)
  {
    v4 = *(_QWORD *)v91;
    v5 = MKPlaceCollectionsLogicController_ptr;
    v84 = v3;
    v85 = *(_QWORD *)v91;
    v86 = a1;
    do
    {
      for (i = 0; i != v89; i = (char *)i + 1)
      {
        if (*(_QWORD *)v91 != v4)
          objc_enumerationMutation(v3);
        v7 = *(void **)(a1 + 32);
        v8 = *(id *)(*((_QWORD *)&v90 + 1) + 8 * (_QWORD)i);
        v9 = v7;
        v10 = v8;
        v11 = v9;
        v12 = objc_opt_class(v5[85]);
        if ((objc_opt_isKindOfClass(v8, v12) & 1) != 0)
        {
          v13 = objc_opt_class(MSHistoryEvDirectionsItem);
          if ((objc_opt_isKindOfClass(v8, v13) & 1) != 0)
            goto LABEL_61;
          v87 = v8;
          v14 = v8;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
          v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastObject"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "endWaypoint"));
          v17 = objc_opt_class(GEOComposedWaypointToRoute);
          if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastObject"));
            v19 = objc_opt_class(GEOComposedWaypointToRoute);
            isKindOfClass = objc_opt_isKindOfClass(v18, v19);

            if ((isKindOfClass & 1) != 0)
            {
              v21 = v14;
              v22 = v11;
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "endWaypoint"));
              v24 = objc_opt_class(GEOComposedWaypointToRoute);
              if ((objc_opt_isKindOfClass(v23, v24) & 1) == 0)
              {
                v39 = 0;
                goto LABEL_56;
              }
              v83 = v21;
              v25 = v22;
              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "lastObject"));
              v27 = objc_opt_class(GEOComposedWaypointToRoute);
              v28 = objc_opt_isKindOfClass(v26, v27);

              if ((v28 & 1) != 0)
              {
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "firstObject"));
                v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "startWaypoint"));
                v22 = v25;
                v81 = v29;
                if (objc_msgSend(v23, "isCurrentLocation")
                  && objc_msgSend(v29, "isCurrentLocation"))
                {
                  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "endWaypoint"));
                  v79 = v25;
                  v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "lastObject"));
                  v82 = v30;
                  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "route"));
                  v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "anchorPoints"));

                  v80 = (void *)v31;
                  v34 = (void *)v31;
                  v35 = (void *)v33;
                  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "route"));
                  v37 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "anchorPoints"));

                  v38 = (void *)v37;
                  v78 = v35;
                  v39 = objc_msgSend(v35, "isEqual:", v37);
                  goto LABEL_51;
                }
                v69 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "geoMapItem"));
                v70 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "geoMapItem"));
                v71 = (void *)v70;
                v39 = 0;
                v82 = (void *)v69;
                if (v69)
                {
                  v21 = v83;
                  if (v70)
                  {
                    v80 = (void *)v70;
                    if (GEOMapItemIsEqualToMapItemForPurpose(v82, v70, 1))
                    {
                      v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "endWaypoint"));
                      v79 = v22;
                      v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "lastObject"));
                      v78 = v72;
                      v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "route"));
                      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "anchorPoints"));

                      v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "route"));
                      v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "anchorPoints"));

                      v38 = v76;
                      v39 = objc_msgSend(v77, "isEqual:", v75);

LABEL_51:
                      v22 = v79;
                      v21 = v83;
                    }
                    else
                    {
                      v39 = 0;
                    }
                    v71 = v80;
                  }
                }
                else
                {
                  v21 = v83;
                }

LABEL_56:
              }
              else
              {
                v39 = 0;
                v22 = v25;
                v21 = v83;
              }

              v68 = 1;
LABEL_58:
              v10 = v87;

              v4 = v85;
              a1 = v86;
              if (v68)
              {

                if ((v39 & 1) == 0)
                  continue;
                goto LABEL_60;
              }
              goto LABEL_61;
            }
          }
          else
          {

          }
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "startWaypoint"));
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "geoMapItem"));
          v55 = objc_msgSend(v54, "isValid");

          if ((v55 & 1) == 0)
          {

            v53 = 0;
          }
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "endWaypoint"));
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "geoMapItem"));
          v58 = objc_msgSend(v57, "isValid");

          if ((v58 & 1) == 0)
          {

            v56 = 0;
          }
          v59 = v88;
          if (v15)
          {
            v60 = objc_msgSend(v15, "isCurrentLocation");
            if (v53)
              goto LABEL_29;
LABEL_32:
            v61 = 1;
          }
          else
          {
            v60 = 1;
            if (!v53)
              goto LABEL_32;
LABEL_29:
            v61 = objc_msgSend(v53, "isCurrentLocation");
          }
          if ((v60 & v61 & 1) != 0)
          {
            IsEqualToMapItemForPurpose = 1;
          }
          else
          {
            IsEqualToMapItemForPurpose = 0;
            if (v15 && v53)
            {
              v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "geoMapItem"));
              v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "geoMapItem"));
              IsEqualToMapItemForPurpose = GEOMapItemIsEqualToMapItemForPurpose(v63, v64, 1);

              v5 = MKPlaceCollectionsLogicController_ptr;
              v59 = v88;
            }
          }
          if (objc_msgSend(v59, "isCurrentLocation")
            && (objc_msgSend(v59, "isCurrentLocation") & 1) != 0)
          {
            v65 = 1;
          }
          else
          {
            v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "geoMapItem"));
            v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "geoMapItem"));
            v65 = GEOMapItemIsEqualToMapItemForPurpose(v66, v67, 1);

            v3 = v84;
            v5 = MKPlaceCollectionsLogicController_ptr;
          }
          v68 = IsEqualToMapItemForPurpose & v65;

          v39 = 1;
          goto LABEL_58;
        }
        v40 = objc_opt_class(MSHistoryMultiPointRoute);
        if ((objc_opt_isKindOfClass(v8, v40) & 1) != 0)
        {
          v41 = v8;
          v42 = v8;
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "waypoints"));
          v44 = objc_msgSend(v43, "count");
          v45 = objc_msgSend(v11, "count");

          if (v44 != v45)
          {

LABEL_44:
            v5 = MKPlaceCollectionsLogicController_ptr;
            continue;
          }
          if (objc_msgSend(v11, "count"))
          {
            v46 = 0;
            while (1)
            {
              v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", v46));
              v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "waypoints"));
              v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectAtIndexedSubscript:", v46));

              v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "geoMapItem"));
              v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "geoMapItem"));
              v52 = GEOMapItemIsEqualToMapItemForPurpose(v50, v51, 1);

              if ((v52 & 1) == 0)
                break;
              if (++v46 >= (unint64_t)objc_msgSend(v11, "count"))
                goto LABEL_21;
            }

            v3 = v84;
            v4 = v85;
            a1 = v86;
            goto LABEL_44;
          }
LABEL_21:

          v3 = v84;
          v4 = v85;
          a1 = v86;
          v5 = MKPlaceCollectionsLogicController_ptr;
          v10 = v41;
LABEL_60:
          objc_msgSend(*(id *)(a1 + 40), "addObject:", v10);
          continue;
        }
LABEL_61:

      }
      v89 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v90, v94, 16);
    }
    while (v89);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100766848(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

void sub_1007669A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007669B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1007669C8(uint64_t a1)
{

}

void sub_1007669D0(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100767138(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100767164(uint64_t a1, void *a2)
{
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  unsigned __int8 v9;
  id v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  char isKindOfClass;
  double v51;
  void *v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  __int128 v65;
  id obj;
  _QWORD v67[4];
  id v68;
  _QWORD v69[4];
  id v70;
  _QWORD v71[5];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint8_t buf[4];
  void *v80;
  __int16 v81;
  void *v82;
  __int16 v83;
  void *v84;
  _BYTE v85[128];

  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v85, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v73;
    *(_QWORD *)&v4 = 138412802;
    v65 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v73 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)i);
        v9 = objc_msgSend(v8, "isEqual:", *(_QWORD *)(a1 + 32), v65);
        v10 = sub_100431C0C();
        v11 = objc_claimAutoreleasedReturnValue(v10);
        v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
        if ((v9 & 1) != 0)
        {
          if (v12)
          {
            v13 = *(void **)(a1 + 32);
            *(_DWORD *)buf = 138412546;
            v80 = v8;
            v81 = 2112;
            v82 = v13;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Not deleting a duplicate item: %@ matching directionItem:%@", buf, 0x16u);
          }

        }
        else
        {
          if (v12)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uniqueRouteID"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
            *(_DWORD *)buf = v65;
            v80 = v14;
            v81 = 2112;
            v82 = v15;
            v83 = 2112;
            v84 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Found a duplicate matching routeID (%@ : %@); Deleting item: %@",
              buf,
              0x20u);

          }
          if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "isEqual:", v8))
          {
            v16 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
            v17 = *(void **)(v16 + 40);
            *(_QWORD *)(v16 + 40) = 0;

            v18 = sub_100431C0C();
            v19 = objc_claimAutoreleasedReturnValue(v18);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Already deleting the oldDirectionItem so we don't need to clean it up later", buf, 2u);
            }

          }
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
          v78 = v8;
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v78, 1));
          v71[0] = _NSConcreteStackBlock;
          v71[1] = 3221225472;
          v71[2] = sub_100767A08;
          v71[3] = &unk_1011B1BE0;
          v71[4] = v8;
          objc_msgSend(v20, "deleteWithObjects:completionHandler:", v21, v71);

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v85, 16);
    }
    while (v5);
  }
  v22 = sub_100431C0C();
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    v24 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v80 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Adding editBlock for directionItem: %@", buf, 0xCu);
  }

  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "setRouteRequestStorage:") & 1) != 0)
  {
    v25 = objc_alloc_init((Class)GEOStorageRouteRequestStorage);
    v26 = *(void **)(a1 + 48);
    v69[0] = _NSConcreteStackBlock;
    v69[1] = 3221225472;
    v69[2] = sub_100767AB0;
    v69[3] = &unk_1011C5DA8;
    v27 = v25;
    v70 = v27;
    objc_msgSend(v26, "enumerateObjectsUsingBlock:", v69);
    objc_msgSend(v27, "setTransportType:", objc_msgSend(*(id *)(a1 + 40), "transportType"));
    v28 = objc_msgSend(objc_alloc((Class)GEOURLRouteHandle), "initWithRoute:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v27, "setRouteHandle:", v28);

    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "waypoints"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "lastObject"));

    v31 = objc_opt_class(GEOComposedWaypointToRoute);
    if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "route"));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "persistentData"));
      objc_msgSend(v27, "setDestinationRouteData:", v33);

    }
    switch(objc_msgSend(*(id *)(a1 + 40), "transportType"))
    {
      case 0u:
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "routeAttributes"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "automobileOptions"));
        objc_msgSend(v27, "setAutomobileOptions:", v35);
        goto LABEL_29;
      case 1u:
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "routeAttributes"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "transitOptions"));
        objc_msgSend(v27, "setTransitOptions:", v35);
        goto LABEL_29;
      case 2u:
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "routeAttributes"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "walkingOptions"));
        objc_msgSend(v27, "setWalkingOptions:", v35);
        goto LABEL_29;
      case 3u:
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "routeAttributes"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "cyclingOptions"));
        objc_msgSend(v27, "setCyclingOptions:", v35);
LABEL_29:

        break;
      default:
        break;
    }
    objc_msgSend(*(id *)(a1 + 32), "setRouteRequestStorage:", v27);

  }
  if (*(_BYTE *)(a1 + 96))
  {
    v36 = *(_QWORD *)(a1 + 32);
    v37 = objc_opt_class(MSHistoryEvDirectionsItem);
    if ((objc_opt_isKindOfClass(v36, v37) & 1) != 0)
    {
      v38 = *(void **)(a1 + 56);
      v39 = *(id *)(a1 + 32);
      objc_msgSend(v38, "batteryPercentageAfterCharging");
      objc_msgSend(v39, "setRequiredCharge:", v40 / 100.0);
      objc_msgSend(v39, "setVehicleIdentifier:", *(_QWORD *)(a1 + 64));

    }
  }
  if (*(_BYTE *)(a1 + 97))
  {
    v41 = *(_QWORD *)(a1 + 32);
    v42 = objc_opt_class(MSHistoryMultiPointRoute);
    if ((objc_opt_isKindOfClass(v41, v42) & 1) != 0)
    {
      v43 = *(id *)(a1 + 32);
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "routeRequestStorage"));
      v45 = objc_msgSend(v44, "waypointsCount");

      if (v45)
        objc_msgSend(v43, "setRouteProgressWaypointIndex:", 1);
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "legs"));
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "firstObject"));
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "destination"));
      v49 = objc_opt_class(GEOComposedWaypointEVStop);
      isKindOfClass = objc_opt_isKindOfClass(v48, v49);

      if (*(_BYTE *)(a1 + 98) && (isKindOfClass & 1) != 0)
      {
        objc_msgSend(*(id *)(a1 + 56), "batteryPercentageAfterCharging");
        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v51 / 100.0));
        objc_msgSend(v43, "setRequiredCharge:", v52);

        objc_msgSend(v43, "setVehicleIdentifier:", *(_QWORD *)(a1 + 64));
      }
      objc_msgSend(v43, "setType:", objc_msgSend(*(id *)(a1 + 40), "isEVRoute"));

    }
  }
  v53 = *(_QWORD *)(a1 + 72);
  if (v53)
    (*(void (**)(uint64_t, _QWORD))(v53 + 16))(v53, *(_QWORD *)(a1 + 32));
  v54 = sub_100431C0C();
  v55 = objc_claimAutoreleasedReturnValue(v54);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
  {
    v56 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v80 = v56;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Commiting editBlock for directionItem: %@", buf, 0xCu);
  }

  v57 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v77 = *(_QWORD *)(a1 + 32);
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v77, 1));
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  v67[2] = sub_100767C78;
  v67[3] = &unk_1011AE218;
  v68 = *(id *)(a1 + 80);
  objc_msgSend(v57, "saveWithObjects:completionHandler:", v58, v67);

  v59 = sub_100431C0C();
  v60 = objc_claimAutoreleasedReturnValue(v59);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
  {
    v61 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
    *(_DWORD *)buf = 138412290;
    v80 = v61;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "Deleting oldDirectionItem: %@", buf, 0xCu);
  }

  v62 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v63 = v62;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
  {
    v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v76, 1));
    objc_msgSend(v63, "deleteWithObjects:completionHandler:", v64, &stru_1011C5DC8);

  }
  else
  {
    objc_msgSend(v62, "deleteWithObjects:completionHandler:", &__NSArray0__struct, &stru_1011C5DC8);
  }

}

void sub_100767A08(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (a2)
  {
    v3 = sub_100431C0C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error deleting item: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_100767AB0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;

  v5 = a2;
  v6 = v5;
  if (a3 && objc_msgSend(v5, "isCurrentLocation"))
  {
    v7 = sub_100431C0C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v17 = 134217984;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "- Converting dynamic current location waypoint %lu into static location", (uint8_t *)&v17, 0xCu);
    }

    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "convertToStaticLocation"));
    v6 = (void *)v9;
  }
  v10 = objc_opt_class(GEOComposedWaypointToRoute);
  if ((objc_opt_isKindOfClass(v6, v10) & 1) != 0)
    goto LABEL_12;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItemStorage"));
  if (v11)
  {

    goto LABEL_10;
  }
  if ((objc_msgSend(v6, "isCurrentLocation") & 1) != 0)
  {
LABEL_10:
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "findMyHandleID"));

    if (v12)
    {
      v13 = objc_msgSend(v6, "copy");

      objc_msgSend(v13, "clearFindMyData");
      v6 = v13;
    }
LABEL_12:
    objc_msgSend(*(id *)(a1 + 32), "addWaypoints:", v6);
    goto LABEL_13;
  }
  v14 = sub_100431C0C();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "shortDescription"));
    v17 = 138412290;
    v18 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Trying to save waypoint without a mapItem in a HistoryEntry: %@", (uint8_t *)&v17, 0xCu);

  }
LABEL_13:

}

void sub_100767C78(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  id v8;

  v3 = a2;
  if (v3)
  {
    v4 = sub_100431C0C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed saveRoute: could not commit edits to new direction item: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);

}

void sub_100767D44(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100431C0C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed saveRoute: could not delete old direction item: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1007682CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1007682F8(uint64_t a1, void *a2)
{
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  unsigned __int8 v9;
  id v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  GEOStorageRouteRequestStorage *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  __int128 v39;
  id obj;
  _QWORD v41[5];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  uint64_t v51;
  void *v52;
  _BYTE v53[128];

  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v53, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v43;
    *(_QWORD *)&v4 = 138412290;
    v39 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v43 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i);
        v9 = objc_msgSend(v8, "isEqual:", *(_QWORD *)(a1 + 32), v39);
        v10 = sub_100431C0C();
        v11 = objc_claimAutoreleasedReturnValue(v10);
        v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
        if ((v9 & 1) != 0)
        {
          if (v12)
          {
            v13 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)buf = 138412546;
            v49 = v8;
            v50 = 2112;
            v51 = v13;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Not deleting a duplicate item: %@ matching directionItem:%@", buf, 0x16u);
          }
        }
        else
        {
          if (v12)
          {
            *(_DWORD *)buf = v39;
            v49 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Found a duplicate item: %@", buf, 0xCu);
          }

          if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "isEqual:", v8))
          {
            v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
            v15 = *(void **)(v14 + 40);
            *(_QWORD *)(v14 + 40) = 0;

            v16 = sub_100431C0C();
            v17 = objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Already deleting the oldDirectionItem so we don't need to clean it up later", buf, 2u);
            }

          }
          v11 = objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
          v52 = v8;
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v52, 1));
          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472;
          v41[2] = sub_100768908;
          v41[3] = &unk_1011B1BE0;
          v41[4] = v8;
          -[NSObject deleteWithObjects:completionHandler:](v11, "deleteWithObjects:completionHandler:", v18, v41);

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v53, 16);
    }
    while (v5);
  }
  v19 = sub_100431C0C();
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    v21 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v49 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Adding editBlock for directionItem: %@", buf, 0xCu);
  }

  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "setRouteRequestStorage:") & 1) != 0)
  {
    v22 = objc_opt_new(GEOStorageRouteRequestStorage);
    -[GEOStorageRouteRequestStorage addWaypoints:](v22, "addWaypoints:", *(_QWORD *)(a1 + 40));
    -[GEOStorageRouteRequestStorage addWaypoints:](v22, "addWaypoints:", *(_QWORD *)(a1 + 48));
    -[GEOStorageRouteRequestStorage setTransportType:](v22, "setTransportType:", objc_msgSend(*(id *)(a1 + 56), "transportType"));
    v23 = objc_msgSend(objc_alloc((Class)GEOURLRouteHandle), "initWithRoute:", *(_QWORD *)(a1 + 56));
    -[GEOStorageRouteRequestStorage setRouteHandle:](v22, "setRouteHandle:", v23);

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "route"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "persistentData"));
    -[GEOStorageRouteRequestStorage setDestinationRouteData:](v22, "setDestinationRouteData:", v25);

    switch(objc_msgSend(*(id *)(a1 + 56), "transportType"))
    {
      case 0u:
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "routeAttributes"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "automobileOptions"));
        -[GEOStorageRouteRequestStorage setAutomobileOptions:](v22, "setAutomobileOptions:", v27);
        goto LABEL_26;
      case 1u:
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "routeAttributes"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "transitOptions"));
        -[GEOStorageRouteRequestStorage setTransitOptions:](v22, "setTransitOptions:", v27);
        goto LABEL_26;
      case 2u:
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "routeAttributes"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "walkingOptions"));
        -[GEOStorageRouteRequestStorage setWalkingOptions:](v22, "setWalkingOptions:", v27);
        goto LABEL_26;
      case 3u:
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "routeAttributes"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "cyclingOptions"));
        -[GEOStorageRouteRequestStorage setCyclingOptions:](v22, "setCyclingOptions:", v27);
LABEL_26:

        break;
      default:
        break;
    }
    objc_msgSend(*(id *)(a1 + 32), "setRouteRequestStorage:", v22);

  }
  v28 = sub_100431C0C();
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    v30 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v49 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Commiting editBlock for directionItem: %@", buf, 0xCu);
  }

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v47 = *(_QWORD *)(a1 + 32);
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v47, 1));
  objc_msgSend(v31, "saveWithObjects:completionHandler:", v32, &stru_1011C5E10);

  v33 = sub_100431C0C();
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    v35 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    *(_DWORD *)buf = 138412290;
    v49 = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Deleting oldDirectionItem: %@", buf, 0xCu);
  }

  v36 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v37 = v36;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v46, 1));
    objc_msgSend(v37, "deleteWithObjects:completionHandler:", v38, &stru_1011C5E30);

  }
  else
  {
    objc_msgSend(v36, "deleteWithObjects:completionHandler:", &__NSArray0__struct, &stru_1011C5E30);
  }

}

void sub_100768908(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (a2)
  {
    v3 = sub_100431C0C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error deleting item: %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_1007689B0(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100431C0C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed saveRoute: could not commit edits to new direction item: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_100768A5C(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100431C0C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed saveRoute: could not delete old direction item: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_100768BA0(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  _UNKNOWN **v7;
  mach_header_64 *v8;
  const char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  id v18;
  _UNKNOWN **v19;
  id v20;
  const char *v21;
  mach_header_64 *v22;
  void *v23;
  void *v24;
  id v25;
  __int128 v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];

  v2 = a2;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v29, v40, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v30;
    v7 = MKPlaceCollectionsLogicController_ptr;
    v8 = (mach_header_64 *)&_mh_execute_header;
    v9 = "Setting item to not be interrupted: %@";
    *(_QWORD *)&v4 = 138412802;
    v26 = v4;
    v27 = *(_QWORD *)v30;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v30 != v6)
          objc_enumerationMutation(v2);
        v11 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v10);
        v12 = objc_opt_class(v7[91]);
        if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0
          || (v13 = objc_opt_class(MSHistoryDirectionsItem), (objc_opt_isKindOfClass(v11, v13) & 1) != 0))
        {
          objc_msgSend(v11, "setNavigationInterrupted:", 0, v26);
          v14 = sub_100431C0C();
          v15 = objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v35 = v11;
            _os_log_impl(v8, v15, OS_LOG_TYPE_INFO, v9, buf, 0xCu);
          }

          v16 = objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
          v33 = v11;
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1));
          -[NSObject saveWithObjects:completionHandler:](v16, "saveWithObjects:completionHandler:", v17, &stru_1011C5E78);

        }
        else
        {
          v18 = sub_100431C0C();
          v16 = objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v19 = v7;
            v20 = v2;
            v21 = v9;
            v22 = v8;
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueRouteID"));
            *(_DWORD *)buf = v26;
            v35 = v11;
            v36 = 2112;
            v37 = v23;
            v38 = 2112;
            v39 = v24;
            _os_log_impl(v22, v16, OS_LOG_TYPE_ERROR, "Unhandled history item: %@ for route: %@ (%@)", buf, 0x20u);

            v8 = v22;
            v9 = v21;
            v2 = v20;
            v7 = v19;
            v6 = v27;
          }
        }

        v10 = (char *)v10 + 1;
      }
      while (v5 != v10);
      v25 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v29, v40, 16);
      v5 = v25;
    }
    while (v25);
  }

}

void sub_100768E48(id a1, NSError *a2)
{
  NSError *v2;
  id v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  if (v2)
  {
    v3 = sub_100431C0C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Will not mark route as complete because of error: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_100768F78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  _BYTE v19[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  objc_msgSend(v4, "deleteWithObjects:error:", v3, 0);

  v5 = objc_alloc_init((Class)MSHistoryDirectionsItem);
  v6 = objc_alloc_init((Class)GEOStorageRouteRequestStorage);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = *(id *)(a1 + 32);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(v6, "addWaypoints:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v11), (_QWORD)v14);
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    }
    while (v9);
  }

  objc_msgSend(v6, "setTransportType:", *(unsigned int *)(a1 + 40));
  objc_msgSend(v5, "setRouteRequestStorage:", v6);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v18 = v5;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  objc_msgSend(v12, "saveWithObjects:error:", v13, 0);

}

void sub_100769200(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  objc_msgSend(v4, "deleteWithObjects:error:", v3, 0);

  v5 = objc_alloc_init((Class)MSHistoryPlaceItem);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_geoMapItem"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapItemStorage mapItemStorageForGEOMapItem:](GEOMapItemStorage, "mapItemStorageForGEOMapItem:", v6));
  objc_msgSend(v5, "setMapItemStorage:", v7);

  objc_msgSend(v5, "setSupersededSearchId:", *(_QWORD *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v10 = v5;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  objc_msgSend(v8, "saveWithObjects:error:", v9, 0);

}

void sub_1007693F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  id v25;
  id v26;
  _BYTE v27[128];

  v3 = a2;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v22;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v7);
        v9 = objc_opt_class(MSHistoryTransitItem);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
        {
          v10 = v8;
          v11 = objc_msgSend(v10, "muid");
          if (v11 == objc_msgSend(*(id *)(a1 + 32), "muid"))
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
            v26 = v10;
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v26, 1));
            objc_msgSend(v12, "deleteWithObjects:error:", v13, 0);

          }
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    }
    while (v5);
  }
  v14 = objc_alloc_init((Class)MSHistoryTransitItem);
  v15 = objc_msgSend(objc_alloc((Class)MSPTransitStorageLineItem), "initWithLineItem:", *(_QWORD *)(a1 + 32));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "data"));
  objc_msgSend(v14, "setTransitLineStorage:", v16);

  objc_msgSend(v14, "setMuid:", objc_msgSend(*(id *)(a1 + 32), "muid"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v25 = v14;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100769654;
  v19[3] = &unk_1011AE218;
  v20 = *(id *)(a1 + 40);
  objc_msgSend(v17, "saveWithObjects:completionHandler:", v18, v19);

}

void sub_100769654(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1007696E4;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_1007696E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1007697B4(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v35;
  id obj;
  _QWORD v37[4];
  id v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  id v45;
  _BYTE v46[128];

  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = a2;
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v41;
    do
    {
      v5 = 0;
      v35 = v3;
      do
      {
        if (*(_QWORD *)v41 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)v5);
        v7 = objc_opt_class(MSHistorySearchItem);
        if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
        {
          v8 = v6;
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "query"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
          v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByTrimmingCharactersInSet:", v10));
          v12 = (void *)v11;
          if (v11)
            v13 = (__CFString *)v11;
          else
            v13 = &stru_1011EB268;
          v14 = v13;

          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "query"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "stringByTrimmingCharactersInSet:", v16));
          v18 = (void *)v17;
          if (v17)
            v19 = (__CFString *)v17;
          else
            v19 = &stru_1011EB268;
          v20 = v19;

          v21 = -[__CFString localizedCaseInsensitiveCompare:](v14, "localizedCaseInsensitiveCompare:", v20);
          if (!v21)
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
            v45 = v8;
            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v45, 1));
            objc_msgSend(v22, "deleteWithObjects:error:", v23, 0);

          }
          v3 = v35;
        }
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
    }
    while (v3);
  }
  v24 = objc_alloc_init((Class)MSHistorySearchItem);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "query"));
  objc_msgSend(v24, "setQuery:", v25);

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapRegion"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "data"));
  objc_msgSend(v24, "setGeoMapRegion:", v27);

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "languageCode"));
  objc_msgSend(v24, "setLanguage:", v28);

  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "locationDisplayString"));
  objc_msgSend(v24, "setLocationDisplay:", v29);

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v44 = v24;
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v44, 1));
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100769B34;
  v37[3] = &unk_1011B8118;
  v32 = *(id *)(a1 + 40);
  v38 = v24;
  v39 = v32;
  v33 = v24;
  objc_msgSend(v30, "saveWithObjects:completionHandler:", v31, v37);

}

void sub_100769B34(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100769BDC;
  block[3] = &unk_1011B5ED8;
  v8 = *(id *)(a1 + 40);
  v6 = v3;
  v7 = *(id *)(a1 + 32);
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100769BDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storageIdentifier"));
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);

  }
}

void sub_100769CF0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD block[4];
  id v5;
  id v6;
  id v7;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100769D98;
  block[3] = &unk_1011AECC0;
  v5 = a2;
  v6 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100769D98(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  id v27;
  _BYTE v28[128];

  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v23;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v23 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v6);
        v8 = objc_opt_class(MSHistoryCuratedCollection);
        if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
        {
          v9 = v7;
          v10 = objc_msgSend(v9, "curatedCollectionIdentifier");
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "collectionIdentifier"));
          v12 = objc_msgSend(v11, "muid");

          if (v10 == v12)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
            v27 = v9;
            v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));
            objc_msgSend(v13, "deleteWithObjects:error:", v14, 0);

          }
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    }
    while (v4);
  }

  v15 = objc_alloc_init((Class)MSHistoryCuratedCollection);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "collectionIdentifier"));
  objc_msgSend(v15, "setCuratedCollectionIdentifier:", objc_msgSend(v16, "muid"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "collectionIdentifier"));
  objc_msgSend(v15, "setResultProviderIdentifier:", objc_msgSend(v17, "resultProviderID"));

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v26 = v15;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v26, 1));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10076A014;
  v20[3] = &unk_1011AE218;
  v21 = a1[6];
  objc_msgSend(v18, "saveWithObjects:completionHandler:", v19, v20);

}

void sub_10076A014(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10076A0A4;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_10076A0A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10076A264(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10076A2F4;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_10076A2F4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_10076A4A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10076A6C4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10076A6D8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10076A9B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10076A9C4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10076ADF4(id *a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  id v8;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10076AEB0;
  v4[3] = &unk_1011B4320;
  v5 = a2;
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

uint64_t sub_10076AEB0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  int IsEqualToMapItemForPurpose;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v6);
        v8 = *(id *)(a1 + 40);
        v9 = v7;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapItemStorage", (_QWORD)v16));
        v11 = v10;
        if (v8)
          v12 = v10 == 0;
        else
          v12 = 1;
        if (v12)
        {

        }
        else
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapItemStorage"));
          IsEqualToMapItemForPurpose = GEOMapItemIsEqualToMapItemForPurpose(v13, v8, 2);

          if (IsEqualToMapItemForPurpose)
            objc_msgSend(*(id *)(a1 + 48), "addObject:", v9);
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v4);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_10076B0AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  objc_msgSend(v4, "deleteWithObjects:error:", v3, 0);

  v5 = objc_alloc_init((Class)MSHistoryPlaceItem);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapItemStorage mapItemStorageForGEOMapItem:](GEOMapItemStorage, "mapItemStorageForGEOMapItem:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v5, "setMapItemStorage:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
  v9 = v5;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  objc_msgSend(v7, "saveWithObjects:error:", v8, 0);

}

void sub_10076B448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10076C084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id sub_10076C9E4(uint64_t a1, uint64_t a2)
{
  void *v3;
  const __CFString *v4;
  id result;

  v3 = *(void **)(a1 + 32);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    v4 = CFSTR(" & ");
  else
    v4 = &stru_1011EB268;
  result = objc_msgSend(v3, "appendFormat:", CFSTR("%@%@"), v4, a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

void sub_10076E774(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D31C8;
  qword_1014D31C8 = (uint64_t)v1;

}

void sub_10076E820(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + 32), "registrationWithCellClass:configurationHandler:", objc_opt_class(UICollectionViewCell), &stru_1011C5F08);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1014D31D8;
  qword_1014D31D8 = v2;

}

void sub_10076F0B4(id a1)
{
  UserInformationManager *v1;
  void *v2;

  v1 = objc_alloc_init(UserInformationManager);
  v2 = (void *)qword_1014D31E8;
  qword_1014D31E8 = (uint64_t)v1;

}

void sub_10076F764(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  _QWORD v3[4];
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10076F80C;
    v3[3] = &unk_1011C5F50;
    objc_copyWeak(&v4, v1);
    objc_msgSend(WeakRetained, "_retrieveUserProfilePictureWithImageCreationCompletion:", v3);
    objc_destroyWeak(&v4);
  }

}

void sub_10076F7F8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10076F80C(uint64_t a1, void *a2)
{
  id v4;
  id *WeakRetained;
  id v6;
  NSObject *v7;
  uint8_t v8[16];

  v4 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = sub_10043261C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Assigning profile picture to userIcon and notifying observers", v8, 2u);
    }

    objc_storeStrong(WeakRetained + 8, a2);
    objc_msgSend(WeakRetained, "_updateAndNotifyObservers:", 1);
  }

}

void sub_10076F9B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10076FA6C;
  block[3] = &unk_1011B1BB8;
  v11 = v5;
  v7 = *(id *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_10076FA6C(_QWORD *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  v2 = a1[4];
  v3 = sub_10043261C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v5)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Successfully fetched profile picture from the ProfilePictureStore", (uint8_t *)&v8, 2u);
    }
  }
  else if (v5)
  {
    v6 = a1[5];
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "When fetching profile picture from the ProfilePictureStore, no icon was returned - %@", (uint8_t *)&v8, 0xCu);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_10076FB74(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint8_t v6[16];

  v2 = sub_10043261C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "User is not logged in, assigning loggedOutIcon as profile picture", v6, 2u);
  }

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loggedOutIcon"));
  (*(void (**)(uint64_t, void *, _QWORD))(v4 + 16))(v4, v5, 0);

}

void sub_10076FCDC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v5 = a2;
  v6 = v5;
  if (!a3)
  {
    v11 = v5;
    v7 = objc_msgSend(v5, "count");
    v6 = v11;
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
      v9 = *(_QWORD *)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_addressFormattedAsCity"));
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

      v6 = v11;
    }
  }

}

void sub_10076FEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10076FEEC(uint64_t a1, char a2)
{
  _QWORD block[5];
  id v5;
  char v6;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10076FF80;
  block[3] = &unk_1011B0408;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  block[4] = *(_QWORD *)(a1 + 32);
  v6 = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v5);
}

void sub_10076FF80(uint64_t a1)
{
  id WeakRetained;
  _BYTE *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = *(_BYTE **)(a1 + 32);
    if (!v3[16] && (*(_BYTE *)(a1 + 48) || (objc_msgSend(v3, "loggedIn") & 1) == 0))
    {
      v4 = sub_10043261C();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "retrieveUserProfilePicture has not been called yet, calling it now.", buf, 2u);
      }

      objc_msgSend(WeakRetained, "_retrieveUserProfilePicture");
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 1;
    }
    v6 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v6 + 8))
    {
      v7 = sub_10043261C();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Invalidate current throttle timer", v17, 2u);
      }

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "invalidate");
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(void **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;

      v6 = *(_QWORD *)(a1 + 32);
    }
    v11 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v6, "_throttledProfilePictureTimerUpdate:", 0, 0, 10.0));
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v11;

    v14 = sub_10043261C();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Create a new timer to throttle the next call to retrieve profile picture by 10 seconds. Retrieving the picture again will only be retried when the 10 second interval has passed without receiving any new notifications that the profile picture has changed.", v16, 2u);
    }

  }
}

void sub_1007703A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007703E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v9 = sub_1004326FC();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "VehicleListVC - failed to get virtual garage with error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      objc_msgSend(WeakRetained, "_consumeUpdatedVirtualGarage:", v5);
    }
  }

}

void sub_1007704D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v9 = sub_1004326FC();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "VehicleListVC - failed to get unpairedVehicles with error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      objc_msgSend(WeakRetained, "_consumeUpdatedUnpairedVehicles:", v5);
    }
  }

}

void sub_100771308(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  int v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  Block_layout *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "savedVehicles"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "vehicles"));
  v4 = v2;
  v5 = v3;
  v6 = objc_msgSend(v4, "count");
  if (v6 != objc_msgSend(v5, "count"))
  {

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "vehicles"));
    objc_msgSend(*(id *)(a1 + 32), "setSavedVehicles:", v12);

LABEL_6:
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "reloadData");
    return;
  }
  v7 = (unint64_t)v4;
  v8 = (unint64_t)v5;
  if (!(v7 | v8)
    || (v9 = (void *)v8,
        v10 = objc_msgSend((id)v7, "isEqual:", v8),
        v9,
        (id)v7,
        (v10 & 1) != 0))
  {

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "vehicles"));
    objc_msgSend(*(id *)(a1 + 32), "setSavedVehicles:", v11);

    return;
  }
  v13 = sub_10077284C((void *)v7);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = sub_10077284C(v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v7, "sortedArrayUsingComparator:", &stru_1011C6008));
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100772E4C;
  v21[3] = &unk_1011C6070;
  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sortedArrayUsingComparator:", &stru_1011C6008));
  v22 = v18;
  v23 = &stru_1011C6048;
  v24 = &v25;
  objc_msgSend(v17, "enumerateObjectsUsingBlock:", v21);
  v19 = *((unsigned __int8 *)v26 + 24);

  _Block_object_dispose(&v25, 8);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "vehicles"));
  objc_msgSend(*(id *)(a1 + 32), "setSavedVehicles:", v20);

  if (v19)
    goto LABEL_6;
}

void sub_10077155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1007715F0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  id result;
  id v11;
  void *v12;
  id v13;
  void *v14;
  unsigned __int8 v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "unpairedVehicles"));
  v3 = *(void **)(a1 + 40);
  v4 = v2;
  v5 = v3;
  v6 = objc_msgSend(v4, "count");
  if (v6 != objc_msgSend(v5, "count"))
  {

    objc_msgSend(*(id *)(a1 + 32), "setUnpairedVehicles:", *(_QWORD *)(a1 + 40));
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "reloadData");
  }
  v7 = (unint64_t)v4;
  v8 = (unint64_t)v5;
  if (!(v7 | v8)
    || (v9 = objc_msgSend((id)v7, "isEqual:", v8),
        (id)v8,
        (id)v7,
        (v9 & 1) != 0))
  {

    return objc_msgSend(*(id *)(a1 + 32), "setUnpairedVehicles:", *(_QWORD *)(a1 + 40));
  }
  v11 = sub_10077284C((void *)v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = sub_10077284C((void *)v8);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = objc_msgSend(v12, "isEqualToSet:", v14);

  result = objc_msgSend(*(id *)(a1 + 32), "setUnpairedVehicles:", *(_QWORD *)(a1 + 40));
  if ((v15 & 1) == 0)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "reloadData");
  return result;
}

void sub_100771838(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100771854(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9[2];

  v5 = a2;
  if (objc_msgSend(v5, "isPureElectricVehicle"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[VGVirtualGarageService sharedService](VGVirtualGarageService, "sharedService"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100771940;
    v8[3] = &unk_1011C5F78;
    v9[1] = a3;
    objc_copyWeak(v9, (id *)(a1 + 32));
    objc_msgSend(v6, "virtualGarageGetLatestStateOfVehicleWithIdentifier:syncAcrossDevices:withReply:", v7, 1, v8);

    objc_destroyWeak(v9);
  }

}

void sub_10077192C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100771940(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  _QWORD block[4];
  id v15;
  id v16[2];
  uint8_t buf[4];
  id v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  uint64_t v22;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v10 = sub_1004326FC();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v18 = v5;
      v19 = 2112;
      v20 = v7;
      v21 = 2048;
      v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to get latest SoC for vehicle: %@ error: %@ index: %lu", buf, 0x20u);
    }

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v13, "captureUserAction:onTarget:eventValue:", 6094, 0, 0);

  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100771AC4;
    block[3] = &unk_1011B9268;
    objc_copyWeak(v16, (id *)(a1 + 32));
    v8 = v5;
    v9 = *(void **)(a1 + 40);
    v15 = v8;
    v16[1] = v9;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    objc_destroyWeak(v16);
  }

}

void sub_100771AC4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateVehicle:atIndex:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

}

id sub_10077284C(void *a1)
{
  id v1;
  id v2;
  _QWORD v4[4];
  id v5;

  v1 = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007728DC;
  v4[3] = &unk_1011C5FC8;
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v5 = v2;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v4);

  return v2;
}

void sub_1007728DC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  objc_msgSend(v2, "addObject:", v3);

}

int64_t sub_100772920(id a1, VGVehicle *a2, VGVehicle *a3)
{
  VGVehicle *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle identifier](a2, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle identifier](v4, "identifier"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

BOOL sub_10077298C(id a1, VGVehicle *a2, VGVehicle *a3)
{
  VGVehicle *v4;
  VGVehicle *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  unsigned int v26;
  void *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  unsigned int v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  unsigned int v39;
  void *v40;
  void *v41;
  unint64_t v42;
  unsigned int v43;
  void *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  unsigned int v49;
  void *v50;
  void *v51;
  unint64_t v52;
  id v53;
  void *v54;
  unsigned __int8 v55;
  unsigned int v57;
  void *v58;
  unint64_t v59;
  void *v60;
  void *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  unint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle identifier](v4, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle identifier](v5, "identifier"));
  v8 = v6;
  v9 = v7;
  if (v8 | v9
    && (v10 = objc_msgSend((id)v8, "isEqual:", v9), (id)v9, (id)v8, !v10))
  {
    v55 = 1;
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle iapIdentifier](v4, "iapIdentifier"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle iapIdentifier](v5, "iapIdentifier"));
    v13 = v11;
    v14 = v12;
    if (v13 | v14
      && (v15 = objc_msgSend((id)v13, "isEqual:", v14), (id)v14, (id)v13, !v15))
    {
      v55 = 1;
    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle siriIntentsIdentifier](v4, "siriIntentsIdentifier"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle siriIntentsIdentifier](v5, "siriIntentsIdentifier"));
      v18 = v16;
      v19 = v17;
      v70 = (void *)v18;
      if (v18 | v19
        && (v20 = objc_msgSend((id)v18, "isEqual:", v19),
            (id)v19,
            (id)v18,
            !v20))
      {
        v55 = 1;
      }
      else
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle displayName](v4, "displayName"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle displayName](v5, "displayName"));
        v23 = v21;
        v24 = v22;
        v25 = (void *)v23;
        v69 = (void *)v24;
        if (v23 | v24
          && (v26 = objc_msgSend((id)v23, "isEqual:", v24), v69, v25, !v26))
        {
          v55 = 1;
        }
        else
        {
          v67 = v25;
          v27 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle manufacturer](v4, "manufacturer"));
          v28 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle manufacturer](v5, "manufacturer"));
          v29 = v27;
          v30 = v28;
          v68 = (void *)v29;
          if (v29 | v30
            && (v31 = (void *)v29,
                v32 = objc_msgSend((id)v29, "isEqual:", v30),
                (id)v30,
                v31,
                !v32))
          {
            v55 = 1;
            v25 = v67;
          }
          else
          {
            v66 = v30;
            v33 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle model](v4, "model"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle model](v5, "model"));
            v35 = v33;
            v36 = v34;
            v64 = (void *)v36;
            v65 = (void *)v35;
            if (v35 | v36
              && (v37 = (void *)v35,
                  v38 = (void *)v36,
                  v39 = objc_msgSend((id)v35, "isEqual:", v36),
                  v38,
                  v37,
                  !v39))
            {
              v55 = 1;
              v25 = v67;
            }
            else
            {
              v40 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle colorHex](v4, "colorHex"));
              v41 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle colorHex](v5, "colorHex"));
              v42 = v40;
              v62 = v41;
              v63 = (void *)v42;
              if (v42 | v62
                && (v43 = objc_msgSend((id)v42, "isEqual:", v62),
                    (id)v62,
                    v63,
                    !v43))
              {
                v55 = 1;
                v25 = v67;
              }
              else
              {
                v44 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle licensePlate](v4, "licensePlate"));
                v45 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle licensePlate](v5, "licensePlate"));
                v46 = v44;
                v47 = v45;
                v61 = (void *)v47;
                if (v46 | v47
                  && (v48 = (void *)v47,
                      v49 = objc_msgSend((id)v46, "isEqual:", v47),
                      v48,
                      (id)v46,
                      !v49))
                {
                  v55 = 1;
                  v25 = v67;
                }
                else
                {
                  v50 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle preferredChargingNetworks](v4, "preferredChargingNetworks"));
                  v51 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle preferredChargingNetworks](v5, "preferredChargingNetworks"));
                  v52 = v50;
                  v59 = v51;
                  v60 = (void *)v52;
                  if ((!(v52 | v59)
                     || (v57 = objc_msgSend((id)v52, "isEqual:", v59),
                         (id)v59,
                         (id)v52,
                         v57))
                    && (v53 = -[VGVehicle supportedConnectors](v4, "supportedConnectors"),
                        v53 == -[VGVehicle supportedConnectors](v5, "supportedConnectors")))
                  {
                    v58 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle currentVehicleState](v4, "currentVehicleState"));
                    v54 = (void *)objc_claimAutoreleasedReturnValue(-[VGVehicle currentVehicleState](v5, "currentVehicleState"));
                    v55 = objc_msgSend(v58, "isSignificantlyDifferentFromVehicleState:", v54);

                  }
                  else
                  {
                    v55 = 1;
                  }
                  v25 = v67;

                }
              }

            }
            v30 = v66;
          }

        }
      }

    }
  }

  return v55;
}

void sub_100772E4C(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  id v9;

  v7 = (void *)a1[4];
  v8 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndex:", a3));
  LODWORD(a3) = (*(uint64_t (**)(void))(a1[5] + 16))();

  if ((_DWORD)a3)
  {
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    *a4 = 1;
  }

}

UIFont *__cdecl sub_100772EE0(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKFontManager sharedManager](MKFontManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "subtitleFont"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 22.0));

  return (UIFont *)v3;
}

UIFont *__cdecl sub_100772F4C(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKFontManager sharedManager](MKFontManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "largeTitleFont"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 30.0));

  return (UIFont *)v3;
}

void sub_100775D44(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v4 = v3;
  if (v2)
  {
    objc_msgSend(v3, "setAlpha:", 0.0);

    objc_msgSend(*(id *)(a1 + 32), "didStartHiding");
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v5, "layoutIfNeeded");

  }
  else
  {
    objc_msgSend(v3, "setAlpha:", 1.0);

    objc_msgSend(*(id *)(a1 + 32), "didStartShowing");
  }
}

void sub_100775DE0(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void ***v14;
  void *v15;
  void **v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  id v21;

  objc_msgSend(*(id *)(a1 + 32), "setOpen:animated:", 0, 0);
  if (qword_1014D31F8 && objc_msgSend(*(id *)(a1 + 32), "isVisible"))
  {
    +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", qword_1014D31F8);
    v2 = objc_msgSend(*(id *)(a1 + 32), "isOpen");
    v3 = *(void **)(a1 + 32);
    if (v2)
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "openConstraints"));
    else
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "closedConstraints"));
    v5 = (void *)v4;
    +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v4);

  }
  if (*(_BYTE *)(a1 + 48))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v6, "setAlpha:", 1.0);

    objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
  }
  objc_msgSend(*(id *)(a1 + 32), "setUpdateHiddenAnimationActive:", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateHiddenAnimationCompletionBlocks"));
  v8 = objc_msgSend(v7, "count");

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateHiddenAnimationCompletionBlocks"));
    v10 = objc_msgSend(v9, "copy");

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateHiddenAnimationCompletionBlocks"));
    objc_msgSend(v11, "removeAllObjects");

    v16 = _NSConcreteStackBlock;
    v17 = 3221225472;
    v18 = sub_100775FB0;
    v19 = &unk_1011ACAD0;
    v12 = *(id *)(a1 + 40);
    v20 = v10;
    v21 = v12;
    v13 = v10;
    v14 = objc_retainBlock(&v16);

  }
  else
  {
    v14 = (void ***)objc_retainBlock(*(id *)(a1 + 40));
  }
  v15 = *(void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 48))
    objc_msgSend(v15, "didFinishHiding");
  else
    objc_msgSend(v15, "didFinishShowing");
  objc_msgSend(*(id *)(a1 + 32), "updateHiddenAnimated:completion:", 1, v14, v16, v17, v18, v19);

}

void sub_100775FB0(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7) + 16))(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

id sub_100776298(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "didChangeConstraints");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "scrollToDisplayedFloorAnimated:", 0);
  return _objc_msgSend(*(id *)(a1 + 32), "updateCloseButtonVisibility");
}

id sub_1007762E4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return _objc_msgSend(*(id *)(a1 + 32), "updateShowSelectionWithForceClipCorners:", 1);
}

id sub_100776314(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateShowSelection");
}

id sub_100776B28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateVenueAndBuildingsAnimated:forced:", 1, *(unsigned __int8 *)(a1 + 40));
}

id sub_100776B3C(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floorCollectionView"));
  objc_msgSend(v2, "reloadData");

  return objc_msgSend(*(id *)(a1 + 32), "updateFloorOptimalOpenHeightConstraint");
}

id sub_100776B74(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "floorCollectionView"));
  objc_msgSend(v2, "layoutIfNeeded");

  return _objc_msgSend(*(id *)(a1 + 32), "updateDisplayedFloorAnimated:", 0);
}

uint64_t sub_100776BB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100777E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100777EA8(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    (*(void (**)(void))(*((_QWORD *)WeakRetained + 16) + 16))();
    objc_msgSend(v4, "dismissModal");
  }

}

id sub_10077859C(id a1, NSNumber *a2)
{
  NSInteger v2;
  void *v3;

  v2 = -[NSNumber integerValue](a2, "integerValue");
  if (v2 == 2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[WelcomeScreenBullet landmarksIn3D](WelcomeScreenBullet, "landmarksIn3D"));
  }
  else if (v2 == 1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[WelcomeScreenBullet transitCards](WelcomeScreenBullet, "transitCards"));
  }
  else if (v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[WelcomeScreenBullet multiStopRouting](WelcomeScreenBullet, "multiStopRouting"));
  }
  return v3;
}

double sub_100778658(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  CLLocationCoordinate2D v18;
  MKMapPoint v20[2];
  CLLocationCoordinate2D v21;
  CLLocationCoordinate2D v22;
  MKMapPoint v23;

  if (!a1)
    return MKMapRectNull.origin.x;
  v1 = a1;
  v21.latitude = CLLocationCoordinate2DFromGEOLocationCoordinate2D(objc_msgSend(v1, "startGeoCoordinate"));
  v20[0] = MKMapPointForCoordinate(v21);
  v22.latitude = CLLocationCoordinate2DFromGEOLocationCoordinate2D(objc_msgSend(v1, "endGeoCoordinate"));
  v20[1] = MKMapPointForCoordinate(v22);
  v2 = MKMapRectBoundingMapPoints(v20, 2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  objc_msgSend(v1, "startGeoCoordinate");
  v10 = v9;
  v12 = v11;
  objc_msgSend(v1, "endGeoCoordinate");
  v14 = v13;
  v16 = v15;

  if (GEOCalculateDistance(v17, v10, v12, v14, v16) < 150.0)
  {
    v23.x = v2 + v6 * 0.5;
    v23.y = v4 + v8 * 0.5;
    v18 = MKCoordinateForMapPoint(v23);
    return MKMapRectMakeWithRadialDistance(v18.latitude, v18.longitude, 75.0);
  }
  return v2;
}

double sub_1007787B0(void *a1)
{
  id v1;
  void *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  MKMapPoint v17;
  uint64_t v18;
  MKMapPoint v19;
  BOOL v20;
  CLLocationCoordinate2D v21;
  uint64_t v22;
  double v23;
  double v24;
  double latitude;
  double longitude;
  double x;
  CLLocationCoordinate2D v29;
  CLLocationCoordinate2D v30;
  MKMapPoint v31;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "composedRoute"));
  v3 = (char *)objc_msgSend(v1, "stepIndex");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "steps"));
  v5 = (char *)objc_msgSend(v4, "count") - 1;

  if (v3 == v5)
  {
    v7 = 0;
  }
  else
  {
    if (objc_msgSend(v1, "stepIndex"))
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "getPreviousStep"));
    else
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "getNextStep"));
    v7 = (void *)v6;
  }
  v8 = objc_msgSend(v2, "pointAt:", objc_msgSend(v1, "endPointIndex"));
  v11 = v9;
  v12 = v10;
  v13 = v10;
  v14 = v9;
  if (v3 != v5)
  {
    v13 = v10;
    v14 = v9;
    if (v7)
    {
      v8 = objc_msgSend(v2, "pointAt:", objc_msgSend(v7, "endPointIndex"));
      v14 = v15;
      v13 = v16;
    }
  }
  v29.latitude = CLLocationCoordinate2DFromGEOLocationCoordinate2D(v8);
  v17 = MKMapPointForCoordinate(v29);
  v30.latitude = CLLocationCoordinate2DFromGEOLocationCoordinate2D(v18);
  v19 = MKMapPointForCoordinate(v30);
  if (v3 == v5 || (v17.x == v19.x ? (v20 = v17.y == v19.y) : (v20 = 0), v20))
  {
    v24 = 400.0;
    latitude = v11;
    longitude = v12;
  }
  else
  {
    v31.x = (v17.x + v19.x) * 0.5;
    v31.y = (v17.y + v19.y) * 0.5;
    v21 = MKCoordinateForMapPoint(v31);
    v23 = GEOCalculateDistance(v22, v11, v12, v14, v13);
    if (v23 <= 0.0)
    {
      x = MKMapRectNull.origin.x;
      goto LABEL_19;
    }
    v24 = v23 * 0.75;
    latitude = v21.latitude;
    longitude = v21.longitude;
  }
  x = MKMapRectMakeWithRadialDistance(latitude, longitude, v24);
LABEL_19:

  return x;
}

void sub_10077899C(void *a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD, double, double, double, double);
  void (**v5)(_QWORD, double, double, double, double);
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  _QWORD v19[4];
  void (**v20)(_QWORD, double, double, double, double);
  _QWORD *v21;
  double v22;
  double v23;
  _QWORD v24[4];
  NSObject *v25;
  _QWORD v26[4];
  NSObject *v27;
  id v28;
  _QWORD *v29;
  _QWORD v30[5];
  id v31;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    if (v3)
    {
      objc_msgSend(v3, "startGeoCoordinate");
      v7 = v6;
      v9 = v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "endingStop"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "composedRoute"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "getStationForStop:", v10));

      if (v12)
      {
        v13 = objc_alloc_init((Class)GEOMapFeatureAccess);
        objc_msgSend(v13, "setAllowNetworkTileLoad:", 1);
        v30[0] = 0;
        v30[1] = v30;
        v30[2] = 0x3032000000;
        v30[3] = sub_100778C24;
        v30[4] = sub_100778C34;
        v31 = 0;
        v14 = dispatch_group_create();
        dispatch_group_enter(v14);
        v15 = objc_msgSend(v12, "muid");
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100778C3C;
        v26[3] = &unk_1011C6190;
        v27 = v14;
        v16 = v13;
        v28 = v16;
        v29 = v30;
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_100778D34;
        v24[3] = &unk_1011B1BE0;
        v17 = v27;
        v25 = v17;
        v18 = objc_msgSend(v16, "findTransitPointWithID:near:pointHandler:completionHandler:", v15, v26, v24, v7, v9);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_100778D3C;
        v19[3] = &unk_1011C61B8;
        v21 = v30;
        v22 = v7;
        v23 = v9;
        v20 = v5;
        dispatch_group_notify(v17, (dispatch_queue_t)&_dispatch_main_q, v19);

        _Block_object_dispose(v30, 8);
      }
      else
      {
        v5[2](v5, MKMapRectNull.origin.x, MKMapRectNull.origin.y, MKMapRectNull.size.width, MKMapRectNull.size.height);
      }

    }
    else
    {
      v4[2](v4, MKMapRectNull.origin.x, MKMapRectNull.origin.y, MKMapRectNull.size.width, MKMapRectNull.size.height);
    }
  }

}

void sub_100778C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100778C24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100778C34(uint64_t a1)
{

}

void sub_100778C3C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100778CF0;
  v8[3] = &unk_1011C6168;
  v5 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v9 = v3;
  v11 = v4;
  v10 = *(id *)(a1 + 32);
  v6 = v3;
  v7 = objc_msgSend(v5, "findTransitGeometryForPoint:completionHandler:", v6, v8);

}

void sub_100778CF0(uint64_t a1)
{
  if ((GEOMapRectIsNull(objc_msgSend(*(id *)(a1 + 32), "boundingRect")) & 1) == 0)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(id *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100778D34(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100778D3C(uint64_t a1)
{
  void *v2;
  id v3;
  double v4;
  double x;
  double v6;
  double y;
  double v8;
  double width;
  double v10;
  double height;
  MKMapPoint v12;
  CLLocationCoordinate2D v14;
  MKMapRect v15;
  MKMapRect v16;
  MKMapRect v17;
  MKMapRect v18;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v2)
  {
    v3 = objc_msgSend(v2, "boundingRect");
    x = v4;
    y = v6;
    width = v8;
    height = v10;
    v14.latitude = CLLocationCoordinate2DFromGEOLocationCoordinate2D(v3);
    v12 = MKMapPointForCoordinate(v14);
    v15.origin.x = x;
    v15.origin.y = y;
    v15.size.width = width;
    v15.size.height = height;
    if (!MKMapRectContainsPoint(v15, v12))
    {
      v18.size.width = 0.0;
      v18.size.height = 0.0;
      v16.origin.x = x;
      v16.origin.y = y;
      v16.size.width = width;
      v16.size.height = height;
      v18.origin.x = v12.x;
      v18.origin.y = v12.y;
      v17 = MKMapRectUnion(v16, v18);
      x = v17.origin.x;
      y = v17.origin.y;
      width = v17.size.width;
      height = v17.size.height;
    }
  }
  else
  {
    x = MKMapRectNull.origin.x;
    y = MKMapRectNull.origin.y;
    width = MKMapRectNull.size.width;
    height = MKMapRectNull.size.height;
  }
  return (*(uint64_t (**)(double, double, double, double))(*(_QWORD *)(a1 + 32) + 16))(x, y, width, height);
}

void sub_100778E28(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a1;
  v4 = a2;
  if (v4)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100778ECC;
    v5[3] = &unk_1011C61E0;
    v6 = v3;
    v7 = v4;
    sub_10077899C(v6, v5);

  }
}

uint64_t sub_100778ECC(uint64_t a1, __n128 a2, double a3)
{
  if (a2.n128_f64[0] == MKMapRectNull.origin.x && a3 == MKMapRectNull.origin.y)
    a2.n128_f64[0] = sub_100778658(*(void **)(a1 + 32));
  return (*(uint64_t (**)(__n128))(*(_QWORD *)(a1 + 40) + 16))(a2);
}

id sub_10077AA40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_10077AA48(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setAnimatingToHideLaneGuidanceView:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceView"));
  objc_msgSend(v2, "setLanes:", 0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "laneGuidanceView"));
  objc_msgSend(v3, "setHidden:", 1);

}

id sub_10077AC58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_10077AC60(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setActive:", 0);
  objc_msgSend(*(id *)(a1 + 40), "setAnimatingToHideManeuverView:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "maneuverView"));
  objc_msgSend(v2, "setHidden:", 1);

}

id sub_10077AEC0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_10077AED0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10077AF94;
  v7[3] = &unk_1011AC8B0;
  v2 = *(id *)(a1 + 32);
  v4 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v8 = v2;
  v9 = v3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10077AFE0;
  v5[3] = &unk_1011AE8F8;
  v6 = v4;
  +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v7, v5, 0.300000012);

}

void sub_10077AF94(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "laneGuidanceView"));
  objc_msgSend(v2, "setAlpha:", 1.0);

}

id sub_10077AFE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

void sub_10077BD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10077BDA0(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sender"));

  objc_msgSend(WeakRetained, "_accessoryButtonTapped:accessoryModel:", v5, *(_QWORD *)(a1 + 32));
}

void sub_10077BEA8(uint64_t a1, void *a2, uint64_t a3)
{
  _BOOL4 v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  UIColor *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;

  if (objc_msgSend(a2, "visibility") == (id)1)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "isHovering") & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cellModel"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "actionModel"));
      v5 = v8 != 0;

    }
    v6 = objc_msgSend(*(id *)(a1 + 32), "isHovering");
  }
  else
  {
    v6 = 1;
    v5 = 1;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "useLightForegroundColors") & 1) != 0)
    v9 = sub_10094ECC8();
  else
    v9 = sub_10094ECBC();
  v14 = (id)objc_claimAutoreleasedReturnValue(v9);
  if ((v6 & 1) == 0)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));

    v14 = (id)v10;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectAtIndexedSubscript:", a3));
  if (v5)
  {
    v12 = objc_opt_class(_UICellAccessoryConfigurationCustomView);
    if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0)
    {
      v13 = v11;
      objc_msgSend(v13, "setTintColor:", v14);
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v13);

    }
    else if (v11)
    {
      objc_msgSend(v11, "setTintColor:", v14);
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v11);
    }
  }

}

void sub_10077C5AC(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + 32), "registrationWithCellClass:configurationHandler:", objc_opt_class(TwoLinesOutlineCell), &stru_1011C6248);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1014D3200;
  qword_1014D3200 = v2;

}

void sub_10077C5F8(id a1, TwoLinesOutlineCell *a2, NSIndexPath *a3, MapsUIDiffableDataSourceOutlineNodeSnapshot *a4)
{
  void *v5;
  void *v6;
  id v7;
  TwoLinesOutlineCell *v8;

  v8 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsUIDiffableDataSourceOutlineNodeSnapshot viewModel](a4, "viewModel"));
  if (objc_msgSend(v5, "conformsToProtocol:", &OBJC_PROTOCOL___TwoLinesOutlineCellModel))
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  -[TwoLinesOutlineCell setCellModel:](v8, "setCellModel:", v7);
}

uint64_t sub_10077C874(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10077CAD8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_10077D238(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setImage:", a2);
}

void sub_10077D9B4(uint64_t a1)
{
  void *v2;

  NSLog(CFSTR("UIBackgroundTask reached timeout"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = UIBackgroundTaskInvalid;
}

void sub_10077DA1C(uint64_t a1)
{
  void *v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = UIBackgroundTaskInvalid;
}

void sub_10077DC0C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10077DD18;
  v9[3] = &unk_1011ACF48;
  v9[4] = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Show Venue Notification"), v9);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10077DDA8;
  v8[3] = &unk_1011ACF48;
  v8[4] = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Show MapsSuggestions Notification"), v8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10077DE38;
  v7[3] = &unk_1011ACF48;
  v7[4] = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Show Low Fuel Notification"), v7);
  objc_msgSend(v3, "setFooter:", CFSTR("WARNING! These toggles produce notifications without exercising most of the logic involved in populating the content of the real world equivilent."));

}

id sub_10077DD18(uint64_t a1)
{
  return +[MapsPushdDebugController performAfterDelay:action:](MapsPushdDebugController, "performAfterDelay:action:", &stru_1011C6290, *(double *)(a1 + 32));
}

void sub_10077DD34(id a1)
{
  id v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  v1 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", CFSTR("https://maps.apple.com/?auid=16375256398390226749&lsp=0"));
  objc_msgSend(v2, "showVenueBulletinWithTitle:message:actionURL:", CFSTR("Welcome to SJC"), CFSTR("Explore a detailed airport map to quickly find your gate, baggage claim, shops, and more."), v1);

}

id sub_10077DDA8(uint64_t a1)
{
  return +[MapsPushdDebugController performAfterDelay:action:](MapsPushdDebugController, "performAfterDelay:action:", &stru_1011C62B0, *(double *)(a1 + 32));
}

void sub_10077DDC4(id a1)
{
  id v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  v1 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", CFSTR("http://maps.apple.com/?daddr=Space+Needle"));
  objc_msgSend(v2, "showMapsSuggestionsBulletinWithTitle:message:actionURL:", CFSTR("17 min to Space Needle"), CFSTR("Take Aurora Ave N, traffic is moderate"), v1);

}

id sub_10077DE38(uint64_t a1)
{
  return +[MapsPushdDebugController performAfterDelay:action:](MapsPushdDebugController, "performAfterDelay:action:", &stru_1011C62D0, *(double *)(a1 + 32));
}

void sub_10077DE54(id a1)
{
  id v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  v1 = objc_msgSend(objc_alloc((Class)MSPLowFuelDetails), "initWithTitle:subtitle:engineType:", CFSTR("Low EV Battery"), CFSTR("Find an EV Charger"), &off_10126ECB0);
  objc_msgSend(v2, "showLowFuelAlertBulletinForLowFuelDetails:", v1);

}

void sub_10077DEC8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Clear Current Announcement"), &stru_1011C6330);
  v3 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v4, "addButtonRowWithTitle:action:", CFSTR("Reset Announcements"), &stru_1011C6350);

}

void sub_10077DF28(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  objc_msgSend(v1, "clearCurrentAnnouncement");

}

void sub_10077DF5C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  objc_msgSend(v1, "resetAnnouncements");

}

void sub_10077DF90(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Clear Airport Arrival Notification History"), &stru_1011C6390);
}

void sub_10077DFC0(id a1)
{
  id v1;

  v1 = objc_alloc_init((Class)NSDictionary);
  GEOConfigSetDictionary(GEOConfigMapsSuggestionsAirportArrivalAnnouncerBudgetState[0], GEOConfigMapsSuggestionsAirportArrivalAnnouncerBudgetState[1], v1);

}

void sub_10077E000(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfURL:", *(_QWORD *)(a1 + 32));
  if (v4 && (v5 = objc_msgSend(objc_alloc((Class)GEOAvailableAnnouncements), "initWithData:", v4)) != 0)
  {
    v6 = v5;
    v22 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "languageCode"));
    v8 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Language Code"), v7);

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "announcements"));
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "title"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (%u)"), v15, objc_msgSend(v14, "announcementID")));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userMessage"));
          v18 = objc_msgSend(v3, "addReadOnlyRowWithTitle:subtitle:", v16, v17);

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v11);
    }

    v4 = v22;
  }
  else if (*(_QWORD *)(a1 + 32))
  {
    v19 = objc_msgSend(v3, "addReadOnlyRowWithTitle:subtitle:", CFSTR("No announcements found"), CFSTR("Path not set"));
  }
  else
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "path"));
    v21 = objc_msgSend(v3, "addReadOnlyRowWithTitle:subtitle:", CFSTR("No announcements found"), v20);

  }
}

void sub_10077E6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10077E6D8(uint64_t a1, CLLocationDegrees a2, CLLocationDegrees a3)
{
  double v5;
  double v6;
  id *WeakRetained;
  CLLocationCoordinate2D v8;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8.latitude = a2;
    v8.longitude = a3;
    if (CLLocationCoordinate2DIsValid(v8))
    {
      objc_msgSend(WeakRetained[6], "selectedCoordinate");
      if (vabdd_f64(a2, v6) >= 0.00000000999999994 || vabdd_f64(a3, v5) >= 0.00000000999999994)
      {
        objc_msgSend(WeakRetained[6], "setSelectedCoordinate:", a2, a3);
        objc_msgSend(WeakRetained[8], "updateCoordinate:", a2, a3);
      }
    }
  }

}

void sub_10077E830(id a1)
{
  void *v1;
  void *v2;
  unsigned int v3;
  id v4;
  void *v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bundleIdentifier"));
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.NanoMaps"));

  if (v3)
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  else
    v4 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.NanoMaps"));
  v5 = (void *)qword_1014D3210;
  qword_1014D3210 = (uint64_t)v4;

}

void sub_10077E8FC(id a1)
{
  void *v1;
  void *v2;
  unsigned int v3;
  id v4;
  void *v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bundleIdentifier"));
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.Maps"));

  if (v3)
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  else
    v4 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.Maps"));
  v5 = (void *)qword_1014D3220;
  qword_1014D3220 = (uint64_t)v4;

}

void sub_10077F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10077F04C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10077F05C(uint64_t a1)
{

}

void sub_10077F064(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_1007810CC()
{
  if (qword_1014D3238 != -1)
    dispatch_once(&qword_1014D3238, &stru_1011C6418);
  return (id)qword_1014D3230;
}

void sub_1007835F0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "pauseVIOSession");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monitors"));
  objc_msgSend(v2, "removeAllObjects");

}

void sub_10078368C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "monitors"));
  objc_msgSend(v1, "removeAllObjects");

}

void sub_100783738(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
  objc_msgSend(v1, "createMonitorsForConfiguration:", v2);

}

id sub_1007837D0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleTransportTypeChanged:", *(_QWORD *)(a1 + 40));
}

void sub_100784350(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionTask");
  v2 = (void *)qword_1014D3230;
  qword_1014D3230 = (uint64_t)v1;

}

void sub_10078455C(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  Flyover *v9;
  void *v10;
  uint64_t v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431A4C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "PresentFlyoverAction resolveMapItem: %@", (uint8_t *)&v12, 0xCu);
    }

    v9 = 0;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
    v9 = -[Flyover initWithAnnouncement:mapItem:animationID:]([Flyover alloc], "initWithAnnouncement:mapItem:animationID:", a1[4], v10, a1[6]);

  }
  v11 = a1[5];
  if (v11)
    (*(void (**)(uint64_t, Flyover *))(v11 + 16))(v11, v9);

}

void sub_100785A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100785A64(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained && WeakRetained[6] == *(id *)(a1 + 40))
    objc_msgSend(WeakRetained[2], "setImage:", v5);

}

void sub_100785CAC(id a1)
{
  MapsPinsController *v1;
  void *v2;

  v1 = objc_alloc_init(MapsPinsController);
  v2 = (void *)qword_1014D3240;
  qword_1014D3240 = (uint64_t)v1;

}

void sub_100786130(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  LOBYTE(v4) = objc_msgSend(v4, "isEqualToMarkedLocation:", v5);

  if ((v4 & 1) == 0)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 8);
    *(_QWORD *)(v7 + 8) = v6;

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100786204;
    v10[3] = &unk_1011ACAD0;
    v9 = *(id *)(a1 + 40);
    v10[4] = *(_QWORD *)(a1 + 32);
    v11 = v9;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

  }
}

id sub_100786204(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "droppedPin"));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  }
  return _objc_msgSend(*(id *)(a1 + 32), "_notifySearchManager");
}

id sub_100786400(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavdLocationManager");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v5 = NSStringFromClass(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[CLLocationManager navdLocationBundleSource](CLLocationManager, "navdLocationBundleSource"));
    v14 = 138478083;
    v15 = v6;
    v16 = 2113;
    v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "initializing a %{private}@ with bundle source: %{private}@", (uint8_t *)&v14, 0x16u);

  }
  v8 = objc_alloc((Class)MNHybridLocationProvider);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CLLocationManager navdLocationBundleSource](CLLocationManager, "navdLocationBundleSource"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", v9));
  v11 = objc_msgSend(v8, "initWithEffectiveBundle:", v10);
  v12 = (void *)qword_1014D3250;
  qword_1014D3250 = (uint64_t)v11;

  return objc_msgSend((id)qword_1014D3250, "setMode:", 1);
}

void sub_100786564(uint64_t a1)
{
  if (qword_1014D3258 != -1)
    dispatch_once(&qword_1014D3258, *(dispatch_block_t *)(a1 + 32));
}

id sub_1007872C0(uint64_t a1, void *a2)
{
  void *v2;

  if (*(_BYTE *)(a1 + 32))
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "keyColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  return v2;
}

id sub_1007873C8(uint64_t a1, void *a2, void *a3)
{
  id *v5;
  id WeakRetained;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v20;
  id v21;
  id v22;
  id obj;
  _QWORD v24[5];
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v21 = a2;
  v22 = a3;
  v5 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v20 = WeakRetained;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    v8 = objc_opt_respondsToSelector(v7, "ticketingSegmentsForRoutePlanningFooterView:");

    if ((v8 & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "delegate"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ticketingSegmentsForRoutePlanningFooterView:", *(_QWORD *)(a1 + 32)));

      v11 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v10, "count"));
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      obj = v10;
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v12)
      {
        v13 = *(_QWORD *)v27;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v27 != v13)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "segmentName"));
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_10078766C;
            v24[3] = &unk_1011ACEC0;
            objc_copyWeak(&v25, v5);
            v24[4] = v15;
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v16, 0, 0, v24));
            objc_msgSend(v11, "addObject:", v17);

            objc_destroyWeak(&v25);
          }
          v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        }
        while (v12);
      }

      v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:children:](UIMenu, "menuWithTitle:children:", &stru_1011EB268, v11));
    }
    else
    {
      v18 = 0;
    }
    WeakRetained = v20;
  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_100787650(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10078766C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_didTapTicketingSegmentInfo:", *(_QWORD *)(a1 + 32));

}

void sub_100788824(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(+[RoutePlanningFooterCollectionViewCell _contentViewClass](RoutePlanningFooterCollectionViewCell, "_contentViewClass"));
  v2 = (void *)qword_1014D3268;
  qword_1014D3268 = v1;

}

uint64_t sub_100788894(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  int v9;
  id v10;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("_")));
  if (objc_msgSend(v1, "count"))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", 0));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsSeparatedByString:", CFSTR("_")));
    if (objc_msgSend(v3, "count"))
    {
      v4 = sub_100431FFC();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v9 = 138412290;
        v10 = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Value is %@", (uint8_t *)&v9, 0xCu);
      }

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 0));
      if ((objc_msgSend(v6, "isEqualToString:", CFSTR("RAPIMAGEUPLOAD")) & 1) != 0)
      {
        v7 = 1;
      }
      else if (objc_msgSend(v6, "isEqualToString:", CFSTR("RAPCORRECTIONSUPLOAD")))
      {
        v7 = 2;
      }
      else
      {
        v7 = 0;
      }

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v9) = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Assertion failed: components.count > 0", (uint8_t *)&v9, 2u);
    }
    v7 = 0;
  }

  return v7;
}

uint64_t sub_100788A44(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  void *v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  __int16 v17;
  __int16 v18;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("_")));
  if (objc_msgSend(v9, "count") != (id)5)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
LABEL_8:
      v12 = 0;
      goto LABEL_4;
    }
    v18 = 0;
    v15 = "Assertion failed: components.count == 5";
    v16 = (uint8_t *)&v18;
LABEL_10:
    _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, v15, v16, 2u);
    goto LABEL_8;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 0));
  v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("RAPIMAGEUPLOAD"));

  if ((v11 & 1) == 0)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
      goto LABEL_8;
    v17 = 0;
    v15 = "Assertion failed: [components[0] isEqualToString:@\"RAPIMAGEUPLOAD\"]";
    v16 = (uint8_t *)&v17;
    goto LABEL_10;
  }
  v12 = 1;
  *a2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 1));
  *a3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 2));
  *a4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 3));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 4));
  *a5 = objc_msgSend(v13, "integerValue");

LABEL_4:
  return v12;
}

uint64_t sub_100788BD0(void *a1, _QWORD *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  const char *v11;
  uint8_t *v12;
  __int16 v13;
  __int16 v14;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("_")));
  if (objc_msgSend(v5, "count") != (id)3)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
    {
LABEL_8:
      v8 = 0;
      goto LABEL_4;
    }
    v14 = 0;
    v11 = "Assertion failed: components.count == 3";
    v12 = (uint8_t *)&v14;
LABEL_10:
    _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, v11, v12, 2u);
    goto LABEL_8;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
  v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("RAPCORRECTIONSUPLOAD"));

  if ((v7 & 1) == 0)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
      goto LABEL_8;
    v13 = 0;
    v11 = "Assertion failed: [components[0] isEqualToString:@\"RAPCORRECTIONSUPLOAD\"]";
    v12 = (uint8_t *)&v13;
    goto LABEL_10;
  }
  v8 = 1;
  *a2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 2));
  *a3 = objc_msgSend(v9, "integerValue");

LABEL_4:
  return v8;
}

id sub_100788D1C(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[5];

  v7 = a3;
  v8 = a2;
  v9 = a1;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%i"), a4));
  v14[0] = CFSTR("RAPIMAGEUPLOAD");
  v14[1] = v9;
  v14[2] = v8;
  v14[3] = v7;
  v14[4] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v14, 5));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsJoinedByString:", CFSTR("_")));
  return v12;
}

id sub_100788E20(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[3];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%i"), a2));
  v8[0] = CFSTR("RAPCORRECTIONSUPLOAD");
  v8[1] = v3;
  v8[2] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v8, 3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsJoinedByString:", CFSTR("_")));
  return v6;
}

void sub_100789D90(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR(" · [No Query State view details separator]"), CFSTR("localized string not found"), 0));
  v2 = (void *)qword_1014D3270;
  qword_1014D3270 = v1;

}

void sub_10078A728(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[4];

  v3[0] = UIContentSizeCategoryAccessibilityLarge;
  v3[1] = UIContentSizeCategoryAccessibilityExtraLarge;
  v3[2] = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  v3[3] = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 4));
  v2 = (void *)qword_1014D3280;
  qword_1014D3280 = v1;

}

void sub_10078D0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
  uint64_t v9;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v9 - 176));
  _Unwind_Resume(a1);
}

void sub_10078D110(uint64_t a1, double a2)
{
  double v3;
  double v4;
  id *v5;
  id WeakRetained;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;

  v3 = *(double *)(a1 + 48) + (*(double *)(a1 + 64) - *(double *)(a1 + 48)) * a2;
  v4 = *(double *)(a1 + 56) + (*(double *)(a1 + 72) - *(double *)(a1 + 56)) * a2;
  v5 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "frame");
  v8 = v7;
  v10 = v9;

  v11 = objc_loadWeakRetained(v5);
  objc_msgSend(v11, "setFrame:", v8, v10, v3, v4);

  if (*(_BYTE *)(a1 + 80))
    objc_msgSend(*(id *)(a1 + 32), "setFrame:", CGRectZero.origin.x, CGRectZero.origin.y, v3, v4);
}

id sub_10078D1D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:");
}

id sub_10078D1E0(uint64_t a1, double a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0 - a2);
}

void sub_10078D1F0(uint64_t a1, double a2)
{
  double v4;
  double v5;
  void *v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0 - a2);
  objc_msgSend(*(id *)(a1 + 40), "setAlpha:", a2);
  v4 = *(double *)(a1 + 48) + (*(double *)(a1 + 64) - *(double *)(a1 + 48)) * a2;
  v5 = *(double *)(a1 + 56) + (*(double *)(a1 + 72) - *(double *)(a1 + 56)) * a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "layer"));
  objc_msgSend(v7, "setPosition:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  objc_msgSend(v6, "setPosition:", v4, v5);

}

void sub_10078FCA0(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  id v6;

  if (!a5)
  {
    if (a4)
    {
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_applicationIconImageForFormat:precomposed:", 2, 1));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setImage:", v6);

    }
  }
}

void sub_100790F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100790FA4(uint64_t a1, int a2)
{
  _QWORD block[5];

  if (a2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100791024;
    block[3] = &unk_1011ACF48;
    block[4] = *(_QWORD *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100791024(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", off_1014B72C0, *(_QWORD *)(a1 + 32));

}

uint64_t sub_100791070(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100791080(uint64_t a1)
{

}

void sub_100791088(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_10079109C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=Privacy&path=CONTACTS")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  objc_msgSend(v2, "openSensitiveURL:withOptions:", v5, 0);

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_100791718(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "appCoordinator"));
  objc_msgSend(v7, "openSearch:andResults:", v6, v5);

}

id sub_100791CF0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  BOOL v5;
  id v6;
  NSObject *v7;
  const __CFString *v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;
  BOOL v16;
  uint8_t buf[4];
  const __CFString *v18;

  v3 = a2;
  objc_msgSend(v3, "setLocation:", 0);
  objc_msgSend(v3, "setLatLng:", 0);
  v4 = *(id *)(*(_QWORD *)(a1 + 32) + 72);
  v5 = v4 == v3;
  v6 = sub_100791ED8();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = CFSTR("destination");
    if (v4 == v3)
      v8 = CFSTR("source");
    *(_DWORD *)buf = 138543362;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Requesting location update for %{public}@.", buf, 0xCu);
  }

  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100791F18;
  v13[3] = &unk_1011C66D8;
  v16 = v5;
  v10 = v3;
  v14 = v10;
  objc_copyWeak(&v15, (id *)buf);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "singleLocationUpdateWithHandler:", v13));

  objc_msgSend(v11, "start");
  objc_destroyWeak(&v15);

  objc_destroyWeak((id *)buf);
  return v11;
}

void sub_100791E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100791ED8()
{
  if (qword_1014D3298 != -1)
    dispatch_once(&qword_1014D3298, &stru_1011C6770);
  return (id)qword_1014D3290;
}

void sub_100791F18(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  const __CFString *v9;
  id v10;
  void *v11;
  void *v12;
  id WeakRetained;
  id v14;
  int v15;
  const __CFString *v16;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = sub_100791ED8();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(a1 + 48))
        v9 = CFSTR("source");
      else
        v9 = CFSTR("destination");
      v15 = 138543362;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Updated location for %{public}@.", (uint8_t *)&v15, 0xCu);
    }

    v10 = objc_msgSend(objc_alloc((Class)GEOLocation), "initWithCLLocation:", v5);
    objc_msgSend(*(id *)(a1 + 32), "setLocation:", v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "location"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "latLng"));
    objc_msgSend(*(id *)(a1 + 32), "setLatLng:", v12);

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_updateSuggestions");

  }
  else
  {
    v14 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v14, "_handleSearchResultError:error:", *(unsigned __int8 *)(a1 + 48), v6);

  }
}

uint64_t sub_1007934AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  unsigned int v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v8 = objc_alloc((Class)NSSet);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "directionsModes"));
  v10 = objc_msgSend(v8, "initWithArray:", v9);
  v11 = objc_msgSend(v7, "intersectsSet:", v10);

  v12 = *(void **)(a1 + 32);
  v13 = objc_alloc((Class)NSSet);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "directionsModes"));
  v15 = objc_msgSend(v13, "initWithArray:", v14);
  LODWORD(v12) = objc_msgSend(v12, "intersectsSet:", v15);

  if (v11 == (_DWORD)v12)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedInstalledApps"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v17, "indexOfObject:", v5)));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedInstalledApps"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v19, "indexOfObject:", v6)));
    v16 = (uint64_t)objc_msgSend(v18, "compare:", v20);

  }
  else if (v11)
  {
    v16 = -1;
  }
  else
  {
    v16 = 1;
  }

  return v16;
}

uint64_t sub_100793768(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  unsigned int v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v8 = objc_alloc((Class)NSSet);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "transitModes"));
  v10 = objc_msgSend(v8, "initWithArray:", v9);
  v11 = objc_msgSend(v7, "intersectsSet:", v10);

  v12 = *(void **)(a1 + 32);
  v13 = objc_alloc((Class)NSSet);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "transitModes"));
  v15 = objc_msgSend(v13, "initWithArray:", v14);
  LODWORD(v12) = objc_msgSend(v12, "intersectsSet:", v15);

  if (v11 == (_DWORD)v12)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedStoreApps"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v17, "indexOfObject:", v5)));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedStoreApps"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v19, "indexOfObject:", v6)));
    v16 = (uint64_t)objc_msgSend(v18, "compare:", v20);

  }
  else if (v11)
  {
    v16 = -1;
  }
  else
  {
    v16 = 1;
  }

  return v16;
}

void sub_100793B94(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutingAppSelectionController");
  v2 = (void *)qword_1014D3290;
  qword_1014D3290 = (uint64_t)v1;

}

void sub_1007941A4(uint64_t a1, char a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if ((a2 & 1) == 0)
  {
    if (qword_1014D32A8 != -1)
      dispatch_once(&qword_1014D32A8, &stru_1011C6828);
    v3 = qword_1014D32A0;
    if (os_log_type_enabled((os_log_t)qword_1014D32A0, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to save shortcut %@. with refined coordinate", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_100794398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007943B4(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = objc_loadWeakRetained(WeakRetained + 14);
    objc_msgSend(v3, "_maps_topMostPresentViewController:animated:completion:", *(_QWORD *)(a1 + 32), 1, 0);

    WeakRetained = v4;
  }

}

void sub_10079456C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100794590(uint64_t a1)
{
  id v1;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend(WeakRetained[7], "editOnlyLocation"))
    objc_msgSend(WeakRetained, "closeViewController:", WeakRetained[3]);
  v1 = WeakRetained[3];
  WeakRetained[3] = 0;

}

void sub_100794698(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1007946BC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_closeLocationRefinement");

}

void sub_100794944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100794960(uint64_t a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  __int128 v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  __int128 v11;
  __int128 v12;

  if (a2)
  {
    v3 = sub_100B3A5D4();
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "oneFavorites"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100794A4C;
    v7[3] = &unk_1011C67C0;
    v8 = *(id *)(a1 + 32);
    objc_copyWeak(&v10, (id *)(a1 + 48));
    v9 = *(id *)(a1 + 40);
    v6 = *(_OWORD *)(a1 + 72);
    v11 = *(_OWORD *)(a1 + 56);
    v12 = v6;
    objc_msgSend(v5, "loadAllShortcutsWithHandler:", v7);

    objc_destroyWeak(&v10);
  }
}

void sub_100794A38(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100794A4C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id v9;
  void *v10;
  id v11;
  __int128 v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v9 = objc_msgSend(v8, "type");
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortcut"));
        v11 = objc_msgSend(v10, "type");

        if (v9 == v11)
        {
          if (objc_msgSend(v8, "isSetupPlaceholder"))
          {
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100794C14;
            block[3] = &unk_1011C6798;
            objc_copyWeak(&v16, (id *)(a1 + 48));
            v14 = *(id *)(a1 + 32);
            v15 = *(id *)(a1 + 40);
            v12 = *(_OWORD *)(a1 + 72);
            v17 = *(_OWORD *)(a1 + 56);
            v18 = v12;
            dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

            objc_destroyWeak(&v16);
          }
          goto LABEL_12;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_12:

}

void sub_100794C14(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_meCard_showAddShortcut:sourceView:sourceRect:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
    WeakRetained = v3;
  }

}

void sub_100795238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100795254(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "closeViewController:", *(_QWORD *)(a1 + 32));

}

void sub_100795434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100795450(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "containerViewController"));
    objc_msgSend(v3, "_maps_topMostPresentViewController:animated:completion:", *(_QWORD *)(a1 + 32), 1, 0);

    WeakRetained = v4;
  }

}

void sub_1007958C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007958DC(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactViewController viewControllerForContact:](CNContactViewController, "viewControllerForContact:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(v2, "setActions:", (unint64_t)objc_msgSend(v2, "actions") | 0x100);
    objc_msgSend(v2, "setEditMode:", 2);
    objc_msgSend(WeakRetained, "_showContactCard:", v2);

  }
}

uint64_t sub_100795958(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100795EB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100795EC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1007961A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1007961C4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "containerViewController"));
    objc_msgSend(v3, "_maps_topMostPresentViewController:animated:completion:", *(_QWORD *)(a1 + 32), 1, 0);

    WeakRetained = v4;
  }

}

void sub_100796510(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_10079654C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_createNewContactCard");

}

void sub_100796578(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_showContactPicker");

}

_QWORD *sub_1007965A4(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (*(_QWORD *)(v1 + 80))
    return objc_msgSend(*(id *)(v1 + 16), "resetToMapItemType");
  return result;
}

void sub_100796860(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (*(_QWORD *)(a1 + 32) && (v2 = *(_QWORD *)(a1 + 40)) != 0)
  {
    v3 = *(_QWORD **)(a1 + 48);
  }
  else
  {
    if (sub_1002A8AA0(*(void **)(a1 + 56)) != 5)
      goto LABEL_7;
    v3 = *(_QWORD **)(a1 + 48);
    v2 = v3[2];
  }
  objc_msgSend(v3, "closeViewController:", v2);
LABEL_7:
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 96);
  if (v4)
  {
    (*(void (**)(void))(v4 + 16))();
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(void **)(v5 + 96);
    *(_QWORD *)(v5 + 96) = 0;

  }
}

void sub_100796A54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  id v3;

  if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "closeViewController:");
  }
  else
  {
    v1 = *(_QWORD **)(a1 + 48);
    v2 = v1[10];
    if (v2)
    {
      v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contactCardButton"));
      objc_msgSend(v1, "showMeCardWithAddress:from:", v2, v3);

    }
  }
}

void sub_100796BF0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RAPPersonalPlaceCategory");
  v2 = (void *)qword_1014D32A0;
  qword_1014D32A0 = (uint64_t)v1;

}

void sub_10079AB60(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "initWithCarPlay:", 0);
  v2 = (void *)qword_1014D32B0;
  qword_1014D32B0 = (uint64_t)v1;

}

void sub_10079AC00(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc(*(Class *)(a1 + 32)), "initWithCarPlay:", 1);
  v2 = (void *)qword_1014D32C0;
  qword_1014D32C0 = (uint64_t)v1;

}

id sub_10079AE1C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeAllObjects");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeAllObjects");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeAllObjects");
}

void sub_10079B860(uint64_t a1)
{
  void *v2;
  double v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "screenScale");
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "imageForScale:isCarPlay:", objc_msgSend(*(id *)(a1 + 40), "isCarPlay"), v3));
  objc_msgSend(*(id *)(a1 + 40), "setImage:forKey:", v4, *(_QWORD *)(a1 + 32));

}

void sub_10079B8C8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  if (!v3)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "useSearchImageFallback"))
      v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "searchImage"));
    else
      v3 = 0;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v5 = v3;
    (*(void (**)(void))(v4 + 16))();
    v3 = v5;
  }

}

void sub_10079BA08(uint64_t a1)
{
  void *v2;
  dispatch_queue_global_t global_queue;
  NSObject *v4;
  _QWORD block[4];
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKey:", *(_QWORD *)(a1 + 40)));

  if (!v2
    && (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "containsObject:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "addObject:", *(_QWORD *)(a1 + 40));
    if (*(_BYTE *)(a1 + 56))
    {
      global_queue = dispatch_get_global_queue(25, 0);
      v4 = objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10079BAD0;
      block[3] = &unk_1011ADA00;
      v6 = *(id *)(a1 + 48);
      dispatch_async(v4, block);

    }
  }
}

void sub_10079BAD0(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_10079BC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10079BC90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10079BCA0(uint64_t a1)
{

}

id sub_10079BCA8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2 = a1[4];
  v3 = *(void **)(a1[5] + 8);
  if (v2)
    objc_msgSend(v3, "setObject:forKey:", v2, a1[6]);
  else
    objc_msgSend(v3, "removeObjectForKey:", a1[6]);
  objc_msgSend(*(id *)(a1[5] + 16), "removeObject:", a1[6]);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 24), "objectForKeyedSubscript:", a1[6]));
  v5 = objc_msgSend(v4, "copy");
  v6 = *(_QWORD *)(a1[7] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  return objc_msgSend(*(id *)(a1[5] + 24), "removeObjectForKey:", a1[6]);
}

void sub_10079BD28(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5) + 16))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5));
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_10079BF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10079BF5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKey:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    if (!v6)
    {
      v6 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 1));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setObject:forKeyedSubscript:");
    }
    v5 = objc_retainBlock(*(id *)(a1 + 48));
    objc_msgSend(v6, "addObject:", v5);

  }
}

__CFString *sub_10079C294(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  const __CFString *v4;
  __CFString *v5;

  switch(a1)
  {
    case 2:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("STATUS_BAR_INDICATOR_NO_INTERNET");
      goto LABEL_9;
    case 3:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("STATUS_BAR_INDICATOR_AIRPLANE_MODE");
      goto LABEL_9;
    case 4:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("STATUS_BAR_INDICATOR_CELLULAR_DATA_OFF");
      goto LABEL_9;
    case 5:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("STATUS_BAR_INDICATOR_LOCATION_SERVICES_OFF");
      goto LABEL_9;
    case 6:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("Precise Location: Off");
LABEL_9:
      v4 = 0;
      goto LABEL_10;
    case 7:
    case 8:
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v2 = v1;
      v3 = CFSTR("STATUS_BAR_INDICATOR_OFFLINE_MAPS");
      v4 = CFSTR("Offline");
LABEL_10:
      v5 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", v3, CFSTR("localized string not found"), v4));

      break;
    default:
      v5 = &stru_1011EB268;
      break;
  }
  return v5;
}

int64_t sub_10079CF1C(id a1, PersonalizedAutocompleteItem *a2, PersonalizedAutocompleteItem *a3)
{
  PersonalizedAutocompleteItem *v4;
  id v5;
  id v6;
  int64_t v7;

  v4 = a3;
  v5 = -[PersonalizedAutocompleteItem serverItemIndexInSection](a2, "serverItemIndexInSection");
  v6 = -[PersonalizedAutocompleteItem serverItemIndexInSection](v4, "serverItemIndexInSection");

  if (v5 >= v6)
    v7 = 0;
  else
    v7 = -1;
  if (v5 > v6)
    return 1;
  else
    return v7;
}

BOOL sub_10079D378(id a1)
{
  return 1;
}

void sub_10079D380(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v2, "captureUserAction:onTarget:eventValue:", 6020, 647, 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
  objc_msgSend(v3, "captureUserAction:onTarget:eventValue:", 6050, 647, *(_QWORD *)(a1 + 32));

  v4 = (id)objc_claimAutoreleasedReturnValue(+[MKSystemController sharedInstance](MKSystemController, "sharedInstance"));
  objc_msgSend(v4, "openURL:completionHandler:", *(_QWORD *)(a1 + 40), 0);

}

void sub_10079D4F4(id a1)
{
  HydrateGeoMapItemCache *v1;
  void *v2;

  v1 = objc_alloc_init(HydrateGeoMapItemCache);
  v2 = (void *)qword_1014D32D0;
  qword_1014D32D0 = (uint64_t)v1;

}

void sub_10079D5CC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  char v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;

  v2 = sub_10043387C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
    *(_DWORD *)buf = 138412546;
    v29 = v4;
    v30 = 2112;
    v31 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "resolveRTMapItem %@ %@", buf, 0x16u);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

  if (v6)
  {
    v7 = sub_10043387C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      *(_DWORD *)buf = 138412546;
      v29 = v9;
      v30 = 2112;
      v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "resolveRTMapItem in cache %@ %@", buf, 0x16u);

    }
    v11 = *(_QWORD *)(a1 + 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
    (*(void (**)(uint64_t, void *, _QWORD))(v11 + 16))(v11, v12, 0);
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

    if (v13)
    {
      v14 = sub_10043387C();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
        *(_DWORD *)buf = 138412546;
        v29 = v16;
        v30 = 2112;
        v31 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "resolveRTMapItem add in progress %@ %@", buf, 0x16u);

      }
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
      v18 = objc_retainBlock(*(id *)(a1 + 48));
      objc_msgSend(v12, "addObject:", v18);

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "setObject:forKeyedSubscript:", v12, *(_QWORD *)(a1 + 32));
    }
    else
    {
      v19 = objc_retainBlock(*(id *)(a1 + 48));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](NSMutableArray, "arrayWithObject:", v19));

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "setObject:forKeyedSubscript:", v12, *(_QWORD *)(a1 + 32));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "geoMapItemHandle"));
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10079D924;
      v24[3] = &unk_1011C6948;
      v27 = *(_BYTE *)(a1 + 56);
      v22 = *(id *)(a1 + 32);
      v23 = *(_QWORD *)(a1 + 40);
      v25 = v22;
      v26 = v23;
      objc_msgSend(v20, "resolveMapItemFromHandle:completionHandler:", v21, v24);

    }
  }

}

void sub_10079D924(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a2;
  v5 = a3;
  if (!v5 && *(_BYTE *)(a1 + 48))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "_clientAttributes"));

    if (v6)
    {
      v7 = v18;
    }
    else
    {
      v8 = objc_alloc_init((Class)GEOMapItemClientAttributes);
      v9 = objc_claimAutoreleasedReturnValue(+[GEOMapItemStorage mapItemStorageForGEOMapItem:clientAttributes:](GEOMapItemStorage, "mapItemStorageForGEOMapItem:clientAttributes:", v18, v8));

      v7 = (void *)v9;
    }
    v18 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_clientAttributes"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "addressBookAttributes"));

    if (!v11)
    {
      v12 = objc_alloc_init((Class)GEOMapItemAddressBookAttributes);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "_clientAttributes"));
      objc_msgSend(v13, "setAddressBookAttributes:", v12);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "extendedAttributes"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "addressIdentifier"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "_clientAttributes"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "addressBookAttributes"));
    objc_msgSend(v17, "setAddressIdentifier:", v15);

  }
  objc_msgSend(*(id *)(a1 + 40), "performCompletionsFor:mapItem:error:", *(_QWORD *)(a1 + 32), v18, v5);

}

uint64_t sub_10079DBA4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10079DBB4(uint64_t a1)
{

}

void sub_10079DBBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  id v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setObject:forKeyedSubscript:", v2, *(_QWORD *)(a1 + 48));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 48));
  v6 = sub_10043387C();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "name"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
    *(_DWORD *)buf = 134218498;
    v22 = v8;
    v23 = 2112;
    v24 = v9;
    v25 = 2112;
    v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "resolveRTMapItem perform %ld blocks %@ %@", buf, 0x20u);

  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v11 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v17;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v11);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v15) + 16))(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v15));
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v13);
  }

}

id sub_10079F468(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "alpha");
}

id sub_10079F47C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setAlpha:");
}

id sub_10079F490(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "alpha");
}

id sub_10079F4A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setAlpha:");
}

void sub_10079FC80(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[3];
  _QWORD v5[3];

  v1 = (void *)qword_1014D32E8;
  qword_1014D32E8 = (uint64_t)&off_101273CC8;

  v4[0] = &off_10126ED58;
  v4[1] = &off_10126ED70;
  v5[0] = &off_101273CE0;
  v5[1] = &off_101273CF8;
  v4[2] = &off_10126ED88;
  v5[2] = &off_101273D10;
  v2 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 3));
  v3 = (void *)qword_1014D32F0;
  qword_1014D32F0 = v2;

}

void sub_1007A00F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007A012C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v9 = sub_1004326FC();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch garage with error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      objc_msgSend(WeakRetained, "_consumeUpdatedVirtualGarage:", v5);
    }
  }

}

void sub_1007A021C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      v9 = sub_1004326FC();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch unpaired vehicles with error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      objc_msgSend(WeakRetained, "_consumeUpdatedUnpairedVehicles:", v5);
    }
  }

}

void sub_1007A0860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007A087C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_environmnentNotification");

}

void sub_1007A0C48(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_storeStrong(WeakRetained + 7, *(id *)(a1 + 32));
    objc_msgSend(v3, "_reloadMyVehiclesVisibility");
    WeakRetained = v3;
  }

}

void sub_1007A0D4C(uint64_t a1)
{
  id *WeakRetained;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_storeStrong(WeakRetained + 8, *(id *)(a1 + 32));
    objc_msgSend(v3, "_reloadMyVehiclesVisibility");
    WeakRetained = v3;
  }

}

void sub_1007A1B6C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD v41[6];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subviews"));
  v6 = objc_msgSend(v5, "count");

  if (!v6)
  {
    objc_msgSend(v3, "setAccessoryType:", 0);
    objc_msgSend(v3, "setSelectionStyle:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapAttributionButton"));
    objc_msgSend(v7, "setAccessibilityIdentifier:", CFSTR("MapAttributionButton"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
    objc_msgSend(v8, "addSubview:", v7);

    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "leadingAnchor"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "leadingAnchor"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "constraintEqualToAnchor:constant:", v38, 16.0));
    v41[0] = v37;
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trailingAnchor"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "trailingAnchor"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "constraintLessThanOrEqualToAnchor:constant:", v34, -16.0));
    v41[1] = v33;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "centerYAnchor"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "centerYAnchor"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "constraintEqualToAnchor:", v30));
    v41[2] = v29;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "topAnchor"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "topAnchor"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "constraintGreaterThanOrEqualToAnchor:", v26));
    v41[3] = v25;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bottomAnchor"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bottomAnchor"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "constraintLessThanOrEqualToAnchor:", v10));
    v41[4] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "heightAnchor"));
    LODWORD(v14) = 1112276992;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "constraintEqualToConstant:priority:", 0.0, v14));
    v41[5] = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v41, 6));
    +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v16);

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentView"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "subviews"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settingsController"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "mapAttribution"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "string"));
  v23 = objc_msgSend(v22, "mutableCopy");
  objc_msgSend(v19, "setAttributedTitle:forState:", v23, 0);

}

void sub_1007A23EC(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setSelectionStyle:", v3);
  objc_msgSend(v4, "setAccessoryType:", *(unsigned __int8 *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "textLabel"));
  objc_msgSend(v5, "setTextAlignment:", 4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_systemFontWithSize:](UIFont, "_maps_systemFontWithSize:", 16.0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "textLabel"));
  objc_msgSend(v7, "setFont:", v6);

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "textLabel"));
  objc_msgSend(v8, "setNumberOfLines:", 2);

}

id sub_1007A34E4()
{
  if (qword_1014D3300 != -1)
    dispatch_once(&qword_1014D3300, &stru_1011C6A10);
  return (id)qword_1014D32F8;
}

void sub_1007A39A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "previousTopContext"));
  v3 = objc_opt_class(BaseModeController);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    v4 = v2;
  else
    v4 = 0;
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "previousTopContext"));
  v7 = objc_opt_class(NavModeController);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
    v8 = v6;
  else
    v8 = 0;
  v17 = v8;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fullscreenViewController"));
  v10 = objc_opt_class(ContainerViewController);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
    v11 = v9;
  else
    v11 = 0;
  v12 = v11;

  if (v12)
  {
    v13 = v9;
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "fullscreenViewController"));
    v15 = objc_opt_class(ContainerViewController);
    if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0)
      v16 = v14;
    else
      v16 = 0;
    v13 = v16;

  }
  objc_msgSend(v13, "setContaineesHidden:", 1);

}

void sub_1007A3DC0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pedestrianARViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mapView"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "detailedDescription"));
  v5 = (void *)v4;
  if (v4)
    v6 = (const __CFString *)v4;
  else
    v6 = &stru_1011EB268;
  v8 = (id)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", CFSTR("PedestrianARVKMapViewDiagnostics.txt"), v6));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarKeyword keywordWithName:number:](MapsRadarKeyword, "keywordWithName:number:", CFSTR("MAPS377"), 1281664));
  objc_msgSend(*(id *)(a1 + 40), "addAttachment:", v8);
  objc_msgSend(*(id *)(a1 + 40), "addKeyword:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1007A3EC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARContext");
  v2 = (void *)qword_1014D32F8;
  qword_1014D32F8 = (uint64_t)v1;

}

void sub_1007A4978(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), "updateFromParkedCar", (_QWORD)v6);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

id sub_1007A6184(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("guidanceEnd"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_1007A61B4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("guidanceEnd"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

id sub_1007A61E4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "startedTest");
  return objc_msgSend(*(id *)(a1 + 32), "tapOnSearchBar");
}

id sub_1007A62B8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("guidanceStartToFirstStepShown"));
  return _objc_msgSend(*(id *)(a1 + 32), "_guidanceOrSteppingDidShowFirstSign");
}

void sub_1007A64B8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_1007A64D4(uint64_t a1)
{
  id *WeakRetained;
  id v2;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    if (objc_msgSend(WeakRetained[10], "isValid"))
    {
      objc_msgSend(v3[10], "invalidate");
      v2 = v3[10];
      v3[10] = 0;

    }
    objc_msgSend(v3, "willUpdateNavigationSign");
    WeakRetained = v3;
  }

}

id sub_1007A6604(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("guidanceMakeTurn"));
  return objc_msgSend(*(id *)(a1 + 32), "_doAfterSubTestForShowingSign");
}

id sub_1007A67B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_steppingSignDidChange");
}

void sub_1007A67C0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_subTestNameForGoingToGuidanceStep:forSwipeCount:", *(_QWORD *)(a1 + 48) + 1, objc_msgSend(*(id *)(a1 + 32), "swipeCount")));
  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", v2);
  objc_msgSend(*(id *)(a1 + 40), "pptTestMoveToNextStep");

}

void sub_1007A696C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007A6988(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "finishedSubTest:", *(_QWORD *)(a1 + 32));

  v4 = sub_100431E3C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v12 = 134218240;
    v13 = v6;
    v14 = 2048;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "MapsAppTestGuidance - _steppingSignDidChange - Fully drawn.  swipeCount: %ld, currentStepIndex: %ld", (uint8_t *)&v12, 0x16u);
  }

  v9 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if (v9 == v8)
  {
    v10 = objc_loadWeakRetained(v2);
    objc_msgSend(v10, "_doAfterSubTestForShowingSign");
  }
  else
  {
    v11 = objc_loadWeakRetained(v2);
    v10 = v11;
    if (v9 <= v8)
      objc_msgSend(v11, "failedTest");
    else
      objc_msgSend(v11, "_gotoNextStepAfterDelay:", 2.0);
  }

}

id sub_1007A6B1C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_runPlayWithTraySubtest");
}

id sub_1007A6CA8(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "canUpdateTrayLayout");
  v3 = *(void **)(a1 + 32);
  if (!v2)
    return objc_msgSend(v3, "failedTest");
  v4 = objc_msgSend(v3, "collapsedTrayLayout");
  v5 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1007A6D40;
  v7[3] = &unk_1011AC860;
  v7[4] = v5;
  return objc_msgSend(v5, "updateTrayLayout:withSubtestName:animated:completion:", v4, CFSTR("NavigationMinimizeTray"), 1, v7);
}

id sub_1007A6D40(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_endGuidanceNavOrSteppingMode");
}

void sub_1007A7150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007A717C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007A7234;
  block[3] = &unk_1011B0288;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  v6 = v3;
  v7 = *(id *)(a1 + 32);
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v8);
}

void sub_1007A7234(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_updateAnalyticsWithRideStatus:", *(_QWORD *)(a1 + 32));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingRequestRideOptionProxy");
    v5 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136446722;
      v7 = "RideBookingRequestRideOptionProxy.m";
      v8 = 1026;
      v9 = 71;
      v10 = 2082;
      v11 = "-[RideBookingRequestRideOptionProxy requestRideWithCompletion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v6, 0x1Cu);
    }

  }
}

void sub_1007A73FC(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  uint64_t Log;
  NSObject *v6;
  int v7;
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_updateAnalyticsWithRequestRideStatus:", *(_QWORD *)(a1 + 32));
    v4 = objc_loadWeakRetained(v3 + 2);
    objc_msgSend(v4, "requestRideStatusDidChange:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, "RideBookingRequestRideOptionProxy");
    v6 = (id)objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 136446722;
      v8 = "RideBookingRequestRideOptionProxy.m";
      v9 = 1026;
      v10 = 84;
      v11 = 2082;
      v12 = "-[RideBookingRequestRideOptionProxy requestRideStatusDidChange:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}s:%{public}d: strongSelf went away in %{public}s", (uint8_t *)&v7, 0x1Cu);
    }

  }
}

void sub_1007A7960(id a1)
{
  objc_class *v1;
  NSString *v2;
  objc_class *v3;
  NSString *v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  objc_class *v14;
  NSString *v15;
  void *v16;
  objc_class *v17;
  NSString *v18;
  void *v19;
  objc_class *v20;
  NSString *v21;
  void *v22;
  objc_class *v23;
  NSString *v24;
  void *v25;
  objc_class *v26;
  NSString *v27;
  void *v28;
  objc_class *v29;
  NSString *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD v38[11];
  _QWORD v39[11];

  v1 = (objc_class *)objc_opt_class(TransitDirectionsInstructionsCell);
  v2 = NSStringFromClass(v1);
  v37 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "stringByAppendingString:", CFSTR(".Origin")));
  v38[0] = v36;
  v39[0] = objc_opt_class(TransitDirectionsInstructionsCell);
  v3 = (objc_class *)objc_opt_class(TransitDirectionsInstructionsCell);
  v4 = NSStringFromClass(v3);
  v35 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "stringByAppendingString:", CFSTR(".Destination")));
  v38[1] = v34;
  v39[1] = objc_opt_class(TransitDirectionsInstructionsCell);
  v5 = (objc_class *)objc_opt_class(TransitDirectionsInstructionsCell);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v38[2] = v7;
  v39[2] = objc_opt_class(TransitDirectionsInstructionsCell);
  v8 = (objc_class *)objc_opt_class(TransitDirectionsClusteredVehiclesCell);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v38[3] = v10;
  v39[3] = objc_opt_class(TransitDirectionsClusteredVehiclesCell);
  v11 = (objc_class *)objc_opt_class(TransitDirectionsPassItemCell);
  v12 = NSStringFromClass(v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v38[4] = v13;
  v39[4] = objc_opt_class(TransitDirectionsPassItemCell);
  v14 = (objc_class *)objc_opt_class(TransitDirectionsStopCell);
  v15 = NSStringFromClass(v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v38[5] = v16;
  v39[5] = objc_opt_class(TransitDirectionsStopCell);
  v17 = (objc_class *)objc_opt_class(TransitDirectionsExpandStopsCell);
  v18 = NSStringFromClass(v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v38[6] = v19;
  v39[6] = objc_opt_class(TransitDirectionsExpandStopsCell);
  v20 = (objc_class *)objc_opt_class(TransitDirectionsBlockTransferCell);
  v21 = NSStringFromClass(v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v38[7] = v22;
  v39[7] = objc_opt_class(TransitDirectionsBlockTransferCell);
  v23 = (objc_class *)objc_opt_class(TransitDirectionsIncidentCell);
  v24 = NSStringFromClass(v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v38[8] = v25;
  v39[8] = objc_opt_class(TransitDirectionsIncidentCell);
  v26 = (objc_class *)objc_opt_class(TransitDirectionsOperatorInfoCell);
  v27 = NSStringFromClass(v26);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  v38[9] = v28;
  v39[9] = objc_opt_class(TransitDirectionsOperatorInfoCell);
  v29 = (objc_class *)objc_opt_class(TransitDirectionsBoardingInfoCell);
  v30 = NSStringFromClass(v29);
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v38[10] = v31;
  v39[10] = objc_opt_class(TransitDirectionsBoardingInfoCell);
  v32 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v39, v38, 11));
  v33 = (void *)qword_1014D3308;
  qword_1014D3308 = v32;

}

id sub_1007A7E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "registerClass:forCellReuseIdentifier:", a3, a2);
}

void sub_1007A7EF4(id a1)
{
  objc_class *v1;
  NSString *v2;
  objc_class *v3;
  NSString *v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  objc_class *v14;
  NSString *v15;
  void *v16;
  objc_class *v17;
  NSString *v18;
  void *v19;
  objc_class *v20;
  NSString *v21;
  void *v22;
  objc_class *v23;
  NSString *v24;
  void *v25;
  objc_class *v26;
  NSString *v27;
  void *v28;
  objc_class *v29;
  NSString *v30;
  void *v31;
  objc_class *v32;
  NSString *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD v41[12];
  _QWORD v42[12];

  v1 = (objc_class *)objc_opt_class(TransitDirectionsInstructionsCell);
  v2 = NSStringFromClass(v1);
  v40 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "stringByAppendingString:", CFSTR(".Origin")));
  v41[0] = v39;
  v42[0] = objc_opt_class(TransitDirectionsInstructionsCollectionViewCell);
  v3 = (objc_class *)objc_opt_class(TransitDirectionsInstructionsCell);
  v4 = NSStringFromClass(v3);
  v38 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "stringByAppendingString:", CFSTR(".Destination")));
  v41[1] = v37;
  v42[1] = objc_opt_class(TransitDirectionsInstructionsCollectionViewCell);
  v5 = (objc_class *)objc_opt_class(TransitDirectionsInstructionsCell);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v41[2] = v7;
  v42[2] = objc_opt_class(TransitDirectionsInstructionsCollectionViewCell);
  v8 = (objc_class *)objc_opt_class(TransitDirectionsClusteredVehiclesCell);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v41[3] = v10;
  v42[3] = objc_opt_class(TransitDirectionsClusteredVehiclesCollectionViewCell);
  v11 = (objc_class *)objc_opt_class(TransitDirectionsPassItemCell);
  v12 = NSStringFromClass(v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v41[4] = v13;
  v42[4] = objc_opt_class(TransitDirectionsPassItemCollectionViewCell);
  v14 = (objc_class *)objc_opt_class(TransitDirectionsStopCell);
  v15 = NSStringFromClass(v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v41[5] = v16;
  v42[5] = objc_opt_class(TransitDirectionsStopCollectionViewCell);
  v17 = (objc_class *)objc_opt_class(TransitDirectionsExpandStopsCell);
  v18 = NSStringFromClass(v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v41[6] = v19;
  v42[6] = objc_opt_class(TransitDirectionsExpandStopsCollectionViewCell);
  v20 = (objc_class *)objc_opt_class(TransitDirectionsBlockTransferCell);
  v21 = NSStringFromClass(v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v41[7] = v22;
  v42[7] = objc_opt_class(TransitDirectionsBlockTransferCollectionViewCell);
  v23 = (objc_class *)objc_opt_class(TransitDirectionsIncidentCell);
  v24 = NSStringFromClass(v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v41[8] = v25;
  v42[8] = objc_opt_class(TransitDirectionsIncidentCollectionViewCell);
  v26 = (objc_class *)objc_opt_class(TransitDirectionsOperatorInfoCell);
  v27 = NSStringFromClass(v26);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  v41[9] = v28;
  v42[9] = objc_opt_class(TransitDirectionsOperatorInfoCollectionViewCell);
  v29 = (objc_class *)objc_opt_class(TransitDirectionsBoardingInfoCell);
  v30 = NSStringFromClass(v29);
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v41[10] = v31;
  v42[10] = objc_opt_class(TransitDirectionsBoardingInfoCollectionViewCell);
  v32 = (objc_class *)objc_opt_class(TransitDirectionsBadgesCell);
  v33 = NSStringFromClass(v32);
  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  v41[11] = v34;
  v42[11] = objc_opt_class(TransitDirectionsBadgesCollectionViewCell);
  v35 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v42, v41, 12));
  v36 = (void *)qword_1014D3318;
  qword_1014D3318 = v35;

}

void sub_1007A82E8(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  objc_msgSend(v4, "registerClass:forCellWithReuseIdentifier:", objc_opt_class(a3), v5);

}

_BYTE *sub_1007A8604(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  _BYTE *result;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "setAllRoutingApps:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v7, "routingAppSuggestionProvider:didSuggestInstalledApps:", *(_QWORD *)(a1 + 32), v6);

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 17) = 1;
  result = *(_BYTE **)(a1 + 32);
  if (!result[19])
    return objc_msgSend(result, "_suggestFilteredStoreAppsIfReady");
  return result;
}

void sub_1007A8814(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[2];
  _QWORD v23[2];

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v7 = a3;
  objc_msgSend(v6, "showNetworkActivityIndicator:", 0);
  if (v7)
  {
    v22[0] = NSLocalizedDescriptionKey;
    v22[1] = NSUnderlyingErrorKey;
    v23[0] = CFSTR("Error requesting app metadata.");
    v23[1] = v7;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 2));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError storePlatformErrorWithUserInfo:](NSError, "storePlatformErrorWithUserInfo:", v8));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v10, "routingAppSuggestionProvider:didFailToSuggestStoreApps:", *(_QWORD *)(a1 + 32), v9);

  }
  else
  {
    v11 = objc_msgSend(v5, "count");
    sub_100A133C4(CFSTR("Received store platform response with %lu apps"), v12, v13, v14, v15, v16, v17, v18, (uint64_t)v11);
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sortedAppsWithIds:appStoreApps:", *(_QWORD *)(a1 + 40), v5));
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(void **)(v20 + 32);
    *(_QWORD *)(v20 + 32) = v19;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 1;
    objc_msgSend(*(id *)(a1 + 32), "_suggestFilteredStoreAppsIfReady");
    v9 = 0;
  }

}

int64_t sub_1007A8B60(id a1, NSNumber *a2, NSNumber *a3)
{
  return -[NSNumber compare:](a2, "compare:", a3);
}

BOOL sub_1007A8CE8(id a1, GEOAppleMediaServicesResult *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOAppleMediaServicesResult isAppInstalled](a2, "isAppInstalled", a3, a4) ^ 1;
}

id sub_1007A9A08()
{
  if (qword_1014D3330 != -1)
    dispatch_once(&qword_1014D3330, &stru_1011C6B80);
  return (id)qword_1014D3328;
}

id sub_1007A9D3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateForCurrentState");
}

void sub_1007AACC0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFScanningInstructionView");
  v2 = (void *)qword_1014D3328;
  qword_1014D3328 = (uint64_t)v1;

}

void sub_1007AC944(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "entryPointsCoordinator"));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "session"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "coordinateSpace"));
  objc_msgSend(v4, "bounds");
  objc_msgSend(v7, "continueUserActivity:session:windowSize:", v2, v3, v5, v6);

}

void sub_1007ACC40(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "entryPointsCoordinator"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "URL"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "session"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "options"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "coordinateSpace"));
  objc_msgSend(v5, "bounds");
  objc_msgSend(v8, "openURL:session:sceneOptions:mkOptions:windowSize:", v2, v3, v4, 0, v6, v7);

}

void sub_1007ADDB0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v3 = a2;
  if (v3)
  {
    v4 = objc_msgSend(objc_alloc((Class)IFImage), "initWithCGImage:scale:", objc_msgSend(objc_retainAutorelease(v3), "CGImage"), *(double *)(a1 + 40));
    v5 = objc_alloc((Class)ISIcon);
    v11 = v4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
    v7 = objc_msgSend(v5, "initWithImages:", v6);

    v8 = objc_msgSend(objc_alloc((Class)ISImageDescriptor), "initWithSize:scale:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 40));
    objc_msgSend(v8, "setShape:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "prepareImageForDescriptor:", v8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageWithCGImage:](UIImage, "imageWithCGImage:", objc_msgSend(v9, "CGImage")));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1007AE9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007AE9C8(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained[7];
    if (v5 == *(id *)(a1 + 32) || objc_msgSend(v5, "isEqual:"))
      objc_msgSend(v4[5], "setImage:", v6);
  }

}

void sub_1007AEB58(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("testName")));

  if (objc_msgSend(v3, "isEqualToString:", CFSTR("VenuesBrowse")))
  {
    objc_msgSend(*(id *)(a1 + 32), "runBrowseTest");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("VenuesScrollCategoryResults")))
  {
    objc_msgSend(*(id *)(a1 + 32), "runScrollCategoryResultsTest");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("VenuesScrollSearchResultPlacecard")))
  {
    objc_msgSend(*(id *)(a1 + 32), "runScrollSearchResultPlacecardTest");
  }

}

void sub_1007AEE4C(id *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[4];
  id v16;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v6 = (void *)v5;
  if (a3 || !v5)
  {
    objc_msgSend(a1[4], "failedTest");
  }
  else
  {
    v7 = WillStartDisplayBrowseCategories;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1007AEFE8;
    v15[3] = &unk_1011B5B38;
    v16 = a1[5];
    +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", v7, 0, v15);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1007AEFFC;
    v14[3] = &unk_1011AD1C0;
    v14[4] = a1[4];
    +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", DidFailDisplayBrowseCategories, 0, v14);
    v8 = DidDisplayBrowseCategories;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1007AF004;
    v11[3] = &unk_1011B5B60;
    v11[4] = a1[4];
    v13 = a1[6];
    v9 = v6;
    v12 = v9;
    +[PPTNotificationCenter addOnceObserverForName:object:usingBlock:](PPTNotificationCenter, "addOnceObserverForName:object:usingBlock:", v8, 0, v11);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "testCoordinator"));
    objc_msgSend(v10, "pptTestPresentPlacecardWithMapItem:", v9);

  }
}

uint64_t sub_1007AEFE8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1007AEFFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "failedTest");
}

void sub_1007AF004(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  if (!v3)
  {
    v5 = 0;
    objc_msgSend(*(id *)(a1 + 32), "failedTest");
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v5 = v3;
    (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, *(_QWORD *)(a1 + 40));
LABEL_5:
    v3 = v5;
  }

}

void sub_1007AF148(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  if (!v3)
  {
    v5 = 0;
    objc_msgSend(*(id *)(a1 + 32), "failedTest");
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = v3;
    (*(void (**)(void))(v4 + 16))();
LABEL_5:
    v3 = v5;
  }

}

void sub_1007AF39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007AF3E8(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "finishedTest");
    WeakRetained = v3;
  }

}

void sub_1007AF500(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "object"));
  if (!v3)
  {
    v5 = 0;
    objc_msgSend(*(id *)(a1 + 32), "failedTest");
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = v3;
    (*(void (**)(void))(v4 + 16))();
LABEL_5:
    v3 = v5;
  }

}

id sub_1007AF680(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "failedTest");
}

uint64_t sub_1007AF688(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1007AF720(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("DisplayCategories"));
}

void sub_1007AF730(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  _QWORD v9[5];

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "finishedSubTest:", CFSTR("DisplayCategories"));
  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("DisplayCategoryResults"));
  v8 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1007AF7E0;
  v9[3] = &unk_1011C6D48;
  v9[4] = v8;
  objc_msgSend(v8, "displayCategoryResultsWithMapItem:searchCategory:completion:", v7, v6, v9);

}

void sub_1007AF7E0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  _QWORD *v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("DisplayCategoryResults"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007AF978;
  v15[3] = &unk_1011AC8B0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  v16 = v4;
  v17 = v5;
  v6 = objc_retainBlock(v15);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dataSource"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subcategories"));
  if ((unint64_t)objc_msgSend(v8, "count") <= 1)
  {

    goto LABEL_5;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dataSource"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "subcategories"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", 1));

  if (!v11)
  {
LABEL_5:
    ((void (*)(_QWORD *))v6[2])(v6);
    goto LABEL_6;
  }
  objc_msgSend(*(id *)(a1 + 32), "startedSubTest:", CFSTR("SelectSubCategory"));
  v12 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007AFA70;
  v13[3] = &unk_1011AE240;
  v13[4] = v12;
  v14 = v6;
  objc_msgSend(v12, "selectSubCategory:venueCategoryViewController:completion:", v11, v4, v13);

LABEL_6:
}

void sub_1007AF978(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "content"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objects"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));

  objc_msgSend(*(id *)(a1 + 40), "startedSubTest:", CFSTR("SelectSearchResult"));
  v6 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1007AFA40;
  v7[3] = &unk_1011C6D20;
  v7[4] = v6;
  objc_msgSend(v6, "selectSearchResult:completion:", v5, v7);

}

id sub_1007AFA40(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("SelectSearchResult"));
  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

uint64_t sub_1007AFA70(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedSubTest:", CFSTR("SelectSubCategory"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1007AFAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[5];

  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007AFB54;
  v5[3] = &unk_1011C6D48;
  v5[4] = v3;
  return objc_msgSend(v3, "displayCategoryResultsWithMapItem:searchCategory:completion:", a2, a3, v5);
}

void sub_1007AFB54(uint64_t a1, void *a2)
{
  id v3;
  dispatch_time_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = dispatch_time(0, 10000000000);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1007AFBFC;
  v6[3] = &unk_1011AC8B0;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, v6);

}

void sub_1007AFBFC(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  _QWORD v5[4];
  _QWORD *v6;
  _QWORD v7[5];
  id v8;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1007AFCE4;
  v7[3] = &unk_1011AC8B0;
  v2 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v2;
  v3 = objc_retainBlock(v7);
  if (objc_msgSend(*(id *)(a1 + 32), "canUpdateTrayLayout"))
  {
    v4 = *(void **)(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1007AFD34;
    v5[3] = &unk_1011ADA00;
    v6 = v3;
    objc_msgSend(v4, "updateTrayLayout:animated:completion:", 2, 1, v5);

  }
  else
  {
    ((void (*)(_QWORD *))v3[2])(v3);
  }

}

void sub_1007AFCE4(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataSource"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tableView"));
  objc_msgSend(v1, "performScrollTestOnScrollView:", v2);

}

uint64_t sub_1007AFD34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1007AFD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[5];

  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007AFDF0;
  v5[3] = &unk_1011C6D48;
  v5[4] = v3;
  return objc_msgSend(v3, "displayCategoryResultsWithMapItem:searchCategory:completion:", a2, a3, v5);
}

void sub_1007AFDF0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dataSource"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "content"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objects"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

  v7 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1007AFEA8;
  v8[3] = &unk_1011C6D20;
  v8[4] = v7;
  objc_msgSend(v7, "selectSearchResult:completion:", v6, v8);

}

void sub_1007AFEA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  void *v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1007AFF2C;
  v6[3] = &unk_1011AC8B0;
  v7 = v3;
  v8 = v4;
  v5 = v3;
  objc_msgSend(v4, "updateTrayLayout:animated:completion:", 2, 1, v6);

}

void sub_1007AFF2C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "subviews"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v12 != v6)
        objc_enumerationMutation(v3);
      v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * v7);
      v9 = objc_opt_class(UIScrollView);
      if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
        break;
      if (v5 == (id)++v7)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v5)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v10 = v8;

    if (!v10)
      goto LABEL_12;
    objc_msgSend(*(id *)(a1 + 40), "performScrollTestOnScrollView:", v10);

  }
  else
  {
LABEL_9:

LABEL_12:
    objc_msgSend(*(id *)(a1 + 40), "failedTest");
  }
}

void sub_1007B1100(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  BrowseCategory *v11;
  BrowseCategory *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count")));
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "setNeedsRefresh:", 0);
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = *(id *)(a1 + 40);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v14;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v9);
          v11 = [BrowseCategory alloc];
          v12 = -[BrowseCategory initWithCategory:](v11, "initWithCategory:", v10, (_QWORD)v13);
          objc_msgSend(v4, "addObject:", v12);

          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v7);
    }

  }
  objc_msgSend(v3, "setCategories:", v4, (_QWORD)v13);

}

id sub_1007B158C()
{
  if (qword_1014D3370 != -1)
    dispatch_once(&qword_1014D3370, &stru_1011C6F60);
  return (id)qword_1014D3368;
}

void sub_1007B1628(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1007B1710(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count")));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v7);
        v9 = objc_alloc((Class)GEOSearchCategoryStorage);
        v10 = objc_msgSend(v9, "initWithSearchCategory:", v8, (_QWORD)v15);
        objc_msgSend(v2, "addObject:", v10);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diskCachingKey"));
  v12 = sub_1007B18A8(v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "arrayByApplyingSelector:", "data"));
    objc_msgSend(v14, "writeToURL:atomically:", v13, 1);

  }
}

id sub_1007B18A8(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (qword_1014D3380 == -1)
  {
    if (v1)
    {
LABEL_3:
      v3 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("cat"), "stringByAppendingFormat:", CFSTR("_%@"), v2));
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&qword_1014D3380, &stru_1011C6F80);
    if (v2)
      goto LABEL_3;
  }
  v3 = CFSTR("cat");
LABEL_6:
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingPathExtension:](v3, "stringByAppendingPathExtension:", CFSTR("dat")));

  if (qword_1014D3378)
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D3378, "URLByAppendingPathComponent:", v4));
  else
    v5 = 0;

  return v5;
}

void sub_1007B2334(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_1014D3338;
  qword_1014D3338 = (uint64_t)v1;

}

void sub_1007B26D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007B26F4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_createImageForCategory:scale:traits:isCarplay:nightMode:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 80), *(unsigned __int8 *)(a1 + 81), *(double *)(a1 + 72)));
    if (v4)
    {
      v5 = objc_msgSend((id)objc_opt_class(v3), "sharedImageCache");
      v6 = objc_claimAutoreleasedReturnValue(v5);
      -[NSObject setObject:forKey:](v6, "setObject:forKey:", v4, *(_QWORD *)(a1 + 48));
    }
    else
    {
      v7 = sub_1007B158C();
      v6 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
        v9 = *(_QWORD *)(a1 + 48);
        v11 = 138412546;
        v12 = v8;
        v13 = 2112;
        v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Failed to create image for category %@, key: %@", (uint8_t *)&v11, 0x16u);

      }
    }

    v10 = *(_QWORD *)(a1 + 56);
    if (v10)
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v4);

  }
}

BOOL sub_1007B2E58(uint64_t a1, double a2, double a3)
{
  return a2 >= *(double *)(a1 + 32) && a3 >= *(double *)(a1 + 40);
}

id sub_1007B2E7C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  while (1)
  {
    LOBYTE(v13) = *(_BYTE *)(a1 + 50);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MKIconManager imageForStyle:size:forScale:format:transparent:transitMode:isCarplay:nightMode:](MKIconManager, "imageForStyle:size:forScale:format:transparent:transitMode:isCarplay:nightMode:", *(_QWORD *)(a1 + 32), a2, 1, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), a3, a4, v13));
    v9 = v8;
    if (v8)
    {
      if (!*(_BYTE *)(a1 + 51)
        || (v10 = *(_QWORD *)(a1 + 40),
            objc_msgSend(v8, "size"),
            (*(unsigned int (**)(uint64_t))(v10 + 16))(v10)))
      {
        v11 = v9;
        goto LABEL_8;
      }
    }
    if (!a2)
      break;
    --a2;

  }
  v11 = 0;
LABEL_8:

  return v11;
}

void sub_1007B33B4(id a1)
{
  NSMutableDictionary *v1;
  void *v2;

  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)qword_1014D3348;
  qword_1014D3348 = (uint64_t)v1;

}

void sub_1007B3584(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1014D3358;
  qword_1014D3358 = (uint64_t)v1;

}

void sub_1007B3AE8(uint64_t a1)
{
  BrowseManager *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  BrowseManager *v15;

  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = sub_1007B3C3C;
  v14 = sub_1007B3C4C;
  v2 = [BrowseManager alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "nearbyCacheKeyForTraits:", *(_QWORD *)(a1 + 32)));
  v15 = -[BrowseManager initWithCacheKey:](v2, "initWithCacheKey:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v11[5], "cachedCategoriesForTraits:", *(_QWORD *)(a1 + 32)));
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v6 = (void *)v11[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1007B3C54;
    v7[3] = &unk_1011B93C8;
    v9 = &v10;
    v8 = *(id *)(a1 + 40);
    objc_msgSend(v6, "getCategoriesWithCompletion:", v7);

  }
  _Block_object_dispose(&v10, 8);

}

void sub_1007B3C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007B3C3C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1007B3C4C(uint64_t a1)
{

}

void sub_1007B3C54(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;
  v10 = a3;
  v7 = a2;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = objc_msgSend(v7, "count");

  (*(void (**)(uint64_t, BOOL, id))(v8 + 16))(v8, v9 != 0, v10);
}

void sub_1007B3CD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  if (v5)
  {
    (*(void (**)(_QWORD, id, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 56), "alreadyHasCategoriesForTraits:", *(_QWORD *)(a1 + 32)), v5);
  }
  else
  {
    +[BrowseManager updateMapRegionInTraits:withLocation:](BrowseManager, "updateMapRegionInTraits:withLocation:", *(_QWORD *)(a1 + 32), a2);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_1007B3FD4(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "categoryResultsCache"));
  objc_msgSend(v3, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

}

void sub_1007B4290(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void **v25;
  uint64_t v26;
  void (*v27)(uint64_t, void *);
  void *v28;
  id v29;
  id v30;

  v7 = a4;
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(void **)(a1 + 32);
    v10 = a3;
    v11 = a2;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionHeader"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "boundingRegion"));
    (*(void (**)(uint64_t, _QWORD, void *, _QWORD, void *, id))(v8 + 16))(v8, 0, v12, 0, v13, v7);

  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = a3;
    v15 = v14;
    v16 = *(void **)(a1 + 40);
    v17 = a3;
    v18 = a2;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "contentCache"));
    v25 = _NSConcreteStackBlock;
    v26 = 3221225472;
    v27 = sub_1007B4454;
    v28 = &unk_1011C6DB0;
    v29 = v15;
    v30 = *(id *)(a1 + 48);
    v20 = v15;
    objc_msgSend(v19, "updateCacheWithBlock:", &v25);

    v21 = *(_QWORD *)(a1 + 56);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sectionHeader", v25, v26, v27, v28));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchAutoRedoThreshold"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "boundingRegion"));
    (*(void (**)(uint64_t, id, void *, void *, void *, _QWORD))(v21 + 16))(v21, v20, v22, v23, v24, 0);

  }
}

void sub_1007B4454(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "categoryResultsCache"));
  objc_msgSend(v3, "setObject:forKey:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1007B48D4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1007B48DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1007B4A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a3 != 0);
  return result;
}

id sub_1007B4B70(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_opt_class(a1[4]);
  return _objc_msgSend(v2, "prepareImagesForCacheKey:traits:completion:", a1[5], a1[6], 0);
}

uint64_t sub_1007B4B9C(uint64_t result, int a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void sub_1007B4E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1007B4E80(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedCategories"));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_1007B4EC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    if (v6)
    {
      v8 = *(_QWORD *)(a1 + 40);
      if (v8)
        (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v7);
    }
    else
    {
      v9 = sub_1007B158C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v16 = 138412290;
        v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "The resposne for browse categories: %@", (uint8_t *)&v16, 0xCu);
      }

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentCache"));
      objc_msgSend(v11, "setGeoCategories:", v5);

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentCache"));
      objc_msgSend(v12, "writeCategories");

      objc_msgSend(*(id *)(a1 + 32), "getBatchNearby");
      v13 = *(_QWORD *)(a1 + 40);
      if (v13)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedCategories"));
        (*(void (**)(uint64_t, void *, _QWORD))(v13 + 16))(v13, v14, 0);

      }
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v15, "postNotificationName:object:", CFSTR("BrowseManagerDidUpdateCategories"), *(_QWORD *)(a1 + 32));

  }
}

void sub_1007B5158(id a1, BrowseManagerContentCache *a2)
{
  -[BrowseManagerContentCache setCategoryResultsCache:](a2, "setCategoryResultsCache:", 0);
}

void sub_1007B52EC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "BrowseManager");
  v2 = (void *)qword_1014D3368;
  qword_1014D3368 = (uint64_t)v1;

}

void sub_1007B531C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  id v9;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLForDirectory:inDomain:appropriateForURL:create:error:", 13, 1, 0, 1, 0));
  v3 = (void *)qword_1014D3378;
  qword_1014D3378 = v2;

  if (qword_1014D3378)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D3378, "URLByAppendingPathComponent:", CFSTR("Maps")));
    v5 = (void *)qword_1014D3378;
    qword_1014D3378 = v4;

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1014D3378, "path"));
    v8 = objc_msgSend(v6, "fileExistsAtPath:", v7);

    if ((v8 & 1) == 0)
    {
      v9 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      objc_msgSend(v9, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", qword_1014D3378, 1, 0, 0);

    }
  }
}

void sub_1007B5908(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Order"), CFSTR("order"), 1, CFSTR("AddressBookSearchOrderKey"));
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Limit"), CFSTR("limit"), 1, CFSTR("AddressBookSearchLimitKey"));

}

void sub_1007B5980(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Order"), CFSTR("order"), 1, CFSTR("RecentsSeachOrderKey"));
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Limit"), CFSTR("limit"), 1, CFSTR("RecentsSearchLimitKey"));

}

void sub_1007B59F8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Order"), CFSTR("order"), 1, CFSTR("HistorySearchOrderKey"));
  v3 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Limit"), CFSTR("limit"), 1, CFSTR("HistorySearchLimitKey"));

}

void sub_1007B5A70(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Request Interval(Cellular)"), CFSTR("(seconds)"), 0, MapKitConfig_SearchCompleteRequestIntervalCellular[0], MapKitConfig_SearchCompleteRequestIntervalCellular[1]);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Request Interval(Other)"), CFSTR("(seconds)"), 0, MapKitConfig_SearchCompleteRequestInterval[0], MapKitConfig_SearchCompleteRequestInterval[1]);

}

void sub_1007B5AF8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  MapsDebugTableSection *v3;

  v3 = a2;
  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v3, "addButtonRowWithTitle:action:", CFSTR("Remove All Local Overrides"), &stru_1011C7040);
  -[MapsDebugTableSection setFooter:](v3, "setFooter:", CFSTR("This does not reset any network defaults."));

}

void sub_1007B5B48(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("AddressBookSearchOrderKey"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("AddressBookSearchLimitKey"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("RecentsSeachOrderKey"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("RecentsSearchLimitKey"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("HistorySearchOrderKey"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("HistorySearchLimitKey"));

}

void sub_1007B7030(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  if (!v3)
  {
    v4 = *(void **)(a1 + 32);
    if (v4)
    {
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
      v3 = 0;
    }
  }

}

uint64_t sub_1007B71A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  return result;
}

void sub_1007B7348(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  int v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = sub_100431A4C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    v15 = 138412290;
    v16 = v6;
    v10 = "Prompt to unlock failed: %@";
    v11 = v9;
    v12 = OS_LOG_TYPE_ERROR;
    v13 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    LOWORD(v15) = 0;
    v10 = "Prompt to unlock succeeded";
    v11 = v9;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v15, v13);
LABEL_7:

  v14 = *(_QWORD *)(a1 + 32);
  if (v14)
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v6);

}

void sub_1007B7D5C(uint64_t a1, char a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1007B7DBC;
  v2[3] = &unk_1011ACE58;
  v3 = a2;
  v2[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
}

id sub_1007B7DBC(uint64_t a1)
{
  int v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = sub_100431A4C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "AppLaunchAddressCorrectionAlert: presenting alert", buf, 2u);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 1;
    return objc_msgSend(*(id *)(a1 + 32), "_displayAlert");
  }
  else
  {
    if (v5)
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "AppLaunchAddressCorrectionAlert: no need to be displayed", v7, 2u);
    }

    return objc_msgSend(*(id *)(a1 + 32), "_alertDidFinishProcessing");
  }
}

void sub_1007B82C4(uint64_t a1)
{
  char BOOL;
  void *v3;
  int HasValue;
  id v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  BOOL = GEOConfigGetBOOL(MapsConfig_AddressCorrectionEnabled, off_1014B2D48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MKSystemController sharedInstance](MKSystemController, "sharedInstance"));
  if (!objc_msgSend(v3, "isInternalInstall"))
  {

LABEL_6:
    if ((BOOL & 1) == 0)
      goto LABEL_4;
    goto LABEL_7;
  }
  HasValue = _GEOConfigHasValue(MapsConfig_AddressCorrectionEnabledInternalInstall, off_1014B2D58);

  if (!HasValue)
    goto LABEL_6;
  if ((GEOConfigGetBOOL(MapsConfig_AddressCorrectionEnabledInternalInstall, off_1014B2D58) & 1) == 0)
  {
LABEL_4:
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    return;
  }
LABEL_7:
  v5 = objc_alloc_init((Class)ACAccountStore);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "aa_primaryAppleAccount"));
  v7 = v6;
  if (v6 && !objc_msgSend(v6, "aa_isManagedAppleID"))
  {
    v8 = objc_alloc_init((Class)RTRoutineManager);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1007B8424;
    v9[3] = &unk_1011AE2B8;
    v10 = *(id *)(a1 + 32);
    objc_msgSend(v8, "fetchRoutineStateWithHandler:", v9);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

uint64_t sub_1007B8424(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1007B8624(uint64_t a1, unint64_t a2)
{
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[5];
  uint8_t buf[4];
  unint64_t v23;

  v4 = sub_100431A4C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "AppLaunchAddressCorrectionAlert: buttonIndex = %ld", buf, 0xCu);
  }

  if (qword_1014B79F8 != a2)
  {
    if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") <= a2)
    {
      v7 = 3;
    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a2));
      v7 = (uint64_t)objc_msgSend(v6, "unsignedIntegerValue");

    }
    v8 = sub_100431A4C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "AppLaunchAddressCorrectionAlert: outcome = %ld", buf, 0xCu);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/LocationBundles/AppGenius.bundle")));
    switch(v7)
    {
      case 3:
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[OBPrivacyPresenter presenterForPrivacySplashWithIdentifier:](OBPrivacyPresenter, "presenterForPrivacySplashWithIdentifier:", CFSTR("com.apple.onboarding.improvemaps")));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "chromeViewController"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_maps_mapsSceneDelegate"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "topMostPresentedViewController"));
        objc_msgSend(v15, "setPresentingViewController:", v19);

        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_1007B896C;
        v21[3] = &unk_1011AC860;
        v21[4] = *(_QWORD *)(a1 + 40);
        objc_msgSend(v15, "setDismissHandler:", v21);
        objc_msgSend(v15, "present");

        break;
      case 2:
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        objc_msgSend(v20, "setBool:forKey:", 1, CFSTR("HasAcknowledgedAddressCorrectionAlert2021"));

        GEOConfigSetInteger(MapsConfig_AddressCorrectionAuthorizationStatus, off_1014B2F58, 1);
        if (*(_BYTE *)(a1 + 48))
          +[CLLocationManager setAuthorizationStatusByType:forBundle:](CLLocationManager, "setAuthorizationStatusByType:forBundle:", 2, v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
        v13 = v12;
        v14 = 29;
        goto LABEL_19;
      case 1:
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        objc_msgSend(v11, "setBool:forKey:", 1, CFSTR("HasAcknowledgedAddressCorrectionAlert2021"));

        GEOConfigSetInteger(MapsConfig_AddressCorrectionAuthorizationStatus, off_1014B2F58, 2);
        if (*(_BYTE *)(a1 + 48))
          +[CLLocationManager setAuthorizationStatusByType:forBundle:](CLLocationManager, "setAuthorizationStatusByType:forBundle:", 3, v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
        v13 = v12;
        v14 = 28;
LABEL_19:
        objc_msgSend(v12, "captureUserAction:onTarget:eventValue:", v14, 641, 0);

        objc_msgSend(*(id *)(a1 + 40), "_alertDidFinishProcessing");
        break;
    }

  }
}

id sub_1007B896C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_displayAlert");
}

id sub_1007B927C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setImage:", a2);
}

id sub_1007B9288(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setImage:", a2);
}

void sub_1007B9654(id a1)
{
  NSDateFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_1014D3388;
  qword_1014D3388 = (uint64_t)v1;

  objc_msgSend((id)qword_1014D3388, "setDateStyle:", 0);
  objc_msgSend((id)qword_1014D3388, "setTimeStyle:", 1);
}

void sub_1007B9B58(id a1)
{
  NSDateFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_1014D3398;
  qword_1014D3398 = (uint64_t)v1;

}

void sub_1007B9B80(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t Log;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;

  if (!qword_1014D33A8)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.MapsSuggestions")));
    v3 = (void *)qword_1014D33A8;
    qword_1014D33A8 = v2;

    if (!qword_1014D33A8)
    {
      Log = GEOFindOrCreateLog(MapsSuggestionsLoggingSubsystem, *(_QWORD *)(a1 + 32));
      v5 = objc_claimAutoreleasedReturnValue(Log);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        v6 = 136446978;
        v7 = "/Library/Caches/com.apple.xbs/Sources/Maps/iOS/Suggestions/MapsSuggestionsDefines.h";
        v8 = 1024;
        v9 = 324;
        v10 = 2082;
        v11 = "NSBundle * _Nonnull _MapsSuggestionsBundle(const char * _Nonnull)_block_invoke";
        v12 = 2082;
        v13 = "nil == s_bundleWithMapsSuggestionsIdentifier";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "At %{public}s:%d, %{public}s forbids: %{public}s. Requires bundleWithIdentifier:@\"com.apple.MapsSuggestions\"", (uint8_t *)&v6, 0x26u);
      }

    }
  }
}

void sub_1007BBD14(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian));
  v2 = (void *)qword_1014D33C0;
  qword_1014D33C0 = v1;

}

void sub_1007BE400(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "taggedButtonsView"));
  objc_msgSend(v4, "addSubview:", v3);

}

BOOL sub_1007BED7C(id a1, CarFocusableButton *a2, unint64_t a3, BOOL *a4)
{
  return -[CarFocusableButton canBecomeFocused](a2, "canBecomeFocused", a3, a4);
}

void sub_1007BF450(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1007BF478(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v5 = a2;
  if (!a3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1007BF520;
    v6[3] = &unk_1011AD1E8;
    objc_copyWeak(&v8, (id *)(a1 + 32));
    v7 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

    objc_destroyWeak(&v8);
  }

}

void sub_1007BF520(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateSuggestions:", *(_QWORD *)(a1 + 32));

}

void sub_1007BF55C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v5 = a2;
  if (!a3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1007BF604;
    v6[3] = &unk_1011AD1E8;
    objc_copyWeak(&v8, (id *)(a1 + 32));
    v7 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

    objc_destroyWeak(&v8);
  }

}

void sub_1007BF604(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_updateSuggestions:", *(_QWORD *)(a1 + 32));

}

void sub_1007BFF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007BFF88(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_passKitLibraryMayHaveChanged");
    WeakRetained = v2;
  }

}

void sub_1007C0118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007C0134(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_defaultPaymentCardsFromLibrary:", v3));
    v7 = sub_10043253C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = sub_10039DCD4(v6, &stru_1011C72F0);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v13 = 138412290;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Default Passes: %@", (uint8_t *)&v13, 0xCu);

    }
    v11 = *(_QWORD *)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
    (*(void (**)(uint64_t, BOOL))(v11 + 16))(v11, v12 != 0);

  }
}

void sub_1007C03DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007C03F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1007C0404(uint64_t a1)
{

}

void sub_1007C040C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

uint64_t sub_1007C0420(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1007C0438(uint64_t a1)
{
  id v2;
  void *v3;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = objc_alloc_init((Class)PKPassLibrary);
    v3 = (void *)WeakRetained[2];
    WeakRetained[2] = v2;

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1007C0AE0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1007C0AFC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  __CFString *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  id v20;
  NSObject *v21;
  unsigned int v22;
  const __CFString *v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  const __CFString *v30;
  id v31;
  NSObject *v32;
  id v33;
  NSObject *v34;
  id v35;
  unsigned int v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  const __CFString *v46;
  id v47;
  NSObject *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  TransitPayModelData *v56;
  uint64_t v57;
  void *v58;
  TransitPayModelData *v59;
  id v60;
  NSObject *v61;
  _BOOL4 v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  const __CFString *v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint8_t buf[4];
  const __CFString *v75;
  __int16 v76;
  id v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  id v81;
  _BYTE v82[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "devicePrimaryPaymentApplication"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "supportedTransitNetworkIdentifiers"));
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));

    if (v5)
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "objectForKey:", v5));
      if (!v6)
      {
        v7 = sub_10043253C();
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "We did not get a localizedDisplayName name for the pass, which is expected if the card is non-DCI. Falling back to localizedDescription", buf, 2u);
        }

        v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localizedDescription"));
      }
      v68 = v5;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transitProperties"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "displayableBalance"));
      v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_messageFromBalance:passName:", v10, v6));

      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v11 = *(id *)(a1 + 48);
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v70, v82, 16);
      v69 = (void *)v6;
      if (v12)
      {
        v65 = WeakRetained;
        v13 = *(_QWORD *)v71;
        while (2)
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v71 != v13)
              objc_enumerationMutation(v11);
            v15 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)i);
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "devicePrimaryPaymentApplication"));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "supportedTransitNetworkIdentifiers"));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "identifier"));
            v19 = objc_msgSend(v17, "containsObject:", v18);

            if (v19)
            {
              v12 = v15;
              goto LABEL_17;
            }
          }
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v70, v82, 16);
          if (v12)
            continue;
          break;
        }
LABEL_17:
        WeakRetained = v65;
        v6 = (uint64_t)v69;
      }

      v20 = sub_10043253C();
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        v22 = objc_msgSend(*(id *)(a1 + 32), "isRemotePass");
        v23 = CFSTR("iPhone");
        if (v22)
          v23 = CFSTR("Apple Watch");
        *(_DWORD *)buf = 138412290;
        v75 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Showing tip for the device: %@", buf, 0xCu);
      }

      v24 = objc_alloc((Class)NSString);
      v25 = v12;
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("MAPS_TRANSIT_PAY_OPEN_WALLET_ACTION_RELOAD"), CFSTR("localized string not found"), 0));

      if (v25)
      {
        switch(objc_msgSend(v25, "addValueNameType"))
        {
          case 0u:
          case 1u:
            goto LABEL_31;
          case 2u:
            v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v29 = v28;
            v30 = CFSTR("MAPS_TRANSIT_PAY_OPEN_WALLET_ACTION_TOP_UP");
            goto LABEL_35;
          case 3u:
            v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v29 = v28;
            v30 = CFSTR("MAPS_TRANSIT_PAY_OPEN_WALLET_ACTION_REFILL");
            goto LABEL_35;
          case 4u:
            v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v29 = v28;
            v30 = CFSTR("MAPS_TRANSIT_PAY_OPEN_WALLET_ACTION_LOAD");
LABEL_35:
            v35 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "localizedStringForKey:value:table:", v30, CFSTR("localized string not found"), 0));

            break;
          default:
            v35 = 0;
            break;
        }
      }
      else
      {
        v33 = sub_10043253C();
        v34 = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Could not find an associated payment method for the given pass. This should never happen - using a default \"reload\" string", buf, 2u);
        }

LABEL_31:
        v35 = v27;
      }

      v66 = objc_msgSend(v24, "initWithFormat:", v35, v6);
      v64 = objc_alloc((Class)NSString);
      v36 = objc_msgSend(*(id *)(a1 + 32), "isRemotePass");
      v37 = v25;
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "localizedStringForKey:value:table:", CFSTR("MAPS_TRANSIT_PAY_LOW_BALANCE_SUBTITLE_RELOAD_FOR_IPHONE"), CFSTR("localized string not found"), 0));

      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "localizedStringForKey:value:table:", CFSTR("MAPS_TRANSIT_PAY_LOW_BALANCE_SUBTITLE_RELOAD_FOR_WATCH"), CFSTR("localized string not found"), 0));

      if (v25)
      {
        switch(objc_msgSend(v37, "addValueNameType"))
        {
          case 0u:
          case 1u:
            goto LABEL_42;
          case 2u:
            v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "localizedStringForKey:value:table:", CFSTR("MAPS_TRANSIT_PAY_LOW_BALANCE_SUBTITLE_TOP_UP_FOR_IPHONE"), CFSTR("localized string not found"), 0));

            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v45 = v44;
            v46 = CFSTR("MAPS_TRANSIT_PAY_LOW_BALANCE_SUBTITLE_TOP_UP_FOR_WATCH");
            goto LABEL_49;
          case 3u:
            v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "localizedStringForKey:value:table:", CFSTR("MAPS_TRANSIT_PAY_LOW_BALANCE_SUBTITLE_REFILL_FOR_IPHONE"), CFSTR("localized string not found"), 0));

            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v45 = v44;
            v46 = CFSTR("MAPS_TRANSIT_PAY_LOW_BALANCE_SUBTITLE_REFILL_FOR_WATCH");
            goto LABEL_49;
          case 4u:
            v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "localizedStringForKey:value:table:", CFSTR("MAPS_TRANSIT_PAY_LOW_BALANCE_SUBTITLE_LOAD_FOR_IPHONE"), CFSTR("localized string not found"), 0));

            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
            v45 = v44;
            v46 = CFSTR("MAPS_TRANSIT_PAY_LOW_BALANCE_SUBTITLE_LOAD_FOR_WATCH");
LABEL_49:
            v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "localizedStringForKey:value:table:", v46, CFSTR("localized string not found"), 0));

            if (v36)
              v54 = v53;
            else
              v54 = v43;
            v50 = v54;

            break;
          default:
            v50 = 0;
            break;
        }
      }
      else
      {
        v47 = sub_10043253C();
        v48 = objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "Could not find an associated payment method for the given pass. This should never happen - using a default \"reload\" string", buf, 2u);
        }

LABEL_42:
        if (v36)
          v49 = v41;
        else
          v49 = v39;
        v50 = v49;
      }

      v55 = objc_msgSend(v64, "initWithFormat:", v50, v69);
      v56 = [TransitPayModelData alloc];
      v57 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_exclamationMarkImage"));
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueID"));
      LOBYTE(v63) = objc_msgSend(*(id *)(a1 + 32), "isRemotePass");
      v59 = -[TransitPayModelData initWithTitle:subtitle:actionTitle:image:paymentMethod:topUpPassUniqueID:isForRemoteDevice:](v56, "initWithTitle:subtitle:actionTitle:image:paymentMethod:topUpPassUniqueID:isForRemoteDevice:", v67, v55, v66, v57, v37, v58, v63);

      LOBYTE(v57) = -[TransitPayModelData hasAllNeededText](v59, "hasAllNeededText");
      v60 = sub_10043253C();
      v61 = objc_claimAutoreleasedReturnValue(v60);
      v62 = os_log_type_enabled(v61, OS_LOG_TYPE_INFO);
      if ((v57 & 1) != 0)
      {
        if (v62)
        {
          *(_DWORD *)buf = 138412290;
          v75 = (const __CFString *)v59;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "Calling completion() with modelData: %@", buf, 0xCu);
        }

        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        v5 = (__CFString *)v68;
      }
      else
      {
        v5 = (__CFString *)v68;
        if (v62)
        {
          *(_DWORD *)buf = 138413058;
          v75 = v68;
          v76 = 2112;
          v77 = v55;
          v78 = 2112;
          v79 = v67;
          v80 = 2112;
          v81 = v66;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "Something is nil in the message. Can't show topup. !\nidentifier:%@\nsubtitle:%@\nmessage:%@\nactionTitle:%@", buf, 0x2Au);
        }

        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }

    }
    else
    {
      v31 = sub_10043253C();
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Pass does not have any transit network identifiers", buf, 2u);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }

  }
}

BOOL sub_1007C13A0(id a1, PKSecureElementPass *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  void *v5;
  PKSecureElementPass *v6;
  void *v7;
  id v8;
  BOOL v9;
  id v10;
  NSObject *v11;
  PKSecureElementPass *v12;
  id v13;
  uint64_t v14;
  void *v15;
  int v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const __CFString *v21;
  id v22;
  uint8_t buf[4];
  id v25;

  v6 = a2;
  if ((-[PKSecureElementPass isTransitPass](v6, "isTransitPass") & 1) != 0)
  {
LABEL_21:
    v9 = 0;
    goto LABEL_22;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[PKSecureElementPass devicePrimaryPaymentApplication](v6, "devicePrimaryPaymentApplication"));
  v8 = objc_msgSend(v7, "state");

  if (v8 != (id)1)
  {
    v10 = sub_10043253C();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = v6;
      v13 = objc_alloc((Class)NSString);
      v14 = objc_claimAutoreleasedReturnValue(-[PKSecureElementPass localizedDescription](v12, "localizedDescription"));
      v15 = (void *)v14;
      if (v14)
      {
        v16 = 0;
        v17 = (const __CFString *)v14;
      }
      else
      {
        v18 = objc_claimAutoreleasedReturnValue(-[PKSecureElementPass organizationName](v12, "organizationName"));
        v4 = (void *)v18;
        if (v18)
        {
          v16 = 0;
          v17 = (const __CFString *)v18;
        }
        else
        {
          v19 = objc_claimAutoreleasedReturnValue(-[PKSecureElementPass localizedName](v12, "localizedName"));
          v5 = (void *)v19;
          if (v19)
            v17 = (const __CFString *)v19;
          else
            v17 = CFSTR("{pass has no description}");
          v16 = 1;
        }
      }
      v20 = -[PKSecureElementPass isRemotePass](v12, "isRemotePass");
      v21 = CFSTR("NO");
      if (v20)
        v21 = CFSTR("YES");
      v22 = objc_msgSend(v13, "initWithFormat:", CFSTR("%@: %@, isRemote: %@"), v12, v17, v21);
      if (v16)

      if (!v15)
      *(_DWORD *)buf = 138412290;
      v25 = v22;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Filtering a non-active card: %@", buf, 0xCu);

    }
    goto LABEL_21;
  }
  v9 = 1;
LABEL_22:

  return v9;
}

BOOL sub_1007C1B74(id a1, PKSecureElementPass *a2, unint64_t a3, BOOL *a4)
{
  return -[PKSecureElementPass isTransitPass](a2, "isTransitPass", a3, a4);
}

void sub_1007C1F90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  int v13;
  void *v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "devicePrimaryPaymentApplication"));
  v5 = PKLegacyTransitNetworkIdentifierForCredentialType(objc_msgSend(v4, "paymentNetworkIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));

    if (v7)
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedDescription"));
LABEL_6:
      v10 = (void *)v8;
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, v6);

      goto LABEL_7;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "objectForKeyedSubscript:", v6));

    if (v9)
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "objectForKeyedSubscript:", v6));
      goto LABEL_6;
    }
    v11 = sub_10043253C();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = 138412290;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Pass %@ does not have localizedDescription or localizedDisplayName", (uint8_t *)&v13, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", CFSTR("No pass description available"), v6);
  }
LABEL_7:

}

void sub_1007C22F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id obj;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];

  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v3)
  {
    v4 = v3;
    v16 = *(_QWORD *)v22;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v22 != v16)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v5);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifiers"));
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v18;
          do
          {
            v11 = 0;
            do
            {
              if (*(_QWORD *)v18 != v10)
                objc_enumerationMutation(v7);
              v12 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v11);
              if (v12)
              {
                v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDisplayName"));

                if (v13)
                {
                  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDisplayName"));
                  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setObject:forKeyedSubscript:", v14, v12);

                }
              }
              v11 = (char *)v11 + 1;
            }
            while (v9 != v11);
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          }
          while (v9);
        }

        v5 = (char *)v5 + 1;
      }
      while (v5 != v4);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1007C2688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007C26A4(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  TransitPayModelDataProvider *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  id v26;
  id v27;
  NSObject *v28;
  unsigned __int8 v29;
  void (*v30)(void);
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  _QWORD v35[4];
  id v36;
  id v37;
  uint8_t buf[4];
  id v39;
  __int16 v40;
  id v41;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 9);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_fetchAllAvailablePassesFromWallet");
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_userTransitPassesFromLibrary:", v3));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_defaultPaymentCardsFromLibrary:", v3));
    if (!objc_msgSend(v6, "count") && !objc_msgSend(v7, "count"))
    {
      (*((void (**)(void))a1[8] + 2))();
      v23 = sub_10043253C();
      v8 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Must have transit passes OR a default payment card", buf, 2u);
      }
      goto LABEL_31;
    }
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_identifiersForSecurePasses:", v6));
    v9 = a1[4];
    v10 = objc_msgSend(v7, "copy");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_identifiersForSecurePasses:", v10));

    v12 = a1[4];
    v13 = objc_msgSend(v7, "copy");
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_defaultPaymentCardExpressStatuses:", v13));

    if (!objc_msgSend(a1[6], "count") || !objc_msgSend(a1[7], "count"))
    {
      v20 = sub_10043253C();
      v15 = (TransitPayModelDataProvider *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
      {
        v21 = objc_msgSend(a1[6], "count");
        v22 = objc_msgSend(a1[7], "count");
        *(_DWORD *)buf = 134218240;
        v39 = v21;
        v40 = 2048;
        v41 = v22;
        _os_log_impl((void *)&_mh_execute_header, &v15->super, OS_LOG_TYPE_ERROR, "Either paymentMethods is empty (%lu) or suggestions is empty (%lu).", buf, 0x16u);
      }
      goto LABEL_30;
    }
    v34 = v11;
    v15 = -[TransitPayModelDataProvider initWithTransitPaymentMethods:suggestions:isTourist:defaultPaymentCardsIdentifiers:defaultPaymentCardsExpressStatuses:userClosedLoopIdentifiers:availablePasses:]([TransitPayModelDataProvider alloc], "initWithTransitPaymentMethods:suggestions:isTourist:defaultPaymentCardsIdentifiers:defaultPaymentCardsExpressStatuses:userClosedLoopIdentifiers:availablePasses:", a1[6], a1[7], *((unsigned __int8 *)a1[4] + 24), v11, v14, v8, *((_QWORD *)a1[4] + 4));
    if (-[NSObject count](v8, "count"))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "transitSystemsForRoute:withSupportedPaymentMethods:", a1[5], a1[6]));
      if (objc_msgSend(v16, "count"))
      {
        v33 = v14;
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currencyAmountForRoute:", a1[5]));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_passForTopUpWithTransitPasses:forRouteTNIs:routeCost:", v6, v16, v17));

        if (v18)
        {
          v19 = a1[6];
          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472;
          v35[2] = sub_1007C2B64;
          v35[3] = &unk_1011C7210;
          v37 = a1[8];
          v36 = a1[5];
          objc_msgSend(v5, "_transitTopUpMessageForPass:paymentMethods:completion:", v18, v19, v35);

          v14 = v33;
LABEL_29:

          v11 = v34;
LABEL_30:

LABEL_31:
          goto LABEL_32;
        }
        v26 = sub_10043253C();
        v25 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Found no pass to top up", buf, 2u);
        }
        v14 = v33;
      }
      else
      {
        v24 = sub_10043253C();
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "There are no supported transit identifiers for this route", buf, 2u);
        }
      }

      (*((void (**)(void))a1[8] + 2))();
    }
    v27 = sub_10043253C();
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Not top up scenario. Checking to show regular tips.", buf, 2u);
    }

    v16 = (void *)objc_claimAutoreleasedReturnValue(-[TransitPayModelDataProvider modelData](v15, "modelData"));
    v29 = objc_msgSend(v16, "hasAllNeededText");
    if (v16 && (v29 & 1) != 0)
    {
      v30 = (void (*)(void))*((_QWORD *)a1[8] + 2);
    }
    else
    {
      v31 = sub_10043253C();
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Either title, subtitle or actionTitle is missing. Or modelData is nil. Returning nil from TransitPassManager.", buf, 2u);
      }

      v30 = (void (*)(void))*((_QWORD *)a1[8] + 2);
    }
    v30();
    goto LABEL_29;
  }
LABEL_32:

}

uint64_t sub_1007C2B64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2);
}

void sub_1007C32E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

id sub_1007C3340(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "isContactlessPaymentSupportedForTransitNetworks:", *(_QWORD *)(a1 + 32));
}

uint64_t sub_1007C334C(uint64_t a1, void *a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id v15;
  NSObject *v16;
  uint8_t v18[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  v4 = objc_msgSend(v3, "isRemotePass");
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID"));
  if ((v4 & 1) != 0)
  {
    v7 = objc_msgSend(v5, "isExpressModeEnabledForRemotePassUniqueIdentifier:", v6);

    if (!v7)
    {
LABEL_3:
      v8 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    v9 = objc_msgSend(v5, "isExpressModeEnabledForPassUniqueIdentifier:", v6);

    if ((v9 & 1) == 0)
      goto LABEL_3;
  }
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "availableActions"));
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v10);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i), "type") == (id)1)
        {

          v8 = 1;
          goto LABEL_17;
        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v12)
        continue;
      break;
    }
  }

  v15 = sub_10043253C();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Wallet does not support top up for this pass", v18, 2u);
  }

  v8 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
LABEL_17:

  return v8;
}

uint64_t sub_1007C3510(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  id v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  int v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  const __CFString *v26;
  id v27;
  void *v29;
  void *v30;
  _BYTE *v31;
  uint8_t buf[16];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t v37[4];
  id v38;

  v5 = a2;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "availableActions"));
  v7 = -[NSObject countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v34;
    while (2)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v9)
          objc_enumerationMutation(v6);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i), "type") == (id)1)
        {
          v12 = 0;
          goto LABEL_12;
        }
      }
      v8 = -[NSObject countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      if (v8)
        continue;
      break;
    }
  }

  v11 = sub_10043253C();
  v6 = objc_claimAutoreleasedReturnValue(v11);
  v12 = 1;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Wallet does not support top up for this pass", buf, 2u);
  }
LABEL_12:

  v13 = objc_msgSend(*(id *)(a1 + 32), "_balanceIsLessThanRouteCost:forPass:", *(_QWORD *)(a1 + 40), v5);
  v14 = v13;
  if ((v12 & 1) == 0 && (v13 & 1) == 0)
  {
    v15 = sub_10043253C();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = v5;
      v18 = objc_alloc((Class)NSString);
      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedDescription"));
      v20 = (void *)v19;
      v31 = a3;
      if (v19)
      {
        v21 = 0;
        v22 = (const __CFString *)v19;
      }
      else
      {
        v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "organizationName"));
        if (v23)
        {
          v21 = 0;
          v30 = (void *)v23;
          v22 = (const __CFString *)v23;
        }
        else
        {
          v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedName"));
          v29 = (void *)v24;
          v30 = 0;
          if (v24)
            v22 = (const __CFString *)v24;
          else
            v22 = CFSTR("{pass has no description}");
          v21 = 1;
        }
      }
      v25 = objc_msgSend(v17, "isRemotePass");
      v26 = CFSTR("NO");
      if (v25)
        v26 = CFSTR("YES");
      v27 = objc_msgSend(v18, "initWithFormat:", CFSTR("%@: %@, isRemote: %@"), v17, v22, v26);
      if (v21)

      if (!v20)
      *(_DWORD *)v37 = 138412290;
      v38 = v27;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Found pass %@ that has a balance higher than the route cost, suppressing tip", v37, 0xCu);

      a3 = v31;
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    *a3 = 1;
  }

  return v14 & (v12 ^ 1);
}

id sub_1007C4074(id a1, PKPass *a2, unint64_t a3)
{
  void *v3;
  void *v4;
  PKPass *v5;
  id v6;
  uint64_t v7;
  void *v8;
  int v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const __CFString *v14;
  id v15;

  v5 = a2;
  v6 = objc_alloc((Class)NSString);
  v7 = objc_claimAutoreleasedReturnValue(-[PKPass localizedDescription](v5, "localizedDescription"));
  v8 = (void *)v7;
  if (v7)
  {
    v9 = 0;
    v10 = (const __CFString *)v7;
  }
  else
  {
    v11 = objc_claimAutoreleasedReturnValue(-[PKPass organizationName](v5, "organizationName"));
    v3 = (void *)v11;
    if (v11)
    {
      v9 = 0;
      v10 = (const __CFString *)v11;
    }
    else
    {
      v12 = objc_claimAutoreleasedReturnValue(-[PKPass localizedName](v5, "localizedName"));
      v4 = (void *)v12;
      if (v12)
        v10 = (const __CFString *)v12;
      else
        v10 = CFSTR("{pass has no description}");
      v9 = 1;
    }
  }
  v13 = -[PKPass isRemotePass](v5, "isRemotePass");
  v14 = CFSTR("NO");
  if (v13)
    v14 = CFSTR("YES");
  v15 = objc_msgSend(v6, "initWithFormat:", CFSTR("%@: %@, isRemote: %@"), v5, v10, v14);
  if (v9)

  if (!v8)
  return v15;
}

void sub_1007C4518(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[EP] will _mergeTasks", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_mergeTasks");

}

void sub_1007C4800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007C4824(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007C48D4;
  v5[3] = &unk_1011C7318;
  objc_copyWeak(&v8, (id *)(a1 + 48));
  v3 = *(id *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "performTaskWithCompletion:", v5);

  objc_destroyWeak(&v8);
}

void sub_1007C48C0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007C48D4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  _QWORD block[4];
  id v5;
  uint64_t v6;
  id v7;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007C4968;
  block[3] = &unk_1011AFF10;
  objc_copyWeak(&v7, (id *)(a1 + 48));
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = v2;
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v7);
}

void sub_1007C4968(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained && objc_msgSend(WeakRetained[7], "containsObject:", *(_QWORD *)(a1 + 32)))
  {
    objc_msgSend(v3[7], "removeObject:", *(_QWORD *)(a1 + 32));
    v3[5] = (char *)v3[5] + 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 40) + 32));
  v4 = sub_100431A4C();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[EP] addTask dispatch_group_leave task: %@", (uint8_t *)&v7, 0xCu);
  }

}

void sub_1007C4FE0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "(tag %@) %@", (uint8_t *)&v6, 0x16u);
  }

}

id sub_1007C5544(uint64_t a1)
{
  +[MapsAnalyticStateProvider updateLocaleInformation:](MapsAnalyticStateProvider, "updateLocaleInformation:", *(_QWORD *)(a1 + 32));
  return +[MapsAnalyticStateProvider updateTouristInformation](MapsAnalyticStateProvider, "updateTouristInformation");
}

void sub_1007C6434(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1007C645C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id *v4;
  id WeakRetained;
  id v6;
  uint8_t v7[16];

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[EP] ^processAlerts", v7, 2u);
  }

  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "_displayLaunchAlertsIfNecessary");

  v6 = objc_loadWeakRetained(v4);
  objc_msgSend(v6, "_unlockMergeActivities");

}

void sub_1007C64F0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  unsigned __int8 v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[16];

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[EP] ^processWelcomeAndAlerts", buf, 2u);
  }

  if (+[UIApplication _maps_isAnySceneForegroundForRole:](UIApplication, "_maps_isAnySceneForegroundForRole:", _UIWindowSceneSessionTypeCoverSheet))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "_unlockMergeActivities");

    return;
  }
  v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 88));
  if ((objc_msgSend(v5, "isCarPlayOnlyContext") & 1) != 0)
  {

  }
  else
  {
    v6 = +[UIApplication _maps_isAnySceneForegroundForRole:](UIApplication, "_maps_isAnySceneForegroundForRole:", UIWindowSceneSessionRoleApplication);

    if ((v6 & 1) != 0)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "scene"));
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1007C6650;
      v8[3] = &unk_1011ADA00;
      v9 = *(id *)(a1 + 48);
      +[MapsWelcomeScreenViewController presentWelcomeScreenIfNecessaryInScene:completionBlock:](MapsWelcomeScreenViewController, "presentWelcomeScreenIfNecessaryInScene:completionBlock:", v7, v8);

      return;
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t sub_1007C6650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1007C665C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1007C666C(uint64_t a1)
{

}

void sub_1007C6674(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint8_t v7[16];

  v2 = sub_100431A4C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[EP] ContainerDidPresentContaineeNotification", v7, 2u);
  }

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v4, "removeObserver:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
}

id sub_1007C6B5C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_openURL:referringURL:sourceApplication:session:sceneOptions:mkOptions:windowSize:", *(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
}

id sub_1007C71AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_continueUserActivity:session:windowSize:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_1007C7A2C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1007C7A68(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  id v31;
  _QWORD v32[4];
  id v33;
  _QWORD v34[4];
  id v35;
  _QWORD v36[4];
  id v37[2];

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_1007C7F58;
  v36[3] = &unk_1011C1B08;
  objc_copyWeak(v37, v4);
  objc_msgSend(WeakRetained, "_addNavigationRowWithTitle:section:handler:", CFSTR("Visualization"), v3, v36);

  v6 = objc_loadWeakRetained(v4);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1007C7FA0;
  v34[3] = &unk_1011C1B08;
  objc_copyWeak(&v35, v4);
  objc_msgSend(v6, "_addNavigationRowWithTitle:section:handler:", CFSTR("Locations"), v3, v34);

  v7 = objc_loadWeakRetained(v4);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1007C7FE8;
  v32[3] = &unk_1011C1B08;
  objc_copyWeak(&v33, v4);
  objc_msgSend(v7, "_addNavigationRowWithTitle:section:handler:", CFSTR("Routing"), v3, v32);

  v8 = objc_loadWeakRetained(v4);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1007C8030;
  v30[3] = &unk_1011C1B08;
  objc_copyWeak(&v31, v4);
  objc_msgSend(v8, "_addNavigationRowWithTitle:section:handler:", CFSTR("ETA Updates"), v3, v30);

  v9 = objc_loadWeakRetained(v4);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1007C8078;
  v28[3] = &unk_1011C1B08;
  objc_copyWeak(&v29, v4);
  objc_msgSend(v9, "_addNavigationRowWithTitle:section:handler:", CFSTR("Audio"), v3, v28);

  v10 = objc_loadWeakRetained(v4);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1007C80C0;
  v26[3] = &unk_1011C1B08;
  objc_copyWeak(&v27, v4);
  objc_msgSend(v10, "_addNavigationRowWithTitle:section:handler:", CFSTR("Transit"), v3, v26);

  v11 = objc_loadWeakRetained(v4);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1007C8108;
  v24[3] = &unk_1011C1B08;
  objc_copyWeak(&v25, v4);
  objc_msgSend(v11, "_addNavigationRowWithTitle:section:handler:", CFSTR("Custom Routes"), v3, v24);

  v12 = objc_loadWeakRetained(v4);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1007C8150;
  v22[3] = &unk_1011C1B08;
  objc_copyWeak(&v23, v4);
  objc_msgSend(v12, "_addNavigationRowWithTitle:section:handler:", CFSTR("Time to Leave"), v3, v22);

  v13 = objc_loadWeakRetained(v4);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1007C8198;
  v20[3] = &unk_1011C1B08;
  objc_copyWeak(&v21, v4);
  objc_msgSend(v13, "_addNavigationRowWithTitle:section:handler:", CFSTR("Navigation Service"), v3, v20);

  v14 = objc_loadWeakRetained(v4);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1007C81E0;
  v18[3] = &unk_1011C1B08;
  objc_copyWeak(&v19, v4);
  objc_msgSend(v14, "_addNavigationRowWithTitle:section:handler:", CFSTR("Preloading"), v3, v18);

  v15 = objc_loadWeakRetained(v4);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1007C8228;
  v16[3] = &unk_1011C1B08;
  objc_copyWeak(&v17, v4);
  objc_msgSend(v15, "_addNavigationRowWithTitle:section:handler:", CFSTR("Thermal Mitigations"), v3, v16);

  objc_destroyWeak(&v17);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&v23);
  objc_destroyWeak(&v25);
  objc_destroyWeak(&v27);
  objc_destroyWeak(&v29);
  objc_destroyWeak(&v31);
  objc_destroyWeak(&v33);
  objc_destroyWeak(&v35);
  objc_destroyWeak(v37);

}

void sub_1007C7EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11, id *a12, id *a13, id *a14)
{
  id *v14;
  id *v15;
  id *v16;
  id *v17;
  id *v18;

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  _Unwind_Resume(a1);
}

void sub_1007C7F28()
{
  JUMPOUT(0x1007C7EF0);
}

void sub_1007C7F30()
{
  JUMPOUT(0x1007C7EF8);
}

void sub_1007C7F38()
{
  JUMPOUT(0x1007C7F00);
}

void sub_1007C7F40()
{
  JUMPOUT(0x1007C7F08);
}

void sub_1007C7F48()
{
  JUMPOUT(0x1007C7F10);
}

void sub_1007C7F50()
{
  JUMPOUT(0x1007C7F18);
}

void sub_1007C7F58(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addVisualizationSettings:", v3);

}

void sub_1007C7FA0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addLocationsSettings:", v3);

}

void sub_1007C7FE8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addRoutingSettings:", v3);

}

void sub_1007C8030(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addETAUpdatesSettings:", v3);

}

void sub_1007C8078(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addAudioSettings:", v3);

}

void sub_1007C80C0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addTransitSettings:", v3);

}

void sub_1007C8108(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addCustomRoutesSettings:", v3);

}

void sub_1007C8150(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addTimeToLeaveSettings:", v3);

}

void sub_1007C8198(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addNavigationServiceSettings:", v3);

}

void sub_1007C81E0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addPreloadingSettings:", v3);

}

void sub_1007C8228(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addThermalMitigationsSettings:", v3);

}

void sub_1007C8270(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;

  v3 = a2;
  if (qword_1014D56D0 != -1)
    dispatch_once(&qword_1014D56D0, &stru_1011BE940);
  if (byte_1014D56C8 != 1 || sub_1003A5954() || sub_1008315F4())
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1007C84CC;
    v15[3] = &unk_1011C1B08;
    objc_copyWeak(&v16, (id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_addNavigationRowWithTitle:section:handler:", CFSTR("Visual Features"), v3, v15);

    objc_destroyWeak(&v16);
  }
  v5 = (id *)(a1 + 32);
  v6 = objc_loadWeakRetained(v5);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007C8514;
  v13[3] = &unk_1011C1B08;
  objc_copyWeak(&v14, v5);
  objc_msgSend(v6, "_addNavigationRowWithTitle:section:handler:", CFSTR("Route Planning Refreshing"), v3, v13);

  v7 = objc_loadWeakRetained(v5);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1007C855C;
  v11[3] = &unk_1011C1B08;
  objc_copyWeak(&v12, v5);
  objc_msgSend(v7, "_addNavigationRowWithTitle:section:handler:", CFSTR("Mobility and Routing"), v3, v11);

  v8 = objc_loadWeakRetained(v5);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1007C85DC;
  v9[3] = &unk_1011C1B08;
  objc_copyWeak(&v10, v5);
  objc_msgSend(v8, "_addNavigationRowWithTitle:section:handler:", CFSTR("Parking"), v3, v9);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v14);

}

void sub_1007C8494(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007C84CC(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addVisualFeaturesSettings:", v3);

}

void sub_1007C8514(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addRoutePlanningRefreshingSettings:", v3);

}

void sub_1007C855C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;
  id v6;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addEVRoutingSettings:", v3);

  v5 = objc_loadWeakRetained(v2);
  objc_msgSend(v5, "_addLicensePlateRestrictionsSettings:", v3);

  v6 = objc_loadWeakRetained(v2);
  objc_msgSend(v6, "_addManeuverArrowSettings:", v3);

}

void sub_1007C85DC(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addParkingNavigationSettings:", v3);

}

void sub_1007C8624(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1007C870C;
  v6[3] = &unk_1011C1B08;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_addNavigationRowWithTitle:section:handler:", CFSTR("Traces and Simulation"), v3, v6);

  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Disable navigation restore when debugging"), MapsConfig_NavigationDisableRestoreWhenDebugging, off_1014B39C8);
  objc_destroyWeak(&v7);

}

void sub_1007C86F4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007C870C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addTracesAndSimulationSettings:", v3);

}

void sub_1007C8800(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "setTitle:", *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

void sub_1007C88A8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v7 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v7, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show Raw GPS Position"), CFSTR("NavigationShowRawGPSTrail"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v7, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show Matched Position"), CFSTR("NavigationShowMatchedLocationTrail"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v7, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Draw Preload Misses"), CFSTR("NavigationDrawPreloadMisses"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v7, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Draw Full Preload Status"), CFSTR("NavigationDrawPreloadStatus"));
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v7, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show Maneuver Points"), CFSTR("NavigationDrawManeuverPoints"));

}

void sub_1007C8968(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  MapsDebugTableSection *v11;

  v11 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("End of route"), MapsConfig_Navigation_VisualizeArrivalRegion_EndOfRoute, off_1014B3938);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Arrival points"), MapsConfig_Navigation_VisualizeArrivalRegion_ArrivalPoints, off_1014B3948);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("ISSUE_ARRIVAL"), MapsConfig_Navigation_VisualizeArrivalRegion_ISSUE_ARRIVAL, off_1014B3958);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("ISSUE_ARRIVAL_OFF_ROUTE"), MapsConfig_Navigation_VisualizeArrivalRegion_ISSUE_ARRIVAL_OFF_ROUTE, off_1014B3968);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("END_NAVIGATION_TIMEOUT"), MapsConfig_Navigation_VisualizeArrivalRegion_END_NAVIGATION_TIMEOUT, off_1014B3978);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("PRE_ARRIVAL_MODE"), MapsConfig_Navigation_VisualizeArrivalRegion_PRE_ARRIVAL_MODE, off_1014B3988);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("PARKING_SUGGEST_WALKING"), MapsConfig_Navigation_VisualizeArrivalRegion_PARKING_SUGGEST_WALKING, off_1014B3998);
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("INITIATE_APPROACHING"), MapsConfig_Navigation_VisualizeArrivalRegion_INITIATE_APPROACHING, off_1014B39A8);
  v10 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v11, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("PREPARE_TO_PARK"), MapsConfig_Navigation_VisualizeArrivalRegion_PREPARE_TO_PARK, off_1014B39B8);

}

void sub_1007C8B48(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Ignore Course Accuracy"), NavigationConfig_IgnoreCourseAccuracy[0], NavigationConfig_IgnoreCourseAccuracy[1]);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Use CoreLocation driving matched locations"), NavigationConfig_UseCLDrivingMapMatchedLocations[0], NavigationConfig_UseCLDrivingMapMatchedLocations[1]);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Use CoreLocation pedestrian matched locations"), NavigationConfig_UseCLPedestrianMapMatchedLocations[0], NavigationConfig_UseCLPedestrianMapMatchedLocations[1]);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Allow projection past maneuver"), GeoServicesConfig_NavigationAllowProjectingLocationPastManeuver[0], GeoServicesConfig_NavigationAllowProjectingLocationPastManeuver[1]);

}

void sub_1007C8BF8(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  MapsDebugTableSection *v5;

  v2 = NavigationConfig_LocationProjectionTimeSeconds[0];
  v3 = NavigationConfig_LocationProjectionTimeSeconds[1];
  v5 = a2;
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:](v5, "addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Projection time"), &stru_1011C7450, v2, v3, 0, -0.1, 10.0);
  -[MapsDebugTableSection setFooter:](v5, "setFooter:", CFSTR("Accounts for GPS delay by projecting locations into the future by a set amount of time."));

}

NSString *__cdecl sub_1007C8C74(id a1, float a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%0.1f seconds"), a2);
}

void sub_1007C8CA8(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  MapsDebugTableSection *v4;
  id v5;
  void *v6;
  id v7;

  v2 = GeoServicesConfig_ProbeCrumbsEnabled[0];
  v3 = GeoServicesConfig_ProbeCrumbsEnabled[1];
  v4 = a2;
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Historical Duration"), CFSTR("(seconds)"), 1, &stru_1011C7490, &stru_1011C74B0));
  objc_msgSend(v6, "setSubtitle:", CFSTR("max of 255 seconds"));
  v7 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v4, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Record every N locations"), 0, 1, &stru_1011C74D0, &stru_1011C74F0));

  objc_msgSend(v7, "setSubtitle:", CFSTR("default is 1 (every location)"));
  -[MapsDebugTableSection setFooter:](v4, "setFooter:", CFSTR("These settings are ignored if Probe Crumbs are disabled."));

}

NSString *__cdecl sub_1007C8D9C(id a1)
{
  unint64_t UInteger;
  uint64_t v2;
  void *v3;
  void *v4;

  if ((unint64_t)GEOConfigGetUInteger(GeoServicesConfig_ProbeCrumbDuration[0], GeoServicesConfig_ProbeCrumbDuration[1]) > 0xFE)UInteger = 255;
  else
    UInteger = GEOConfigGetUInteger(GeoServicesConfig_ProbeCrumbDuration[0], GeoServicesConfig_ProbeCrumbDuration[1]);
  if (UInteger <= 1)
    v2 = 1;
  else
    v2 = UInteger;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringValue"));

  return (NSString *)v4;
}

void sub_1007C8E10(id a1, NSString *a2)
{
  unint64_t v2;
  uint64_t v3;
  NSString *v4;

  v4 = a2;
  if ((unint64_t)-[NSString integerValue](v4, "integerValue") > 0xFE)
    v2 = 255;
  else
    v2 = -[NSString integerValue](v4, "integerValue");
  if (v2 <= 1)
    v3 = 1;
  else
    v3 = v2;
  GEOConfigSetUInteger(GeoServicesConfig_ProbeCrumbDuration[0], GeoServicesConfig_ProbeCrumbDuration[1], v3);

}

NSString *__cdecl sub_1007C8E68(id a1)
{
  unint64_t UInteger;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  UInteger = GEOConfigGetUInteger(GeoServicesConfig_ProbeCrumbFrequency[0], GeoServicesConfig_ProbeCrumbFrequency[1]);
  v2 = GEOConfigGetUInteger(GeoServicesConfig_ProbeCrumbDuration[0], GeoServicesConfig_ProbeCrumbDuration[1]);
  v3 = UInteger >= v2;
  if (UInteger >= v2)
    v4 = GeoServicesConfig_ProbeCrumbDuration;
  else
    v4 = GeoServicesConfig_ProbeCrumbFrequency;
  v5 = *v4;
  if (v3)
    v6 = &GeoServicesConfig_ProbeCrumbDuration[1];
  else
    v6 = &GeoServicesConfig_ProbeCrumbFrequency[1];
  v7 = GEOConfigGetUInteger(v5, *v6);
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringValue"));

  return (NSString *)v10;
}

void sub_1007C8F10(id a1, NSString *a2)
{
  unint64_t v2;
  unint64_t UInteger;
  uint64_t v4;
  NSString *v5;

  v5 = a2;
  v2 = -[NSString integerValue](v5, "integerValue");
  if (v2 >= GEOConfigGetUInteger(GeoServicesConfig_ProbeCrumbDuration[0], GeoServicesConfig_ProbeCrumbDuration[1]))
    UInteger = GEOConfigGetUInteger(GeoServicesConfig_ProbeCrumbDuration[0], GeoServicesConfig_ProbeCrumbDuration[1]);
  else
    UInteger = -[NSString integerValue](v5, "integerValue");
  if (UInteger <= 1)
    v4 = 1;
  else
    v4 = UInteger;
  GEOConfigSetUInteger(GeoServicesConfig_ProbeCrumbFrequency[0], GeoServicesConfig_ProbeCrumbFrequency[1], v4);

}

void sub_1007C90A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1007C90C8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Ignore Navigability"), GeoServicesConfig_OverrideNavigationEnabled[0], GeoServicesConfig_OverrideNavigationEnabled[1]);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Ignore Live Traffic"), CFSTR("NavigationDirectionsIgnoreLiveTraffic"));
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Always Show Traffic"), CFSTR("__internal__AlwaysShowRouteTraffic"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007C927C;
  v12[3] = &unk_1011C1B08;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_addNavigationRowWithTitle:section:handler:", CFSTR("Traffic Override"), v3, v12);

  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("New Arrival Logic"), GeoServicesConfig_ShouldUseServerArrivalParameters[0], GeoServicesConfig_ShouldUseServerArrivalParameters[1]);
  v9 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Junction View"), GeoServicesConfig_NavdShouldRequestJunctionView[0], GeoServicesConfig_NavdShouldRequestJunctionView[1]);
  v10 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Show Live Alternate Routes in Trench Mode"), NavigationConfig_NavigationShowLiveAlternateRoutesInTrenchMode[0], NavigationConfig_NavigationShowLiveAlternateRoutesInTrenchMode[1]);
  v11 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Request Routing Path Points"), GeoServicesConfig_RequestRoutingPathPoints[0], GeoServicesConfig_RequestRoutingPathPoints[1]);
  objc_destroyWeak(&v13);

}

void sub_1007C9264(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007C927C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_addTrafficOverrideSettings:", v3);

}

void sub_1007C92C4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("(EV) Min time for charging sign"), CFSTR("(seconds)"), 1, NavigationConfig_EVChargingMonitorMinimumTime[0], NavigationConfig_EVChargingMonitorMinimumTime[1]);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("(EV) Max time for charging sign"), CFSTR("(seconds)"), 1, NavigationConfig_EVChargingMonitorMaximumTime[0], NavigationConfig_EVChargingMonitorMaximumTime[1]);

}

void sub_1007C934C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyUInteger:changeHandler:](v5, "addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyUInteger:changeHandler:", CFSTR("MPR auto advance tendency"), CFSTR("%g%%"), 0, 100, NavigationConfig_MPRDepartureAutoAdvanceSensitivity[0], NavigationConfig_MPRDepartureAutoAdvanceSensitivity[1], 0);
  v3 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v5, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Auto-advance from arrival region"), &stru_1011C7550);
  v4 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v5, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Auto-advance without arrival region"), &stru_1011C75B0);

}

void sub_1007C93E4(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  MapsDebugValuesViewController *v4;

  v4 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", 0, &stru_1011C7570);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Settings"), &stru_1011C7590);

}

void sub_1007C9440(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), NavigationConfig_MPRDepartureAutoAdvanceUsingArrivalRegion[0], NavigationConfig_MPRDepartureAutoAdvanceUsingArrivalRegion[1]);
}

void sub_1007C9474(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](a2, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Number of location to backtrace"), &stru_1011EB268, 1, NavigationConfig_MPRDepartureNumLocationsForArrivalRegion[0], NavigationConfig_MPRDepartureNumLocationsForArrivalRegion[1]);
}

void sub_1007C94B4(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  MapsDebugValuesViewController *v4;

  v4 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", 0, &stru_1011C75D0);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v4, "addSectionWithTitle:content:", CFSTR("Settings"), &stru_1011C75F0);

}

void sub_1007C9510(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), NavigationConfig_MPRDepartureAutoAdvanceWithNoArrivalRegion[0], NavigationConfig_MPRDepartureAutoAdvanceWithNoArrivalRegion[1]);
}

void sub_1007C9544(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v5, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum time at waypoint"), CFSTR("(seconds)"), 1, NavigationConfig_MPRDepartureTimeAtWaypoint[0], NavigationConfig_MPRDepartureTimeAtWaypoint[1]);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v5, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum distance deviated from waypoint"), CFSTR("(meters)"), 1, NavigationConfig_MPRDepartureDistanceToCenter[0], NavigationConfig_MPRDepartureDistanceToCenter[1]);
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v5, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Distance from waypoint arrival points"), CFSTR("(meters)"), 1, NavigationConfig_MPRDepartureDistanceFromWaypointPoints[0], NavigationConfig_MPRDepartureDistanceFromWaypointPoints[1]);

}

void sub_1007C95FC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Main Route"), NavigationConfig_LogRoutes_RoutePreview_MainRoute[0], NavigationConfig_LogRoutes_RoutePreview_MainRoute[1]);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Alternate Routes"), NavigationConfig_LogRoutes_RoutePreview_AlternateRoutes[0], NavigationConfig_LogRoutes_RoutePreview_AlternateRoutes[1]);

}

void sub_1007C9664(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Show Internal Routing Errors"), MapsConfig_DisplayInternalRoutingErrors, off_1014B3DB8);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Show Radar Prompt for Routing Service Errors"), NavigationConfig_ShouldShowRadarPromptForRoutingServiceErrors[0], NavigationConfig_ShouldShowRadarPromptForRoutingServiceErrors[1]);

}

void sub_1007C972C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](a2, "addCheckmarkRowsGroupForConfigKey:content:", GeoServicesConfig_NavdDebugTrafficOnRouteColor[0], GeoServicesConfig_NavdDebugTrafficOnRouteColor[1], &stru_1011C7670);
}

void sub_1007C9760(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugCheckmarkRowsGroup *v7;

  v7 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("None"), &off_10126EE30);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Green"), &off_10126EE48);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Yellow"), &off_10126EE60);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Red"), &off_10126EE78);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Black"), &off_10126EE90);

}

void sub_1007C9820(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](v5, "addCheckmarkRowsGroupForConfigKey:content:", GeoServicesConfig_NavdDebugTrafficOnRouteSection[0], GeoServicesConfig_NavdDebugTrafficOnRouteSection[1], &stru_1011C76B0);
  v3 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyUInteger:changeHandler:](v5, "addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyUInteger:changeHandler:", CFSTR("Start Offset"), CFSTR("%g%%"), 0, 100, GeoServicesConfig_NavdDebugTrafficOnRouteStart[0], GeoServicesConfig_NavdDebugTrafficOnRouteStart[1], 0);
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyUInteger:changeHandler:](v5, "addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyUInteger:changeHandler:", CFSTR("End Offset"), CFSTR("%g%%"), 0, 100, GeoServicesConfig_NavdDebugTrafficOnRouteEnd[0], GeoServicesConfig_NavdDebugTrafficOnRouteEnd[1], 0);

}

void sub_1007C98DC(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Default"), &off_10126EE90);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Entire Route"), &off_10126EE78);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Longest Step"), &off_10126EE60);

}

void sub_1007C9988(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v6, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Update Interval"), CFSTR("(seconds)"), 1, &stru_1011C76F0, &stru_1011C7710);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Initial Delay (defaults to above if zero)"), CFSTR("(seconds)"), 1, NavigationConfig_InitialETARequestDelay[0], NavigationConfig_InitialETARequestDelay[1]);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Failure audio alert"), NavigationConfig_ETAResponseFailureAlert[0], NavigationConfig_ETAResponseFailureAlert[1]);
  v5 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v6, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Dodgeball"), &stru_1011C7730);

}

NSString *__cdecl sub_1007C9A58(id a1)
{
  double Double;
  double v2;
  void *v3;
  void *v4;

  Double = GEOConfigGetDouble(NavigationConfig_ETAUpdateInterval[0], NavigationConfig_ETAUpdateInterval[1]);
  v2 = 5.0;
  if (Double > 5.0)
    v2 = GEOConfigGetDouble(NavigationConfig_ETAUpdateInterval[0], NavigationConfig_ETAUpdateInterval[1]);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringValue"));

  return (NSString *)v4;
}

void sub_1007C9AC4(id a1, NSString *a2)
{
  double v2;
  double v3;
  double v4;
  NSString *v5;

  v5 = a2;
  -[NSString doubleValue](v5, "doubleValue");
  v3 = v2;
  v4 = 5.0;
  if (v3 > 5.0)
    -[NSString doubleValue](v5, "doubleValue");
  GEOConfigSetDouble(NavigationConfig_ETAUpdateInterval[0], NavigationConfig_ETAUpdateInterval[1], v4);

}

void sub_1007C9B14(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugValuesViewController *v5;

  v5 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", 0, &stru_1011C7750);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Options"), &stru_1011C7770);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Dodgeballs With Reroute"), &stru_1011C79F0);

}

void sub_1007C9B90(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), NavigationConfig_EnableDodgeball[0], NavigationConfig_EnableDodgeball[1]);
}

void sub_1007C9BC4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Queuing & Trigger Ranges"), GeoServicesConfig_ETATrafficBannerRequestQueuing[0], GeoServicesConfig_ETATrafficBannerRequestQueuing[1]);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Request Queuing in Directions Requests"), GeoServicesConfig_DirectionsTrafficBannerRequestQueuing[0], GeoServicesConfig_DirectionsTrafficBannerRequestQueuing[1]);
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyDouble:changeHandler:](v8, "addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Incident distance percentage to drop dodgeball"), CFSTR("%g%%"), NavigationConfig_Dodgeball_DropDodgeballDistanceRatio[0], NavigationConfig_Dodgeball_DropDodgeballDistanceRatio[1], 0, 0.0, 1.0);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Override priority field"), NavigationConfig_Dodgeball_OverridePriorityField[0], NavigationConfig_Dodgeball_OverridePriorityField[1]);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Priority override (if enabled above)"), CFSTR("0"), 1, NavigationConfig_Dodgeball_OverridePriorityFieldValue[0], NavigationConfig_Dodgeball_OverridePriorityFieldValue[1]);
  v7 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v8, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Fake Dodgeball"), &stru_1011C7790);

}

void sub_1007C9CD8(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugValuesViewController *v5;

  v5 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Create Fake Dodgeball for ETAU"), &stru_1011C77B0);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", CFSTR("Create Fake Dodgeball for Directions"), &stru_1011C77F0);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v5, "addSectionWithTitle:content:", 0, &stru_1011C7830);

}

void sub_1007C9D54(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  MapsDebugTableSection *v5;

  v2 = NavigationConfig_Dodgeball_ETAUFakeIncidentAlert[0];
  v3 = NavigationConfig_Dodgeball_ETAUFakeIncidentAlert[1];
  v5 = a2;
  v4 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](v5, "addCheckmarkRowsGroupForConfigKey:content:", v2, v3, &stru_1011C77D0);
  -[MapsDebugTableSection setFooter:](v5, "setFooter:", CFSTR("Fake dodgeballs work by injecting fields into an ETAU response. In order to see them, a normal ETAU request needs to be triggered."));

}

void sub_1007C9DB8(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugCheckmarkRowsGroup *v9;

  v9 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("None"), &off_10126EE90);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Blockage"), &off_10126EE78);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Incident"), &off_10126EE60);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Incident with Reroute"), &off_10126EE48);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Warning (ex: EV out of range)"), &off_10126EEA8);
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Restricted Zone"), &off_10126EEC0);
  v8 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Silent Update"), &off_10126EED8);

}

void sub_1007C9EB8(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  MapsDebugTableSection *v5;

  v2 = NavigationConfig_Dodgeball_DirectionsFakeIncidentAlert[0];
  v3 = NavigationConfig_Dodgeball_DirectionsFakeIncidentAlert[1];
  v5 = a2;
  v4 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](v5, "addCheckmarkRowsGroupForConfigKey:content:", v2, v3, &stru_1011C7810);
  -[MapsDebugTableSection setFooter:](v5, "setFooter:", CFSTR("Fake dodgeballs work by injecting fields into an Directions response. In order to see them, a normal Directions request needs to be triggered."));

}

void sub_1007C9F1C(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugCheckmarkRowsGroup *v9;

  v9 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("None"), &off_10126EE90);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Blockage"), &off_10126EE78);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Incident"), &off_10126EE60);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Incident with Reroute"), &off_10126EE48);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Warning (ex: EV out of range)"), &off_10126EEA8);
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Restricted Zone"), &off_10126EEC0);
  v8 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v9, "addRowWithTitle:value:", CFSTR("Silent Update"), &off_10126EED8);

}

void sub_1007CA01C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v7 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Simulate voting buttons (Incident & Blockage)"), NavigationConfig_Dodgeball_FakeIncidentSimulateVotingButtons[0], NavigationConfig_Dodgeball_FakeIncidentSimulateVotingButtons[1]);
  v3 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v7, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Voting Button Style"), &stru_1011C7850);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Use trigger ranges"), NavigationConfig_Dodgeball_FakeIncidentUseTriggerRanges[0], NavigationConfig_Dodgeball_FakeIncidentUseTriggerRanges[1]);
  v5 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v7, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("ETAU trigger range/point options"), &stru_1011C78B0);
  v6 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v7, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Directions trigger range/point options"), &stru_1011C7950);

}

void sub_1007CA0E4(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", CFSTR("Button styles"), &stru_1011C7870);
}

void sub_1007CA114(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](a2, "addCheckmarkRowsGroupForConfigKey:content:", NavigationConfig_Dodgeball_FakeIncidentVotingButtonDisplay[0], NavigationConfig_Dodgeball_FakeIncidentVotingButtonDisplay[1], &stru_1011C7890);
}

void sub_1007CA148(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Unknown"), &off_10126EEF0);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Show by default"), &off_10126EF08);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Show after user interaction"), &off_10126EF20);

}

void sub_1007CA1C8(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugValuesViewController *v6;

  v6 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Trigger range"), &stru_1011C78D0);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Show trigger point"), &stru_1011C78F0);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Hide trigger point"), &stru_1011C7910);
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Progress bar"), &stru_1011C7930);

}

void sub_1007CA268(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v2 = NavigationConfig_Dodgeball_ETAU_FakeIncidentTriggerRangeDisplayTime[0];
  v3 = NavigationConfig_Dodgeball_ETAU_FakeIncidentTriggerRangeDisplayTime[1];
  v8 = a2;
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Display time"), CFSTR("20"), 1, v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Min display time"), CFSTR("0"), 1, NavigationConfig_Dodgeball_ETAU_FakeIncidentTriggerRangeMinDisplayTime[0], NavigationConfig_Dodgeball_ETAU_FakeIncidentTriggerRangeMinDisplayTime[1]);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Priority"), CFSTR("0"), 1, NavigationConfig_Dodgeball_ETAU_FakeIncidentTriggerRangePriority[0], NavigationConfig_Dodgeball_ETAU_FakeIncidentTriggerRangePriority[1]);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Persist across updates"), NavigationConfig_Dodgeball_ETAU_FakeIncidentPersistAcrossUpdates[0], NavigationConfig_Dodgeball_ETAU_FakeIncidentPersistAcrossUpdates[1]);
  -[MapsDebugTableSection setFooter:](v8, "setFooter:", CFSTR("The dodgeball will be displayed on the screen for a maximum of <Display time> seconds. If a higher priority dodgeball overlaps with the fake dodgeball, the fake dodgeball will stay on the screen for at least <Min display time> seconds before the new dodgeball takes precedence."));

}

void sub_1007CA35C(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v2 = NavigationConfig_Dodgeball_ETAU_FakeIncidentShowTriggerPointDistanceOffset[0];
  v3 = NavigationConfig_Dodgeball_ETAU_FakeIncidentShowTriggerPointDistanceOffset[1];
  v6 = a2;
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Show at distance offset"), CFSTR("(meters)"), 1, v2, v3);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Allow truncating"), NavigationConfig_Dodgeball_ETAU_FakeIncidentShowTriggerPointAllowTruncating[0], NavigationConfig_Dodgeball_ETAU_FakeIncidentShowTriggerPointAllowTruncating[1]);
  -[MapsDebugTableSection setFooter:](v6, "setFooter:", CFSTR("The distance offset is calculated from the location on the route at which the etau request is created."));

}

void sub_1007CA3F0(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v2 = NavigationConfig_Dodgeball_ETAU_FakeIncidentTriggerRangeUseHideAtPoint[0];
  v3 = NavigationConfig_Dodgeball_ETAU_FakeIncidentTriggerRangeUseHideAtPoint[1];
  v7 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Use hide point"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v7, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Hide at distance offset"), CFSTR("(meters)"), 1, NavigationConfig_Dodgeball_ETAU_FakeIncidentHideTriggerPointDistanceOffset[0], NavigationConfig_Dodgeball_ETAU_FakeIncidentHideTriggerPointDistanceOffset[1]);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Allow truncating"), NavigationConfig_Dodgeball_ETAU_FakeIncidentHideTriggerPointAllowTruncating[0], NavigationConfig_Dodgeball_ETAU_FakeIncidentHideTriggerPointAllowTruncating[1]);
  -[MapsDebugTableSection setFooter:](v7, "setFooter:", CFSTR("The distance offset is calculated from the location on the route at which the etau request is created. The dodgeball will be hidden after <Display time> if it occurs before reaching the hide distance offset. If <use hide point> is disabled, the dodgeball will remain on the screen for exactly the number of seconds specified by <Display time> in the trigger range options."));

}

void sub_1007CA4A8(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v2 = NavigationConfig_Dodgeball_ETAU_FakeIncidentUseProgressBar[0];
  v3 = NavigationConfig_Dodgeball_ETAU_FakeIncidentUseProgressBar[1];
  v7 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v7, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Show at distance offset"), CFSTR("(meters)"), 1, NavigationConfig_Dodgeball_ETAU_FakeIncidentProgressBarDistanceOffset[0], NavigationConfig_Dodgeball_ETAU_FakeIncidentProgressBarDistanceOffset[1]);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v7, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Display time (seconds)"), CFSTR("15"), 0, NavigationConfig_Dodgeball_ETAU_FakeIncidentProgressBarDurationSeconds[0], NavigationConfig_Dodgeball_ETAU_FakeIncidentProgressBarDurationSeconds[1]);
  -[MapsDebugTableSection setFooter:](v7, "setFooter:", CFSTR("The progress bar is shown at the distance offset above and counts down using the display time."));

}

void sub_1007CA56C(id a1, MapsDebugValuesViewController *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugValuesViewController *v6;

  v6 = a2;
  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Trigger range"), &stru_1011C7970);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Show trigger point"), &stru_1011C7990);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Hide trigger point"), &stru_1011C79B0);
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v6, "addSectionWithTitle:content:", CFSTR("Progress bar"), &stru_1011C79D0);

}

void sub_1007CA60C(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v2 = NavigationConfig_Dodgeball_Directions_FakeIncidentTriggerRangeDisplayTime[0];
  v3 = NavigationConfig_Dodgeball_Directions_FakeIncidentTriggerRangeDisplayTime[1];
  v8 = a2;
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Display time"), CFSTR("20"), 1, v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Min display time"), CFSTR("0"), 1, NavigationConfig_Dodgeball_Directions_FakeIncidentTriggerRangeMinDisplayTime[0], NavigationConfig_Dodgeball_Directions_FakeIncidentTriggerRangeMinDisplayTime[1]);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Priority"), CFSTR("0"), 1, NavigationConfig_Dodgeball_Directions_FakeIncidentTriggerRangePriority[0], NavigationConfig_Dodgeball_Directions_FakeIncidentTriggerRangePriority[1]);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Persist across updates"), NavigationConfig_Dodgeball_Directions_FakeIncidentPersistAcrossUpdates[0], NavigationConfig_Dodgeball_Directions_FakeIncidentPersistAcrossUpdates[1]);
  -[MapsDebugTableSection setFooter:](v8, "setFooter:", CFSTR("The dodgeball will be displayed on the screen for a maximum of <Display time> seconds. If a higher priority dodgeball overlaps with the fake dodgeball, the fake dodgeball will stay on the screen for at least <Min display time> seconds before the new dodgeball takes precedence."));

}

void sub_1007CA700(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v2 = NavigationConfig_Dodgeball_Directions_FakeIncidentShowTriggerPointDistanceOffset[0];
  v3 = NavigationConfig_Dodgeball_Directions_FakeIncidentShowTriggerPointDistanceOffset[1];
  v6 = a2;
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Show at distance offset"), CFSTR("(meters)"), 1, v2, v3);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Allow truncating"), NavigationConfig_Dodgeball_Directions_FakeIncidentShowTriggerPointAllowTruncating[0], NavigationConfig_Dodgeball_Directions_FakeIncidentShowTriggerPointAllowTruncating[1]);
  -[MapsDebugTableSection setFooter:](v6, "setFooter:", CFSTR("The distance offset is calculated from the location on the route at which the directions request is created."));

}

void sub_1007CA794(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v2 = NavigationConfig_Dodgeball_Directions_FakeIncidentTriggerRangeUseHideAtPoint[0];
  v3 = NavigationConfig_Dodgeball_Directions_FakeIncidentTriggerRangeUseHideAtPoint[1];
  v7 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Use hide point"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v7, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Hide at distance offset"), CFSTR("(meters)"), 1, NavigationConfig_Dodgeball_Directions_FakeIncidentHideTriggerPointDistanceOffset[0], NavigationConfig_Dodgeball_Directions_FakeIncidentHideTriggerPointDistanceOffset[1]);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Allow truncating"), NavigationConfig_Dodgeball_Directions_FakeIncidentHideTriggerPointAllowTruncating[0], NavigationConfig_Dodgeball_Directions_FakeIncidentHideTriggerPointAllowTruncating[1]);
  -[MapsDebugTableSection setFooter:](v7, "setFooter:", CFSTR("The distance offset is calculated from the location on the route at which the etau request is created. The dodgeball will be hidden after <Display time> if it occurs before reaching the hide distance offset. If <use hide point> is disabled, the dodgeball will remain on the screen for exactly the number of seconds specified by <Display time> in the trigger range options."));

}

void sub_1007CA84C(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v2 = NavigationConfig_Dodgeball_Directions_FakeIncidentUseProgressBar[0];
  v3 = NavigationConfig_Dodgeball_Directions_FakeIncidentUseProgressBar[1];
  v7 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v7, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Show at distance offset"), CFSTR("(meters)"), 1, NavigationConfig_Dodgeball_Directions_FakeIncidentProgressBarDistanceOffset[0], NavigationConfig_Dodgeball_Directions_FakeIncidentProgressBarDistanceOffset[1]);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v7, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Display time (seconds)"), CFSTR("15"), 0, NavigationConfig_Dodgeball_Directions_FakeIncidentProgressBarDurationSeconds[0], NavigationConfig_Dodgeball_Directions_FakeIncidentProgressBarDurationSeconds[1]);
  -[MapsDebugTableSection setFooter:](v7, "setFooter:", CFSTR("The progress bar is shown at the distance offset above and counts down using the display time."));

}

void sub_1007CA910(id a1, MapsDebugTableSection *a2)
{
  id v2;
  double v3;
  double v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Automatically accept faster routes"), GeoServicesConfig_NavdShouldAutomaticallyRerouteTrafficIncidents[0], GeoServicesConfig_NavdShouldAutomaticallyRerouteTrafficIncidents[1]);
  LODWORD(v3) = 1114636288;
  LODWORD(v4) = 0;
  v5 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:](v6, "addSliderRowWithTitle:subtitleStringFormat:min:max:get:set:", CFSTR("Reroute Alert Duration"), CFSTR("%1.f sec"), &stru_1011C7A10, &stru_1011C7A30, v4, v3);

}

float sub_1007CA990(id a1)
{
  return GEOConfigGetDouble(GeoServicesConfig_NavdAutomaticTrafficIncidentRerouteDelay[0], GeoServicesConfig_NavdAutomaticTrafficIncidentRerouteDelay[1]);
}

void sub_1007CA9B4(id a1, float a2)
{
  GEOConfigSetDouble(GeoServicesConfig_NavdAutomaticTrafficIncidentRerouteDelay[0], GeoServicesConfig_NavdAutomaticTrafficIncidentRerouteDelay[1], a2);
}

void sub_1007CAA24(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  float Double;
  double v8;
  float v9;
  id v10;
  id v11;
  MapsDebugTableSection *v12;

  v12 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v12, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Beep Before Instruction"), NavigationConfig_SpokenGuidanceChimeBeforeInstruction[0], NavigationConfig_SpokenGuidanceChimeBeforeInstruction[1]);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v12, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Mute Voice"), NavigationConfig_NavigationDebugPanelMuteVoice[0], NavigationConfig_NavigationDebugPanelMuteVoice[1]);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v12, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Disable Server TTS"), NavigationConfig_NavigationDisableServerTTS[0], NavigationConfig_NavigationDisableServerTTS[1]);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v12, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Ding instead of uttering"), NavigationConfig_NavigationDingInstead[0], NavigationConfig_NavigationDingInstead[1]);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v12, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Use debug voice volume"), NavigationConfig_ShouldUseSpokenGuidanceDebugVolume[0], NavigationConfig_ShouldUseSpokenGuidanceDebugVolume[1]);
  Double = GEOConfigGetDouble(NavigationConfig_SpokenGuidanceMinVolume[0], NavigationConfig_SpokenGuidanceMinVolume[1]);
  v8 = Double;
  v9 = GEOConfigGetDouble(NavigationConfig_SpokenGuidanceMaxVolume[0], NavigationConfig_SpokenGuidanceMaxVolume[1]);
  v10 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyDouble:changeHandler:](v12, "addSliderRowWithTitle:subtitleStringFormat:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Debug voice volume"), CFSTR("%.2f"), NavigationConfig_SpokenGuidanceDebugVolume[0], NavigationConfig_SpokenGuidanceDebugVolume[1], 0, v8, v9);
  v11 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v12, "addButtonRowWithTitle:action:", CFSTR("Repeat last instruction"), &stru_1011C7A70);

}

void sub_1007CAB84(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v1, "repeatCurrentGuidance:", &stru_1011C7A90);

}

void sub_1007CABC4(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Multilingual Phonetics"), MapsConfig_DebugNavigationMultilingualPhonetics, off_1014B2D98);
}

void sub_1007CAC24(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Snap to transit lines"), CFSTR("NavigationSnapToTransitLines"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Include realtime updates"), NavigationConfig_DebugNavigationIncludeRealtimeUpdates[0], NavigationConfig_DebugNavigationIncludeRealtimeUpdates[1]);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force weak signal strength notifications"), NavigationConfig_TransitMockWeakSignalNotifications[0], NavigationConfig_TransitMockWeakSignalNotifications[1]);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable weak signal notifications"), CFSTR("NavigationEnableWeakLocationNotification"));
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Frame vehicles for manually-selected step"), CFSTR("NavigationTransitFrameVehiclePositionsForSelectedStep"));
  v7 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum location accuracy for distance to station"), CFSTR("(meters)"), 0, GeoServicesConfig_NavdTransitMinimumLocationAccuracyForStationEdgeIntersection[0], GeoServicesConfig_NavdTransitMinimumLocationAccuracyForStationEdgeIntersection[1]);

}

void sub_1007CAD8C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Allow mid-route start"), NavigationConfig_PreNavigation_CustomRoute_AllowMidRouteStart[0], NavigationConfig_PreNavigation_CustomRoute_AllowMidRouteStart[1]);
}

void sub_1007CADC0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:](v6, "addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Mid-route start distance threshold"), &stru_1011C7B30, NavigationConfig_PreNavigation_CustomRoute_MidRouteStartDistanceThreshold[0], NavigationConfig_PreNavigation_CustomRoute_MidRouteStartDistanceThreshold[1], 0, 0.0, 500.0);
  v3 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:](v6, "addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Reroute distance threshold"), &stru_1011C7B30, NavigationConfig_LocationTracking_Walking_CustomRoute_RerouteDistance[0], NavigationConfig_LocationTracking_Walking_CustomRoute_RerouteDistance[1], 0, 0.0, 500.0);
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:](v6, "addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Reroute distance threshold (before on route)"), &stru_1011C7B30, NavigationConfig_LocationTracking_Walking_CustomRoute_RerouteDistanceBeforeOnRoute[0], NavigationConfig_LocationTracking_Walking_CustomRoute_RerouteDistanceBeforeOnRoute[1], 0, 0.0, 500.0);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Max anchor points"), 0, 1, NavigationConfig_PreNavigation_CustomRoute_MaxNumberOfAnchors[0], NavigationConfig_PreNavigation_CustomRoute_MaxNumberOfAnchors[1]);

}

NSString *__cdecl sub_1007CAEC8(id a1, float a2)
{
  _QWORD *v2;

  v2 = &qword_100E39DB8[73];
  LODWORD(v2) = llround(a2 * 3.2808399);
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d meters (%d feet)"), (int)a2, v2);
}

void sub_1007CAF3C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Alert on ETA Updates"), GeoServicesConfig_TTLETADebugAlert[0], GeoServicesConfig_TTLETADebugAlert[1]);
}

void sub_1007CAF9C(id a1, MapsDebugTableSection *a2)
{
  MapsDebugTableSection *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v2, "addSwitchRowWithTitle:get:set:", CFSTR("Run navigation in Maps process"), &stru_1011C7B90, &stru_1011C7BB0));
  objc_msgSend(v3, "setSubtitle:", CFSTR("If off, nav will run in a daemon. Needs restart"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Automatically End On Arrival"), NavigationConfig_AutomaticallyEndOnArrival[0], NavigationConfig_AutomaticallyEndOnArrival[1]);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Automatically end on vehicle disconnect after arrival"), NavigationConfig_AutomaticallyEndOnVehicleDisconnectAfterArrival[0], NavigationConfig_AutomaticallyEndOnVehicleDisconnectAfterArrival[1]);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable transport mode switching during navigation"), NavigationConfig_EnableNavigationTransportModeSwitching[0], NavigationConfig_EnableNavigationTransportModeSwitching[1]);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v2, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show interface desync alert"), CFSTR("NavigationShowInterfaceDesyncAlert"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:](v2, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Displayed Navigation Safety Warning"), CFSTR("HasShownNavModeAdvisory2020"), 0, &stru_1011C7BD0));

  objc_msgSend(v8, "setSubtitle:", CFSTR("You need to restart Maps for the safety warning to reappear. This setting is also synced to Watch."));
  v9 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:](v2, "addSwitchRowWithTitle:defaultsKey:switchOnStateIfUnset:changeHandler:", CFSTR("Displayed Custom Navigation Safety Warning"), CFSTR("HasShownCustomNavModeAdvisoryKey"), 0, &stru_1011C7BF0));

  objc_msgSend(v9, "setSubtitle:", CFSTR("You need to restart Maps for the safety warning to reappear. This setting is also synced to Watch."));
}

BOOL sub_1007CB110(id a1)
{
  return GEOConfigGetBOOL(GeoServicesConfig_NavdUseDaemonToRunNavigation[0], GeoServicesConfig_NavdUseDaemonToRunNavigation[1]) ^ 1;
}

void sub_1007CB134(id a1, BOOL a2)
{
  GEOConfigSetBOOL(GeoServicesConfig_NavdUseDaemonToRunNavigation[0], GeoServicesConfig_NavdUseDaemonToRunNavigation[1], !a2);
}

void sub_1007CB148(id a1, BOOL a2)
{
  void *v2;
  NPSManager *v3;

  v3 = objc_opt_new(NPSManager);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", CFSTR("HasShownNavModeAdvisory2020")));
  -[NPSManager synchronizeUserDefaultsDomain:keys:container:](v3, "synchronizeUserDefaultsDomain:keys:container:", CFSTR("com.apple.Maps"), v2, CFSTR("com.apple.Maps"));

}

void sub_1007CB1B4(id a1, BOOL a2)
{
  void *v2;
  NPSManager *v3;

  v3 = objc_opt_new(NPSManager);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", CFSTR("HasShownCustomNavModeAdvisoryKey")));
  -[NPSManager synchronizeUserDefaultsDomain:keys:container:](v3, "synchronizeUserDefaultsDomain:keys:container:", CFSTR("com.apple.Maps"), v2, CFSTR("com.apple.Maps"));

}

void sub_1007CB278(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Step Size"), CFSTR("meters"), 1, GeoServicesConfig_StepSizeInMeters[0], GeoServicesConfig_StepSizeInMeters[1]);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Maneuver Radius"), CFSTR("meters"), 1, GeoServicesConfig_ManeuverSizeInMeters[0], GeoServicesConfig_ManeuverSizeInMeters[1]);

}

void sub_1007CB300(id a1, MapsDebugTableSection *a2)
{
  MapsDebugTableSection *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t BOOL;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  v2 = a2;
  v8 = 0;
  v9 = &v8;
  v10 = 0x3032000000;
  v11 = sub_1007CB434;
  v12 = sub_1007CB444;
  v13 = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1007CB44C;
  v7[3] = &unk_1011AEF80;
  v7[4] = &v8;
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v2, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Draw debug overlay"), MapsConfig_NavPreloadDebugOverlayEnabled, off_1014B3E18, 0, v7);
  v4 = objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Draw all tiles"), MapsConfig_NavPreloadDebugOverlayShowAllTiles, off_1014B3E28));
  v5 = (void *)v9[5];
  v9[5] = v4;

  BOOL = GEOConfigGetBOOL(MapsConfig_NavPreloadDebugOverlayEnabled, off_1014B3E18);
  objc_msgSend((id)v9[5], "setEnabled:", BOOL);
  -[MapsDebugTableSection setFooter:](v2, "setFooter:", CFSTR("By default, the debug overlay only draws tiles at z=15, which is useful for understanding the areas the preloader has loaded. Enabling \"Draw all tiles\" will draw every tile loaded by the preloader, which is generally too much information to understand visually."));
  _Block_object_dispose(&v8, 8);

}

void sub_1007CB41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007CB434(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1007CB444(uint64_t a1)
{

}

id sub_1007CB44C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setEnabled:", a2);
}

void sub_1007CB678(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1007CB70C;
  v9[3] = &unk_1011B4BC0;
  v10 = v5;
  v7 = v5;
  v8 = objc_msgSend(v6, "addSectionWithTitle:content:", a2, v9);

}

id sub_1007CB70C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addCheckmarkRowsGroupWithContent:defaultsKey:checkedRowValueIfUnset:changeHandler:", &stru_1011C7C50, *(_QWORD *)(a1 + 32), CFSTR("Disable"), &stru_1011C7C70);
}

void sub_1007CB748(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugCheckmarkRowsGroup *v8;

  v8 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("Disable"), CFSTR("Disable"));
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("10"), CFSTR("10"));
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("20"), CFSTR("20"));
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("30"), CFSTR("30"));
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("40"), CFSTR("40"));
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("Enable"), CFSTR("Enable"));

}

id sub_1007CB814(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", *(_QWORD *)(a1 + 32), CFSTR("0 - 50+"), 1, MapsConfig_LockscreenThermalMitigationThreshold, off_1014B5128);
}

void sub_1007CBB10(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 96));
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_1007CBB68(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t String;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;

  v3 = a2;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1007CBD60;
  v17[3] = &unk_1011AD260;
  objc_copyWeak(&v18, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Disable all TTR imagery"), v17);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable session recording"), CFSTR("MapsARSessionRecordingEnabledKey"));
  v6 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Replay mode"), &stru_1011C7C90);
  String = GEOConfigGetString(MapsConfig_MapsARSessionPlaybackFilePathKey, off_1014B55D8);
  v8 = (void *)objc_claimAutoreleasedReturnValue(String);
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastPathComponent"));
  v10 = (void *)v9;
  if (v9)
    v11 = (const __CFString *)v9;
  else
    v11 = CFSTR("Recording playback");
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1007CC410;
  v14[3] = &unk_1011AD728;
  objc_copyWeak(&v15, (id *)(a1 + 40));
  objc_copyWeak(&v16, (id *)(a1 + 32));
  v12 = objc_msgSend(v3, "addButtonRowWithTitle:action:", v11, v14);

  v13 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Loop replay forever"), CFSTR("MapsARSessionPlaybackLoopKey"));
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v18);

}

void sub_1007CBD2C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007CBD60(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  GEOConfigSetBOOL(MapsConfig_VLTraceRecordingEnabled, off_1014B3698, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setBool:forKey:", 0, CFSTR("MapsARSessionRecordingEnabledKey"));

  GEOConfigSetBOOL(MapsConfig_EnableTapToRadarScreenshotAttachmentProvider, off_1014B4BB8, 0);
  GEOConfigSetBOOL(MapsConfig_EnableTapToRadarDebugViewFramesScreenshotAttachmentProvider, off_1014B4BC8, 0);
  GEOConfigSetBOOL(MapsConfig_EnableTapToRadarDebugChromeLayoutGuidesScreenshotAttachmentProvider, off_1014B4EB8, 0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1007CBE10(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  id location;

  v2 = a2;
  objc_initWeak(&location, v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007CBED0;
  v4[3] = &unk_1011AEAC8;
  objc_copyWeak(&v5, &location);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Replay modes"), v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);

}

void sub_1007CBEB4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1007CBED0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1007CC118;
  v14[3] = &unk_1011AD4F0;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Realtime"), &stru_1011C7CB0, v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007CC1E8;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Deterministic"), &stru_1011C7CD0, v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1007CC2B8;
  v10[3] = &unk_1011AD4F0;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Deterministic Limit Frame Rate"), &stru_1011C7CF0, v10);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1007CC388;
  v8[3] = &unk_1011AD4F0;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Manual"), &stru_1011C7D10, v8);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);

}

void sub_1007CC08C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007CC0D0(id a1)
{
  void *v1;
  BOOL v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "integerForKey:", CFSTR("MapsARSessionPlaybackModeKey")) == 0;

  return v2;
}

void sub_1007CC118(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = v4;
  if (a2)
    objc_msgSend(v4, "setInteger:forKey:", 0, CFSTR("MapsARSessionPlaybackModeKey"));
  else
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("MapsARSessionPlaybackModeKey"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1007CC1A0(id a1)
{
  void *v1;
  BOOL v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "integerForKey:", CFSTR("MapsARSessionPlaybackModeKey")) == (id)1;

  return v2;
}

void sub_1007CC1E8(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = v4;
  if (a2)
    objc_msgSend(v4, "setInteger:forKey:", 1, CFSTR("MapsARSessionPlaybackModeKey"));
  else
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("MapsARSessionPlaybackModeKey"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1007CC270(id a1)
{
  void *v1;
  BOOL v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "integerForKey:", CFSTR("MapsARSessionPlaybackModeKey")) == (id)2;

  return v2;
}

void sub_1007CC2B8(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = v4;
  if (a2)
    objc_msgSend(v4, "setInteger:forKey:", 2, CFSTR("MapsARSessionPlaybackModeKey"));
  else
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("MapsARSessionPlaybackModeKey"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1007CC340(id a1)
{
  void *v1;
  BOOL v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "integerForKey:", CFSTR("MapsARSessionPlaybackModeKey")) == (id)3;

  return v2;
}

void sub_1007CC388(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = v4;
  if (a2)
    objc_msgSend(v4, "setInteger:forKey:", 3, CFSTR("MapsARSessionPlaybackModeKey"));
  else
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("MapsARSessionPlaybackModeKey"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1007CC410(uint64_t a1)
{
  UIImagePickerController *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;

  v2 = objc_opt_new(UIImagePickerController);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  -[UIImagePickerController setDelegate:](v2, "setDelegate:", WeakRetained);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeMovie, "identifier"));
  v12 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  -[UIImagePickerController setMediaTypes:](v2, "setMediaTypes:", v5);

  -[UIImagePickerController setAllowsEditing:](v2, "setAllowsEditing:", 0);
  -[UIImagePickerController setModalPresentationStyle:](v2, "setModalPresentationStyle:", 0);
  -[UIImagePickerController _setValue:forProperty:](v2, "_setValue:forProperty:", &__kCFBooleanTrue, _UIImagePickerControllerVideoDontTranscode);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blueColor](UIColor, "blueColor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[UIImagePickerController view](v2, "view"));
  objc_msgSend(v7, "setTintColor:", v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[UIImagePickerController view](v2, "view"));
  objc_msgSend(v9, "setBackgroundColor:", v8);

  v10 = (void *)objc_claimAutoreleasedReturnValue(-[UIImagePickerController popoverPresentationController](v2, "popoverPresentationController"));
  objc_msgSend(v10, "setPermittedArrowDirections:", 15);
  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v11, "presentViewController:animated:completion:", v2, 1, 0);

}

void sub_1007CC5C0(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  double v33;
  double v34;
  double v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  _QWORD v59[4];
  id v60;
  _QWORD v61[4];
  id v62;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable"), MapsFeaturesConfig_PedestrianAREnabled[0], MapsFeaturesConfig_PedestrianAREnabled[1]);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Floating debug UI"), &stru_1011C7D30, &stru_1011C7D50);
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("TTR button"), CFSTR("PedestrianARTTRButtonEnabledKey"));
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Feature intro TM flag"), &stru_1011C7D70, &stru_1011C7D90);
  v8 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Feature intro TM delay (sec)"), CFSTR("3.0"), 2, MapsConfig_PedestrianARFeatureIntroTeachableMomentCardDelay, off_1014B4278);
  v9 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Feature intro TM timeout 1 (sec)"), CFSTR("2592000.0"), 2, MapsConfig_PedestrianARFeatureIntroTeachableMomentCardShowAgainTimeInterval1, off_1014B4248);
  v10 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Feature intro TM timeout 2 (sec)"), CFSTR("5184000.0"), 2, MapsConfig_PedestrianARFeatureIntroTeachableMomentCardShowAgainTimeInterval2, off_1014B4258);
  v11 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Feature intro TM timeout 3 (sec)"), CFSTR("7776000.0"), 2, MapsConfig_PedestrianARFeatureIntroTeachableMomentCardShowAgainTimeInterval3, off_1014B4268);
  v12 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Raise to enter TM flag"), &stru_1011C7DB0, &stru_1011C7DD0);
  v13 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Reroute distance threshold (meters)"), CFSTR("20.0"), 2, MapsConfig_PedestrianARPostLocalizationRerouteDistanceThreshold, off_1014B42B8);
  v14 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Reroute accuracy threshold (meters)"), CFSTR("20.0"), 2, MapsConfig_PedestrianARPostLocalizationRerouteHorizontalAccuracyThreshold, off_1014B4648);
  v15 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Reroute timeout (seconds)"), CFSTR("1.0"), 2, MapsConfig_PedestrianARPostLocalizationRerouteTimeout, off_1014B4638);
  v16 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Active feature timeout (seconds)"), CFSTR("2.0"), 2, MapsConfig_PedestrianARPostLocalizationActiveFeatureTimeout, off_1014B4678);
  v17 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Instruction maneuver skip distance (meters)"), CFSTR("20.0"), 2, MapsConfig_PedestrianARInstructionNextManeuverDistanceThreshold, off_1014B42F8);
  v18 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Instruction maneuver arrived distance (meters)"), CFSTR("20.0"), 2, MapsConfig_PedestrianARInstructionArrivedDistanceThreshold, off_1014B42E8);
  v19 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Inject fake storefront arrival data"), CFSTR("PedestrianARInjectFakeStorefrontArrivalDataKey"));
  v20 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Force show arrival on last step"), CFSTR("PedestrianARForceShowArrivalOnLastStepKey"));
  v21 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Num of steps from the end to send arrival labels"), CFSTR("2"), 1, NavigationConfig_ARGuidanceArrivalLabelMinimumStepIndex[0], NavigationConfig_ARGuidanceArrivalLabelMinimumStepIndex[1]);
  v22 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Coarse arrival step distance threshold"), CFSTR("30.0"), 2, MapsConfig_PedestrianARSessionArrivalStepAvailabilityMonitorCoarseArrivalDistanceThreshold, off_1014B41E8);
  v23 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Max distance from closest point on route"), CFSTR("150.0"), 2, MapsConfig_PedestrianARSessionRouteDistanceThreshold, off_1014B4758);
  v24 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Distance to route override"), CFSTR("-1"), 2, MapsConfig_PedestrianARSessionRouteDistanceMonitorDistanceOverride, off_1014B55E8);
  v25 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show safety UI"), CFSTR("PedestrianARSafetyUIKey"));
  v26 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Safety UI Warning delay (secs)"), CFSTR("2.0"), 2, MapsConfig_PedestrianARSafetyWalkingLimit, off_1014B4048);
  v27 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Safety UI distance check (meters)"), CFSTR("1.8"), 2, MapsConfig_PedestrianARSafetyMinimumWalkingDistance, off_1014B4058);
  v28 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Safety UI time check (secs)"), CFSTR("3.0"), 2, MapsConfig_PedestrianARSSafetyWalkingCheckThreshold, off_1014B4068);
  v29 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Safety UI Count"), CFSTR("1"), 1, MapsConfig_PedestrianARSSafetyMaxCountPerARSession, off_1014B40D8);
  v30 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Safety UI max on screen time (secs)"), CFSTR("3.0"), 2, MapsConfig_PedestrianARSSafetyMaxTimeOnScreen, off_1014B4078);
  v31 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Failure view timeout"), CFSTR("30.0"), 2, MapsConfig_PedestrianARSessionFailureViewTimeout, off_1014B4208);
  v32 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Auto focus camera"), CFSTR("PedestrianARAutoFocusEnabledKey"));
  LODWORD(v33) = 0;
  LODWORD(v34) = 1.0;
  LODWORD(v35) = 0;
  v36 = objc_msgSend(v3, "addSliderRowWithTitle:subtitleStringFormat:min:max:defaultsKey:sliderValueIfUnset:changeHandler:", CFSTR("Custom camera focus value"), CFSTR("Specify a manual camera focus value %.2f"), CFSTR("PedestrianARAutoFocusDistanceKey"), 0, v33, v34, v35);
  v37 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("VL call interval"), CFSTR("0.5"), 2, MapsConfig_PedestrianARVisualLocalizationCallInterval, off_1014B3F98);
  v38 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Indoor/outdoor debug UI"), &stru_1011C7DF0, &stru_1011C7E10);
  v39 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Debug view interval (indoor/outdoor)"), CFSTR("1.0"), 2, CFSTR("PedestrianARIndoorOutdoorDetectionInterval"));
  v40 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable post-localization VL call interval"), MapsConfig_PedestrianAREnableCustomPostLocalizationVLCallInterval, off_1014B4298);
  v41 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Post-localization VL call interval"), CFSTR("1.0"), 2, MapsConfig_PedestrianARPostLocalizationVLCallInterval, off_1014B42A8);
  v42 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable lower to exit"), CFSTR("PedestrianAREnableLowerToExitKey"));
  v43 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Device motion update interval"), CFSTR("0.2"), 2, MapsConfig_PedestrianARDeviceMotionUpdateInterval, off_1014B4308);
  v44 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Device motion sample size"), CFSTR("5"), 1, MapsConfig_PedestrianARDeviceMotionSampleSize, off_1014B46D8);
  v45 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Floating control arrow animation"), MapsConfig_PedestrianARFloatingControlButtonArrowEnabled, off_1014B45F8);
  v46 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Force show affordance"), CFSTR("PedestrianARForceShowAffordanceKey"));
  v47 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Lidar"), MapsConfig_PedestrianARLidarEnabled, off_1014B4868);
  v48 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show debug map annotations"), CFSTR("PedestrianARDebugMapAnnotationsKey"));
  v49 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable compass calibration error alert"), MapsConfig_PedestrianARCompassCalibrationInternalAlertEnabled, off_1014B4918);
  v50 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Has shown compass calibration error"), &stru_1011C7E30, &stru_1011C7E50);
  v51 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Compass calibration error time interval"), CFSTR("604800"), 2, MapsConfig_PedestrianARCompassCalibrationInternalAlertDisplayTimeInterval, off_1014B4908);
  v52 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Indoor/outdoor analytics"), MapsConfig_VLFSessionIndoorOutdoorAnalyticsRecorderEnabled, off_1014B4968);
  v53 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Indoor/outdoor max entries"), CFSTR("3"), 1, MapsConfig_VLFSessionIndoorOutdoorAnalyticsRecorderEntryCount, off_1014B4988);
  v54 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Indoor/outdoor frame interval"), CFSTR("0.5"), 2, MapsConfig_VLFSessionIndoorOutdoorAnalyticsRecorderTimeInterval, off_1014B4978);
  v55 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Session state management"), &stru_1011C7E70);
  v56 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Usage monitor"), &stru_1011C7FD0);
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_1007CDFC4;
  v61[3] = &unk_1011AD260;
  a1 += 4;
  objc_copyWeak(&v62, a1);
  v57 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Show feature intro TM"), v61);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_1007CE158;
  v59[3] = &unk_1011AD260;
  objc_copyWeak(&v60, a1);
  v58 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Show raise to enter TM"), v59);
  objc_destroyWeak(&v60);
  objc_destroyWeak(&v62);

}

void sub_1007CCEFC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007CCF20(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARFloatingDebugViewController sharedInstance](PedestrianARFloatingDebugViewController, "sharedInstance"));
  v2 = objc_msgSend(v1, "isAttached");

  return v2;
}

void sub_1007CCF5C(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARFloatingDebugViewController sharedInstance](PedestrianARFloatingDebugViewController, "sharedInstance"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "attach");
  else
    objc_msgSend(v3, "detach");

}

BOOL sub_1007CCFA8(id a1)
{
  return +[PedestrianARFeatureIntroTeachableMomentContaineeViewController hasShownTeachableMoment](PedestrianARFeatureIntroTeachableMomentContaineeViewController, "hasShownTeachableMoment");
}

void sub_1007CCFB4(id a1, BOOL a2)
{
  +[PedestrianARFeatureIntroTeachableMomentContaineeViewController setShownTeachableMoment:](PedestrianARFeatureIntroTeachableMomentContaineeViewController, "setShownTeachableMoment:", a2);
}

BOOL sub_1007CCFC4(id a1)
{
  return +[PedestrianARRaiseToEnterTeachableMomentContaineeViewController hasShownTeachableMoment](PedestrianARRaiseToEnterTeachableMomentContaineeViewController, "hasShownTeachableMoment");
}

void sub_1007CCFD0(id a1, BOOL a2)
{
  +[PedestrianARRaiseToEnterTeachableMomentContaineeViewController setShownTeachableMoment:](PedestrianARRaiseToEnterTeachableMomentContaineeViewController, "setShownTeachableMoment:", a2);
}

BOOL sub_1007CCFE0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MapsARSessionIndoorOutdoorFloatingDebugViewController sharedInstance](MapsARSessionIndoorOutdoorFloatingDebugViewController, "sharedInstance"));
  v2 = objc_msgSend(v1, "isAttached");

  return v2;
}

void sub_1007CD01C(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MapsARSessionIndoorOutdoorFloatingDebugViewController sharedInstance](MapsARSessionIndoorOutdoorFloatingDebugViewController, "sharedInstance"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "attach");
  else
    objc_msgSend(v3, "detach");

}

BOOL sub_1007CD068(id a1)
{
  void *v1;
  void *v2;
  BOOL v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", off_1014B94F8));
  v3 = v2 != 0;

  return v3;
}

void sub_1007CD0B8(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v4, "setObject:forKey:", v3, off_1014B94F8);

  }
  else
  {
    objc_msgSend(v4, "removeObjectForKey:", off_1014B94F8);
  }

}

void sub_1007CD138(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;
  id location;

  v2 = a2;
  objc_initWeak(&location, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionArrivalStepAvailabilityMonitor friendlyName](PedestrianARSessionArrivalStepAvailabilityMonitor, "friendlyName"));
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1007CD444;
  v25[3] = &unk_1011AEAC8;
  objc_copyWeak(&v26, &location);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v3, v25);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionCarPlayConnectionMonitor friendlyName](PedestrianARSessionCarPlayConnectionMonitor, "friendlyName"));
  v6 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v5, &stru_1011C7EB0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionCoarseLocationMonitor friendlyName](PedestrianARSessionCoarseLocationMonitor, "friendlyName"));
  v8 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v7, &stru_1011C7ED0);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionNetworkReachabilityMonitor friendlyName](PedestrianARSessionNetworkReachabilityMonitor, "friendlyName"));
  v10 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v9, &stru_1011C7EF0);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionRoutePlanningConfigurationMonitor friendlyName](PedestrianARSessionRoutePlanningConfigurationMonitor, "friendlyName"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1007CD664;
  v23[3] = &unk_1011AEAC8;
  objc_copyWeak(&v24, &location);
  v12 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v11, v23);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionSunsetSunriseMonitor friendlyName](PedestrianARSessionSunsetSunriseMonitor, "friendlyName"));
  v14 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v13, &stru_1011C7F30);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionThermalStateMonitor friendlyName](PedestrianARSessionThermalStateMonitor, "friendlyName"));
  v16 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v15, &stru_1011C7F50);

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionTileAvailabilityMonitor friendlyName](PedestrianARSessionTileAvailabilityMonitor, "friendlyName"));
  v18 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v17, &stru_1011C7F70);

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionTransportTypeMonitor friendlyName](PedestrianARSessionTransportTypeMonitor, "friendlyName"));
  v20 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v19, &stru_1011C7F90);

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionOfflineMonitor friendlyName](PedestrianARSessionOfflineMonitor, "friendlyName"));
  v22 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", v21, &stru_1011C7FB0);

  objc_destroyWeak(&v24);
  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);

}

void sub_1007CD408(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1007CD444(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007CD518;
  v5[3] = &unk_1011AD4F0;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enabled"), &stru_1011C7E90, v5);
  objc_msgSend(v3, "setFooter:", CFSTR("This monitor can't be disabled."));
  objc_destroyWeak(&v6);

}

void sub_1007CD4F8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007CD510(id a1)
{
  return 1;
}

void sub_1007CD518(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1007CD544(id a1, MapsDebugTableSection *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = +[PedestrianARSessionCarPlayConnectionMonitor enablementGEOConfigKey](PedestrianARSessionCarPlayConnectionMonitor, "enablementGEOConfigKey");
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable"), v2, v3);

}

void sub_1007CD594(id a1, MapsDebugTableSection *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = +[PedestrianARSessionCoarseLocationMonitor enablementGEOConfigKey](PedestrianARSessionCoarseLocationMonitor, "enablementGEOConfigKey");
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Authorization delay (seconds)"), CFSTR("2"), 2, MapsConfig_PedestrianARPreciseLocationAuthorizationDelay, off_1014B3FF8);

}

void sub_1007CD614(id a1, MapsDebugTableSection *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = +[PedestrianARSessionNetworkReachabilityMonitor enablementGEOConfigKey](PedestrianARSessionNetworkReachabilityMonitor, "enablementGEOConfigKey");
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);

}

void sub_1007CD664(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007CD738;
  v5[3] = &unk_1011AD4F0;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enabled"), &stru_1011C7F10, v5);
  objc_msgSend(v3, "setFooter:", CFSTR("This monitor can't be disabled."));
  objc_destroyWeak(&v6);

}

void sub_1007CD718(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007CD730(id a1)
{
  return 1;
}

void sub_1007CD738(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1007CD764(id a1, MapsDebugTableSection *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = +[PedestrianARSessionSunsetSunriseMonitor enablementGEOConfigKey](PedestrianARSessionSunsetSunriseMonitor, "enablementGEOConfigKey");
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Offset threshold (seconds)"), CFSTR("900"), 2, MapsConfig_PedestrianARSessionSunsetSunriseMonitorThreshold, off_1014B4028);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum time threshold (seconds)"), CFSTR("300"), 2, MapsConfig_PedestrianARSessionSunsetSunriseMonitorTimeThreshold, off_1014B4668);
  v7 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum distance threshold (meters)"), CFSTR("100"), 2, MapsConfig_PedestrianARSessionSunsetSunriseMonitorDistanceThreshold, off_1014B4658);

}

void sub_1007CD844(id a1, MapsDebugTableSection *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = +[PedestrianARSessionThermalStateMonitor enablementGEOConfigKey](PedestrianARSessionThermalStateMonitor, "enablementGEOConfigKey");
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Threshold"), CFSTR("30"), 1, MapsConfig_PedestrianARSessionThermalStateMonitorThreshold, off_1014B45E8);

}

void sub_1007CD8C4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  MapsDebugTableSection *v7;

  v7 = a2;
  v2 = +[PedestrianARSessionTileAvailabilityMonitor enablementGEOConfigKey](PedestrianARSessionTileAvailabilityMonitor, "enablementGEOConfigKey");
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v7, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v7, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum distance change threshold (meters)"), CFSTR("10"), 2, MapsConfig_VLFSessionTileAvailabilityMonitorDistanceThreshold, off_1014B37E8);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v7, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Error timeout (seconds)"), CFSTR("30"), 2, MapsConfig_VLFSessionTileAvailabilityErrorTimeoutThreshold, off_1014B3BA8);
  -[MapsDebugTableSection setFooter:](v7, "setFooter:", CFSTR("This monitor's distance threshold and error timeout parameters are shared with the equivalent Treadstone tile availability monitor. Modifying them in one place will modify them in both."));

}

void sub_1007CD990(id a1, MapsDebugTableSection *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = +[PedestrianARSessionTransportTypeMonitor enablementGEOConfigKey](PedestrianARSessionTransportTypeMonitor, "enablementGEOConfigKey");
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);

}

void sub_1007CD9E0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = +[PedestrianARSessionOfflineMonitor enablementGEOConfigKey](PedestrianARSessionOfflineMonitor, "enablementGEOConfigKey");
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);

}

void sub_1007CDA30(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  id location;

  v2 = a2;
  objc_initWeak(&location, v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007CDAF0;
  v4[3] = &unk_1011AEAC8;
  objc_copyWeak(&v5, &location);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Usage monitor"), v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);

}

void sub_1007CDAD4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1007CDAF0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1007CDD04;
  v14[3] = &unk_1011AD260;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear all"), v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007CDD94;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("User entered AR"), &stru_1011C7FF0, v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1007CDE9C;
  v10[3] = &unk_1011C8038;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("AR localizations"), CFSTR("0"), 2, &stru_1011C8010, v10);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1007CDF58;
  v8[3] = &unk_1011AD4F0;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("User saw AR maneuver"), &stru_1011C8058, v8);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);

}

void sub_1007CDCC0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007CDD04(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
  objc_msgSend(v2, "clearAll");

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1007CDD58(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
  v2 = objc_msgSend(v1, "hasUserEnteredAR");

  return v2;
}

void sub_1007CDD94(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
  v5 = v4;
  if (a2)
  {
    objc_msgSend(v4, "registerUserEnteredARForRoute:entryPoint:", CFSTR("debug_panel_route_id"), 0);

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
    objc_msgSend(v5, "registerUserEnteredARForRoute:entryPoint:", CFSTR("debug_panel_route_id"), 1);
  }
  else
  {
    objc_msgSend(v4, "clearUserEnteredARFlag");
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

NSString *__cdecl sub_1007CDE38(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%ld"), objc_msgSend(v1, "numberOfTimesARLocalized")));

  return (NSString *)v2;
}

void sub_1007CDE9C(uint64_t a1, void *a2)
{
  void *v3;
  id WeakRetained;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
  if (v5)
    objc_msgSend(v3, "setNumberOfTimesARLocalized:", objc_msgSend(v5, "integerValue"));
  else
    objc_msgSend(v3, "clearARLocalizationsFlag");

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1007CDF1C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
  v2 = objc_msgSend(v1, "hasARElementRendered");

  return v2;
}

void sub_1007CDF58(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  id WeakRetained;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[PedestrianARSessionUsageTracker sharedInstance](PedestrianARSessionUsageTracker, "sharedInstance"));
  v5 = v4;
  if (a2)
    objc_msgSend(v4, "registerARElementRendered");
  else
    objc_msgSend(v4, "clearARElementRenderedFlag");

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1007CDFC4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  _QWORD v15[4];
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication _maps_keyMapsSceneDelegate](UIApplication, "_maps_keyMapsSceneDelegate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "platformController"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentSession"));
  v5 = objc_opt_class(NavigationSession);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) == 0)
  {

    goto LABEL_5;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentSession"));
  v7 = objc_msgSend(v6, "sessionState");

  if (v7 != (id)1)
  {
LABEL_5:
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "iosBasedChromeViewController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appCoordinator"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "baseModeController"));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "actionCoordinator"));
    goto LABEL_6;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "iosBasedChromeViewController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appCoordinator"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "navModeController"));
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "navActionCoordinator"));
LABEL_6:
  v12 = (void *)v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007CE150;
  v15[3] = &unk_1011AC860;
  v16 = v12;
  v14 = v12;
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, v15);

}

id sub_1007CE150(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showPedestrianARFeatureIntroTeachableMomentCard");
}

void sub_1007CE158(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id WeakRetained;
  id v14;
  _QWORD v15[4];
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication _maps_keyMapsSceneDelegate](UIApplication, "_maps_keyMapsSceneDelegate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "platformController"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentSession"));
  v5 = objc_opt_class(NavigationSession);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) == 0)
  {

    goto LABEL_5;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentSession"));
  v7 = objc_msgSend(v6, "sessionState");

  if (v7 != (id)1)
  {
LABEL_5:
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "iosBasedChromeViewController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appCoordinator"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "baseModeController"));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "actionCoordinator"));
    goto LABEL_6;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "iosBasedChromeViewController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appCoordinator"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "navModeController"));
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "navActionCoordinator"));
LABEL_6:
  v12 = (void *)v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007CE2E4;
  v15[3] = &unk_1011AC860;
  v16 = v12;
  v14 = v12;
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, v15);

}

id sub_1007CE2E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showPedestrianARRaiseToEnterTeachableMomentCard");
}

void sub_1007CE2EC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[4];
  id v32;
  _QWORD v33[4];
  id v34;

  v3 = a2;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1007CE804;
  v33[3] = &unk_1011AD4F0;
  objc_copyWeak(&v34, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable"), &stru_1011C8078, v33);
  v5 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Frame rate"), CFSTR("10.0"), 2, MapsConfig_VLFSessionFrameRate, off_1014B3B28);
  v6 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Experiment config"), CFSTR("0"), 1, MapsConfig_VLFSessionTextExperimentConfig, off_1014B4238);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1007CE8CC;
  v31[3] = &unk_1011AD4F0;
  objc_copyWeak(&v32, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Enable callout banner"), &stru_1011C8098, v31);
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Keep ARSession running forever"), CFSTR("VLFSessionKeepARSessionRunningForeverKey"));
  v9 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("VLF success criteria"), &stru_1011C80D8);
  v10 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("VL call interval"), CFSTR("0.0"), 2, MapsConfig_VLFSessionVisualLocalizationCallInterval, off_1014B3CE8);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1007CEE0C;
  v29[3] = &unk_1011C1B08;
  objc_copyWeak(&v30, (id *)(a1 + 32));
  v11 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Throttle VLF after localization"), v29);
  v12 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Reload route after localization"), MapsConfig_VLFSessionReloadRouteOnSuccess, off_1014B3C78);
  v13 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("UI timeout"), CFSTR("10.0"), 2, MapsConfig_VLFLocalizationTimeout, off_1014B3688);
  v14 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Keep scanning delay"), CFSTR("3.5"), 2, MapsConfig_VLFSessionKeepScanningDelay, off_1014B3918);
  v15 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Camera pitch threshold"), CFSTR("30"), 2, MapsConfig_VLFSessionCameraPitchThreshold, off_1014B3928);
  v16 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Slow down scanning animations"), CFSTR("VLFSessionScanningAnimationSlowDownKey"));
  v17 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show longest text"), CFSTR("VLFSessionScanningAnimationShowLongestTextKey"));
  v18 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("Alternative longest scanning text"), &stru_1011EB268, 3, CFSTR("VLFSessionScanningAnimationAlternativeLongestTextKey"));
  v19 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enable camera motion monitor"), CFSTR("VLFSessionScanningEnableCameraMotionMonitorKey"));
  v20 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Always show puck"), CFSTR("VLFSessionAlwaysShowPuckKey"));
  v21 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Show floating debug view"), &stru_1011C8158, &stru_1011C8178);
  if (GEOConfigGetBOOL(MapsConfig_MapsRefineYourLocation, off_1014B3678))
  {
    v22 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("VL Trace Recording"), MapsConfig_VLTraceRecordingEnabled, off_1014B3698);
    v23 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Temporarily recording VL traces"), CFSTR("PedestrianARViewControllerTemporarilyEnableVLTraceRecordingKey"));
  }
  v24 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Session state management"), &stru_1011C8198);
  if (GEOConfigGetBOOL(MapsConfig_MapsRefineYourLocation, off_1014B3678))
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1007D0820;
    v27[3] = &unk_1011AD260;
    objc_copyWeak(&v28, (id *)(a1 + 40));
    v25 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Show VLF UI"), v27);
    objc_destroyWeak(&v28);
  }
  else
  {
    v26 = objc_msgSend(v3, "addReadOnlyRowWithTitle:subtitle:", CFSTR("Show VLF UI"), 0);
  }
  objc_destroyWeak(&v30);
  objc_destroyWeak(&v32);
  objc_destroyWeak(&v34);

}

void sub_1007CE7A4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007CE7F4(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_MapsRefineYourLocation, off_1014B3678);
}

void sub_1007CE804(uint64_t a1, uint64_t a2)
{
  void *v3;
  id WeakRetained;
  id v5;

  GEOConfigSetBOOL(MapsConfig_MapsRefineYourLocation, off_1014B3678, a2);
  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Restart Maps"), CFSTR("You will need to restart Maps for this change to take effect"), 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, 0));
  objc_msgSend(v5, "addAction:", v3);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v5, 1, 0);

}

BOOL sub_1007CE8BC(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_VLFSessionActiveUIEnabled, off_1014B37D8);
}

void sub_1007CE8CC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id WeakRetained;
  id v6;

  GEOConfigSetBOOL(MapsConfig_VLFSessionActiveUIEnabled, off_1014B37D8, a2);
  v6 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Clear usage counts?"), CFSTR("Would you like to also clear all of your VLF usage counts? This will make VLF behave as if you've never seen the feature before."), 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, &stru_1011C80B8));
  objc_msgSend(v6, "addAction:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("No, thanks"), 1, 0));
  objc_msgSend(v6, "addAction:", v4);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v6, 1, 0);

}

void sub_1007CE9C0(id a1, UIAlertAction *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  objc_msgSend(v2, "clearAll");

}

void sub_1007CE9F4(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  id location;

  v2 = a2;
  objc_initWeak(&location, v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007CEAB0;
  v4[3] = &unk_1011AEAC8;
  objc_copyWeak(&v5, &location);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", 0, v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);

}

void sub_1007CEA94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1007CEAB0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t, unsigned int);
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007CEC2C;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Horizontal accuracy OR fused location"), &stru_1011C80F8, v12);
  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_1007CED30;
  v10 = &unk_1011AD4F0;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Horizontal accuracy AND fused location"), &stru_1011C8118, &v7);
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Ignore fused location during ARKit replay"), CFSTR("VLFSessionIgnoreFusedLocationForReplayKey"), v7, v8, v9, v10);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);

}

void sub_1007CEBDC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007CEC04(id a1)
{
  return GEOConfigGetUInteger(MapsConfig_VLFSessionSuccessCriteria, off_1014B3B88) == 0;
}

void sub_1007CEC2C(uint64_t a1, int a2)
{
  dispatch_time_t v3;
  _QWORD block[4];
  id v5;

  GEOConfigSetUInteger(MapsConfig_VLFSessionSuccessCriteria, off_1014B3B88, a2 ^ 1u);
  v3 = dispatch_time(0, 2000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007CECDC;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v5, (id *)(a1 + 32));
  dispatch_after(v3, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v5);
}

void sub_1007CECDC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

BOOL sub_1007CED08(id a1)
{
  return GEOConfigGetUInteger(MapsConfig_VLFSessionSuccessCriteria, off_1014B3B88) == 1;
}

void sub_1007CED30(uint64_t a1, unsigned int a2)
{
  dispatch_time_t v3;
  _QWORD block[4];
  id v5;

  GEOConfigSetUInteger(MapsConfig_VLFSessionSuccessCriteria, off_1014B3B88, a2);
  v3 = dispatch_time(0, 2000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007CEDE0;
  block[3] = &unk_1011AD260;
  objc_copyWeak(&v5, (id *)(a1 + 32));
  dispatch_after(v3, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v5);
}

void sub_1007CEDE0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1007CEE0C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1007CEF18;
  v6[3] = &unk_1011C3F08;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  objc_copyWeak(&v8, &location);
  v4 = objc_msgSend(v3, "addSectionWithTitle:content:", 0, v6);
  v5 = objc_msgSend(v3, "addSectionWithTitle:content:", CFSTR("Teardown conditions"), &stru_1011C8138);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);

}

void sub_1007CEEF0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1007CEF18(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007CEFF8;
  v5[3] = &unk_1011C3EE0;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable"), MapsConfig_VLFVIOEnabled, off_1014B3AC8, 1, v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v6);

}

void sub_1007CEFDC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007CEFF8(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Restart Maps"), CFSTR("You will need to restart Maps for this change to take effect"), 1));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, 0));
  objc_msgSend(v5, "addAction:", v2);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v5, 1, 0);

  v4 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v4, "rebuildSections");

}

void sub_1007CF0B0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  MapsDebugTableSection *v10;

  v10 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("When CL accuracy gets bad enough"), MapsConfig_VLFVIOTeardownLocationAccuracyEnabled, off_1014B3A18);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v10, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("CL accuracy threshold"), CFSTR("15"), 2, MapsConfig_VLFVIOTeardownLocationAccuracyThreshold, off_1014B3A28);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Timeout enabled"), MapsConfig_VLFVIOTeardownTimeoutEnabled, off_1014B3A38);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v10, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Timeout (seconds)"), CFSTR("120"), 2, MapsConfig_VLFVIOTeardownTimeout, off_1014B3A48);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Distance"), MapsConfig_VLFVIOTeardownDistanceEnabled, off_1014B3B48);
  v7 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v10, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Distance threshold (meters)"), CFSTR("120"), 2, MapsConfig_VLFVIOTeardownDistanceThreshold, off_1014B3B58);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("When we stop getting fused locations"), MapsConfig_VLFVIOTeardownFusedLocationEnabled, off_1014B3B98);
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("App background"), MapsConfig_VLFVIOTeardownAppBackgroundEnabled, off_1014B3C68);

}

BOOL sub_1007CF21C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VLFSessionStateFloatingDebugViewController sharedInstance](VLFSessionStateFloatingDebugViewController, "sharedInstance"));
  v2 = objc_msgSend(v1, "isAttached");

  return v2;
}

void sub_1007CF258(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VLFSessionStateFloatingDebugViewController sharedInstance](VLFSessionStateFloatingDebugViewController, "sharedInstance"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "attach");
  else
    objc_msgSend(v3, "detach");

}

void sub_1007CF2A4(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void **v23;
  uint64_t v24;
  void (*v25)(id *, void *);
  void *v26;
  id v27;
  id location;

  v2 = a2;
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("App launch delay monitor"), &stru_1011C81B8);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("CarPlay connection monitor"), &stru_1011C81D8);
  v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Chrome stack monitor"), &stru_1011C81F8);
  v6 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Coarse location monitor"), &stru_1011C8218);
  v7 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Historical location accuracy monitor"), &stru_1011C8238);
  v8 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Home/work monitor"), &stru_1011C8258);
  v9 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Horizontal accuracy monitor"), &stru_1011C8278);
  v10 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Location type monitor"), &stru_1011C8298);
  v11 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Location signal environment monitor"), &stru_1011C82B8);
  v12 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Maps home monitor"), &stru_1011C82D8);
  v13 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Network reachability monitor"), &stru_1011C82F8);
  v14 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Outdoor monitor"), &stru_1011C8318);
  v15 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Sunset/sunrise monitor"), &stru_1011C8338);
  v16 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Thermal state monitor"), &stru_1011C8358);
  v17 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Tile availability monitor"), &stru_1011C8378);
  v18 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Transit stepping monitor"), &stru_1011C8398);
  v19 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Offline Maps monitor"), &stru_1011C83B8);
  objc_initWeak(&location, v2);
  v23 = _NSConcreteStackBlock;
  v24 = 3221225472;
  v25 = sub_1007D02AC;
  v26 = &unk_1011AEAC8;
  objc_copyWeak(&v27, &location);
  v20 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Usage monitor"), &v23);
  v21 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Debug puck visibility monitor"), &stru_1011C8478, v23, v24, v25, v26);
  v22 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Debug banner visibility monitor"), &stru_1011C8498);
  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);

}

void sub_1007CF5A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1007CF5C4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionAppLaunchDelayMonitorEnabled, off_1014B3A98);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Timeout threshold (seconds)"), CFSTR("1"), 2, MapsConfig_VLFSessionAppLaunchDelayMonitorTimeoutThreshold, off_1014B3AA8);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionAppLaunchDelayMonitorAffectsPuckVisibilityKey"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionAppLaunchDelayMonitorAffectsBannerVisibilityKey"));

}

void sub_1007CF678(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionCarPlayConnectionMonitorEnabled, off_1014B3788);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionCarPlayConnectionMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionCarPlayConnectionMonitorAffectsBannerVisibilityKey"));

}

void sub_1007CF6FC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionChromeStackMonitorEnabled, off_1014B3D58);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionChromeStackMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionChromeStackMonitorAffectsBannerVisibilityKey"));

}

void sub_1007CF780(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionCoarseLocationMonitorEnabled, off_1014B3768);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Authorization delay (seconds)"), CFSTR("2"), 2, MapsConfig_VLFPreciseLocationAuthorizationDelay, off_1014B3AD8);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionCoarseLocationMonitorAffectsPuckVisibilityKey"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionCoarseLocationMonitorAffectsBannerVisibilityKey"));

}

void sub_1007CF834(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v6 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionHistoricalLocationAccuracyMonitorEnabled, off_1014B3D88);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Location window size"), CFSTR("3"), 1, MapsConfig_VLFSessionEligibleLocationUpdateWindowSize, off_1014B3D98);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionHistoricalLocationAccuracyMonitorAffectsPuckVisibilityKey"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v6, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionHistoricalLocationAccuracyMonitorAffectsBannerVisibilityKey"));

}

void sub_1007CF8E8(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v9 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionHomeWorkMonitorEnabled, off_1014B3EF8);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v9, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionHomeWorkMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v9, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionHomeWorkMonitorAffectsBannerVisibilityKey"));
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Distance threshold (meters)"), CFSTR("100.0"), 2, MapsConfig_VLFSessionHomeWorkMonitorDistanceThreshold, off_1014B3F28);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Location update threshold (meters)"), CFSTR("10.0"), 2, MapsConfig_VLFSessionHomeWorkMonitorLocationUpdateDistanceThreshold, off_1014B4878);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Home"), MapsConfig_VLFSessionHomeWorkMonitorHomeCheckEnabled, off_1014B3F08);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Work"), MapsConfig_VLFSessionHomeWorkMonitorWorkCheckEnabled, off_1014B3F18);

}

void sub_1007CFA14(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionLocationHorizontalAccuracyMonitorEnabled, off_1014B3C88);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionLocationHorizontalAccuracyMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionLocationHorizontalAccuracyMonitorAffectsBannerVisibilityKey"));

}

void sub_1007CFA98(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v9 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionLocationTypeMonitorEnabled, off_1014B3C98);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v9, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionLocationTypeMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v9, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionLocationTypeMonitorAffectsBannerVisibilityKey"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("GPS"), MapsConfig_VLFSessionLocationTypeAllowGPS, off_1014B3CA8);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("WiFi"), MapsConfig_VLFSessionLocationTypeAllowWiFi, off_1014B3CB8);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("WiFi2"), MapsConfig_VLFSessionLocationTypeAllowWiFi2, off_1014B3CC8);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Pipeline"), MapsConfig_VLFSessionLocationTypeAllowPipeline, off_1014B3CD8);

}

void sub_1007CFBAC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  MapsDebugTableSection *v10;

  v10 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionLocationSignalEnvironmentMonitorEnabled, off_1014B3F38);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v10, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionLocationSignalEnvironmentMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v10, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionLocationSignalEnvironmentMonitorAffectsBannerVisibilityKey"));
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Rural"), MapsConfig_VLFSessionLocationSignalEnvironmentAllowRural, off_1014B3F48);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Urban"), MapsConfig_VLFSessionLocationSignalEnvironmentAllowUrban, off_1014B3F58);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("DenseUrban"), MapsConfig_VLFSessionLocationSignalEnvironmentAllowDenseUrban, off_1014B3F68);
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("DenseUrbanCanyon"), MapsConfig_VLFSessionLocationSignalEnvironmentAllowDenseUrbanCanyon, off_1014B3F78);
  v9 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v10, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Foliage"), MapsConfig_VLFSessionLocationSignalEnvironmentAllowFoliage, off_1014B3F88);

}

void sub_1007CFCE4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionMapsHomeMonitorEnabled, off_1014B3818);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionMapsHomeMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionMapsHomeMonitorAffectsBannerVisibilityKey"));

}

void sub_1007CFD68(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionNetworkReachabilityMonitorEnabled, off_1014B3798);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionNetworkReachabilityMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionNetworkReachabilityMonitorAffectsBannerVisibilityKey"));

}

void sub_1007CFDEC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionLocationOutdoorMonitorEnabled, off_1014B4318);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionLocationOutdoorMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionLocationOutdoorMonitorAffectsBannerVisibilityKey"));
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Confidence threshold"), CFSTR("0.85"), 2, MapsConfig_VLFSessionLocationOutdoorMonitorConfidenceThreshold, off_1014B4328);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Consecutive outdoor requirement"), CFSTR("5"), 1, MapsConfig_VLFSessionLocationOutdoorMonitorConsecutiveOutdoorCount, off_1014B4338);
  v7 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Consecutive indoor requirement"), CFSTR("5"), 1, MapsConfig_VLFSessionLocationOutdoorMonitorConsecutiveIndoorCount, off_1014B4348);

}

void sub_1007CFF08(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v8, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionSunsetSunriseMonitorEnabled, off_1014B36F8);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Offset threshold (seconds)"), CFSTR("900"), 2, MapsConfig_VLFSessionSunsetSunriseMonitorThreshold, off_1014B3708);
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum time threshold (seconds)"), CFSTR("300"), 2, MapsConfig_VLFSessionSunsetSunriseMonitorTimeThreshold, off_1014B3728);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v8, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum distance threshold (meters)"), CFSTR("100"), 2, MapsConfig_VLFSessionSunsetSunriseMonitorDistanceThreshold, off_1014B3718);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionSunsetSunriseMonitorAffectsPuckVisibilityKey"));
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v8, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionSunsetSunriseMonitorAffectsBannerVisibilityKey"));

}

void sub_1007D001C(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionThermalStateMonitorEnabled, off_1014B37C8);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionThermalStateMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionThermalStateMonitorAffectsBannerVisibilityKey"));

}

void sub_1007D00A0(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v2 = MapsConfig_VLFSessionTileAvailabilityMonitorEnabled;
  v3 = off_1014B3758;
  v9 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum distance change threshold (meters)"), CFSTR("10"), 2, MapsConfig_VLFSessionTileAvailabilityMonitorDistanceThreshold, off_1014B37E8);
  v6 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Error timeout (seconds)"), CFSTR("30"), 2, MapsConfig_VLFSessionTileAvailabilityErrorTimeoutThreshold, off_1014B3BA8);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v9, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionTileAvailabilityMonitorAffectsPuckVisibilityKey"));
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v9, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionTileAvailabilityMonitorAffectsBannerVisibilityKey"));
  -[MapsDebugTableSection setFooter:](v9, "setFooter:", CFSTR("This monitor's distance threshold and error timeout parameters are shared with the equivalent Pedestrian AR tile availability monitor. Modifying them in one place will modify them in both."));

}

void sub_1007D01A4(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionTransitSteppingMonitorEnabled, off_1014B3B68);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionTransitSteppingMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionTransitSteppingMonitorAffectsBannerVisibilityKey"));

}

void sub_1007D0228(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionOfflineMonitorEnabled, off_1014B4C98);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionOfflineMonitorAffectsPuckVisibilityKey"));
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v5, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionOfflineMonitorAffectsBannerVisibilityKey"));

}

void sub_1007D02AC(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void **v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  _QWORD v21[4];
  id v22;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsConfig_VLFSessionUsageMonitorEnabled, off_1014B36E8);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects puck visibility"), CFSTR("VLFSessionUsageMonitorAffectsPuckVisibilityKey"));
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Affects banner visibility"), CFSTR("VLFSessionUsageMonitorAffectsBannerVisibilityKey"));
  v7 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyUInteger:", CFSTR("Maximum callout dismisses"), CFSTR("3"), 1, MapsConfig_VLFSessionUsageMonitorMaximumCalloutDismissalCount, off_1014B3828);
  v8 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("First interaction threshold (s)"), CFSTR("1296000"), 2, MapsConfig_VLFSessionUsageMonitorFirstInteractionThreshold, off_1014B37F8);
  v9 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Second interaction threshold (s)"), CFSTR("2592000"), 2, MapsConfig_VLFSessionUsageMonitorAfterFirstInteractionThreshold, off_1014B3808);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1007D05BC;
  v21[3] = &unk_1011C8038;
  a1 += 4;
  objc_copyWeak(&v22, a1);
  v10 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("VLF localizations"), CFSTR("0"), 2, &stru_1011C83D8, v21);
  v11 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear user has entered VLF flag"), &stru_1011C83F8);
  v12 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear user has seen VLF callout flag"), &stru_1011C8418);
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_1007D06A4;
  v19 = &unk_1011AD260;
  objc_copyWeak(&v20, a1);
  v13 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear successful VLF localization count"), &v16);
  v14 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear dismissals"), &stru_1011C8438, v16, v17, v18, v19);
  v15 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear taps"), &stru_1011C8458);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&v22);

}

void sub_1007D052C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_1007D0558(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%ld"), objc_msgSend(v1, "numberOfTimesVLFLocalized")));

  return (NSString *)v2;
}

void sub_1007D05BC(uint64_t a1, void *a2)
{
  void *v3;
  id WeakRetained;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  if (v5)
    objc_msgSend(v3, "setNumberOfTimesVLFLocalized:", objc_msgSend(v5, "integerValue"));
  else
    objc_msgSend(v3, "clearSuccessfulVLFLocalizations");

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1007D063C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  objc_msgSend(v1, "clearUserEnteredVLFFlag");

}

void sub_1007D0670(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  objc_msgSend(v1, "clearUserWasShownVLFCalloutFlag");

}

void sub_1007D06A4(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  objc_msgSend(v2, "clearSuccessfulVLFLocalizations");

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1007D06F8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  objc_msgSend(v1, "clearDismissals");

}

void sub_1007D072C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  objc_msgSend(v1, "clearTaps");

}

void sub_1007D0760(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v4, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enabled"), CFSTR("VLFSessionDebugPuckVisibilityMonitorEnabledKey"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v4, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Active"), CFSTR("VLFSessionDebugPuckVisibilityMonitorActiveKey"));

}

void sub_1007D07C0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v4, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Enabled"), CFSTR("VLFSessionDebugBannerVisibilityMonitorEnabledKey"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v4, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Active"), CFSTR("VLFSessionDebugBannerVisibilityMonitorActiveKey"));

}

void sub_1007D0820(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, &stru_1011C84B8);

}

void sub_1007D0858(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication _maps_keyMapsSceneDelegate](UIApplication, "_maps_keyMapsSceneDelegate"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "platformController"));

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "auxiliaryTasksManager"));
  v3 = objc_msgSend(v2, "auxilaryTaskForClass:", objc_opt_class(VLFSessionTask));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  objc_msgSend(v4, "showVLFUI");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[VLFSessionUsageTracker sharedInstance](VLFSessionUsageTracker, "sharedInstance"));
  objc_msgSend(v5, "registerUserWasShownCallout");

}

void sub_1007D08FC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void **v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), MapsFeaturesConfig_VisualLocalizationCrowdsourcingEnabled[0], MapsFeaturesConfig_VisualLocalizationCrowdsourcingEnabled[1]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007D0A84;
  v13[3] = &unk_1011AD4F0;
  objc_copyWeak(&v14, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Collect VLF Crowdsourcing data"), &stru_1011C84D8, v13);
  v8 = _NSConcreteStackBlock;
  v9 = 3221225472;
  v10 = sub_1007D0BA0;
  v11 = &unk_1011AD260;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  v6 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear VLF Crowdsourcing flag"), &v8);
  v7 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Permission dialog localization threshold"), CFSTR("3"), 1, MapsConfig_VLFCrowdsourcingPermissionDialogLocalizationCountRequirement, off_1014B48B8, v8, v9, v10, v11);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v14);

}

void sub_1007D0A4C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007D0A74(id a1)
{
  return GEOConfigGetBOOL(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[0], GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[1]);
}

void sub_1007D0A84(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  id WeakRetained;
  id v6;

  if ((a2 & 1) != 0)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Enable Crowdsourcing?"), CFSTR("Enabling this will result in various sensor readings and information derived from your camera during Pedestrian AR and Refine Location to be sent to Apple. Actual camera images will NOT be collected."), 1));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Enable"), 0, &stru_1011C84F8));
    objc_msgSend(v6, "addAction:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Cancel"), 1, 0));
    objc_msgSend(v6, "addAction:", v4);

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v6, 1, 0);

  }
  else
  {
    GEOConfigSetBOOL(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[0], GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[1], 0);
  }
}

void sub_1007D0B8C(id a1, UIAlertAction *a2)
{
  GEOConfigSetBOOL(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[0], GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[1], 1);
}

void sub_1007D0BA0(uint64_t a1)
{
  id WeakRetained;

  _GEOConfigRemoveValue(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[0], GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled[1]);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1007D0BE8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1007D0D10;
  v8[3] = &unk_1011AD4F0;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable"), MapsConfig_OpticalHeadingEnabled, off_1014B33B8, 0, v8);
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable in route planning"), MapsConfig_OpticalHeadingEnableInRoutePlanning, off_1014B33C8);
  v6 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Thermal state threshold"), &stru_1011C8538);
  v7 = objc_msgSend(v3, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Session state management"), &stru_1011C85D8);
  objc_destroyWeak(&v9);

}

void sub_1007D0CF8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007D0D10(uint64_t a1, int a2)
{
  const __CFString *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  id WeakRetained;
  _QWORD v10[4];
  char v11;

  if (GEOConfigGetBOOL(NavigationConfig_UseCLPedestrianMapMatchedLocations[0], NavigationConfig_UseCLPedestrianMapMatchedLocations[1]) != a2)
  {
    if (a2)
      v4 = CFSTR("MarcoLite Enabled");
    else
      v4 = CFSTR("MarcoLite Disabled");
    if (a2)
      v5 = CFSTR("Enable CoreLocation Pedestrian Map Matching?");
    else
      v5 = CFSTR("Disable CoreLocation Pedestrian Map Matching?");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v4, v5, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("No"), 1, 0));
    objc_msgSend(v6, "addAction:", v7);

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1007D0E5C;
    v10[3] = &unk_1011C8518;
    v11 = a2;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("Yes"), 0, v10));
    objc_msgSend(v6, "addAction:", v8);

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v6, 1, 0);

  }
}

uint64_t sub_1007D0E5C(uint64_t a1)
{
  return GEOConfigSetBOOL(NavigationConfig_UseCLPedestrianMapMatchedLocations[0], NavigationConfig_UseCLPedestrianMapMatchedLocations[1], *(unsigned __int8 *)(a1 + 32));
}

void sub_1007D0E70(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  id location;

  v2 = a2;
  objc_initWeak(&location, v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007D0F30;
  v4[3] = &unk_1011AEAC8;
  objc_copyWeak(&v5, &location);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Thermal states"), v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);

}

void sub_1007D0F14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1007D0F30(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1007D1158;
  v14[3] = &unk_1011AD4F0;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Nominal"), &stru_1011C8558, v14);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1007D11DC;
  v12[3] = &unk_1011AD4F0;
  objc_copyWeak(&v13, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Fair"), &stru_1011C8578, v12);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1007D1260;
  v10[3] = &unk_1011AD4F0;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Serious"), &stru_1011C8598, v10);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1007D12E4;
  v8[3] = &unk_1011AD4F0;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Critical"), &stru_1011C85B8, v8);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);

}

void sub_1007D10EC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007D1130(id a1)
{
  return GEOConfigGetInteger(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8) == 0;
}

void sub_1007D1158(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
    GEOConfigSetSyncInteger(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8, 0);
  else
    _GEOConfigRemoveValueSync(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1007D11B4(id a1)
{
  return GEOConfigGetInteger(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8) == 1;
}

void sub_1007D11DC(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
    GEOConfigSetSyncInteger(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8, 1);
  else
    _GEOConfigRemoveValueSync(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1007D1238(id a1)
{
  return GEOConfigGetInteger(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8) == 2;
}

void sub_1007D1260(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
    GEOConfigSetSyncInteger(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8, 2);
  else
    _GEOConfigRemoveValueSync(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1007D12BC(id a1)
{
  return GEOConfigGetInteger(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8) == 3;
}

void sub_1007D12E4(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
    GEOConfigSetSyncInteger(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8, 3);
  else
    _GEOConfigRemoveValueSync(MapsConfig_OpticalHeadingSessionThrottlerThermalStateMonitorThreshold, off_1014B42C8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

void sub_1007D1340(id a1, MapsDebugValuesViewController *a2)
{
  MapsDebugValuesViewController *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id location;

  v2 = a2;
  objc_initWeak(&location, v2);
  v3 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Floating debug view"), &stru_1011C85F8);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1007D1690;
  v20[3] = &unk_1011AEAC8;
  objc_copyWeak(&v21, &location);
  v4 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Monitors"), v20);
  if (GEOConfigGetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableDailyUsageMonitor, off_1014B35E8))
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1007D1AB4;
    v18[3] = &unk_1011AEAC8;
    objc_copyWeak(&v19, &location);
    v5 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Daily usage limits"), v18);
    objc_destroyWeak(&v19);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication _maps_keyMapsSceneDelegate](UIApplication, "_maps_keyMapsSceneDelegate"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "platformController"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "auxiliaryTasksManager"));
  v9 = objc_msgSend(v8, "auxilaryTaskForClass:", objc_opt_class(VIOSessionTask));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1007D1E7C;
  v16[3] = &unk_1011B4BC0;
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "activeMonitors"));
  v17 = v11;
  v12 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Currently active monitors"), v16);
  if (objc_msgSend(v11, "count"))
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1007D1FCC;
    v14[3] = &unk_1011B4BC0;
    v15 = v11;
    v13 = -[MapsDebugValuesViewController addSectionWithTitle:content:](v2, "addSectionWithTitle:content:", CFSTR("Session throttling & disabling"), v14);

  }
  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);

}

void sub_1007D158C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1007D15D0(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](a2, "addSwitchRowWithTitle:get:set:", CFSTR("Show floating debug view"), &stru_1011C8618, &stru_1011C8638);
}

BOOL sub_1007D1608(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[VIOSessionStateFloatingDebugViewController sharedInstance](VIOSessionStateFloatingDebugViewController, "sharedInstance"));
  v2 = objc_msgSend(v1, "isAttached");

  return v2;
}

void sub_1007D1644(id a1, BOOL a2)
{
  _BOOL4 v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VIOSessionStateFloatingDebugViewController sharedInstance](VIOSessionStateFloatingDebugViewController, "sharedInstance"));
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "attach");
  else
    objc_msgSend(v3, "detach");

}

void sub_1007D1690(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Low power mode monitor"), MapsConfig_OpticalHeadingSessionThrottlerEnablePowerStateMonitor, off_1014B3478);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1007D19B0;
  v19[3] = &unk_1011AD4F0;
  objc_copyWeak(&v20, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Daily usage monitor"), &stru_1011C8658, v19);
  v6 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Device motion monitor"), MapsConfig_OpticalHeadingSessionThrottlerEnableDeviceMotionMonitor, off_1014B35F8);
  v7 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Tracking state monitor"), MapsConfig_OpticalHeadingSessionThrottlerEnableTrackingStateMonitor, off_1014B3608);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1007D1A0C;
  v17[3] = &unk_1011AD4F0;
  objc_copyWeak(&v18, (id *)(a1 + 32));
  v8 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Sunset/sunrise monitor"), &stru_1011C8678, v17);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007D1A68;
  v15[3] = &unk_1011AD4F0;
  objc_copyWeak(&v16, (id *)(a1 + 32));
  v9 = objc_msgSend(v3, "addSwitchRowWithTitle:get:set:", CFSTR("Battery level monitor"), &stru_1011C8698, v15);
  if (GEOConfigGetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableBatteryLevelMonitor, off_1014B3628))
    v10 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Minimum battery level"), CFSTR("20"), 2, MapsConfig_OpticalHeadingSessionThrottlerBatteryLevelThreshold, off_1014B3468);
  if (GEOConfigGetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableSunsetSunriseMonitor, off_1014B3618))v11 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Sunset/sunrise offset"), CFSTR("600"), 2, MapsConfig_OpticalHeadingSessionThrottlerSunsetSunriseOffsetThreshold, off_1014B35D8);
  v12 = objc_msgSend(v3, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Thermal state monitor"), MapsConfig_OpticalHeadingSessionThrottlerEnableThermalStateMonitor, off_1014B3B38);
  v13 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Retry time interval"), CFSTR("180"), 2, MapsConfig_OpticalHeadingSessionThrottlerRetryTimeInterval, off_1014B3428);
  v14 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Consecutive event timeout"), CFSTR("20"), 2, MapsConfig_OpticalHeadingSessionThrottlerConsecutiveEventTimeout, off_1014B3438);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&v20);

}

void sub_1007D1964(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1007D19A0(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableDailyUsageMonitor, off_1014B35E8);
}

void sub_1007D19B0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  GEOConfigSetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableDailyUsageMonitor, off_1014B35E8, a2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

BOOL sub_1007D19FC(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableSunsetSunriseMonitor, off_1014B3618);
}

void sub_1007D1A0C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  GEOConfigSetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableSunsetSunriseMonitor, off_1014B3618, a2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

BOOL sub_1007D1A58(id a1)
{
  return GEOConfigGetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableBatteryLevelMonitor, off_1014B3628);
}

void sub_1007D1A68(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  GEOConfigSetBOOL(MapsConfig_OpticalHeadingSessionThrottlerEnableBatteryLevelMonitor, off_1014B3628, a2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1007D1AB4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;

  v3 = a2;
  v4 = objc_msgSend(v3, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Maximum daily usage"), CFSTR("900"), 2, MapsConfig_OpticalHeadingSessionThrottlerDailyUsageLimit, off_1014B3488);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[VIOSessionDailyUsageEntry loadOrCreateEntry](VIOSessionDailyUsageEntry, "loadOrCreateEntry"));
  objc_msgSend(v5, "currentUsage");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringValue"));
  v8 = objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Today's usage"), v7);

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1007D1D24;
  v19[3] = &unk_1011AD260;
  objc_copyWeak(&v20, (id *)(a1 + 32));
  v9 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Clear current daily usage"), v19);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1007D1D68;
  v17[3] = &unk_1011AD260;
  objc_copyWeak(&v18, (id *)(a1 + 32));
  v10 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Simulate day change"), v17);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1007D1DCC;
  v15[3] = &unk_1011AD260;
  objc_copyWeak(&v16, (id *)(a1 + 32));
  v11 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Make entry 1 day old"), v15);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007D1E50;
  v13[3] = &unk_1011AD260;
  objc_copyWeak(&v14, (id *)(a1 + 32));
  v12 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Refresh this page"), v13);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&v20);

}

void sub_1007D1CE0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007D1D24(uint64_t a1)
{
  id WeakRetained;

  +[VIOSessionDailyUsageEntry clearEntry](VIOSessionDailyUsageEntry, "clearEntry");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1007D1D68(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:", NSCalendarDayChangedNotification, 0);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1007D1DCC(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[VIOSessionDailyUsageEntry loadOrCreateEntry](VIOSessionDailyUsageEntry, "loadOrCreateEntry"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", -86400.0));
  objc_msgSend(v4, "updateCreationDate:", v2);

  objc_msgSend(v4, "save");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1007D1E50(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "rebuildSections");

}

void sub_1007D1E7C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = *(id *)(a1 + 32);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v15;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v4);
          v9 = (objc_class *)objc_opt_class(*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v8));
          v10 = NSStringFromClass(v9);
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          v12 = objc_msgSend(v3, "addReadOnlyRowWithTitle:subtitle:", v11, 0, (_QWORD)v14);

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v6);
    }

  }
  else
  {
    v13 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", CFSTR("There are currently no active monitors"));
  }

}

void sub_1007D1FCC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  const __CFString *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  const __CFString *v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "anyObject"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stateManager"));

  if (objc_msgSend(v5, "isThrottling"))
  {
    v6 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", CFSTR("The VIO session is currently throttled"));
    objc_msgSend(v5, "remainingThrottleTime");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringValue"));
    v9 = objc_msgSend(v3, "addReadOnlyRowWithTitle:subtitle:", CFSTR("Time left:"), v8);

    if (objc_msgSend(v5, "throttleEventReason"))
      v10 = CFSTR("VIOSessionThrottleEventDeviceMotion");
    else
      v10 = CFSTR("VIOSessionThrottleEventARTrackingState");
    v11 = objc_msgSend(v3, "addReadOnlyRowWithTitle:subtitle:", CFSTR("Reason:"), v10);
  }
  else if (objc_msgSend(v5, "isDisabled"))
  {
    v12 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", CFSTR("The VIO session is currently disabled"));
    v13 = objc_msgSend(v3, "addReadOnlyRowWithTitle:subtitle:", CFSTR("Reasons:"), 0);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "disableEventReasons", 0));
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v24;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v24 != v17)
            objc_enumerationMutation(v14);
          v19 = (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v18), "integerValue") - 1;
          v20 = CFSTR("VIOSessionDisableEventLowPowerMode");
          if (v19 <= 9)
            v20 = off_1011C8D40[v19];
          v21 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", v20);
          v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v16);
    }

  }
  else
  {
    v22 = objc_msgSend(v3, "addEmptySectionBannerRowWithTitle:", CFSTR("The VIO session is currently neither throttled nor disabled"));
  }

}

void sub_1007D2268(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  MapsDebugTableSection *v9;

  v9 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Far threshold"), CFSTR("70.0"), 2, MapsConfig_RoutePlanningUpdaterFarThresholdInMeters, off_1014B3538);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Horizontal Accuracy Requirement"), CFSTR("100.0"), 2, MapsConfig_RoutePlanningUpdaterHighQualityAccuracyLimit, off_1014B3558);
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Route updating delay"), CFSTR("0.0"), 2, MapsConfig_RoutePlanningUpdaterRouteFrequencyLimit, off_1014B3568);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable route updating"), MapsConfig_RoutePlanningUpdaterEnableRouteUpdating, off_1014B3578);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v9, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable ETA updating"), MapsConfig_RoutePlanningUpdaterEnableETAUpdating, off_1014B3588);
  v7 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("ETA Update frequency (sec)"), CFSTR("120.0"), 2, MapsConfig_RoutePlanningUpdaterETAFrequencyLimit, off_1014B3598);
  v8 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v9, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Route updater threshold (sec)"), CFSTR("15.0"), 2, MapsConfig_RoutePlanningUpdaterThresholdInSeconds, off_1014B3548);

}

void sub_1007D23F0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  MapsDebugTableSection *v23;

  v23 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v23, "addSwitchRowWithTitle:get:set:", CFSTR("Enable EV Routing *"), &stru_1011C86F8, &stru_1011C8718);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v23, "addSwitchRowWithTitle:get:set:", CFSTR("Enable EV Routing Enhancements *"), &stru_1011C8738, &stru_1011C8758);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v23, "addSwitchRowWithTitle:get:set:", CFSTR("Enable VG Suggestions *"), &stru_1011C8778, &stru_1011C8798);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable live updates through MapsSync"), VirtualGarageConfig_EVRoutingUseMapsSyncLiveUpdates[0], VirtualGarageConfig_EVRoutingUseMapsSyncLiveUpdates[1]);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Always show vehicle battery percentage"), MapsConfig_EVRoutingShouldShowBatteryPercentageInVehiclePickers, off_1014B46C8);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Always show last state sync date"), VirtualGarageConfig_EVRoutingForceShowLastSyncDate[0], VirtualGarageConfig_EVRoutingForceShowLastSyncDate[1]);
  v8 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v23, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("OEM app pull interval *"), CFSTR("(seconds)"), 1, &stru_1011C87B8, &stru_1011C87D8);
  v9 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v23, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("Display age of vehicle state if older than *"), CFSTR("(seconds)"), 1, &stru_1011C87F8, &stru_1011C8818);
  v10 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Force show EV Routing onboarding in RP"), MapsConfig_EVRoutingForceShowFeatureDiscovery, off_1014B3858);
  v11 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:get:set:](v23, "addTextFieldRowWithTitle:placeholderText:inputType:get:set:", CFSTR("OEM app intents timeout *"), CFSTR("(seconds)"), 1, &stru_1011C8838, &stru_1011C8858);
  v12 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable live vehicle state streaming during nav"), VirtualGarageConfig_EVRoutingStreamUpdatesDuringNav[0], VirtualGarageConfig_EVRoutingStreamUpdatesDuringNav[1]);
  v13 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v23, "addSwitchRowWithTitle:get:set:", CFSTR("Allowlisting of Model IDs *"), &stru_1011C8878, &stru_1011C8898);
  v14 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable synchronous vehicle state updates"), VirtualGarageConfig_EVRoutingSynchronousVehicleStateUpdate[0], VirtualGarageConfig_EVRoutingSynchronousVehicleStateUpdate[1]);
  v15 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable iAP2 onboarding"), VirtualGarageConfig_EVRoutingEnableIAP2Onboarding[0], VirtualGarageConfig_EVRoutingEnableIAP2Onboarding[1]);
  v16 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Fake CarDisplaySim identifier"), VirtualGarageConfig_EVRoutingUseCarDisplaySimIdentifier[0], VirtualGarageConfig_EVRoutingUseCarDisplaySimIdentifier[1]);
  v17 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable automatic vehicle (de)selection upon connection to CarPlay (for non-LPR users only)"), VirtualGarageConfig_EVRoutingEnableAutomaticVehicleDeselection[0], VirtualGarageConfig_EVRoutingEnableAutomaticVehicleDeselection[1]);
  v18 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable automatic vehicle (de)selection also during active navigation *"), MapsConfig_EVRoutingShouldSelectVehiclesDuringNavigation, off_1014B5158);
  v19 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable automatic vehicle unpairing *"), VirtualGarageConfig_EnableAutomaticVehicleUnpairing[0], VirtualGarageConfig_EnableAutomaticVehicleUnpairing[1]);
  v20 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v23, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable stepping routes"), VirtualGarageConfig_EVRoutingAllowSteppingRoutes[0], VirtualGarageConfig_EVRoutingAllowSteppingRoutes[1]);
  v21 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v23, "addButtonRowWithTitle:action:", CFSTR("Force reload vehicles"), &stru_1011C88B8);
  v22 = -[MapsDebugTableSection addSwitchRowWithTitle:get:set:](v23, "addSwitchRowWithTitle:get:set:", CFSTR("Show dummy garage (UI testing only) *"), &stru_1011C88D8, &stru_1011C88F8);
  -[MapsDebugTableSection setFooter:](v23, "setFooter:", CFSTR("* needs Maps and navd to restart."));

}

BOOL sub_1007D2758(id a1)
{
  int HasValue;

  HasValue = _GEOConfigHasValue(MapsFeaturesConfig_EnableEVRouting[0], MapsFeaturesConfig_EnableEVRouting[1]);
  if (HasValue)
    LOBYTE(HasValue) = GEOConfigGetBOOL(MapsFeaturesConfig_EnableEVRouting[0], MapsFeaturesConfig_EnableEVRouting[1]);
  return HasValue;
}

void sub_1007D2794(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsFeaturesConfig_EnableEVRouting[0], MapsFeaturesConfig_EnableEVRouting[1], a2);
  exit(0);
}

BOOL sub_1007D27B8(id a1)
{
  int HasValue;

  HasValue = _GEOConfigHasValue(MapsFeaturesConfig_EVRoutingEnhancements[0], MapsFeaturesConfig_EVRoutingEnhancements[1]);
  if (HasValue)
    LOBYTE(HasValue) = GEOConfigGetBOOL(MapsFeaturesConfig_EVRoutingEnhancements[0], MapsFeaturesConfig_EVRoutingEnhancements[1]);
  return HasValue;
}

void sub_1007D27F4(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsFeaturesConfig_EVRoutingEnhancements[0], MapsFeaturesConfig_EVRoutingEnhancements[1], a2);
  exit(0);
}

BOOL sub_1007D2818(id a1)
{
  int HasValue;

  HasValue = _GEOConfigHasValue(GEOConfigMapsSuggestionsVirtualGarageSourceEnabled[0], GEOConfigMapsSuggestionsVirtualGarageSourceEnabled[1]);
  if (HasValue)
    LOBYTE(HasValue) = GEOConfigGetBOOL(GEOConfigMapsSuggestionsVirtualGarageSourceEnabled[0], GEOConfigMapsSuggestionsVirtualGarageSourceEnabled[1]);
  return HasValue;
}

void sub_1007D2854(id a1, BOOL a2)
{
  GEOConfigSetBOOL(GEOConfigMapsSuggestionsVirtualGarageSourceEnabled[0], GEOConfigMapsSuggestionsVirtualGarageSourceEnabled[1], a2);
  exit(0);
}

NSString *__cdecl sub_1007D2878(id a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", GEOConfigGetDouble(VirtualGarageConfig_EVRoutingOEMAppPullInterval[0], VirtualGarageConfig_EVRoutingOEMAppPullInterval[1]));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return (NSString *)v3;
}

void sub_1007D28CC(id a1, NSString *a2)
{
  double v2;

  -[NSString doubleValue](a2, "doubleValue");
  GEOConfigSetDouble(VirtualGarageConfig_EVRoutingOEMAppPullInterval[0], VirtualGarageConfig_EVRoutingOEMAppPullInterval[1], v2);
  exit(0);
}

NSString *__cdecl sub_1007D28F4(id a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", GEOConfigGetDouble(MapsConfig_EVRoutingMinimumSyncAgeToDisplay, off_1014B3848));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return (NSString *)v3;
}

void sub_1007D2948(id a1, NSString *a2)
{
  double v2;

  -[NSString doubleValue](a2, "doubleValue");
  GEOConfigSetDouble(MapsConfig_EVRoutingMinimumSyncAgeToDisplay, off_1014B3848, v2);
  exit(0);
}

NSString *__cdecl sub_1007D2970(id a1)
{
  NSNumber *v1;
  void *v2;
  void *v3;

  v1 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", GEOConfigGetDouble(VirtualGarageConfig_EVRoutingIntentsRequestTimeout[0], VirtualGarageConfig_EVRoutingIntentsRequestTimeout[1]));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  return (NSString *)v3;
}

void sub_1007D29C4(id a1, NSString *a2)
{
  double v2;

  -[NSString doubleValue](a2, "doubleValue");
  GEOConfigSetDouble(VirtualGarageConfig_EVRoutingIntentsRequestTimeout[0], VirtualGarageConfig_EVRoutingIntentsRequestTimeout[1], v2);
  exit(0);
}

BOOL sub_1007D29EC(id a1)
{
  if (_GEOConfigHasValue(VirtualGarageConfig_EVRoutingEnableAllowListing[0], VirtualGarageConfig_EVRoutingEnableAllowListing[1]))return GEOConfigGetBOOL(VirtualGarageConfig_EVRoutingEnableAllowListing[0], VirtualGarageConfig_EVRoutingEnableAllowListing[1]);
  else
    return 1;
}

void sub_1007D2A2C(id a1, BOOL a2)
{
  GEOConfigSetBOOL(VirtualGarageConfig_EVRoutingEnableAllowListing[0], VirtualGarageConfig_EVRoutingEnableAllowListing[1], a2);
  exit(0);
}

void sub_1007D2A50(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[VGVirtualGarageService sharedService](VGVirtualGarageService, "sharedService"));
  objc_msgSend(v1, "virtualGarageForceFetchAllVehicles");

}

BOOL sub_1007D2A84(id a1)
{
  int HasValue;

  HasValue = _GEOConfigHasValue(MapsConfig_EVRoutingForceMockGarage, off_1014B4958);
  if (HasValue)
    LOBYTE(HasValue) = GEOConfigGetBOOL(MapsConfig_EVRoutingForceMockGarage, off_1014B4958);
  return HasValue;
}

void sub_1007D2AC0(id a1, BOOL a2)
{
  GEOConfigSetBOOL(MapsConfig_EVRoutingForceMockGarage, off_1014B4958, a2);
  system("killall -9 navd");
  exit(0);
}

void sub_1007D2B20(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](a2, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Alberta (will exit Maps)"), MapsFeaturesConfig_EnableAlberta[0], MapsFeaturesConfig_EnableAlberta[1], 0, &stru_1011C8938);
}

void sub_1007D2B60(id a1, BOOL a2)
{
  exit(0);
}

void sub_1007D2BA0(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable Walking Maneuver Arrows"), MapsConfig_NavigationWalkingShowManeuverArrowsOnMap, off_1014B42D8);
}

void sub_1007D2CB4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1007D2CD8(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Easy parking detection"), NavigationConfig_Parking_EasyParkingDetection[0], NavigationConfig_Parking_EasyParkingDetection[1]));
  objc_msgSend(v2, "setSubtitle:", CFSTR("If on, requires only Bluetooth or CarPlay disconnect. If off, uses CoreRoutine's parked vehicle API."));

}

void sub_1007D2D24(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Min reroute distance"), CFSTR("meters"), 1, NavigationConfig_Parking_BackgroundWalkingRouteMinRerouteDistance[0], NavigationConfig_Parking_BackgroundWalkingRouteMinRerouteDistance[1]);
  v3 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Min time between reroutes"), CFSTR("seconds"), 1, NavigationConfig_Parking_BackgroundWalkingRouteMinTimeBetweenReroutes[0], NavigationConfig_Parking_BackgroundWalkingRouteMinTimeBetweenReroutes[1]);

}

void sub_1007D2DA4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007D2E54;
  v5[3] = &unk_1011AD260;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Simulate Parked Vehicle Event"), v5);
  objc_destroyWeak(&v6);

}

void sub_1007D2E40(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007D2E54(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  id v5;
  id WeakRetained;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v3 = objc_msgSend(v2, "isInNavigatingState");

  if (v3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, &stru_1011C89B8);
  }
  else
  {
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Navigation is not running"), CFSTR("Simulating a parked vehicle event requires navigation to be running."), 1));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, 0));
    objc_msgSend(WeakRetained, "addAction:", v4);

    v5 = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(v5, "presentViewController:animated:completion:", WeakRetained, 1, 0);

  }
}

void sub_1007D2F44(id a1)
{
  notify_post("com.apple.navd.SimulateParkedVehicleEvent");
}

void sub_1007D2FD0(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  MapsDebugTableSection *v13;

  v13 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v13, "addNavigationRowForViewControllerClass:", objc_opt_class(NavSettingsTracePickerController));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v13, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Playback Controls"), CFSTR("PlaybackControls"));
  v4 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v13, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Initial Route Source"), &stru_1011C89F8);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v13, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Load reroutes from trace"), NavigationConfig_TracePlaybackShouldLoadReroutesFromTrace[0], NavigationConfig_TracePlaybackShouldLoadReroutesFromTrace[1]));
  objc_msgSend(v5, "setSubtitle:", CFSTR("Requests reroutes from server if disabled"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v13, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Load ETA updates from trace"), NavigationConfig_TracePlaybackShouldLoadETAUpdatesFromTrace[0], NavigationConfig_TracePlaybackShouldLoadETAUpdatesFromTrace[1]));

  objc_msgSend(v6, "setSubtitle:", CFSTR("Requests ETA updates from server if disabled (\"Load initial route from trace\" setting must be enabled)"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v13, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Update current route when jumping"), NavigationConfig_TracePlaybackShouldUpdateRouteWhenJumping[0], NavigationConfig_TracePlaybackShouldUpdateRouteWhenJumping[1]));

  objc_msgSend(v7, "setSubtitle:", CFSTR("Updates the current route from the navtrace when jumping or scrubbing"));
  v8 = -[MapsDebugTableSection addNavigationRowWithTitle:viewControllerContent:](v13, "addNavigationRowWithTitle:viewControllerContent:", CFSTR("Navigation Updates"), &stru_1011C8A58);
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v13, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Send Analytics"), NavigationConfig_TracePlaybackShouldSendAnalytics[0], NavigationConfig_TracePlaybackShouldSendAnalytics[1]));

  objc_msgSend(v9, "setSubtitle:", CFSTR("For evaluating analytics only; off normally"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v13, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable waypoint reroutes"), NavigationConfig_TracePlaybackShouldLoadWaypointReroutesFromTrace[0], NavigationConfig_TracePlaybackShouldLoadWaypointReroutesFromTrace[1]));

  objc_msgSend(v10, "setSubtitle:", CFSTR("Replays adding & removing waypoints"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v13, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enable network condition simulation"), NavigationConfig_TracePlaybackShouldSimulateNetworkConditions[0], NavigationConfig_TracePlaybackShouldSimulateNetworkConditions[1]));

  objc_msgSend(v11, "setSubtitle:", CFSTR("Simulates network conditions from the trace, if available"));
  v12 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v13, "addNavigationRowForViewControllerClass:", objc_opt_class(NavSettingsTraceSpeedMultiplierController));

}

void sub_1007D31E8(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", 0, &stru_1011C8A18);
}

void sub_1007D3214(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](a2, "addCheckmarkRowsGroupForConfigKey:content:", NavigationConfig_TracePlaybackInitialRouteSource[0], NavigationConfig_TracePlaybackInitialRouteSource[1], &stru_1011C8A38);
}

void sub_1007D3248(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugCheckmarkRowsGroup *v5;

  v5 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Load Route from Trace"), &off_10126EDE8);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Request New Route"), &off_10126EE00);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v5, "addRowWithTitle:value:", CFSTR("Request New Response, Preserve Route"), &off_10126EE18);

}

void sub_1007D32C8(id a1, MapsDebugValuesViewController *a2)
{
  id v2;

  v2 = -[MapsDebugValuesViewController addSectionWithTitle:content:](a2, "addSectionWithTitle:content:", 0, &stru_1011C8A78);
}

void sub_1007D32F4(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v2 = NavigationConfig_TracePlayback_NavigationUpdates_ChangeRoute[0];
  v3 = NavigationConfig_TracePlayback_NavigationUpdates_ChangeRoute[1];
  v6 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Change Route"), v2, v3);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Depart Waypoint"), NavigationConfig_TracePlayback_NavigationUpdates_DepartWaypoint[0], NavigationConfig_TracePlayback_NavigationUpdates_DepartWaypoint[1]);
  -[MapsDebugTableSection setFooter:](v6, "setFooter:", CFSTR("Navigation updates are significant events that occur during navigation. They are typically user triggered, but not always. Playing these updates helps the trace playback reproduce the user's experience as closely as possible when the navigation session was recorded, although individual update types can be disabled for testing purposes."));

}

void sub_1007D337C(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  MapsDebugTableSection *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v2 = NavigationConfig_TraceRecordingEnabled[0];
  v3 = NavigationConfig_TraceRecordingEnabled[1];
  v4 = a2;
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), v2, v3);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Record Route Preview Guidance"), NavigationConfig_TraceRecordingRoutePreviewGuidanceEnabled[0], NavigationConfig_TraceRecordingRoutePreviewGuidanceEnabled[1]);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:defaultsKey:](v4, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Show Bookmark Alert"), CFSTR("TraceBookmarksAlert"));
  v8 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Copy Traces To CrashReporter"), NavigationConfig_TraceRecordingCopyToCrashReporter[0], NavigationConfig_TraceRecordingCopyToCrashReporter[1]);
  v11 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v4, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Create Symbolic Link to Latest Trace"), NavigationConfig_TraceRecordingCreateSymbolicLinkToLatestTrace[0], NavigationConfig_TraceRecordingCreateSymbolicLinkToLatestTrace[1]));
  objc_msgSend(v11, "setSubtitle:", CFSTR("If enabled, LatestTrace.navtrace will point to the last recorded navtrace"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[MNFilePaths navTracesDirectoryPath](MNFilePaths, "navTracesDirectoryPath"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Traces are recorded to: %@"), v9));
  -[MapsDebugTableSection setFooter:](v4, "setFooter:", v10);

}

void sub_1007D34BC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Enabled"), NavigationConfig_SimulationEnabled[0], NavigationConfig_SimulationEnabled[1]);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Prompt to Simulate"), NavigationConfig_SimulationShouldShowPrompt[0], NavigationConfig_SimulationShouldShowPrompt[1]);
  v4 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v5, "addNavigationRowForViewControllerClass:", objc_opt_class(NavigationSettingsSimulationTypeController));

}

void sub_1007D370C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1007D3728(id a1, AVAsset *a2, AVAudioMix *a3, NSDictionary *a4)
{
  AVAsset *v4;
  _QWORD block[4];
  AVAsset *v6;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007D37A0;
  block[3] = &unk_1011AC860;
  v6 = a2;
  v4 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1007D37A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_opt_class(AVURLAsset);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URL"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "path"));
    GEOConfigSetString(MapsConfig_MapsARSessionPlaybackFilePathKey, off_1014B55D8, v4);

  }
  else
  {
    _GEOConfigRemoveValue(MapsConfig_MapsARSessionPlaybackFilePathKey, off_1014B55D8);
  }
}

void sub_1007D3AD0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1007D3AF4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id location;

  v3 = a2;
  objc_initWeak(&location, v3);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1007D3CE0;
  v6[3] = &unk_1011C8B40;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  objc_copyWeak(&v8, &location);
  v4 = objc_msgSend(v3, "addCheckmarkRowsGroupForConfigKey:content:get:set:change:", NavigationConfig_SimulationType[0], NavigationConfig_SimulationType[1], &stru_1011C8B18, 0, 0, v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NavigationSettingsSimulationTypeController _descriptionForSimulationType:](NavigationSettingsSimulationTypeController, "_descriptionForSimulationType:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v3, "setFooter:", v5);

  objc_destroyWeak(&v8);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);

}

void sub_1007D3BF8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1007D3C20(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  MapsDebugCheckmarkRowsGroup *v7;

  v7 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Follow Initial Route"), &off_10126EE00);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Follow Current Route"), &off_10126EE18);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Follow Alternate Route"), &off_10126EF38);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Follow Current Route, then Off Route"), &off_10126EF50);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v7, "addRowWithTitle:value:", CFSTR("Old"), &off_10126EF68);

}

void sub_1007D3CE0(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  id v5;
  id *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;

  v15 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v15, v4) & 1) != 0)
    {
      v5 = objc_msgSend(v15, "integerValue");
      v6 = (id *)(a1 + 40);
      v7 = objc_loadWeakRetained((id *)(a1 + 40));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "displayingViewController"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tableView"));

      +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 0);
      objc_msgSend(v9, "beginUpdates");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "footerViewForSection:", 0));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NavigationSettingsSimulationTypeController _descriptionForSimulationType:](NavigationSettingsSimulationTypeController, "_descriptionForSimulationType:", v5));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "textLabel"));
      objc_msgSend(v12, "setText:", v11);

      objc_msgSend(v10, "sizeToFit");
      objc_msgSend(v9, "endUpdates");
      +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 1);
      v13 = objc_loadWeakRetained(v6);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "displayingViewController"));
      objc_msgSend(v14, "rebuildSections");

      objc_msgSend(WeakRetained, "reloadData");
    }
  }

}

void sub_1007D3E48(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  MapsDebugTableSection *v4;
  void *v5;
  id v6;

  v2 = NavigationConfig_Simulation_FollowCurrentRouteThenOffRoute_OffRouteAfterThreshold[0];
  v3 = NavigationConfig_Simulation_FollowCurrentRouteThenOffRoute_OffRouteAfterThreshold[1];
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Go off route after"), CFSTR("meters"), 1, v2, v3));
  objc_msgSend(v5, "setSubtitle:", CFSTR("Follow the route for this distance, then go off route at the next junction."));

  v6 = (id)objc_claimAutoreleasedReturnValue(-[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v4, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Target distance from route"), CFSTR("meters"), 1, NavigationConfig_Simulation_FollowCurrentRouteThenOffRoute_OffRouteDistanceTarget[0], NavigationConfig_Simulation_FollowCurrentRouteThenOffRoute_OffRouteDistanceTarget[1]));
  objc_msgSend(v6, "setSubtitle:", CFSTR("Try to go at least this distance away from the route."));

}

void sub_1007D3F04(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](a2, "addCheckmarkRowsGroupForConfigKey:content:", NavigationConfig_SimulationSearchForParking[0], NavigationConfig_SimulationSearchForParking[1], &stru_1011C8BC8);
}

void sub_1007D3F38(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  MapsDebugCheckmarkRowsGroup *v6;

  v6 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("None"), &off_10126EDE8);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("Before arrival"), &off_10126EE00);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("After arrival"), &off_10126EE18);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v6, "addRowWithTitle:value:", CFSTR("After arrival, then return to destination"), &off_10126EF38);

}

void sub_1007D3FD8(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v2 = NavigationConfig_SimulationStartWaypoint[0];
  v3 = NavigationConfig_SimulationStartWaypoint[1];
  v6 = a2;
  v4 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyInteger:", CFSTR("Starting waypoint"), CFSTR("waypoint index"), 1, v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Distance ahead of waypoint"), CFSTR("meters"), 1, NavigationConfig_SimulationStartDistanceBeforeWaypoint[0], NavigationConfig_SimulationStartDistanceBeforeWaypoint[1]);
  -[MapsDebugTableSection setFooter:](v6, "setFooter:", CFSTR("Starts simulation from any waypoint on the route and at any distance before the waypoint."));

}

void sub_1007D4078(id a1, MapsDebugTableSection *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  MapsDebugTableSection *v6;

  v2 = NavigationConfig_SimulationMoveToIntermediateWaypoints[0];
  v3 = NavigationConfig_SimulationMoveToIntermediateWaypoints[1];
  v6 = a2;
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v6, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Move to intermediate waypoint"), v2, v3);
  v5 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:](v6, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyDouble:", CFSTR("Duration to wait at waypoint"), CFSTR("seconds"), 1, NavigationConfig_SimulationWaitAtWaypointDuration[0], NavigationConfig_SimulationWaitAtWaypointDuration[1]);
  -[MapsDebugTableSection setFooter:](v6, "setFooter:", CFSTR("After reaching the end of a leg, moves to the waypoint location and waits for a specified duration before proceeding to the start of the next leg. 0 to wait forever. Note that simulation will *always* move to EV charging station waypoints, regardless of the \"Move to intermediate waypoint\" setting."));

}

void sub_1007D410C(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](a2, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Keep simulated location after ending navigation"), NavigationConfig_SimulationKeepLocationAfterEndingNavigation[0], NavigationConfig_SimulationKeepLocationAfterEndingNavigation[1]);
}

void sub_1007D4140(id a1, MapsDebugTableSection *a2)
{
  id v2;
  void *v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addNavigationRowForViewControllerClass:](v5, "addNavigationRowForViewControllerClass:", objc_opt_class(NavigationSettingsSimulationSpeedMultiplierController));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(v3, "setTitle:", CFSTR("Speed multiplier"));
  v4 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:](v5, "addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Minimum speed"), &stru_1011C8C68, NavigationConfig_SimulationMinimumSpeed[0], NavigationConfig_SimulationMinimumSpeed[1], 0, 0.0, 10.0);

}

NSString *__cdecl sub_1007D41D4(id a1, float a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%0.1f m/s (%.0f mph)"), a2, a2 * 3600.0 * 0.000621371192);
}

void sub_1007D4220(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:](a2, "addSliderRowWithTitle:subtitleStringHandler:min:max:geoConfigKeyDouble:changeHandler:", CFSTR("Speed override"), &stru_1011C8CA8, NavigationConfig_SimulationSpeedOverride[0], NavigationConfig_SimulationSpeedOverride[1], 0, 0.0, 40.0);
}

NSString *__cdecl sub_1007D426C(id a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 <= 0.0)
    return (NSString *)CFSTR("Default");
  else
    return (NSString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%0.1f m/s (%.0f mph)"), a2, a2 * 3600.0 * 0.000621371192, v2, v3));
}

void sub_1007D42D0(id a1, BOOL a2)
{
  _BOOL8 v2;

  v2 = a2;
  if (!a2 || GEOConfigGetInteger(NavigationConfig_SimulationType[0], NavigationConfig_SimulationType[1]) != -1)
    GEOConfigSetBOOL(NavigationConfig_SimulationSimulateGeoFences[0], NavigationConfig_SimulationSimulateGeoFences[1], v2);
}

void sub_1007D4358(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addCheckmarkRowsGroupForConfigKey:content:](a2, "addCheckmarkRowsGroupForConfigKey:content:", NavigationConfig_SimulationSpeedMultiplier[0], NavigationConfig_SimulationSpeedMultiplier[1], &stru_1011C8D08);
}

void sub_1007D438C(id a1, MapsDebugCheckmarkRowsGroup *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugCheckmarkRowsGroup *v8;

  v8 = a2;
  v2 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("0.5x"), &off_101274CA8);
  v3 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("1x"), &off_10126EF80);
  v4 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("2x"), &off_10126EF98);
  v5 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("3x"), &off_10126EFB0);
  v6 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("4x"), &off_10126EFC8);
  v7 = -[MapsDebugCheckmarkRowsGroup addRowWithTitle:value:](v8, "addRowWithTitle:value:", CFSTR("5x"), &off_10126EFE0);

}

void sub_1007D446C(uint64_t a1)
{
  sub_1007D44D8();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PHVideoRequestOptions");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1014D33E0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np("Unable to find class %s", "PHVideoRequestOptions");
    sub_1007D44D8();
  }
}

void sub_1007D44D8()
{
  char *v0;
  char *v1;
  __int128 v2;
  uint64_t v3;

  v1 = 0;
  if (!qword_1014D33D8)
  {
    v2 = off_1011C8D28;
    v3 = 0;
    qword_1014D33D8 = _sl_dlopen(&v2, &v1);
    v0 = v1;
    if (qword_1014D33D8)
    {
      if (!v1)
        return;
    }
    else
    {
      v0 = (char *)abort_report_np("%s", v1);
    }
    free(v0);
  }
}

Class sub_1007D4594(uint64_t a1)
{
  Class result;
  PassThroughWindow *v3;
  SEL v4;
  id v5;
  CGPoint v6;

  sub_1007D44D8();
  result = objc_getClass("PHImageManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1014D33E8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (PassThroughWindow *)abort_report_np("Unable to find class %s", "PHImageManager");
    return (Class)-[PassThroughWindow hitTest:withEvent:](v3, v4, v6, v5);
  }
  return result;
}

void sub_1007D46A0(id a1)
{
  void *v1;
  void *v2;
  id v3;

  if (objc_opt_class(CNContactContentViewController))
  {
    if (objc_opt_class(CNMonogrammer))
    {
      v3 = objc_alloc_init((Class)NSMutableArray);
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactContentViewController descriptorForRequiredKeys](CNContactContentViewController, "descriptorForRequiredKeys"));
      objc_msgSend(v3, "addObject:", v1);

      v2 = (void *)objc_claimAutoreleasedReturnValue(+[CNMonogrammer descriptorForRequiredKeysIncludingImage:](CNMonogrammer, "descriptorForRequiredKeysIncludingImage:", 1));
      objc_msgSend(v3, "addObject:", v2);

      +[MSPSharedTripContact setAdditionalKeyDescriptorsForContactFetching:](MSPSharedTripContact, "setAdditionalKeyDescriptorsForContactFetching:", v3);
    }
  }
}

void sub_1007DA85C(id *a1)
{

}

void sub_1007DBBA0(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_msgSend(v3, "setAutocorrectionType:", 1);
  objc_msgSend(v3, "setAutocapitalizationType:", 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_maps_defaultCollectionItemTitle"));
  objc_msgSend(v3, "setText:", v4);

}

uint64_t sub_1007DBC04(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1007DBC18(uint64_t a1)
{
  unint64_t UInteger;
  uint64_t v3;
  const __CFString *v4;
  __CFString *v5;
  __CFString *v6;

  if (*(_QWORD *)(a1 + 40))
  {
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "text"));
    UInteger = GEOConfigGetUInteger(MapsConfig_CollectionMapItemNameMaximumLength, off_1014B4A28);
    if ((unint64_t)-[__CFString length](v5, "length") <= UInteger)
    {
      v4 = v5;
    }
    else
    {
      v3 = objc_claimAutoreleasedReturnValue(-[__CFString substringWithRange:](v5, "substringWithRange:", 0, UInteger));

      v4 = (const __CFString *)v3;
    }
    v6 = (__CFString *)v4;
    if (!v4)
      v4 = &stru_1011EB268;
    (*(void (**)(_QWORD, const __CFString *))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v4);

  }
}

id MapsAnalyticsEventValueForClusteredSegment(void *a1)
{
  id v1;
  id v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  v2 = objc_alloc_init((Class)NSMutableArray);
  if (objc_msgSend(v1, "rideOptionsCount"))
  {
    v3 = 0;
    do
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "transitLineForRideOption:", v3));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), objc_msgSend(v4, "muid")));
      objc_msgSend(v2, "addObject:", v5);

      ++v3;
    }
    while (v3 < (unint64_t)objc_msgSend(v1, "rideOptionsCount"));
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsJoinedByString:", CFSTR(",")));

  return v6;
}

void sub_1007DEA5C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x370], 8);
  _Block_object_dispose(&STACK[0x770], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007DEB24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1007DEB34(uint64_t a1)
{

}

void sub_1007DEB3C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  CLLocationDegrees latitude;
  CLLocationDegrees longitude;
  uint64_t v8;
  id v9;
  MKMapRect v10;
  MKCoordinateRegion v11;

  v9 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setSuggestionType:", 4);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapRegion"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mapRegion"));
    v10.origin.x = GEOMapRectForMapRegion(v4, v5);
    v11 = MKCoordinateRegionForMapRect(v10);
    latitude = v11.center.latitude;
    longitude = v11.center.longitude;

    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(CLLocationDegrees *)(v8 + 32) = latitude;
    *(CLLocationDegrees *)(v8 + 40) = longitude;
  }

}

void sub_1007DEBC8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setSuggestionType:", 5);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "endWaypoint"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "endWaypoint"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "geoMapItem"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  if (v3)
  {
    if (!objc_msgSend(v3, "isCurrentLocation")
      || (v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "startWaypoint")),
          v3,
          (v3 = (void *)v8) != 0))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "geoMapItem"));

      if (v9)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "geoMapItem"));
        objc_msgSend(v10, "coordinate");
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        *(_QWORD *)(v11 + 32) = v12;
        *(_QWORD *)(v11 + 40) = v13;

      }
    }
  }

}

void sub_1007DECB8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setSuggestionType:", 6);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "geoMapItem"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "geoMapItem"));
    objc_msgSend(v4, "coordinate");
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v7;

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "geoMapItem"));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "geoMapItem"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_childItems"));
  objc_msgSend(*(id *)(a1 + 32), "setIsProminentResult:", objc_msgSend(v12, "count") != 0);

}

void sub_1007DFA30(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  _QWORD *v5;
  _QWORD v6[3];
  char v7;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2020000000;
  v7 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1007DFB04;
  v3[3] = &unk_1011C8E80;
  v5 = v6;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(v2, "populateTapEventForPinType:tapEventSpecifierBlock:", 1, v3);

  _Block_object_dispose(v6, 8);
}

void sub_1007DFAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1007DFB04(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t v6;
  int v7;
  void *v13;
  void *v14;
  void *v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(unsigned __int8 *)(v6 + 24);
  if (!*(_BYTE *)(v6 + 24))
  {
    *a2 = objc_msgSend(*(id *)(a1 + 32), "resultIndex");
    *a3 = 2;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
    *a4 = objc_msgSend(v13, "_muid");

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "place"));
    *a5 = objc_msgSend(v15, "localSearchProviderID");

    *a6 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  return v7 == 0;
}

void sub_1007DFBD4(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2020000000;
  v6[3] = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOAPSharedStateData sharedData](GEOAPSharedStateData, "sharedData"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1007DFCA8;
  v3[3] = &unk_1011C8E80;
  v5 = v6;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(v2, "populateTapEventForPinType:tapEventSpecifierBlock:", 2, v3);

  _Block_object_dispose(v6, 8);
}

void sub_1007DFC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1007DFCA8(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4, _DWORD *a5, _BYTE *a6)
{
  unint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v13 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v12 < (unint64_t)v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
    *a2 = objc_msgSend(v14, "resultIndex");
    *a3 = 2;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "mapItem"));
    *a4 = objc_msgSend(v15, "_muid");

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "mapItem"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "place"));
    *a5 = objc_msgSend(v17, "localSearchProviderID");

    *a6 = 0;
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

  }
  return v12 < (unint64_t)v13;
}

id sub_1007E0288(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "count");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (unint64_t)result >= *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  return result;
}

id sub_1007E0370(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "count");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result != 0;
  return result;
}

void sub_1007E044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007E0464(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 105);
  return result;
}

void sub_1007E0568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1007E0584(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1007E0594(uint64_t a1)
{

}

void sub_1007E059C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_1007E05DC(id a1, _MKMapItemPhotosAttribution *a2, unint64_t a3)
{
  _MKMapItemPhotosAttribution *v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[_MKMapItemPhotosAttribution captionDisplayName](v3, "captionDisplayName"));
  v5 = objc_msgSend(v4, "length");

  if (v5)
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[_MKMapItemPhotosAttribution captionDisplayName](v3, "captionDisplayName"));
  else
    v6 = 0;

  return v6;
}

void sub_1007E06E8(uint64_t a1)
{
  uint64_t v1;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  os_signpost_id_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  char *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[5];
  id v22[4];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 136) && !*(_BYTE *)(v1 + 106))
  {
    *(_BYTE *)(v1 + 106) = 1;
    v3 = sub_10043325C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_10043325C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = os_signpost_id_generate(v6);

    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, v7, "BatchRequesting", "", buf, 2u);
    }

    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 24);
    v10 = 5;
    if (!v9)
      v10 = 4;
    v11 = *(void **)(v8 + OBJC_IVAR___UGCPlaceDataPhotoListDataProvider__serialQueue[v10]);
    if ((unint64_t)v11 >= *(_QWORD *)(v8 + 48) - (_QWORD)v9)
      v12 = (void *)(*(_QWORD *)(v8 + 48) - (_QWORD)v9);
    else
      v12 = v11;
    v13 = sub_10043325C();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = (char *)os_signpost_id_generate(v14);

    v16 = sub_10043325C();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    v18 = v17;
    if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v15, "StartingBatchRequest", "", buf, 2u);
    }

    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(void **)(v19 + 88);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1007E08FC;
    v21[3] = &unk_1011C8EE8;
    v21[4] = v19;
    v22[1] = v15;
    objc_copyWeak(v22, (id *)(a1 + 40));
    v22[2] = v9;
    v22[3] = v12;
    objc_msgSend(v20, "fetchPhotosWithRange:completion:", v9, v12, v21);
    objc_destroyWeak(v22);
  }
}

void sub_1007E08E8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1007E08FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13[2];
  __int128 v14;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 96);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1007E09E4;
  v10[3] = &unk_1011B2B78;
  v13[1] = *(id *)(a1 + 48);
  objc_copyWeak(v13, (id *)(a1 + 40));
  v14 = *(_OWORD *)(a1 + 56);
  v11 = v6;
  v12 = v5;
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, v10);

  objc_destroyWeak(v13);
}

void sub_1007E09E4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  _BYTE *WeakRetained;
  void *v7;
  uint64_t v8;
  uint8_t v9[16];

  v2 = sub_10043325C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 56);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)v9 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "EndingBatchRequest", "", v9, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[106] = 0;
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      objc_msgSend(WeakRetained, "_failWithError:range:", v8, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
    else
      objc_msgSend(WeakRetained, "_processResult:", *(_QWORD *)(a1 + 40));
  }

}

void sub_1007E1028(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Unwind_Resume(a1);
}

void sub_1007E1058(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        *(_BYTE *)(*(_QWORD *)(a1 + 40) + 105) |= objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "needsObfuscationWhenRenderedInFullScreen", (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_1007E1164(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "mutableCopy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1007E11A4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "copy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;

}

void sub_1007E11E4(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 128));
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "photoList"));
  objc_msgSend(WeakRetained, "photoViewerDataProvider:didUpdateWithPhotos:", v2, v3);

}

void sub_1007E1300(_QWORD *a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 128));
  objc_msgSend(WeakRetained, "photoViewerDataProvider:failedBatchRequestWithError:range:", a1[4], a1[5], a1[6], a1[7]);

}

uint64_t sub_1007E140C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1007E14D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1007E14EC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1007E1668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1007E1684(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_1007E2B68()
{
  if (qword_1014D3400 != -1)
    dispatch_once(&qword_1014D3400, &stru_1011C91F0);
  return (id)qword_1014D33F8;
}

double sub_1007E3F4C(id a1, $F24F406B2B787EFB06265DBA3D28CBD5 a2)
{
  id v2;
  double v3;
  double v4;

  v2 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", a2.var0, a2.var1);
  +[CoreLocationUndulationProvider undulationAtLocation:](CoreLocationUndulationProvider, "undulationAtLocation:", v2);
  v4 = v3;

  return v4;
}

double sub_1007E3FB0(id a1, $F24F406B2B787EFB06265DBA3D28CBD5 a2)
{
  id v2;
  double v3;
  double v4;

  v2 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", a2.var0, a2.var1);
  +[CoreLocationUndulationProvider undulationAtLocation:](CoreLocationUndulationProvider, "undulationAtLocation:", v2);
  v4 = v3;

  return v4;
}

BOOL sub_1007E43FC(id a1, MNGuidanceARInfo *a2, unint64_t a3, BOOL *a4)
{
  MNGuidanceARInfo *v4;
  unsigned __int8 v5;

  v4 = a2;
  if (-[MNGuidanceARInfo eventType](v4, "eventType") == 2)
    v5 = -[MNGuidanceARInfo isArrival](v4, "isArrival");
  else
    v5 = 0;

  return v5;
}

BOOL sub_1007E4484(id a1, MNGuidanceARInfo *a2, unint64_t a3, BOOL *a4)
{
  MNGuidanceARInfo *v4;
  unsigned int v5;

  v4 = a2;
  if (-[MNGuidanceARInfo eventType](v4, "eventType") == 2)
    v5 = !-[MNGuidanceARInfo isArrival](v4, "isArrival");
  else
    LOBYTE(v5) = 0;

  return v5;
}

BOOL sub_1007E450C(id a1, MNGuidanceARInfo *a2, unint64_t a3, BOOL *a4)
{
  return -[MNGuidanceARInfo eventType](a2, "eventType", a3, a4) == 1;
}

int64_t sub_1007E4FFC(id a1, MNGuidanceARInfo *a2, MNGuidanceARInfo *a3)
{
  MNGuidanceARInfo *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[MNGuidanceARInfo stepIndex](a2, "stepIndex")));
  v6 = -[MNGuidanceARInfo stepIndex](v4, "stepIndex");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
  v8 = objc_msgSend(v5, "compare:", v7);

  return (int64_t)v8;
}

MNGuidanceARInfo *__cdecl sub_1007E5090(id a1, PedestrianARVKFeatureMapEntry *a2, unint64_t a3)
{
  return -[PedestrianARVKFeatureMapEntry guidanceInfo](a2, "guidanceInfo", a3);
}

int64_t sub_1007E5098(id a1, MNGuidanceARInfo *a2, MNGuidanceARInfo *a3)
{
  MNGuidanceARInfo *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[MNGuidanceARInfo stepIndex](a2, "stepIndex")));
  v6 = -[MNGuidanceARInfo stepIndex](v4, "stepIndex");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
  v8 = objc_msgSend(v5, "compare:", v7);

  return (int64_t)v8;
}

NSString *__cdecl sub_1007E512C(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  return -[MNGuidanceARInfo mapsShortDescription](a2, "mapsShortDescription", a3);
}

NSString *__cdecl sub_1007E5134(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  return -[MNGuidanceARInfo mapsShortDescription](a2, "mapsShortDescription", a3);
}

NSString *__cdecl sub_1007E513C(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  return -[MNGuidanceARInfo mapsShortDescription](a2, "mapsShortDescription", a3);
}

NSString *__cdecl sub_1007E5144(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  return -[MNGuidanceARInfo mapsShortDescription](a2, "mapsShortDescription", a3);
}

int64_t sub_1007E514C(id a1, MNGuidanceARInfo *a2, MNGuidanceARInfo *a3)
{
  MNGuidanceARInfo *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[MNGuidanceARInfo stepIndex](a2, "stepIndex")));
  v6 = -[MNGuidanceARInfo stepIndex](v4, "stepIndex");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
  v8 = objc_msgSend(v5, "compare:", v7);

  return (int64_t)v8;
}

MNGuidanceARInfo *__cdecl sub_1007E51E0(id a1, PedestrianARVKFeatureMapEntry *a2, unint64_t a3)
{
  return -[PedestrianARVKFeatureMapEntry guidanceInfo](a2, "guidanceInfo", a3);
}

int64_t sub_1007E51E8(id a1, MNGuidanceARInfo *a2, MNGuidanceARInfo *a3)
{
  MNGuidanceARInfo *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[MNGuidanceARInfo stepIndex](a2, "stepIndex")));
  v6 = -[MNGuidanceARInfo stepIndex](v4, "stepIndex");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v6));
  v8 = objc_msgSend(v5, "compare:", v7);

  return (int64_t)v8;
}

NSString *__cdecl sub_1007E527C(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  return -[MNGuidanceARInfo mapsShortDescription](a2, "mapsShortDescription", a3);
}

NSString *__cdecl sub_1007E5284(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  return -[MNGuidanceARInfo mapsShortDescription](a2, "mapsShortDescription", a3);
}

NSString *__cdecl sub_1007E528C(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  return -[MNGuidanceARInfo mapsShortDescription](a2, "mapsShortDescription", a3);
}

NSString *__cdecl sub_1007E5294(id a1, MNGuidanceARInfo *a2, unint64_t a3)
{
  return -[MNGuidanceARInfo mapsShortDescription](a2, "mapsShortDescription", a3);
}

BOOL sub_1007E529C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;

  v3 = objc_msgSend(a2, "stepIndex");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "guidanceInfo"));
  v5 = v3 == objc_msgSend(v4, "stepIndex");

  return v5;
}

BOOL sub_1007E52E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;

  v3 = objc_msgSend(a2, "stepIndex");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "guidanceInfo"));
  v5 = v3 == objc_msgSend(v4, "stepIndex");

  return v5;
}

void sub_1007E5CE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARVKRenderer");
  v2 = (void *)qword_1014D33F8;
  qword_1014D33F8 = (uint64_t)v1;

}

id sub_1007E5E0C()
{
  if (qword_1014D3410 != -1)
    dispatch_once(&qword_1014D3410, &stru_1011C9238);
  return (id)qword_1014D3408;
}

void sub_1007E6160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007E619C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  void *v12;
  int v13;
  id v14;
  __int16 v15;
  id v16;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v8 = sub_1007E5E0C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
    if (!v6)
    {
      if (v10)
      {
        v13 = 134349315;
        v14 = WeakRetained;
        v15 = 2113;
        v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%{public}p] Successfully got location update: %{private}@, submitting rev geo now", (uint8_t *)&v13, 0x16u);
      }

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_revGeoTicketForCurrentLocation:traits:completionHandler:networkActivityHandler:", v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
      objc_msgSend(WeakRetained, "setRevGeoTicket:", v12);
      goto LABEL_10;
    }
    if (v10)
    {
      v13 = 134349314;
      v14 = WeakRetained;
      v15 = 2112;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%{public}p] Error getting location update: %@", (uint8_t *)&v13, 0x16u);
    }

    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[Result resultWithError:](Result, "resultWithError:", v6));
      (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
LABEL_10:

    }
  }

}

void sub_1007E6884(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CurrentLocationMapServiceTicket");
  v2 = (void *)qword_1014D3408;
  qword_1014D3408 = (uint64_t)v1;

}

void sub_1007E6BA8(id a1)
{
  MapsOfflineUIHelper *v1;
  void *v2;

  v1 = objc_alloc_init(MapsOfflineUIHelper);
  v2 = (void *)qword_1014D3418;
  qword_1014D3418 = (uint64_t)v1;

}

void sub_1007E6ED8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;
  id *v6;

  v6 = v2;
  objc_destroyWeak(v6);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 104));
  _Unwind_Resume(a1);
}

void sub_1007E6F30(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_reloadSubscriptions");
    WeakRetained = v2;
  }

}

void sub_1007E6F60(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_reloadLastUpdatedDates");
    WeakRetained = v2;
  }

}

void sub_1007E6F90(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_reloadLastUpdatedDates");
    WeakRetained = v2;
  }

}

void sub_1007E6FC0(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_reloadPairedDeviceSubscriptionInfos");
    objc_msgSend(v2, "setAvailableDiskSpaceForPairedDevice:", 0);
    WeakRetained = v2;
  }

}

uint64_t sub_1007E76A4(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if (a2)
      v4 = *(_QWORD *)(a1 + 32);
    else
      v4 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v4);
  }
  return result;
}

void sub_1007E7968(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;

  v4 = a3;
  if (v4)
  {
    v5 = sub_100431D5C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      v8 = 138412546;
      v9 = v7;
      v10 = 2112;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error restoring expired subscription: %@, error: %@", (uint8_t *)&v8, 0x16u);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1007E7E04(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1007E7E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  id WeakRetained;

  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a2));
      objc_msgSend(WeakRetained, "setAvailableDiskSpaceForPairedDevice:", v5);

      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }

  }
}

void sub_1007E8318(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1007E8350(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id WeakRetained;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v6 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v7)
    {
      v9 = sub_100431D5C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[MapsOfflineUIHelper] refresh last update for paired date error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 64), a2);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "lastUpdatedDateForPairedDeviceDidChange:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
    }
  }

}

void sub_1007E845C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id WeakRetained;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v6 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v7)
    {
      v9 = sub_100431D5C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[MapsOfflineUIHelper] refresh last update date error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 56), a2);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "lastUpdatedDateDidChange:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
    }
  }

}

void sub_1007E8708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007E8734(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  NSObject *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id obj;
  uint64_t v30;
  _QWORD block[4];
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  _QWORD v36[4];
  NSObject *v37;
  void *v38;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  id v47;

  v5 = a2;
  v6 = a3;
  v30 = a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v6)
    {
      v8 = sub_100431D5C();
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v47 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[MapsOfflineUIHelper] subscription fetch error: %@", buf, 0xCu);
      }

      v10 = *(_QWORD *)(v30 + 40);
      if (v10)
        (*(void (**)(uint64_t, _QWORD, id))(v10 + 16))(v10, 0, v6);
    }
    else
    {
      v11 = sub_10039E080(v5, &stru_1011C9300);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      objc_msgSend(WeakRetained, "setSubscriptions:", v12);

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "subscriptions"));
      v14 = objc_msgSend(v13, "count");

      if (!v14)
        GEOConfigSetBOOL(MapsConfig_OfflineOnlyData, off_1014B4C08, 0);
      v28 = v5;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array", 0));
      v16 = dispatch_group_create();
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v17 = WeakRetained;
      obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "subscriptions"));
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
      if (v18)
      {
        v19 = v18;
        v20 = *(_QWORD *)v42;
        do
        {
          for (i = 0; i != v19; i = (char *)i + 1)
          {
            if (*(_QWORD *)v42 != v20)
              objc_enumerationMutation(obj);
            v22 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
            dispatch_group_enter(v16);
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "subscriptionManager"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "identifier"));
            v36[0] = _NSConcreteStackBlock;
            v36[1] = 3221225472;
            v36[2] = sub_1007E8AB8;
            v36[3] = &unk_1011C9328;
            v37 = v16;
            v40 = *(id *)(v30 + 40);
            v38 = v22;
            v39 = v15;
            objc_msgSend(v23, "fetchStateForSubscriptionWithIdentifier:callbackQueue:completionHandler:", v24, &_dispatch_main_q, v36);

          }
          v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
        }
        while (v19);
      }

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1007E8D4C;
      block[3] = &unk_1011B45F8;
      v32 = v15;
      v33 = v17;
      WeakRetained = v17;
      v25 = *(id *)(v30 + 40);
      v34 = *(_QWORD *)(v30 + 32);
      v35 = v25;
      v26 = v15;
      dispatch_group_notify(v16, (dispatch_queue_t)&_dispatch_main_q, block);

      v6 = v27;
      v5 = v28;
    }
  }

}

BOOL sub_1007E8A9C(id a1, GEOMapDataSubscription *a2, unint64_t a3, BOOL *a4)
{
  return ((unint64_t)-[GEOMapDataSubscription dataTypes](a2, "dataTypes", a3, a4) >> 10) & 1;
}

void sub_1007E8AB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  MapDataSubscriptionInfo *v10;
  id v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  int v21;
  id v22;
  __int16 v23;
  id v24;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_100431D5C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v21 = 138412290;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[MapsOfflineUIHelper] subscription state error: %@", (uint8_t *)&v21, 0xCu);
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 56);
    if (v9)
      (*(void (**)(uint64_t, _QWORD, id))(v9 + 16))(v9, 0, v6);
  }
  else
  {
    v10 = -[MapDataSubscriptionInfo initWithSubscription:state:]([MapDataSubscriptionInfo alloc], "initWithSubscription:state:", *(_QWORD *)(a1 + 40), v5);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v10);
    switch((unint64_t)objc_msgSend(v5, "loadState"))
    {
      case 0uLL:
        v11 = sub_100431D5C();
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          goto LABEL_16;
        v13 = *(void **)(a1 + 40);
        v21 = 138412546;
        v22 = v13;
        v23 = 2112;
        v24 = v5;
        v14 = "[MapsOfflineUIHelper] found not fully loaded subscription: %@, state: %@";
        break;
      case 1uLL:
        v15 = sub_100431D5C();
        v12 = objc_claimAutoreleasedReturnValue(v15);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          goto LABEL_16;
        v16 = *(void **)(a1 + 40);
        v21 = 138412546;
        v22 = v16;
        v23 = 2112;
        v24 = v5;
        v14 = "[MapsOfflineUIHelper] found out of date subscription: %@, state: %@";
        break;
      case 2uLL:
        v17 = sub_100431D5C();
        v12 = objc_claimAutoreleasedReturnValue(v17);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          goto LABEL_16;
        v18 = *(void **)(a1 + 40);
        v21 = 138412546;
        v22 = v18;
        v23 = 2112;
        v24 = v5;
        v14 = "[MapsOfflineUIHelper] found fully loaded subscription: %@, state: %@";
        break;
      case 3uLL:
        v19 = sub_100431D5C();
        v12 = objc_claimAutoreleasedReturnValue(v19);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          goto LABEL_16;
        v20 = *(void **)(a1 + 40);
        v21 = 138412546;
        v22 = v20;
        v23 = 2112;
        v24 = v5;
        v14 = "[MapsOfflineUIHelper] found fully-loaded, incompatible subscription: %@, state: %@";
        break;
      default:
        goto LABEL_17;
    }
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v21, 0x16u);
LABEL_16:

LABEL_17:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

  }
}

void sub_1007E8D4C(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = *(id *)(a1 + 32);
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (!v1)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_22;
  }
  v2 = v1;
  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)v31;
  v28 = GEOMapDataSubscriptionDownloadReasonKey;
  v27 = GEOMapDataSubscriptionProgressDownloadReasonForcedUpdate;
  do
  {
    for (i = 0; i != v2; i = (char *)i + 1)
    {
      if (*(_QWORD *)v31 != v5)
        objc_enumerationMutation(obj);
      v7 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "state"));
      if (objc_msgSend(v8, "loadState") == (id)1)
      {

      }
      else
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "state"));
        v10 = objc_msgSend(v9, "loadState");

        if (v10 != (id)2)
          goto LABEL_10;
      }
      ++v3;
LABEL_10:
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "state"));
      if (objc_msgSend(v11, "loadState") == (id)1)
      {

      }
      else
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "state"));
        v13 = objc_msgSend(v12, "loadState");

        if (v13 != (id)3)
          continue;
      }
      ++v4;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "state"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "downloadProgress"));

      if (v15)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "state"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "downloadProgress"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "userInfo"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v28));

        if (v19 && objc_msgSend(v19, "isEqualToString:", v27))
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subscription"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "identifier"));
          objc_msgSend(v26, "addObject:", v21);

        }
      }
    }
    v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  }
  while (v2);
LABEL_22:

  objc_msgSend(*(id *)(a1 + 40), "setOutOfDateSubscriptionsCount:", v4);
  objc_msgSend(*(id *)(a1 + 40), "setFullyLoadedSubscriptionsCount:", v3);
  objc_msgSend(*(id *)(a1 + 40), "setUpdatingSubscriptions:", v26);
  v22 = objc_msgSend(*(id *)(a1 + 32), "copy");
  objc_msgSend(*(id *)(a1 + 40), "setSubscriptionInfos:", v22);

  v23 = *(_QWORD *)(a1 + 56);
  if (v23)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subscriptionInfos"));
    (*(void (**)(uint64_t, void *, _QWORD))(v23 + 16))(v23, v24, 0);

  }
  objc_msgSend(*(id *)(a1 + 40), "_subscriptionsDidChange");
  if ((uint64_t)objc_msgSend(*(id *)(a1 + 48), "pairedDeviceSubscriptionStatesMonitorCount") >= 1)
    objc_msgSend(*(id *)(a1 + 48), "_reloadPairedDeviceSubscriptionInfos");

}

void sub_1007E9144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007E9168(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  id v6;

  v6 = a2;
  if (!a3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    if (WeakRetained)
      objc_msgSend(WeakRetained, "setExpiredSubscriptionsCount:", objc_msgSend(v6, "count"));

  }
}

void sub_1007E92A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007E92CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  id v5;

  if (!a3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    if (WeakRetained)
    {
      v5 = WeakRetained;
      objc_msgSend(WeakRetained, "setTotalOfflineDataSize:", a2);

    }
  }
}

void sub_1007E97D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1007E97F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id obj;
  _QWORD block[5];
  id v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  NSObject *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  id v34;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      v9 = sub_100431D5C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v34 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[MapsOfflineUIHelper] paired device subscription fetch error: %@", buf, 0xCu);
      }
    }
    else
    {
      v19 = WeakRetained;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v5, "count")));
      v10 = dispatch_group_create();
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v20 = v5;
      obj = v5;
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v29;
        do
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(_QWORD *)v29 != v14)
              objc_enumerationMutation(obj);
            v16 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
            dispatch_group_enter(v10);
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionManager"));
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_1007E9A9C;
            v24[3] = &unk_1011BCB50;
            v25 = v11;
            v26 = v16;
            v27 = v10;
            objc_msgSend(v17, "fetchStateForPairedDeviceSubscriptionWithIdentifier:callbackQueue:completionHandler:", v16, &_dispatch_main_q, v24);

          }
          v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        }
        while (v13);
      }

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1007E9B70;
      block[3] = &unk_1011AC8B0;
      block[4] = *(_QWORD *)(a1 + 32);
      v23 = v11;
      v18 = v11;
      dispatch_group_notify(v10, (dispatch_queue_t)&_dispatch_main_q, block);

      v6 = 0;
      v5 = v20;
      v8 = v19;
    }

  }
}

void sub_1007E9A9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;

  v5 = a3;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, *(_QWORD *)(a1 + 40));
  }
  else
  {
    v6 = sub_100431D5C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[MapsOfflineUIHelper] paired device subscription state fetch error: %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1007E9B70(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionInfos", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v8 = *(void **)(a1 + 40);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subscription"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v10));

        objc_msgSend(v7, "setPairedDeviceState:", v11);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v4);
  }

  v12 = *(_QWORD **)(a1 + 32);
  v13 = (void *)v12[1];
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "subscriptionInfos"));
  objc_msgSend(v13, "pairedSubscriptionInfosDidChange:", v14);

}

void sub_1007EA1F0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *v16;
  NSString *v17;
  void *v18;
  void *v19;
  NSString *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  id v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  char *v31;
  unsigned int v32;
  char *v33;
  char *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t v44[128];
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  id v48;
  __int16 v49;
  uint64_t v50;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v3 = *(id *)(a1 + 32);
    v4 = sub_100431D5C();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      v46 = v6;
      v47 = 2112;
      v48 = v3;
      v49 = 2112;
      v50 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[MapsOfflineUIHelper] KVO update for keyPath: %@, state: %@, change: %@", buf, 0x20u);
    }

    v8 = *(void **)(a1 + 40);
    v9 = NSStringFromSelector("loadState");
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    LODWORD(v8) = objc_msgSend(v8, "isEqualToString:", v10);

    if (!(_DWORD)v8)
    {
      v16 = *(void **)(a1 + 40);
      v17 = NSStringFromSelector("lastError");
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      LOBYTE(v16) = objc_msgSend(v16, "isEqualToString:", v18);

      if ((v16 & 1) == 0)
      {
        v19 = *(void **)(a1 + 40);
        v20 = NSStringFromSelector("downloadProgress");
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        LODWORD(v19) = objc_msgSend(v19, "isEqualToString:", v21);

        if ((_DWORD)v19)
        {
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v22 = *(id *)(*(_QWORD *)(a1 + 64) + 48);
          v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
          if (v23)
          {
            v24 = *(_QWORD *)v41;
            while (2)
            {
              for (i = 0; i != v23; i = (char *)i + 1)
              {
                if (*(_QWORD *)v41 != v24)
                  objc_enumerationMutation(v22);
                v26 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
                v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "state", (_QWORD)v40));

                if (v27 == v3)
                {
                  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "subscription"));
                  v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "identifier"));

                  goto LABEL_36;
                }
              }
              v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
              if (v23)
                continue;
              break;
            }
          }
LABEL_36:

          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "downloadProgress"));
          if (v36)
          {
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "downloadProgress"));
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "userInfo"));
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", GEOMapDataSubscriptionDownloadReasonKey));

            if ((objc_msgSend(v3, "loadState") == (id)1 || objc_msgSend(v3, "loadState") == (id)3)
              && v39
              && objc_msgSend(v39, "isEqualToString:", GEOMapDataSubscriptionProgressDownloadReasonForcedUpdate))
            {
              objc_msgSend(*(id *)(a1 + 64), "_startedUpdatingSubscription:", v23);
            }
            else
            {
              objc_msgSend(*(id *)(a1 + 64), "_stoppedUpdatingSubscription:", v23, (_QWORD)v40);
            }

          }
          else
          {
            objc_msgSend(*(id *)(a1 + 64), "_stoppedUpdatingSubscription:", v23);
          }

        }
      }
      goto LABEL_46;
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", NSKeyValueChangeOldKey));
    v12 = objc_msgSend(v11, "intValue");

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", NSKeyValueChangeNewKey));
    v14 = objc_msgSend(v13, "intValue");

    if (v12 != 1 || v14 == 1)
    {
      if (v12 == 1 || v14 != 1)
        goto LABEL_25;
      v28 = 1;
    }
    else
    {
      v28 = -1;
    }
    objc_msgSend(WeakRetained, "setOutOfDateSubscriptionsCount:", (char *)objc_msgSend(WeakRetained, "outOfDateSubscriptionsCount") + v28);
LABEL_25:
    v29 = v12 - 3;
    if ((v29 != 0) == (v14 == 3))
    {
      v30 = (char *)objc_msgSend(WeakRetained, "outOfDateSubscriptionsCount");
      if (v14 == 3)
        v31 = v30 + 1;
      else
        v31 = v30 - 1;
      objc_msgSend(WeakRetained, "setOutOfDateSubscriptionsCount:", v31);
    }
    v32 = v14 - 1;
    if (v29 < 0xFFFFFFFE == v32 < 2)
    {
      v33 = (char *)objc_msgSend(WeakRetained, "fullyLoadedSubscriptionsCount");
      if (v32 > 1)
        v34 = v33 - 1;
      else
        v34 = v33 + 1;
      objc_msgSend(WeakRetained, "setFullyLoadedSubscriptionsCount:", v34);
    }
LABEL_46:

  }
}

void sub_1007EAD9C(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3430;
  qword_1014D3430 = (uint64_t)&off_101273D58;

}

id sub_1007EAE9C(void *a1)
{
  id v1;
  NSMutableArray *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  unsigned int v10;
  NSMutableArray *v11;
  id v12;
  id v13;
  unsigned int v14;
  uint64_t v15;
  void *j;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *k;
  void *v24;
  NSMutableArray *v25;
  id v26;
  id v27;
  uint64_t v28;
  unsigned int v29;
  void *m;
  void *v31;
  void *v32;
  id v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  _BYTE v53[128];
  _BYTE v54[128];

  v1 = a1;
  v2 = objc_opt_new(NSMutableArray);
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v48;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v48 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v8, "hasSignGuidance"))
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "signGuidance"));
          if ((objc_msgSend(v9, "hasStackRanking") & 1) != 0)
          {
            v10 = objc_msgSend(v8, "hasEndValidDistanceOffsetCm");

            if (v10)
              -[NSMutableArray addObject:](v2, "addObject:", v8);
          }
          else
          {

          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
    }
    while (v5);
  }

  if (-[NSMutableArray count](v2, "count"))
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v11 = v2;
    v12 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
    if (v12)
    {
      v13 = v12;
      v14 = 0;
      v15 = *(_QWORD *)v44;
      do
      {
        for (j = 0; j != v13; j = (char *)j + 1)
        {
          if (*(_QWORD *)v44 != v15)
            objc_enumerationMutation(v11);
          v17 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(v17, "endValidDistanceOffsetCm") > v14)
            v14 = objc_msgSend(v17, "endValidDistanceOffsetCm");
        }
        v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
      }
      while (v13);
    }
    else
    {
      v14 = 0;
    }

    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v19 = -[NSMutableArray copy](v11, "copy");
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v39, v52, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v40;
      do
      {
        for (k = 0; k != v21; k = (char *)k + 1)
        {
          if (*(_QWORD *)v40 != v22)
            objc_enumerationMutation(v19);
          v24 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)k);
          if (objc_msgSend(v24, "endValidDistanceOffsetCm") < v14)
            -[NSMutableArray removeObject:](v11, "removeObject:", v24);
        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v39, v52, 16);
      }
      while (v21);
    }

    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v25 = v11;
    v26 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v25, "countByEnumeratingWithState:objects:count:", &v35, v51, 16);
    if (v26)
    {
      v27 = v26;
      v18 = 0;
      v28 = *(_QWORD *)v36;
      v29 = -1;
      do
      {
        for (m = 0; m != v27; m = (char *)m + 1)
        {
          if (*(_QWORD *)v36 != v28)
            objc_enumerationMutation(v25);
          v31 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)m);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "signGuidance", (_QWORD)v35));
          if (objc_msgSend(v32, "stackRanking") < v29)
          {
            v29 = objc_msgSend(v32, "stackRanking");
            v33 = v31;

            v18 = v33;
          }

        }
        v27 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v25, "countByEnumeratingWithState:objects:count:", &v35, v51, 16);
      }
      while (v27);
    }
    else
    {
      v18 = 0;
    }

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

id sub_1007EB4C4()
{
  if (qword_1014D3440 != -1)
    dispatch_once(&qword_1014D3440, &stru_1011C93F8);
  return (id)qword_1014D3438;
}

NSString *__cdecl sub_1007EB504(id a1, GEOSharedNavState *a2, unint64_t a3)
{
  return (NSString *)-[GEOSharedNavState groupIdentifier](a2, "groupIdentifier", a3);
}

NSString *__cdecl sub_1007EBBEC(id a1, GEOSharedNavState *a2, unint64_t a3)
{
  return (NSString *)-[GEOSharedNavState groupIdentifier](a2, "groupIdentifier", a3);
}

void sub_1007EBD2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "SharedTripsTableDataSource");
  v2 = (void *)qword_1014D3438;
  qword_1014D3438 = (uint64_t)v1;

}

void sub_1007EC844(uint64_t a1, void *a2)
{
  _BYTE *v3;
  void *v4;
  char v5;
  _BOOL8 v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  id v14;

  v14 = a2;
  v3 = *(_BYTE **)(a1 + 32);
  if (v3[8])
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bannerView"));
    v5 = objc_opt_respondsToSelector(v4, "setExpanded:");

    v3 = *(_BYTE **)(a1 + 32);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t)objc_msgSend(v3, "activeLayoutMode") > 3;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bannerView"));
      objc_msgSend(v7, "setExpanded:", v6);

      objc_msgSend(*(id *)(a1 + 32), "displayWidth");
      v9 = v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bannerView"));
      objc_msgSend(v10, "sizeThatFits:", v9, 400.0);
      v12 = v11;

      objc_msgSend(*(id *)(a1 + 32), "setPreferredContentSize:", v9, v12);
      objc_msgSend(*(id *)(a1 + 32), "_updateShowsControls");
      v3 = *(_BYTE **)(a1 + 32);
    }
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "view"));
  objc_msgSend(v13, "layoutIfNeeded");

}

void sub_1007ED44C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bannerView"));
  objc_msgSend(v1, "updateFromBannerItem");

}

void sub_1007ED894(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  double v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _QWORD v28[3];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "removeFromSuperview");
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 104), *(id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_contentView"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v2, "addSubview:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "leadingAnchor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "leadingAnchor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "constraintEqualToAnchor:", v3));
  v28[0] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "trailingAnchor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "trailingAnchor"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "constraintEqualToAnchor:", v6));
  v28[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "bottomAnchor"));
  v22 = v2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bottomAnchor"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "constraintEqualToAnchor:", v9));
  v28[2] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v28, 3));
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v14 = *(id *)(*(_QWORD *)(a1 + 32) + 40);
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v15)
  {
    v17 = v15;
    v18 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v18)
          objc_enumerationMutation(v14);
        LODWORD(v16) = 1144750080;
        objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i), "setPriority:", v16);
      }
      v17 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v17);
  }

  +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "arrayByAddingObject:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v20);

}

void sub_1007EDF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007EDFB0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismissBannerWithReason:", CFSTR("Timeout"));

}

void sub_1007EE0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007EE0D4(uint64_t a1)
{
  id *WeakRetained;
  unsigned int v2;
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  uint8_t v6[16];
  uint8_t buf[16];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_msgSend(WeakRetained[2], "isValid");
  v3 = sub_100431C7C();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[Persistent Banners] Will collapse after timer", buf, 2u);
    }

    objc_msgSend(WeakRetained[2], "invalidateWithReason:", CFSTR("Timeout"));
    v4 = WeakRetained[2];
    WeakRetained[2] = 0;
  }
  else if (v5)
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[Persistent Banners] already collapsed after timer.", v6, 2u);
  }

}

void sub_1007EE1F4(id a1)
{
  byte_1014B20C0 = GEOConfigGetBOOL(MapsConfig_BannerSignificantUpdateSPI, off_1014B4CC8);
}

void sub_1007EE300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007EE31C(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = sub_100431C7C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Persistent Banners] Will clean up alert after timer", v4, 2u);
  }

  objc_msgSend(WeakRetained, "_revertToPrimaryBannerView");
  objc_msgSend(WeakRetained, "setAlternateBannerActiveTimer:", 0);

}

void sub_1007EE49C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "arrayByAddingObject:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v2);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "removeFromSuperview");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_1007EF028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *sub_1007EF04C(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) >= 6)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %li)"), a1));
  else
    return *(&off_1011C94A8 + a1 + 1);
}

void sub_1007EF0A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  _QWORD *WeakRetained;
  void *v11;
  int v12;
  id v13;

  v5 = a3;
  v6 = a2;
  v7 = sub_100431C7C();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v12 = 138412290;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[Persistent Banners] Alerting assertion invalidated: %@", (uint8_t *)&v12, 0xCu);
  }

  v9 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  if (v9 == v6)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v11 = (void *)WeakRetained[2];
    WeakRetained[2] = 0;

    objc_msgSend(WeakRetained, "setApertureExpansionTimer:", 0);
  }

}

void sub_1007EFA68(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  id v5;
  NSObject *v6;
  int v7;
  NSError *v8;

  v4 = a3;
  if (!a2)
  {
    v5 = sub_100431C7C();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to open Maps, error: %@", (uint8_t *)&v7, 0xCu);
    }

  }
}

void sub_1007F0174(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint8_t buf[4];
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = sub_100431C7C();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v9 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[%{public}p] Start generating radar attachments", buf, 0xCu);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%p.NavigationBanners.png"), WeakRetained));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "window"));
    +[MapsRadarScreenshotAttachmentHelper generateScreenshotAttachmentsFromWindow:withName:radarDraft:completion:](MapsRadarScreenshotAttachmentHelper, "generateScreenshotAttachmentsFromWindow:withName:radarDraft:completion:", v7, v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  }
}

void sub_1007F0C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F0C80(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  id WeakRetained;
  int v5;
  const char *v6;

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsDistanceUnitUpdater");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5 = 136315138;
    v6 = "com.apple.Maps.DistanceUnitsChanged";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "received darwin notification - %s", (uint8_t *)&v5, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateDistanceUnit");

}

id sub_1007F0F08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateDistanceUnit");
}

id sub_1007F0FCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateDistanceUnit");
}

id sub_1007F1494()
{
  if (qword_1014D3458 != -1)
    dispatch_once(&qword_1014D3458, &stru_1011C96E8);
  return (id)qword_1014D3450;
}

id sub_1007F14D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateAnnotationText");
}

void sub_1007F1A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F1A88(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  int v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1007F1494();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = 134349056;
      v5 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Annotation text updating timer fired", (uint8_t *)&v4, 0xCu);
    }

    objc_msgSend(WeakRetained, "_updateAnnotationText");
  }

}

id sub_1007F1D44()
{
  if (qword_1014D3468 != -1)
    dispatch_once(&qword_1014D3468, &stru_1011C9708);
  return (id)qword_1014D3460;
}

void sub_1007F23EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location)
{
  id *v37;

  objc_destroyWeak(v37);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F2414(uint64_t a1, char a2)
{
  id WeakRetained;
  id v3;

  if ((a2 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    if (WeakRetained)
    {
      v3 = WeakRetained;
      objc_msgSend(WeakRetained, "_updateRouteMarkersInContext:", 0);
      WeakRetained = v3;
    }

  }
}

void sub_1007F278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F27A8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  int v5;
  id v6;

  v2 = sub_1007F1D44();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v5 = 134349056;
    v6 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Updated route context for waypoint style attribute change", (uint8_t *)&v5, 0xCu);

  }
}

void sub_1007F31A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

id sub_1007F31C8(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  return a2;
}

void sub_1007F31D0(uint64_t a1, char a2)
{
  id WeakRetained;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 40))
    {
      objc_msgSend(WeakRetained, "_updateRouteMarkersInContext:", 0);
      WeakRetained = v5;
    }
    if (*(_BYTE *)(a1 + 41))
    {
      objc_msgSend(v5, "_updateWaypointCaptions");
      WeakRetained = v5;
    }
  }

}

GEOComposedRoute *__cdecl sub_1007F4884(id a1, VKPolylineOverlay *a2, unint64_t a3)
{
  return (GEOComposedRoute *)-[VKPolylineOverlay composedRoute](a2, "composedRoute", a3);
}

id sub_1007F488C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqual:", *(_QWORD *)(a1 + 32));
}

NSString *__cdecl sub_1007F4898(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));

  return (NSString *)v4;
}

NSString *__cdecl sub_1007F48D4(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));

  return (NSString *)v4;
}

void sub_1007F4910(uint64_t a1)
{
  uint64_t v1;
  id *v2;
  char *WeakRetained;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  __objc2_class **v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  BOOL v30;
  void *v31;
  RouteAnnotationTextUpdater *v32;
  void *v33;
  void *v34;
  RouteAnnotationTextUpdater *v35;
  id v36;
  NSObject *v37;
  id v38;
  NSObject *v39;
  char *v40;
  id v41;
  id v42;
  __int128 v43;
  void *v44;
  void *v45;
  id *from;
  void *v47;
  uint64_t v48;
  id v49;
  _QWORD block[4];
  id v51;
  id v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  const char *v65;
  _BYTE v66[128];

  v1 = a1;
  v2 = (id *)(a1 + 64);
  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v4 = sub_1007F1D44();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v59 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}p] Building route context", buf, 0xCu);
    }
    from = v2;

    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_routeContextBuilder"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "buildRouteContextForRoutes:selectedRouteIndex:", *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 72)));
    objc_msgSend(v6, "setCurrentWaypoint:withProximity:", *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 80));
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v44 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "routeInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "waypoints"));

    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v54, v66, 16);
    if (v9)
    {
      v11 = v9;
      v12 = *(_QWORD *)v55;
      v13 = off_101198000;
      *(_QWORD *)&v10 = 138412290;
      v43 = v10;
      v47 = v8;
      v48 = *(_QWORD *)v55;
      do
      {
        v14 = 0;
        v49 = v11;
        do
        {
          if (*(_QWORD *)v55 != v12)
            objc_enumerationMutation(v8);
          v15 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * (_QWORD)v14);
          v16 = objc_opt_class(v13[186]);
          if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
          {
            v17 = v15;
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "waypoint"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "findMyHandle"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "contact"));
            v21 = v20;
            if (v20)
            {
              v22 = v20;
            }
            else
            {
              v23 = v1;
              v24 = WeakRetained;
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "waypoint"));
              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "addressBookAddress"));
              v22 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "contact"));

              WeakRetained = v24;
              v1 = v23;
              v8 = v47;
            }

            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "waypoint"));
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "findMyHandle"));
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "identifier"));

            if (v22)
              v30 = 1;
            else
              v30 = v29 == 0;
            if (!v30)
              v22 = (id)objc_claimAutoreleasedReturnValue(+[CNContact contactWithDisplayName:emailOrPhoneNumber:](CNContact, "contactWithDisplayName:emailOrPhoneNumber:", 0, v29));
            if (!v22)
            {
              v36 = sub_1004318FC();
              v37 = objc_claimAutoreleasedReturnValue(v36);
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                v59 = "-[RouteAnnotationsController _updateMapViewRouteContextForced:withFinishedHandler:]_block_invoke";
                v60 = 2080;
                v61 = "RouteAnnotationsController.m";
                v62 = 1024;
                v63 = 608;
                v64 = 2080;
                v65 = "contact != nil";
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", buf, 0x26u);
              }

              if (sub_100A70734())
              {
                v38 = sub_1004318FC();
                v39 = objc_claimAutoreleasedReturnValue(v38);
                if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                {
                  v40 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
                  *(_DWORD *)buf = v43;
                  v59 = v40;
                  _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

                }
              }
            }
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "identifier", v43));
            objc_msgSend(v17, "setImageProvider:withKey:", v22, v31);

            v32 = [RouteAnnotationTextUpdater alloc];
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mapView"));
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "_mapLayer"));
            v35 = -[RouteAnnotationTextUpdater initWithRouteWaypoint:mapView:](v32, "initWithRouteWaypoint:mapView:", v17, v34);

            objc_msgSend(*(id *)(*(_QWORD *)(v1 + 48) + 80), "addObject:", v35);
            v12 = v48;
            v11 = v49;
            v13 = off_101198000;
          }
          v14 = (char *)v14 + 1;
        }
        while (v11 != v14);
        v41 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v54, v66, 16);
        v11 = v41;
      }
      while (v41);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007F4E08;
    block[3] = &unk_1011B0288;
    objc_copyWeak(&v53, from);
    v51 = v44;
    v52 = *(id *)(v1 + 56);
    v42 = v44;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    objc_destroyWeak(&v53);
  }

}

void sub_1007F4E08(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  int v8;
  id *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  id v13;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = sub_1007F1D44();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = WeakRetained[4];
      v8 = 134349570;
      v9 = WeakRetained;
      v10 = 2112;
      v11 = v5;
      v12 = 2112;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}p] Setting route context (%@) on map view (%@)", (uint8_t *)&v8, 0x20u);
    }

    objc_msgSend(WeakRetained, "_updateRouteMarkersInContext:", *(_QWORD *)(a1 + 32));
    objc_msgSend(WeakRetained[4], "_setRouteContext:", *(_QWORD *)(a1 + 32));
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, 1);
  }

}

NSString *__cdecl sub_1007F4F0C(id a1, GEOComposedRoute *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GEOComposedRoute uniqueRouteID](a2, "uniqueRouteID", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));

  return (NSString *)v4;
}

void sub_1007F4F48(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  id v11;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_routeContextBuilder"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "buildRouteContextForAnchorPoints:", *(_QWORD *)(a1 + 32)));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007F503C;
    block[3] = &unk_1011B0288;
    objc_copyWeak(&v11, v2);
    v9 = v6;
    v10 = *(id *)(a1 + 40);
    v7 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    objc_destroyWeak(&v11);
  }

}

void sub_1007F503C(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  int v8;
  id *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  id v13;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = sub_1007F1D44();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = WeakRetained[4];
      v8 = 134349570;
      v9 = WeakRetained;
      v10 = 2112;
      v11 = v5;
      v12 = 2112;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}p] Setting route context (%@) on map view (%@)", (uint8_t *)&v8, 0x20u);
    }

    objc_msgSend(WeakRetained[4], "_setRouteContext:", *(_QWORD *)(a1 + 32));
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, 1);
  }

}

void sub_1007F5134(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007F51D4;
  v4[3] = &unk_1011B0520;
  objc_copyWeak(&v6, (id *)(a1 + 48));
  v5 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  objc_destroyWeak(&v6);
}

void sub_1007F51D4(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  int v7;
  id *v8;
  __int16 v9;
  id v10;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = sub_1007F1D44();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = WeakRetained[4];
      v7 = 134349314;
      v8 = WeakRetained;
      v9 = 2112;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}p] Clearing route context on map view (%@)", (uint8_t *)&v7, 0x16u);
    }

    objc_msgSend(WeakRetained[4], "_clearRouteContext");
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, 1);
  }

}

NSString *__cdecl sub_1007F57D8(id a1, RouteMarkerFormatterInfo *a2, unint64_t a3)
{
  return -[RouteMarkerFormatterInfo routeDescription](a2, "routeDescription", a3);
}

void sub_1007F5ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F5AE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  id v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uniqueRouteID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "configuration"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "selectedRoute"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "uniqueRouteID"));
    v12 = objc_msgSend(v8, "isEqual:", v11);

    if (v12)
    {
      objc_msgSend(WeakRetained, "_updateTrafficWithInitialTrafficFeatures:", v6);
    }
    else
    {
      v13 = sub_1007F1D44();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "configuration"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "selectedRoute"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "uniqueRouteID"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uniqueRouteID"));
        v19 = 134349570;
        v20 = WeakRetained;
        v21 = 2112;
        v22 = v17;
        v23 = 2112;
        v24 = v18;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[%{public}p] Current route changed (ID: %@) before we could finish calculating traffic features for route with ID %@; ignoring",
          (uint8_t *)&v19,
          0x20u);

      }
    }
  }

}

void sub_1007F5EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F5F08(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  void *v5;
  id v6;

  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_continueUpdateTrafficWithInitialTrafficFeatures:sharedTrafficFeatures:routes:includeAlternateRoutes:", *(_QWORD *)(a1 + 32), v6, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));

}

void sub_1007F6524(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "_updateAnnotationForVehiclePosition:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

NSNumber *__cdecl sub_1007F6E5C(id a1, GEOTransitVehiclePosition *a2, unint64_t a3)
{
  return +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[GEOTransitVehiclePosition tripID](a2, "tripID", a3));
}

void sub_1007F7300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F7324(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a3;
  v4 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "configuration"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "selectedRoute"));

  if (v4 == v7)
  {
    v8 = objc_loadWeakRetained((id *)(a1 + 48));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "trafficFeaturesUpdater"));
    objc_msgSend(v9, "updateTrafficFeatures:onRoute:forLocation:", v10, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  }
}

id sub_1007F75E0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uniqueRouteID"));
  v7 = objc_msgSend(v6, "isEqual:", *(_QWORD *)(a1 + 32));
  if ((_DWORD)v7)
    *a4 = 1;

  return v7;
}

void sub_1007F7980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F79A8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  int v6;
  id v7;
  __int16 v8;
  void *v9;

  v2 = sub_1007F1D44();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traffic"));
    v6 = 134349314;
    v7 = WeakRetained;
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Updated route context for traffic update: %@", (uint8_t *)&v6, 0x16u);

  }
}

void sub_1007F7B88(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RouteAnnotationTextUpdater");
  v2 = (void *)qword_1014D3450;
  qword_1014D3450 = (uint64_t)v1;

}

void sub_1007F7BB8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RouteOverlay");
  v2 = (void *)qword_1014D3460;
  qword_1014D3460 = (uint64_t)v1;

}

id sub_1007F7BE8(uint64_t a1, Protocol *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int v5;
  id v6;
  unsigned int v7;
  id v8;
  void *v9;
  NSObject *v10;
  NSString *v11;
  void *v12;
  const char *v13;
  NSString *v14;
  void *v15;
  void *v16;
  int v18;
  void *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  unsigned int v25;

  v3 = objc_opt_class(a1);
  if (!v3)
    return 0;
  v4 = (void *)v3;
  if (qword_1014D3480 != -1)
  {
    dispatch_once(&qword_1014D3480, &stru_1011C9728);
    if (a2)
      goto LABEL_4;
    return 0;
  }
  if (!a2)
    return 0;
LABEL_4:
  v5 = atomic_load((unsigned int *)&unk_1014B2310);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1014D3470);
  v6 = objc_msgSend((id)qword_1014D3478, "objectForKey:", v4);
  if (!v6)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSMapTable mapTableWithKeyOptions:valueOptions:](NSMapTable, "mapTableWithKeyOptions:valueOptions:", 256, 0));
    objc_msgSend((id)qword_1014D3478, "setObject:forKey:", v6, v4);

  }
  v7 = objc_msgSend(objc_msgSend(v6, "objectForKey:", a2), "unsignedIntegerValue");
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1014D3470);
  if (v5 == v7 >> 1)
    return (id)(v7 & 1);
  v8 = objc_msgSend(v4, "conformsToProtocol:", a2);
  if (qword_1014D3490 != -1)
    dispatch_once(&qword_1014D3490, &stru_1011C9748);
  v9 = (void *)qword_1014D3488;
  if (os_log_type_enabled((os_log_t)qword_1014D3488, OS_LOG_TYPE_INFO))
  {
    v10 = v9;
    v11 = NSStringFromClass((Class)v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((_DWORD)v8)
      v13 = "conforms to";
    else
      v13 = "does not conform to";
    v14 = NSStringFromProtocol(a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v18 = 138544130;
    v19 = v12;
    v20 = 2080;
    v21 = v13;
    v22 = 2114;
    v23 = v15;
    v24 = 1024;
    v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%{public}@ %s %{public}@ (gen: %u)", (uint8_t *)&v18, 0x26u);

  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1014D3470);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8 | (2 * v5)));
  objc_msgSend(v6, "setObject:forKey:", v16, a2);

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1014D3470);
  return v8;
}

void sub_1007F7E74(id a1)
{
  uint64_t v1;
  void *v2;

  objc_addLoadImageFunc((objc_func_loadImage)sub_1007F7EB4);
  v1 = objc_claimAutoreleasedReturnValue(+[NSMapTable mapTableWithKeyOptions:valueOptions:](NSMapTable, "mapTableWithKeyOptions:valueOptions:", 256, 0));
  v2 = (void *)qword_1014D3478;
  qword_1014D3478 = v1;

}

void sub_1007F7EB4()
{
  unsigned int v0;

  do
    v0 = __ldaxr((unsigned int *)&unk_1014B2310);
  while (__stlxr(v0 + 1, (unsigned int *)&unk_1014B2310));
}

void sub_1007F7ED0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsProtocolConformance");
  v2 = (void *)qword_1014D3488;
  qword_1014D3488 = (uint64_t)v1;

}

id sub_1007F800C()
{
  if (qword_1014D34A0 != -1)
    dispatch_once(&qword_1014D34A0, &stru_1011C9768);
  return (id)qword_1014D3498;
}

id sub_1007F8528(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_forceUpdateStackViewAlignment");
}

void sub_1007F8DE4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "AxisAdjustingStackView");
  v2 = (void *)qword_1014D3498;
  qword_1014D3498 = (uint64_t)v1;

}

void sub_1007F92E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007F9300(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && objc_msgSend(v6, "count"))
  {
    if (*((_BYTE *)WeakRetained + 241))
      objc_msgSend(WeakRetained, "fetchPhotoCreditPreferences");
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 327, 666, 0);
    v4 = (void *)*((_QWORD *)WeakRetained + 22);
    v5 = objc_msgSend(v6, "copy");
    objc_msgSend(v4, "addObjectsFromArray:", v5);

    objc_msgSend(WeakRetained, "_refreshCollectionViewWithAnimatingDifferences:", 1);
  }

}

void sub_1007F95D8(uint64_t a1)
{
  void *v2;
  unint64_t UInteger;
  double latitudeDelta;
  double longitudeDelta;
  CLLocationCoordinate2D v6;
  CLLocationCoordinate2D v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  NSObject *v17;
  id v18;
  id v19;
  _QWORD block[4];
  id v21;
  id v22;
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  MKCoordinateRegion v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  UInteger = GEOConfigGetUInteger(MapsConfig_UGCNearbyPhotoTakenThresholdInMeters, off_1014B3738);
  v29 = MKCoordinateRegionMakeWithDistance(*(CLLocationCoordinate2D *)(*(_QWORD *)(a1 + 32) + 136), (double)UInteger, (double)UInteger);
  latitudeDelta = v29.span.latitudeDelta;
  longitudeDelta = v29.span.longitudeDelta;
  v6 = CLLocationCoordinate2DMake(*(double *)(*(_QWORD *)(a1 + 32) + 136) + v29.span.latitudeDelta, *(double *)(*(_QWORD *)(a1 + 32) + 144) - v29.span.longitudeDelta);
  v7 = CLLocationCoordinate2DMake(*(double *)(*(_QWORD *)(a1 + 32) + 136) - latitudeDelta, longitudeDelta + *(double *)(*(_QWORD *)(a1 + 32) + 144));
  v8 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", v6.latitude, v6.longitude);
  v9 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", v7.latitude, v7.longitude);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[PHAsset fetchAssetsInBoundingBoxWithTopLeftLocation:bottomRightLocation:options:](PHAsset, "fetchAssetsInBoundingBoxWithTopLeftLocation:bottomRightLocation:options:", v8, v9, *(_QWORD *)(a1 + 40)));
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v25;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v25 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(v2, "addObject:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v14));
        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v12);
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1007F9860;
  v23[3] = &unk_1011C9790;
  v23[4] = *(_QWORD *)(a1 + 32);
  v15 = sub_10039DCD4(v2, v23);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007F98F0;
  block[3] = &unk_1011ACAD0;
  v17 = *(NSObject **)(a1 + 48);
  v18 = *(id *)(a1 + 56);
  v21 = v16;
  v22 = v18;
  v19 = v16;
  dispatch_async(v17, block);

}

UGCARPPhotoCarouselViewModel *sub_1007F9860(uint64_t a1, void *a2)
{
  id v3;
  UGCARPPhotoCarouselViewModel *v4;
  void *v5;

  v3 = a2;
  v4 = -[UGCARPPhotoCarouselViewModel initWithImageManager:]([UGCARPPhotoCarouselViewModel alloc], "initWithImageManager:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
  -[UGCARPPhotoCarouselViewModel setAsset:](v4, "setAsset:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localIdentifier"));

  -[UGCARPPhotoCarouselViewModel setIdentifier:](v4, "setIdentifier:", v5);
  -[UGCARPPhotoCarouselViewModel setIsSuggestedPhoto:](v4, "setIsSuggestedPhoto:", 1);
  return v4;
}

void sub_1007F98F0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(*(id *)(a1 + 32), "copy");
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1007F9CA0(uint64_t a1)
{
  double v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v2 = *(double *)(a1 + 48);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007F9D34;
  v4[3] = &unk_1011BB6C8;
  v3 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(id *)(a1 + 32);
  objc_msgSend(v3, "loadThumbnailImageWithDisplayScale:completion:", v4, v2);

}

void sub_1007F9D34(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_maps_diffableDataSourceIdentifier"));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "setImage:", v6);

}

void sub_1007FA128(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1007FA14C(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  unsigned int v6;
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      v7 = WeakRetained;
      objc_msgSend(WeakRetained, "_updateSelection");
      v6 = objc_msgSend(*(id *)(a1 + 32), "isSuggestedPhoto");
      v5 = v7;
      if (v6)
      {
        objc_msgSend(*(id *)(a1 + 32), "setPhotoWithMetadata:", 0);
        +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 326, 666, 0);
        v5 = v7;
      }
    }
  }

}

void sub_1007FA1CC(uint64_t a1)
{
  void *v2;
  double v3;
  id v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = *(void **)(a1 + 40);
  v3 = *(double *)(a1 + 64);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1007FA318;
  v11[3] = &unk_1011C97D8;
  v4 = v2;
  v12 = v4;
  v13 = *(id *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1007FA430;
  v6[3] = &unk_1011C9800;
  objc_copyWeak(&v10, &location);
  v5 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  objc_msgSend(v4, "loadOriginalImageWithDisplayScale:progressHandler:completion:", v11, v6, v3);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_1007FA2FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1007FA318(uint64_t a1, double a2, uint64_t a3, _BYTE *a4, void *a5)
{
  double v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  id v13;
  id v14;

  v14 = a5;
  if ((objc_msgSend(*(id *)(a1 + 32), "checked") & 1) != 0)
  {
    v8 = a2 + -1.0;
    if (a2 + -1.0 < 0.0001 || *a4)
      objc_msgSend(*(id *)(a1 + 32), "setIsLoading:", 0, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier", v8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_maps_diffableDataSourceIdentifier"));
    v11 = objc_msgSend(v9, "isEqualToString:", v10);

    if (v11)
    {
      objc_msgSend(*(id *)(a1 + 40), "setLoadingProgress:animated:completion:", 1, &stru_1011C97B0, a2);
      objc_msgSend(*(id *)(a1 + 40), "setViewModel:", *(_QWORD *)(a1 + 32));
    }
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", PHImageResultRequestIDKey));
    v13 = objc_msgSend(v12, "intValue");

    objc_msgSend(*(id *)(a1 + 32), "cancelLoadImageWithRequestID:", v13);
  }

}

void sub_1007FA430(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  int v20;
  void *v21;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!WeakRetained)
    goto LABEL_14;
  --*(_QWORD *)(*(_QWORD *)(a1 + 32) + 192);
  if ((objc_msgSend(*(id *)(a1 + 40), "checked") & 1) == 0)
  {
    v13 = sub_1007FA6EC();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "User cancelled loading the photo", (uint8_t *)&v20, 2u);
    }

    goto LABEL_13;
  }
  if (!v3)
  {
    v15 = sub_1007FA6EC();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Fail to load the photo", (uint8_t *)&v20, 2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "setChecked:", 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_maps_diffableDataSourceIdentifier"));
    v19 = objc_msgSend(v17, "isEqualToString:", v18);

    if (v19)
      objc_msgSend(*(id *)(a1 + 48), "setViewModel:", *(_QWORD *)(a1 + 40));
LABEL_13:
    objc_msgSend(WeakRetained, "_updateSelection");
    goto LABEL_14;
  }
  objc_msgSend(*(id *)(a1 + 40), "setIsLoading:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_maps_diffableDataSourceIdentifier"));
  v7 = objc_msgSend(v5, "isEqualToString:", v6);

  if (v7)
    objc_msgSend(*(id *)(a1 + 48), "setViewModel:", *(_QWORD *)(a1 + 40));
  v8 = sub_1007FA6EC();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "asset"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localIdentifier"));
    v20 = 138412290;
    v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Successfully loaded the photo. Updating the view model with asset identifier %@", (uint8_t *)&v20, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 40), "setPhotoWithMetadata:", v3);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "photoWithMetadata"));
  objc_msgSend(WeakRetained, "_handleAddFromSuggestionImage:atIndexPath:", v12, *(_QWORD *)(a1 + 56));

  objc_msgSend(WeakRetained, "_updateSelection");
  objc_msgSend(WeakRetained, "_refreshCollectionViewWithAnimatingDifferences:", 1);
  if (objc_msgSend(*(id *)(a1 + 40), "isSuggestedPhoto"))
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 336, 666, 0);
LABEL_14:

}

id sub_1007FA6EC()
{
  if (qword_1014D34B0 != -1)
    dispatch_once(&qword_1014D34B0, &stru_1011C9820);
  return (id)qword_1014D34A8;
}

void sub_1007FAAC8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1007FAAEC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _BYTE *WeakRetained;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  id v16;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = sub_100432A0C();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
    if (v6)
    {
      if (v10)
      {
        v15 = 138412290;
        v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed Sundew call when attempting to fetch with error %@", (uint8_t *)&v15, 0xCu);
      }

      v11 = 0;
      WeakRetained[209] = 0;
      v12 = (void *)*((_QWORD *)WeakRetained + 27);
      *((_QWORD *)WeakRetained + 27) = 0;
    }
    else
    {
      if (v10)
      {
        v15 = 138412290;
        v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fetched photo credit result: %@", (uint8_t *)&v15, 0xCu);
      }

      WeakRetained[209] = objc_msgSend(v5, "attributePhotos");
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributionName"));
      v14 = (void *)*((_QWORD *)WeakRetained + 27);
      *((_QWORD *)WeakRetained + 27) = v13;

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
      objc_msgSend(v12, "photoCarouselControllerDidUpdatePhotoCredit:", *(_QWORD *)(a1 + 32));
      v11 = 2;
    }

    *((_QWORD *)WeakRetained + 29) = v11;
  }

}

void sub_1007FB634(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "UGCARPPhotoCarouselController");
  v2 = (void *)qword_1014D34A8;
  qword_1014D34A8 = (uint64_t)v1;

}

void sub_1007FCDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1007FCE24()
{
  if (qword_1014D34D0 != -1)
    dispatch_once(&qword_1014D34D0, &stru_1011C9930);
  return (id)qword_1014D34C8;
}

void sub_1007FCE64(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  id v18;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = sub_1007FCE24();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349314;
      v16 = WeakRetained;
      v17 = 2112;
      v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}p] Refreshed sharing identity: %@", buf, 0x16u);
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("[SharedETA] sender info label"), CFSTR("localized string not found"), 0));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "handle"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, v9, v10));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "shareETADisclosureFooterView"));
    objc_msgSend(v12, "setFooterText:", v11);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "shareETADisclosureTableView"));
    objc_msgSend(v13, "reloadData");

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cardPresentationController"));
    objc_msgSend(v14, "updateHeightForCurrentLayout");

  }
}

void sub_1007FD2D8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v1, "updateHeightForCurrentLayout");

}

void sub_1007FD308(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id WeakRetained;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "setOverrideUserInterfaceStyle:", 2);
    v4 = sub_1006E6850();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    objc_msgSend(*(id *)(a1 + 32), "setCardColor:", v5);

    v6 = *(_BYTE **)(a1 + 32);
    if (v6[216])
    {
      v6[216] = 0;
      objc_msgSend(*(id *)(a1 + 32), "_updateShareETADisclosure");
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
      objc_msgSend(v7, "updateHeightForCurrentLayout");

      v6 = *(_BYTE **)(a1 + 32);
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cardPresentationController"));
    v9 = objc_msgSend(v8, "containeeLayout");

    if (v9 != (id)1)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
      objc_msgSend(v10, "wantsLayout:", 1);

    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 232));
    objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 0, 0);
  }
  else
  {
    objc_msgSend(v3, "setOverrideUserInterfaceStyle:", 0);
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorNamed:](UIColor, "colorNamed:", CFSTR("NavigationMaterialColor")));
    objc_msgSend(*(id *)(a1 + 32), "setCardColor:", WeakRetained);
  }

}

void sub_1007FE094(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareETADisclosureView"));
  objc_msgSend(v2, "layoutIfNeeded");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareETADisclosureView"));
  objc_msgSend(v3, "sizeToFit");

}

void sub_1007FE7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007FE7F0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "categoriesAPIController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "categories"));
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    v6 = objc_loadWeakRetained(v1);
    objc_msgSend(v6, "_computeSections");

    v8 = objc_loadWeakRetained(v1);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tableView"));
    objc_msgSend(v7, "reloadData");

  }
}

void sub_1007FF954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007FF970(uint64_t a1)
{
  _BYTE *WeakRetained;
  id v2;
  NSObject *v3;
  _QWORD v4[5];
  uint8_t buf[4];
  _BYTE *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1007FCE24();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v6 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Displaying initial share ETA banner", buf, 0xCu);
    }

    WeakRetained[216] = 1;
    WeakRetained[217] = 1;
    objc_msgSend(WeakRetained, "_startTimerToDismissInitialBanner");
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1007FFA90;
    v4[3] = &unk_1011AC860;
    v4[4] = WeakRetained;
    +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v4, 0.25);
  }

}

void sub_1007FFA90(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_updateShareETADisclosure");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v2, "updateHeightForCurrentLayout");

}

void sub_1007FFBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1007FFBE8(uint64_t a1)
{
  _BYTE *WeakRetained;
  id v2;
  NSObject *v3;
  _QWORD v4[5];
  uint8_t buf[4];
  _BYTE *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = sub_1007FCE24();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v6 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Dismissing initial share ETA banner", buf, 0xCu);
    }

    WeakRetained[216] = 0;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1007FFCE8;
    v4[3] = &unk_1011AC860;
    v4[4] = WeakRetained;
    +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v4, 0.25);
  }

}

void sub_1007FFCE8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareETADisclosureTableView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "superview"));

  objc_msgSend(*(id *)(a1 + 32), "_updateShareETADisclosure");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareETADisclosureTableView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "superview"));

  if (v3 && !v5)
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 399, 91, 0);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v6, "updateHeightForCurrentLayout");

}

id sub_100801070(uint64_t a1)
{
  return +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 1, *(unsigned int *)(a1 + 32), 0);
}

void sub_10080108C(uint64_t a1)
{
  double v2;
  id v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "setExpanded:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "setLayoutProgress:", *(double *)(a1 + 40));
  v2 = 1.0 - *(double *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareETADisclosureView"));
  objc_msgSend(v3, "setAlpha:", v2);

}

id sub_100801274(uint64_t a1)
{
  return +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 2, *(unsigned int *)(a1 + 32), 0);
}

id sub_100801290(uint64_t a1)
{
  return +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 45, *(unsigned int *)(a1 + 32), 0);
}

void sub_1008025A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008025C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  id v19;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1007FCE24();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      *(_DWORD *)buf = 134349314;
      v17 = WeakRetained;
      v18 = 2112;
      v19 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}p] Error prompting to unlock phone before launching Find My: %@", buf, 0x16u);

    }
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NavigationFeedbackCollector sharedFeedbackCollector](NavigationFeedbackCollector, "sharedFeedbackCollector"));
    objc_msgSend(v7, "userLaunchedFindMy");

    v8 = sub_1007FCE24();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = objc_loadWeakRetained((id *)(a1 + 40));
      v11 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 134349315;
      v17 = v10;
      v18 = 2113;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%{public}p] Prompt to unlock phone successful. Will launch into Find My.app with handle identifier: %{private}@", buf, 0x16u);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("findmy://friend/%@"), *(_QWORD *)(a1 + 32)));
    v5 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v12));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100802804;
    v14[3] = &unk_1011AD4F0;
    objc_copyWeak(&v15, (id *)(a1 + 40));
    objc_msgSend(v13, "_maps_openURL:options:completionHandler:", v5, 0, v14);

    objc_destroyWeak(&v15);
  }

}

void sub_1008027E8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100802804(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  uint8_t buf[16];

  v4 = sub_1007FCE24();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (a2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Successfully launched FindMy", buf, 2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100802910;
    block[3] = &unk_1011AD260;
    objc_copyWeak(&v8, (id *)(a1 + 32));
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    objc_destroyWeak(&v8);
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to launch FindMy", buf, 2u);
    }

  }
}

void sub_100802910(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_delegate"));
    objc_msgSend(v2, "pressedEndWithSender:feedback:", v3, 0);

    WeakRetained = v3;
  }

}

void sub_100802F08(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithPointSize:weight:](UIImageSymbolConfiguration, "configurationWithPointSize:weight:", 6, 27.0));
  v2 = (void *)qword_1014D34C0;
  qword_1014D34C0 = v1;

}

void sub_100803C0C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;

  v17 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "etaInfo"));
  v8 = *(void **)(a1 + 32);
  v9 = v7;
  v10 = v8;
  if (!(v9 | v10))
  {
    v9 = 0;
LABEL_8:

    goto LABEL_9;
  }
  v11 = (void *)v10;
  v12 = objc_msgSend((id)v9, "isEqual:", v10);

  if ((v12 & 1) != 0)
    goto LABEL_8;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "waypoint"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "uniqueID"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waypointID"));
  v16 = objc_msgSend(v14, "isEqual:", v15);

  if (v16)
  {
    objc_msgSend(v17, "setEtaInfo:", *(_QWORD *)(a1 + 32));
    v9 = objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a3, *(_QWORD *)(a1 + 56)));
    if (objc_msgSend(*(id *)(a1 + 40), "containsObject:", v9))
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v9);
    *a4 = 1;
    goto LABEL_8;
  }
LABEL_9:

}

void sub_100804BBC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "applyArrivalState");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v2, "updateHeightForCurrentLayout");

}

void sub_100804FF8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "applyArrivalState");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v2, "updateHeightForCurrentLayout");

}

id sub_1008051CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "applyArrivalState");
}

void sub_1008051E0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cardPresentationController"));
  objc_msgSend(v1, "updateHeightForCurrentLayout");

}

BOOL sub_100805518(id a1, NavTrayWaypointRow *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  char v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NavTrayWaypointRow waypoint](a2, "waypoint", a3, a4));
  v5 = objc_msgSend(v4, "isServerProvidedWaypoint") ^ 1;

  return v5;
}

void sub_100806724(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "unformattedInternationalStringValue"));
  objc_msgSend(v3, "callPhoneNumber:completion:", v2, 0);

}

void sub_100806840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;

  if (!a3)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contact"));
    +[MapsSharedTripAnalyticsHelper sendSuccessAnalyticFor:](_TtC4Maps29MapsSharedTripAnalyticsHelper, "sendSuccessAnalyticFor:", v3);

  }
}

void sub_100806964(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_pressedOtherStations");

}

void sub_100806C58(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "NavTrayViewController");
  v2 = (void *)qword_1014D34C8;
  qword_1014D34C8 = (uint64_t)v1;

}

void sub_100807E44(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;
  uint64_t v7;

  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_100807EC8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100808078;
    v13[3] = &unk_1011AD260;
    objc_copyWeak(&v14, (id *)(a1 + 40));
    v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Download Web Module"), v13);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "webBundleDirectory"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "absoluteString"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Web Bundle Directory"), v7));
    objc_msgSend(WeakRetained, "setDeviceVersionNumberRow:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addReadOnlyRowWithTitle:value:", CFSTR("Web Bundle Server Version"), CFSTR("Loading...")));
    objc_msgSend(WeakRetained, "setServerVersionNumberRow:", v9);

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1008080EC;
    v11[3] = &unk_1011AC860;
    v12 = *(id *)(a1 + 32);
    v10 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Remove WebBundle files"), v11);

    objc_destroyWeak(&v14);
  }

}

void sub_100808060(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100808078(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[RAPWebBundleDownloadManager sharedInstance](RAPWebBundleDownloadManager, "sharedInstance"));
    objc_msgSend(v3, "_downloadWebBundleWithForce:", 1);
    v4 = objc_loadWeakRetained(v1);
    objc_msgSend(v3, "addObserver:", v4);

    WeakRetained = v5;
  }

}

void sub_1008080EC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "webBundleDirectory"));
  +[NSFileManager emptyContentsOfDirectoryAtURL:error:](NSFileManager, "emptyContentsOfDirectoryAtURL:error:", v1, 0);

}

void sub_100808138(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyString:](a2, "addGEOTextFieldRowWithTitle:placeholderText:inputType:geoConfigKeyString:", CFSTR("Keywords"), CFSTR("comma-separated"), 3, GeoServicesConfig_RAPDebugSubmissionKeywords[0], GeoServicesConfig_RAPDebugSubmissionKeywords[1]);
}

void sub_100808178(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addButtonRowWithTitle:action:](a2, "addButtonRowWithTitle:action:", CFSTR("Present Fake Status Change Notification"), &stru_1011C9A20);
}

void sub_1008081A8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  objc_msgSend(v1, "simulateRAPStatusChangeNotification");

}

void sub_1008081DC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1008082C8;
  v7[3] = &unk_1011C5C00;
  v3 = a2;
  v8 = v3;
  sub_1003DDEF4((uint64_t)v7);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1008083B0;
  v5[3] = &unk_1011AD260;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  v4 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Reset defaults"), v5);
  objc_destroyWeak(&v6);

}

void sub_1008082B4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008082C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  uint64_t v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100808348;
  v6[3] = &unk_1011C5BD8;
  v7 = *(id *)(a1 + 32);
  v8 = a2;
  v9 = a3;
  GEOConfigGetPropertiesForKey(a2, a3, v6);

  return 1;
}

void sub_100808348(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;

  v8 = a2;
  v7 = objc_msgSend(*(id *)(a1 + 32), "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(a5, "BOOLValue"), 0);

}

void sub_1008083B0(uint64_t a1)
{
  id WeakRetained;

  sub_1003DDEF4((uint64_t)&stru_1011C9A60);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "reloadData");

}

BOOL sub_1008083F4(id a1, $6E15C01CA1BE37A4936191A84F7075E2 a2)
{
  _GEOConfigRemoveValue(*(_QWORD *)&a2.var0.var0, a2.var0.var1);
  return 1;
}

void sub_100808414(id a1, MapsDebugTableSection *a2)
{
  void *v2;
  id v3;
  MapsDebugTableSection *v4;

  v4 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:userDefaults:defaultsKey:](v4, "addSwitchRowWithTitle:userDefaults:defaultsKey:", CFSTR("Enable Long-Press to Show reportID"), v2, CFSTR("__internal__EnableTapRAPForReportID"));

}

void sub_10080847C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = objc_msgSend(v3, "addSwitchRowWithTitle:defaultsKey:", CFSTR("Received RAP Consent"), CFSTR("RAPHasReceived2015PrivacyConsent"));
  v5 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("group.com.apple.Maps"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addSwitchRowWithTitle:userDefaults:defaultsKey:", CFSTR("Development APS"), v5, CFSTR("__internal__PushManagerUseDevelopmentAPSEnvironment")));

  objc_msgSend(v6, "setSubtitle:", CFSTR("Use the development APS environment rather than prod."));
  v7 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Present Fake Resolution (10s delay)"), &stru_1011C9AA0);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1008085F4;
  v9[3] = &unk_1011AD260;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  v8 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Display Push Details"), v9);
  objc_destroyWeak(&v10);

}

void sub_1008085AC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1008085C0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  objc_msgSend(v1, "simulateProblemResolution");

}

void sub_1008085F4(uint64_t a1)
{
  void *v2;
  dispatch_semaphore_t v3;
  void *v4;
  NSObject *v5;
  dispatch_time_t v6;
  void *v7;
  void *v8;
  void *v9;
  id WeakRetained;
  _QWORD v11[4];
  NSObject *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEORPUserCredentials _credentialsForPrimaryICloudAccount](GEORPUserCredentials, "_credentialsForPrimaryICloudAccount"));
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = sub_1008087C0;
  v18 = sub_1008087D0;
  v19 = 0;
  v3 = dispatch_semaphore_create(0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPushDaemonRemoteProxy sharedInstance](MSPMapsPushDaemonRemoteProxy, "sharedInstance"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1008087D8;
  v11[3] = &unk_1011BFAB8;
  v13 = &v14;
  v5 = v3;
  v12 = v5;
  objc_msgSend(v4, "fetchDevicePushToken:", v11);

  v6 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "icloudUserPersonId"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "icloudUserMapsAuthToken"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Account PersonID: %@\nMaps Auth Token: %@\nMaps Push Token: %@\n"), v7, v8, v15[5]));

  NSLog(CFSTR("%@"), v9);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "displayMessage:titled:", v9, CFSTR("Push Details"));

  _Block_object_dispose(&v14, 8);
}

void sub_1008087A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008087C0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008087D0(uint64_t a1)
{

}

void sub_1008087D8(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100808824(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  MapsDebugTableSection *v5;

  v5 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v5, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Server Controlled UI"), MapsConfig_RAPEnableServerControlledUI, off_1014B40F8, 1, 0);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:](v5, "addSwitchRowWithTitle:geoConfigKey:", CFSTR("Cache Server Layout Results"), MapsConfig_RAPShouldCacheServerLayoutResults, off_1014B4158);
  v4 = -[MapsDebugTableSection addButtonRowWithTitle:action:](v5, "addButtonRowWithTitle:action:", CFSTR("Delete all cached layout results"), &stru_1011C9AE0);

}

void sub_1008088B4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[RAPFileManager baseLayoutFilePath](RAPFileManager, "baseLayoutFilePath"));
  +[RAPFileManager removeAllItemsInDirectory:](RAPFileManager, "removeAllItemsInDirectory:", v1);

}

void sub_1008088FC(id a1, MapsDebugTableSection *a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  MapsDebugTableSection *v8;

  v8 = a2;
  v2 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v8, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Force Client Override"), MapKitConfig_RAPForceOverrideServerConfig[0], MapKitConfig_RAPForceOverrideServerConfig[1], 0, 0);
  v3 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v8, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Building Cell"), MapsConfig_RAPShowBuildingAddressCell, off_1014B4178, 0, 0);
  v4 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v8, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Floor Cell"), MapsConfig_RAPShowFloorAddressCell, off_1014B4188, 0, 0);
  v5 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v8, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Unit Cell"), MapsConfig_RAPShowUnitAddressCell, off_1014B4198, 0, 0);
  v6 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v8, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Lightweight Feedback"), MapsConfig_ReportAProblemShouldOverrideEnableLightweightFeedback, off_1014B33D8, 0, 0);
  v7 = -[MapsDebugTableSection addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:](v8, "addSwitchRowWithTitle:geoConfigKey:switchOnStateIfUnset:changeHandler:", CFSTR("Enable Suggest an Edit Button"), MapKitConfig_RAPForceShowSuggestAnEditButton[0], MapKitConfig_RAPForceShowSuggestAnEditButton[1], 0, 0);

}

void sub_100808A24(id a1, MapsDebugTableSection *a2)
{
  id v2;

  v2 = -[MapsDebugTableSection addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:](a2, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", CFSTR("URL"), CFSTR("e.g. http://sim-jana-qa1.geo.apple.com/"), 0, CFSTR("RAPDebugSimJanaURL"));
}

void sub_100808A60(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = objc_msgSend(v3, "addTextFieldRowWithTitle:placeholderText:inputType:defaultsKey:", 0, CFSTR("Problem ID"), 0, CFSTR("RAPLastSubmittedProblemID"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100808B38;
  v6[3] = &unk_1011AD260;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v5 = objc_msgSend(v3, "addButtonRowWithTitle:action:", CFSTR("Fix"), v6);
  objc_destroyWeak(&v7);

}

void sub_100808B24(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100808B38(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
  objc_msgSend(v1, "endEditing:", 1);

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringForKey:", CFSTR("RAPLastSubmittedProblemID")));

  objc_msgSend(WeakRetained, "simulateFixForProblemWithID:", v3);
}

void sub_100808BC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id WeakRetained;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id obj;
  _QWORD v16[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringArrayForKey:", CFSTR("RAPPreviouslySubmittedProblemIDs")));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v18;
    do
    {
      v11 = 0;
      v12 = v9;
      do
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v11);
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Fix \"%@\""), v13));

        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_100808D8C;
        v16[3] = &unk_1011AC8B0;
        v16[4] = WeakRetained;
        v16[5] = v13;
        v14 = objc_msgSend(v3, "addButtonRowWithTitle:action:", v9, v16);
        v11 = (char *)v11 + 1;
        v12 = v9;
      }
      while (v8 != v11);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v8);

  }
}

id sub_100808D8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "simulateFixForProblemWithID:", *(_QWORD *)(a1 + 40));
}

void sub_100808D98(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id WeakRetained;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id obj;
  _QWORD v16[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringArrayForKey:", CFSTR("RAPPreviouslySubmittedProblemURLs")));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v18;
    do
    {
      v11 = 0;
      v12 = v9;
      do
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v11);
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Open \"%@\""), v13));

        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_100808F64;
        v16[3] = &unk_1011AC8B0;
        v16[4] = WeakRetained;
        v16[5] = v13;
        v14 = objc_msgSend(v3, "addButtonRowWithTitle:action:", v9, v16);
        v11 = (char *)v11 + 1;
        v12 = v9;
      }
      while (v8 != v11);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v8);

  }
}

id sub_100808F64(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "openAnalyticsWithURL:", *(_QWORD *)(a1 + 40));
}

void sub_100809180(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100809260;
  block[3] = &unk_1011B04A8;
  v15 = v8;
  v16 = v7;
  v10 = *(void **)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = v10;
  v19 = v9;
  v11 = v9;
  v12 = v7;
  v13 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100809260(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v12 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v3, 0, &v12));
    v5 = v12;
    if ((uint64_t)objc_msgSend(v2, "statusCode") >= 200 && (uint64_t)objc_msgSend(v2, "statusCode") < 300)
    {
      v6 = *(void **)(a1 + 48);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Fixed %@\n\n%@"), *(_QWORD *)(a1 + 56), v4));
      v8 = CFSTR("Success");
    }
    else
    {
      v6 = *(void **)(a1 + 48);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v4));
      v8 = CFSTR("SimJana Error");
    }
    objc_msgSend(v6, "displayMessage:titled:", v7, v8);

  }
  v9 = *(void **)(a1 + 64);
  if (v9)
  {
    v10 = *(void **)(a1 + 48);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedDescription"));
    objc_msgSend(v10, "displayMessage:titled:", v11, CFSTR("SimJana Error"));

  }
}

void sub_100809560(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100809584(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id WeakRetained;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD block[4];
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6)
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
    else
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "version"));
    v10 = (void *)v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "serverVersionNumberRow"));
    objc_msgSend(v11, "setSubtitle:", v10);

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100809688;
    block[3] = &unk_1011AD260;
    objc_copyWeak(&v13, v7);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    objc_destroyWeak(&v13);
  }

}

void sub_100809688(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "reloadData");
    WeakRetained = v2;
  }

}

id sub_100809960()
{
  if (qword_1014D34E0 != -1)
    dispatch_once(&qword_1014D34E0, &stru_1011C9B90);
  return (id)qword_1014D34D8;
}

void sub_10080A148(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v3 = *(_QWORD *)(a1 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v5 = v4;
    if (v3 == 1)
      objc_msgSend(v4, "startLocationUpdateWithObserver:", v6);
    else
      objc_msgSend(v4, "stopLocationUpdateWithObserver:", v6);

    WeakRetained = v6;
  }

}

void sub_10080A1B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFVIOSessionLocationAccuracyMonitor");
  v2 = (void *)qword_1014D34D8;
  qword_1014D34D8 = (uint64_t)v1;

}

void sub_10080A2D8(uint64_t a1, void *a2)
{
  id v3;
  SearchResult *v4;
  SearchFieldItem *v5;
  void *v6;
  void *v7;
  void *v8;
  SearchResult *v9;

  v3 = a2;
  v4 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v3);

  v5 = objc_alloc_init(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v5, "setSearchResult:", v4);
  v9 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v6));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
  objc_msgSend(v8, "openSearch:andResults:", v5, v7);

}

id sub_10080AC18(id a1, UGCPhotoViewerDataProviding *a2, unint64_t a3)
{
  return -[UGCPhotoViewerDataProviding albumCategory](a2, "albumCategory", a3);
}

void sub_10080B9B8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "collection"));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    v3 = v4;
  }

}

void sub_10080C3B8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  GuidesHomeSection *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  GuidesHomeSection *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  GuidesHomeSection *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  BOOL v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  id v51;
  NSObject *v52;
  id v53;
  NSObject *v54;
  const char *v55;
  id v56;
  _QWORD v57[4];
  id v58;
  BOOL v59;
  _QWORD v60[4];
  id v61;
  uint8_t buf[8];
  _QWORD v63[4];
  id v64;

  v3 = a2;
  switch((unint64_t)objc_msgSend(v3, "sectionType"))
  {
    case 1uLL:
      v4 = objc_alloc_init((Class)NSMutableArray);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "curatedGuides"));
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472;
      v63[2] = sub_10080CB14;
      v63[3] = &unk_1011C9BF8;
      v6 = v4;
      v64 = v6;
      objc_msgSend(v5, "enumerateObjectsUsingBlock:", v63);

      if (objc_msgSend(v6, "count"))
      {
        v7 = -[GuidesHomeSection initWithSectionKind:usingMaxWidth:usingTraitEnvironment:count:]([GuidesHomeSection alloc], "initWithSectionKind:usingMaxWidth:usingTraitEnvironment:count:", 3, *(_QWORD *)(a1 + 32), objc_msgSend(v6, "count"), *(double *)(a1 + 48));
        v8 = objc_alloc((Class)MKPlaceCollectionsLogicController);
        v9 = objc_msgSend(v6, "copy");
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[CuratedCollectionSyncManager sharedManager](CuratedCollectionSyncManager, "sharedManager"));
        v11 = objc_msgSend(v8, "initWithPlaceCollections:usingSyncCoordinator:inContext:", v9, v10, 8);

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "collectionLogicControllers"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(-[GuidesHomeSection sectionIdentifier](v7, "sectionIdentifier"));
        objc_msgSend(v12, "setObject:forKey:", v11, v13);

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
        -[GuidesHomeSection setSectionTitle:](v7, "setSectionTitle:", v14);

        v15 = objc_msgSend(v3, "contentType");
        if (v15 == (id)2)
          v16 = 2;
        else
          v16 = v15 == (id)1;
        -[GuidesHomeSection setContentType:](v7, "setContentType:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sections"));
        objc_msgSend(v17, "addObject:", v7);

      }
      else
      {
        v48 = sub_1004316CC();
        v49 = objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Guides Home section for HorizontalGuides couldn't build any objects to display in section", buf, 2u);
        }

      }
      v50 = v64;
      goto LABEL_27;
    case 2uLL:
      v18 = objc_alloc_init((Class)NSMutableArray);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "curatedGuides"));
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472;
      v60[2] = sub_10080CB60;
      v60[3] = &unk_1011C9BF8;
      v6 = v18;
      v61 = v6;
      objc_msgSend(v19, "enumerateObjectsUsingBlock:", v60);

      if (objc_msgSend(v6, "count"))
      {
        v20 = -[GuidesHomeSection initWithSectionKind:usingMaxWidth:usingTraitEnvironment:count:]([GuidesHomeSection alloc], "initWithSectionKind:usingMaxWidth:usingTraitEnvironment:count:", 4, *(_QWORD *)(a1 + 32), objc_msgSend(v6, "count"), *(double *)(a1 + 48));
        v21 = objc_alloc((Class)MKPlaceCollectionsLogicController);
        v22 = objc_msgSend(v6, "copy");
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[CuratedCollectionSyncManager sharedManager](CuratedCollectionSyncManager, "sharedManager"));
        v24 = objc_msgSend(v21, "initWithPlaceCollections:usingSyncCoordinator:inContext:", v22, v23, 9);

        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "collectionLogicControllers"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(-[GuidesHomeSection sectionIdentifier](v20, "sectionIdentifier"));
        objc_msgSend(v25, "setObject:forKey:", v24, v26);

        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
        -[GuidesHomeSection setSectionTitle:](v20, "setSectionTitle:", v27);

        v28 = objc_msgSend(v3, "contentType");
        if (v28 == (id)2)
          v29 = 2;
        else
          v29 = v28 == (id)1;
        -[GuidesHomeSection setContentType:](v20, "setContentType:", v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sections"));
        objc_msgSend(v30, "addObject:", v20);

      }
      else
      {
        v51 = sub_1004316CC();
        v52 = objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Guides Home section for VerticalGuides couldn't build any objects to display in section.", buf, 2u);
        }

      }
      v50 = v61;
LABEL_27:

      goto LABEL_28;
    case 3uLL:
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "guideLocations"));

      if (!v31)
        goto LABEL_29;
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "guideLocations"));
      if (objc_msgSend(v6, "count"))
      {
        v32 = -[GuidesHomeSection initWithSectionKind:usingMaxWidth:usingTraitEnvironment:count:]([GuidesHomeSection alloc], "initWithSectionKind:usingMaxWidth:usingTraitEnvironment:count:", 2, *(_QWORD *)(a1 + 32), objc_msgSend(v6, "count"), *(double *)(a1 + 48));
        v33 = objc_msgSend(objc_alloc((Class)MKPlaceCompactCollectionsLogicController), "initWithGuideLocations:context:", v6, 2);
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "compactCollectionLogicControllers"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(-[GuidesHomeSection sectionIdentifier](v32, "sectionIdentifier"));
        objc_msgSend(v34, "setObject:forKey:", v33, v35);

        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
        -[GuidesHomeSection setSectionTitle:](v32, "setSectionTitle:", v36);

        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sections"));
        objc_msgSend(v37, "addObject:", v32);

        goto LABEL_18;
      }
      v53 = sub_1004316CC();
      v54 = objc_claimAutoreleasedReturnValue(v53);
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        goto LABEL_35;
      *(_WORD *)buf = 0;
      v55 = "Guides Home section for GuideLocations couldn't build any objects to display in section.";
      goto LABEL_34;
    case 4uLL:
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "publishers"));
      v6 = v38;
      if (!v38)
        goto LABEL_28;
      if (objc_msgSend(v38, "count"))
      {
        v32 = -[GuidesHomeSection initWithSectionKind:usingMaxWidth:usingTraitEnvironment:count:]([GuidesHomeSection alloc], "initWithSectionKind:usingMaxWidth:usingTraitEnvironment:count:", 5, *(_QWORD *)(a1 + 32), objc_msgSend(v6, "count"), *(double *)(a1 + 48));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
        -[GuidesHomeSection setSectionTitle:](v32, "setSectionTitle:", v39);

        v40 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
        v41 = objc_msgSend(v40, "userInterfaceIdiom") != (id)5;

        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "publishers"));
        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v42, "count")));

        v57[0] = _NSConcreteStackBlock;
        v57[1] = 3221225472;
        v57[2] = sub_10080CBAC;
        v57[3] = &unk_1011C9C20;
        v58 = v43;
        v59 = v41;
        v33 = v43;
        objc_msgSend(v6, "enumerateObjectsUsingBlock:", v57);
        v44 = objc_msgSend(objc_alloc((Class)NSOrderedSet), "initWithArray:", v33);
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "array"));
        v46 = objc_msgSend(v45, "copy");
        objc_msgSend(*(id *)(a1 + 40), "setPublishers:", v46);

        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sections"));
        objc_msgSend(v47, "addObject:", v32);

LABEL_18:
      }
      else
      {
        v56 = sub_1004316CC();
        v54 = objc_claimAutoreleasedReturnValue(v56);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v55 = "Guides Home section for Publishers couldn't build any objects to display in section.";
LABEL_34:
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, v55, buf, 2u);
        }
LABEL_35:

      }
LABEL_28:

LABEL_29:
      return;
    default:
      goto LABEL_29;
  }
}

void sub_10080CB14(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "collection"));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    v3 = v4;
  }

}

void sub_10080CB60(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "collection"));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    v3 = v4;
  }

}

void sub_10080CBAC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "publisher"));

  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "publisher"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[TwoLinesContentViewModelComposer cellModelForPublisher:showDisclosureIndicator:](TwoLinesContentViewModelComposer, "cellModelForPublisher:showDisclosureIndicator:", v5, *(unsigned __int8 *)(a1 + 40)));
    objc_msgSend(v4, "addObject:", v6);

  }
}

void sub_10080DC44(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  int v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  void *v23;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_processLocations:", a2));
  v4 = objc_alloc((Class)GEORPFeedbackRequestParameters);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned int *)(v5 + 12);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v5, "_incidentUserPath"));
  v10 = objc_msgSend(v4, "initWithIncidentLocation:userLocation:type:historicalLocations:userPath:", v6, v7, v8, v3, v9);

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v11 = objc_alloc_init((Class)GEORPSiriContext);
    v12 = *(int *)(*(_QWORD *)(a1 + 32) + 12);
    if (v12 >= 0x12)
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(int *)(*(_QWORD *)(a1 + 32) + 12)));
    else
      v13 = (void *)*((_QWORD *)&off_1011C9D98 + v12);
    objc_msgSend(v11, "setSiriIncidentType:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "submissionParameters"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "details"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "incidentFeedback"));
    objc_msgSend(v16, "setSiriContext:", v11);

  }
  v17 = sub_1004327DC();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v19 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12);
    *(_DWORD *)buf = 67109378;
    v21 = v19;
    v22 = 2112;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Submitting incident report type: %d locations: %@", buf, 0x12u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_submitFeedbackRequestParameters:attachedImages:comments:requireAuthenication:completionHandler:", v10, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), sub_100BA18A8(), *(_QWORD *)(a1 + 56));
}

void sub_10080E1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10080E20C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(WeakRetained, "setIncidentUpdateTime:", v2);

    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      (*(void (**)(void))(v3 + 16))();
  }

}

id sub_10080E3A0(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  if (a2)
    return objc_msgSend(*(id *)(a1 + 32), "_submitFeedbackRequestParameters:attachedImages:comments:userInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2);
  v4 = sub_1004327DC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error generating userInfo for authenication", v8, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[TrafficIncidentAuthenticationManager sharedInstance](TrafficIncidentAuthenticationManager, "sharedInstance"));
  objc_msgSend(v6, "rolloverAnonymousId");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[TrafficIncidentsStorageManager sharedInstance](TrafficIncidentsStorageManager, "sharedInstance"));
  objc_msgSend(v7, "resubmitLastReport");

  return objc_msgSend(*(id *)(a1 + 32), "_displayInternalErrorAlert");
}

void sub_10080E624(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "submissionManager"));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 72))
    v5 = *(_QWORD *)(a1 + 40);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapService sharedService](GEOMapService, "sharedService"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "defaultTraits"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10080E724;
  v10[3] = &unk_1011C9CC0;
  v9 = *(_QWORD *)(a1 + 56);
  v10[4] = *(_QWORD *)(a1 + 64);
  objc_msgSend(v3, "submitOrEnqueueFeedback:attachedImages:userInfo:traits:debugSettings:uploadPolicy:feedbackObjectToUpdate:completion:", v4, v5, v6, v8, v9, 0, 0, v10);

}

void sub_10080E724(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v4 = a3;
  if (v4)
  {
    v5 = sub_1004327DC();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error submitting incident %@", (uint8_t *)&v9, 0xCu);
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[TrafficIncidentsStorageManager sharedInstance](TrafficIncidentsStorageManager, "sharedInstance"));
    objc_msgSend(v7, "resubmitLastReport");

    objc_msgSend(*(id *)(a1 + 32), "_displayInternalErrorAlert");
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(*(id *)(a1 + 32), "setIncidentUpdateTime:", v8);

  }
}

void sub_10080E8B4(id a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  dispatch_time_t v6;
  void *v7;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Error"), CFSTR("kMapsInterruptionTitle"));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("The incident submission failed, please file a radar"), CFSTR("kMapsInterruptionMessage"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MapsInterruptionAction actionWithTitle:cancels:handler:](MapsInterruptionAction, "actionWithTitle:cancels:handler:", CFSTR("Dismiss"), 1, 0));
  v7 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", v3, CFSTR("kMapsInterruptionActions"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  v5 = objc_msgSend(v1, "copy");
  objc_msgSend(v4, "interruptApplicationWithKind:userInfo:completionHandler:", 23, v5, 0);

  v6 = dispatch_time(0, 25000000000);
  dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, &stru_1011C9D00);

}

void sub_10080EA0C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedMapsDelegate](UIApplication, "sharedMapsDelegate"));
  objc_msgSend(v1, "dismissCurrentInterruptionOfKind:", 23);

}

id sub_10080EAEC(id a1, GEOLocation *a2, unint64_t a3)
{
  GEOLocation *v3;

  v3 = a2;
  -[GEOLocation clearSensitiveFields:](v3, "clearSensitiveFields:", 0);
  return v3;
}

uint64_t sub_10080ED04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v1 = qword_1014D34E8;
  v7 = qword_1014D34E8;
  if (!qword_1014D34E8)
  {
    v8[0] = *(_OWORD *)off_1011C9E48;
    v8[1] = *(_OWORD *)&off_1011C9E58;
    v2 = _sl_dlopen(v8, a1);
    v5[3] = v2;
    qword_1014D34E8 = v2;
    v1 = v2;
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10080EDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_10080EDCC()
{
  uint64_t v0;
  char *v1;
  char *v2;

  v2 = 0;
  v0 = sub_10080ED04((uint64_t)&v2);
  v1 = v2;
  if (!v0)
  {
    v1 = (char *)abort_report_np("%s", v2);
    goto LABEL_5;
  }
  if (v2)
LABEL_5:
    free(v1);
}

id sub_10080EE18()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1014D34F0;
  v7 = qword_1014D34F0;
  if (!qword_1014D34F0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10080EED0;
    v3[3] = &unk_1011AFF60;
    v3[4] = &v4;
    sub_10080EED0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10080EEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_10080EED0(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_10080EDCC();
  result = objc_getClass("FCFImageEncoder");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1014D34F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np("Unable to find class %s", "FCFImageEncoder");
    return (Class)sub_10080EF3C(v3);
  }
  return result;
}

id sub_10080EF3C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1014D34F8;
  v7 = qword_1014D34F8;
  if (!qword_1014D34F8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10080EFF4;
    v3[3] = &unk_1011AFF60;
    v3[4] = &v4;
    sub_10080EFF4((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10080EFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

WatermarkView *sub_10080EFF4(uint64_t a1)
{
  WatermarkView *result;
  WatermarkView *v3;
  SEL v4;
  CGRect v5;

  sub_10080EDCC();
  result = (WatermarkView *)objc_getClass("WatermarkProperties");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1014D34F8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (WatermarkView *)abort_report_np("Unable to find class %s", "WatermarkProperties");
    return -[WatermarkView initWithFrame:](v3, v4, v5);
  }
  return result;
}

void sub_10080F3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10080F408(uint64_t a1)
{
  id WeakRetained;
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = sub_10043284C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Received notification that the AppleConnect ID has changed", v4, 2u);
  }

  objc_msgSend(WeakRetained, "_updateWatermark");
}

void sub_10080FAC8(id a1, unint64_t a2)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOTileLoader modernLoader](GEOTileLoader, "modernLoader"));
  objc_msgSend(v2, "clearAllCaches");

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", VKShouldFlushTileCachesNotification, 0);

}

void sub_100810934(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100810954(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  id WeakRetained;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;

  v2 = sub_100431DCC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 368);
    v8 = 138412290;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopped monitoring friendship stream for PlaceCardItem: %@", (uint8_t *)&v8, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = (void *)*((_QWORD *)WeakRetained + 41);
    *((_QWORD *)WeakRetained + 41) = 0;

  }
}

id sub_100810CF8(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100810D58;
  v2[3] = &unk_1011AC860;
  v2[4] = *(_QWORD *)(a1 + 32);
  return +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);
}

id sub_100810D58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateContent");
}

void sub_100811728(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  unsigned int v16;
  id *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  PlaceCardItem *v25;
  void *v26;
  id v27;

  v27 = a3;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 214) = 0;
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 368);
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapItem"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_identifier"));
  v11 = objc_msgSend(v8, "isEqual:", v10);

  if (a4
    || !v11
    || (v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "mapItem")),
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_geoMapItem")),
        v14 = objc_msgSend(v13, "hasExpiredComponents"),
        v13,
        v12,
        (v14 & 1) != 0))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeCardItem"));
    v16 = objc_msgSend(v15, "isIntermediateMapItem");

    v17 = *(id **)(a1 + 32);
    if (v16)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "placeCardItem"));
      objc_msgSend(v18, "setIsIntermediateMapItem:", 0);

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "analyticsController"));
      objc_msgSend(v19, "disableDeferLoggingUntilRefinementWithShouldInvokeReveal:", 0);

      objc_msgSend(*(id *)(a1 + 32), "placeCardItemMapItemDidChangeWithFailedRefinement:", 1);
    }
    else
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17[25], "analyticsController"));
      objc_msgSend(v20, "disableDeferLoggingUntilRefinementWithShouldInvokeReveal:", 1);

    }
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(void **)(v21 + 344);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v21 + 368), "mapItem"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "mapItem"));
    objc_msgSend(v22, "updateMapsSyncPlaceItemsMatchingMapItem:withStorageFrom:", v23, v24);

    objc_msgSend(*(id *)(a1 + 32), "_carryOverTransitDisplayInformationFromCurrentItemToNewFetchedResult:", v27);
    v25 = -[PlaceCardItem initWithSearchResult:]([PlaceCardItem alloc], "initWithSearchResult:", v27);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "analyticsController"));
    objc_msgSend(v26, "disableDeferLoggingUntilRefinementWithShouldInvokeReveal:", 0);

    objc_msgSend(*(id *)(a1 + 32), "setPlaceCardItem:", v25);
  }

}

id sub_100811C28(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 336), "addPlaceToLibraryWithCustomName:", a2);
}

id sub_100812774(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setBool:forKey:", 1, CFSTR("OfflineMapsPlaceCardDownloadTipsShownKey"));

  objc_msgSend(*(id *)(a1 + 32), "_clearOfflineDownloadTipIfNeeded");
  return +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 371, 201, 0);
}

void sub_100812A2C(id a1)
{
  byte_1014D3500 = GEOConfigGetBOOL(MapsConfig_ShouldInsertRecentPOIForRouting, off_1014B30A8);
}

id sub_100813C78()
{
  if (qword_1014D3518 != -1)
    dispatch_once(&qword_1014D3518, &stru_1011CA090);
  return (id)qword_1014D3510;
}

void sub_1008140BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008140E0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_routeFromCurrentSearchResult");

}

void sub_1008146A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  id *v42;

  objc_destroyWeak(v42);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10081473C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_addPlaceToCollection:editCollection:", *(_QWORD *)(a1 + 32), 0);

}

void sub_10081477C(uint64_t a1)
{
  id WeakRetained;
  CollectionAddOrRemoveSession *v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    if (+[LibraryUIUtilities isMyPlacesEnabled](_TtC4Maps18LibraryUIUtilities, "isMyPlacesEnabled"))
    {
      v3 = -[CollectionSaveSession initWithMapItem:]([CollectionAddOrRemoveSession alloc], "initWithMapItem:", *(_QWORD *)(a1 + 32));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "placeCardDelegate"));
      objc_msgSend(v4, "placeCardViewController:createNewCollectionWithSession:", v6, v3);
    }
    else
    {
      v3 = (CollectionAddOrRemoveSession *)objc_claimAutoreleasedReturnValue(+[CollectionHandler collection](CollectionHandler, "collection"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("[Collections] New Guide"), CFSTR("localized string not found"), 0));

      -[CollectionAddOrRemoveSession updateTitle:](v3, "updateTitle:", v4);
      objc_msgSend(v6, "_addPlaceToCollection:editCollection:", v3, 1);
    }

    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 2072, 201, 0);
    WeakRetained = v6;
  }

}

void sub_10081488C(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "placeViewControllerDidSelectAddAPlace:isQuickAction:", WeakRetained[25], 1);
    WeakRetained = v2;
  }

}

void sub_100814EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100814ED0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id *WeakRetained;
  id *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a4;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[25], "analyticsController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsModuleMetadata"));
    objc_msgSend(v9, "infoCardAnalyticsDidSelectAction:target:eventValue:moduleMetadata:feedbackDelegateSelector:actionRichProviderId:", a2, a3, v11, v10, 0, 0);

  }
}

void sub_1008151A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1008151C0(uint64_t a1)
{
  CollectionAddOrRemoveSession *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  char v8;

  v2 = -[CollectionEditSession initWithCollection:]([CollectionAddOrRemoveSession alloc], "initWithCollection:", *(_QWORD *)(a1 + 32));
  -[CollectionEditSession addSelectedObject:](v2, "addSelectedObject:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[CollectionEditSession collection](v2, "collection"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1008152C0;
  v4[3] = &unk_1011C9F00;
  v8 = *(_BYTE *)(a1 + 64);
  v5 = *(id *)(a1 + 48);
  objc_copyWeak(&v7, (id *)(a1 + 56));
  v6 = *(id *)(a1 + 32);
  -[CollectionAddOrRemoveSession applyToCollection:completion:](v2, "applyToCollection:completion:", v3, v4);

  objc_destroyWeak(&v7);
}

void sub_1008152AC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1008152C0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  id WeakRetained;
  int v8;
  id v9;

  v3 = a2;
  if (v3)
  {
    v4 = sub_1004315EC();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v8 = 138412290;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error saving collection session: %@", (uint8_t *)&v8, 0xCu);
    }

  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v6 = *(void **)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(v6, "placeCardViewController:editCollection:", WeakRetained, *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_1008153A8(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setName:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1008155F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;

  v3 = a2;
  if (objc_msgSend(v3, "reportStatus"))
  {
    v4 = 0;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentData"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItemStorage"));
    v7 = v6;
    if (v6)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_identifier"));
      if (v8)
      {
        v9 = objc_msgSend(objc_alloc((Class)MKMapItemIdentifier), "initWithGEOMapItemIdentifier:", v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
        v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_identifier"));
        v12 = v11;
        if (v11 == v9)
          v4 = 1;
        else
          v4 = (uint64_t)objc_msgSend(v11, "isEqual:", v9);

      }
      else
      {
        v4 = 0;
      }

    }
    else
    {
      v4 = 0;
    }

  }
  return v4;
}

void sub_1008167DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008167F8(uint64_t a1, char a2)
{
  _QWORD *WeakRetained;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  uint8_t v10[16];
  uint64_t v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if ((a2 & 1) == 0)
    {
      v5 = sub_100431DCC();
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error adding shortcut", v10, 2u);
      }

    }
    v7 = (void *)WeakRetained[32];
    WeakRetained[32] = 0;

    if (*(_QWORD *)(a1 + 32))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[MapsSyncStore sharedStore](_TtC8MapsSync13MapsSyncStore, "sharedStore"));
      v11 = *(_QWORD *)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
      objc_msgSend(v8, "saveWithObjects:error:", v9, 0);

    }
  }

}

void sub_100816A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100816A24(uint64_t a1, char a2)
{
  _QWORD *WeakRetained;
  id v4;
  NSObject *v5;
  void *v6;
  uint8_t v7[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if ((a2 & 1) == 0)
    {
      v4 = sub_100431DCC();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error removing shortcut", v7, 2u);
      }

    }
    v6 = (void *)WeakRetained[32];
    WeakRetained[32] = 0;

  }
}

void sub_100816FB0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 368);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rapPlace"));
  objc_msgSend(v3, "setReportedPlace:", v4);

}

id sub_100817110(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stopAnimatingActivityIndicatorViewForRAP");
}

void sub_100817330(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rapPlace"));
  objc_msgSend(v3, "setReportedPlace:", v4);

}

void sub_10081743C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rapPlace"));
  objc_msgSend(v3, "setReportedPlace:", v4);

}

void sub_100817548(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rapPlace"));
  objc_msgSend(v3, "setReportedPlace:", v4);

}

void sub_1008176A8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rapPlace"));
  objc_msgSend(v3, "setReportedPlace:", v4);

}

void sub_100817C98(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100817D2C;
    v5[3] = &unk_1011ACAD0;
    v7 = v4;
    v6 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  }
}

uint64_t sub_100817D2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32) == 0);
}

void sub_100817ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100817EF4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void **v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *, void *);
  void *v11;
  id v12;
  id v13;

  v3 = a2;
  if (v3
    || (v4 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager")), v5 = objc_msgSend(v4, "isAuthorizedForPreciseLocation"), v4, !v5))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v8 = _NSConcreteStackBlock;
    v9 = 3221225472;
    v10 = sub_100818030;
    v11 = &unk_1011C9F78;
    objc_copyWeak(&v13, (id *)(a1 + 40));
    v12 = *(id *)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "singleLocationUpdateWithDesiredAccuracy:handler:", &v8, kCLLocationAccuracyBest));

    objc_msgSend(v7, "start", v8, v9, v10, v11);
    objc_destroyWeak(&v13);
  }

}

void sub_100818018(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100818030(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100818140;
    v9[3] = &unk_1011BBE80;
    objc_copyWeak(&v12, (id *)(a1 + 40));
    v8 = v7;
    v10 = v8;
    v11 = *(id *)(a1 + 32);
    objc_msgSend(v8, "tryUpdatingCurrentLocationSearchResultWithCompletion:", v9);

    objc_destroyWeak(&v12);
  }

}

void sub_10081812C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100818140(uint64_t a1, int a2)
{
  _QWORD *WeakRetained;
  uint64_t v5;
  void *v6;
  _QWORD *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    if (a2)
    {
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mapItem"));
      v6 = (void *)v7[27];
      v7[27] = v5;

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    WeakRetained = v7;
  }

}

void sub_100818468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100818484(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "placeCardDelegate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mapItem"));
    objc_msgSend(v6, "placeCardViewController:didSelectParent:", v5, v7);

  }
}

void sub_10081900C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 240));
  _Unwind_Resume(a1);
}

void sub_10081905C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "viewContact");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_instrumentHeaderButtonAction:withFeedbackType:", 6044, 0);

}

void sub_1008190B0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "openFindMy");

}

void sub_1008190DC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "openRequestLocation");

}

void sub_100819108(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "placeCardDelegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "placeCardItem"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchResult"));
  objc_msgSend(v3, "placeCardViewController:editLocationOfMarkedLocation:", v4, v6);

  v7 = objc_loadWeakRetained(v1);
  objc_msgSend(v7, "_instrumentHeaderButtonAction:withFeedbackType:", 6005, 0);

}

void sub_1008191C4(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "placeCardDelegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "placeCardItem"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItem"));
  objc_msgSend(v3, "placeCardViewController:enterFlyoverForMapItem:", v4, v6);

  v7 = objc_loadWeakRetained(v1);
  objc_msgSend(v7, "_instrumentHeaderButtonAction:withFeedbackType:", 6004, 127);

}

void sub_100819280(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  id v7;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "placeCardDelegate"));
  v6 = objc_loadWeakRetained(v2);
  objc_msgSend(v5, "placeCardViewController:createDroppedPin:", v6, v3);

  v7 = objc_loadWeakRetained(v2);
  objc_msgSend(v7, "_instrumentHeaderButtonAction:withFeedbackType:", 1030, 0);

}

void sub_10081931C(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
  v3 = objc_msgSend(v2, "isAuthorizedForPreciseLocation");

  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeCardItem"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "searchResult"));
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[MKMapService sharedService](MKMapService, "sharedService"));
    objc_msgSend(v6, "captureUserAction:onTarget:eventValue:", 56, 691, 0);

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100819448;
    v9[3] = &unk_1011AE218;
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v7, "requestTemporaryPreciseLocationAuthorizationWithPurposeKey:completion:", CFSTR("AppInfoTemporaryPreciseLocationAuthorizationForMarkLocationPurposeKey"), v9);

  }
}

void sub_100819448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
  {
    v13 = v5;
    v14 = v4;
    v15 = v2;
    v16 = v3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
    v8 = objc_msgSend(v7, "isAuthorizedForPreciseLocation");

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[MKLocationManager sharedLocationManager](MKLocationManager, "sharedLocationManager"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10081952C;
      v11[3] = &unk_1011B81D0;
      v12 = *(id *)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "singleLocationUpdateWithDesiredAccuracy:handler:", v11, kCLLocationAccuracyBest));

      objc_msgSend(v10, "start");
    }
  }
}

void sub_10081952C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[SearchResult currentLocationSearchResult](SearchResult, "currentLocationSearchResult"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100819578(uint64_t a1)
{
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", 2063, 253, 0);
    objc_msgSend(WeakRetained, "placeViewControllerDidSelectRefineLocation:", WeakRetained[25]);
  }

}

void sub_1008195D4(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  id *v6;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[25], "analyticsController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URLString"));
    objc_msgSend(v3, "instrumentAction:target:eventValue:moduleType:feedbackType:", 50, 201, v4, 2, 0);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URLString"));
    objc_msgSend(v3, "instrumentAction:target:eventValue:moduleType:feedbackType:", 6105, 670, v5, 2, 0);

    objc_msgSend(v6, "presentQuickLink:", *(_QWORD *)(a1 + 32));
    WeakRetained = v6;
  }

}

void sub_1008199A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_1008199C0(id a1, CNLabeledValue *a2, NSDictionary *a3)
{
  void *v3;
  void *v4;
  BOOL v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[CNLabeledValue identifier](a2, "identifier", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CNContact _mapkit_sharedLocationContactIdentifer](CNContact, "_mapkit_sharedLocationContactIdentifer"));
  v5 = v3 != v4;

  return v5;
}

void sub_100819A0C(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_chromeViewControllerPresent:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void sub_100819C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100819C70(uint64_t a1, int a2)
{
  id WeakRetained;
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      v4 = sub_100431DCC();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v7 = 138412290;
        v8 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Opened findmy handle for identifier: %@", (uint8_t *)&v7, 0xCu);
      }

    }
  }
}

void sub_100819F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100819F4C(uint64_t a1, int a2)
{
  id WeakRetained;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      v4 = sub_100431DCC();
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeCardItem"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchResult"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "autocompletePerson"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "title"));
        v10 = 138412290;
        v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Opened message app for handle for identifier: %@", (uint8_t *)&v10, 0xCu);

      }
    }

  }
}

void sub_10081A1B8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "placeCardDelegate"));
  objc_msgSend(v2, "placeCardViewControllerRemovedObservingHandle:", *(_QWORD *)(a1 + 32));

}

void sub_10081A30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10081A330(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "containeeDelegate"));
    objc_msgSend(v2, "placeViewControllerViewContactsClosed");

    WeakRetained = v3;
  }

}

void sub_10081A6E4(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  void *v18;

  v5 = a3;
  if ((a2 & 1) != 0)
  {
    v6 = sub_100431DCC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v15 = 138412290;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "AppClip of url %@ is available", (uint8_t *)&v15, 0xCu);
    }
  }
  else
  {
    v9 = sub_100431DCC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
        v15 = 138412546;
        v16 = v12;
        v17 = 2112;
        v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "AppClip request for URL: %@ failed with error: %@", (uint8_t *)&v15, 0x16u);

      }
    }
    else if (v11)
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = 138412290;
      v16 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "AppClip request for URL: %@ failed", (uint8_t *)&v15, 0xCu);
    }

    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "placeCardDelegate"));
    -[NSObject placeCardViewController:openURL:](v7, "placeCardViewController:openURL:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  }

}

id sub_10081AF68(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10081B724(uint64_t a1)
{
  return objc_msgSend(objc_alloc((Class)UIDragPreview), "initWithView:", *(_QWORD *)(a1 + 32));
}

void sub_10081B7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  if (a2 == 1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (!*(_QWORD *)(v2 + 248))
    {
      v3 = *(void **)(v2 + 240);
      *(_QWORD *)(v2 + 240) = 0;

    }
  }
}

void sub_10081C2E8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "topMostPresentedViewController"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10081CB40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PlaceCardViewController");
  v2 = (void *)qword_1014D3510;
  qword_1014D3510 = (uint64_t)v1;

}

UIFont *__cdecl sub_10081CB70(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[MKFontManager sharedManager](MKFontManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "boldBodyFont"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont _maps_cappedFont:withMaxPoint:](UIFont, "_maps_cappedFont:withMaxPoint:", v2, 24.0));

  return (UIFont *)v3;
}

void sub_10081D820(id a1)
{
  RoutingAppsManager *v1;
  void *v2;

  v1 = objc_alloc_init(RoutingAppsManager);
  v2 = (void *)qword_1014D3520;
  qword_1014D3520 = (uint64_t)v1;

}

void sub_10081DBE4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t, void *, void *, void *);
  void *v10;
  id v11;
  id v12;

  v2 = objc_alloc((Class)NSMutableURLRequest);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(a1 + 32)));
  v4 = objc_msgSend(v2, "initWithURL:cachePolicy:timeoutInterval:", v3, 0, 5.0);

  objc_msgSend(v4, "setValue:forHTTPHeaderField:", *(_QWORD *)(a1 + 40), CFSTR("If-None-Match"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSession sharedSession](NSURLSession, "sharedSession"));
  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_10081DCFC;
  v10 = &unk_1011C9B48;
  v11 = *(id *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dataTaskWithRequest:completionHandler:", v4, &v7));

  objc_msgSend(v6, "resume", v7, v8, v9, v10);
}

void sub_10081DCFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v7 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10081DDF0;
  block[3] = &unk_1011B04A8;
  v12 = a3;
  v13 = a4;
  v14 = v7;
  v15 = *(id *)(a1 + 32);
  v16 = *(id *)(a1 + 40);
  v8 = v7;
  v9 = v13;
  v10 = v12;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10081DDF0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;

  v2 = *(id *)(a1 + 32);
  if (objc_msgSend(v2, "statusCode") == (id)200)
  {
    if (!*(_QWORD *)(a1 + 48))
    {
      sub_100A133C4(CFSTR("Error downloading coverage file: %@."), v3, v4, v5, v6, v7, v8, v9, *(_QWORD *)(a1 + 40));
      goto LABEL_24;
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "coverageFilePath"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringByAppendingPathExtension:", CFSTR("download")));
    if (objc_msgSend(v10, "fileExistsAtPath:", v12))
    {
      v72 = 0;
      v13 = objc_msgSend(v10, "removeItemAtPath:error:", v12, &v72);
      v21 = v72;
      if ((v13 & 1) == 0)
      {
        sub_100A133C4(CFSTR("Error removing old coverage download file at path: %@. Error: %@."), v14, v15, v16, v17, v18, v19, v20, (uint64_t)v12);
LABEL_23:

        goto LABEL_24;
      }
    }
    else
    {
      v21 = 0;
    }
    v29 = v21;
    v30 = *(void **)(a1 + 48);
    v71 = v21;
    v31 = objc_msgSend(v30, "writeToFile:options:error:", v12, 0, &v71);
    v21 = v71;

    if ((v31 & 1) == 0)
    {
      sub_100A133C4(CFSTR("Error saving updated coverage file to download path: %@. Error: %@."), v32, v33, v34, v35, v36, v37, v38, (uint64_t)v12);
      goto LABEL_23;
    }
    if (objc_msgSend(v10, "fileExistsAtPath:", v11))
    {
      v70 = v21;
      v39 = objc_msgSend(v10, "removeItemAtPath:error:", v11, &v70);
      v40 = v70;

      if ((v39 & 1) == 0)
      {
        sub_100A133C4(CFSTR("Error removing old coverage file at path %@. Error: %@."), v41, v42, v43, v44, v45, v46, v47, (uint64_t)v11);
LABEL_22:
        v21 = v40;
        goto LABEL_23;
      }
      v21 = v40;
    }
    v69 = v21;
    v48 = objc_msgSend(v10, "moveItemAtPath:toPath:error:", v12, v11, &v69);
    v40 = v69;

    if ((v48 & 1) != 0)
    {
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allHeaderFields"));
      v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKeyedSubscript:", CFSTR("Etag")));

      v58 = *(void **)(a1 + 64);
      v68 = v40;
      v59 = objc_msgSend(v58, "setETag:forAssetType:error:", v57, SSDownloadAssetTypeTransitMapsData, &v68);
      v21 = v68;

      if ((v59 & 1) == 0)
        sub_100A133C4(CFSTR("Failed to save eTag %@ to library item %@. Error: %@."), v60, v61, v62, v63, v64, v65, v66, (uint64_t)v57);

      goto LABEL_23;
    }
    sub_100A133C4(CFSTR("Error moving old coverage file at path %@ to %@. Error: %@."), v49, v50, v51, v52, v53, v54, v55, (uint64_t)v11);
    goto LABEL_22;
  }
  v67 = objc_msgSend(v2, "statusCode");
  sub_100A133C4(CFSTR("Non-200 response (%d) for coverage file: %@."), v22, v23, v24, v25, v26, v27, v28, (uint64_t)v67);
LABEL_24:

}

void sub_10081E0F4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_installedApps"));
  if (objc_msgSend(v2, "count"))
  {
    v3 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v2, "count"));
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleIdentifier"));
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, v10);

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v6);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_appIdsStringWithApplicationProxies:", v4));
    v12 = objc_alloc_init((Class)SSSoftwareLibrary);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10081E2D4;
    v15[3] = &unk_1011AE6F0;
    v13 = *(_QWORD *)(a1 + 32);
    v16 = v3;
    v17 = v13;
    v14 = v3;
    objc_msgSend(v12, "getLibraryItemForBundleIdentifiers:completionBlock:", v11, v15);

  }
}

void sub_10081E2D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v5 = a2;
  v6 = v5;
  if (a3)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "description"));
    NSLog(CFSTR("Error loading app metadata: %@."), v7);

  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v17;
      v11 = SSSoftwareLibraryItemBundleIdentifier;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v10)
            objc_enumerationMutation(v6);
          v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "valueForProperty:", v11));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKey:", v14));
          if (v15)
            objc_msgSend(*(id *)(a1 + 40), "_updateCoverageFileForAppProxy:libraryItem:", v15, v13);
          else
            NSLog(CFSTR("Warning: Unrecognized bundleId for routing application: %@."), v14);

        }
        v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v9);
    }
  }

}

void sub_10081E528(uint64_t a1)
{
  id v1;
  void *v2;
  unsigned __int8 v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id obj;
  id v26;
  _QWORD block[4];
  id v28;
  id v29;
  id v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_installedApps"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = objc_msgSend(v2, "BOOLForKey:", CFSTR("__internal__DisableTransitAppSieving"));

  v4 = v1;
  if ((v3 & 1) == 0)
  {
    v26 = objc_alloc_init((Class)NSMutableArray);
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v23 = v1;
    obj = v1;
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = *(_QWORD *)v33;
      do
      {
        v9 = 0;
        v10 = v7;
        do
        {
          if (*(_QWORD *)v33 != v8)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v9);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "coverageFilePath"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
          v14 = objc_msgSend(v13, "isReadableFileAtPath:", v12);

          if ((v14 & 1) != 0)
          {
            v15 = objc_alloc((Class)_MKRoutingAppCoverageRegions);
            v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v12));
            v31 = v10;
            v17 = objc_msgSend(v15, "initWithContentsOfURL:error:", v16, &v31);
            v7 = v31;

            if (v17)
            {
              if (objc_msgSend(v17, "containsCoordinate:", *(double *)(a1 + 48), *(double *)(a1 + 56))
                && objc_msgSend(v17, "containsCoordinate:", *(double *)(a1 + 64), *(double *)(a1 + 72)))
              {
                objc_msgSend(v26, "addObject:", v11);
              }
            }
            else
            {
              NSLog(CFSTR("Error parsing GeoJSON coverage file: %@."), v7);
            }

            v10 = v7;
          }
          else
          {
            objc_msgSend(v26, "addObject:", v11);
            NSLog(CFSTR("No readable coverage file at path: %@."), v12);
            v7 = v10;
          }

          v9 = (char *)v9 + 1;
        }
        while (v6 != v9);
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }

    v4 = v26;
    v1 = v23;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "routingAppLaunchRecord"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "rankedRoutingAppProxiesWithProxies:", v4));

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10081E854;
  block[3] = &unk_1011B5ED8;
  v20 = *(id *)(a1 + 40);
  v29 = v1;
  v30 = v20;
  v28 = v19;
  v21 = v1;
  v22 = v19;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_10081E854(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10081E990(id a1)
{
  SearchVirtualGarageManager *v1;
  void *v2;

  v1 = objc_alloc_init(SearchVirtualGarageManager);
  v2 = (void *)qword_1014D3530;
  qword_1014D3530 = (uint64_t)v1;

}

void sub_10081EACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10081EAE4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10081EAF4(uint64_t a1)
{

}

void sub_10081EAFC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_10081EB8C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(a1 + 40));
}

void sub_10081ECB0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_10081ECD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = sub_1004326FC();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = v9;
    if (!v5 || v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[SearchVirtualGarageManager] error getting garage: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[SearchVirtualGarageManager] got garage", (uint8_t *)&v11, 2u);
      }

      objc_msgSend(WeakRetained, "setVirtualGarage:", v5);
    }
  }

}

void sub_10081F4E0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[DCAppAttestService sharedService](DCAppAttestService, "sharedService"));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = objc_msgSend(v2, "isSupported");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "submissionManager"));
  objc_msgSend(v3, "addObserver:", *(_QWORD *)(a1 + 32));

}

void sub_10081F5FC(id a1)
{
  TrafficIncidentAuthenticationManager *v1;
  void *v2;

  v1 = objc_alloc_init(TrafficIncidentAuthenticationManager);
  v2 = (void *)qword_1014D3540;
  qword_1014D3540 = (uint64_t)v1;

}

void sub_10081F898(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  id v17;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_1004327DC();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "TrafficIncidentAuthenticationManager: _generateKey error %@", buf, 0xCu);
    }

    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, 0);
  }
  else
  {
    v10 = objc_alloc((Class)NSArray);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
    v12 = objc_msgSend(v10, "initWithObjects:", v5, v11, 0);

    v13 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", CFSTR("TrafficIncidentAuthenicationKeyId"), CFSTR("TrafficIncidentAuthenicationAttested"), 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:](NSDictionary, "dictionaryWithObjects:forKeys:", v12, v13));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v15, "setObject:forKey:", v14, CFSTR("TrafficIncidentAuthenicationInfo"));

    objc_msgSend(*(id *)(a1 + 32), "_refreshStoredUUID");
    objc_msgSend(*(id *)(a1 + 32), "_attestKeyId:completionHandler:", v5, *(_QWORD *)(a1 + 40));

  }
}

void sub_10081FB78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint8_t buf[4];
  void *v28;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (objc_msgSend(v6, "code") != (id)4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v8, "setObject:forKey:", 0, CFSTR("TrafficIncidentAuthenicationInfo"));

    }
    v9 = sub_1004327DC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "TrafficIncidentAuthenticationManager: _attestKeyId error %@", buf, 0xCu);
    }

    v11 = *(_QWORD *)(a1 + 48);
    if (v11)
      (*(void (**)(uint64_t, _QWORD))(v11 + 16))(v11, 0);
  }
  else
  {
    v12 = objc_alloc((Class)NSArray);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v15 = objc_msgSend(v12, "initWithObjects:", v13, v14, 0);

    v16 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:", CFSTR("TrafficIncidentAuthenicationKeyId"), CFSTR("TrafficIncidentAuthenicationAttested"), 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:](NSDictionary, "dictionaryWithObjects:forKeys:", v15, v16));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v18, "setObject:forKey:", v17, *(_QWORD *)(a1 + 32));

    v19 = objc_alloc_init((Class)GEORPFeedbackUserInfo);
    v20 = objc_alloc_init((Class)GEORPAppAttestInfo);
    objc_msgSend(v19, "setAnonUserInfo:", v20);

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "anonUserInfo"));
    objc_msgSend(v21, "setAttestation:", v5);

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_storedUUID"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "anonUserInfo"));
    objc_msgSend(v23, "setAnonymousUserId:", v22);

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_keyId"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "anonUserInfo"));
    objc_msgSend(v25, "setKeyId:", v24);

    v26 = *(_QWORD *)(a1 + 48);
    if (v26)
      (*(void (**)(uint64_t, id))(v26 + 16))(v26, v19);

  }
}

void sub_10081FF34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  int v20;
  void *v21;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (objc_msgSend(v6, "code") != (id)4)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v8, "setObject:forKey:", 0, CFSTR("TrafficIncidentAuthenicationInfo"));

    }
    v9 = sub_1004327DC();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v20 = 138412290;
      v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "TrafficIncidentAuthenticationManager: _generateAssertionKeyId error %@", (uint8_t *)&v20, 0xCu);
    }

    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
      (*(void (**)(uint64_t, _QWORD))(v11 + 16))(v11, 0);
  }
  else
  {
    v12 = objc_alloc_init((Class)GEORPFeedbackUserInfo);
    v13 = objc_alloc_init((Class)GEORPAppAttestInfo);
    objc_msgSend(v12, "setAnonUserInfo:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "anonUserInfo"));
    objc_msgSend(v14, "setAssertion:", v5);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_storedUUID"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "anonUserInfo"));
    objc_msgSend(v16, "setAnonymousUserId:", v15);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_keyId"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "anonUserInfo"));
    objc_msgSend(v18, "setKeyId:", v17);

    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
      (*(void (**)(uint64_t, id))(v19 + 16))(v19, v12);

  }
}

void sub_1008201F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = objc_alloc_init((Class)GEORPFeedbackUserInfo);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "anonUserInfo"));

  objc_msgSend(v4, "setRolloverInfo:", v5);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1008202C4;
  v8[3] = &unk_1011CA1F0;
  v9 = v4;
  v6 = *(void **)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v7 = v4;
  objc_msgSend(v6, "_generateKey:", v8);

}

uint64_t sub_1008202C4(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t result;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "anonUserInfo"));
  objc_msgSend(*(id *)(a1 + 32), "setAnonUserInfo:", v3);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1008211C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1008211E8()
{
  if (qword_1014D3558 != -1)
    dispatch_once(&qword_1014D3558, &stru_1011CA278);
  return (id)qword_1014D3550;
}

void sub_100821228(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  id WeakRetained;
  void *v13;
  void *v14;
  unsigned int v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  id v17;
  NSObject *v18;
  NSObject *v19;
  os_signpost_id_t v20;
  id v21;
  NSObject *v22;
  NSObject *v23;
  os_signpost_id_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD, _QWORD, _QWORD);
  void (**v32)(_QWORD, _QWORD, _QWORD);
  void (**v33)(_QWORD, _QWORD, _QWORD);
  uint8_t v34[16];
  uint8_t buf[16];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!a5)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publisher"));
    if (objc_msgSend(v13, "isSuppressed"))
    {

    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publisher"));
      v15 = objc_msgSend(v14, "isBlocked");

      if (!v15)
      {
        v21 = sub_1008211E8();
        v22 = objc_claimAutoreleasedReturnValue(v21);
        v23 = v22;
        v24 = *(_QWORD *)(a1 + 56);
        if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
        {
          *(_WORD *)v34 = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v24, "FetchingPublisherView", "", v34, 2u);
        }

        if (v9
          || (v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "filters")),
              v26 = objc_msgSend(v25, "count"),
              v25,
              v26))
        {
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "filters"));
          v28 = objc_msgSend(v27, "count");

          if (v9 && !v28)
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "resultFilters"));
            objc_msgSend(WeakRetained, "setFilters:", v29);

          }
          if (objc_msgSend(v10, "count"))
          {
            objc_msgSend(WeakRetained, "setCollectionResults:", v10);
            objc_msgSend(WeakRetained, "setPublisherResult:", v11);
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "collectionIdentifiers"));
            objc_msgSend(WeakRetained, "setCollectionIds:", v30);

            v31 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateHandler"));
            ((void (**)(_QWORD, id, uint64_t))v31)[2](v31, objc_msgSend(*(id *)(a1 + 32), "state"), 2);

            objc_msgSend(WeakRetained, "setState:", 2);
            (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
            goto LABEL_9;
          }
          v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateHandler"));
          ((void (**)(_QWORD, id, uint64_t))v32)[2](v32, objc_msgSend(WeakRetained, "state"), 3);

        }
        else
        {
          v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateHandler"));
          ((void (**)(_QWORD, id, uint64_t))v33)[2](v33, objc_msgSend(*(id *)(a1 + 32), "state"), 3);

        }
        objc_msgSend(WeakRetained, "setState:", 3);
        goto LABEL_9;
      }
    }
  }
  v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "stateHandler"));
  ((void (**)(_QWORD, id, uint64_t))v16)[2](v16, objc_msgSend(WeakRetained, "state"), 3);

  objc_msgSend(WeakRetained, "setState:", 3);
  v17 = sub_1008211E8();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = v18;
  v20 = *(_QWORD *)(a1 + 56);
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, v20, "FetchingPublisherView", "", buf, 2u);
  }

LABEL_9:
}

void sub_1008217B8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1008217DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  os_signpost_id_t v16;
  uint8_t v17[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      objc_msgSend(WeakRetained, "setPlaceCollections:", 0);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      v9 = sub_1008211E8();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = v10;
      v12 = *(_QWORD *)(a1 + 48);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v12, "FetchingPublisherViewBatch", "", buf, 2u);
      }

    }
    else
    {
      v13 = sub_1008211E8();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15 = v14;
      v16 = *(_QWORD *)(a1 + 48);
      if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
      {
        *(_WORD *)v17 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_END, v16, "FetchingPublisherViewBatch", "", v17, 2u);
      }

      objc_msgSend(v8, "setPlaceCollections:", v5);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
  }

}

void sub_100821AA8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PublisherAPIController");
  v2 = (void *)qword_1014D3550;
  qword_1014D3550 = (uint64_t)v1;

}

void sub_100821EE8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100821F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *WeakRetained;
  void *v10;
  uint64_t v11;
  _QWORD *v12;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface Maps broker connection invalidated."), a3, a4, a5, a6, a7, a8, v11);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10 = (void *)WeakRetained[2];
    WeakRetained[2] = 0;
    v12 = WeakRetained;

    WeakRetained = v12;
  }

}

void sub_100821F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *WeakRetained;
  void *v10;
  void *v11;
  uint64_t v12;
  id *v13;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface Maps broker connection interrupted."), a3, a4, a5, a6, a7, a8, v12);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v13 = WeakRetained;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[2], "remoteObjectProxy"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13[3], "endpoint"));
    objc_msgSend(v10, "listenerEndpointDidChange:forIdentifier:", v11, v13[4]);

    WeakRetained = v13;
  }

}

void sub_10082220C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = FBSOpenApplicationOptionKeyActivateSuspended;
  v4[1] = FBSOpenApplicationOptionKeyPayloadURL;
  v5[0] = &__kCFBooleanTrue;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("x-maps-reopen://?backgroundnavigation")));
  v5[1] = v1;
  v2 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));
  v3 = (void *)qword_1014D3560;
  qword_1014D3560 = v2;

}

void sub_1008222D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v10 = a3;
  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface performWithMapsRunning openApplication completed, error: %@"), v4, v5, v6, v7, v8, v9, (uint64_t)v10);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10082248C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008224B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008224C0(uint64_t a1)
{

}

void sub_1008224C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  dispatch_group_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  dispatch_time_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD block[5];

  v9 = a1[4];
  v10 = *(void **)(v9 + 48);
  if (v10)
  {
    v11 = a1[5];
  }
  else
  {
    v12 = *(_QWORD *)(v9 + 56);
    if (!v12)
    {
      v13 = dispatch_group_create();
      v14 = a1[4];
      v15 = *(void **)(v14 + 56);
      *(_QWORD *)(v14 + 56) = v13;

      sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface Created connectionGroup to wait for Maps: %@"), v16, v17, v18, v19, v20, v21, *(_QWORD *)(a1[4] + 56));
      objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), *(id *)(a1[4] + 56));
      dispatch_group_enter(*(dispatch_group_t *)(a1[4] + 56));
      v22 = dispatch_time(0, 20000000000);
      v23 = a1[4];
      v24 = *(NSObject **)(v23 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1008225E0;
      block[3] = &unk_1011AC860;
      block[4] = v23;
      dispatch_after(v22, v24, block);
      return;
    }
    sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface Using existing dispatchGroup: %@"), a3, a4, a5, a6, a7, a8, v12);
    v10 = *(void **)(a1[4] + 56);
    v11 = a1[6];
  }
  objc_storeStrong((id *)(*(_QWORD *)(v11 + 8) + 40), v10);
}

void sub_1008225E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 56);
  if (v10)
  {
    dispatch_group_leave(v10);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(v11 + 56);
    *(_QWORD *)(v11 + 56) = 0;

    sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface Timed out waiting for a connection to be established"), v13, v14, v15, v16, v17, v18, a9);
  }
}

void sub_100822634(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  uint8_t v4[16];

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 48));
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "BackgroundState");
    v3 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Used established 'connection' but it was nil!", v4, 2u);
    }

  }
}

void sub_100822870(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_100822890(uint64_t a1)
{
  NSObject **WeakRetained;
  NSObject **v2;
  NSObject *v3;
  _QWORD block[5];

  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = WeakRetained[5];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100822900;
    block[3] = &unk_1011AC860;
    block[4] = v2;
    dispatch_async(v3, block);
  }

}

void sub_100822900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface Invalidating connection: %@"), a3, a4, a5, a6, a7, a8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 48);
  *(_QWORD *)(v9 + 48) = 0;

}

void sub_10082294C(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface Connection interrupted."), v1, v2, v3, v4, v5, v6, v7);
}

void sub_10082295C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100B0AAF0(OS_LOG_TYPE_INFO, CFSTR("MapsIPCInterface Received new connection: %@"), a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 48), *(id *)(a1 + 32));
}

void sub_1008229A0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;

  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 56);
    *(_QWORD *)(v3 + 56) = 0;

  }
}

void sub_1008237E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100823808(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  NSString *v7;
  _BOOL4 IsAccessibilityCategory;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  id v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  double v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  double v38;
  double v39;
  double v40;
  void *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  void *v46;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "traitCollection"));
    v7 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "preferredContentSizeCategory"));
    IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v7);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "container"));
    objc_msgSend(v9, "effectiveContentSize");
    v11 = v10;

    if (+[LibraryUIUtilities isMyPlacesEnabled](_TtC4Maps18LibraryUIUtilities, "isMyPlacesEnabled"))
      v12 = 16.0;
    else
      v12 = 32.0;
    v13 = v12 + -13.0;
    if (IsAccessibilityCategory)
      v14 = v12;
    else
      v14 = v12 + -13.0;
    if (IsAccessibilityCategory)
      v15 = 0.0;
    else
      v15 = v12 + -13.0;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "traitCollection"));
    +[ShortcutsRowCollectionViewCell cellSizeWithTraitCollection:](ShortcutsRowCollectionViewCell, "cellSizeWithTraitCollection:", v16);
    v18 = v17;

    if (v11 <= 0.0 || v18 <= 0.0)
    {
      v13 = v15;
    }
    else
    {
      v19 = v11 - v14;
      if (IsAccessibilityCategory)
      {
        +[ShortcutsRowCollectionViewCell imageSize](ShortcutsRowCollectionViewCell, "imageSize");
        v21 = v20 * 0.5;
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "traitCollection"));
        v23 = objc_msgSend(v22, "_maps_displayScaleOrMainScreenScale");
        v25 = v19 - UIRoundToScale(v23, v21, v24);

        if (v18 >= v25)
          v18 = v25;
        v13 = 0.0;
        v14 = v12;
      }
      else
      {
        v38 = floor(v19 / v18);
        v39 = v19 - v38 * v18;
        v14 = v12 + -13.0;
        if (v39 < 29.0)
        {
          v40 = 13.0 - (29.0 - v39) / (v38 + v38);
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "traitCollection"));
          objc_msgSend(v41, "_maps_displayScaleOrMainScreenScale");
          v43 = UICeilToScale(v40, v42);

          +[ShortcutsRowCollectionViewCell textHorizontalMargin](ShortcutsRowCollectionViewCell, "textHorizontalMargin");
          if (v43 <= v44)
          {
            +[ShortcutsRowCollectionViewCell textHorizontalMargin](ShortcutsRowCollectionViewCell, "textHorizontalMargin");
            v43 = v45;
          }
          v18 = v18 + -26.0 + v43 * 2.0;
          v13 = v12 - v43;
          v14 = v13;
        }
      }
    }
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension absoluteDimension:](NSCollectionLayoutDimension, "absoluteDimension:", v18));
    v28 = 1.0;
    if (IsAccessibilityCategory)
      v28 = 0.5;
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension fractionalHeightDimension:](NSCollectionLayoutDimension, "fractionalHeightDimension:", v28));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v27, v29));

    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutItem itemWithLayoutSize:](NSCollectionLayoutItem, "itemWithLayoutSize:", v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "widthDimension"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension fractionalHeightDimension:](NSCollectionLayoutDimension, "fractionalHeightDimension:", 1.0));
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v32, v33));

    v46 = v31;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v46, 1));
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutGroup verticalGroupWithLayoutSize:subitems:](NSCollectionLayoutGroup, "verticalGroupWithLayoutSize:subitems:", v34, v35));

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithGroup:](NSCollectionLayoutSection, "sectionWithGroup:", v36));
    objc_msgSend(v26, "setContentInsets:", 0.0, v14, 0.0, v13);

  }
  else
  {
    v26 = 0;
  }

  return v26;
}

void sub_100823D9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100823DC8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateBackgroundView");

}

void sub_100823DF4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateBackgroundView");

}

void sub_1008242A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008242C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008242D8(uint64_t a1)
{

}

void sub_1008242E0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v7 = sub_10046DCCC(a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = objc_msgSend(v8, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v9)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a3, 0));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    *a4 = 1;
  }
}

id sub_100824754(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  id v20;
  _QWORD v21[5];
  id v22;

  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("[Library] Edit Details"), CFSTR("localized string not found"), 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("info.circle")));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100824984;
  v21[3] = &unk_1011BB258;
  v6 = *(void **)(a1 + 40);
  v21[4] = *(_QWORD *)(a1 + 32);
  v22 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v4, v5, CFSTR("_editPinAction"), v21));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("[Library] Unpin"), CFSTR("localized string not found"), 0));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("pin.slash")));
  v15 = _NSConcreteStackBlock;
  v16 = 3221225472;
  v17 = sub_1008249C4;
  v18 = &unk_1011BB258;
  v11 = *(void **)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v9, v10, CFSTR("_removePinAction"), &v15));

  objc_msgSend(v12, "setAttributes:", 2, v15, v16, v17, v18, v19);
  if (objc_msgSend(*(id *)(a1 + 40), "type") != (id)6)
    objc_msgSend(v2, "addObject:", v7);
  objc_msgSend(v2, "addObject:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v2));

  return v13;
}

void sub_100824984(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "shortcutsRowCellProvider:editShortcut:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1008249C4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "shortcutsRowCellProvider:removeShortcut:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

id sub_100824E0C()
{
  if (qword_1014D3578 != -1)
    dispatch_once(&qword_1014D3578, &stru_1011CA358);
  return (id)qword_1014D3570;
}

id sub_1008251AC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "configureNavigationDisplay:", a2);
}

void sub_100825574(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "registerObserver:", *(_QWORD *)(a1 + 32));

}

void sub_1008255B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  void *v10;
  void *v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  objc_msgSend(v2, "setNeedsUpdateMapInsets");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapView"));
  objc_msgSend(v4, "_setApplicationState:", 2);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapView"));
  objc_msgSend(v6, "_setDisplayedSearchResultsType:", 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "chromeViewController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userLocationView"));
  v9 = 1;
  objc_msgSend(v8, "setMode:animated:", 1, *(unsigned __int8 *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 32), "_setupGuidanceDisplays:", *(unsigned __int8 *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "refreshCameraTypeAnimated:", *(unsigned __int8 *)(a1 + 40));
  v12 = (id)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "route"));
  objc_msgSend(*(id *)(a1 + 32), "setCurrentRoute:", v10);

  if (objc_msgSend(v12, "navigationState") != 6)
    v9 = objc_msgSend(v12, "navigationState") == 7;
  objc_msgSend(*(id *)(a1 + 32), "setHasArrived:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "displayEtaInfo"));

  if (v11)
    objc_msgSend(*(id *)(a1 + 32), "_updateDisplayETA");

}

void sub_100825830(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MNNavigationService sharedService](MNNavigationService, "sharedService"));
  objc_msgSend(v2, "unregisterObserver:", *(_QWORD *)(a1 + 32));

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "guidanceObserver"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "guidanceCardController"));
  objc_msgSend(v4, "removeOutlet:", v3);

}

void sub_100825F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1008272C0(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  NSString *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  NSMutableArray *v12;

  v12 = objc_opt_new(NSMutableArray);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "desiredCards"));
  v3 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.desiredCards.txt"), v5));

  v7 = v2;
  v8 = v7;
  if (v7)
  {
    if (objc_msgSend(v7, "count"))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsJoinedByString:", CFSTR(", ")));
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> [%@]"), v8, v9));

    }
    else
    {
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%p> (empty)"), v8));
    }
  }
  else
  {
    v10 = CFSTR("<nil>");
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarTextAttachment attachmentWithFileName:text:](MapsRadarTextAttachment, "attachmentWithFileName:text:", v6, v10));
  -[NSMutableArray addObject:](v12, "addObject:", v11);
  objc_msgSend(*(id *)(a1 + 40), "addAttachments:", v12);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1008274F0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "CarHybridInstrumentClusterNavigationModeController");
  v2 = (void *)qword_1014D3570;
  qword_1014D3570 = (uint64_t)v1;

}

void sub_100827E4C()
{
  if (qword_1014D3580 != -1)
    dispatch_once(&qword_1014D3580, &stru_1011D34F0);
}

void sub_100827E74(id a1)
{
  byte_1014B56D0 = 1;
  _GEOConfigRegisterStateCaptureFunctions(sub_100827E94, sub_100827EA0);
}

_UNKNOWN **sub_100827E94()
{
  return &off_101273DD0;
}

_UNKNOWN **sub_100827EA0()
{
  return &off_101273DE8;
}

id sub_100827EAC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100827EB8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100827EC4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100827ED0(id a1)
{
  return &off_10126F118;
}

id sub_100827EDC(id a1)
{
  return &off_10126F130;
}

id sub_100827EE8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100827EF4(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v1, "isInternalInstall")));

  return v2;
}

id sub_100827F48(id a1)
{
  return &off_101274CB8;
}

id sub_100827F54(id a1)
{
  return &off_101274CC8;
}

id sub_100827F60(id a1)
{
  return &off_101274CD8;
}

id sub_100827F6C(id a1)
{
  return &off_101274CE8;
}

id sub_100827F78(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100827F84(id a1)
{
  return &off_10126F148;
}

id sub_100827F90(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100827F9C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100827FA8(id a1)
{
  return &off_10126F160;
}

id sub_100827FB4(id a1)
{
  return &off_10126F178;
}

id sub_100827FC0(id a1)
{
  return &off_10126F190;
}

id sub_100827FCC(id a1)
{
  return &off_101274D18;
}

id sub_100827FD8(id a1)
{
  return &off_101274D28;
}

id sub_100827FE4(id a1)
{
  return &off_101274D38;
}

id sub_100827FF0(id a1)
{
  return &off_101274D48;
}

id sub_100827FFC(id a1)
{
  return &off_101274D58;
}

id sub_100828008(id a1)
{
  return &off_101274CF8;
}

id sub_100828014(id a1)
{
  return &off_101274D68;
}

id sub_100828020(id a1)
{
  return &off_101274D58;
}

id sub_10082802C(id a1)
{
  return &off_101274D88;
}

id sub_100828038(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828044(id a1)
{
  return &off_10126F1C0;
}

id sub_100828050(id a1)
{
  return &off_101274D18;
}

id sub_10082805C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828068(id a1)
{
  return 0;
}

id sub_100828070(id a1)
{
  return &off_101274D98;
}

id sub_10082807C(id a1)
{
  return &off_10126F1D8;
}

id sub_100828088(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828094(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008280A0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008280AC(id a1)
{
  return &off_10126F130;
}

id sub_1008280B8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008280C4(id a1)
{
  return &off_10126F1F0;
}

id sub_1008280D0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008280DC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008280E8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008280F4(id a1)
{
  return &off_10126F208;
}

id sub_100828100(id a1)
{
  return &off_101274D48;
}

id sub_10082810C(id a1)
{
  return &off_101274DA8;
}

id sub_100828118(id a1)
{
  return &off_10126F220;
}

id sub_100828124(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828130(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082813C(id a1)
{
  return &off_10126F148;
}

id sub_100828148(id a1)
{
  return &off_10126F130;
}

id sub_100828154(id a1)
{
  return &off_10126F238;
}

id sub_100828160(id a1)
{
  return &off_10126F250;
}

id sub_10082816C(id a1)
{
  return &off_10126F268;
}

id sub_100828178(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828184(id a1)
{
  return &off_10126F280;
}

id sub_100828190(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082819C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008281A8(id a1)
{
  return &off_10126F298;
}

id sub_1008281B4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008281C0(id a1)
{
  return &off_101274DA8;
}

id sub_1008281CC(id a1)
{
  return &off_101274D18;
}

id sub_1008281D8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008281E4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008281F0(id a1)
{
  return CFSTR("inbox.appleid.apple.com");
}

id sub_1008281FC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828208(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828214(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828220(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082822C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828238(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828244(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828250(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082825C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828268(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828274(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828280(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082828C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828298(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008282A4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008282B0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008282BC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008282C8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008282D4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008282E0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008282EC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008282F8(id a1)
{
  return &off_10126F310;
}

id sub_100828304(id a1)
{
  return &off_10126F280;
}

id sub_100828310(id a1)
{
  return &off_10126F238;
}

id sub_10082831C(id a1)
{
  return &off_10126F310;
}

id sub_100828328(id a1)
{
  return &off_10126F340;
}

id sub_100828334(id a1)
{
  return &off_10126F190;
}

id sub_100828340(id a1)
{
  return &off_10126F2E0;
}

id sub_10082834C(id a1)
{
  return &off_10126F2E0;
}

id sub_100828358(id a1)
{
  return &off_10126F2E0;
}

id sub_100828364(id a1)
{
  return &off_10126F130;
}

id sub_100828370(id a1)
{
  return &off_10126F358;
}

id sub_10082837C(id a1)
{
  return &off_10126F2B0;
}

id sub_100828388(id a1)
{
  return 0;
}

id sub_100828390(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082839C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008283A8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008283B4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008283C0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008283CC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008283D8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008283E4(id a1)
{
  return &off_101274DB8;
}

id sub_1008283F0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008283FC(id a1)
{
  return &off_101274D98;
}

id sub_100828408(id a1)
{
  return &off_101274DC8;
}

id sub_100828414(id a1)
{
  return &off_10126F388;
}

id sub_100828420(id a1)
{
  return &off_10126F310;
}

id sub_10082842C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828438(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828444(id a1)
{
  return &off_101274CE8;
}

id sub_100828450(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082845C(id a1)
{
  return &off_10126F328;
}

id sub_100828468(id a1)
{
  return &off_101274DD8;
}

id sub_100828474(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828480(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082848C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828498(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008284A4(id a1)
{
  return &off_101274DE8;
}

id sub_1008284B0(id a1)
{
  return &off_101274D28;
}

id sub_1008284BC(id a1)
{
  return &off_101274DF8;
}

id sub_1008284C8(id a1)
{
  return &off_101274E08;
}

id sub_1008284D4(id a1)
{
  return &off_10126F280;
}

id sub_1008284E0(id a1)
{
  return &off_101274E18;
}

id sub_1008284EC(id a1)
{
  return &off_101274D08;
}

id sub_1008284F8(id a1)
{
  return &off_101274E28;
}

id sub_100828504(id a1)
{
  return &off_101274E38;
}

id sub_100828510(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082851C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828528(id a1)
{
  return &off_101274D18;
}

id sub_100828534(id a1)
{
  return &off_101274E48;
}

id sub_100828540(id a1)
{
  return &off_10126F148;
}

id sub_10082854C(id a1)
{
  return &off_10126F2F8;
}

id sub_100828558(id a1)
{
  return &off_10126F298;
}

id sub_100828564(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828570(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082857C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828588(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828594(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008285A0(id a1)
{
  return &off_10126F130;
}

id sub_1008285AC(id a1)
{
  return &off_101274D68;
}

id sub_1008285B8(id a1)
{
  return &off_101274E38;
}

id sub_1008285C4(id a1)
{
  return &off_101274E58;
}

id sub_1008285D0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008285DC(id a1)
{
  return &off_10126F238;
}

id sub_1008285E8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008285F4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828600(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082860C(id a1)
{
  return &off_10126F3B8;
}

id sub_100828618(id a1)
{
  return &off_10126F148;
}

id sub_100828624(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828630(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082863C(id a1)
{
  return &off_10126F298;
}

id sub_100828648(id a1)
{
  return &off_10126F190;
}

id sub_100828654(id a1)
{
  return &off_10126F3D0;
}

id sub_100828660(id a1)
{
  return &off_10126F3E8;
}

id sub_10082866C(id a1)
{
  return &off_10126F3E8;
}

id sub_100828678(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828684(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828690(id a1)
{
  return &off_10126F400;
}

id sub_10082869C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008286A8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008286B4(id a1)
{
  return &off_10126F340;
}

id sub_1008286C0(id a1)
{
  return &off_10126F1C0;
}

id sub_1008286CC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008286D8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008286E4(id a1)
{
  return &off_10126F238;
}

id sub_1008286F0(id a1)
{
  return &off_10126F418;
}

id sub_1008286FC(id a1)
{
  return &off_10126F118;
}

id sub_100828708(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828714(id a1)
{
  return &off_10126F148;
}

id sub_100828720(id a1)
{
  return &off_101274E68;
}

id sub_10082872C(id a1)
{
  return &off_101274E78;
}

id sub_100828738(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828744(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828750(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082875C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828768(id a1)
{
  return &off_10126F148;
}

id sub_100828774(id a1)
{
  return &off_10126F148;
}

id sub_100828780(id a1)
{
  return &off_101274CF8;
}

id sub_10082878C(id a1)
{
  return &off_10126F1C0;
}

id sub_100828798(id a1)
{
  return &off_10126F430;
}

id sub_1008287A4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008287B0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008287BC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008287C8(id a1)
{
  return &off_101274DD8;
}

id sub_1008287D4(id a1)
{
  return &off_10126F280;
}

id sub_1008287E0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008287EC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008287F8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828804(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828810(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082881C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828828(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828834(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828840(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082884C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828858(id a1)
{
  return &off_101274E48;
}

id sub_100828864(id a1)
{
  return &off_101274D18;
}

id sub_100828870(id a1)
{
  return &off_101274E88;
}

id sub_10082887C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828888(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828894(id a1)
{
  return &off_10126F2F8;
}

id sub_1008288A0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008288AC(id a1)
{
  return &off_101274D18;
}

id sub_1008288B8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008288C4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008288D0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008288DC(id a1)
{
  return &off_10126F3E8;
}

id sub_1008288E8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008288F4(id a1)
{
  return &off_10126F148;
}

id sub_100828900(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082890C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828918(id a1)
{
  return &off_10126F2E0;
}

id sub_100828924(id a1)
{
  return &off_10126F3A0;
}

id sub_100828930(id a1)
{
  return &off_101274D78;
}

id sub_10082893C(id a1)
{
  return &off_10126F1C0;
}

id sub_100828948(id a1)
{
  return &off_10126F1C0;
}

id sub_100828954(id a1)
{
  return &off_10126F238;
}

id sub_100828960(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082896C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828978(id a1)
{
  return &off_10126F310;
}

id sub_100828984(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828990(id a1)
{
  return CFSTR("https://www.apple.com/legal/internet-services/maps/ratings-photos/");
}

id sub_10082899C(id a1)
{
  return &off_10126F130;
}

id sub_1008289A8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008289B4(id a1)
{
  return &off_10126F280;
}

id sub_1008289C0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008289CC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008289D8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008289E4(id a1)
{
  return &off_10126F448;
}

id sub_1008289F0(id a1)
{
  return &off_10126F460;
}

id sub_1008289FC(id a1)
{
  return &off_10126F478;
}

id sub_100828A08(id a1)
{
  return &off_10126F490;
}

id sub_100828A14(id a1)
{
  return &off_101274E98;
}

id sub_100828A20(id a1)
{
  return &off_101274EA8;
}

id sub_100828A2C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828A38(id a1)
{
  return &off_101274EB8;
}

id sub_100828A44(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828A50(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828A5C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828A68(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828A74(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828A80(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828A8C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828A98(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828AA4(id a1)
{
  return &off_10126F2B0;
}

id sub_100828AB0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828ABC(id a1)
{
  return &off_10126F280;
}

id sub_100828AC8(id a1)
{
  return &off_10126F2F8;
}

id sub_100828AD4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828AE0(id a1)
{
  return CFSTR("https://www.apple.com/ios/feature-availability/#maps-cycling");
}

id sub_100828AEC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828AF8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828B04(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828B10(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828B1C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828B28(id a1)
{
  return &off_10126F148;
}

id sub_100828B34(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828B40(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828B4C(id a1)
{
  return &off_10126F3D0;
}

id sub_100828B58(id a1)
{
  return &off_10126F190;
}

id sub_100828B64(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828B70(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828B7C(id a1)
{
  return &off_10126F280;
}

id sub_100828B88(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828B94(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828BA0(id a1)
{
  return 0;
}

id sub_100828BA8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828BB4(id a1)
{
  return &off_10126F148;
}

id sub_100828BC0(id a1)
{
  return &off_10126F148;
}

id sub_100828BCC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828BD8(id a1)
{
  return &off_10126F4C0;
}

id sub_100828BE4(id a1)
{
  return &off_10126F238;
}

id sub_100828BF0(id a1)
{
  return &off_10126F1A8;
}

id sub_100828BFC(id a1)
{
  return &off_10126F4D8;
}

id sub_100828C08(id a1)
{
  return CFSTR("https://www.apple.com/legal/internet-services/maps/");
}

id sub_100828C14(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828C20(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828C2C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828C38(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828C44(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828C50(id a1)
{
  return &off_10126F190;
}

id sub_100828C5C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828C68(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828C74(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828C80(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828C8C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828C98(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828CA4(id a1)
{
  return &off_101274D78;
}

id sub_100828CB0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828CBC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828CC8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828CD4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828CE0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828CEC(id a1)
{
  return &off_10126F2E0;
}

id sub_100828CF8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828D04(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828D10(id a1)
{
  return &off_10126F298;
}

id sub_100828D1C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828D28(id a1)
{
  return &off_10126F2E0;
}

id sub_100828D34(id a1)
{
  return &off_101274EC8;
}

id sub_100828D40(id a1)
{
  return &off_10126F2E0;
}

id sub_100828D4C(id a1)
{
  return &off_10126F148;
}

id sub_100828D58(id a1)
{
  return &off_10126F130;
}

id sub_100828D64(id a1)
{
  return &off_10126F280;
}

id sub_100828D70(id a1)
{
  return &off_10126F2E0;
}

id sub_100828D7C(id a1)
{
  return &off_10126F4F0;
}

id sub_100828D88(id a1)
{
  return &off_10126F148;
}

id sub_100828D94(id a1)
{
  return &off_10126F130;
}

id sub_100828DA0(id a1)
{
  return &off_10126F238;
}

id sub_100828DAC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828DB8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828DC4(id a1)
{
  return &off_10126F178;
}

id sub_100828DD0(id a1)
{
  return &off_10126F310;
}

id sub_100828DDC(id a1)
{
  return &off_10126F370;
}

id sub_100828DE8(id a1)
{
  return &off_10126F310;
}

id sub_100828DF4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828E00(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828E0C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828E18(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828E24(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828E30(id a1)
{
  return &off_101274ED8;
}

id sub_100828E3C(id a1)
{
  return 0;
}

id sub_100828E44(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828E50(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828E5C(id a1)
{
  return &off_101274D68;
}

id sub_100828E68(id a1)
{
  return &off_101274EE8;
}

id sub_100828E74(id a1)
{
  return &off_10126F280;
}

id sub_100828E80(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828E8C(id a1)
{
  return &off_101274DE8;
}

id sub_100828E98(id a1)
{
  return &off_10126F2B0;
}

id sub_100828EA4(id a1)
{
  return &off_10126F118;
}

id sub_100828EB0(id a1)
{
  return &off_10126F520;
}

id sub_100828EBC(id a1)
{
  return &off_10126F538;
}

id sub_100828EC8(id a1)
{
  return &off_101274D48;
}

id sub_100828ED4(id a1)
{
  return &off_10126F250;
}

id sub_100828EE0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828EEC(id a1)
{
  return &off_101274DB8;
}

id sub_100828EF8(id a1)
{
  return &off_10126F310;
}

id sub_100828F04(id a1)
{
  return &off_10126F148;
}

id sub_100828F10(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828F1C(id a1)
{
  return &off_10126F310;
}

id sub_100828F28(id a1)
{
  return &off_10126F310;
}

id sub_100828F34(id a1)
{
  return &off_101274EF8;
}

id sub_100828F40(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100828F4C(id a1)
{
  return &off_101274F08;
}

id sub_100828F58(id a1)
{
  return &off_10126F1C0;
}

id sub_100828F64(id a1)
{
  return &off_10126F1C0;
}

id sub_100828F70(id a1)
{
  return &off_10126F3D0;
}

id sub_100828F7C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100828F88(id a1)
{
  return &off_101274DE8;
}

id sub_100828F94(id a1)
{
  return &off_101274DB8;
}

id sub_100828FA0(id a1)
{
  return &off_101274D48;
}

id sub_100828FAC(id a1)
{
  return &off_10126F148;
}

id sub_100828FB8(id a1)
{
  return &off_10126F388;
}

id sub_100828FC4(id a1)
{
  return &off_101274CF8;
}

id sub_100828FD0(id a1)
{
  return &off_101274DB8;
}

id sub_100828FDC(id a1)
{
  return &off_101274F18;
}

id sub_100828FE8(id a1)
{
  return &off_101274DB8;
}

id sub_100828FF4(id a1)
{
  return &off_101274F28;
}

id sub_100829000(id a1)
{
  return &off_101274DB8;
}

id sub_10082900C(id a1)
{
  return &off_101274F38;
}

id sub_100829018(id a1)
{
  return &off_101274DB8;
}

id sub_100829024(id a1)
{
  return &off_101274F48;
}

id sub_100829030(id a1)
{
  return &off_101274DB8;
}

id sub_10082903C(id a1)
{
  return &off_101274F18;
}

id sub_100829048(id a1)
{
  return &off_101274DB8;
}

id sub_100829054(id a1)
{
  return &off_101274F58;
}

id sub_100829060(id a1)
{
  return &off_101274F18;
}

id sub_10082906C(id a1)
{
  return &off_101274DB8;
}

id sub_100829078(id a1)
{
  return &off_101274F28;
}

id sub_100829084(id a1)
{
  return &off_101274DB8;
}

id sub_100829090(id a1)
{
  return &off_101274DE8;
}

id sub_10082909C(id a1)
{
  return &off_101274DB8;
}

id sub_1008290A8(id a1)
{
  return 0;
}

id sub_1008290B0(id a1)
{
  return 0;
}

id sub_1008290B8(id a1)
{
  return &off_10126F550;
}

id sub_1008290C4(id a1)
{
  return &off_10126F388;
}

id sub_1008290D0(id a1)
{
  return 0;
}

id sub_1008290D8(id a1)
{
  return &off_10126F568;
}

id sub_1008290E4(id a1)
{
  return 0;
}

id sub_1008290EC(id a1)
{
  return 0;
}

id sub_1008290F4(id a1)
{
  return &off_10126F148;
}

id sub_100829100(id a1)
{
  return &off_10126F130;
}

id sub_10082910C(id a1)
{
  return &off_10126F1C0;
}

id sub_100829118(id a1)
{
  return &off_10126F1C0;
}

id sub_100829124(id a1)
{
  return &off_10126F580;
}

id sub_100829130(id a1)
{
  return &off_10126F148;
}

id sub_10082913C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829148(id a1)
{
  return &off_10126F280;
}

id sub_100829154(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829160(id a1)
{
  return &off_10126F118;
}

id sub_10082916C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829178(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829184(id a1)
{
  return &off_10126F130;
}

id sub_100829190(id a1)
{
  return &off_10126F310;
}

id sub_10082919C(id a1)
{
  return &off_10126F190;
}

id sub_1008291A8(id a1)
{
  return &off_10126F3D0;
}

id sub_1008291B4(id a1)
{
  return &off_10126F2E0;
}

id sub_1008291C0(id a1)
{
  return &off_10126F118;
}

id sub_1008291CC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008291D8(id a1)
{
  return &off_10126F490;
}

id sub_1008291E4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008291F0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008291FC(id a1)
{
  return &off_10126F1C0;
}

id sub_100829208(id a1)
{
  return &off_10126F2B0;
}

id sub_100829214(id a1)
{
  return &off_10126F148;
}

id sub_100829220(id a1)
{
  return &off_10126F508;
}

id sub_10082922C(id a1)
{
  return &off_1012747F0;
}

id sub_100829238(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829244(id a1)
{
  return &off_10126F280;
}

id sub_100829250(id a1)
{
  return &off_10126F2F8;
}

id sub_10082925C(id a1)
{
  return &off_10126F598;
}

id sub_100829268(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829274(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829280(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082928C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829298(id a1)
{
  return &off_10126F3A0;
}

id sub_1008292A4(id a1)
{
  return &off_10126F310;
}

id sub_1008292B0(id a1)
{
  return &off_101274818;
}

id sub_1008292BC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008292C8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008292D4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008292E0(id a1)
{
  return &off_101274EF8;
}

id sub_1008292EC(id a1)
{
  return &off_10126F1C0;
}

id sub_1008292F8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829304(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829310(id a1)
{
  return &off_10126F238;
}

id sub_10082931C(id a1)
{
  return &off_10126F2F8;
}

id sub_100829328(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829334(id a1)
{
  return &off_10126F238;
}

id sub_100829340(id a1)
{
  return &off_10126F118;
}

id sub_10082934C(id a1)
{
  return &off_10126F130;
}

id sub_100829358(id a1)
{
  return &off_10126F130;
}

id sub_100829364(id a1)
{
  return &off_10126F148;
}

id sub_100829370(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082937C(id a1)
{
  return &off_101274D78;
}

id sub_100829388(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829394(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008293A0(id a1)
{
  return &off_10126F2C8;
}

id sub_1008293AC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008293B8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008293C4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008293D0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008293DC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008293E8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008293F4(id a1)
{
  return &off_101274D78;
}

id sub_100829400(id a1)
{
  return &off_10126F148;
}

id sub_10082940C(id a1)
{
  return &off_10126F148;
}

id sub_100829418(id a1)
{
  return &off_10126F280;
}

id sub_100829424(id a1)
{
  return &off_10126F1C0;
}

id sub_100829430(id a1)
{
  return &off_101274EF8;
}

id sub_10082943C(id a1)
{
  return &off_101274EB8;
}

id sub_100829448(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829454(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829460(id a1)
{
  return &off_10126F5B0;
}

id sub_10082946C(id a1)
{
  return &off_10126F5B0;
}

id sub_100829478(id a1)
{
  return &off_10126F5B0;
}

id sub_100829484(id a1)
{
  return &off_101274F68;
}

id sub_100829490(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082949C(id a1)
{
  return &off_10126F250;
}

id sub_1008294A8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008294B4(id a1)
{
  return &off_10126F190;
}

id sub_1008294C0(id a1)
{
  return &off_10126F238;
}

id sub_1008294CC(id a1)
{
  return &off_101274F08;
}

id sub_1008294D8(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008294E4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008294F0(id a1)
{
  return &off_10126F208;
}

id sub_1008294FC(id a1)
{
  return &off_10126F208;
}

id sub_100829508(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829514(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829520(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082952C(id a1)
{
  return &off_10126F148;
}

id sub_100829538(id a1)
{
  return &off_10126F5C8;
}

id sub_100829544(id a1)
{
  return &off_101274D68;
}

id sub_100829550(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082955C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829568(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829574(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829580(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082958C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829598(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008295A4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008295B0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008295BC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008295C8(id a1)
{
  return &off_10126F2E0;
}

id sub_1008295D4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008295E0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008295EC(id a1)
{
  return 0;
}

id sub_1008295F4(id a1)
{
  return 0;
}

id sub_1008295FC(id a1)
{
  return &off_101274F28;
}

id sub_100829608(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829614(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829620(id a1)
{
  return &off_10126F5E0;
}

id sub_10082962C(id a1)
{
  return &off_10126F2F8;
}

id sub_100829638(id a1)
{
  return &off_101274D78;
}

id sub_100829644(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829650(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082965C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829668(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829674(id a1)
{
  return &off_101274F78;
}

id sub_100829680(id a1)
{
  return &off_101274F88;
}

id sub_10082968C(id a1)
{
  return &off_10126F340;
}

id sub_100829698(id a1)
{
  return &off_10126F5B0;
}

id sub_1008296A4(id a1)
{
  return &off_10126F310;
}

id sub_1008296B0(id a1)
{
  return &off_10126F238;
}

id sub_1008296BC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008296C8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008296D4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008296E0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008296EC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008296F8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829704(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829710(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082971C(id a1)
{
  return &off_10126F2B0;
}

id sub_100829728(id a1)
{
  return &off_10126F2F8;
}

id sub_100829734(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829740(id a1)
{
  return &off_10126F280;
}

id sub_10082974C(id a1)
{
  return &off_10126F130;
}

id sub_100829758(id a1)
{
  return &off_101274D78;
}

id sub_100829764(id a1)
{
  return &off_10126F238;
}

id sub_100829770(id a1)
{
  return &off_10126F2E0;
}

id sub_10082977C(id a1)
{
  return &off_10126F148;
}

id sub_100829788(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829794(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008297A0(id a1)
{
  return &off_10126F2E0;
}

id sub_1008297AC(id a1)
{
  return &off_10126F238;
}

id sub_1008297B8(id a1)
{
  return &off_101274D78;
}

id sub_1008297C4(id a1)
{
  return &off_10126F310;
}

id sub_1008297D0(id a1)
{
  return &off_10126F190;
}

id sub_1008297DC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008297E8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008297F4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829800(id a1)
{
  return &off_101274F98;
}

id sub_10082980C(id a1)
{
  return &off_10126F2F8;
}

id sub_100829818(id a1)
{
  return &off_10126F1C0;
}

id sub_100829824(id a1)
{
  return &off_10126F478;
}

id sub_100829830(id a1)
{
  return &off_101274DB8;
}

id sub_10082983C(id a1)
{
  return &off_101274FA8;
}

id sub_100829848(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829854(id a1)
{
  return &off_10126F5F8;
}

id sub_100829860(id a1)
{
  return &off_10126F610;
}

id sub_10082986C(id a1)
{
  return &off_10126F4D8;
}

id sub_100829878(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829884(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829890(id a1)
{
  return &off_101274DA8;
}

id sub_10082989C(id a1)
{
  return &off_101274FB8;
}

id sub_1008298A8(id a1)
{
  return &off_101274EB8;
}

id sub_1008298B4(id a1)
{
  return &off_101274FC8;
}

id sub_1008298C0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008298CC(id a1)
{
  return &off_101274EF8;
}

id sub_1008298D8(id a1)
{
  return &off_10126F3B8;
}

id sub_1008298E4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008298F0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008298FC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829908(id a1)
{
  return &off_10126F238;
}

id sub_100829914(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829920(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_10082992C(id a1)
{
  return &off_10126F628;
}

id sub_100829938(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829944(id a1)
{
  return &off_10126F190;
}

id sub_100829950(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_10082995C(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829968(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829974(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829980(id a1)
{
  return &off_10126F1C0;
}

id sub_10082998C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829998(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008299A4(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008299B0(id a1)
{
  return &off_10126F280;
}

id sub_1008299BC(id a1)
{
  return &off_101274EF8;
}

id sub_1008299C8(id a1)
{
  return &off_10126F4A8;
}

id sub_1008299D4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_1008299E0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_1008299EC(id a1)
{
  return &off_101274E88;
}

id sub_1008299F8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829A04(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829A10(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829A1C(id a1)
{
  return &off_10126F2B0;
}

id sub_100829A28(id a1)
{
  return &off_10126F2B0;
}

id sub_100829A34(id a1)
{
  return &off_10126F2B0;
}

id sub_100829A40(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829A4C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829A58(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829A64(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829A70(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829A7C(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829A88(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829A94(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829AA0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829AAC(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829AB8(id a1)
{
  return &off_10126F2B0;
}

id sub_100829AC4(id a1)
{
  return &off_10126F4C0;
}

id sub_100829AD0(id a1)
{
  return &off_10126F2E0;
}

id sub_100829ADC(id a1)
{
  return &off_10126F2E0;
}

id sub_100829AE8(id a1)
{
  return &off_10126F130;
}

id sub_100829AF4(id a1)
{
  return &off_10126F2E0;
}

id sub_100829B00(id a1)
{
  return &off_101274ED8;
}

id sub_100829B0C(id a1)
{
  return &off_10126F640;
}

id sub_100829B18(id a1)
{
  return &off_10126F658;
}

id sub_100829B24(id a1)
{
  return &off_10126F670;
}

id sub_100829B30(id a1)
{
  return &off_10126F688;
}

id sub_100829B3C(id a1)
{
  return &off_10126F6A0;
}

id sub_100829B48(id a1)
{
  return &off_10126F6B8;
}

id sub_100829B54(id a1)
{
  return &off_10126F3B8;
}

id sub_100829B60(id a1)
{
  return &off_10126F358;
}

id sub_100829B6C(id a1)
{
  return &off_10126F358;
}

id sub_100829B78(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829B84(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829B90(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829B9C(id a1)
{
  return &off_10126F358;
}

id sub_100829BA8(id a1)
{
  return &off_101274FD8;
}

id sub_100829BB4(id a1)
{
  return &off_10126F358;
}

id sub_100829BC0(id a1)
{
  return &off_101274ED8;
}

id sub_100829BCC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829BD8(id a1)
{
  return &off_10126F358;
}

id sub_100829BE4(id a1)
{
  return &off_10126F358;
}

id sub_100829BF0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829BFC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829C08(id a1)
{
  return &off_10126F3D0;
}

id sub_100829C14(id a1)
{
  return &off_10126F148;
}

id sub_100829C20(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829C2C(id a1)
{
  return &off_10126F190;
}

id sub_100829C38(id a1)
{
  return &off_10126F508;
}

id sub_100829C44(id a1)
{
  return &off_10126F460;
}

id sub_100829C50(id a1)
{
  return 0;
}

id sub_100829C58(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829C64(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829C70(id a1)
{
  return &off_10126F6D0;
}

id sub_100829C7C(id a1)
{
  return &off_10126F2B0;
}

id sub_100829C88(id a1)
{
  return &off_10126F2E0;
}

id sub_100829C94(id a1)
{
  return &off_10126F238;
}

id sub_100829CA0(id a1)
{
  return &__kCFBooleanFalse;
}

id sub_100829CAC(id a1)
{
  return &off_10126F148;
}

id sub_100829CB8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829CC4(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829CD0(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829CDC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829CE8(id a1)
{
  return &off_10126F6E8;
}

id sub_100829CF4(id a1)
{
  return &off_10126F388;
}

id sub_100829D00(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829D0C(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "countryCode"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v2, "isEqualToString:", CFSTR("CN")) ^ 1));

  return v3;
}

id sub_100829D80(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829D8C(id a1)
{
  return 0;
}

id sub_100829D94(id a1)
{
  return 0;
}

id sub_100829D9C(id a1)
{
  return &off_10126F358;
}

id sub_100829DA8(id a1)
{
  return &off_10126F400;
}

id sub_100829DB4(id a1)
{
  return &off_10126F1C0;
}

id sub_100829DC0(id a1)
{
  return &off_10126F310;
}

id sub_100829DCC(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829DD8(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829DE4(id a1)
{
  return 0;
}

id sub_100829DEC(id a1)
{
  return &off_10126F700;
}

id sub_100829DF8(id a1)
{
  return &off_10126F148;
}

id sub_100829E04(id a1)
{
  return &off_10126F718;
}

id sub_100829E10(id a1)
{
  return &off_10126F730;
}

id sub_100829E1C(id a1)
{
  return &off_10126F748;
}

id sub_100829E28(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829E34(id a1)
{
  return &__kCFBooleanTrue;
}

id sub_100829E40(id a1)
{
  return &off_10126F760;
}

id sub_10082A4A4()
{
  if (qword_1014D3590 != -1)
    dispatch_once(&qword_1014D3590, &stru_1011D88B0);
  return (id)qword_1014D3588;
}

int64_t sub_10082B364(id a1, VIOSessionAnalyticsEntry *a2, VIOSessionAnalyticsEntry *a3)
{
  VIOSessionAnalyticsEntry *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[VIOSessionAnalyticsEntry startDate](a2, "startDate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[VIOSessionAnalyticsEntry startDate](v4, "startDate"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

GEOMarcoLiteUsageState *__cdecl sub_10082B3D0(id a1, VIOSessionAnalyticsEntry *a2, unint64_t a3)
{
  return -[VIOSessionAnalyticsEntry usageState](a2, "usageState", a3);
}

void sub_10082D120(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  char *v15;
  id v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if ((objc_msgSend(*(id *)(a1 + 32), "isPaused") & 1) != 0)
    return;
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateManager"));
  if (objc_msgSend(v16, "isDisabled"))
  {

    return;
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateManager"));
  v3 = objc_msgSend(v2, "isThrottling");

  if ((v3 & 1) != 0)
    return;
  v4 = objc_msgSend(*(id *)(a1 + 40), "trackingState");
  if (v4)
  {
    if (v4 != (id)1)
    {
      if (v4 == (id)2)
      {
        if (objc_msgSend(*(id *)(a1 + 32), "isInitializing"))
          v5 = 14;
        else
          v5 = 6;
        objc_msgSend(*(id *)(a1 + 32), "completeInFlightEntriesWithExitReason:", v5);
        objc_msgSend(*(id *)(a1 + 32), "createEntryForUsageType:value:", 6, 0);
        objc_msgSend(*(id *)(a1 + 32), "setIsInitializing:", 0);
        v6 = *(void **)(a1 + 32);
        v7 = 0;
        goto LABEL_19;
      }
      return;
    }
    if (!objc_msgSend(*(id *)(a1 + 32), "isInitializing"))
    {
      v10 = 7;
      switch((unint64_t)objc_msgSend(*(id *)(a1 + 40), "trackingStateReason"))
      {
        case 0uLL:
          v11 = sub_1004318FC();
          v12 = objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v18 = "GEOMarcoLiteUsageState_MarcoLiteUsageType MarcoLiteUsageTypeForARTrackingStateReason(ARTrackingStateReason)";
            v19 = 2080;
            v20 = "VIOSessionAnalyticsCapturer.m";
            v21 = 1024;
            v22 = 98;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion reached unexpectedly!", buf, 0x1Cu);
          }

          if (sub_100A70734())
          {
            v13 = sub_1004318FC();
            v14 = objc_claimAutoreleasedReturnValue(v13);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              v15 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
              *(_DWORD *)buf = 138412290;
              v18 = v15;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

            }
          }
          goto LABEL_27;
        case 1uLL:
          break;
        case 2uLL:
          v10 = 8;
          break;
        case 3uLL:
          v10 = 9;
          break;
        case 4uLL:
          v10 = 10;
          break;
        default:
LABEL_27:
          v10 = 0xFFFFFFFFLL;
          break;
      }
      objc_msgSend(*(id *)(a1 + 32), "completeInFlightEntriesWithExitReason:", v10);
      objc_msgSend(*(id *)(a1 + 32), "createEntryForUsageType:value:", v10, 0);
      return;
    }
    v9 = *(void **)(a1 + 32);
  }
  else
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "isInitializing");
    v9 = *(void **)(a1 + 32);
    if (!v8)
    {
      objc_msgSend(v9, "completeInFlightEntriesWithExitReason:", 11);
      objc_msgSend(*(id *)(a1 + 32), "createEntryForUsageType:value:", 11, 0);
      return;
    }
  }
  if ((objc_msgSend(v9, "didRecordInitializing") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "completeInFlightEntriesWithExitReason:", 13);
    objc_msgSend(*(id *)(a1 + 32), "createEntryForUsageType:value:", 13, 0);
    v6 = *(void **)(a1 + 32);
    v7 = 1;
LABEL_19:
    objc_msgSend(v6, "setDidRecordInitializing:", v7);
  }
}

id sub_10082D4D8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "completeInFlightEntriesWithExitReason:", 12);
  return objc_msgSend(*(id *)(a1 + 32), "createEntryForUsageType:value:", 12, 0);
}

id sub_10082D564(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "completeInFlightEntriesForUsageType:withExitReason:", 12, 13);
}

id *sub_10082D5CC(id *result)
{
  id *v1;

  if ((unint64_t)result[5] <= 2)
  {
    v1 = result;
    objc_msgSend(result[4], "setIsInitializing:", (unint64_t)result[5] & 1);
    return (id *)objc_msgSend(v1[4], "setDidRecordInitializing:", 0);
  }
  return result;
}

void sub_10082D838(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionAnalyticsCapturer");
  v2 = (void *)qword_1014D3588;
  qword_1014D3588 = (uint64_t)v1;

}

void sub_10082EEC0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vehicleAnnotation"));
  objc_msgSend(v2, "setCoordinate:", *(double *)(a1 + 48), *(double *)(a1 + 56));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vehicleAnnotationView"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "vehicleLocation"));
  objc_msgSend(v4, "course");
  objc_msgSend(v3, "_setDirection:");

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vehicleAnnotationView"));
  objc_msgSend(v5, "setAlpha:", 1.0);

}

void sub_100830158(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void **v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  void *v25;
  void *v26;
  uint8_t buf[4];
  id v28;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "geocodedMapItem"));

    v9 = sub_10043222C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
    if (!v8)
    {
      if (v11)
      {
        *(_DWORD *)buf = 138412290;
        v28 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "SAR: forward geocode address : %@", buf, 0xCu);
      }

      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_1008303F0;
      v23[3] = &unk_1011D8A70;
      v24 = *(id *)(a1 + 32);
      objc_msgSend(v5, "forwardGeocodeAddress:", v23);
      v15 = v24;
      goto LABEL_14;
    }
    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "geocodedMapItem"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "name"));
      *(_DWORD *)buf = 138412290;
      v28 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "SAR: Opening client resolved item for address : %@", buf, 0xCu);

    }
    v14 = *(_QWORD *)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "geocodedMapItem"));
    v26 = v15;
    v16 = &v26;
LABEL_10:
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 1));
    (*(void (**)(uint64_t, void *, _QWORD))(v14 + 16))(v14, v22, 0);

LABEL_14:
    goto LABEL_15;
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mapItem"));

  if (v17)
  {
    v18 = sub_10043222C();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapItem"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "name"));
      *(_DWORD *)buf = 138412290;
      v28 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "SAR: Received location of interest with map item: %@", buf, 0xCu);

    }
    v14 = *(_QWORD *)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mapItem"));
    v25 = v15;
    v16 = &v25;
    goto LABEL_10;
  }
LABEL_15:

}

void sub_1008303F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  void *v14;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else if (v5)
  {
    v7 = sub_10043222C();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
      *(_DWORD *)buf = 138412290;
      v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "SAR: Received forward geocoded map item: %@", buf, 0xCu);

    }
    v10 = *(_QWORD *)(a1 + 32);
    v12 = v5;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
    (*(void (**)(uint64_t, void *, _QWORD))(v10 + 16))(v10, v11, 0);

  }
}

uint64_t sub_10083052C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  int v6;
  id v7;

  v2 = sub_10043222C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "count");
    v6 = 134217984;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "SAR: Showing search results for %lu map items.", (uint8_t *)&v6, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100830730(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  SharedTripListContaineeViewController *v5;
  uint64_t v6;
  void *v7;
  objc_super v8;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v8.receiver = *(id *)(a1 + 32);
  v8.super_class = (Class)IOSSharedTripsContext;
  objc_msgSendSuper2(&v8, "becomeCurrent:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedTrip"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedTrip"));
    objc_msgSend(*(id *)(a1 + 32), "_presentCardForSharedTrip:", v4);

  }
  else
  {
    v5 = objc_alloc_init(SharedTripListContaineeViewController);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 72);
    *(_QWORD *)(v6 + 72) = v5;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setDelegate:");
  }
}

id sub_100830858(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)IOSSharedTripsContext;
  return objc_msgSendSuper2(&v3, "resignCurrent:", v1);
}

uint64_t sub_100830F3C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MapsRadarComponent mapsShareETAiOSComponent](MapsRadarComponent, "mapsShareETAiOSComponent"));
  objc_msgSend(*(id *)(a1 + 32), "setComponent:", v2);

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(a1 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v7), "senderInfo", (_QWORD)v12));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fromIdentifier"));
        objc_msgSend(v8, "addCollaborationContactHandle:", v10);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

BOOL sub_1008315F4()
{
  if (qword_1014D35A0 != -1)
    dispatch_once(&qword_1014D35A0, &stru_1011D8AB0);
  return (byte_1014D3598 & 1) == 0;
}

void sub_10083163C(id a1)
{
  id v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  id v5;
  id v6;
  __int16 v7;
  uint8_t buf[2];
  __int16 v9;

  if (sub_1003A5954())
  {
    if ((+[ARGeoTrackingConfiguration isSupported](ARGeoTrackingConfiguration, "isSupported") & 1) != 0)
    {
      v1 = sub_100831738();
      v2 = objc_claimAutoreleasedReturnValue(v1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 0;
        v3 = "Pedestrian AR is supported on the current device";
        v4 = (uint8_t *)&v7;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
      }
    }
    else
    {
      byte_1014D3598 = 1;
      v6 = sub_100831738();
      v2 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v3 = "Pedestrian AR is not supported because the current device does not support geo tracking";
        v4 = buf;
        goto LABEL_9;
      }
    }
  }
  else
  {
    byte_1014D3598 = 1;
    v5 = sub_100831738();
    v2 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v3 = "Pedestrian AR is not supported because the current device does not support VLF";
      v4 = (uint8_t *)&v9;
      goto LABEL_9;
    }
  }

}

id sub_100831738()
{
  if (qword_1014D35B0 != -1)
    dispatch_once(&qword_1014D35B0, &stru_1011D8AD0);
  return (id)qword_1014D35A8;
}

void sub_100831778(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARAvailability");
  v2 = (void *)qword_1014D35A8;
  qword_1014D35A8 = (uint64_t)v1;

}

void sub_1008319EC(uint64_t a1, void *a2)
{
  id WeakRetained;
  char v4;
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 56));
  v4 = objc_opt_respondsToSelector(WeakRetained, "addPhotosControllerRequestsAnchoringBarButtonItem:");

  if ((v4 & 1) != 0)
  {
    v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 56));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "addPhotosControllerRequestsAnchoringBarButtonItem:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(v7, "setBarButtonItem:", v6);

  }
}

void sub_100832284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008322AC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  UGCPhotoWithMetadata *v5;
  uint64_t v6;
  void *v7;
  UGCPhotoWithMetadata *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  UGCPhotoWithMetadata *v13;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = [UGCPhotoWithMetadata alloc];
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v8 = -[UGCPhotoWithMetadata initWithImageData:date:location:source:](v5, "initWithImageData:date:location:source:", v6, v7, v3, 1);

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v9, "removeObserver:name:object:", *(_QWORD *)(a1 + 40), _UIImagePickerControllerUserDidRejectItemNotification, 0);

    v10 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 56));
    v11 = *(_QWORD *)(a1 + 40);
    v13 = v8;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
    objc_msgSend(v10, "takePhotoController:didSelectPhotosWithMetadata:", v11, v12);

  }
}

uint64_t sub_100832760(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1008327EC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;

}

id sub_100832854(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  return _objc_msgSend(*(id *)(a1 + 32), "_presentImagePickerWithSourceType:", 2);
}

id sub_1008328E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  return _objc_msgSend(*(id *)(a1 + 32), "_presentImagePickerWithSourceType:", 1);
}

uint64_t sub_100833070(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  uint64_t v10;

  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "shortcutIdentifier"));
  if (v5 == (void *)v6)
  {

LABEL_8:
    v10 = 1;
    goto LABEL_9;
  }
  v7 = (void *)v6;
  v8 = objc_msgSend(v5, "isEqual:", v6);

  if ((v8 & 1) != 0)
    goto LABEL_8;
  if (objc_msgSend(v4, "isShortcutForSetup"))
  {
    if (objc_msgSend(v3, "isSetupPlaceholder"))
    {
      v9 = (id)MapsSuggestionsShortcutTypeFromEntryType(objc_msgSend(v4, "type"));
      if (v9 == objc_msgSend(v3, "type"))
        goto LABEL_8;
    }
  }
  v10 = 0;
LABEL_9:

  return v10;
}

void sub_100834868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10083488C(uint64_t a1, void *a2)
{
  id WeakRetained;
  _QWORD *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained
    && objc_msgSend(*((id *)WeakRetained + 9), "isEqualToString:", *(_QWORD *)(a1 + 32))
    && *(_QWORD *)(a1 + 48) == v4[2])
  {
    if (v6)
    {
      objc_msgSend(v4, "setContactImage:");
    }
    else
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("SharedTrip")));
      objc_msgSend(v4, "setContactImage:", v5);

    }
  }

}

void sub_100835AC8(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR(" · [List view details separator]"), CFSTR("localized string not found"), 0));
  v2 = (void *)qword_1014D35B8;
  qword_1014D35B8 = v1;

}

void sub_10083668C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1008366B0(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  unsigned __int8 v9;
  id v10;

  v7 = a2;
  v8 = v7;
  if (*(id *)(a1[4] + 128) == v7)
  {
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
  }
  else
  {
    v10 = v7;
    v9 = objc_msgSend(v7, "isHidden");
    v8 = v10;
    if ((v9 & 1) == 0)
      *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a3;
  }

}

void sub_100839E7C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100839EB0(uint64_t a1, void *a2)
{
  _DWORD *WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained && *(_DWORD *)(a1 + 40) == WeakRetained[62])
  {
    if (v5)
      objc_msgSend(WeakRetained, "setMapsImage:");
    else
      objc_msgSend(WeakRetained, "setDefaultImage");
  }

}

void sub_100839F28(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  _DWORD *WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained && a4 && *(_DWORD *)(a1 + 40) == WeakRetained[62])
  {
    if (v8)
      objc_msgSend(WeakRetained, "setMapsImage:");
    else
      objc_msgSend(WeakRetained, "setDefaultImage");
  }

}

void sub_10083A0AC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10083A0C8(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained[30], "setImage:", v5);

}

void sub_10083A2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10083A2F4(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained && *(_DWORD *)(a1 + 48) == *((_DWORD *)WeakRetained + 62))
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "imageWithRenderingMode:", 2));

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v6 = (id)v5;
  }

}

void sub_10083A49C(id a1)
{
  void *v1;
  double v2;
  double v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v1, "scale");
  v3 = v2 * 64.0;

  qword_1014D35C8 = *(_QWORD *)&v3;
  unk_1014D35D0 = *(_QWORD *)&v3;
}

_QWORD *sub_10083C0F4(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[4];
  if (*((_DWORD *)result + 10) == *(_DWORD *)(v2 + 256))
    return objc_msgSend(*(id *)(v2 + 248), "setImage:", a2);
  return result;
}

void sub_10083C128(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = v3;
  if (v3)
    v4 = v3;
  else
    v4 = (id)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("Fallback-Guide")));
  v5 = v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_10083C194(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10083D01C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "traitCollection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont system12BoldCompatibleWithTraitCollection:](UIFont, "system12BoldCompatibleWithTraitCollection:", v4));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, NSFontAttributeName);

  v6 = objc_msgSend(v3, "copy");
  return v6;
}

void sub_10083E50C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t Log;
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  id v17;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsLocationOfInterest");
    v8 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v15 = v9;
      v16 = 2112;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Could not find a LOI w/ identifier %@. Error: %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else if (v5)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10083E684;
    v10[3] = &unk_1011BD050;
    v11 = *(id *)(a1 + 32);
    v12 = v5;
    v13 = *(id *)(a1 + 40);
    objc_msgSend(v12, "_maps_hydrateGeoMapItem:", v10);

  }
}

void sub_10083E684(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t Log;
  NSObject *v8;
  uint64_t v9;
  MapsLocationOfInterest *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  id v14;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "MapsLocationOfInterest");
    v8 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = a1[4];
      v11 = 138412547;
      v12 = v9;
      v13 = 2113;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed hydrating the geoMapItem for LOI w/ identifier %@. Error: %{private}@", (uint8_t *)&v11, 0x16u);
    }

  }
  else if (v5)
  {
    v10 = -[MapsLocationOfInterest initWithLocationOfInterest:geoMapItem:]([MapsLocationOfInterest alloc], "initWithLocationOfInterest:geoMapItem:", a1[5], v5);
    goto LABEL_8;
  }
  v10 = 0;
LABEL_8:
  (*(void (**)(void))(a1[6] + 16))();

}

id sub_10083EF80()
{
  if (qword_1014D35E8 != -1)
    dispatch_once(&qword_1014D35E8, &stru_1011D8DE0);
  return (id)qword_1014D35E0;
}

BOOL sub_10083FADC(id a1, NSNumber *a2, unint64_t a3)
{
  double v3;

  -[NSNumber doubleValue](a2, "doubleValue", a3);
  return v3 >= -25.0;
}

BOOL sub_10083FB00(id a1, NSNumber *a2, unint64_t a3)
{
  double v3;

  -[NSNumber doubleValue](a2, "doubleValue", a3);
  return v3 >= 65.0;
}

BOOL sub_10083FB28(id a1, NSNumber *a2, unint64_t a3)
{
  double v3;

  -[NSNumber doubleValue](a2, "doubleValue", a3);
  return v3 >= 65.0;
}

BOOL sub_10083FB50(id a1, NSNumber *a2, unint64_t a3)
{
  double v3;

  -[NSNumber doubleValue](a2, "doubleValue", a3);
  return v3 <= -65.0;
}

BOOL sub_10083FC2C(id a1, NSNumber *a2, unint64_t a3)
{
  double v3;

  -[NSNumber doubleValue](a2, "doubleValue", a3);
  return v3 < -60.0;
}

BOOL sub_10083FC54(id a1, NSNumber *a2, unint64_t a3)
{
  double v3;

  -[NSNumber doubleValue](a2, "doubleValue", a3);
  return v3 < 30.0;
}

BOOL sub_10083FC78(id a1, NSNumber *a2, unint64_t a3)
{
  double v3;

  -[NSNumber doubleValue](a2, "doubleValue", a3);
  return v3 < 30.0;
}

BOOL sub_10083FC9C(id a1, NSNumber *a2, unint64_t a3)
{
  double v3;

  -[NSNumber doubleValue](a2, "doubleValue", a3);
  return v3 > -30.0;
}

void sub_1008400BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008400E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  id v16;
  NSObject *v17;
  id v18;
  _QWORD block[4];
  id v20[3];
  uint8_t buf[4];
  id v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = sub_10083EF80();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      *(_DWORD *)buf = 134349314;
      v22 = WeakRetained;
      v23 = 2112;
      v24 = *(double *)&v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[%{public}p] Error monitoring device motion updates: %@", buf, 0x16u);

    }
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
    objc_msgSend(v10, "pitch");
    v12 = v11 * 57.2957795;

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attitude"));
    objc_msgSend(v13, "roll");
    v15 = v14 * 57.2957795;

    v16 = sub_10083EF80();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v18 = objc_loadWeakRetained((id *)(a1 + 32));
      *(_DWORD *)buf = 134349568;
      v22 = v18;
      v23 = 2048;
      v24 = v12;
      v25 = 2048;
      v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[%{public}p] Got device motion with pitch: %f, roll: %f", buf, 0x20u);

    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1008402F0;
    block[3] = &unk_1011AEE38;
    objc_copyWeak(v20, (id *)(a1 + 32));
    v20[1] = *(id *)&v12;
    v20[2] = *(id *)&v15;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    objc_destroyWeak(v20);
  }

}

void sub_1008402F0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateVisibilityWithCurrentPitch:currentRoll:", *(double *)(a1 + 40), *(double *)(a1 + 48));

}

void sub_100841404(uint64_t a1)
{
  void *v2;
  float v3;
  double v4;
  void *v5;
  float v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "camera"));
  objc_msgSend(v2, "eulerAngles");
  v4 = v3 * 57.2957795;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "camera"));
  objc_msgSend(v5, "eulerAngles");
  objc_msgSend(WeakRetained, "updateVisibilityWithCurrentPitch:currentRoll:", v4, v6 * 57.2957795);

}

void sub_100841BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100841BD8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  int v6;
  id v7;

  v2 = sub_10083EF80();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v6 = 134349056;
    v7 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Re-starting motion updates now", (uint8_t *)&v6, 0xCu);

  }
  v5 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v5, "_startIfNecessary");

}

void sub_10084203C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARMotionMonitorTask");
  v2 = (void *)qword_1014D35E0;
  qword_1014D35E0 = (uint64_t)v1;

}

id sub_100842618()
{
  if (qword_1014D35F8 != -1)
    dispatch_once(&qword_1014D35F8, &stru_1011D8E68);
  return (id)qword_1014D35F0;
}

NSString *__cdecl sub_100842CFC(id a1, CLLocation *a2, unint64_t a3)
{
  CLLocation *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const __CFString *v9;

  v3 = a2;
  -[CLLocation probabilityPositionContextStateIndoor](v3, "probabilityPositionContextStateIndoor");
  v5 = v4;
  -[CLLocation probabilityPositionContextStateOutdoor](v3, "probabilityPositionContextStateOutdoor");
  v7 = v6;
  v8 = -[CLLocation positionContextState](v3, "positionContextState");

  v9 = CFSTR("Unknown");
  if (v8 == 1)
    v9 = CFSTR("Indoor");
  if (v8 == 2)
    v9 = CFSTR("Outdoor");
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("in: %f, out: %f, c: %@"), v5, v7, v9);
}

void sub_10084301C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFSessionLocationOutdoorMonitor");
  v2 = (void *)qword_1014D35F0;
  qword_1014D35F0 = (uint64_t)v1;

}

NSString *__cdecl sub_100843454(id a1, MSPSharedTripContact *a2, unint64_t a3)
{
  return (NSString *)-[MSPSharedTripContact stringValue](a2, "stringValue", a3);
}

id sub_100843B58(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a2;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "containsObject:", v3))
  {
    v4 = sub_10046DCCC(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_100843BB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringValue"));
  if (objc_msgSend(v4, "containsObject:", v5))
  {
    v6 = sub_10046DCCC(v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_1008447FC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "contact"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contact"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v7 = objc_msgSend(v4, "isEqualToString:", v6);

  return v7;
}

uint64_t sub_100844BD4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100844BE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v5 = a3;
  v7 = v5;
  if (!v5)
  {
    +[MapsSharedTripAnalyticsHelper sendSuccessAnalyticFor:](_TtC4Maps29MapsSharedTripAnalyticsHelper, "sendSuccessAnalyticFor:", *(_QWORD *)(a1 + 32));
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, a2, v7);
    v5 = v7;
  }

}

id sub_100845008(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  id v8;

  v6 = sub_10046DCCC(a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v8)
    *a4 = 1;
  return v8;
}

uint64_t sub_100845408(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100845420(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1));
  (*(void (**)(uint64_t, void *, _QWORD, _QWORD))(v2 + 16))(v2, v4, 0, 0);

}

void sub_100845798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1008457B0(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "taskState");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result == (id)1;
  return result;
}

void sub_1008458C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1008458E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1008458F0(uint64_t a1)
{

}

void sub_1008458F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultOnIsolationQueue"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1008459B4(uint64_t a1)
{
  uint64_t Log;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RouteLoadingTask");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@ - cancelling task", (uint8_t *)&v6, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "setTaskState:", 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ticket"));
  objc_msgSend(v5, "cancel");

}

void sub_100845C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100845C84(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "taskState");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result != 0;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    return objc_msgSend(*(id *)(a1 + 32), "setTaskState:", 1);
  return result;
}

id sub_100845CE0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_createNavigationServiceTicketOnIsolationQueueWithCompletionHandler:", *(_QWORD *)(a1 + 40));
}

void sub_100845F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100845F78(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  uint64_t Log;
  NSObject *v12;
  NSObject *v13;
  _QWORD v14[5];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RouteLoadingTask");
    v12 = objc_claimAutoreleasedReturnValue(Log);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138413058;
      v21 = WeakRetained;
      v22 = 2048;
      v23 = objc_msgSend(v7, "count");
      v24 = 2114;
      v25 = v8;
      v26 = 2114;
      v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@ - MNNavigationServiceDirectionsRequestTicket completion handler called with routes (count: %ld), error: %{public}@, directionsError: %{public}@", buf, 0x2Au);
    }

    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "isolationQueue"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10084614C;
    v14[3] = &unk_1011D8F50;
    v14[4] = WeakRetained;
    v15 = v8;
    v16 = v9;
    v17 = a1[4];
    v18 = v7;
    v19 = a1[5];
    dispatch_async(v13, v14);

  }
}

void sub_10084614C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  if (objc_msgSend(*(id *)(a1 + 32), "taskState") == (id)1)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v2 = *(_QWORD *)(a1 + 48);
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "waypoints"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary _navigation_stringTokensForDirectionsError:waypoints:](NSDictionary, "_navigation_stringTokensForDirectionsError:waypoints:", v2, v3));

      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_mapkit_errorWithDirectionsError:stringTokens:", *(_QWORD *)(a1 + 48), v4));
    }
    else
    {
      v5 = 0;
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationService"));
    objc_msgSend(v6, "closeForClient:", *(_QWORD *)(a1 + 32));

    if (objc_msgSend(*(id *)(a1 + 64), "count"))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ticket"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "traceRecordingData"));

      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v9 = *(id *)(a1 + 64);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v15;
        do
        {
          v13 = 0;
          do
          {
            if (*(_QWORD *)v15 != v12)
              objc_enumerationMutation(v9);
            objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v13), "_maps_setTraceRecordingData:", v8, (_QWORD)v14);
            v13 = (char *)v13 + 1;
          }
          while (v11 != v13);
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        }
        while (v11);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_createResultOnIsolationQueueWithRoutes:error:completionHandler:", *(_QWORD *)(a1 + 64), v5, *(_QWORD *)(a1 + 72), (_QWORD)v14);

  }
}

uint64_t sub_1008464DC(_QWORD *a1)
{
  uint64_t Log;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RouteLoadingTask");
  v3 = objc_claimAutoreleasedReturnValue(Log);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = a1[4];
    v5 = a1[5];
    v7 = 138412546;
    v8 = v4;
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@ – invoking completion handler with result %@", (uint8_t *)&v7, 0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_10084689C(uint64_t a1)
{
  unsigned int v2;
  uint64_t Log;
  NSObject *v4;
  _BOOL4 v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;

  v2 = +[MapsAppDelegate mapsIsLaunchedForTesting](MapsAppDelegate, "mapsIsLaunchedForTesting");
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "RouteLoadingTask");
  v4 = objc_claimAutoreleasedReturnValue(Log);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v5)
    {
      v6 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
      v7 = NSStringFromClass(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v16 = 138412290;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ – invoking completion handler with result", (uint8_t *)&v16, 0xCu);

    }
  }
  else if (v5)
  {
    v9 = *(void **)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v16 = 138412546;
    v17 = v9;
    v18 = 2112;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ – invoking completion handler with result %@", (uint8_t *)&v16, 0x16u);
  }

  v12 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ticket"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "directionsResponse"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "advisoriesInfo"));
  (*(void (**)(uint64_t, uint64_t, void *))(v11 + 16))(v11, v12, v15);

}

void sub_100846CBC(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths mapsApplicationContainerPaths](MSPMapsPaths, "mapsApplicationContainerPaths"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cacheDirectory"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("TRANSIT_PAY_PAYMENT_POLYGON_DATA.pbd")));
  v17 = 0;
  objc_msgSend(v1, "removeItemAtPath:error:", v4, &v17);
  v5 = v17;
  if (v5 && objc_msgSend(v1, "fileExistsAtPath:", v4))
  {
    v6 = sub_10043253C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error removing cached mapItem at path:%@", buf, 0xCu);
    }

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths mapsApplicationContainerPaths](MSPMapsPaths, "mapsApplicationContainerPaths"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cacheDirectory"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByAppendingPathComponent:", CFSTR("TRANSIT_PAY_PAYMENT_POLYGON_LOCATION_DATA.pbd")));
  v16 = 0;
  objc_msgSend(v1, "removeItemAtPath:error:", v10, &v16);
  v11 = v16;
  if (v11 && objc_msgSend(v1, "fileExistsAtPath:", v10))
  {
    v12 = sub_10043253C();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Error removing cached mapItem at path:%@", buf, 0xCu);
    }

  }
  v14 = sub_10043253C();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v19 = v4;
    v20 = 2112;
    v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Deleted cached location and mapItem files at: %@ and %@", buf, 0x16u);
  }

}

void sub_100847154(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  NSObject *v36;
  _BOOL4 v37;
  void *v38;
  void (*v39)(void);
  id v40;
  NSObject *v41;
  int v42;
  id v43;
  __int16 v44;
  double v45;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths mapsApplicationContainerPaths](MSPMapsPaths, "mapsApplicationContainerPaths"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cacheDirectory"));

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("TRANSIT_PAY_PAYMENT_POLYGON_DATA.pbd")));
    v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", v5);
    if (!v6)
    {
      v16 = sub_10043253C();
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v42 = 138412290;
        v43 = v5;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "No mapItem is cached at this path: %@", (uint8_t *)&v42, 0xCu);
      }

      objc_msgSend(WeakRetained, "_deleteCachedFiles");
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      goto LABEL_16;
    }
    v7 = objc_msgSend(objc_alloc((Class)GEOMapItemStorage), "initWithData:", v6);
    if (v7 && (v8 = objc_opt_class(GEOMapItemStorage), (objc_opt_isKindOfClass(v7, v8) & 1) != 0))
    {
      if (!objc_msgSend(v7, "hasExpiredComponents"))
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths mapsApplicationContainerPaths](MSPMapsPaths, "mapsApplicationContainerPaths"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "cacheDirectory"));

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "stringByAppendingPathComponent:", CFSTR("TRANSIT_PAY_PAYMENT_POLYGON_LOCATION_DATA.pbd")));
        v21 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", v20);
        if (v21)
        {
          v22 = objc_msgSend(objc_alloc((Class)GEOLocation), "initWithData:", v21);
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "latLng"));
          objc_msgSend(v23, "coordinate");
          v25 = v24;
          v27 = v26;
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "latLng"));
          v29 = objc_msgSend(v28, "coordinate");
          v32 = GEOCalculateDistance(v29, v25, v27, v30, v31);

          objc_msgSend(v7, "cachingRadiusMeters");
          v34 = v33;
          v35 = sub_10043253C();
          v36 = objc_claimAutoreleasedReturnValue(v35);
          v37 = os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
          if (v32 <= v34)
          {
            if (v37)
            {
              v42 = 138412290;
              v43 = v7;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Found mapItem to uncache:\n%@", (uint8_t *)&v42, 0xCu);
            }

            v39 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
          }
          else
          {
            if (v37)
            {
              v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v32));
              v42 = 138412546;
              v43 = v38;
              v44 = 2048;
              v45 = v34;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Distance:%@ > Caching Radius:%g", (uint8_t *)&v42, 0x16u);

            }
            objc_msgSend(WeakRetained, "_deleteCachedFiles");
            v39 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
          }
          v39();

        }
        else
        {
          v40 = sub_10043253C();
          v41 = objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            v42 = 138412290;
            v43 = v20;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "No locationData is cached at this path: %@", (uint8_t *)&v42, 0xCu);
          }

          objc_msgSend(WeakRetained, "_deleteCachedFiles");
          (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        }

        goto LABEL_12;
      }
      v9 = sub_10043253C();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v42) = 0;
        v11 = "mapItem has expired. It's too old.";
        v12 = v10;
        v13 = 2;
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v42, v13);
      }
    }
    else
    {
      v14 = sub_10043253C();
      v10 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v42 = 138412546;
        v43 = v5;
        v44 = 2112;
        v45 = *(double *)&v7;
        v11 = "mapItem cannot be formed with the data cached at this path: %@. mapItem: %@";
        v12 = v10;
        v13 = 22;
        goto LABEL_10;
      }
    }

    objc_msgSend(WeakRetained, "_deleteCachedFiles");
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, v15);
LABEL_12:

LABEL_16:
  }

}

void sub_1008476A8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  _BOOL4 v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 40))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[GEOMapItemStorage mapItemStorageForGEOMapItem:](GEOMapItemStorage, "mapItemStorageForGEOMapItem:"));
      v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "data"));
      if (v4)
      {
        v5 = (void *)v4;
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "data"));

        if (v6)
        {
          v7 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths mapsApplicationContainerPaths](MSPMapsPaths, "mapsApplicationContainerPaths"));
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cacheDirectory"));

          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByAppendingPathComponent:", CFSTR("TRANSIT_PAY_PAYMENT_POLYGON_DATA.pbd")));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "data"));
          v30 = 0;
          objc_msgSend(v10, "writeToFile:options:error:", v9, 1, &v30);
          v11 = v30;

          if (v11)
          {
            v12 = sub_10043253C();
            v13 = objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedDescription"));
              *(_DWORD *)buf = 138412546;
              v32 = v9;
              v33 = 2112;
              v34 = v14;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Unable to write mapItem data to file: %@ because of %@", buf, 0x16u);

            }
            objc_msgSend(WeakRetained, "_deleteCachedFiles");
          }
          else
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[MSPMapsPaths mapsApplicationContainerPaths](MSPMapsPaths, "mapsApplicationContainerPaths"));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "cacheDirectory"));

            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "stringByAppendingPathComponent:", CFSTR("TRANSIT_PAY_PAYMENT_POLYGON_LOCATION_DATA.pbd")));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "data"));
            v29 = 0;
            objc_msgSend(v20, "writeToFile:options:error:", v19, 1, &v29);
            v11 = v29;

            v21 = sub_10043253C();
            v22 = objc_claimAutoreleasedReturnValue(v21);
            v23 = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
            if (v11)
            {
              if (v23)
              {
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedDescription"));
                *(_DWORD *)buf = 138412546;
                v32 = v19;
                v33 = 2112;
                v34 = v24;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Unable to write location data to file: %@ because of %@", buf, 0x16u);

              }
              objc_msgSend(WeakRetained, "_deleteCachedFiles");
            }
            else
            {
              if (v23)
              {
                v25 = *(void **)(a1 + 40);
                *(_DWORD *)buf = 138412290;
                v32 = v25;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Successfully cached the userLocation:\n%@", buf, 0xCu);
              }

              v26 = sub_10043253C();
              v27 = objc_claimAutoreleasedReturnValue(v26);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
              {
                v28 = *(void **)(a1 + 32);
                *(_DWORD *)buf = 138412290;
                v32 = v28;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Successfully cached the paymentPolygon:\n%@", buf, 0xCu);
              }

            }
          }

        }
      }

    }
    else
    {
      v15 = sub_10043253C();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Either location or polygon is nil. Interpreting this as a command to delete the cache.", buf, 2u);
      }

      objc_msgSend(WeakRetained, "_deleteCachedFiles");
    }
  }

}

uint64_t sub_100847A54()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unsigned int v3;

  v0 = MapsConfig_Debug_UGCSendTimestampsWithPhotos;
  v1 = off_1014B3BC8;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v3 = objc_msgSend(v2, "isInternalInstall");

  if (v3)
    return GEOConfigGetBOOL(v0, v1);
  else
    return 0;
}

uint64_t sub_100847AC0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unsigned int v3;

  v0 = MapsConfig_Debug_UGCSendDeviceLocationWithSubmission;
  v1 = off_1014B3BD8;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v3 = objc_msgSend(v2, "isInternalInstall");

  if (v3)
    return GEOConfigGetBOOL(v0, v1);
  else
    return 0;
}

id sub_100847E70()
{
  if (qword_1014D3608 != -1)
    dispatch_once(&qword_1014D3608, &stru_1011D8FF0);
  return (id)qword_1014D3600;
}

void sub_100848044(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "platformController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "chromeViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_mapLayer"));

  if (v5)
  {
    if ((objc_msgSend(v5, "enableGlobe") & 1) != 0)
    {
      v6 = objc_msgSend(v5, "isShowingCuratedElevatedGround");
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (v6)
        v8 = 2;
      else
        v8 = 1;
    }
    else
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v8 = 3;
    }
    *(_DWORD *)(v7 + 24) = v8;
  }
  else
  {
    v9 = sub_100847E70();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 134349056;
      v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[%{public}p] There is no map layer; cannot determine map type",
        (uint8_t *)&v12,
        0xCu);
    }

    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }

}

void sub_100848284(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100848298(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  int v5;
  void *v6;
  int v7;
  id v8;
  __int16 v9;
  int v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = sub_100847E70();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_DWORD *)(a1 + 40);
      v7 = 134349312;
      v8 = WeakRetained;
      v9 = 1024;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}p] Thermal pressure updated: %d", (uint8_t *)&v7, 0x12u);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40)));
    +[GEOAPPortal captureNavThermalPressureTrigger:thermalPressure:navMapType:supressedFeatures:chargingState:](GEOAPPortal, "captureNavThermalPressureTrigger:thermalPressure:navMapType:supressedFeatures:chargingState:", 3, v6, objc_msgSend(WeakRetained, "_mapType"), 0, objc_msgSend(WeakRetained, "_chargingState"));

  }
}

void sub_100848480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100848494(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  int v13;
  id v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = sub_100847E70();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(_QWORD *)(a1 + 48);
      v13 = 134349568;
      v14 = WeakRetained;
      v15 = 2048;
      v16 = v5;
      v17 = 2048;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}p] Nav state updated: %lu -> %lu", (uint8_t *)&v13, 0x20u);
    }

    if (MNNavigationServiceStateChangedToNavigating(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v7))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "thermalPressureController"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v8, "currentThermalPressureLevel")));
      v10 = objc_msgSend(WeakRetained, "_mapType");
      v11 = objc_msgSend(WeakRetained, "_chargingState");
      v12 = 1;
LABEL_8:
      +[GEOAPPortal captureNavThermalPressureTrigger:thermalPressure:navMapType:supressedFeatures:chargingState:](GEOAPPortal, "captureNavThermalPressureTrigger:thermalPressure:navMapType:supressedFeatures:chargingState:", v12, v9, v10, 0, v11);

      goto LABEL_9;
    }
    if (MNNavigationServiceStateChangedFromNavigatingToStopped(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "thermalPressureController"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v8, "currentThermalPressureLevel")));
      v10 = objc_msgSend(WeakRetained, "_mapType");
      v11 = objc_msgSend(WeakRetained, "_chargingState");
      v12 = 2;
      goto LABEL_8;
    }
  }
LABEL_9:

}

void sub_100848710(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100848724(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = sub_100847E70();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v8 = 134349312;
      v9 = WeakRetained;
      v10 = 2048;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[%{public}p] Charging state updated: %ld", (uint8_t *)&v8, 0x16u);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "thermalPressureController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v6, "currentThermalPressureLevel")));
    +[GEOAPPortal captureNavThermalPressureTrigger:thermalPressure:navMapType:supressedFeatures:chargingState:](GEOAPPortal, "captureNavThermalPressureTrigger:thermalPressure:navMapType:supressedFeatures:chargingState:", 4, v7, objc_msgSend(WeakRetained, "_mapType"), 0, objc_msgSend(WeakRetained, "_chargingState"));

  }
}

void sub_100848958(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "ThermalPressureAnalyticsTask");
  v2 = (void *)qword_1014D3600;
  qword_1014D3600 = (uint64_t)v1;

}

id sub_100848F60(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "applyTransitionWithProgress:", 0.0);
  return objc_msgSend(*(id *)(a1 + 40), "applyTransitionWithProgress:", 1.0);
}

uint64_t sub_100848F90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100848F9C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "completeTransition:", 1);
  return objc_msgSend(*(id *)(a1 + 40), "applyTransitionWithProgress:", 1.0);
}

id sub_10084926C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "applyTransitionWithProgress:", 0.0);
  return objc_msgSend(*(id *)(a1 + 40), "applyTransitionWithProgress:", 1.0);
}

id sub_10084929C(id *a1)
{
  objc_msgSend(a1[4], "completeTransition:", 1);
  objc_msgSend(a1[5], "applyTransitionWithProgress:", 1.0);
  return _objc_msgSend(a1[6], "didCompleteModeTransition");
}

uint64_t sub_1008492D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008492E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100849594(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "applyTransitionWithProgress:", 0.0);
  return objc_msgSend(*(id *)(a1 + 40), "applyTransitionWithProgress:", 1.0);
}

id sub_1008495C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "completeTransition:", 1);
}

uint64_t sub_1008495D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008495DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100849F8C(uint64_t a1)
{
  unint64_t v2;

  objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
  LOBYTE(v2) = *(_BYTE *)(a1 + 40);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setAlpha:", (double)v2);
}

_QWORD *sub_100849FC8(_QWORD *result, int a2)
{
  if (a2)
    return objc_msgSend(*(id *)(result[4] + 24), "setHidden:", *((_BYTE *)result + 40) == 0);
  return result;
}

void sub_10084C28C(id a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = objc_alloc_init((Class)NSNumberFormatter);
  v2 = (void *)qword_1014D3610;
  qword_1014D3610 = (uint64_t)v1;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
  objc_msgSend((id)qword_1014D3610, "setLocale:", v3);

  objc_msgSend((id)qword_1014D3610, "setNumberStyle:", 2);
}

void sub_10084C9F8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
  objc_msgSend(v1, "becomeFirstResponder");

}

id sub_10084D140(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6)
{
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat x;
  CGFloat v15;
  void *v16;
  double v17;
  double v18;
  double MaxX;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGFloat Width;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  CGFloat v37;
  double MaxY;
  double v39;
  CGFloat v40;
  double MinX;
  double MidY;
  CGFloat v43;
  double MinY;
  CGFloat v45;
  CGFloat v47;
  CGFloat v48;
  CGAffineTransform v49;
  CGAffineTransform v50;
  CGAffineTransform v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;

  v9 = a4 + -13.0;
  v47 = v9;
  v10 = a2 + 0.0;
  v48 = v10;
  v31 = a3 + 0.0 + 10.0;
  v11 = v9 + -20.0;
  v32 = a5 + -20.0;
  v33 = v10 + 10.0;
  v12 = a3 + 0.0;
  v30 = v12;
  v8 = v12;
  v52.origin.x = CGRectGetMaxX(*(CGRect *)(&a5 - 3));
  x = v52.origin.x;
  v15 = a6 + -10.0 + -3.93921198;
  v52.origin.y = v15;
  v52.size.width = 11.0796342;
  v52.size.height = 27.878424;
  v45 = CGRectGetMinX(v52) + 8.0;
  v53.origin.x = x;
  v53.origin.y = v15;
  v53.size.width = 11.0796342;
  v53.size.height = 27.878424;
  MinY = CGRectGetMinY(v53);
  v54.origin.x = x;
  v54.origin.y = v15;
  v54.size.width = 11.0796342;
  v54.size.height = 27.878424;
  MinX = CGRectGetMinX(v54);
  v55.origin.x = x;
  v55.origin.y = v15;
  v55.size.width = 11.0796342;
  v55.size.height = 27.878424;
  v39 = CGRectGetMinY(v55);
  v56.origin.x = x;
  v56.origin.y = v15;
  v56.size.width = 11.0796342;
  v56.size.height = 27.878424;
  v43 = CGRectGetMaxX(v56) + -3.0;
  v57.origin.x = x;
  v57.origin.y = v15;
  v57.size.width = 11.0796342;
  v57.size.height = 27.878424;
  MidY = CGRectGetMidY(v57);
  v58.origin.x = x;
  v58.origin.y = v15;
  v58.size.width = 11.0796342;
  v58.size.height = 27.878424;
  v37 = CGRectGetMaxX(v58) + -1.17086772;
  v59.origin.x = x;
  v59.origin.y = v15;
  v59.size.width = 11.0796342;
  v59.size.height = 27.878424;
  v36 = CGRectGetMidY(v59) + -2.37787197;
  v60.origin.x = x;
  v60.origin.y = v15;
  v60.size.width = 11.0796342;
  v60.size.height = 27.878424;
  v40 = CGRectGetMinX(v60) + 8.0;
  v61.origin.x = x;
  v61.origin.y = v15;
  v61.size.width = 11.0796342;
  v61.size.height = 27.878424;
  MaxY = CGRectGetMaxY(v61);
  v62.origin.x = x;
  v62.origin.y = v15;
  v62.size.width = 11.0796342;
  v62.size.height = 27.878424;
  v35 = CGRectGetMinX(v62);
  v63.origin.x = x;
  v63.origin.y = v15;
  v63.size.width = 11.0796342;
  v63.size.height = 27.878424;
  v34 = CGRectGetMaxY(v63) + -3.93921198;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPath](UIBezierPath, "bezierPath"));
  v64.origin.x = v48;
  v64.origin.y = v8;
  v64.size.width = v47;
  v64.size.height = a5;
  v17 = CGRectGetMinX(v64);
  v65.origin.x = v33;
  v65.origin.y = v31;
  v65.size.width = v11;
  v65.size.height = v32;
  objc_msgSend(v16, "moveToPoint:", v17, CGRectGetMinY(v65));
  v66.origin.x = v33;
  v66.origin.y = v31;
  v66.size.width = v11;
  v66.size.height = v32;
  v18 = CGRectGetMinX(v66);
  v67.origin.x = v33;
  v67.origin.y = v31;
  v67.size.width = v11;
  v67.size.height = v32;
  objc_msgSend(v16, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 1, v18, CGRectGetMinY(v67), 10.0);
  v68.origin.x = v33;
  v68.origin.y = v31;
  v68.size.width = v11;
  v68.size.height = v32;
  MaxX = CGRectGetMaxX(v68);
  v69.origin.x = v48;
  v69.origin.y = v30;
  v69.size.width = v47;
  v69.size.height = a5;
  objc_msgSend(v16, "addLineToPoint:", MaxX, CGRectGetMinY(v69));
  v70.origin.x = v33;
  v70.origin.y = v31;
  v70.size.width = v11;
  v70.size.height = v32;
  v20 = CGRectGetMaxX(v70);
  v71.origin.x = v33;
  v71.origin.y = v31;
  v71.size.width = v11;
  v71.size.height = v32;
  objc_msgSend(v16, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 1, v20, CGRectGetMinY(v71), 10.0, -1.57079633, 0.0);
  objc_msgSend(v16, "addLineToPoint:", MinX, v39);
  objc_msgSend(v16, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 0, v45, MinY, 8.0);
  objc_msgSend(v16, "addLineToPoint:", v37, v36);
  objc_msgSend(v16, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 1, v43, MidY, 3.0, -0.655695626, 0.655695626);
  objc_msgSend(v16, "addLineToPoint:", v35, v34);
  objc_msgSend(v16, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 0, v40, MaxY, 8.0, -2.22649195, -3.14159265);
  v72.origin.x = v48;
  v72.origin.y = v30;
  v72.size.width = v47;
  v72.size.height = a5;
  v21 = CGRectGetMaxX(v72);
  v73.origin.x = v33;
  v73.origin.y = v31;
  v73.size.width = v11;
  v73.size.height = v32;
  objc_msgSend(v16, "addLineToPoint:", v21, CGRectGetMaxY(v73));
  v74.origin.x = v33;
  v74.origin.y = v31;
  v74.size.width = v11;
  v74.size.height = v32;
  v22 = CGRectGetMaxX(v74);
  v75.origin.x = v33;
  v75.origin.y = v31;
  v75.size.width = v11;
  v75.size.height = v32;
  objc_msgSend(v16, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 1, v22, CGRectGetMaxY(v75), 10.0, 0.0, 1.57079633);
  v76.origin.x = v33;
  v76.origin.y = v31;
  v76.size.width = v11;
  v76.size.height = v32;
  v23 = CGRectGetMinX(v76);
  v77.origin.x = v48;
  v77.origin.y = v30;
  v77.size.width = v47;
  v77.size.height = a5;
  objc_msgSend(v16, "addLineToPoint:", v23, CGRectGetMaxY(v77));
  v78.origin.x = v33;
  v78.origin.y = v31;
  v78.size.width = v11;
  v78.size.height = v32;
  v24 = CGRectGetMinX(v78);
  v79.origin.x = v33;
  v79.origin.y = v31;
  v79.size.width = v11;
  v79.size.height = v32;
  objc_msgSend(v16, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 1, v24, CGRectGetMaxY(v79), 10.0, 1.57079633, 3.14159265);
  objc_msgSend(v16, "closePath");
  if (a1)
  {
    memset(&v51, 0, sizeof(v51));
    v80.origin.x = a2;
    v80.origin.y = a3;
    v80.size.width = a4;
    v80.size.height = a5;
    Width = CGRectGetWidth(v80);
    CGAffineTransformMakeTranslation(&v51, Width, 0.0);
    v49 = v51;
    CGAffineTransformScale(&v50, &v49, -1.0, 1.0);
    v51 = v50;
    objc_msgSend(v16, "applyTransform:", &v50);
  }
  return v16;
}

void sub_10084E6CC(id a1)
{
  UserProfileLinkFavoritesProvider *v1;
  void *v2;

  v1 = objc_alloc_init(UserProfileLinkFavoritesProvider);
  v2 = (void *)qword_1014D3620;
  qword_1014D3620 = (uint64_t)v1;

}

void sub_100850C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100850C98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100850D70;
  v9[3] = &unk_1011AFEC0;
  objc_copyWeak(&v13, (id *)(a1 + 40));
  v10 = v5;
  v11 = v6;
  v12 = *(id *)(a1 + 32);
  v7 = v6;
  v8 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

  objc_destroyWeak(&v13);
}

void sub_100850D70(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_handleResult:error:cacheKey:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1008510DC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  uint64_t v15;

  v2 = sub_100432EDC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v5 = NSStringFromClass(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = NSStringFromSelector(*(SEL *)(a1 + 48));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = 138412802;
    v11 = v6;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%@ %@, success = YES, cacheKey = %@", (uint8_t *)&v10, 0x20u);

  }
}

void sub_1008511C8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  uint64_t v19;

  v3 = a2;
  v4 = sub_100432EDC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v7 = NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = NSStringFromSelector(*(SEL *)(a1 + 48));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = 138413058;
    v13 = v8;
    v14 = 2112;
    v15 = v10;
    v16 = 2112;
    v17 = v3;
    v18 = 2112;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ %@, error = %@, cacheKey = %@", (uint8_t *)&v12, 0x2Au);

  }
}

void sub_100851514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100851534(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_expirationTimerFired");

}

void sub_100851DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100851E10(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_layoutDottedLines");

}

id sub_10085218C()
{
  if (qword_1014D3648 != -1)
    dispatch_once(&qword_1014D3648, &stru_1011D92A8);
  return (id)qword_1014D3640;
}

BOOL sub_100852460(id a1, SearchFieldItem *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  unsigned __int8 v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[SearchFieldItem composedWaypoint](a2, "composedWaypoint", a3, a4));
  v5 = objc_opt_class(GEOComposedWaypoint);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
    v6 = v4;
  else
    v6 = 0;
  v7 = v6;

  v8 = objc_msgSend(v7, "isServerProvidedWaypoint");
  return v8 ^ 1;
}

void sub_100852C60(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;
  RoutePlanningWaypointCell *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id WeakRetained;
  RoutePlanningWaypointCell *v14;
  id v16;

  v6 = *(void **)(a1 + 32);
  v7 = a2;
  v8 = [RoutePlanningWaypointCell alloc];
  v16 = v7;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v16, 1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  v11 = *(unsigned __int8 *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(v12 + 8));
  v14 = -[RoutePlanningWaypointCell initWithWaypoints:waypointIndex:editable:delegate:waypointInfoProvider:cellIndex:](v8, "initWithWaypoints:waypointIndex:editable:delegate:waypointInfoProvider:cellIndex:", v9, v10, v11, v12, WeakRetained, a3);
  objc_msgSend(v6, "addObject:", v14);

  if (*(_QWORD *)(a1 + 48) - 1 == a3)
    *a4 = 1;
}

void sub_100853348(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleBody));
  v2 = (void *)qword_1014D3630;
  qword_1014D3630 = v1;

}

BOOL sub_100854064(id a1, UITableViewCell *a2, unint64_t a3, BOOL *a4)
{
  UITableViewCell *v4;
  uint64_t v5;
  char isKindOfClass;

  v4 = a2;
  v5 = objc_opt_class(RoutePlanningWaypointCell);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);

  return isKindOfClass & 1;
}

void sub_100854408(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "count") == (id)(a3 + 1))
  {
    *a4 = 1;
  }
  else
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "objectAtIndexedSubscript:", a3));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath indexPathForRow:inSection:](NSIndexPath, "indexPathForRow:inSection:", a3, 0));
    objc_msgSend(*(id *)(a1 + 32), "_layoutDottedLineForCell:atIndexPath:", v8, v7);

  }
}

id sub_100854914(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_100854CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100854D00(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100854D10(uint64_t a1)
{

}

void sub_100854D18(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;

  v13 = a2;
  v7 = objc_opt_class(RoutePlanningWaypointCell);
  isKindOfClass = objc_opt_isKindOfClass(v13, v7);
  v9 = v13;
  if ((isKindOfClass & 1) != 0)
  {
    v10 = v13;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "currentText"));
    v12 = objc_msgSend(v11, "length");

    if (!v12)
    {
      *a4 = 1;
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    }

    v9 = v13;
  }

}

void sub_100855A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100855AD8(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "performDeleteAtIndex:", *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

BOOL sub_1008565BC(id a1, SearchFieldItem *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  char v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[SearchFieldItem composedWaypoint](a2, "composedWaypoint", a3, a4));
  v5 = objc_msgSend(v4, "isServerProvidedWaypoint") ^ 1;

  return v5;
}

void sub_1008568B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008568DC(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "performDeleteAtIndex:", *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

id sub_1008574D4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100857754(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningWaypointListView");
  v2 = (void *)qword_1014D3640;
  qword_1014D3640 = (uint64_t)v1;

}

void sub_100857B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100857BB8(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "appCoordinator"));
  objc_msgSend(v1, "dismissRidesharingSessionAndReturnToRoutePlanning:", 1);

}

void sub_100858274(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id location;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  _QWORD v21[5];
  id v22;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), *(id *)(a1 + 40));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100858504;
  v21[3] = &unk_1011AC8B0;
  v2 = *(void **)(a1 + 40);
  v21[4] = *(_QWORD *)(a1 + 32);
  v22 = v2;
  v3 = objc_retainBlock(v21);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "title"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "message"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v4, v5, 1));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "openAppCommandTitle"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100858598;
  v18[3] = &unk_1011BB080;
  v19 = *(id *)(a1 + 40);
  v8 = v3;
  v20 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v7, 0, v18));
  objc_msgSend(v6, "addAction:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dismissCommandTitle"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1008585C4;
  v16[3] = &unk_1011AD960;
  v11 = v8;
  v17 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 1, v16));
  objc_msgSend(v6, "addAction:", v12);

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), v6);
  objc_initWeak(&location, v6);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1008585D0;
  v13[3] = &unk_1011D92D0;
  objc_copyWeak(&v14, &location);
  objc_msgSend(*(id *)(a1 + 40), "setDidSupersede:", v13);
  objc_msgSend(*(id *)(a1 + 48), "presentViewController:animated:completion:", v6, 1, 0);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);

}

void sub_1008584E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100858504(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  v4 = objc_msgSend(*(id *)(a1 + 40), "cause");
  if ((unint64_t)v4 >= 2)
  {
    if (v4 == (id)2)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
      v7 = v5;
      v6 = 1;
      goto LABEL_6;
    }
    if (v4 != (id)3)
      return;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
  v7 = v5;
  v6 = 0;
LABEL_6:
  objc_msgSend(v5, "dismissRidesharingSessionAndReturnToRoutePlanning:", v6);

}

uint64_t sub_100858598(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "openApp");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1008585C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1008585D0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentingViewController"));

  if (v3)
  {
    v4 = objc_loadWeakRetained(v1);
    objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

uint64_t sub_100858650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10085876C()
{
  id v0;

  v0 = objc_msgSend(objc_alloc((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 100);
  objc_msgSend(v0, "setHidesWhenStopped:", 1);
  return v0;
}

id sub_1008587A8()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("Error Reporting Issue [RAP]"), CFSTR("localized string not found"), 0));

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Error Reporting Issue Description [RAP]"), CFSTR("localized string not found"), 0));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("OK [RAP]"), CFSTR("localized string not found"), 0));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v1, v3, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v5, 0, 0));
  objc_msgSend(v6, "addAction:", v7);

  return v6;
}

void sub_10085890C(id a1)
{
  id v1;
  NSObject *v2;
  __CFString *v3;
  __CFString *v4;
  int v5;
  __CFString *v6;

  byte_1014D3650 = MGGetSInt32Answer(CFSTR("JwLB44/jEB8aFDpXQ16Tuw"), 0) == 2;
  v1 = sub_1008589F0();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1014D3650)
      v3 = CFSTR("YES");
    else
      v3 = CFSTR("NO");
    v4 = v3;
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Current device is notch device: %@", (uint8_t *)&v5, 0xCu);

  }
}

id sub_1008589F0()
{
  if (qword_1014D3670 != -1)
    dispatch_once(&qword_1014D3670, &stru_1011D9330);
  return (id)qword_1014D3668;
}

void sub_100858A70(id a1)
{
  id v1;
  NSObject *v2;
  __CFString *v3;
  __CFString *v4;
  int v5;
  __CFString *v6;

  byte_1014D3651 = SBSIsSystemApertureAvailable(a1);
  v1 = sub_1008589F0();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1014D3651)
      v3 = CFSTR("YES");
    else
      v3 = CFSTR("NO");
    v4 = v3;
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Current device is island device: %@", (uint8_t *)&v5, 0xCu);

  }
}

void sub_100858B40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFDeviceInfo");
  v2 = (void *)qword_1014D3668;
  qword_1014D3668 = (uint64_t)v1;

}

void sub_10085A4E4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 120));
  _Unwind_Resume(a1);
}

void sub_10085A510(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "navigationController"));

    if (v5)
    {
      objc_msgSend(a1[5], "stopAnimating");
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
      objc_msgSend(v6, "setTableHeaderView:", 0);

      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Error Communicating with Watch"), v7, 1));

      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10085A66C;
      v10[3] = &unk_1011AD938;
      v11 = a1[4];
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, v10));
      objc_msgSend(v8, "addAction:", v9);

      objc_msgSend(a1[4], "presentViewController:animated:completion:", v8, 1, 0);
    }
  }

}

void sub_10085A66C(uint64_t a1)
{
  id v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  v1 = objc_msgSend(v2, "popViewControllerAnimated:", 1);

}

void sub_10085A6A8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10085A738;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_10085A738(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10085A748(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10085A834;
  block[3] = &unk_1011B3398;
  objc_copyWeak(&v14, a1 + 6);
  v10 = v6;
  v13 = a1[5];
  v11 = a1[4];
  v12 = v5;
  v7 = v5;
  v8 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v14);
}

void sub_10085A834(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id *v10;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v10 = WeakRetained;
    if (*(_QWORD *)(a1 + 32))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "stopAnimating");
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "tableView"));
      objc_msgSend(v3, "setTableHeaderView:", 0);

      objc_storeStrong(v10 + 13, *(id *)(a1 + 48));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("ActiveTileGroupData")));

      if (v4)
      {
        v5 = objc_alloc((Class)GEOActiveTileGroup);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("ActiveTileGroupData")));
        v7 = objc_msgSend(v5, "initWithData:", v6);
        v8 = v10[14];
        v10[14] = v7;

      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "tableView"));
      objc_msgSend(v9, "reloadData");

    }
    WeakRetained = v10;
  }

}

void sub_10085AE34(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_10085AE60(id *a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    objc_msgSend(a1[4], "stopAnimating");
    objc_msgSend(a1[5], "setAccessoryView:", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "description"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Error fetching diagnostics string from Watch"), v4, 1));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, 0));
    objc_msgSend(v5, "addAction:", v6);

    objc_msgSend(a1[6], "presentViewController:animated:completion:", v5, 1, 0);
  }

}

void sub_10085AF48(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10085AFD8;
  v6[3] = &unk_1011ACAD0;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_10085AFD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10085AFE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10085B0F0;
  block[3] = &unk_1011D93A8;
  objc_copyWeak(&v16, (id *)(a1 + 64));
  v10 = v6;
  v15 = *(id *)(a1 + 56);
  v11 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 40);
  v13 = v5;
  v14 = *(_QWORD *)(a1 + 48);
  v7 = v5;
  v8 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v16);
}

void sub_10085B0F0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  MapsDebugFileExportController *v15;
  _QWORD v16[4];
  id v17;
  id v18;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "stopAnimating");
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage kitImageNamed:](UIImage, "kitImageNamed:", CFSTR("UIAccessoryButtonCheckmark")));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "imageWithRenderingMode:", 2));

      v5 = objc_msgSend(objc_alloc((Class)UIImageView), "initWithImage:", v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGreenColor](UIColor, "systemGreenColor"));
      objc_msgSend(v5, "setTintColor:", v6);

      objc_msgSend(v5, "sizeToFit");
      objc_msgSend(*(id *)(a1 + 48), "setAccessoryView:", v5);
      v7 = *(_QWORD *)(a1 + 56);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
      objc_msgSend(v8, "setString:", v7);

      NSLog(CFSTR("Paired Watch Diagnostic String: %@"), *(_QWORD *)(a1 + 56));
      v9 = NSTemporaryDirectory();
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByAppendingPathComponent:", CFSTR("Diagnostics.txt")));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v11));

      v13 = *(void **)(a1 + 56);
      v18 = 0;
      objc_msgSend(v13, "writeToURL:atomically:encoding:error:", v12, 1, 4, &v18);
      v14 = v18;
      if (!v14)
      {
        v15 = -[MapsDebugFileExportController initWithFileAtURL:presentingViewController:]([MapsDebugFileExportController alloc], "initWithFileAtURL:presentingViewController:", v12, *(_QWORD *)(a1 + 64));
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_10085B300;
        v16[3] = &unk_1011AC860;
        v17 = v12;
        -[MapsDebugFileExportController startWithCompletion:](v15, "startWithCompletion:", v16);

      }
    }
  }

}

void sub_10085B300(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v2, "removeItemAtURL:error:", *(_QWORD *)(a1 + 32), 0);

}

void sub_10085B5D0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;
  uint64_t Log;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  _QWORD v13[4];
  NSObject *v14;
  id v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  id v19;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v15 = 0;
  v4 = objc_msgSend(v2, "startNavigationWithDetails:error:", v3, &v15);
  v5 = v15;
  Log = GEOFindOrCreateLog(DefaultLoggingSubsystem, "NavdNavigationStateProvider");
  v7 = objc_claimAutoreleasedReturnValue(Log);
  v8 = v7;
  if ((v4 & 1) != 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Started navigation. details=%@", buf, 0xCu);
    }
    goto LABEL_8;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v10 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v17 = v10;
    v18 = 2112;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unable to start navigation. error=%@, details=%@", buf, 0x16u);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform"));
  v12 = objc_msgSend(v11, "isInternalInstall");

  if (v12)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10085B780;
    v13[3] = &unk_1011AC860;
    v14 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v13);
    v8 = v14;
LABEL_8:

  }
}

void sub_10085B780(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error: %@"), *(_QWORD *)(a1 + 32)));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Navigation failed to start [Internal Only]"), v5, 1));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", CFSTR("OK"), 0, 0));
  objc_msgSend(v1, "addAction:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication _maps_keyMapsSceneDelegate](UIApplication, "_maps_keyMapsSceneDelegate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "topMostPresentedViewController"));
  objc_msgSend(v4, "presentViewController:animated:completion:", v1, 1, 0);

}

void sub_10085BB9C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", a3));
  objc_msgSend(v6, "setViewModel:", v5);

}

MapViewModeGridButtonView *sub_10085BF5C(uint64_t a1)
{
  MapViewModeGridButtonView *v2;

  v2 = -[MapViewModeGridButtonView initWithFrame:]([MapViewModeGridButtonView alloc], "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  -[MapViewModeGridButtonView setTranslatesAutoresizingMaskIntoConstraints:](v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)(a1 + 32), "addSubview:", v2);
  return v2;
}

void sub_10085BFB4(id a1, UIView *a2)
{
  -[UIView removeFromSuperview](a2, "removeFromSuperview");
}

id sub_10085BFBC(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)UILayoutGuide);
  objc_msgSend(*(id *)(a1 + 32), "addLayoutGuide:", v2);
  return v2;
}

id sub_10085BFF8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeLayoutGuide:", a2);
}

void sub_10085CD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10085CD24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10085CD34(uint64_t a1)
{

}

id sub_10085CD3C(uint64_t a1, _BYTE *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  unsigned int v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v28;
  NSObject *v29;
  id v30;
  NSObject *v31;
  char *v32;
  id v33;
  NSObject *v34;
  void *v35;
  char *v36;
  void *v37;
  void *v38;
  void *v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  _QWORD v45[2];

  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collectionView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dataSource"));

  if (!v8)
  {
    v28 = sub_1004318FC();
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v41 = "+[RoutePlanningOutlineController defaultCollectionViewLayout]_block_invoke";
      v42 = 2080;
      v43 = "RoutePlanningOutlineController.m";
      v44 = 1024;
      LODWORD(v45[0]) = 69;
      WORD2(v45[0]) = 2080;
      *(_QWORD *)((char *)v45 + 6) = "controller != nil";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%s [%s:%d] Assertion: (%s)", buf, 0x26u);
    }

    if (sub_100A70734())
    {
      v30 = sub_1004318FC();
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = (char *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        *(_DWORD *)buf = 138412290;
        v41 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);

      }
    }
    v33 = sub_10085D13C();
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v36 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "collectionView"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "collectionView"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "dataSource"));
      *(_DWORD *)buf = 138478339;
      v41 = (const char *)v35;
      v42 = 2113;
      v43 = v36;
      v44 = 2113;
      v45[0] = v38;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "No controller for returning a collectionview layout section. layout: %{private}@, collectionView: %{private}@, dataSource: %{private}@", buf, 0x20u);

    }
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "outlineSectionAtIndex:", a2));
  v10 = objc_msgSend(v8, "_localSectionForGlobalSectionIndex:forSection:", a2, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layoutSectionAtIndex:layoutEnvironment:", v10, v6));

  v12 = objc_msgSend(v9, "wantsDefaultPaddingAboveSection");
  if (v10)
    v13 = 1;
  else
    v13 = v12 == 0;
  if (!v13 && objc_msgSend(v8, "_positionOfSection:", v9))
  {
    objc_msgSend(v11, "contentInsets");
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "collectionView"));
    if (sub_1002A8AA0(v20) == 5)
      v21 = 10.0;
    else
      v21 = 12.0;

    objc_msgSend(v11, "setContentInsets:", v21, v15, v17, v19);
  }
  if ((char *)objc_msgSend(v8, "totalAvailableSections") - 1 == a2)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 1.0));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension estimatedDimension:](NSCollectionLayoutDimension, "estimatedDimension:", 1.0));
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v22, v23));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutBoundarySupplementaryItem boundarySupplementaryItemWithLayoutSize:elementKind:alignment:](NSCollectionLayoutBoundarySupplementaryItem, "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v24, UICollectionElementKindSectionFooter, 4));
    v39 = v25;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v39, 1));
    objc_msgSend(v11, "setBoundarySupplementaryItems:", v26);

  }
  return v11;
}

id sub_10085D13C()
{
  if (qword_1014D3680 != -1)
    dispatch_once(&qword_1014D3680, &stru_1011D9568);
  return (id)qword_1014D3678;
}

void sub_10085D6D0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  int v5;
  const char *v6;

  v2 = sub_100432FBC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (*(_BYTE *)(a1 + 40))
      v4 = "hide";
    else
      v4 = "show";
    v5 = 136315138;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Will %s all sections...", (uint8_t *)&v5, 0xCu);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = *(_BYTE *)(a1 + 40);
}

void sub_10085DB54(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setHost:", v3);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sectionIdentifier"));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, v6);

}

BOOL sub_10085DD2C(id a1, RoutePlanningOutlineSection *a2, NSDictionary *a3)
{
  return -[RoutePlanningOutlineSection isActive](a2, "isActive", a3);
}

void sub_10085DEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_10085DEDC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sectionIdentifier"));
  v4 = objc_msgSend(v3, "numberOfSections");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v4));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setObject:forKeyedSubscript:", v5, v9);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setObject:forKeyedSubscript:", v6, v9);

  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v9, v8);

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v4;
}

void sub_10085E708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10085E720(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cellForItemAtIndexPath:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10085F07C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "RoutePlanningOutlineController");
  v2 = (void *)qword_1014D3678;
  qword_1014D3678 = (uint64_t)v1;

}

id sub_10085FC18()
{
  if (qword_1014D3690 != -1)
    dispatch_once(&qword_1014D3690, &stru_1011D9588);
  return (id)qword_1014D3688;
}

void sub_1008601C8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionSunsetSunriseMonitor");
  v2 = (void *)qword_1014D3688;
  qword_1014D3688 = (uint64_t)v1;

}

id sub_100860570(uint64_t a1)
{
  NSMutableSet *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  unint64_t v8;
  unint64_t v9;
  NSMutableArray *v10;
  NSMutableArray *v11;
  _UNKNOWN **v12;
  id v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = objc_opt_new(NSMutableSet);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  if (qword_1014D36A0 != -1)
    dispatch_once(&qword_1014D36A0, &stru_1011D95C8);
  v3 = (id)qword_1014D3698;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i), "integerValue", (_QWORD)v15);
        if ((v8 & a1) != 0)
        {
          v9 = v8;
          v10 = objc_opt_new(NSMutableArray);
          v11 = v10;
          v12 = &off_10126F910;
          switch(v9)
          {
            case 1uLL:
              goto LABEL_13;
            case 2uLL:
              -[NSMutableArray addObject:](v10, "addObject:", &off_10126F928);
              v12 = &off_10126F940;
              goto LABEL_13;
            case 4uLL:
              v12 = &off_10126F958;
              goto LABEL_13;
            case 8uLL:
              v12 = &off_10126F970;
LABEL_13:
              -[NSMutableArray addObject:](v11, "addObject:", v12);
              break;
            default:
              break;
          }
          -[NSMutableSet addObjectsFromArray:](v2, "addObjectsFromArray:", v11);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }

  v13 = -[NSMutableSet copy](v2, "copy");
  return v13;
}

void sub_100860770(id a1)
{
  void *v1;

  v1 = (void *)qword_1014D3698;
  qword_1014D3698 = (uint64_t)&off_101273E30;

}

id sub_1008612AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setupTrayLayoutAndPerformScrollTest");
}

id sub_100861340(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_expandCollectionsList");
}

id sub_1008613BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_openFirstCollection");
}

id sub_10086144C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_expandCollection");
}

id sub_1008614FC(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100861550;
  v3[3] = &unk_1011AC860;
  v3[4] = v1;
  return objc_msgSend(v1, "_dispatchAfterShortDelay:", v3);
}

id sub_100861550(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_dismissCollection");
}

id sub_100861558(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_dismissCollection");
}

void sub_1008615DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "testCoordinator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pptTestScrollView"));

  v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10086166C;
  v5[3] = &unk_1011D95F0;
  v5[4] = v4;
  objc_msgSend(v4, "_performScrollTestOfScrollView:completion:", v3, v5);

}

id sub_10086166C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "results"));
  objc_msgSend(v5, "addEntriesFromDictionary:", v4);

  return objc_msgSend(*(id *)(a1 + 32), "finishedTest");
}

uint64_t sub_100861754(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100861848(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10086189C(id a1)
{
  MapsSuggestionsNavdLBALocationManager *v1;
  dispatch_queue_attr_t v2;
  dispatch_queue_t v3;
  MapsSuggestionsNavdLBALocationManager *v4;
  void *v5;
  NSObject *v6;

  v1 = [MapsSuggestionsNavdLBALocationManager alloc];
  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = objc_claimAutoreleasedReturnValue(v2);
  v3 = dispatch_queue_create("MapsSuggestionsNavdLBALocationManagerQueue", v6);
  v4 = -[MapsSuggestionsNavdLBALocationManager initWithName:queue:](v1, "initWithName:queue:", CFSTR("MapsSuggestionsNavdLBALocationManager"), v3);
  v5 = (void *)qword_1014D36A8;
  qword_1014D36A8 = (uint64_t)v4;

}

BOOL sub_100861E80(id a1, id a2, NSDictionary *a3)
{
  id v3;
  uint64_t v4;
  char isKindOfClass;

  v3 = a2;
  v4 = objc_opt_class(UINavigationBar);
  isKindOfClass = objc_opt_isKindOfClass(v3, v4);

  return (isKindOfClass & 1) == 0;
}

uint64_t sub_1008623CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1008650B0(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(WeakRetained, "didPresentContainee:finished:", *(_QWORD *)(a1 + 40), 1);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
  v3 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(v3, "didResignContainee:finished:", *(_QWORD *)(a1 + 48), 1);

  objc_msgSend(*(id *)(a1 + 40), "didBecomeCurrent");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v4, "setUserInteractionEnabled:", 1);

  v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(v5, "transitionEnded");

  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    (*(void (**)(void))(v6 + 16))();
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  objc_msgSend(*(id *)(a1 + 32), "dequeueWaitingContainees");
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t sub_100865194(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t result;
  _QWORD v18[5];

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(WeakRetained, "didPresentContainee:finished:", *(_QWORD *)(a1 + 40), 1);

  v3 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(v3, "didResignContainee:finished:", *(_QWORD *)(a1 + 48), 1);

  objc_msgSend(*(id *)(a1 + 40), "didBecomeCurrent");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v4, "setUserInteractionEnabled:", 1);

  v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(v5, "transitionEnded");

  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    (*(void (**)(void))(v6 + 16))();
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  v7 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "topMostPresentedViewController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transitionCoordinator"));

  v10 = *(id **)(a1 + 32);
  if (v9)
  {
    v11 = objc_loadWeakRetained(v10 + 3);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "topMostPresentedViewController"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "transitionCoordinator"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100865368;
    v18[3] = &unk_1011AEDC8;
    v18[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v13, "animateAlongsideTransition:completion:", 0, v18);

  }
  else
  {
    objc_msgSend(v10, "dequeueWaitingContainees");
  }
  v14 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "view"));
  objc_msgSend(v15, "setNeedsLayout");

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cardPresentationController"));
  objc_msgSend(*(id *)(a1 + 40), "setModalTransitionStyle:", objc_msgSend(v16, "modalDismissStyle"));

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

id sub_100865368(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dequeueWaitingContainees");
}

id sub_100865370(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_addTheModalPresenter");
}

void sub_100865378(uint64_t a1)
{
  void *v2;
  __int128 v3;
  id WeakRetained;
  _OWORD v5[3];

  v2 = *(void **)(a1 + 32);
  v3 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v5[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v5[1] = v3;
  v5[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  objc_msgSend(v2, "setTransform:", v5);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 24));
  objc_msgSend(WeakRetained, "updateMapEdgeInsets");

}

id *sub_1008653D8(id *result)
{
  id *v1;
  double v2;
  double v3;
  id v4;
  CGAffineTransform *v5;
  double v6;
  double v7;
  CGAffineTransform v8;
  CGAffineTransform v9;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;

  v1 = result;
  switch((unint64_t)result[7])
  {
    case 0uLL:
      objc_msgSend(result[5], "deltaHeight");
      v3 = *((double *)v1 + 8) - *((double *)v1 + 9);
      if (v3 < 0.0)
        v3 = 0.0;
      CGAffineTransformMakeTranslation(&v15, 0.0, v2 + v3);
      v4 = v1[4];
      v14 = v15;
      v5 = &v14;
      goto LABEL_10;
    case 1uLL:
      objc_msgSend(result[6], "willMoveToParentViewController:", 0);
      CGAffineTransformMakeTranslation(&v11, 0.0, *((CGFloat *)v1 + 8));
      v4 = v1[4];
      v10 = v11;
      v5 = &v10;
      goto LABEL_10;
    case 2uLL:
      CGAffineTransformMakeScale(&v13, 0.970000029, 0.970000029);
      v4 = v1[4];
      v12 = v13;
      v5 = &v12;
      goto LABEL_10;
    case 3uLL:
      objc_msgSend(result[6], "willMoveToParentViewController:", 0);
      objc_msgSend(v1[4], "bounds");
      v7 = -v6;
      if (*((_BYTE *)v1 + 81))
        v7 = v6;
      CGAffineTransformMakeTranslation(&v9, v7, 0.0);
      v4 = v1[4];
      v8 = v9;
      v5 = &v8;
LABEL_10:
      result = (id *)objc_msgSend(v4, "setTransform:", v5, *(_OWORD *)&v8.a, *(_OWORD *)&v8.c, *(_OWORD *)&v8.tx);
      break;
    default:
      return result;
  }
  return result;
}

void sub_10086551C(uint64_t a1, uint64_t a2)
{
  void *v3;
  id WeakRetained;
  id v6;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 24));
    objc_msgSend(v3, "didMoveToParentViewController:", WeakRetained);

    objc_msgSend(*(id *)(a1 + 32), "didChangeLayout:", *(_QWORD *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 48), "setUserInteractionEnabled:", 1);
    v6 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 24));
    objc_msgSend(v6, "didPresentContainee:finished:", *(_QWORD *)(a1 + 32), a2);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1008655A8(uint64_t a1, uint64_t a2)
{
  NSMutableArray *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id WeakRetained;
  void *v18;
  __int128 v19;
  id v20;
  unsigned int v21;
  void *v22;
  _OWORD v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  if (*(_BYTE *)(a1 + 88) && !*(_BYTE *)(a1 + 89) && !*(_QWORD *)(a1 + 32))
    objc_msgSend(*(id *)(a1 + 40), "setModalPresenter:", *(_QWORD *)(a1 + 48));
  if (*(_BYTE *)(a1 + 89) || !*(_BYTE *)(a1 + 88))
  {
    v21 = a2;
    v4 = objc_opt_new(NSMutableArray);
    v5 = *(id *)(a1 + 56);
    if (!v5)
      goto LABEL_20;
    while (1)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = v5;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "constraints"));
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      if (!v7)
        goto LABEL_19;
      v8 = v7;
      v9 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstItem"));
          v13 = v12;
          if (v12 == *(void **)(a1 + 56))
          {

          }
          else
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "secondItem"));
            v15 = *(void **)(a1 + 56);

            if (v14 != v15)
              continue;
          }
          -[NSMutableArray addObject:](v4, "addObject:", v11);
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v8);
LABEL_19:

      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "superview"));
      v5 = (id)v16;
      if (!v16)
      {
LABEL_20:
        +[NSLayoutConstraint deactivateConstraints:](NSLayoutConstraint, "deactivateConstraints:", v4);
        objc_msgSend(*(id *)(a1 + 56), "removeFromSuperview");
        WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 64) + 24));
        objc_msgSend(WeakRetained, "removeCardforViewController:", *(_QWORD *)(a1 + 48));

        v18 = *(void **)(a1 + 56);
        v19 = *(_OWORD *)&CGAffineTransformIdentity.c;
        v23[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
        v23[1] = v19;
        v23[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
        objc_msgSend(v18, "setTransform:", v23);
        objc_msgSend(*(id *)(a1 + 48), "removeFromParentViewController");
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 8), "removeObjectForKey:", *(_QWORD *)(a1 + 48));

        a2 = v21;
        break;
      }
    }
  }
  if (*(_BYTE *)(a1 + 90) && !*(_BYTE *)(a1 + 91))
    objc_msgSend(*(id *)(a1 + 72), "setModalPresenter:", 0);
  if (*(_BYTE *)(a1 + 92))
    objc_msgSend(*(id *)(a1 + 48), "shoulDismissForVerticalSwipe_nonUIKitCardsOnly");
  v20 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 64) + 24));
  objc_msgSend(v20, "didResignContainee:finished:", *(_QWORD *)(a1 + 48), a2);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

void sub_10086583C(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  uint64_t Log;
  NSObject *v6;
  uint8_t v7[16];
  _QWORD block[5];
  _QWORD v9[5];

  if (*(_BYTE *)(a1 + 56))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1008659AC;
    v9[3] = &unk_1011AC860;
    v9[4] = *(_QWORD *)(a1 + 32);
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v9);
  }
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(WeakRetained, "transitionEnded");

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(void))(v3 + 16))();
  if (*(_BYTE *)(a1 + 57))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1008659B4;
    block[3] = &unk_1011AC860;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
    objc_msgSend(*(id *)(a1 + 32), "dequeueWaitingContainees");
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, 1);
  Log = GEOFindOrCreateLog(objc_msgSend(CFSTR("com.apple.Maps"), "UTF8String"), "ContainerTransistionManager");
  v6 = objc_claimAutoreleasedReturnValue(Log);
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)v7 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CardPresentationDuration", "", v7, 2u);
  }

}

id sub_1008659AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_addTheModalPresenter");
}

id sub_1008659B4(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "dequeueWaitingContainees");
}

uint64_t sub_1008659C4(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void sub_1008659DC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
  objc_msgSend(v3, "setNeedsLayout");

  v5 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
  objc_msgSend(v4, "layoutIfNeeded");

}

uint64_t sub_100865A64(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
  return result;
}

void sub_100865A94(_QWORD *a1)
{
  void *v2;
  id WeakRetained;

  (*(void (**)(void))(a1[5] + 16))();
  (*(void (**)(void))(a1[6] + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 24));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
  objc_msgSend(v2, "layoutIfNeeded");

}

uint64_t sub_100865AF8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

UIColor *__cdecl sub_1008662E0(id a1, UITraitCollection *a2)
{
  void *v2;

  if ((id)-[UITraitCollection userInterfaceStyle](a2, "userInterfaceStyle") == (id)2)
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemWhiteColor](UIColor, "systemWhiteColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
  return (UIColor *)v2;
}

BOOL sub_10086650C(id a1, GEOComposedRouteAdvisory *a2, unint64_t a3, BOOL *a4)
{
  return -[GEOComposedRouteAdvisory isClickable](a2, "isClickable", a3, a4);
}

void sub_100866D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100866D88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100866D98(uint64_t a1)
{

}

void sub_100866DA0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_100866DB0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, *(_QWORD *)(a1 + 40));
}

uint64_t sub_100866DC0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  id WeakRetained;
  id v7;
  uint64_t result;
  uint8_t v9[16];

  v2 = sub_1004316CC();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)v9 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "ParseRichText", "", v9, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v7 = objc_msgSend(WeakRetained, "_mergeRichTextCollectionDescription:itemDescriptions:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 32));

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v7);
  return result;
}

id sub_100866FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a3, a2);
}

void sub_100867290(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  int v10;
  id v11;

  v6 = a2;
  v7 = a4;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  if (!v6 || v7)
  {
    v8 = sub_1004316CC();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error parsing description HTML: %@", (uint8_t *)&v10, 0xCu);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100867824(uint64_t a1)
{
  MapsActivity *v2;
  id v3;
  _QWORD block[4];
  id v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc_init(MapsActivity);
    -[MapsActivity setDirectionsPlan:](v2, "setDirectionsPlan:", *(_QWORD *)(a1 + 32));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1008678EC;
    block[3] = &unk_1011AC860;
    v5 = (id)objc_claimAutoreleasedReturnValue(-[MapsActivity data](v2, "data"));
    v3 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  else
  {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1011D9890);
  }
}

void sub_1008678EC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  v2 = sub_10043188C();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "_saveDirectionPlan: will save plan", v6, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "setObject:forKey:", *(_QWORD *)(a1 + 32), CFSTR("NavigationUserActivityDefault"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v5, "removeObjectForKey:", CFSTR("NavigationRestorationAttempts"));

}

void sub_1008679A4(id a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v5[16];

  v1 = sub_10043188C();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "_saveDirectionPlan: will remove saved data", v5, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v3, "removeObjectForKey:", CFSTR("NavigationUserActivityDefault"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "removeObjectForKey:", CFSTR("NavigationRestorationAttempts"));

}

void sub_100868054(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100868720(id a1, id a2, RAPPlacecardImageryQuestion *a3)
{
  RAPPlacecardImageryQuestion *v3;

  v3 = a3;
  -[RAPQuestion _setComplete:](v3, "_setComplete:", -[RAPPlacecardImageryQuestion isComplete](v3, "isComplete"));

}

void sub_100868EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100868ECC(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  void *v6;
  id v7;

  v7 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!a3 && objc_msgSend(v7, "count"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
      objc_msgSend(WeakRetained, "updateWithReverseGeocodedMapItem:", v6);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1008691FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10086980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100869828(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v7;
  uint64_t v8;
  char isKindOfClass;

  v7 = a2;
  v8 = objc_opt_class(NSTextAttachment);
  isKindOfClass = objc_opt_isKindOfClass(v7, v8);

  if ((isKindOfClass & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
}

void sub_100869BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100869C00(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100869C10(uint64_t a1)
{

}

void sub_100869C18(uint64_t a1, void *a2)
{
  uint64_t v4;
  char isKindOfClass;
  void *v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  id v14;

  v14 = a2;
  v4 = objc_opt_class(NSTextAttachment);
  isKindOfClass = objc_opt_isKindOfClass(v14, v4);
  v6 = v14;
  if ((isKindOfClass & 1) != 0)
  {
    v7 = v14;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "image"));
    objc_msgSend(v8, "size");
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "image"));
    objc_msgSend(v11, "size");
    v13 = v12;

    if (v10 > v13)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

    v6 = v14;
  }

}

id sub_10086A018(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateLabel");
}

void sub_10086B11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
  uint64_t v9;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v9 - 104));
  _Unwind_Resume(a1);
}

void sub_10086B138(id *a1)
{
  id *v2;
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  int v23;
  id v24;

  v2 = a1 + 7;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "currentContent"));
    v6 = objc_msgSend(v5, "mutableCopy");

    v7 = objc_msgSend(a1[4], "row");
    if (v7 < objc_msgSend(v6, "count")
      && (v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", v7)),
          v9 = a1[5],
          v8,
          v8 == v9))
    {
      objc_msgSend(v6, "removeObjectAtIndex:", v7);
      v12 = objc_msgSend(v6, "copy");
      v13 = (void *)v4[17];
      v4[17] = v12;

      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tableView"));
      v24 = a1[4];
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1));
      -[NSObject deleteRowsAtIndexPaths:withRowAnimation:](v11, "deleteRowsAtIndexPaths:withRowAnimation:", v14, 100);

    }
    else
    {
      v10 = sub_1004315EC();
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v23 = (int)v7;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Wrong collection item found at index %d after confirming deletion", buf, 8u);
      }
    }

    v15 = (void *)v4[15];
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", a1[5]));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10086B3B8;
    v17[3] = &unk_1011D9920;
    objc_copyWeak(&v21, v2);
    v20 = a1[6];
    v18 = a1[4];
    v19 = a1[5];
    objc_msgSend(v15, "removeObjects:completion:", v16, v17);

    objc_destroyWeak(&v21);
  }

}

void sub_10086B39C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10086B3B8(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  uint64_t v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = WeakRetained;
    if (v5)
    {
      (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, a2 == 0);
      WeakRetained = v6;
    }
    if (!a2)
    {
      objc_msgSend(WeakRetained, "sendAnalyticsForDataAtIndexPath:object:action:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 2009);
      WeakRetained = v6;
    }
  }

}

uint64_t sub_10086B428(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((_DWORD)a2)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_10086C124(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10086C140(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id WeakRetained;
  uint8_t v7[16];

  v3 = a2;
  v4 = sub_100432EDC();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "RDS _deleteAction", v7, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "deleteRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), v3);

}

void sub_10086C2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10086C314(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "deleteRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), 0);
    WeakRetained = v3;
  }

}

void sub_10086C414(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10086C430(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "shareRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), &stru_1011D9940);

}

void sub_10086C5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10086C5C4(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "shareRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), 0);
    WeakRetained = v3;
  }

}

void sub_10086C740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10086C768(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v5 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = *(_QWORD *)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10086C804;
  v9[3] = &unk_1011ADA00;
  v10 = v5;
  v8 = v5;
  objc_msgSend(WeakRetained, "editNameRowAtIndexPath:completion:", v7, v9);

}

uint64_t sub_10086C804(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10086C92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10086C950(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "editNameRowAtIndexPath:completion:", *(_QWORD *)(a1 + 32), 0);
    WeakRetained = v3;
  }

}

id sub_10086D404(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10086DCC8(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  NSObject *v16;
  uint8_t v17[16];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "cleanUp");

  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 112))
  {
    *(_DWORD *)(v4 + 8) = 181;
    v5 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "muid")));
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 24);
    *(_QWORD *)(v6 + 24) = v5;

    v8 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(v9 + 32);
    *(_QWORD *)(v9 + 32) = v8;

    v11 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 48), "muid"));
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(v12 + 64);
    *(_QWORD *)(v12 + 64) = v11;

    v14 = objc_loadWeakRetained(v2);
    objc_msgSend(v14, "logEvent");

    v15 = sub_1004316CC();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged featured guide tap.", v17, 2u);
    }

  }
}

void sub_10086DE94(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  uint8_t v8[16];

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "cleanUp");

  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 112))
  {
    *(_DWORD *)(v4 + 8) = 147;
    v5 = objc_loadWeakRetained(v2);
    objc_msgSend(v5, "logEvent");

    v6 = sub_1004316CC();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged city selector tap.", v8, 2u);
    }

  }
}

void sub_10086DFE0(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 210;
  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "logEvent");

  v5 = sub_1004316CC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged city guides more button tapped.", v7, 2u);
  }

}

void sub_10086E124(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  uint8_t buf[16];

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 21;
  v4 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "muid")));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = v4;

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "resultProviderID")));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 72);
  *(_QWORD *)(v8 + 72) = v7;

  v10 = objc_loadWeakRetained(v2);
  objc_msgSend(v10, "logEvent");

  v11 = sub_1004316CC();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged reveal", buf, 2u);
  }

}

void sub_10086E308(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  uint8_t buf[16];

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 177;
  v4 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), objc_msgSend(*(id *)(a1 + 40), "muid")));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = v4;

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "resultProviderID")));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 72);
  *(_QWORD *)(v8 + 72) = v7;

  v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56)));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 48);
  *(_QWORD *)(v11 + 48) = v10;

  v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 56);
  *(_QWORD *)(v14 + 56) = v13;

  v16 = objc_loadWeakRetained(v2);
  objc_msgSend(v16, "logEvent");

  v17 = sub_1004316CC();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged city guide tap.", buf, 2u);
  }

}

void sub_10086E524(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  uint8_t v19[16];

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 2102;
  v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "muid")));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 64);
  *(_QWORD *)(v5 + 64) = v4;

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "resultProviderID")));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 72);
  *(_QWORD *)(v8 + 72) = v7;

  v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56)));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 56);
  *(_QWORD *)(v14 + 56) = v13;

  v16 = objc_loadWeakRetained(v2);
  objc_msgSend(v16, "logEvent");

  v17 = sub_1004316CC();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged publisher tap.", v19, 2u);
  }

}

void sub_10086E768(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  uint8_t v22[16];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 187;
  v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "muid")));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v4;

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 48), "muid")));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 64);
  *(_QWORD *)(v8 + 64) = v7;

  v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 32);
  *(_QWORD *)(v11 + 32) = v10;

  v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

  v16 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72)));
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(v17 + 56);
  *(_QWORD *)(v17 + 56) = v16;

  v19 = objc_loadWeakRetained(v2);
  objc_msgSend(v19, "logEvent");

  v20 = sub_1004316CC();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged latest guide tap.", v22, 2u);
  }

}

void sub_10086E9CC(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  uint8_t v22[16];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 188;
  v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "muid")));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v4;

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 48), "muid")));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 64);
  *(_QWORD *)(v8 + 64) = v7;

  v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 32);
  *(_QWORD *)(v11 + 32) = v10;

  v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 48);
  *(_QWORD *)(v14 + 48) = v13;

  v16 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72)));
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(v17 + 56);
  *(_QWORD *)(v17 + 56) = v16;

  v19 = objc_loadWeakRetained(v2);
  objc_msgSend(v19, "logEvent");

  v20 = sub_1004316CC();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged temporal guide tap.", v22, 2u);
  }

}

void sub_10086EC30(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  uint8_t v22[16];

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 2198;
  v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "muid")));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v4;

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 48), "muid")));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 64);
  *(_QWORD *)(v8 + 64) = v7;

  v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 32);
  *(_QWORD *)(v11 + 32) = v10;

  v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 48);
  *(_QWORD *)(v14 + 48) = v13;

  v16 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72)));
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(v17 + 56);
  *(_QWORD *)(v17 + 56) = v16;

  v19 = objc_loadWeakRetained(v2);
  objc_msgSend(v19, "logEvent");

  v20 = sub_1004316CC();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged editor picked guide tap.", v22, 2u);
  }

}

void sub_10086EE60(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  uint8_t v13[16];

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 49;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(a1 + 40));
  v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56)));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 48);
  *(_QWORD *)(v5 + 48) = v4;

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 56);
  *(_QWORD *)(v8 + 56) = v7;

  v10 = objc_loadWeakRetained(v2);
  objc_msgSend(v10, "logEvent");

  v11 = sub_1004316CC();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged filter tap.", v13, 2u);
  }

}

void sub_10086F010(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  uint8_t v13[16];
  _QWORD v14[4];
  id v15;
  id v16;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 204;
  v4 = objc_alloc_init((Class)NSMutableString);
  v5 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10086F148;
  v14[3] = &unk_1011D99E0;
  v15 = v5;
  v6 = v4;
  v16 = v6;
  objc_msgSend(v15, "enumerateObjectsUsingBlock:", v14);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v6;
  v9 = v6;

  v10 = objc_loadWeakRetained(v2);
  objc_msgSend(v10, "logEvent");

  v11 = sub_1004316CC();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged filtered guide list displayed.", v13, 2u);
  }

}

void sub_10086F148(uint64_t a1, void *a2, char *a3)
{
  void *v5;
  id v6;
  char *v7;
  void *v8;
  id v9;
  const __CFString *v10;
  id v11;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (char *)objc_msgSend(v5, "count") - 1;
  v8 = *(void **)(a1 + 40);
  v9 = objc_msgSend(v6, "muid");

  if (v7 == a3)
    v10 = CFSTR("%llu");
  else
    v10 = CFSTR("%llu,");
  v11 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v10, v9));
  objc_msgSend(v8, "appendString:", v11);

}

void sub_10086F318(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  uint8_t v22[16];

  v2 = (id *)(a1 + 64);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 244;
  v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "muid")));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v4;

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 48), "muid")));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 64);
  *(_QWORD *)(v8 + 64) = v7;

  v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 88)));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 32);
  *(_QWORD *)(v11 + 32) = v10;

  v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72)));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

  v16 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 80)));
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(v17 + 56);
  *(_QWORD *)(v17 + 56) = v16;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(a1 + 56));
  v19 = objc_loadWeakRetained(v2);
  objc_msgSend(v19, "logEvent");

  v20 = sub_1004316CC();
  v21 = objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged tapped filtered guide.", v22, 2u);
  }

}

void sub_10086F528(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 7;
  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "logEvent");

  v5 = sub_1004316CC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged scroll up.", v7, 2u);
  }

}

void sub_10086F66C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 8;
  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "logEvent");

  v5 = sub_1004316CC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged scroll down.", v7, 2u);
  }

}

void sub_10086F7B0(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "cleanUp");

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 4;
  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "logEvent");

  v5 = sub_1004316CC();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "GuidesHomeAnalyticsManager logged guide home closed.", v7, 2u);
  }

}

void sub_100870980(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  SearchResult *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  SearchFieldItem *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  v5 = a2;
  v6 = a3;
  if (!v6 && objc_msgSend(v5, "count"))
  {
    v26 = a1;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v5, "count")));
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (!v10)
    {
      v12 = 0;
      goto LABEL_20;
    }
    v11 = v10;
    v12 = 0;
    v13 = *(_QWORD *)v28;
    while (1)
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v28 != v13)
          objc_enumerationMutation(v9);
        v15 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v14);
        v16 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v15);
        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_displayMapRegion"));
        v18 = (void *)v17;
        if (v12)
        {
          v19 = GEOMapRegionUnion(v12, v17);
          v20 = objc_claimAutoreleasedReturnValue(v19);

          v12 = (void *)v20;
          if (!v16)
            goto LABEL_13;
LABEL_12:
          objc_msgSend(v8, "addObject:", v16);
          goto LABEL_13;
        }
        v12 = (void *)v17;
        if (v16)
          goto LABEL_12;
LABEL_13:

        v14 = (char *)v14 + 1;
      }
      while (v11 != v14);
      v21 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      v11 = v21;
      if (!v21)
      {
LABEL_20:

        v22 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:boundingMapRegion:](SearchInfo, "searchInfoWithResults:boundingMapRegion:", v8, v12));
        v23 = objc_alloc_init(SearchFieldItem);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v26 + 32), "objectForKeyedSubscript:", CFSTR("MKPlaceBrandUserActivityName")));
        -[SearchFieldItem setSearchString:](v23, "setSearchString:", v24);

        v25 = *(_QWORD *)(v26 + 40);
        if (v25)
          (*(void (**)(uint64_t, SearchFieldItem *, void *))(v25 + 16))(v25, v23, v22);

        v6 = 0;
        goto LABEL_23;
      }
    }
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v7 + 16))(v7, 0, 0);
LABEL_23:

}

void sub_1008715FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100871624(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100871634(uint64_t a1)
{

}

void sub_10087163C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "locationDisplayString"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10087180C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100873820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 176));
  _Unwind_Resume(a1);
}

id sub_10087384C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ((objc_msgSend(WeakRetained, "isUserLocation") & 1) != 0)
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "keyColor"));
  else
    v5 = objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  v6 = (void *)v5;

  return v6;
}

void sub_100873EF8(id a1)
{
  KeyboardObserver *v1;
  void *v2;

  v1 = objc_alloc_init(KeyboardObserver);
  v2 = (void *)qword_1014D36C0;
  qword_1014D36C0 = (uint64_t)v1;

}

void sub_100874BF0(uint64_t a1, void *a2)
{
  id v3;
  SearchResult *v4;
  SearchFieldItem *v5;
  void *v6;
  void *v7;
  void *v8;
  SearchResult *v9;

  v3 = a2;
  v4 = -[SearchResult initWithMapItem:]([SearchResult alloc], "initWithMapItem:", v3);

  v5 = objc_alloc_init(SearchFieldItem);
  -[SearchFieldItem setSearchResult:](v5, "setSearchResult:", v4);
  v9 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[SearchInfo searchInfoWithResults:](SearchInfo, "searchInfoWithResults:", v6));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appCoordinator"));
  objc_msgSend(v8, "openSearch:andResults:", v5, v7);

}

void sub_10087583C(id a1)
{
  UserProfileLinkRatingsProvider *v1;
  void *v2;

  v1 = objc_alloc_init(UserProfileLinkRatingsProvider);
  v2 = (void *)qword_1014D36C8;
  qword_1014D36C8 = (uint64_t)v1;

}

void sub_100875B84(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100875BA0(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_updateLinkWithCount:notifyObservers:", objc_msgSend(v4, "count"), 1);

}

id sub_1008760A8()
{
  if (qword_1014D36E0 != -1)
    dispatch_once(&qword_1014D36E0, &stru_1011D9AF0);
  return (id)qword_1014D36D8;
}

void sub_100876830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100876854(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  id v15;

  v2 = sub_1008760A8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v14 = 134349056;
    v15 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Daily usage limit timer fired; disabling VIO session for the rest of the day",
      (uint8_t *)&v14,
      0xCu);

  }
  v5 = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = v5;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentEntry"));
    objc_msgSend(v7, "dailyUsageLimit");
    v9 = v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentEntry"));
    objc_msgSend(v10, "setCurrentUsage:", v9);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentEntry"));
    objc_msgSend(v11, "setLastStartDate:", 0);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentEntry"));
    objc_msgSend(v12, "save");

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stateManager"));
    objc_msgSend(v13, "recordSessionDisableEvent:", 2);

  }
}

void sub_100876F44(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  void *v6;
  VIOSessionDailyUsageEntry *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  int v12;
  id v13;

  v2 = sub_1008760A8();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v12 = 134349056;
    v13 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}p] Detected calendar day changed; resetting daily usage limit",
      (uint8_t *)&v12,
      0xCu);

  }
  v5 = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "setUsageLimitTimer:", 0);
    v7 = objc_opt_new(VIOSessionDailyUsageEntry);
    objc_msgSend(v6, "setCurrentEntry:", v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentEntry"));
    objc_msgSend(v8, "save");

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "session"));
    v10 = objc_msgSend(v9, "state");

    if (v10 == (id)1)
    {
      objc_msgSend(v6, "startUsageLimitTimer");
    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stateManager"));
      objc_msgSend(v11, "resetSessionDisableEvent:", 2);

    }
  }

}

void sub_100877130(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (v1 == 1)
    objc_msgSend(WeakRetained, "startUsageLimitTimer");
  else
    objc_msgSend(WeakRetained, "stopUsageLimitTimer");

}

void sub_100877200(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VIOSessionDailyUsageMonitor");
  v2 = (void *)qword_1014D36D8;
  qword_1014D36D8 = (uint64_t)v1;

}

void sub_1008774CC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_enqueueNewState:", *(_QWORD *)(a1 + 40));

}

void sub_1008775D8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1008775F4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_fireStateUpdate:", *(_QWORD *)(a1 + 40));

}

void sub_1008776B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "MapsPocketStateProvider");
  v2 = (void *)qword_1014D36E8;
  qword_1014D36E8 = (uint64_t)v1;

}

void sub_100877B98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100877C18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100878008(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1008788AC(id a1)
{
  VLFLocationManager *v1;
  void *v2;

  v1 = objc_alloc_init(VLFLocationManager);
  v2 = (void *)qword_1014D36F8;
  qword_1014D36F8 = (uint64_t)v1;

}

id sub_100878D28()
{
  if (qword_1014D3710 != -1)
    dispatch_once(&qword_1014D3710, &stru_1011D9C10);
  return (id)qword_1014D3708;
}

void sub_1008790F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100879114(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = sub_100878D28();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Location update disable timer fired; stopping location updates now",
      v5,
      2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_stopLocationUpdatesFromTimer");

}

void sub_100879604(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "VLFLocationManager");
  v2 = (void *)qword_1014D3708;
  qword_1014D3708 = (uint64_t)v1;

}

id sub_10087BA60()
{
  if (qword_1014D3720 != -1)
    dispatch_once(&qword_1014D3720, &stru_1011D9C30);
  return (id)qword_1014D3718;
}

void sub_10087C420(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.Maps", "PedestrianARSessionTransportTypeMonitor");
  v2 = (void *)qword_1014D3718;
  qword_1014D3718 = (uint64_t)v1;

}

void sub_10087E25C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue mainQueue](NSOperationQueue, "mainQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10087E2FC;
  v6[3] = &unk_1011AC8B0;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "addOperationWithBlock:", v6);

}

void sub_10087E2FC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "flowViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headerView"));
  objc_msgSend(v2, "setBannerImage:", v1);

}

void sub_10087EE60(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v4 = a3;
  v5 = *(id **)(a1 + 32);
  v11 = v4;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "analyticsBookingSession"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "description"));
    objc_msgSend(v6, "addErrorMessage:", v7);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reservationRequester"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "extension"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_containingAppIdentifer"));
    NSLog(CFSTR("There was an error opening application with bundle identifier '%@' for handling a user activity: %@"), v10, v11);

  }
  else
  {
    objc_msgSend(v5[1], "registerAppTracker:");
  }

}

id sub_10087F1A4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultDate"));
  objc_msgSend(v2, "requestAvailableBookingsWithDate:partySize:", v3, objc_msgSend(*(id *)(a1 + 32), "defaultPartySize"));

  return objc_msgSend(*(id *)(a1 + 32), "configureHeaderForBranding:", 1);
}

id sub_10087F274(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "kickoffRequests");
}

id sub_10087F2F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateReservationTableViewController");
}

id sub_10087F36C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "kickoffRequests");
}

id sub_10087F440(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleRequestedTimeCompletion");
}

void sub_10087F658(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errorController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "availableBookingsResponse"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "alertControllerForAvailableBookingsResponse:error:", v3, *(_QWORD *)(a1 + 48)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "message"));
  objc_msgSend(v4, "addErrorMessage:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
  objc_msgSend(v6, "setCurrentState:", 5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "flowViewController"));
  objc_msgSend(v7, "presentViewController:animated:completion:", v8, 1, 0);

}

void sub_10087F7D8(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _BOOL8 v21;
  void *v22;
  void *v23;
  double v24;
  uint64_t v25;
  void *v26;
  void *v27;
  double v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  unsigned __int8 v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;

  objc_msgSend(*(id *)(a1 + 32), "updateReservationTableViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
  if (+[RestaurantReservationErrorController shouldDisplayAlertForResponseWithBookReservationIntentCode:](RestaurantReservationErrorController, "shouldDisplayAlertForResponseWithBookReservationIntentCode:", objc_msgSend(v2, "code")))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reservationTableViewController"));
    v4 = objc_msgSend(v3, "contactRequirementsSatisfiable");

    if ((v4 & 1) != 0)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errorController"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "alertControllerForBookReservationResponse:error:", v6, 0));

      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "message"));
      objc_msgSend(v7, "addErrorMessage:", v8);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
      objc_msgSend(v9, "setCurrentState:", 5);

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "flowViewController"));
      objc_msgSend(v10, "presentViewController:animated:completion:", v2, 1, 0);

LABEL_8:
      goto LABEL_9;
    }
  }
  else
  {

  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
  if (v11)
  {
    v2 = (void *)v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
    v13 = objc_msgSend(v12, "code");

    if (!v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userBooking"));
      v16 = objc_msgSend(v15, "partySize");
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
      objc_msgSend(v17, "setTableSize:", v16);

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "userBooking"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "guestProvidedSpecialRequestText"));
      v21 = objc_msgSend(v20, "length") != 0;
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
      objc_msgSend(v22, "setAddedSpecialRequest:", v21);

      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeReservation"));
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "bookingDate"));

      objc_msgSend(v2, "timeIntervalSinceReferenceDate");
      v25 = 3600 * ((uint64_t)v24 / 3600);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
      objc_msgSend(v26, "setBlurredBookingTimestamp:", v25);

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v27, "timeIntervalSinceReferenceDate");
      v29 = 3600 * ((uint64_t)v28 / 3600);
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
      objc_msgSend(v30, "setBlurredReservationTimestamp:", v29);

      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
      objc_msgSend(v31, "setCurrentState:", 1);

      objc_msgSend(*(id *)(a1 + 32), "pushSuccessScreen");
      goto LABEL_8;
    }
  }
LABEL_9:
  v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
  v32 = objc_msgSend(v39, "code");
  if (v32 != (id)4)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
    if (objc_msgSend(v2, "code") != (id)3)
      goto LABEL_15;
  }
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reservationTableViewController"));
  v34 = objc_msgSend(v33, "contactRequirementsSatisfiable");

  if (v32 != (id)4)
  if ((v34 & 1) == 0)
  {
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
    objc_msgSend(v35, "addErrorMessage:", CFSTR("contact requirements were not satisfiable"));

    v36 = *(void **)(a1 + 32);
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "userActivity"));
    objc_msgSend(v36, "openAppWithActivity:", v38);

    v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "flowViewController"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "cardPresentationController"));
    objc_msgSend(v2, "dismiss:", 1);
LABEL_15:

  }
}

void sub_10087FCA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "errorController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bookReservationResponse"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "alertControllerForBookReservationResponse:error:", v3, *(_QWORD *)(a1 + 48)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "message"));
  objc_msgSend(v4, "addErrorMessage:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsBookingSession"));
  objc_msgSend(v6, "setCurrentState:", 5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "flowViewController"));
  objc_msgSend(v7, "presentViewController:animated:completion:", v8, 1, 0);

  objc_msgSend(*(id *)(a1 + 32), "updateReservationTableViewController");
}

void sub_100880694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1008806C0(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "flowViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "cardPresentationController"));
  objc_msgSend(v2, "dismiss:", 1);

}

void sub_100880718(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "openAppWithActivity:", v3);

  v7 = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "flowViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cardPresentationController"));
  objc_msgSend(v6, "dismiss:", 1);

}

void sub_10088083C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userCurrentBookingResponse"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userCurrentBookings"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bookingIdentifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "reservationSuccessViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userBooking"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bookingIdentifier"));
  v8 = objc_msgSend(v4, "isEqualToString:", v7);

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "setContentLikelyChanged:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "reservationSuccessViewController"));
    objc_msgSend(v9, "setUserBooking:", v10);

  }
}

id sub_1008809F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "extensionFlowHeaderViewDidTapDismiss:", 0);
}

void sub_100880DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100880DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  if (a2 != a3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "onTransitionFromState:toState:", a2, a3);

  }
}

id sub_1008811C8()
{
  if (qword_1014D3730 != -1)
    dispatch_once(&qword_1014D3730, &stru_1011D9D00);
  return (id)qword_1014D3728;
}

void sub_100881794(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "collection"));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    v3 = v4;
  }

}

id sub_100881AB4(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sections"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndex:", a2));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "layoutForSectionUsingTraitsEnvironment:usingWidth:", *(_QWORD *)(a1 + 32), *(double *)(a1 + 40)));
  return v6;
}

void sub_100882060(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  LoadingModeView *v6;
  void *v7;
  void *v8;
  LoadingModeView *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v14 = WeakRetained;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "loadingView"));
    if (v3)
    {
LABEL_5:

      WeakRetained = v14;
      goto LABEL_6;
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "apiController"));
    v5 = objc_msgSend(v4, "currentState");

    WeakRetained = v14;
    if (v5 == (id)1)
    {
      v6 = [LoadingModeView alloc];
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Loading ..."), CFSTR("localized string not found"), 0));
      v9 = -[LoadingModeView initWithTitle:](v6, "initWithTitle:", v8);
      objc_msgSend(v14, "setLoadingView:", v9);

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "loadingView"));
      objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contentView"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "loadingView"));
      objc_msgSend(v11, "addSubview:", v12);

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingView"));
      objc_msgSend(v13, "setAccessibilityIdentifier:", CFSTR("AllCollectionsLoadingView"));

      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "loadingView"));
      objc_msgSend(v14, "activateConstraintsForViewPinnedBelowHeader:", v3);
      goto LABEL_5;
    }
  }
LABEL_6:

}

